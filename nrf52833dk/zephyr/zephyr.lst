
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 57 00 20 d9 2e 01 00 c7 e6 01 00 ad 2e 01 00     .W. ............
  10:	ad 2e 01 00 ad 2e 01 00 ad 2e 01 00 00 00 00 00     ................
	...
  2c:	29 28 01 00 ad 2e 01 00 00 00 00 00 d5 27 01 00     )(...........'..
  3c:	ad 2e 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	d9 28 01 00 cb 05 02 00 d9 28 01 00 d9 28 01 00     .(.......(...(..
  50:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  60:	79 05 02 00 d9 28 01 00 d9 28 01 00 b1 05 02 00     y....(...(......
  70:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  80:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  90:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  a0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  b0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  c0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  d0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  e0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..
  f0:	d9 28 01 00 d9 28 01 00 d9 28 01 00 d9 28 01 00     .(...(...(...(..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f00c faea 	bl	c6f8 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <ocrypto_bigint_add256>:
     134:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     138:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     13c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     140:	185b      	adds	r3, r3, r1
     142:	eb54 040c 	adcs.w	r4, r4, ip
     146:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     14a:	414d      	adcs	r5, r1
     14c:	eb56 060c 	adcs.w	r6, r6, ip
     150:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     154:	414f      	adcs	r7, r1
     156:	eb58 080c 	adcs.w	r8, r8, ip
     15a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     15e:	eb59 0901 	adcs.w	r9, r9, r1
     162:	eb5a 0a0c 	adcs.w	sl, sl, ip
     166:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     16a:	4180      	sbcs	r0, r0
     16c:	3001      	adds	r0, #1
     16e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     172:	4770      	bx	lr

00000174 <ocrypto_bigint_sub256>:
     174:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     178:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     17c:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     180:	1a5b      	subs	r3, r3, r1
     182:	eb74 040c 	sbcs.w	r4, r4, ip
     186:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     18a:	418d      	sbcs	r5, r1
     18c:	eb76 060c 	sbcs.w	r6, r6, ip
     190:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     194:	418f      	sbcs	r7, r1
     196:	eb78 080c 	sbcs.w	r8, r8, ip
     19a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     19e:	eb79 0901 	sbcs.w	r9, r9, r1
     1a2:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     1a6:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     1aa:	4180      	sbcs	r0, r0
     1ac:	4240      	negs	r0, r0
     1ae:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b2:	4770      	bx	lr

000001b4 <ocrypto_bigint_cadd256>:
     1b4:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     1b8:	4252      	negs	r2, r2
     1ba:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1be:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1c2:	4017      	ands	r7, r2
     1c4:	19db      	adds	r3, r3, r7
     1c6:	ea18 0802 	ands.w	r8, r8, r2
     1ca:	eb54 0408 	adcs.w	r4, r4, r8
     1ce:	ea19 0902 	ands.w	r9, r9, r2
     1d2:	eb55 0509 	adcs.w	r5, r5, r9
     1d6:	ea1a 0a02 	ands.w	sl, sl, r2
     1da:	eb56 060a 	adcs.w	r6, r6, sl
     1de:	c078      	stmia	r0!, {r3, r4, r5, r6}
     1e0:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     1e4:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     1e8:	4017      	ands	r7, r2
     1ea:	417b      	adcs	r3, r7
     1ec:	ea18 0802 	ands.w	r8, r8, r2
     1f0:	eb54 0408 	adcs.w	r4, r4, r8
     1f4:	ea19 0902 	ands.w	r9, r9, r2
     1f8:	eb55 0509 	adcs.w	r5, r5, r9
     1fc:	ea1a 0a02 	ands.w	sl, sl, r2
     200:	eb56 060a 	adcs.w	r6, r6, sl
     204:	c078      	stmia	r0!, {r3, r4, r5, r6}
     206:	4180      	sbcs	r0, r0
     208:	3001      	adds	r0, #1
     20a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     20e:	4770      	bx	lr

00000210 <ocrypto_bigint_csub256>:
     210:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     214:	4252      	negs	r2, r2
     216:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     21a:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     21e:	4017      	ands	r7, r2
     220:	1bdb      	subs	r3, r3, r7
     222:	ea18 0802 	ands.w	r8, r8, r2
     226:	eb74 0408 	sbcs.w	r4, r4, r8
     22a:	ea19 0902 	ands.w	r9, r9, r2
     22e:	eb75 0509 	sbcs.w	r5, r5, r9
     232:	ea1a 0a02 	ands.w	sl, sl, r2
     236:	eb76 060a 	sbcs.w	r6, r6, sl
     23a:	c078      	stmia	r0!, {r3, r4, r5, r6}
     23c:	e890 0078 	ldmia.w	r0, {r3, r4, r5, r6}
     240:	e8b1 0780 	ldmia.w	r1!, {r7, r8, r9, sl}
     244:	4017      	ands	r7, r2
     246:	41bb      	sbcs	r3, r7
     248:	ea18 0802 	ands.w	r8, r8, r2
     24c:	eb74 0408 	sbcs.w	r4, r4, r8
     250:	ea19 0902 	ands.w	r9, r9, r2
     254:	eb75 0509 	sbcs.w	r5, r5, r9
     258:	ea1a 0a02 	ands.w	sl, sl, r2
     25c:	eb76 060a 	sbcs.w	r6, r6, sl
     260:	c078      	stmia	r0!, {r3, r4, r5, r6}
     262:	4180      	sbcs	r0, r0
     264:	4240      	negs	r0, r0
     266:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     26a:	4770      	bx	lr

0000026c <ocrypto_bigint_cswap256>:
     26c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
     270:	4252      	negs	r2, r2
     272:	f04f 0804 	mov.w	r8, #4

00000276 <cswap256_loop>:
     276:	e890 0030 	ldmia.w	r0, {r4, r5}
     27a:	e891 00c0 	ldmia.w	r1, {r6, r7}
     27e:	1ba3      	subs	r3, r4, r6
     280:	4013      	ands	r3, r2
     282:	1ae4      	subs	r4, r4, r3
     284:	18f6      	adds	r6, r6, r3
     286:	1beb      	subs	r3, r5, r7
     288:	4013      	ands	r3, r2
     28a:	1aed      	subs	r5, r5, r3
     28c:	18ff      	adds	r7, r7, r3
     28e:	c030      	stmia	r0!, {r4, r5}
     290:	c1c0      	stmia	r1!, {r6, r7}
     292:	f1b8 0801 	subs.w	r8, r8, #1
     296:	d1ee      	bne.n	276 <cswap256_loop>
     298:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
     29c:	4770      	bx	lr
     29e:	bf00      	nop

000002a0 <ocrypto_mul256_noframe>:
     2a0:	b500      	push	{lr}
     2a2:	e892 07dc 	ldmia.w	r2, {r2, r3, r4, r6, r7, r8, r9, sl}
     2a6:	e92d 07dc 	stmdb	sp!, {r2, r3, r4, r6, r7, r8, r9, sl}
     2aa:	e8b1 5780 	ldmia.w	r1!, {r7, r8, r9, sl, ip, lr}
     2ae:	b402      	push	{r1}
     2b0:	fba7 5102 	umull	r5, r1, r7, r2
     2b4:	950a      	str	r5, [sp, #40]	; 0x28
     2b6:	fba8 0b02 	umull	r0, fp, r8, r2
     2ba:	fbe7 1063 	umaal	r1, r0, r7, r3
     2be:	fbe9 b062 	umaal	fp, r0, r9, r2
     2c2:	910b      	str	r1, [sp, #44]	; 0x2c
     2c4:	fba8 5103 	umull	r5, r1, r8, r3
     2c8:	fbea 0162 	umaal	r0, r1, sl, r2
     2cc:	fbe7 b564 	umaal	fp, r5, r7, r4
     2d0:	fbe7 0566 	umaal	r0, r5, r7, r6
     2d4:	fbe8 1566 	umaal	r1, r5, r8, r6
     2d8:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
     2dc:	fba9 b603 	umull	fp, r6, r9, r3
     2e0:	fbea 1663 	umaal	r1, r6, sl, r3
     2e4:	fbec 5663 	umaal	r5, r6, ip, r3
     2e8:	fbe8 0b64 	umaal	r0, fp, r8, r4
     2ec:	fbe9 1b64 	umaal	r1, fp, r9, r4
     2f0:	fbea 5b64 	umaal	r5, fp, sl, r4
     2f4:	fbec 6b64 	umaal	r6, fp, ip, r4
     2f8:	900d      	str	r0, [sp, #52]	; 0x34
     2fa:	fbac 3002 	umull	r3, r0, ip, r2
     2fe:	9c05      	ldr	r4, [sp, #20]
     300:	fbee 5062 	umaal	r5, r0, lr, r2
     304:	fbe9 6064 	umaal	r6, r0, r9, r4
     308:	fbea b064 	umaal	fp, r0, sl, r4
     30c:	fbe7 3164 	umaal	r3, r1, r7, r4
     310:	fbe8 5164 	umaal	r5, r1, r8, r4
     314:	9c06      	ldr	r4, [sp, #24]
     316:	fbe8 6164 	umaal	r6, r1, r8, r4
     31a:	fbe9 b164 	umaal	fp, r1, r9, r4
     31e:	fbea 0164 	umaal	r0, r1, sl, r4
     322:	930e      	str	r3, [sp, #56]	; 0x38
     324:	fba7 3204 	umull	r3, r2, r7, r4
     328:	9c07      	ldr	r4, [sp, #28]
     32a:	fbe7 6264 	umaal	r6, r2, r7, r4
     32e:	fbe8 b264 	umaal	fp, r2, r8, r4
     332:	fbe9 0264 	umaal	r0, r2, r9, r4
     336:	fbea 1264 	umaal	r1, r2, sl, r4
     33a:	9c04      	ldr	r4, [sp, #16]
     33c:	fbe9 5364 	umaal	r5, r3, r9, r4
     340:	fbea 6364 	umaal	r6, r3, sl, r4
     344:	9c08      	ldr	r4, [sp, #32]
     346:	fbe7 b364 	umaal	fp, r3, r7, r4
     34a:	fbe8 0364 	umaal	r0, r3, r8, r4
     34e:	fbe9 1364 	umaal	r1, r3, r9, r4
     352:	fbea 2364 	umaal	r2, r3, sl, r4
     356:	950f      	str	r5, [sp, #60]	; 0x3c
     358:	f85d 9b04 	ldr.w	r9, [sp], #4
     35c:	e899 0600 	ldmia.w	r9, {r9, sl}
     360:	f8dd 8000 	ldr.w	r8, [sp]
     364:	fba9 5408 	umull	r5, r4, r9, r8
     368:	fbea b468 	umaal	fp, r4, sl, r8
     36c:	f8dd 8010 	ldr.w	r8, [sp, #16]
     370:	fbec 0468 	umaal	r0, r4, ip, r8
     374:	fbee 1468 	umaal	r1, r4, lr, r8
     378:	fbe9 2468 	umaal	r2, r4, r9, r8
     37c:	fbea 3468 	umaal	r3, r4, sl, r8
     380:	f8dd 8004 	ldr.w	r8, [sp, #4]
     384:	fbee 6568 	umaal	r6, r5, lr, r8
     388:	fbe9 b568 	umaal	fp, r5, r9, r8
     38c:	fbea 0568 	umaal	r0, r5, sl, r8
     390:	f8dd 8014 	ldr.w	r8, [sp, #20]
     394:	fbec 1568 	umaal	r1, r5, ip, r8
     398:	fbee 2568 	umaal	r2, r5, lr, r8
     39c:	fbe9 3568 	umaal	r3, r5, r9, r8
     3a0:	fbea 4568 	umaal	r4, r5, sl, r8
     3a4:	960f      	str	r6, [sp, #60]	; 0x3c
     3a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
     3aa:	fbae 7608 	umull	r7, r6, lr, r8
     3ae:	fbe9 0668 	umaal	r0, r6, r9, r8
     3b2:	fbea 1668 	umaal	r1, r6, sl, r8
     3b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
     3ba:	fbec 2668 	umaal	r2, r6, ip, r8
     3be:	fbee 3668 	umaal	r3, r6, lr, r8
     3c2:	fbe9 4668 	umaal	r4, r6, r9, r8
     3c6:	fbea 5668 	umaal	r5, r6, sl, r8
     3ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
     3ce:	fbec b768 	umaal	fp, r7, ip, r8
     3d2:	fbee 0768 	umaal	r0, r7, lr, r8
     3d6:	fbe9 1768 	umaal	r1, r7, r9, r8
     3da:	fbea 2768 	umaal	r2, r7, sl, r8
     3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
     3e2:	fbec 3768 	umaal	r3, r7, ip, r8
     3e6:	fbee 4768 	umaal	r4, r7, lr, r8
     3ea:	fbe9 5768 	umaal	r5, r7, r9, r8
     3ee:	fbea 6768 	umaal	r6, r7, sl, r8
     3f2:	b008      	add	sp, #32
     3f4:	bd00      	pop	{pc}
     3f6:	bf00      	nop

000003f8 <ocrypto_bigint_mul256>:
     3f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3fc:	b087      	sub	sp, #28
     3fe:	f7ff ff4f 	bl	2a0 <ocrypto_mul256_noframe>
     402:	f8dd 801c 	ldr.w	r8, [sp, #28]
     406:	f108 0820 	add.w	r8, r8, #32
     40a:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     40e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     410:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000418 <ocrypto_sqr256_noframe>:
     418:	b500      	push	{lr}
     41a:	e891 5798 	ldmia.w	r1, {r3, r4, r7, r8, r9, sl, ip, lr}
     41e:	fba3 5203 	umull	r5, r2, r3, r3
     422:	9501      	str	r5, [sp, #4]
     424:	fba3 0104 	umull	r0, r1, r3, r4
     428:	fbe3 2064 	umaal	r2, r0, r3, r4
     42c:	fbe3 1067 	umaal	r1, r0, r3, r7
     430:	9202      	str	r2, [sp, #8]
     432:	fba3 5207 	umull	r5, r2, r3, r7
     436:	fbe3 0268 	umaal	r0, r2, r3, r8
     43a:	fbe4 1564 	umaal	r1, r5, r4, r4
     43e:	fbe3 0568 	umaal	r0, r5, r3, r8
     442:	fbe3 2569 	umaal	r2, r5, r3, r9
     446:	9103      	str	r1, [sp, #12]
     448:	fba4 b607 	umull	fp, r6, r4, r7
     44c:	fbe3 2669 	umaal	r2, r6, r3, r9
     450:	fbe3 566a 	umaal	r5, r6, r3, sl
     454:	fbe4 0b67 	umaal	r0, fp, r4, r7
     458:	fbe4 2b68 	umaal	r2, fp, r4, r8
     45c:	fbe3 5b6a 	umaal	r5, fp, r3, sl
     460:	fbe3 6b6c 	umaal	r6, fp, r3, ip
     464:	9004      	str	r0, [sp, #16]
     466:	fba4 1008 	umull	r1, r0, r4, r8
     46a:	fbe4 5069 	umaal	r5, r0, r4, r9
     46e:	fbe3 606c 	umaal	r6, r0, r3, ip
     472:	fbe3 b06e 	umaal	fp, r0, r3, lr
     476:	fbe7 2167 	umaal	r2, r1, r7, r7
     47a:	fbe4 5169 	umaal	r5, r1, r4, r9
     47e:	fbe4 616a 	umaal	r6, r1, r4, sl
     482:	fbe3 b16e 	umaal	fp, r1, r3, lr
     486:	fbe4 016e 	umaal	r0, r1, r4, lr
     48a:	9205      	str	r2, [sp, #20]
     48c:	fba7 3208 	umull	r3, r2, r7, r8
     490:	fbe4 626a 	umaal	r6, r2, r4, sl
     494:	fbe4 b26c 	umaal	fp, r2, r4, ip
     498:	fbe4 026e 	umaal	r0, r2, r4, lr
     49c:	fbe7 126e 	umaal	r1, r2, r7, lr
     4a0:	fbe7 5368 	umaal	r5, r3, r7, r8
     4a4:	fbe7 6369 	umaal	r6, r3, r7, r9
     4a8:	fbe4 b36c 	umaal	fp, r3, r4, ip
     4ac:	fbe7 036c 	umaal	r0, r3, r7, ip
     4b0:	fbe7 136e 	umaal	r1, r3, r7, lr
     4b4:	fbe8 236e 	umaal	r2, r3, r8, lr
     4b8:	9506      	str	r5, [sp, #24]
     4ba:	fba7 5409 	umull	r5, r4, r7, r9
     4be:	fbe7 b46a 	umaal	fp, r4, r7, sl
     4c2:	fbe7 046c 	umaal	r0, r4, r7, ip
     4c6:	fbe8 146c 	umaal	r1, r4, r8, ip
     4ca:	fbe8 246e 	umaal	r2, r4, r8, lr
     4ce:	fbe9 346e 	umaal	r3, r4, r9, lr
     4d2:	fbe8 6568 	umaal	r6, r5, r8, r8
     4d6:	fbe7 b56a 	umaal	fp, r5, r7, sl
     4da:	fbe8 056a 	umaal	r0, r5, r8, sl
     4de:	fbe8 156c 	umaal	r1, r5, r8, ip
     4e2:	fbe9 256c 	umaal	r2, r5, r9, ip
     4e6:	fbe9 356e 	umaal	r3, r5, r9, lr
     4ea:	fbea 456e 	umaal	r4, r5, sl, lr
     4ee:	9607      	str	r6, [sp, #28]
     4f0:	fba8 7609 	umull	r7, r6, r8, r9
     4f4:	fbe8 066a 	umaal	r0, r6, r8, sl
     4f8:	fbe9 166a 	umaal	r1, r6, r9, sl
     4fc:	fbe9 266c 	umaal	r2, r6, r9, ip
     500:	fbea 366c 	umaal	r3, r6, sl, ip
     504:	fbea 466e 	umaal	r4, r6, sl, lr
     508:	fbec 566e 	umaal	r5, r6, ip, lr
     50c:	fbe8 b769 	umaal	fp, r7, r8, r9
     510:	fbe9 0769 	umaal	r0, r7, r9, r9
     514:	fbe9 176a 	umaal	r1, r7, r9, sl
     518:	fbea 276a 	umaal	r2, r7, sl, sl
     51c:	fbea 376c 	umaal	r3, r7, sl, ip
     520:	fbec 476c 	umaal	r4, r7, ip, ip
     524:	fbec 576e 	umaal	r5, r7, ip, lr
     528:	fbee 676e 	umaal	r6, r7, lr, lr
     52c:	bd00      	pop	{pc}
     52e:	bf00      	nop

00000530 <ocrypto_bigint_sqr256>:
     530:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	b087      	sub	sp, #28
     536:	f7ff ff6f 	bl	418 <ocrypto_sqr256_noframe>
     53a:	f8dd 801c 	ldr.w	r8, [sp, #28]
     53e:	f108 0820 	add.w	r8, r8, #32
     542:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
     548:	e887 087f 	stmia.w	r7, {r0, r1, r2, r3, r4, r5, r6, fp}
     54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000550 <ocrypto_constant_time_equal>:
     550:	b430      	push	{r4, r5}
     552:	f04f 0300 	mov.w	r3, #0

00000556 <constant_time_equal_loop>:
     556:	f810 4b01 	ldrb.w	r4, [r0], #1
     55a:	f811 5b01 	ldrb.w	r5, [r1], #1
     55e:	3a01      	subs	r2, #1
     560:	ea84 0405 	eor.w	r4, r4, r5
     564:	ea43 0304 	orr.w	r3, r3, r4
     568:	d1f5      	bne.n	556 <constant_time_equal_loop>
     56a:	f1a3 0301 	sub.w	r3, r3, #1
     56e:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     572:	bc30      	pop	{r4, r5}
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <ocrypto_constant_time_is_zero>:
     578:	f04f 0300 	mov.w	r3, #0

0000057c <constant_time_is_zero_loop>:
     57c:	f810 2b01 	ldrb.w	r2, [r0], #1
     580:	3901      	subs	r1, #1
     582:	ea43 0302 	orr.w	r3, r3, r2
     586:	d1f9      	bne.n	57c <constant_time_is_zero_loop>
     588:	f1a3 0301 	sub.w	r3, r3, #1
     58c:	ea4f 70d3 	mov.w	r0, r3, lsr #31
     590:	4770      	bx	lr
     592:	bf00      	nop

00000594 <ocrypto_constant_time_xor>:
     594:	b430      	push	{r4, r5}

00000596 <constant_time_xor_loop>:
     596:	f811 4b01 	ldrb.w	r4, [r1], #1
     59a:	f812 5b01 	ldrb.w	r5, [r2], #1
     59e:	406c      	eors	r4, r5
     5a0:	f800 4b01 	strb.w	r4, [r0], #1
     5a4:	3b01      	subs	r3, #1
     5a6:	d1f6      	bne.n	596 <constant_time_xor_loop>
     5a8:	bc30      	pop	{r4, r5}
     5aa:	4770      	bx	lr

000005ac <ocrypto_mod_p256_add>:
     5ac:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     5b0:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     5b4:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5b8:	185b      	adds	r3, r3, r1
     5ba:	eb54 040c 	adcs.w	r4, r4, ip
     5be:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5c2:	414d      	adcs	r5, r1
     5c4:	eb56 060c 	adcs.w	r6, r6, ip
     5c8:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5cc:	414f      	adcs	r7, r1
     5ce:	eb58 080c 	adcs.w	r8, r8, ip
     5d2:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     5d6:	eb59 0901 	adcs.w	r9, r9, r1
     5da:	eb5a 0a0c 	adcs.w	sl, sl, ip
     5de:	4189      	sbcs	r1, r1
     5e0:	f1b3 33ff 	subs.w	r3, r3, #4294967295
     5e4:	f174 34ff 	sbcs.w	r4, r4, #4294967295
     5e8:	f175 35ff 	sbcs.w	r5, r5, #4294967295
     5ec:	f176 0600 	sbcs.w	r6, r6, #0
     5f0:	f177 0700 	sbcs.w	r7, r7, #0
     5f4:	f178 0800 	sbcs.w	r8, r8, #0
     5f8:	f179 0901 	sbcs.w	r9, r9, #1
     5fc:	f17a 3aff 	sbcs.w	sl, sl, #4294967295
     600:	f151 0100 	adcs.w	r1, r1, #0
     604:	185b      	adds	r3, r3, r1
     606:	414c      	adcs	r4, r1
     608:	414d      	adcs	r5, r1
     60a:	f156 0600 	adcs.w	r6, r6, #0
     60e:	f157 0700 	adcs.w	r7, r7, #0
     612:	f158 0800 	adcs.w	r8, r8, #0
     616:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     61a:	eb5a 0a01 	adcs.w	sl, sl, r1
     61e:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     622:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     626:	4770      	bx	lr

00000628 <ocrypto_mod_p256_sub>:
     628:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
     62c:	e891 07f8 	ldmia.w	r1, {r3, r4, r5, r6, r7, r8, r9, sl}
     630:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     634:	1a5b      	subs	r3, r3, r1
     636:	eb74 040c 	sbcs.w	r4, r4, ip
     63a:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     63e:	418d      	sbcs	r5, r1
     640:	eb76 060c 	sbcs.w	r6, r6, ip
     644:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     648:	418f      	sbcs	r7, r1
     64a:	eb78 080c 	sbcs.w	r8, r8, ip
     64e:	e8b2 1002 	ldmia.w	r2!, {r1, ip}
     652:	eb79 0901 	sbcs.w	r9, r9, r1
     656:	eb7a 0a0c 	sbcs.w	sl, sl, ip
     65a:	4189      	sbcs	r1, r1
     65c:	185b      	adds	r3, r3, r1
     65e:	414c      	adcs	r4, r1
     660:	414d      	adcs	r5, r1
     662:	f156 0600 	adcs.w	r6, r6, #0
     666:	f157 0700 	adcs.w	r7, r7, #0
     66a:	f158 0800 	adcs.w	r8, r8, #0
     66e:	eb59 79d1 	adcs.w	r9, r9, r1, lsr #31
     672:	eb5a 0a01 	adcs.w	sl, sl, r1
     676:	e880 07f8 	stmia.w	r0, {r3, r4, r5, r6, r7, r8, r9, sl}
     67a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
     67e:	4770      	bx	lr

00000680 <mul_reduce>:
     680:	eb18 0804 	adds.w	r8, r8, r4
     684:	eb59 0905 	adcs.w	r9, r9, r5
     688:	eb5a 0a06 	adcs.w	sl, sl, r6
     68c:	eb5b 0b07 	adcs.w	fp, fp, r7
     690:	f05f 0c00 	movs.w	ip, #0
     694:	f14c 0c00 	adc.w	ip, ip, #0
     698:	eb18 0805 	adds.w	r8, r8, r5
     69c:	eb59 0906 	adcs.w	r9, r9, r6
     6a0:	eb5a 0a07 	adcs.w	sl, sl, r7
     6a4:	eb5b 0b07 	adcs.w	fp, fp, r7
     6a8:	eb50 000c 	adcs.w	r0, r0, ip
     6ac:	f05f 0c00 	movs.w	ip, #0
     6b0:	eb51 010c 	adcs.w	r1, r1, ip
     6b4:	eb52 020c 	adcs.w	r2, r2, ip
     6b8:	4163      	adcs	r3, r4
     6ba:	f14c 0c00 	adc.w	ip, ip, #0
     6be:	ebb8 0807 	subs.w	r8, r8, r7
     6c2:	f179 0900 	sbcs.w	r9, r9, #0
     6c6:	f17a 0a00 	sbcs.w	sl, sl, #0
     6ca:	eb7b 0b04 	sbcs.w	fp, fp, r4
     6ce:	41a8      	sbcs	r0, r5
     6d0:	41b1      	sbcs	r1, r6
     6d2:	41a2      	sbcs	r2, r4
     6d4:	41b3      	sbcs	r3, r6
     6d6:	f16c 0c00 	sbc.w	ip, ip, #0
     6da:	ebbb 0b05 	subs.w	fp, fp, r5
     6de:	41b0      	sbcs	r0, r6
     6e0:	41b9      	sbcs	r1, r7
     6e2:	41aa      	sbcs	r2, r5
     6e4:	41bb      	sbcs	r3, r7
     6e6:	f16c 0c00 	sbc.w	ip, ip, #0
     6ea:	ea6f 74ec 	mvn.w	r4, ip, asr #31
     6ee:	ebb8 0804 	subs.w	r8, r8, r4
     6f2:	eb79 0904 	sbcs.w	r9, r9, r4
     6f6:	eb7a 0a04 	sbcs.w	sl, sl, r4
     6fa:	f17b 0b00 	sbcs.w	fp, fp, #0
     6fe:	f170 0000 	sbcs.w	r0, r0, #0
     702:	f171 0100 	sbcs.w	r1, r1, #0
     706:	eb72 72d4 	sbcs.w	r2, r2, r4, lsr #31
     70a:	41a3      	sbcs	r3, r4
     70c:	f16c 0c00 	sbc.w	ip, ip, #0
     710:	eb18 78ec 	adds.w	r8, r8, ip, asr #31
     714:	eb59 79ec 	adcs.w	r9, r9, ip, asr #31
     718:	eb5a 7aec 	adcs.w	sl, sl, ip, asr #31
     71c:	f15b 0b00 	adcs.w	fp, fp, #0
     720:	f150 0400 	adcs.w	r4, r0, #0
     724:	f151 0500 	adcs.w	r5, r1, #0
     728:	eb52 76dc 	adcs.w	r6, r2, ip, lsr #31
     72c:	eb53 77ec 	adcs.w	r7, r3, ip, asr #31
     730:	f14c 0c00 	adc.w	ip, ip, #0
     734:	eb18 70ec 	adds.w	r0, r8, ip, asr #31
     738:	eb59 71ec 	adcs.w	r1, r9, ip, asr #31
     73c:	eb5a 72ec 	adcs.w	r2, sl, ip, asr #31
     740:	f15b 0300 	adcs.w	r3, fp, #0
     744:	f154 0400 	adcs.w	r4, r4, #0
     748:	f155 0500 	adcs.w	r5, r5, #0
     74c:	eb56 76dc 	adcs.w	r6, r6, ip, lsr #31
     750:	eb57 77ec 	adcs.w	r7, r7, ip, asr #31
     754:	4770      	bx	lr
     756:	bf00      	nop

00000758 <ocrypto_mod_p256_mul>:
     758:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     75c:	b087      	sub	sp, #28
     75e:	f7ff fd9f 	bl	2a0 <ocrypto_mul256_noframe>
     762:	f8dd 8010 	ldr.w	r8, [sp, #16]
     766:	f8dd 9014 	ldr.w	r9, [sp, #20]
     76a:	f8dd a018 	ldr.w	sl, [sp, #24]
     76e:	f7ff ff87 	bl	680 <mul_reduce>
     772:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     776:	f7ff ff83 	bl	680 <mul_reduce>
     77a:	b003      	add	sp, #12
     77c:	f85d 8b04 	ldr.w	r8, [sp], #4
     780:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00000788 <ocrypto_mod_p256_sqr>:
     788:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     78c:	b087      	sub	sp, #28
     78e:	f7ff fe43 	bl	418 <ocrypto_sqr256_noframe>
     792:	f8dd 8010 	ldr.w	r8, [sp, #16]
     796:	f8dd 9014 	ldr.w	r9, [sp, #20]
     79a:	f8dd a018 	ldr.w	sl, [sp, #24]
     79e:	f7ff ff6f 	bl	680 <mul_reduce>
     7a2:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
     7a6:	f7ff ff6b 	bl	680 <mul_reduce>
     7aa:	b003      	add	sp, #12
     7ac:	f85d 8b04 	ldr.w	r8, [sp], #4
     7b0:	e888 00ff 	stmia.w	r8, {r0, r1, r2, r3, r4, r5, r6, r7}
     7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
     7ba:	4c14      	ldr	r4, [pc, #80]	; (80c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc>)
     7bc:	7a20      	ldrb	r0, [r4, #8]
     7be:	f88d 0001 	strb.w	r0, [sp, #1]
     7c2:	79e0      	ldrb	r0, [r4, #7]
     7c4:	f88d 0000 	strb.w	r0, [sp]
     7c8:	79a0      	ldrb	r0, [r4, #6]
     7ca:	f8ad 0004 	strh.w	r0, [sp, #4]
     7ce:	7960      	ldrb	r0, [r4, #5]
     7d0:	f8ad 0002 	strh.w	r0, [sp, #2]
     7d4:	4668      	mov	r0, sp
     7d6:	f006 fcaf 	bl	7138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
     7da:	b108      	cbz	r0, 7e0 <ocrypto_mod_p256_sqr+0x58>
     7dc:	21a7      	movs	r1, #167	; 0xa7
     7de:	e010      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7e0:	68e0      	ldr	r0, [r4, #12]
     7e2:	9002      	str	r0, [sp, #8]
     7e4:	a802      	add	r0, sp, #8
     7e6:	f006 fcbd 	bl	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
     7ea:	b108      	cbz	r0, 7f0 <ocrypto_mod_p256_sqr+0x68>
     7ec:	21ab      	movs	r1, #171	; 0xab
     7ee:	e008      	b.n	802 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2>
     7f0:	4807      	ldr	r0, [pc, #28]	; (810 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x10>)
     7f2:	6800      	ldr	r0, [r0, #0]
     7f4:	9003      	str	r0, [sp, #12]
     7f6:	a803      	add	r0, sp, #12
     7f8:	f00f f916 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
     7fc:	2800      	cmp	r0, #0
     7fe:	d003      	beq.n	808 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8>
     800:	21af      	movs	r1, #175	; 0xaf
     802:	2003      	movs	r0, #3
     804:	f000 f92e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     808:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
     80a:	0000      	.short	0x0000
     80c:	20000b80 	.word	0x20000b80
     810:	00000b50 	.word	0x00000b50
     814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     818:	460d      	mov	r5, r1
     81a:	4681      	mov	r9, r0
     81c:	f04f 0100 	mov.w	r1, #0
     820:	f100 0003 	add.w	r0, r0, #3
     824:	9100      	str	r1, [sp, #0]
     826:	f020 0003 	bic.w	r0, r0, #3
     82a:	7829      	ldrb	r1, [r5, #0]
     82c:	0014      	movs	r4, r2
     82e:	4606      	mov	r6, r0
     830:	f88d 1001 	strb.w	r1, [sp, #1]
     834:	d000      	beq.n	838 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38>
     836:	2000      	movs	r0, #0
     838:	4669      	mov	r1, sp
     83a:	f000 faf3 	bl	e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
     83e:	eb06 0a00 	add.w	sl, r6, r0
     842:	7828      	ldrb	r0, [r5, #0]
     844:	7869      	ldrb	r1, [r5, #1]
     846:	2700      	movs	r7, #0
     848:	4408      	add	r0, r1
     84a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
     84e:	463e      	mov	r6, r7
     850:	e008      	b.n	864 <__z_interrupt_stack_SIZEOF+0x24>
     852:	7a2b      	ldrb	r3, [r5, #8]
     854:	79ea      	ldrb	r2, [r5, #7]
     856:	79a9      	ldrb	r1, [r5, #6]
     858:	7968      	ldrb	r0, [r5, #5]
     85a:	f00c ffa0 	bl	d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
     85e:	1c76      	adds	r6, r6, #1
     860:	4407      	add	r7, r0
     862:	b2f6      	uxtb	r6, r6
     864:	4546      	cmp	r6, r8
     866:	d3f4      	bcc.n	852 <__z_interrupt_stack_SIZEOF+0x12>
     868:	f10a 0003 	add.w	r0, sl, #3
     86c:	f020 0003 	bic.w	r0, r0, #3
     870:	4606      	mov	r6, r0
     872:	b104      	cbz	r4, 876 <__z_interrupt_stack_SIZEOF+0x36>
     874:	2000      	movs	r0, #0
     876:	463a      	mov	r2, r7
     878:	4641      	mov	r1, r8
     87a:	f000 fc79 	bl	1170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
     87e:	490b      	ldr	r1, [pc, #44]	; (8ac <__z_interrupt_stack_SIZEOF+0x6c>)
     880:	4430      	add	r0, r6
     882:	78c9      	ldrb	r1, [r1, #3]
     884:	b159      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     886:	7c29      	ldrb	r1, [r5, #16]
     888:	b149      	cbz	r1, 89e <__z_interrupt_stack_SIZEOF+0x5e>
     88a:	2225      	movs	r2, #37	; 0x25
     88c:	1cc0      	adds	r0, r0, #3
     88e:	f020 0003 	bic.w	r0, r0, #3
     892:	4605      	mov	r5, r0
     894:	b104      	cbz	r4, 898 <__z_interrupt_stack_SIZEOF+0x58>
     896:	2000      	movs	r0, #0
     898:	f000 fcea 	bl	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
     89c:	4428      	add	r0, r5
     89e:	1dc0      	adds	r0, r0, #7
     8a0:	f020 0007 	bic.w	r0, r0, #7
     8a4:	eba0 0009 	sub.w	r0, r0, r9
     8a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8ac:	20000028 	.word	0x20000028

000008b0 <sdc_build_revision_get>:
     8b0:	b510      	push	{r4, lr}
     8b2:	b128      	cbz	r0, 8c0 <sdc_build_revision_get+0x10>
     8b4:	2214      	movs	r2, #20
     8b6:	4904      	ldr	r1, [pc, #16]	; (8c8 <sdc_build_revision_get+0x18>)
     8b8:	f00f fed9 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     8bc:	2000      	movs	r0, #0
     8be:	bd10      	pop	{r4, pc}
     8c0:	f06f 0015 	mvn.w	r0, #21
     8c4:	bd10      	pop	{r4, pc}
     8c6:	0000      	.short	0x0000
     8c8:	00000b74 	.word	0x00000b74

000008cc <sdc_cfg_set>:
     8cc:	b570      	push	{r4, r5, r6, lr}
     8ce:	f06f 032c 	mvn.w	r3, #44	; 0x2c
     8d2:	b988      	cbnz	r0, 8f8 <sdc_cfg_set+0x2c>
     8d4:	4c1f      	ldr	r4, [pc, #124]	; (954 <sdc_cfg_set+0x88>)
     8d6:	7860      	ldrb	r0, [r4, #1]
     8d8:	b108      	cbz	r0, 8de <sdc_cfg_set+0x12>
     8da:	1198      	asrs	r0, r3, #6
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	b301      	cbz	r1, 922 <sdc_cfg_set+0x56>
     8e0:	f06f 0515 	mvn.w	r5, #21
     8e4:	b31a      	cbz	r2, 92e <sdc_cfg_set+0x62>
     8e6:	481c      	ldr	r0, [pc, #112]	; (958 <sdc_cfg_set+0x8c>)
     8e8:	2901      	cmp	r1, #1
     8ea:	d007      	beq.n	8fc <sdc_cfg_set+0x30>
     8ec:	2903      	cmp	r1, #3
     8ee:	d008      	beq.n	902 <sdc_cfg_set+0x36>
     8f0:	2904      	cmp	r1, #4
     8f2:	d014      	beq.n	91e <sdc_cfg_set+0x52>
     8f4:	2906      	cmp	r1, #6
     8f6:	d015      	beq.n	924 <sdc_cfg_set+0x58>
     8f8:	4618      	mov	r0, r3
     8fa:	bd70      	pop	{r4, r5, r6, pc}
     8fc:	7811      	ldrb	r1, [r2, #0]
     8fe:	7001      	strb	r1, [r0, #0]
     900:	e019      	b.n	936 <sdc_cfg_set+0x6a>
     902:	7891      	ldrb	r1, [r2, #2]
     904:	b199      	cbz	r1, 92e <sdc_cfg_set+0x62>
     906:	78d1      	ldrb	r1, [r2, #3]
     908:	b189      	cbz	r1, 92e <sdc_cfg_set+0x62>
     90a:	7811      	ldrb	r1, [r2, #0]
     90c:	291b      	cmp	r1, #27
     90e:	d30e      	bcc.n	92e <sdc_cfg_set+0x62>
     910:	7851      	ldrb	r1, [r2, #1]
     912:	291b      	cmp	r1, #27
     914:	d30b      	bcc.n	92e <sdc_cfg_set+0x62>
     916:	6811      	ldr	r1, [r2, #0]
     918:	f8c0 1005 	str.w	r1, [r0, #5]
     91c:	e00b      	b.n	936 <sdc_cfg_set+0x6a>
     91e:	6811      	ldr	r1, [r2, #0]
     920:	60c1      	str	r1, [r0, #12]
     922:	e008      	b.n	936 <sdc_cfg_set+0x6a>
     924:	78e1      	ldrb	r1, [r4, #3]
     926:	b121      	cbz	r1, 932 <sdc_cfg_set+0x66>
     928:	7811      	ldrb	r1, [r2, #0]
     92a:	2902      	cmp	r1, #2
     92c:	d201      	bcs.n	932 <sdc_cfg_set+0x66>
     92e:	4628      	mov	r0, r5
     930:	bd70      	pop	{r4, r5, r6, pc}
     932:	7811      	ldrb	r1, [r2, #0]
     934:	7401      	strb	r1, [r0, #16]
     936:	2201      	movs	r2, #1
     938:	4907      	ldr	r1, [pc, #28]	; (958 <sdc_cfg_set+0x8c>)
     93a:	2000      	movs	r0, #0
     93c:	f7ff ff6a 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     940:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
     944:	db02      	blt.n	94c <sdc_cfg_set+0x80>
     946:	f06f 000b 	mvn.w	r0, #11
     94a:	bd70      	pop	{r4, r5, r6, pc}
     94c:	2101      	movs	r1, #1
     94e:	70a1      	strb	r1, [r4, #2]
     950:	bd70      	pop	{r4, r5, r6, pc}
     952:	0000      	.short	0x0000
     954:	20000028 	.word	0x20000028
     958:	20000b80 	.word	0x20000b80

0000095c <sdc_disable>:
     95c:	b510      	push	{r4, lr}
     95e:	4c07      	ldr	r4, [pc, #28]	; (97c <sdc_disable+0x20>)
     960:	7860      	ldrb	r0, [r4, #1]
     962:	b120      	cbz	r0, 96e <sdc_disable+0x12>
     964:	f006 fef8 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
     968:	7820      	ldrb	r0, [r4, #0]
     96a:	f00b fde5 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
     96e:	f000 fccb 	bl	1308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>
     972:	f000 fda3 	bl	14bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>
     976:	2000      	movs	r0, #0
     978:	7060      	strb	r0, [r4, #1]
     97a:	bd10      	pop	{r4, pc}
     97c:	20000028 	.word	0x20000028

00000980 <sdc_enable>:
     980:	b570      	push	{r4, r5, r6, lr}
     982:	460c      	mov	r4, r1
     984:	0005      	movs	r5, r0
     986:	d002      	beq.n	98e <sdc_enable+0xe>
     988:	b10c      	cbz	r4, 98e <sdc_enable+0xe>
     98a:	0760      	lsls	r0, r4, #29
     98c:	d002      	beq.n	994 <sdc_enable+0x14>
     98e:	f06f 0015 	mvn.w	r0, #21
     992:	bd70      	pop	{r4, r5, r6, pc}
     994:	f000 f914 	bl	bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
     998:	b1a8      	cbz	r0, 9c6 <sdc_enable+0x46>
     99a:	4628      	mov	r0, r5
     99c:	f00b fd92 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
     9a0:	4d0a      	ldr	r5, [pc, #40]	; (9cc <sdc_enable+0x4c>)
     9a2:	2200      	movs	r2, #0
     9a4:	490a      	ldr	r1, [pc, #40]	; (9d0 <sdc_enable+0x50>)
     9a6:	7028      	strb	r0, [r5, #0]
     9a8:	4620      	mov	r0, r4
     9aa:	f7ff ff33 	bl	814 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x14>
     9ae:	f00f fc2e 	bl	1020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
     9b2:	2100      	movs	r1, #0
     9b4:	7828      	ldrb	r0, [r5, #0]
     9b6:	f006 feb7 	bl	7728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
     9ba:	f7ff fefd 	bl	7b8 <ocrypto_mod_p256_sqr+0x30>
     9be:	2001      	movs	r0, #1
     9c0:	7068      	strb	r0, [r5, #1]
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	f04f 30ff 	mov.w	r0, #4294967295
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	20000028 	.word	0x20000028
     9d0:	20000b80 	.word	0x20000b80

000009d4 <sdc_init>:
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	b089      	sub	sp, #36	; 0x24
     9d8:	0005      	movs	r5, r0
     9da:	d00c      	beq.n	9f6 <sdc_init+0x22>
     9dc:	f00b fd18 	bl	c410 <mpsl_is_initialized>
     9e0:	f04f 34ff 	mov.w	r4, #4294967295
     9e4:	b120      	cbz	r0, 9f0 <sdc_init+0x1c>
     9e6:	f00b fbc9 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
     9ea:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
     9ee:	d905      	bls.n	9fc <sdc_init+0x28>
     9f0:	4620      	mov	r0, r4
     9f2:	b009      	add	sp, #36	; 0x24
     9f4:	bd30      	pop	{r4, r5, pc}
     9f6:	f06f 0015 	mvn.w	r0, #21
     9fa:	e7fa      	b.n	9f2 <sdc_init+0x1e>
     9fc:	4c14      	ldr	r4, [pc, #80]	; (a50 <sdc_init+0x7c>)
     9fe:	4815      	ldr	r0, [pc, #84]	; (a54 <sdc_init+0x80>)
     a00:	6065      	str	r5, [r4, #4]
     a02:	f000 f9f9 	bl	df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
     a06:	2000      	movs	r0, #0
     a08:	7060      	strb	r0, [r4, #1]
     a0a:	70a0      	strb	r0, [r4, #2]
     a0c:	70e0      	strb	r0, [r4, #3]
     a0e:	4601      	mov	r1, r0
     a10:	2220      	movs	r2, #32
     a12:	4668      	mov	r0, sp
     a14:	f00f fea5 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
     a18:	2220      	movs	r2, #32
     a1a:	490f      	ldr	r1, [pc, #60]	; (a58 <sdc_init+0x84>)
     a1c:	4668      	mov	r0, sp
     a1e:	f00f fe26 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a22:	2220      	movs	r2, #32
     a24:	4669      	mov	r1, sp
     a26:	480d      	ldr	r0, [pc, #52]	; (a5c <sdc_init+0x88>)
     a28:	f00f fe21 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     a2c:	f3ef 8410 	mrs	r4, PRIMASK
     a30:	b672      	cpsid	i
     a32:	f000 fc77 	bl	1324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
     a36:	480a      	ldr	r0, [pc, #40]	; (a60 <sdc_init+0x8c>)
     a38:	f000 fd4c 	bl	14d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
     a3c:	b118      	cbz	r0, a46 <sdc_init+0x72>
     a3e:	21c5      	movs	r1, #197	; 0xc5
     a40:	2003      	movs	r0, #3
     a42:	f000 f80f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     a46:	b904      	cbnz	r4, a4a <sdc_init+0x76>
     a48:	b662      	cpsie	i
     a4a:	2000      	movs	r0, #0
     a4c:	e7d1      	b.n	9f2 <sdc_init+0x1e>
     a4e:	0000      	.short	0x0000
     a50:	20000028 	.word	0x20000028
     a54:	000007b9 	.word	0x000007b9
     a58:	00000b54 	.word	0x00000b54
     a5c:	20000b80 	.word	0x20000b80
     a60:	00000bed 	.word	0x00000bed

00000a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
     a64:	b50e      	push	{r1, r2, r3, lr}
     a66:	b672      	cpsid	i
     a68:	4a15      	ldr	r2, [pc, #84]	; (ac0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
     a6a:	6855      	ldr	r5, [r2, #4]
     a6c:	b1dd      	cbz	r5, aa6 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x42>
     a6e:	2200      	movs	r2, #0
     a70:	4603      	mov	r3, r0
     a72:	466e      	mov	r6, sp
     a74:	240a      	movs	r4, #10
     a76:	e003      	b.n	a80 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
     a78:	fbb0 f0f4 	udiv	r0, r0, r4
     a7c:	1c52      	adds	r2, r2, #1
     a7e:	b2d2      	uxtb	r2, r2
     a80:	2800      	cmp	r0, #0
     a82:	d1f9      	bne.n	a78 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
     a84:	54b0      	strb	r0, [r6, r2]
     a86:	e00a      	b.n	a9e <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x3a>
     a88:	b2d8      	uxtb	r0, r3
     a8a:	fbb0 f7f4 	udiv	r7, r0, r4
     a8e:	fbb3 f3f4 	udiv	r3, r3, r4
     a92:	fb04 0017 	mls	r0, r4, r7, r0
     a96:	1e52      	subs	r2, r2, #1
     a98:	b2d2      	uxtb	r2, r2
     a9a:	3030      	adds	r0, #48	; 0x30
     a9c:	54b0      	strb	r0, [r6, r2]
     a9e:	2a00      	cmp	r2, #0
     aa0:	d1f2      	bne.n	a88 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
     aa2:	4630      	mov	r0, r6
     aa4:	47a8      	blx	r5
     aa6:	f3bf 8f4f 	dsb	sy
     aaa:	4806      	ldr	r0, [pc, #24]	; (ac4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
     aac:	6801      	ldr	r1, [r0, #0]
     aae:	4a06      	ldr	r2, [pc, #24]	; (ac8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
     ab0:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     ab4:	4311      	orrs	r1, r2
     ab6:	6001      	str	r1, [r0, #0]
     ab8:	f3bf 8f4f 	dsb	sy
     abc:	bf00      	nop
     abe:	e7fd      	b.n	abc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x58>
     ac0:	20000028 	.word	0x20000028
     ac4:	e000ed0c 	.word	0xe000ed0c
     ac8:	05fa0004 	.word	0x05fa0004

00000acc <sdc_support_central>:
     acc:	b510      	push	{r4, lr}
     ace:	4c07      	ldr	r4, [pc, #28]	; (aec <sdc_support_central+0x20>)
     ad0:	78a0      	ldrb	r0, [r4, #2]
     ad2:	7861      	ldrb	r1, [r4, #1]
     ad4:	4308      	orrs	r0, r1
     ad6:	d002      	beq.n	ade <sdc_support_central+0x12>
     ad8:	f04f 30ff 	mov.w	r0, #4294967295
     adc:	bd10      	pop	{r4, pc}
     ade:	f006 fe4b 	bl	7778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
     ae2:	2001      	movs	r0, #1
     ae4:	70e0      	strb	r0, [r4, #3]
     ae6:	2000      	movs	r0, #0
     ae8:	bd10      	pop	{r4, pc}
     aea:	0000      	.short	0x0000
     aec:	20000028 	.word	0x20000028

00000af0 <sdc_support_dle_central>:
     af0:	4806      	ldr	r0, [pc, #24]	; (b0c <sdc_support_dle_central+0x1c>)
     af2:	b510      	push	{r4, lr}
     af4:	7881      	ldrb	r1, [r0, #2]
     af6:	7840      	ldrb	r0, [r0, #1]
     af8:	4301      	orrs	r1, r0
     afa:	d002      	beq.n	b02 <sdc_support_dle_central+0x12>
     afc:	f04f 30ff 	mov.w	r0, #4294967295
     b00:	bd10      	pop	{r4, pc}
     b02:	f006 fbbb 	bl	727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>
     b06:	2000      	movs	r0, #0
     b08:	bd10      	pop	{r4, pc}
     b0a:	0000      	.short	0x0000
     b0c:	20000028 	.word	0x20000028

00000b10 <sdc_support_le_2m_phy>:
     b10:	4806      	ldr	r0, [pc, #24]	; (b2c <sdc_support_le_2m_phy+0x1c>)
     b12:	b510      	push	{r4, lr}
     b14:	7881      	ldrb	r1, [r0, #2]
     b16:	7840      	ldrb	r0, [r0, #1]
     b18:	4301      	orrs	r1, r0
     b1a:	d002      	beq.n	b22 <sdc_support_le_2m_phy+0x12>
     b1c:	f04f 30ff 	mov.w	r0, #4294967295
     b20:	bd10      	pop	{r4, pc}
     b22:	f00f f865 	bl	fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
     b26:	2000      	movs	r0, #0
     b28:	bd10      	pop	{r4, pc}
     b2a:	0000      	.short	0x0000
     b2c:	20000028 	.word	0x20000028

00000b30 <sdc_support_phy_update_central>:
     b30:	4806      	ldr	r0, [pc, #24]	; (b4c <sdc_support_phy_update_central+0x1c>)
     b32:	b510      	push	{r4, lr}
     b34:	7881      	ldrb	r1, [r0, #2]
     b36:	7840      	ldrb	r0, [r0, #1]
     b38:	4301      	orrs	r1, r0
     b3a:	d002      	beq.n	b42 <sdc_support_phy_update_central+0x12>
     b3c:	f04f 30ff 	mov.w	r0, #4294967295
     b40:	bd10      	pop	{r4, pc}
     b42:	f00f f879 	bl	fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>
     b46:	2000      	movs	r0, #0
     b48:	bd10      	pop	{r4, pc}
     b4a:	0000      	.short	0x0000
     b4c:	20000028 	.word	0x20000028
     b50:	00000001 	.word	0x00000001
     b54:	00000001 	.word	0x00000001
     b58:	031b1b00 	.word	0x031b1b00
     b5c:	00000002 	.word	0x00000002
     b60:	00001d4c 	.word	0x00001d4c
     b64:	00000003 	.word	0x00000003
	...
     b74:	2f2d0cd8 	.word	0x2f2d0cd8
     b78:	5ce2ae36 	.word	0x5ce2ae36
     b7c:	4c802680 	.word	0x4c802680
     b80:	53164d3f 	.word	0x53164d3f
     b84:	73c79650 	.word	0x73c79650

00000b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
     b88:	4a05      	ldr	r2, [pc, #20]	; (ba0 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
     b8a:	b510      	push	{r4, lr}
     b8c:	6852      	ldr	r2, [r2, #4]
     b8e:	b112      	cbz	r2, b96 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
     b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     b94:	4710      	bx	r2
     b96:	2192      	movs	r1, #146	; 0x92
     b98:	2004      	movs	r0, #4
     b9a:	f7ff ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     b9e:	0000      	.short	0x0000
     ba0:	20000ba0 	.word	0x20000ba0

00000ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
     ba4:	4a05      	ldr	r2, [pc, #20]	; (bbc <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
     ba6:	b510      	push	{r4, lr}
     ba8:	6892      	ldr	r2, [r2, #8]
     baa:	b112      	cbz	r2, bb2 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
     bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     bb0:	4710      	bx	r2
     bb2:	2198      	movs	r1, #152	; 0x98
     bb4:	2004      	movs	r0, #4
     bb6:	f7ff ff55 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     bba:	0000      	.short	0x0000
     bbc:	20000ba0 	.word	0x20000ba0

00000bc0 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
     bc0:	4805      	ldr	r0, [pc, #20]	; (bd8 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
     bc2:	6801      	ldr	r1, [r0, #0]
     bc4:	b129      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bc6:	6841      	ldr	r1, [r0, #4]
     bc8:	b119      	cbz	r1, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bca:	6880      	ldr	r0, [r0, #8]
     bcc:	b108      	cbz	r0, bd2 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
     bce:	2001      	movs	r0, #1
     bd0:	4770      	bx	lr
     bd2:	2000      	movs	r0, #0
     bd4:	4770      	bx	lr
     bd6:	0000      	.short	0x0000
     bd8:	20000ba0 	.word	0x20000ba0

00000bdc <sdc_rand_source_register>:
     bdc:	4902      	ldr	r1, [pc, #8]	; (be8 <sdc_rand_source_register+0xc>)
     bde:	c80d      	ldmia	r0, {r0, r2, r3}
     be0:	e881 000d 	stmia.w	r1, {r0, r2, r3}
     be4:	2000      	movs	r0, #0
     be6:	4770      	bx	lr
     be8:	20000ba0 	.word	0x20000ba0

00000bec <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
     bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bee:	4c12      	ldr	r4, [pc, #72]	; (c38 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
     bf0:	2600      	movs	r6, #0
     bf2:	6825      	ldr	r5, [r4, #0]
     bf4:	e011      	b.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     bf6:	9800      	ldr	r0, [sp, #0]
     bf8:	2802      	cmp	r0, #2
     bfa:	d002      	beq.n	c02 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
     bfc:	2803      	cmp	r0, #3
     bfe:	d10c      	bne.n	c1a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
     c00:	e006      	b.n	c10 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
     c02:	6820      	ldr	r0, [r4, #0]
     c04:	b110      	cbz	r0, c0c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
     c06:	2000      	movs	r0, #0
     c08:	6026      	str	r6, [r4, #0]
     c0a:	e005      	b.n	c18 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
     c0c:	2128      	movs	r1, #40	; 0x28
     c0e:	e00c      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c10:	6820      	ldr	r0, [r4, #0]
     c12:	b168      	cbz	r0, c30 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
     c14:	2001      	movs	r0, #1
     c16:	6026      	str	r6, [r4, #0]
     c18:	47a8      	blx	r5
     c1a:	4668      	mov	r0, sp
     c1c:	f000 fc20 	bl	1460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
     c20:	2800      	cmp	r0, #0
     c22:	d0e8      	beq.n	bf6 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
     c24:	2805      	cmp	r0, #5
     c26:	d005      	beq.n	c34 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
     c28:	2135      	movs	r1, #53	; 0x35
     c2a:	2004      	movs	r0, #4
     c2c:	f7ff ff1a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     c30:	212d      	movs	r1, #45	; 0x2d
     c32:	e7fa      	b.n	c2a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
     c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c36:	0000      	.short	0x0000
     c38:	20000030 	.word	0x20000030

00000c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>:
     c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c40:	4605      	mov	r5, r0
     c42:	4922      	ldr	r1, [pc, #136]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c44:	1d00      	adds	r0, r0, #4
     c46:	f501 7784 	add.w	r7, r1, #264	; 0x108
     c4a:	2600      	movs	r6, #0
     c4c:	6008      	str	r0, [r1, #0]
     c4e:	7838      	ldrb	r0, [r7, #0]
     c50:	b150      	cbz	r0, c68 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x2c>
     c52:	78ba      	ldrb	r2, [r7, #2]
     c54:	463c      	mov	r4, r7
     c56:	1c79      	adds	r1, r7, #1
     c58:	4628      	mov	r0, r5
     c5a:	1c92      	adds	r2, r2, #2
     c5c:	f00f fd07 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
     c60:	7026      	strb	r6, [r4, #0]
     c62:	2004      	movs	r0, #4
     c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c68:	4818      	ldr	r0, [pc, #96]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c6a:	f001 fe53 	bl	2914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
     c6e:	4604      	mov	r4, r0
     c70:	2802      	cmp	r0, #2
     c72:	d004      	beq.n	c7e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x42>
     c74:	2c04      	cmp	r4, #4
     c76:	d007      	beq.n	c88 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x4c>
     c78:	2c08      	cmp	r4, #8
     c7a:	d020      	beq.n	cbe <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x82>
     c7c:	e023      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c7e:	4913      	ldr	r1, [pc, #76]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c80:	4628      	mov	r0, r5
     c82:	f00b feac 	bl	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
     c86:	e01e      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     c88:	4910      	ldr	r1, [pc, #64]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     c8a:	4628      	mov	r0, r5
     c8c:	f00b ff0c 	bl	caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
     c90:	2800      	cmp	r0, #0
     c92:	d0dc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     c94:	f895 8000 	ldrb.w	r8, [r5]
     c98:	f895 9002 	ldrb.w	r9, [r5, #2]
     c9c:	4640      	mov	r0, r8
     c9e:	f000 f845 	bl	d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
     ca2:	2800      	cmp	r0, #0
     ca4:	d0d3      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     ca6:	f1b8 0f3e 	cmp.w	r8, #62	; 0x3e
     caa:	d10c      	bne.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cac:	4648      	mov	r0, r9
     cae:	f1b9 0f12 	cmp.w	r9, #18
     cb2:	d0cc      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cb4:	f000 f84c 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
     cb8:	2800      	cmp	r0, #0
     cba:	d0c8      	beq.n	c4e <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x12>
     cbc:	e003      	b.n	cc6 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x8a>
     cbe:	4903      	ldr	r1, [pc, #12]	; (ccc <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x90>)
     cc0:	4628      	mov	r0, r5
     cc2:	f00b feba 	bl	ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>
     cc6:	4620      	mov	r0, r4
     cc8:	e7cc      	b.n	c64 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x28>
     cca:	0000      	.short	0x0000
     ccc:	20000bac 	.word	0x20000bac
     cd0:	b570      	push	{r4, r5, r6, lr}
     cd2:	780a      	ldrb	r2, [r1, #0]
     cd4:	7082      	strb	r2, [r0, #2]
     cd6:	b33a      	cbz	r2, d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cd8:	2a01      	cmp	r2, #1
     cda:	d825      	bhi.n	d28 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xec>
     cdc:	2313      	movs	r3, #19
     cde:	7003      	strb	r3, [r0, #0]
     ce0:	2300      	movs	r3, #0
     ce2:	e00a      	b.n	cfa <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xbe>
     ce4:	eb01 0443 	add.w	r4, r1, r3, lsl #1
     ce8:	eb00 0543 	add.w	r5, r0, r3, lsl #1
     cec:	78a6      	ldrb	r6, [r4, #2]
     cee:	70ee      	strb	r6, [r5, #3]
     cf0:	8864      	ldrh	r4, [r4, #2]
     cf2:	0a24      	lsrs	r4, r4, #8
     cf4:	1c5b      	adds	r3, r3, #1
     cf6:	712c      	strb	r4, [r5, #4]
     cf8:	b2db      	uxtb	r3, r3
     cfa:	4293      	cmp	r3, r2
     cfc:	d3f2      	bcc.n	ce4 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xa8>
     cfe:	2300      	movs	r3, #0
     d00:	e00b      	b.n	d1a <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xde>
     d02:	bf00      	nop
     d04:	eb01 0543 	add.w	r5, r1, r3, lsl #1
     d08:	eb00 0443 	add.w	r4, r0, r3, lsl #1
     d0c:	792e      	ldrb	r6, [r5, #4]
     d0e:	7166      	strb	r6, [r4, #5]
     d10:	88ad      	ldrh	r5, [r5, #4]
     d12:	0a2d      	lsrs	r5, r5, #8
     d14:	1c5b      	adds	r3, r3, #1
     d16:	71a5      	strb	r5, [r4, #6]
     d18:	b2db      	uxtb	r3, r3
     d1a:	4293      	cmp	r3, r2
     d1c:	d3f2      	bcc.n	d04 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0xc8>
     d1e:	2101      	movs	r1, #1
     d20:	eb01 0082 	add.w	r0, r1, r2, lsl #2
     d24:	b2c0      	uxtb	r0, r0
     d26:	bd70      	pop	{r4, r5, r6, pc}
     d28:	2000      	movs	r0, #0
     d2a:	bd70      	pop	{r4, r5, r6, pc}

00000d2c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
     d2c:	2840      	cmp	r0, #64	; 0x40
     d2e:	d203      	bcs.n	d38 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0xc>
     d30:	1e40      	subs	r0, r0, #1
     d32:	b2c1      	uxtb	r1, r0
     d34:	4805      	ldr	r0, [pc, #20]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d36:	e005      	b.n	d44 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x18>
     d38:	28ff      	cmp	r0, #255	; 0xff
     d3a:	d005      	beq.n	d48 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1c>
     d3c:	3840      	subs	r0, #64	; 0x40
     d3e:	b2c1      	uxtb	r1, r0
     d40:	4802      	ldr	r0, [pc, #8]	; (d4c <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x20>)
     d42:	3008      	adds	r0, #8
     d44:	f00c b926 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d48:	2001      	movs	r0, #1
     d4a:	4770      	bx	lr
     d4c:	2000003c 	.word	0x2000003c

00000d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
     d50:	1e40      	subs	r0, r0, #1
     d52:	b2c1      	uxtb	r1, r0
     d54:	4801      	ldr	r0, [pc, #4]	; (d5c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0xc>)
     d56:	f00c b91d 	b.w	cf94 <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0xba>
     d5a:	0000      	.short	0x0000
     d5c:	2000004c 	.word	0x2000004c

00000d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
     d60:	b510      	push	{r4, lr}
     d62:	4a07      	ldr	r2, [pc, #28]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d64:	6801      	ldr	r1, [r0, #0]
     d66:	4b06      	ldr	r3, [pc, #24]	; (d80 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x20>)
     d68:	6191      	str	r1, [r2, #24]
     d6a:	6840      	ldr	r0, [r0, #4]
     d6c:	61d0      	str	r0, [r2, #28]
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	3218      	adds	r2, #24
     d72:	43a1      	bics	r1, r4
     d74:	6011      	str	r1, [r2, #0]
     d76:	6859      	ldr	r1, [r3, #4]
     d78:	4388      	bics	r0, r1
     d7a:	6050      	str	r0, [r2, #4]
     d7c:	bd10      	pop	{r4, pc}
     d7e:	0000      	.short	0x0000
     d80:	20000034 	.word	0x20000034

00000d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
     d84:	4a06      	ldr	r2, [pc, #24]	; (da0 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x1c>)
     d86:	6801      	ldr	r1, [r0, #0]
     d88:	6091      	str	r1, [r2, #8]
     d8a:	6840      	ldr	r0, [r0, #4]
     d8c:	60d0      	str	r0, [r2, #12]
     d8e:	3208      	adds	r2, #8
     d90:	f441 218c 	orr.w	r1, r1, #286720	; 0x46000
     d94:	6011      	str	r1, [r2, #0]
     d96:	4903      	ldr	r1, [pc, #12]	; (da4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x20>)
     d98:	4308      	orrs	r0, r1
     d9a:	6050      	str	r0, [r2, #4]
     d9c:	4770      	bx	lr
     d9e:	0000      	.short	0x0000
     da0:	20000034 	.word	0x20000034
     da4:	024007f8 	.word	0x024007f8

00000da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
     da8:	4902      	ldr	r1, [pc, #8]	; (db4 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0xc>)
     daa:	6802      	ldr	r2, [r0, #0]
     dac:	610a      	str	r2, [r1, #16]
     dae:	6840      	ldr	r0, [r0, #4]
     db0:	6148      	str	r0, [r1, #20]
     db2:	4770      	bx	lr
     db4:	20000034 	.word	0x20000034

00000db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
     db8:	4807      	ldr	r0, [pc, #28]	; (dd8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x20>)
     dba:	f04f 31ff 	mov.w	r1, #4294967295
     dbe:	2200      	movs	r2, #0
     dc0:	6001      	str	r1, [r0, #0]
     dc2:	0cc9      	lsrs	r1, r1, #19
     dc4:	6041      	str	r1, [r0, #4]
     dc6:	f100 0108 	add.w	r1, r0, #8
     dca:	201f      	movs	r0, #31
     dcc:	600a      	str	r2, [r1, #0]
     dce:	604a      	str	r2, [r1, #4]
     dd0:	3108      	adds	r1, #8
     dd2:	e9c1 0200 	strd	r0, r2, [r1]
     dd6:	4770      	bx	lr
     dd8:	2000003c 	.word	0x2000003c

00000ddc <sdc_hci_cmd_cb_reset>:
     ddc:	b510      	push	{r4, lr}
     dde:	f7ff ffeb 	bl	db8 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
     de2:	f00e fe7e 	bl	fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
     de6:	4604      	mov	r4, r0
     de8:	4802      	ldr	r0, [pc, #8]	; (df4 <sdc_hci_cmd_cb_reset+0x18>)
     dea:	6800      	ldr	r0, [r0, #0]
     dec:	b100      	cbz	r0, df0 <sdc_hci_cmd_cb_reset+0x14>
     dee:	4780      	blx	r0
     df0:	4620      	mov	r0, r4
     df2:	bd10      	pop	{r4, pc}
     df4:	20000054 	.word	0x20000054

00000df8 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
     df8:	4901      	ldr	r1, [pc, #4]	; (e00 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
     dfa:	6008      	str	r0, [r1, #0]
     dfc:	4770      	bx	lr
     dfe:	0000      	.short	0x0000
     e00:	20000054 	.word	0x20000054

00000e04 <sdc_hci_cmd_vs_zephyr_read_version_info>:
     e04:	2102      	movs	r1, #2
     e06:	8001      	strh	r1, [r0, #0]
     e08:	8041      	strh	r1, [r0, #2]
     e0a:	2100      	movs	r1, #0
     e0c:	7101      	strb	r1, [r0, #4]
     e0e:	21d8      	movs	r1, #216	; 0xd8
     e10:	7141      	strb	r1, [r0, #5]
     e12:	f642 510c 	movw	r1, #11532	; 0x2d0c
     e16:	80c1      	strh	r1, [r0, #6]
     e18:	4901      	ldr	r1, [pc, #4]	; (e20 <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
     e1a:	6081      	str	r1, [r0, #8]
     e1c:	2000      	movs	r0, #0
     e1e:	4770      	bx	lr
     e20:	e2ae362f 	.word	0xe2ae362f

00000e24 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
     e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e26:	4605      	mov	r5, r0
     e28:	7808      	ldrb	r0, [r1, #0]
     e2a:	784a      	ldrb	r2, [r1, #1]
     e2c:	4290      	cmp	r0, r2
     e2e:	d902      	bls.n	e36 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
     e30:	f240 11b1 	movw	r1, #433	; 0x1b1
     e34:	e007      	b.n	e46 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x22>
     e36:	9500      	str	r5, [sp, #0]
     e38:	b145      	cbz	r5, e4c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
     e3a:	2600      	movs	r6, #0
     e3c:	784c      	ldrb	r4, [r1, #1]
     e3e:	07a8      	lsls	r0, r5, #30
     e40:	d006      	beq.n	e50 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2c>
     e42:	f44f 71e5 	mov.w	r1, #458	; 0x1ca
     e46:	2017      	movs	r0, #23
     e48:	f7ff fe0c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     e4c:	2601      	movs	r6, #1
     e4e:	e7f5      	b.n	e3c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
     e50:	4f12      	ldr	r7, [pc, #72]	; (e9c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x78>)
     e52:	4631      	mov	r1, r6
     e54:	4668      	mov	r0, sp
     e56:	703c      	strb	r4, [r7, #0]
     e58:	f000 f8ca 	bl	ff0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
     e5c:	2000      	movs	r0, #0
     e5e:	4603      	mov	r3, r0
     e60:	9900      	ldr	r1, [sp, #0]
     e62:	1cc9      	adds	r1, r1, #3
     e64:	f021 0103 	bic.w	r1, r1, #3
     e68:	9100      	str	r1, [sp, #0]
     e6a:	b96e      	cbnz	r6, e88 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
     e6c:	eb07 0280 	add.w	r2, r7, r0, lsl #2
     e70:	6091      	str	r1, [r2, #8]
     e72:	2100      	movs	r1, #0
     e74:	e006      	b.n	e84 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x60>
     e76:	bf00      	nop
     e78:	f8d2 c008 	ldr.w	ip, [r2, #8]
     e7c:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
     e80:	1c49      	adds	r1, r1, #1
     e82:	b2c9      	uxtb	r1, r1
     e84:	42a1      	cmp	r1, r4
     e86:	d3f7      	bcc.n	e78 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x54>
     e88:	9900      	ldr	r1, [sp, #0]
     e8a:	1c40      	adds	r0, r0, #1
     e8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
     e90:	9100      	str	r1, [sp, #0]
     e92:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
     e96:	d0e3      	beq.n	e60 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x3c>
     e98:	1b48      	subs	r0, r1, r5
     e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e9c:	20000db8 	.word	0x20000db8

00000ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
     ea0:	b570      	push	{r4, r5, r6, lr}
     ea2:	4604      	mov	r4, r0
     ea4:	7985      	ldrb	r5, [r0, #6]
     ea6:	f000 f8df 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
     eaa:	4a0c      	ldr	r2, [pc, #48]	; (edc <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3c>)
     eac:	79e1      	ldrb	r1, [r4, #7]
     eae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     eb2:	e00e      	b.n	ed2 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x32>
     eb4:	6893      	ldr	r3, [r2, #8]
     eb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     eba:	b143      	cbz	r3, ece <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x2e>
     ebc:	1c48      	adds	r0, r1, #1
     ebe:	71e0      	strb	r0, [r4, #7]
     ec0:	80a1      	strh	r1, [r4, #4]
     ec2:	6890      	ldr	r0, [r2, #8]
     ec4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
     ec8:	6020      	str	r0, [r4, #0]
     eca:	2000      	movs	r0, #0
     ecc:	bd70      	pop	{r4, r5, r6, pc}
     ece:	1c49      	adds	r1, r1, #1
     ed0:	b2c9      	uxtb	r1, r1
     ed2:	4281      	cmp	r1, r0
     ed4:	d3ee      	bcc.n	eb4 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x14>
     ed6:	71e1      	strb	r1, [r4, #7]
     ed8:	2005      	movs	r0, #5
     eda:	bd70      	pop	{r4, r5, r6, pc}
     edc:	20000db8 	.word	0x20000db8

00000ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
     ee0:	b4f0      	push	{r4, r5, r6, r7}
     ee2:	b941      	cbnz	r1, ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x48>)
     ee6:	2500      	movs	r5, #0
     ee8:	462b      	mov	r3, r5
     eea:	f64f 74ff 	movw	r4, #65535	; 0xffff
     eee:	eb02 0681 	add.w	r6, r2, r1, lsl #2
     ef2:	5c57      	ldrb	r7, [r2, r1]
     ef4:	e00d      	b.n	f12 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x32>
     ef6:	bcf0      	pop	{r4, r5, r6, r7}
     ef8:	2000      	movs	r0, #0
     efa:	4770      	bx	lr
     efc:	195a      	adds	r2, r3, r5
     efe:	f8d6 c008 	ldr.w	ip, [r6, #8]
     f02:	b292      	uxth	r2, r2
     f04:	f85c c022 	ldr.w	ip, [ip, r2, lsl #2]
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d004      	beq.n	f18 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x38>
     f0e:	1c5b      	adds	r3, r3, #1
     f10:	b29b      	uxth	r3, r3
     f12:	429f      	cmp	r7, r3
     f14:	d8f2      	bhi.n	efc <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1c>
     f16:	4622      	mov	r2, r4
     f18:	8002      	strh	r2, [r0, #0]
     f1a:	4610      	mov	r0, r2
     f1c:	42a2      	cmp	r2, r4
     f1e:	d0ea      	beq.n	ef6 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x16>
     f20:	bcf0      	pop	{r4, r5, r6, r7}
     f22:	f000 b82d 	b.w	f80 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
     f26:	0000      	.short	0x0000
     f28:	20000db8 	.word	0x20000db8

00000f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
     f2c:	b570      	push	{r4, r5, r6, lr}
     f2e:	4606      	mov	r6, r0
     f30:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
     f34:	f243 0502 	movw	r5, #12290	; 0x3002
     f38:	38ff      	subs	r0, #255	; 0xff
     f3a:	d01a      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f3c:	b109      	cbz	r1, f42 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
     f3e:	2007      	movs	r0, #7
     f40:	bd70      	pop	{r4, r5, r6, pc}
     f42:	4630      	mov	r0, r6
     f44:	f000 f844 	bl	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
     f48:	0004      	movs	r4, r0
     f4a:	d012      	beq.n	f72 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
     f4c:	480a      	ldr	r0, [pc, #40]	; (f78 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
     f4e:	4621      	mov	r1, r4
     f50:	6802      	ldr	r2, [r0, #0]
     f52:	4630      	mov	r0, r6
     f54:	4790      	blx	r2
     f56:	4d09      	ldr	r5, [pc, #36]	; (f7c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
     f58:	2000      	movs	r0, #0
     f5a:	68a9      	ldr	r1, [r5, #8]
     f5c:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
     f60:	f000 f878 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     f64:	4602      	mov	r2, r0
     f66:	4621      	mov	r1, r4
     f68:	6868      	ldr	r0, [r5, #4]
     f6a:	f00c fbdf 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
     f6e:	2000      	movs	r0, #0
     f70:	bd70      	pop	{r4, r5, r6, pc}
     f72:	4628      	mov	r0, r5
     f74:	bd70      	pop	{r4, r5, r6, pc}
     f76:	0000      	.short	0x0000
     f78:	00001078 	.word	0x00001078
     f7c:	20000db8 	.word	0x20000db8
     f80:	b570      	push	{r4, r5, r6, lr}
     f82:	460e      	mov	r6, r1
     f84:	4605      	mov	r5, r0
     f86:	f00c fc00 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     f8a:	b158      	cbz	r0, fa4 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
     f8c:	480f      	ldr	r0, [pc, #60]	; (fcc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa0>)
     f8e:	eb00 0486 	add.w	r4, r0, r6, lsl #2
     f92:	68a0      	ldr	r0, [r4, #8]
     f94:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     f98:	b138      	cbz	r0, faa <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
     f9a:	f44f 71c5 	mov.w	r1, #394	; 0x18a
     f9e:	2017      	movs	r0, #23
     fa0:	f7ff fd60 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
     fa4:	f240 1189 	movw	r1, #393	; 0x189
     fa8:	e7f9      	b.n	f9e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x72>
     faa:	6860      	ldr	r0, [r4, #4]
     fac:	2800      	cmp	r0, #0
     fae:	d00b      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fb0:	4630      	mov	r0, r6
     fb2:	f000 f84f 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
     fb6:	4601      	mov	r1, r0
     fb8:	6860      	ldr	r0, [r4, #4]
     fba:	f00c fb5f 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
     fbe:	2800      	cmp	r0, #0
     fc0:	d002      	beq.n	fc8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x9c>
     fc2:	68a1      	ldr	r1, [r4, #8]
     fc4:	f841 0025 	str.w	r0, [r1, r5, lsl #2]
     fc8:	bd70      	pop	{r4, r5, r6, pc}
     fca:	0000      	.short	0x0000
     fcc:	20000db8 	.word	0x20000db8
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	460c      	mov	r4, r1
     fd4:	4605      	mov	r5, r0
     fd6:	f00c fbd8 	bl	d78a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x12>
     fda:	2800      	cmp	r0, #0
     fdc:	d005      	beq.n	fea <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbe>
     fde:	4803      	ldr	r0, [pc, #12]	; (fec <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
     fe0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     fe4:	6880      	ldr	r0, [r0, #8]
     fe6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
     fea:	bd70      	pop	{r4, r5, r6, pc}
     fec:	20000db8 	.word	0x20000db8
     ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     ff4:	4e16      	ldr	r6, [pc, #88]	; (1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>)
     ff6:	4688      	mov	r8, r1
     ff8:	4605      	mov	r5, r0
     ffa:	2400      	movs	r4, #0
     ffc:	6828      	ldr	r0, [r5, #0]
     ffe:	1cc0      	adds	r0, r0, #3
    1000:	f020 0003 	bic.w	r0, r0, #3
    1004:	6028      	str	r0, [r5, #0]
    1006:	4620      	mov	r0, r4
    1008:	f000 f824 	bl	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    100c:	5d31      	ldrb	r1, [r6, r4]
    100e:	4348      	muls	r0, r1
    1010:	f1b8 0f00 	cmp.w	r8, #0
    1014:	d001      	beq.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1016:	2200      	movs	r2, #0
    1018:	e000      	b.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    101a:	682a      	ldr	r2, [r5, #0]
    101c:	4601      	mov	r1, r0
    101e:	9200      	str	r2, [sp, #0]
    1020:	b132      	cbz	r2, 1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    1022:	2700      	movs	r7, #0
    1024:	ea4f 000d 	mov.w	r0, sp
    1028:	f00c fb59 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    102c:	b11f      	cbz	r7, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
    102e:	e006      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
    1030:	2701      	movs	r7, #1
    1032:	2000      	movs	r0, #0
    1034:	e7f8      	b.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
    1036:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    103a:	9a00      	ldr	r2, [sp, #0]
    103c:	604a      	str	r2, [r1, #4]
    103e:	6829      	ldr	r1, [r5, #0]
    1040:	1c64      	adds	r4, r4, #1
    1042:	4408      	add	r0, r1
    1044:	6028      	str	r0, [r5, #0]
    1046:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    104a:	d0d7      	beq.n	ffc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xd0>
    104c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1050:	20000db8 	.word	0x20000db8
    1054:	4903      	ldr	r1, [pc, #12]	; (1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>)
    1056:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    105a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    105e:	1cc0      	adds	r0, r0, #3
    1060:	4008      	ands	r0, r1
    1062:	4770      	bx	lr
    1064:	00001074 	.word	0x00001074
    1068:	4801      	ldr	r0, [pc, #4]	; (1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>)
    106a:	7800      	ldrb	r0, [r0, #0]
    106c:	4770      	bx	lr
    106e:	0000      	.short	0x0000
    1070:	20000db8 	.word	0x20000db8
    1074:	000002a8 	.word	0x000002a8
    1078:	0000edf5 	.word	0x0000edf5

0000107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    107c:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1080:	4c24      	ldr	r4, [pc, #144]	; (1114 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x98>)
    1082:	4606      	mov	r6, r0
    1084:	b081      	sub	sp, #4
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	469a      	mov	sl, r3
    108a:	4693      	mov	fp, r2
    108c:	b158      	cbz	r0, 10a6 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    108e:	7a01      	ldrb	r1, [r0, #8]
    1090:	42b1      	cmp	r1, r6
    1092:	d903      	bls.n	109c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    1094:	6840      	ldr	r0, [r0, #4]
    1096:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    109a:	b140      	cbz	r0, 10ae <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    109c:	f243 0002 	movw	r0, #12290	; 0x3002
    10a0:	b005      	add	sp, #20
    10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10a6:	21a5      	movs	r1, #165	; 0xa5
    10a8:	2018      	movs	r0, #24
    10aa:	f7ff fcdb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    10ae:	4619      	mov	r1, r3
    10b0:	9802      	ldr	r0, [sp, #8]
    10b2:	f00c fb8d 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    10b6:	4680      	mov	r8, r0
    10b8:	4658      	mov	r0, fp
    10ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    10bc:	f00c fb7e 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    10c0:	4605      	mov	r5, r0
    10c2:	eb08 0005 	add.w	r0, r8, r5
    10c6:	1d00      	adds	r0, r0, #4
    10c8:	b287      	uxth	r7, r0
    10ca:	6820      	ldr	r0, [r4, #0]
    10cc:	46a1      	mov	r9, r4
    10ce:	4639      	mov	r1, r7
    10d0:	6800      	ldr	r0, [r0, #0]
    10d2:	f00c fad3 	bl	d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    10d6:	0004      	movs	r4, r0
    10d8:	d01a      	beq.n	1110 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x94>
    10da:	8067      	strh	r7, [r4, #2]
    10dc:	8025      	strh	r5, [r4, #0]
    10de:	4629      	mov	r1, r5
    10e0:	1d20      	adds	r0, r4, #4
    10e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    10e4:	4607      	mov	r7, r0
    10e6:	465a      	mov	r2, fp
    10e8:	2309      	movs	r3, #9
    10ea:	9500      	str	r5, [sp, #0]
    10ec:	f00c fa40 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    10f0:	8820      	ldrh	r0, [r4, #0]
    10f2:	4641      	mov	r1, r8
    10f4:	4438      	add	r0, r7
    10f6:	230a      	movs	r3, #10
    10f8:	9a02      	ldr	r2, [sp, #8]
    10fa:	f8cd a000 	str.w	sl, [sp]
    10fe:	f00c fa37 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1102:	f8d9 0000 	ldr.w	r0, [r9]
    1106:	6840      	ldr	r0, [r0, #4]
    1108:	f840 4026 	str.w	r4, [r0, r6, lsl #2]
    110c:	2000      	movs	r0, #0
    110e:	e7c7      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1110:	2004      	movs	r0, #4
    1112:	e7c5      	b.n	10a0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    1114:	20000058 	.word	0x20000058

00001118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    1118:	b570      	push	{r4, r5, r6, lr}
    111a:	4c14      	ldr	r4, [pc, #80]	; (116c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    111c:	6823      	ldr	r3, [r4, #0]
    111e:	b18b      	cbz	r3, 1144 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    1120:	7a19      	ldrb	r1, [r3, #8]
    1122:	4281      	cmp	r1, r0
    1124:	d912      	bls.n	114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    1126:	685a      	ldr	r2, [r3, #4]
    1128:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    112c:	b171      	cbz	r1, 114c <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    112e:	2500      	movs	r5, #0
    1130:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    1134:	884a      	ldrh	r2, [r1, #2]
    1136:	6818      	ldr	r0, [r3, #0]
    1138:	f00c faf8 	bl	d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    113c:	6821      	ldr	r1, [r4, #0]
    113e:	2000      	movs	r0, #0
    1140:	7a0a      	ldrb	r2, [r1, #8]
    1142:	e00c      	b.n	115e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    1144:	21c6      	movs	r1, #198	; 0xc6
    1146:	2018      	movs	r0, #24
    1148:	f7ff fc8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    114c:	f243 0002 	movw	r0, #12290	; 0x3002
    1150:	bd70      	pop	{r4, r5, r6, pc}
    1152:	684b      	ldr	r3, [r1, #4]
    1154:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1158:	b933      	cbnz	r3, 1168 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    115a:	1c40      	adds	r0, r0, #1
    115c:	b2c0      	uxtb	r0, r0
    115e:	4282      	cmp	r2, r0
    1160:	d8f7      	bhi.n	1152 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    1162:	6808      	ldr	r0, [r1, #0]
    1164:	f00c fad7 	bl	d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    1168:	2000      	movs	r0, #0
    116a:	bd70      	pop	{r4, r5, r6, pc}
    116c:	20000058 	.word	0x20000058

00001170 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    1170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1174:	460d      	mov	r5, r1
    1176:	0004      	movs	r4, r0
    1178:	4690      	mov	r8, r2
    117a:	f04f 0600 	mov.w	r6, #0
    117e:	d006      	beq.n	118e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x1e>
    1180:	2700      	movs	r7, #0
    1182:	07a0      	lsls	r0, r4, #30
    1184:	d005      	beq.n	1192 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x22>
    1186:	2186      	movs	r1, #134	; 0x86
    1188:	2018      	movs	r0, #24
    118a:	f7ff fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    118e:	2701      	movs	r7, #1
    1190:	e7f7      	b.n	1182 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    1192:	b1cd      	cbz	r5, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    1194:	4611      	mov	r1, r2
    1196:	2000      	movs	r0, #0
    1198:	f00c faa1 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    119c:	300c      	adds	r0, #12
    119e:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    11a2:	b98f      	cbnz	r7, 11c8 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x58>
    11a4:	4f0a      	ldr	r7, [pc, #40]	; (11d0 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x60>)
    11a6:	f104 000c 	add.w	r0, r4, #12
    11aa:	00aa      	lsls	r2, r5, #2
    11ac:	603c      	str	r4, [r7, #0]
    11ae:	7225      	strb	r5, [r4, #8]
    11b0:	6060      	str	r0, [r4, #4]
    11b2:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    11b6:	6020      	str	r0, [r4, #0]
    11b8:	2100      	movs	r1, #0
    11ba:	6860      	ldr	r0, [r4, #4]
    11bc:	f00f fad1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    11c0:	4641      	mov	r1, r8
    11c2:	6838      	ldr	r0, [r7, #0]
    11c4:	f00c fa8b 	bl	d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    11c8:	4630      	mov	r0, r6
    11ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    11ce:	0000      	.short	0x0000
    11d0:	20000058 	.word	0x20000058

000011d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	4d08      	ldr	r5, [pc, #32]	; (11f8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    11d8:	6828      	ldr	r0, [r5, #0]
    11da:	2800      	cmp	r0, #0
    11dc:	d00a      	beq.n	11f4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    11de:	2400      	movs	r4, #0
    11e0:	e004      	b.n	11ec <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    11e2:	4620      	mov	r0, r4
    11e4:	f7ff ff98 	bl	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    11e8:	1c64      	adds	r4, r4, #1
    11ea:	b2e4      	uxtb	r4, r4
    11ec:	6828      	ldr	r0, [r5, #0]
    11ee:	7a00      	ldrb	r0, [r0, #8]
    11f0:	42a0      	cmp	r0, r4
    11f2:	d8f6      	bhi.n	11e2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    11f4:	bd70      	pop	{r4, r5, r6, pc}
    11f6:	0000      	.short	0x0000
    11f8:	20000058 	.word	0x20000058

000011fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    11fc:	4909      	ldr	r1, [pc, #36]	; (1224 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    11fe:	b510      	push	{r4, lr}
    1200:	4602      	mov	r2, r0
    1202:	6809      	ldr	r1, [r1, #0]
    1204:	2000      	movs	r0, #0
    1206:	b149      	cbz	r1, 121c <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    1208:	7a0b      	ldrb	r3, [r1, #8]
    120a:	4293      	cmp	r3, r2
    120c:	d905      	bls.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    120e:	6849      	ldr	r1, [r1, #4]
    1210:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1214:	2900      	cmp	r1, #0
    1216:	d000      	beq.n	121a <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    1218:	1d08      	adds	r0, r1, #4
    121a:	bd10      	pop	{r4, pc}
    121c:	21ec      	movs	r1, #236	; 0xec
    121e:	2018      	movs	r0, #24
    1220:	f7ff fc20 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1224:	20000058 	.word	0x20000058

00001228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    1228:	490a      	ldr	r1, [pc, #40]	; (1254 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    122a:	b510      	push	{r4, lr}
    122c:	4602      	mov	r2, r0
    122e:	6809      	ldr	r1, [r1, #0]
    1230:	2000      	movs	r0, #0
    1232:	b159      	cbz	r1, 124c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    1234:	7a0b      	ldrb	r3, [r1, #8]
    1236:	4293      	cmp	r3, r2
    1238:	d907      	bls.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    123a:	6849      	ldr	r1, [r1, #4]
    123c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    1240:	2900      	cmp	r1, #0
    1242:	d002      	beq.n	124a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    1244:	f831 0b04 	ldrh.w	r0, [r1], #4
    1248:	4408      	add	r0, r1
    124a:	bd10      	pop	{r4, pc}
    124c:	21fa      	movs	r1, #250	; 0xfa
    124e:	2018      	movs	r0, #24
    1250:	f7ff fc08 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1254:	20000058 	.word	0x20000058

00001258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    1258:	4801      	ldr	r0, [pc, #4]	; (1260 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    125a:	7840      	ldrb	r0, [r0, #1]
    125c:	4770      	bx	lr
    125e:	0000      	.short	0x0000
    1260:	2000005c 	.word	0x2000005c

00001264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    1264:	4801      	ldr	r0, [pc, #4]	; (126c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    1266:	6840      	ldr	r0, [r0, #4]
    1268:	4770      	bx	lr
    126a:	0000      	.short	0x0000
    126c:	2000005c 	.word	0x2000005c

00001270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    1270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1274:	460c      	mov	r4, r1
    1276:	4607      	mov	r7, r0
    1278:	4616      	mov	r6, r2
    127a:	2125      	movs	r1, #37	; 0x25
    127c:	4610      	mov	r0, r2
    127e:	460d      	mov	r5, r1
    1280:	4622      	mov	r2, r4
    1282:	f00c f9ba 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    1286:	4680      	mov	r8, r0
    1288:	b157      	cbz	r7, 12a0 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    128a:	4638      	mov	r0, r7
    128c:	4641      	mov	r1, r8
    128e:	4632      	mov	r2, r6
    1290:	462b      	mov	r3, r5
    1292:	9400      	str	r4, [sp, #0]
    1294:	f00c f96c 	bl	d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    1298:	4803      	ldr	r0, [pc, #12]	; (12a8 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    129a:	6047      	str	r7, [r0, #4]
    129c:	7004      	strb	r4, [r0, #0]
    129e:	7046      	strb	r6, [r0, #1]
    12a0:	4640      	mov	r0, r8
    12a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    12a6:	0000      	.short	0x0000
    12a8:	2000005c 	.word	0x2000005c

000012ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    12ac:	4802      	ldr	r0, [pc, #8]	; (12b8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    12ae:	7842      	ldrb	r2, [r0, #1]
    12b0:	7801      	ldrb	r1, [r0, #0]
    12b2:	6840      	ldr	r0, [r0, #4]
    12b4:	f7ff bfdc 	b.w	1270 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    12b8:	2000005c 	.word	0x2000005c
    12bc:	b530      	push	{r4, r5, lr}
    12be:	490d      	ldr	r1, [pc, #52]	; (12f4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>)
    12c0:	2001      	movs	r0, #1
    12c2:	6048      	str	r0, [r1, #4]
    12c4:	1e82      	subs	r2, r0, #2
    12c6:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12ca:	490b      	ldr	r1, [pc, #44]	; (12f8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x4c>)
    12cc:	6088      	str	r0, [r1, #8]
    12ce:	2300      	movs	r3, #0
    12d0:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
    12d4:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12d8:	4c08      	ldr	r4, [pc, #32]	; (12fc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x50>)
    12da:	6023      	str	r3, [r4, #0]
    12dc:	1d25      	adds	r5, r4, #4
    12de:	6028      	str	r0, [r5, #0]
    12e0:	6088      	str	r0, [r1, #8]
    12e2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    12e6:	6023      	str	r3, [r4, #0]
    12e8:	6028      	str	r0, [r5, #0]
    12ea:	4906      	ldr	r1, [pc, #24]	; (1304 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x58>)
    12ec:	4804      	ldr	r0, [pc, #16]	; (1300 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x54>)
    12ee:	6008      	str	r0, [r1, #0]
    12f0:	bd30      	pop	{r4, r5, pc}
    12f2:	0000      	.short	0x0000
    12f4:	4000e000 	.word	0x4000e000
    12f8:	4000f000 	.word	0x4000f000
    12fc:	4000f500 	.word	0x4000f500
    1300:	3ff60000 	.word	0x3ff60000
    1304:	4001f508 	.word	0x4001f508

00001308 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ>:
    1308:	b510      	push	{r4, lr}
    130a:	f7ff ffd7 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    130e:	f00c fa87 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    1312:	4903      	ldr	r1, [pc, #12]	; (1320 <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x18>)
    1314:	4801      	ldr	r0, [pc, #4]	; (131c <sym_T2WGCKXTT3AQKC37WUCKG6LFMKIXXWS3R6ESLQQ+0x14>)
    1316:	6008      	str	r0, [r1, #0]
    1318:	bd10      	pop	{r4, pc}
    131a:	0000      	.short	0x0000
    131c:	3ff60000 	.word	0x3ff60000
    1320:	4001f508 	.word	0x4001f508

00001324 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    1324:	b510      	push	{r4, lr}
    1326:	f7ff ffc9 	bl	12bc <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    132a:	f00c fa79 	bl	d820 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x82>
    132e:	f000 f887 	bl	1440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    1332:	4905      	ldr	r1, [pc, #20]	; (1348 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x24>)
    1334:	4803      	ldr	r0, [pc, #12]	; (1344 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x20>)
    1336:	6008      	str	r0, [r1, #0]
    1338:	f000 f8b8 	bl	14ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    133c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1340:	f000 b8dc 	b.w	14fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    1344:	3ff60000 	.word	0x3ff60000
    1348:	4001f508 	.word	0x4001f508
    134c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1350:	4682      	mov	sl, r0
    1352:	4838      	ldr	r0, [pc, #224]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1354:	f00f f897 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    1358:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>
    135c:	b128      	cbz	r0, 136a <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x46>
    135e:	2601      	movs	r6, #1
    1360:	f10b 0001 	add.w	r0, fp, #1
    1364:	21ff      	movs	r1, #255	; 0xff
    1366:	7001      	strb	r1, [r0, #0]
    1368:	e000      	b.n	136c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x48>
    136a:	2600      	movs	r6, #0
    136c:	f44f 7580 	mov.w	r5, #256	; 0x100
    1370:	4c31      	ldr	r4, [pc, #196]	; (1438 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb0>)
    1372:	f04f 0800 	mov.w	r8, #0
    1376:	1d2f      	adds	r7, r5, #4
    1378:	2101      	movs	r1, #1
    137a:	6061      	str	r1, [r4, #4]
    137c:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    1380:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1384:	f8c4 a504 	str.w	sl, [r4, #1284]	; 0x504
    1388:	6021      	str	r1, [r4, #0]
    138a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 143c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xb4>
    138e:	e01c      	b.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1390:	f8d9 0000 	ldr.w	r0, [r9]
    1394:	06c0      	lsls	r0, r0, #27
    1396:	d518      	bpl.n	13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    1398:	200e      	movs	r0, #14
    139a:	f00c fa50 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    139e:	f3ef 8010 	mrs	r0, PRIMASK
    13a2:	9000      	str	r0, [sp, #0]
    13a4:	b672      	cpsid	i
    13a6:	2103      	movs	r1, #3
    13a8:	4620      	mov	r0, r4
    13aa:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    13ae:	4629      	mov	r1, r5
    13b0:	f00c fa52 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13b4:	b930      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13b6:	4639      	mov	r1, r7
    13b8:	4620      	mov	r0, r4
    13ba:	f00c fa4d 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13be:	b908      	cbnz	r0, 13c4 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x3c>
    13c0:	f00f f8f8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	b900      	cbnz	r0, 13ca <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x42>
    13c8:	b662      	cpsie	i
    13ca:	4629      	mov	r1, r5
    13cc:	4620      	mov	r0, r4
    13ce:	f00c fa43 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13d2:	b928      	cbnz	r0, 13e0 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x58>
    13d4:	4639      	mov	r1, r7
    13d6:	4620      	mov	r0, r4
    13d8:	f00c fa3e 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13dc:	2800      	cmp	r0, #0
    13de:	d0d7      	beq.n	1390 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x8>
    13e0:	4639      	mov	r1, r7
    13e2:	4620      	mov	r0, r4
    13e4:	f00c fa38 	bl	d858 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xba>
    13e8:	2800      	cmp	r0, #0
    13ea:	d1c5      	bne.n	1378 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x54>
    13ec:	bb06      	cbnz	r6, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    13ee:	f89b 1001 	ldrb.w	r1, [fp, #1]
    13f2:	f88d 1000 	strb.w	r1, [sp]
    13f6:	9900      	ldr	r1, [sp, #0]
    13f8:	9100      	str	r1, [sp, #0]
    13fa:	f89d 1000 	ldrb.w	r1, [sp]
    13fe:	b109      	cbz	r1, 1404 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7c>
    1400:	2501      	movs	r5, #1
    1402:	e000      	b.n	1406 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0x7e>
    1404:	2500      	movs	r5, #0
    1406:	f10b 0001 	add.w	r0, fp, #1
    140a:	f880 8000 	strb.w	r8, [r0]
    140e:	2003      	movs	r0, #3
    1410:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    1414:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    1418:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    141c:	200e      	movs	r0, #14
    141e:	f00c fa0e 	bl	d83e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xa0>
    1422:	4804      	ldr	r0, [pc, #16]	; (1434 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xac>)
    1424:	f00f f846 	bl	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    1428:	b115      	cbz	r5, 1430 <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa8>
    142a:	2011      	movs	r0, #17
    142c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1430:	2000      	movs	r0, #0
    1432:	e7fb      	b.n	142c <CONFIG_BT_CONN_PARAM_RETRY_TIMEOUT+0xa4>
    1434:	20000340 	.word	0x20000340
    1438:	4000e000 	.word	0x4000e000
    143c:	e000ed10 	.word	0xe000ed10

00001440 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    1440:	b510      	push	{r4, lr}
    1442:	4806      	ldr	r0, [pc, #24]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1444:	f00f f832 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    1448:	b118      	cbz	r0, 1452 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x12>
    144a:	2127      	movs	r1, #39	; 0x27
    144c:	201d      	movs	r0, #29
    144e:	f7ff fb09 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1452:	4802      	ldr	r0, [pc, #8]	; (145c <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>)
    1454:	2100      	movs	r1, #0
    1456:	7041      	strb	r1, [r0, #1]
    1458:	bd10      	pop	{r4, pc}
    145a:	0000      	.short	0x0000
    145c:	20000340 	.word	0x20000340

00001460 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    1460:	b570      	push	{r4, r5, r6, lr}
    1462:	4911      	ldr	r1, [pc, #68]	; (14a8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    1464:	680a      	ldr	r2, [r1, #0]
    1466:	b1ea      	cbz	r2, 14a4 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    1468:	2300      	movs	r3, #0
    146a:	461d      	mov	r5, r3
    146c:	2401      	movs	r4, #1
    146e:	684a      	ldr	r2, [r1, #4]
    1470:	1c52      	adds	r2, r2, #1
    1472:	604a      	str	r2, [r1, #4]
    1474:	2a0c      	cmp	r2, #12
    1476:	d300      	bcc.n	147a <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    1478:	604d      	str	r5, [r1, #4]
    147a:	790e      	ldrb	r6, [r1, #4]
    147c:	fa04 f206 	lsl.w	r2, r4, r6
    1480:	680e      	ldr	r6, [r1, #0]
    1482:	4216      	tst	r6, r2
    1484:	d00b      	beq.n	149e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    1486:	f3ef 8310 	mrs	r3, PRIMASK
    148a:	b672      	cpsid	i
    148c:	680c      	ldr	r4, [r1, #0]
    148e:	4394      	bics	r4, r2
    1490:	600c      	str	r4, [r1, #0]
    1492:	b903      	cbnz	r3, 1496 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    1494:	b662      	cpsie	i
    1496:	6849      	ldr	r1, [r1, #4]
    1498:	6001      	str	r1, [r0, #0]
    149a:	2000      	movs	r0, #0
    149c:	bd70      	pop	{r4, r5, r6, pc}
    149e:	1c5b      	adds	r3, r3, #1
    14a0:	2b0c      	cmp	r3, #12
    14a2:	d3e4      	bcc.n	146e <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    14a4:	2005      	movs	r0, #5
    14a6:	bd70      	pop	{r4, r5, r6, pc}
    14a8:	20000064 	.word	0x20000064

000014ac <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    14ae:	2100      	movs	r1, #0
    14b0:	6001      	str	r1, [r0, #0]
    14b2:	6041      	str	r1, [r0, #4]
    14b4:	4770      	bx	lr
    14b6:	0000      	.short	0x0000
    14b8:	20000064 	.word	0x20000064

000014bc <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI>:
    14bc:	b510      	push	{r4, lr}
    14be:	4c04      	ldr	r4, [pc, #16]	; (14d0 <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x14>)
    14c0:	7820      	ldrb	r0, [r4, #0]
    14c2:	28ff      	cmp	r0, #255	; 0xff
    14c4:	d003      	beq.n	14ce <sym_CXUREOIXUAF7MRG6VYXVKEGUS4V3G7OLURYVMAI+0x12>
    14c6:	f00b f837 	bl	c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>
    14ca:	20ff      	movs	r0, #255	; 0xff
    14cc:	7020      	strb	r0, [r4, #0]
    14ce:	bd10      	pop	{r4, pc}
    14d0:	20000000 	.word	0x20000000

000014d4 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    14d4:	b510      	push	{r4, lr}
    14d6:	4c08      	ldr	r4, [pc, #32]	; (14f8 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    14d8:	7861      	ldrb	r1, [r4, #1]
    14da:	b109      	cbz	r1, 14e0 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    14dc:	200f      	movs	r0, #15
    14de:	bd10      	pop	{r4, pc}
    14e0:	f00a fff0 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    14e4:	7020      	strb	r0, [r4, #0]
    14e6:	28ff      	cmp	r0, #255	; 0xff
    14e8:	d001      	beq.n	14ee <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    14ea:	2000      	movs	r0, #0
    14ec:	bd10      	pop	{r4, pc}
    14ee:	2173      	movs	r1, #115	; 0x73
    14f0:	201f      	movs	r0, #31
    14f2:	f7ff fab7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    14f6:	0000      	.short	0x0000
    14f8:	20000000 	.word	0x20000000

000014fc <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    14fe:	2000      	movs	r0, #0
    1500:	7048      	strb	r0, [r1, #1]
    1502:	4770      	bx	lr
    1504:	20000000 	.word	0x20000000

00001508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    1508:	4806      	ldr	r0, [pc, #24]	; (1524 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    150a:	4a07      	ldr	r2, [pc, #28]	; (1528 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    150c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    150e:	8852      	ldrh	r2, [r2, #2]
    1510:	4291      	cmp	r1, r2
    1512:	d104      	bne.n	151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    1514:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    1518:	b108      	cbz	r0, 151e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    151a:	2000      	movs	r0, #0
    151c:	4770      	bx	lr
    151e:	2001      	movs	r0, #1
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    1524:	200012cc 	.word	0x200012cc
    1528:	2000032c 	.word	0x2000032c

0000152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    152c:	4901      	ldr	r1, [pc, #4]	; (1534 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    152e:	8048      	strh	r0, [r1, #2]
    1530:	4770      	bx	lr
    1532:	0000      	.short	0x0000
    1534:	2000032c 	.word	0x2000032c

00001538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    1538:	4808      	ldr	r0, [pc, #32]	; (155c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    153a:	4a09      	ldr	r2, [pc, #36]	; (1560 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    153c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    153e:	8852      	ldrh	r2, [r2, #2]
    1540:	4291      	cmp	r1, r2
    1542:	d109      	bne.n	1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1544:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1548:	8481      	strh	r1, [r0, #36]	; 0x24
    154a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    154e:	b119      	cbz	r1, 1558 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    1550:	2100      	movs	r1, #0
    1552:	7001      	strb	r1, [r0, #0]
    1554:	2001      	movs	r0, #1
    1556:	4770      	bx	lr
    1558:	2000      	movs	r0, #0
    155a:	4770      	bx	lr
    155c:	200012cc 	.word	0x200012cc
    1560:	2000032c 	.word	0x2000032c

00001564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    1564:	4807      	ldr	r0, [pc, #28]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1566:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    156a:	2901      	cmp	r1, #1
    156c:	d007      	beq.n	157e <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    156e:	2101      	movs	r1, #1
    1570:	7001      	strb	r1, [r0, #0]
    1572:	4805      	ldr	r0, [pc, #20]	; (1588 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    1574:	4903      	ldr	r1, [pc, #12]	; (1584 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    1576:	8800      	ldrh	r0, [r0, #0]
    1578:	8488      	strh	r0, [r1, #36]	; 0x24
    157a:	2001      	movs	r0, #1
    157c:	4770      	bx	lr
    157e:	2000      	movs	r0, #0
    1580:	4770      	bx	lr
    1582:	0000      	.short	0x0000
    1584:	200012cc 	.word	0x200012cc
    1588:	2000032c 	.word	0x2000032c

0000158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    158c:	4906      	ldr	r1, [pc, #24]	; (15a8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    158e:	4b07      	ldr	r3, [pc, #28]	; (15ac <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    1590:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    1592:	885b      	ldrh	r3, [r3, #2]
    1594:	429a      	cmp	r2, r3
    1596:	d105      	bne.n	15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    1598:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    159c:	b112      	cbz	r2, 15a4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    159e:	6001      	str	r1, [r0, #0]
    15a0:	2001      	movs	r0, #1
    15a2:	4770      	bx	lr
    15a4:	2000      	movs	r0, #0
    15a6:	4770      	bx	lr
    15a8:	200012cc 	.word	0x200012cc
    15ac:	2000032c 	.word	0x2000032c

000015b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    15b0:	4909      	ldr	r1, [pc, #36]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15b2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    15b4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    15b8:	3bff      	subs	r3, #255	; 0xff
    15ba:	d002      	beq.n	15c2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    15bc:	2100      	movs	r1, #0
    15be:	6001      	str	r1, [r0, #0]
    15c0:	e007      	b.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15c2:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    15c6:	4904      	ldr	r1, [pc, #16]	; (15d8 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    15c8:	2a01      	cmp	r2, #1
    15ca:	d002      	beq.n	15d2 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    15cc:	6001      	str	r1, [r0, #0]
    15ce:	2001      	movs	r0, #1
    15d0:	4770      	bx	lr
    15d2:	2000      	movs	r0, #0
    15d4:	4770      	bx	lr
    15d6:	0000      	.short	0x0000
    15d8:	200012cc 	.word	0x200012cc

000015dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    15dc:	4901      	ldr	r1, [pc, #4]	; (15e4 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    15de:	8008      	strh	r0, [r1, #0]
    15e0:	4770      	bx	lr
    15e2:	0000      	.short	0x0000
    15e4:	2000032c 	.word	0x2000032c

000015e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    15e8:	4905      	ldr	r1, [pc, #20]	; (1600 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    15ea:	2000      	movs	r0, #0
    15ec:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    15f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
    15f4:	8488      	strh	r0, [r1, #36]	; 0x24
    15f6:	4903      	ldr	r1, [pc, #12]	; (1604 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    15f8:	8008      	strh	r0, [r1, #0]
    15fa:	8048      	strh	r0, [r1, #2]
    15fc:	4770      	bx	lr
    15fe:	0000      	.short	0x0000
    1600:	200012cc 	.word	0x200012cc
    1604:	2000032c 	.word	0x2000032c
    1608:	4905      	ldr	r1, [pc, #20]	; (1620 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    160a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    160c:	4282      	cmp	r2, r0
    160e:	d105      	bne.n	161c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    1610:	2000      	movs	r0, #0
    1612:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    1616:	f64f 70ff 	movw	r0, #65535	; 0xffff
    161a:	8488      	strh	r0, [r1, #36]	; 0x24
    161c:	4770      	bx	lr
    161e:	0000      	.short	0x0000
    1620:	200012cc 	.word	0x200012cc

00001624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    1624:	4a0a      	ldr	r2, [pc, #40]	; (1650 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    1626:	b110      	cbz	r0, 162e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    1628:	2801      	cmp	r0, #1
    162a:	d007      	beq.n	163c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    162c:	e00e      	b.n	164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    162e:	7850      	ldrb	r0, [r2, #1]
    1630:	b160      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1632:	f8d2 0002 	ldr.w	r0, [r2, #2]
    1636:	6008      	str	r0, [r1, #0]
    1638:	88d0      	ldrh	r0, [r2, #6]
    163a:	e004      	b.n	1646 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    163c:	7810      	ldrb	r0, [r2, #0]
    163e:	b128      	cbz	r0, 164c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    1640:	6890      	ldr	r0, [r2, #8]
    1642:	6008      	str	r0, [r1, #0]
    1644:	8990      	ldrh	r0, [r2, #12]
    1646:	8088      	strh	r0, [r1, #4]
    1648:	2001      	movs	r0, #1
    164a:	4770      	bx	lr
    164c:	2000      	movs	r0, #0
    164e:	4770      	bx	lr
    1650:	20000342 	.word	0x20000342

00001654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    1656:	2301      	movs	r3, #1
    1658:	b138      	cbz	r0, 166a <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    165a:	2801      	cmp	r0, #1
    165c:	d104      	bne.n	1668 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    165e:	7013      	strb	r3, [r2, #0]
    1660:	6808      	ldr	r0, [r1, #0]
    1662:	6090      	str	r0, [r2, #8]
    1664:	8888      	ldrh	r0, [r1, #4]
    1666:	8190      	strh	r0, [r2, #12]
    1668:	4770      	bx	lr
    166a:	7053      	strb	r3, [r2, #1]
    166c:	6808      	ldr	r0, [r1, #0]
    166e:	f8c2 0002 	str.w	r0, [r2, #2]
    1672:	8888      	ldrh	r0, [r1, #4]
    1674:	80d0      	strh	r0, [r2, #6]
    1676:	4770      	bx	lr
    1678:	20000342 	.word	0x20000342

0000167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    167c:	4906      	ldr	r1, [pc, #24]	; (1698 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    167e:	b110      	cbz	r0, 1686 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    1680:	2801      	cmp	r0, #1
    1682:	d002      	beq.n	168a <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    1684:	e005      	b.n	1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    1686:	7848      	ldrb	r0, [r1, #1]
    1688:	e000      	b.n	168c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    168a:	7808      	ldrb	r0, [r1, #0]
    168c:	b108      	cbz	r0, 1692 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    168e:	2001      	movs	r0, #1
    1690:	4770      	bx	lr
    1692:	2000      	movs	r0, #0
    1694:	4770      	bx	lr
    1696:	0000      	.short	0x0000
    1698:	20000342 	.word	0x20000342

0000169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    169c:	4901      	ldr	r1, [pc, #4]	; (16a4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    169e:	7708      	strb	r0, [r1, #28]
    16a0:	4770      	bx	lr
    16a2:	0000      	.short	0x0000
    16a4:	20000a52 	.word	0x20000a52

000016a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    16a8:	b570      	push	{r4, r5, r6, lr}
    16aa:	460c      	mov	r4, r1
    16ac:	4605      	mov	r5, r0
    16ae:	f000 f92b 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    16b2:	b118      	cbz	r0, 16bc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x14>
    16b4:	21d0      	movs	r1, #208	; 0xd0
    16b6:	2027      	movs	r0, #39	; 0x27
    16b8:	f7ff f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    16bc:	4803      	ldr	r0, [pc, #12]	; (16cc <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    16be:	2101      	movs	r1, #1
    16c0:	f00c fcfa 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    16c4:	4802      	ldr	r0, [pc, #8]	; (16d0 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x28>)
    16c6:	e9c0 540b 	strd	r5, r4, [r0, #44]	; 0x2c
    16ca:	bd70      	pop	{r4, r5, r6, pc}
    16cc:	20000a30 	.word	0x20000a30
    16d0:	2000006c 	.word	0x2000006c

000016d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    16d4:	4901      	ldr	r1, [pc, #4]	; (16dc <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    16d6:	2001      	movs	r0, #1
    16d8:	7148      	strb	r0, [r1, #5]
    16da:	4770      	bx	lr
    16dc:	2000006c 	.word	0x2000006c

000016e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    16e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16e4:	4e65      	ldr	r6, [pc, #404]	; (187c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19c>)
    16e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    16e8:	7835      	ldrb	r5, [r6, #0]
    16ea:	bbed      	cbnz	r5, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ec:	b3e2      	cbz	r2, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16ee:	b3db      	cbz	r3, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f0:	b3d4      	cbz	r4, 1768 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    16f2:	f106 0514 	add.w	r5, r6, #20
    16f6:	e9c6 010f 	strd	r0, r1, [r6, #60]	; 0x3c
    16fa:	e885 001c 	stmia.w	r5, {r2, r3, r4}
    16fe:	2700      	movs	r7, #0
    1700:	7177      	strb	r7, [r6, #5]
    1702:	7137      	strb	r7, [r6, #4]
    1704:	70b7      	strb	r7, [r6, #2]
    1706:	7077      	strb	r7, [r6, #1]
    1708:	70f7      	strb	r7, [r6, #3]
    170a:	81b7      	strh	r7, [r6, #12]
    170c:	81f7      	strh	r7, [r6, #14]
    170e:	f000 f959 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1712:	4605      	mov	r5, r0
    1714:	f000 f950 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1718:	4604      	mov	r4, r0
    171a:	f006 fc4d 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    171e:	f006 f9ed 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1722:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    1726:	f006 fccb 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    172a:	69e0      	ldr	r0, [r4, #28]
    172c:	f006 fdae 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    1730:	6960      	ldr	r0, [r4, #20]
    1732:	f006 fda1 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    1736:	f895 0033 	ldrb.w	r0, [r5, #51]	; 0x33
    173a:	f006 fdd7 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    173e:	f04f 0b01 	mov.w	fp, #1
    1742:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1746:	2000      	movs	r0, #0
    1748:	f006 fb3c 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    174c:	2800      	cmp	r0, #0
    174e:	d07d      	beq.n	184c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16c>
    1750:	484b      	ldr	r0, [pc, #300]	; (1880 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    1752:	f006 fb9b 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    1756:	8820      	ldrh	r0, [r4, #0]
    1758:	f7ff fd66 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    175c:	6370      	str	r0, [r6, #52]	; 0x34
    175e:	8820      	ldrh	r0, [r4, #0]
    1760:	f7ff fd4c 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    1764:	63b0      	str	r0, [r6, #56]	; 0x38
    1766:	e000      	b.n	176a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    1768:	e009      	b.n	177e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x9e>
    176a:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    176e:	f88d 0000 	strb.w	r0, [sp]
    1772:	9800      	ldr	r0, [sp, #0]
    1774:	9000      	str	r0, [sp, #0]
    1776:	f89d 0000 	ldrb.w	r0, [sp]
    177a:	b9a8      	cbnz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    177c:	e002      	b.n	1784 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa4>
    177e:	f240 1145 	movw	r1, #325	; 0x145
    1782:	e077      	b.n	1874 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x194>
    1784:	6f20      	ldr	r0, [r4, #112]	; 0x70
    1786:	b178      	cbz	r0, 17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1788:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    178c:	8aa9      	ldrh	r1, [r5, #20]
    178e:	4288      	cmp	r0, r1
    1790:	d10a      	bne.n	17a8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc8>
    1792:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    1796:	2201      	movs	r2, #1
    1798:	4408      	add	r0, r1
    179a:	f8a5 004a 	strh.w	r0, [r5, #74]	; 0x4a
    179e:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    17a2:	6f21      	ldr	r1, [r4, #112]	; 0x70
    17a4:	f009 fcd6 	bl	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    17a8:	f105 0288 	add.w	r2, r5, #136	; 0x88
    17ac:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>
    17b0:	e892 110c 	ldmia.w	r2, {r2, r3, r8, ip}
    17b4:	e889 110c 	stmia.w	r9, {r2, r3, r8, ip}
    17b8:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
    17bc:	f8c9 2019 	str.w	r2, [r9, #25]
    17c0:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    17c4:	f8c9 101d 	str.w	r1, [r9, #29]
    17c8:	f000 f930 	bl	1a2c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x108>
    17cc:	8f22      	ldrh	r2, [r4, #56]	; 0x38
    17ce:	4601      	mov	r1, r0
    17d0:	46ba      	mov	sl, r7
    17d2:	4610      	mov	r0, r2
    17d4:	f00c fa13 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17d8:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    17da:	4281      	cmp	r1, r0
    17dc:	d200      	bcs.n	17e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x100>
    17de:	4608      	mov	r0, r1
    17e0:	71b0      	strb	r0, [r6, #6]
    17e2:	46b0      	mov	r8, r6
    17e4:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    17e8:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    17ea:	f895 7023 	ldrb.w	r7, [r5, #35]	; 0x23
    17ee:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
    17f0:	2908      	cmp	r1, #8
    17f2:	d100      	bne.n	17f6 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x116>
    17f4:	2104      	movs	r1, #4
    17f6:	f00c fa02 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    17fa:	b90f      	cbnz	r7, 1800 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    17fc:	1d00      	adds	r0, r0, #4
    17fe:	b280      	uxth	r0, r0
    1800:	4286      	cmp	r6, r0
    1802:	d200      	bcs.n	1806 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x126>
    1804:	4630      	mov	r0, r6
    1806:	f888 0007 	strb.w	r0, [r8, #7]
    180a:	f888 0008 	strb.w	r0, [r8, #8]
    180e:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
    1812:	b188      	cbz	r0, 1838 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x158>
    1814:	f889 b018 	strb.w	fp, [r9, #24]
    1818:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    181c:	e9c9 1204 	strd	r1, r2, [r9, #16]
    1820:	4656      	mov	r6, sl
    1822:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1826:	f00c f8c7 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    182a:	4603      	mov	r3, r0
    182c:	22fb      	movs	r2, #251	; 0xfb
    182e:	4915      	ldr	r1, [pc, #84]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1830:	4630      	mov	r0, r6
    1832:	9600      	str	r6, [sp, #0]
    1834:	f006 f8ce 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1838:	2001      	movs	r0, #1
    183a:	f000 fb71 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    183e:	4812      	ldr	r0, [pc, #72]	; (1888 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    1840:	6800      	ldr	r0, [r0, #0]
    1842:	2803      	cmp	r0, #3
    1844:	d014      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    1846:	280b      	cmp	r0, #11
    1848:	d012      	beq.n	1870 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x190>
    184a:	e000      	b.n	184e <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x16e>
    184c:	e00e      	b.n	186c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x18c>
    184e:	480d      	ldr	r0, [pc, #52]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    1850:	220e      	movs	r2, #14
    1852:	2100      	movs	r1, #0
    1854:	304a      	adds	r0, #74	; 0x4a
    1856:	f00e ff84 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    185a:	480a      	ldr	r0, [pc, #40]	; (1884 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    185c:	8aa9      	ldrh	r1, [r5, #20]
    185e:	304a      	adds	r0, #74	; 0x4a
    1860:	8041      	strh	r1, [r0, #2]
    1862:	8821      	ldrh	r1, [r4, #0]
    1864:	8001      	strh	r1, [r0, #0]
    1866:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    186a:	7101      	strb	r1, [r0, #4]
    186c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1870:	f240 2102 	movw	r1, #514	; 0x202
    1874:	2027      	movs	r0, #39	; 0x27
    1876:	f7ff f8f5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    187a:	0000      	.short	0x0000
    187c:	2000006c 	.word	0x2000006c
    1880:	000020a8 	.word	0x000020a8
    1884:	20000a08 	.word	0x20000a08
    1888:	40001550 	.word	0x40001550

0000188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    188c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    1890:	4688      	mov	r8, r1
    1892:	4607      	mov	r7, r0
    1894:	f000 f896 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1898:	4c1a      	ldr	r4, [pc, #104]	; (1904 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x78>)
    189a:	4605      	mov	r5, r0
    189c:	07b8      	lsls	r0, r7, #30
    189e:	6a61      	ldr	r1, [r4, #36]	; 0x24
    18a0:	784e      	ldrb	r6, [r1, #1]
    18a2:	d516      	bpl.n	18d2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x46>
    18a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18a6:	b330      	cbz	r0, 18f6 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x6a>
    18a8:	8962      	ldrh	r2, [r4, #10]
    18aa:	1cd2      	adds	r2, r2, #3
    18ac:	f00e fedf 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    18b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    18b2:	6260      	str	r0, [r4, #36]	; 0x24
    18b4:	4669      	mov	r1, sp
    18b6:	aa01      	add	r2, sp, #4
    18b8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ba:	f00b fdd6 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    18be:	9800      	ldr	r0, [sp, #0]
    18c0:	f00b fd70 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    18c4:	f8c8 0000 	str.w	r0, [r8]
    18c8:	4631      	mov	r1, r6
    18ca:	2201      	movs	r2, #1
    18cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    18ce:	f00b fd20 	bl	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    18d2:	07f8      	lsls	r0, r7, #31
    18d4:	d00d      	beq.n	18f2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    18d6:	e9d5 0120 	ldrd	r0, r1, [r5, #128]	; 0x80
    18da:	3518      	adds	r5, #24
    18dc:	1c40      	adds	r0, r0, #1
    18de:	f141 0100 	adc.w	r1, r1, #0
    18e2:	e9c5 011a 	strd	r0, r1, [r5, #104]	; 0x68
    18e6:	f815 0918 	ldrb.w	r0, [r5], #-24
    18ea:	2801      	cmp	r0, #1
    18ec:	d008      	beq.n	1900 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x74>
    18ee:	2001      	movs	r0, #1
    18f0:	7628      	strb	r0, [r5, #24]
    18f2:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    18f6:	f240 4166 	movw	r1, #1126	; 0x466
    18fa:	2027      	movs	r0, #39	; 0x27
    18fc:	f7ff f8b2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1900:	2000      	movs	r0, #0
    1902:	e7f5      	b.n	18f0 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x64>
    1904:	2000006c 	.word	0x2000006c

00001908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    1908:	4804      	ldr	r0, [pc, #16]	; (191c <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    190a:	7800      	ldrb	r0, [r0, #0]
    190c:	b108      	cbz	r0, 1912 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    190e:	200c      	movs	r0, #12
    1910:	4770      	bx	lr
    1912:	4903      	ldr	r1, [pc, #12]	; (1920 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    1914:	2000      	movs	r0, #0
    1916:	7708      	strb	r0, [r1, #28]
    1918:	4770      	bx	lr
    191a:	0000      	.short	0x0000
    191c:	2000006c 	.word	0x2000006c
    1920:	20000a52 	.word	0x20000a52

00001924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    1924:	4812      	ldr	r0, [pc, #72]	; (1970 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    1926:	b508      	push	{r3, lr}
    1928:	7801      	ldrb	r1, [r0, #0]
    192a:	b139      	cbz	r1, 193c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    192c:	7800      	ldrb	r0, [r0, #0]
    192e:	2801      	cmp	r0, #1
    1930:	d006      	beq.n	1940 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    1932:	f240 211a 	movw	r1, #538	; 0x21a
    1936:	2027      	movs	r0, #39	; 0x27
    1938:	f7ff f894 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    193c:	f000 f9ca 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1940:	f000 f83a 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1944:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    1948:	f88d 1000 	strb.w	r1, [sp]
    194c:	9900      	ldr	r1, [sp, #0]
    194e:	9100      	str	r1, [sp, #0]
    1950:	f89d 1000 	ldrb.w	r1, [sp]
    1954:	2900      	cmp	r1, #0
    1956:	d10a      	bne.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    1958:	6f01      	ldr	r1, [r0, #112]	; 0x70
    195a:	2900      	cmp	r1, #0
    195c:	d007      	beq.n	196e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    195e:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    1962:	2200      	movs	r2, #0
    1964:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1968:	4611      	mov	r1, r2
    196a:	f009 bbf3 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    196e:	bd08      	pop	{r3, pc}
    1970:	2000006c 	.word	0x2000006c
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	2600      	movs	r6, #0
    1978:	4605      	mov	r5, r0
    197a:	704e      	strb	r6, [r1, #1]
    197c:	2022      	movs	r0, #34	; 0x22
    197e:	4f09      	ldr	r7, [pc, #36]	; (19a4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    1980:	460c      	mov	r4, r1
    1982:	7008      	strb	r0, [r1, #0]
    1984:	722e      	strb	r6, [r5, #8]
    1986:	220e      	movs	r2, #14
    1988:	4639      	mov	r1, r7
    198a:	1d20      	adds	r0, r4, #4
    198c:	f00e fe6f 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1990:	7a28      	ldrb	r0, [r5, #8]
    1992:	f88d 0000 	strb.w	r0, [sp]
    1996:	9800      	ldr	r0, [sp, #0]
    1998:	9000      	str	r0, [sp, #0]
    199a:	f89d 0000 	ldrb.w	r0, [sp]
    199e:	2800      	cmp	r0, #0
    19a0:	d1f0      	bne.n	1984 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    19a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19a4:	20000a60 	.word	0x20000a60
    19a8:	4a02      	ldr	r2, [pc, #8]	; (19b4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x90>)
    19aa:	8993      	ldrh	r3, [r2, #12]
    19ac:	4303      	orrs	r3, r0
    19ae:	8193      	strh	r3, [r2, #12]
    19b0:	6952      	ldr	r2, [r2, #20]
    19b2:	4710      	bx	r2
    19b4:	2000006c 	.word	0x2000006c
    19b8:	4801      	ldr	r0, [pc, #4]	; (19c0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x9c>)
    19ba:	6840      	ldr	r0, [r0, #4]
    19bc:	4770      	bx	lr
    19be:	0000      	.short	0x0000
    19c0:	200000a8 	.word	0x200000a8
    19c4:	4801      	ldr	r0, [pc, #4]	; (19cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa8>)
    19c6:	6840      	ldr	r0, [r0, #4]
    19c8:	3088      	adds	r0, #136	; 0x88
    19ca:	4770      	bx	lr
    19cc:	200000a8 	.word	0x200000a8
    19d0:	4a01      	ldr	r2, [pc, #4]	; (19d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb4>)
    19d2:	2100      	movs	r1, #0
    19d4:	6952      	ldr	r2, [r2, #20]
    19d6:	4710      	bx	r2
    19d8:	2000006c 	.word	0x2000006c
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4605      	mov	r5, r0
    19e0:	2901      	cmp	r1, #1
    19e2:	d81c      	bhi.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19e4:	4c10      	ldr	r4, [pc, #64]	; (1a28 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x104>)
    19e6:	69a1      	ldr	r1, [r4, #24]
    19e8:	4788      	blx	r1
    19ea:	b1c0      	cbz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19ec:	7920      	ldrb	r0, [r4, #4]
    19ee:	b9b0      	cbnz	r0, 1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    19f0:	2d01      	cmp	r5, #1
    19f2:	d116      	bne.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    19f4:	f104 0010 	add.w	r0, r4, #16
    19f8:	7800      	ldrb	r0, [r0, #0]
    19fa:	06c1      	lsls	r1, r0, #27
    19fc:	d405      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    19fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1a00:	7809      	ldrb	r1, [r1, #0]
    1a02:	06c9      	lsls	r1, r1, #27
    1a04:	d401      	bmi.n	1a0a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe6>
    1a06:	2101      	movs	r1, #1
    1a08:	e000      	b.n	1a0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xe8>
    1a0a:	2100      	movs	r1, #0
    1a0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1a0e:	b91a      	cbnz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a10:	8962      	ldrh	r2, [r4, #10]
    1a12:	b10a      	cbz	r2, 1a18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xf4>
    1a14:	06c0      	lsls	r0, r0, #27
    1a16:	d502      	bpl.n	1a1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfa>
    1a18:	89a0      	ldrh	r0, [r4, #12]
    1a1a:	4301      	orrs	r1, r0
    1a1c:	d001      	beq.n	1a22 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    1a1e:	2001      	movs	r0, #1
    1a20:	bd70      	pop	{r4, r5, r6, pc}
    1a22:	2000      	movs	r0, #0
    1a24:	bd70      	pop	{r4, r5, r6, pc}
    1a26:	0000      	.short	0x0000
    1a28:	2000006c 	.word	0x2000006c
    1a2c:	b510      	push	{r4, lr}
    1a2e:	f7ff ffc3 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1a32:	4604      	mov	r4, r0
    1a34:	f7ff ffc6 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a38:	4601      	mov	r1, r0
    1a3a:	7f40      	ldrb	r0, [r0, #29]
    1a3c:	4a0b      	ldr	r2, [pc, #44]	; (1a6c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>)
    1a3e:	2825      	cmp	r0, #37	; 0x25
    1a40:	d00a      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a42:	2826      	cmp	r0, #38	; 0x26
    1a44:	d008      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a46:	7f89      	ldrb	r1, [r1, #30]
    1a48:	2925      	cmp	r1, #37	; 0x25
    1a4a:	d005      	beq.n	1a58 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x134>
    1a4c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a50:	2804      	cmp	r0, #4
    1a52:	d100      	bne.n	1a56 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x132>
    1a54:	2008      	movs	r0, #8
    1a56:	bd10      	pop	{r4, pc}
    1a58:	6850      	ldr	r0, [r2, #4]
    1a5a:	f890 1262 	ldrb.w	r1, [r0, #610]	; 0x262
    1a5e:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1a66:	f00b bfb5 	b.w	d9d4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    1a6a:	0000      	.short	0x0000
    1a6c:	200000a8 	.word	0x200000a8
    1a70:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1a74:	468b      	mov	fp, r1
    1a76:	4681      	mov	r9, r0
    1a78:	f7ff ffa4 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1a7c:	2700      	movs	r7, #0
    1a7e:	4c64      	ldr	r4, [pc, #400]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1a80:	4606      	mov	r6, r0
    1a82:	f88d 7008 	strb.w	r7, [sp, #8]
    1a86:	9703      	str	r7, [sp, #12]
    1a88:	9701      	str	r7, [sp, #4]
    1a8a:	7820      	ldrb	r0, [r4, #0]
    1a8c:	463d      	mov	r5, r7
    1a8e:	2802      	cmp	r0, #2
    1a90:	d004      	beq.n	1a9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x178>
    1a92:	f240 41ea 	movw	r1, #1258	; 0x4ea
    1a96:	2027      	movs	r0, #39	; 0x27
    1a98:	f7fe ffe4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1a9c:	7ba0      	ldrb	r0, [r4, #14]
    1a9e:	0640      	lsls	r0, r0, #25
    1aa0:	d406      	bmi.n	1ab0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18c>
    1aa2:	2040      	movs	r0, #64	; 0x40
    1aa4:	f7ff ff94 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1aa8:	89e0      	ldrh	r0, [r4, #14]
    1aaa:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    1aae:	81e0      	strh	r0, [r4, #14]
    1ab0:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    1ab4:	f04f 0801 	mov.w	r8, #1
    1ab8:	f1b9 0f00 	cmp.w	r9, #0
    1abc:	d03a      	beq.n	1b34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x210>
    1abe:	b180      	cbz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ac0:	f006 f856 	bl	7b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    1ac4:	f006 f830 	bl	7b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    1ac8:	b958      	cbnz	r0, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1aca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1acc:	7841      	ldrb	r1, [r0, #1]
    1ace:	b141      	cbz	r1, 1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1ad0:	7800      	ldrb	r0, [r0, #0]
    1ad2:	7e31      	ldrb	r1, [r6, #24]
    1ad4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1ad8:	4288      	cmp	r0, r1
    1ada:	d102      	bne.n	1ae2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    1adc:	f884 8001 	strb.w	r8, [r4, #1]
    1ae0:	e092      	b.n	1c08 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e4>
    1ae2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ae4:	7841      	ldrb	r1, [r0, #1]
    1ae6:	8161      	strh	r1, [r4, #10]
    1ae8:	b121      	cbz	r1, 1af4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d0>
    1aea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    1aec:	f00b fd93 	bl	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    1af0:	62a0      	str	r0, [r4, #40]	; 0x28
    1af2:	e000      	b.n	1af6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1d2>
    1af4:	62a5      	str	r5, [r4, #40]	; 0x28
    1af6:	89e0      	ldrh	r0, [r4, #14]
    1af8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    1afc:	81e0      	strh	r0, [r4, #14]
    1afe:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b00:	7df1      	ldrb	r1, [r6, #23]
    1b02:	7800      	ldrb	r0, [r0, #0]
    1b04:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1b08:	4288      	cmp	r0, r1
    1b0a:	d007      	beq.n	1b1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1f8>
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	f000 f985 	bl	1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>
    1b12:	89e0      	ldrh	r0, [r4, #14]
    1b14:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    1b18:	81e0      	strh	r0, [r4, #14]
    1b1a:	e000      	b.n	1b1e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fa>
    1b1c:	2701      	movs	r7, #1
    1b1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1b20:	7e31      	ldrb	r1, [r6, #24]
    1b22:	7800      	ldrb	r0, [r0, #0]
    1b24:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1b28:	4288      	cmp	r0, r1
    1b2a:	d10d      	bne.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b2c:	a802      	add	r0, sp, #8
    1b2e:	f000 f92b 	bl	1d88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c>
    1b32:	e009      	b.n	1b48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x224>
    1b34:	b108      	cbz	r0, 1b3a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x216>
    1b36:	f006 f815 	bl	7b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    1b3a:	78a0      	ldrb	r0, [r4, #2]
    1b3c:	1c40      	adds	r0, r0, #1
    1b3e:	70a0      	strb	r0, [r4, #2]
    1b40:	89e0      	ldrh	r0, [r4, #14]
    1b42:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    1b46:	81e0      	strh	r0, [r4, #14]
    1b48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    1b4c:	f896 0022 	ldrb.w	r0, [r6, #34]	; 0x22
    1b50:	f10a 0a3c 	add.w	sl, sl, #60	; 0x3c
    1b54:	b198      	cbz	r0, 1b7e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x25a>
    1b56:	f7ff ff2f 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1b5a:	492e      	ldr	r1, [pc, #184]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b5c:	f881 8018 	strb.w	r8, [r1, #24]
    1b60:	e9d6 231e 	ldrd	r2, r3, [r6, #120]	; 0x78
    1b64:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1b68:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    1b6c:	f00b ff24 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1b70:	4603      	mov	r3, r0
    1b72:	22fb      	movs	r2, #251	; 0xfb
    1b74:	4927      	ldr	r1, [pc, #156]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1b76:	4628      	mov	r0, r5
    1b78:	9500      	str	r5, [sp, #0]
    1b7a:	f005 ff2b 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1b7e:	f04f 0800 	mov.w	r8, #0
    1b82:	f1bb 0f00 	cmp.w	fp, #0
    1b86:	d104      	bne.n	1b92 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x26e>
    1b88:	78a1      	ldrb	r1, [r4, #2]
    1b8a:	2001      	movs	r0, #1
    1b8c:	f7ff ff26 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1b90:	b120      	cbz	r0, 1b9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x278>
    1b92:	f006 fb5d 	bl	8250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    1b96:	f04f 0801 	mov.w	r8, #1
    1b9a:	e002      	b.n	1ba2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27e>
    1b9c:	2000      	movs	r0, #0
    1b9e:	f000 f9bf 	bl	1f20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d4>
    1ba2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1ba6:	b118      	cbz	r0, 1bb0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x28c>
    1ba8:	a901      	add	r1, sp, #4
    1baa:	2002      	movs	r0, #2
    1bac:	f7ff fe6e 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    1bb0:	4818      	ldr	r0, [pc, #96]	; (1c14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f0>)
    1bb2:	304a      	adds	r0, #74	; 0x4a
    1bb4:	b117      	cbz	r7, 1bbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x298>
    1bb6:	8942      	ldrh	r2, [r0, #10]
    1bb8:	1c52      	adds	r2, r2, #1
    1bba:	8142      	strh	r2, [r0, #10]
    1bbc:	f1b9 0f00 	cmp.w	r9, #0
    1bc0:	d008      	beq.n	1bd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    1bc2:	88c1      	ldrh	r1, [r0, #6]
    1bc4:	1c49      	adds	r1, r1, #1
    1bc6:	80c1      	strh	r1, [r0, #6]
    1bc8:	4811      	ldr	r0, [pc, #68]	; (1c10 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>)
    1bca:	70a5      	strb	r5, [r4, #2]
    1bcc:	303c      	adds	r0, #60	; 0x3c
    1bce:	f001 fa1d 	bl	300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>
    1bd2:	e002      	b.n	1bda <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    1bd4:	8901      	ldrh	r1, [r0, #8]
    1bd6:	1c49      	adds	r1, r1, #1
    1bd8:	8101      	strh	r1, [r0, #8]
    1bda:	9803      	ldr	r0, [sp, #12]
    1bdc:	b140      	cbz	r0, 1bf0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2cc>
    1bde:	f00b fbe1 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    1be2:	f8da 1004 	ldr.w	r1, [sl, #4]
    1be6:	1c40      	adds	r0, r0, #1
    1be8:	7205      	strb	r5, [r0, #8]
    1bea:	220e      	movs	r2, #14
    1bec:	f00c fa97 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1bf0:	9801      	ldr	r0, [sp, #4]
    1bf2:	b130      	cbz	r0, 1c02 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2de>
    1bf4:	f8da 1004 	ldr.w	r1, [sl, #4]
    1bf8:	7205      	strb	r5, [r0, #8]
    1bfa:	222a      	movs	r2, #42	; 0x2a
    1bfc:	9801      	ldr	r0, [sp, #4]
    1bfe:	f00c fa8e 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    1c02:	f1b8 0f00 	cmp.w	r8, #0
    1c06:	d001      	beq.n	1c0c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2e8>
    1c08:	f000 f864 	bl	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1c0c:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1c10:	2000006c 	.word	0x2000006c
    1c14:	20000a08 	.word	0x20000a08
    1c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1c1c:	4688      	mov	r8, r1
    1c1e:	4681      	mov	r9, r0
    1c20:	f7ff fed0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1c24:	4d29      	ldr	r5, [pc, #164]	; (1ccc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a8>)
    1c26:	4604      	mov	r4, r0
    1c28:	7828      	ldrb	r0, [r5, #0]
    1c2a:	2801      	cmp	r0, #1
    1c2c:	d004      	beq.n	1c38 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x314>
    1c2e:	f240 4175 	movw	r1, #1141	; 0x475
    1c32:	2027      	movs	r0, #39	; 0x27
    1c34:	f7fe ff16 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1c38:	7c20      	ldrb	r0, [r4, #16]
    1c3a:	2600      	movs	r6, #0
    1c3c:	2701      	movs	r7, #1
    1c3e:	b120      	cbz	r0, 1c4a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x326>
    1c40:	7426      	strb	r6, [r4, #16]
    1c42:	2100      	movs	r1, #0
    1c44:	2004      	movs	r0, #4
    1c46:	f7ff feaf 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c4a:	6a29      	ldr	r1, [r5, #32]
    1c4c:	7808      	ldrb	r0, [r1, #0]
    1c4e:	43c0      	mvns	r0, r0
    1c50:	0780      	lsls	r0, r0, #30
    1c52:	d109      	bne.n	1c68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x344>
    1c54:	7da0      	ldrb	r0, [r4, #22]
    1c56:	bb88      	cbnz	r0, 1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c58:	2002      	movs	r0, #2
    1c5a:	f7ff fea5 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1c5e:	6a28      	ldr	r0, [r5, #32]
    1c60:	7800      	ldrb	r0, [r0, #0]
    1c62:	43c0      	mvns	r0, r0
    1c64:	0780      	lsls	r0, r0, #30
    1c66:	d029      	beq.n	1cbc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    1c68:	6a28      	ldr	r0, [r5, #32]
    1c6a:	7840      	ldrb	r0, [r0, #1]
    1c6c:	b110      	cbz	r0, 1c74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x350>
    1c6e:	2002      	movs	r0, #2
    1c70:	75a0      	strb	r0, [r4, #22]
    1c72:	e000      	b.n	1c76 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x352>
    1c74:	75a7      	strb	r7, [r4, #22]
    1c76:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
    1c7a:	b198      	cbz	r0, 1ca4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x380>
    1c7c:	f7ff fe9c 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1c80:	4913      	ldr	r1, [pc, #76]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c82:	7a2d      	ldrb	r5, [r5, #8]
    1c84:	760e      	strb	r6, [r1, #24]
    1c86:	e9d4 2320 	ldrd	r2, r3, [r4, #128]	; 0x80
    1c8a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    1c8e:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    1c92:	f00b fe91 	bl	d9b8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    1c96:	4603      	mov	r3, r0
    1c98:	462a      	mov	r2, r5
    1c9a:	490d      	ldr	r1, [pc, #52]	; (1cd0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3ac>)
    1c9c:	4638      	mov	r0, r7
    1c9e:	9600      	str	r6, [sp, #0]
    1ca0:	f005 fe98 	bl	79d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>
    1ca4:	ea38 0009 	bics.w	r0, r8, r9
    1ca8:	d004      	beq.n	1cb4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x390>
    1caa:	2100      	movs	r1, #0
    1cac:	4608      	mov	r0, r1
    1cae:	f7ff fe95 	bl	19dc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xb8>
    1cb2:	b128      	cbz	r0, 1cc0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x39c>
    1cb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cb8:	f000 b80c 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1cbc:	2003      	movs	r0, #3
    1cbe:	e7d7      	b.n	1c70 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    1cc0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1cc4:	2000      	movs	r0, #0
    1cc6:	f000 b8ef 	b.w	1ea8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15c>
    1cca:	0000      	.short	0x0000
    1ccc:	2000006c 	.word	0x2000006c
    1cd0:	20000a08 	.word	0x20000a08
    1cd4:	b510      	push	{r4, lr}
    1cd6:	f005 ffeb 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    1cda:	f005 ff0f 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>)
    1ce0:	89e0      	ldrh	r0, [r4, #14]
    1ce2:	f7ff fe75 	bl	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1ce6:	480c      	ldr	r0, [pc, #48]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1ce8:	7f00      	ldrb	r0, [r0, #28]
    1cea:	b158      	cbz	r0, 1d04 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3e0>
    1cec:	490a      	ldr	r1, [pc, #40]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cee:	220e      	movs	r2, #14
    1cf0:	f101 000e 	add.w	r0, r1, #14
    1cf4:	f00e fcbb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1cf8:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f4>)
    1cfa:	2224      	movs	r2, #36	; 0x24
    1cfc:	4907      	ldr	r1, [pc, #28]	; (1d1c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    1cfe:	301d      	adds	r0, #29
    1d00:	f00c fa21 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    1d04:	69e2      	ldr	r2, [r4, #28]
    1d06:	7921      	ldrb	r1, [r4, #4]
    1d08:	7860      	ldrb	r0, [r4, #1]
    1d0a:	4790      	blx	r2
    1d0c:	2000      	movs	r0, #0
    1d0e:	7020      	strb	r0, [r4, #0]
    1d10:	bd10      	pop	{r4, pc}
    1d12:	0000      	.short	0x0000
    1d14:	2000006c 	.word	0x2000006c
    1d18:	20000a52 	.word	0x20000a52
    1d1c:	00001975 	.word	0x00001975
    1d20:	4808      	ldr	r0, [pc, #32]	; (1d44 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x420>)
    1d22:	b510      	push	{r4, lr}
    1d24:	7800      	ldrb	r0, [r0, #0]
    1d26:	2802      	cmp	r0, #2
    1d28:	d004      	beq.n	1d34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x410>
    1d2a:	f240 214d 	movw	r1, #589	; 0x24d
    1d2e:	2027      	movs	r0, #39	; 0x27
    1d30:	f7fe fe98 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1d34:	4904      	ldr	r1, [pc, #16]	; (1d48 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    1d36:	2001      	movs	r0, #1
    1d38:	7308      	strb	r0, [r1, #12]
    1d3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1d3e:	f7ff bfc9 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1d42:	0000      	.short	0x0000
    1d44:	2000006c 	.word	0x2000006c
    1d48:	20000a52 	.word	0x20000a52
    1d4c:	b430      	push	{r4, r5}
    1d4e:	4604      	mov	r4, r0
    1d50:	480c      	ldr	r0, [pc, #48]	; (1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>)
    1d52:	7a00      	ldrb	r0, [r0, #8]
    1d54:	b10b      	cbz	r3, 1d5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe>
    1d56:	1d00      	adds	r0, r0, #4
    1d58:	b2c0      	uxtb	r0, r0
    1d5a:	b93a      	cbnz	r2, 1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d5c:	28ff      	cmp	r0, #255	; 0xff
    1d5e:	d105      	bne.n	1d6c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20>
    1d60:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
    1d64:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1d68:	429a      	cmp	r2, r3
    1d6a:	d009      	beq.n	1d80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34>
    1d6c:	b121      	cbz	r1, 1d78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c>
    1d6e:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    1d72:	bc30      	pop	{r4, r5}
    1d74:	f006 ba90 	b.w	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    1d78:	20ff      	movs	r0, #255	; 0xff
    1d7a:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    1d7e:	e7f8      	b.n	1d72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x26>
    1d80:	bc30      	pop	{r4, r5}
    1d82:	4770      	bx	lr
    1d84:	2000006c 	.word	0x2000006c
    1d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1d8c:	4607      	mov	r7, r0
    1d8e:	f7ff fe19 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1d92:	4c21      	ldr	r4, [pc, #132]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1d94:	4605      	mov	r5, r0
    1d96:	2601      	movs	r6, #1
    1d98:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1d9a:	7808      	ldrb	r0, [r1, #0]
    1d9c:	f000 0003 	and.w	r0, r0, #3
    1da0:	2801      	cmp	r0, #1
    1da2:	d00c      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da4:	2802      	cmp	r0, #2
    1da6:	d00a      	beq.n	1dbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x72>
    1da8:	2803      	cmp	r0, #3
    1daa:	d11b      	bne.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dac:	742e      	strb	r6, [r5, #16]
    1dae:	89e0      	ldrh	r0, [r4, #14]
    1db0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    1db4:	81e0      	strh	r0, [r4, #14]
    1db6:	2001      	movs	r0, #1
    1db8:	f7ff fdf6 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1dbc:	e012      	b.n	1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dbe:	7848      	ldrb	r0, [r1, #1]
    1dc0:	b180      	cbz	r0, 1de4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x98>
    1dc2:	89e1      	ldrh	r1, [r4, #14]
    1dc4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    1dc8:	81e1      	strh	r1, [r4, #14]
    1dca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1dcc:	2900      	cmp	r1, #0
    1dce:	d018      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1dd0:	28fb      	cmp	r0, #251	; 0xfb
    1dd2:	d818      	bhi.n	1e06 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xba>
    1dd4:	7960      	ldrb	r0, [r4, #5]
    1dd6:	b120      	cbz	r0, 1de2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x96>
    1dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1ddc:	2020      	movs	r0, #32
    1dde:	f7ff bdf7 	b.w	19d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xac>
    1de2:	703e      	strb	r6, [r7, #0]
    1de4:	7e28      	ldrb	r0, [r5, #24]
    1de6:	2801      	cmp	r0, #1
    1de8:	d012      	beq.n	1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dea:	762e      	strb	r6, [r5, #24]
    1dec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1dee:	7840      	ldrb	r0, [r0, #1]
    1df0:	2800      	cmp	r0, #0
    1df2:	d006      	beq.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1df4:	e9f5 0120 	ldrd	r0, r1, [r5, #128]!	; 0x80
    1df8:	1c40      	adds	r0, r0, #1
    1dfa:	f141 0100 	adc.w	r1, r1, #0
    1dfe:	e9c5 0100 	strd	r0, r1, [r5]
    1e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e06:	7920      	ldrb	r0, [r4, #4]
    1e08:	f040 0010 	orr.w	r0, r0, #16
    1e0c:	7120      	strb	r0, [r4, #4]
    1e0e:	e7f8      	b.n	1e02 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xb6>
    1e10:	2000      	movs	r0, #0
    1e12:	7628      	strb	r0, [r5, #24]
    1e14:	e7ea      	b.n	1dec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xa0>
    1e16:	0000      	.short	0x0000
    1e18:	2000006c 	.word	0x2000006c
    1e1c:	b570      	push	{r4, r5, r6, lr}
    1e1e:	4605      	mov	r5, r0
    1e20:	f7ff fdd0 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1e24:	4604      	mov	r4, r0
    1e26:	7d80      	ldrb	r0, [r0, #22]
    1e28:	2800      	cmp	r0, #0
    1e2a:	d026      	beq.n	1e7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x12e>
    1e2c:	2802      	cmp	r0, #2
    1e2e:	d10c      	bne.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e30:	4817      	ldr	r0, [pc, #92]	; (1e90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x144>)
    1e32:	4629      	mov	r1, r5
    1e34:	6b40      	ldr	r0, [r0, #52]	; 0x34
    1e36:	f00b fa44 	bl	d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    1e3a:	b1f8      	cbz	r0, 1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e3c:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e40:	1c40      	adds	r0, r0, #1
    1e42:	f141 0100 	adc.w	r1, r1, #0
    1e46:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e4a:	2500      	movs	r5, #0
    1e4c:	75a5      	strb	r5, [r4, #22]
    1e4e:	7c60      	ldrb	r0, [r4, #17]
    1e50:	2601      	movs	r6, #1
    1e52:	b170      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e54:	7465      	strb	r5, [r4, #17]
    1e56:	f7ff fb6f 	bl	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    1e5a:	b190      	cbz	r0, 1e82 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x136>
    1e5c:	2100      	movs	r1, #0
    1e5e:	2008      	movs	r0, #8
    1e60:	f7ff fda2 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1e64:	e9d4 011e 	ldrd	r0, r1, [r4, #120]	; 0x78
    1e68:	1c40      	adds	r0, r0, #1
    1e6a:	f141 0100 	adc.w	r1, r1, #0
    1e6e:	e9c4 011e 	strd	r0, r1, [r4, #120]	; 0x78
    1e72:	7de0      	ldrb	r0, [r4, #23]
    1e74:	2801      	cmp	r0, #1
    1e76:	d009      	beq.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e78:	75e6      	strb	r6, [r4, #23]
    1e7a:	bd70      	pop	{r4, r5, r6, pc}
    1e7c:	f240 31e3 	movw	r1, #995	; 0x3e3
    1e80:	e001      	b.n	1e86 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13a>
    1e82:	f240 31fa 	movw	r1, #1018	; 0x3fa
    1e86:	2027      	movs	r0, #39	; 0x27
    1e88:	f7fe fdec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    1e8c:	75e5      	strb	r5, [r4, #23]
    1e8e:	bd70      	pop	{r4, r5, r6, pc}
    1e90:	2000006c 	.word	0x2000006c
    1e94:	4803      	ldr	r0, [pc, #12]	; (1ea4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x158>)
    1e96:	7800      	ldrb	r0, [r0, #0]
    1e98:	2800      	cmp	r0, #0
    1e9a:	d001      	beq.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e9c:	f7ff bf1a 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    1ea0:	4770      	bx	lr
    1ea2:	0000      	.short	0x0000
    1ea4:	2000006c 	.word	0x2000006c
    1ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1eac:	4607      	mov	r7, r0
    1eae:	f7ff fd83 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1eb2:	4680      	mov	r8, r0
    1eb4:	f7ff fd86 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1eb8:	4c17      	ldr	r4, [pc, #92]	; (1f18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1cc>)
    1eba:	4605      	mov	r5, r0
    1ebc:	463a      	mov	r2, r7
    1ebe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1ec0:	6260      	str	r0, [r4, #36]	; 0x24
    1ec2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1ec6:	2101      	movs	r1, #1
    1ec8:	4640      	mov	r0, r8
    1eca:	f7ff ff3f 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1ece:	f895 0023 	ldrb.w	r0, [r5, #35]	; 0x23
    1ed2:	2600      	movs	r6, #0
    1ed4:	b168      	cbz	r0, 1ef2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a6>
    1ed6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1ed8:	f006 f914 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1edc:	480f      	ldr	r0, [pc, #60]	; (1f1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1d0>)
    1ede:	7606      	strb	r6, [r0, #24]
    1ee0:	e9d5 1220 	ldrd	r1, r2, [r5, #128]	; 0x80
    1ee4:	e9c0 1204 	strd	r1, r2, [r0, #16]
    1ee8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1eea:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1eec:	f005 fdc4 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    1ef0:	e004      	b.n	1efc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b0>
    1ef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1ef4:	f006 f906 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    1ef8:	f005 fe00 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    1efc:	b917      	cbnz	r7, 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1efe:	4630      	mov	r0, r6
    1f00:	f005 ffcc 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    1f04:	2100      	movs	r1, #0
    1f06:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    1f0a:	4608      	mov	r0, r1
    1f0c:	f006 f982 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    1f10:	2002      	movs	r0, #2
    1f12:	7020      	strb	r0, [r4, #0]
    1f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f18:	2000006c 	.word	0x2000006c
    1f1c:	20000a08 	.word	0x20000a08
    1f20:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    1f24:	4604      	mov	r4, r0
    1f26:	f7ff fd4d 	bl	19c4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xa0>
    1f2a:	4605      	mov	r5, r0
    1f2c:	f7ff fd44 	bl	19b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x94>
    1f30:	f04f 0800 	mov.w	r8, #0
    1f34:	f88d 8000 	strb.w	r8, [sp]
    1f38:	4606      	mov	r6, r0
    1f3a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 20a0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x354>
    1f3e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
    1f42:	4622      	mov	r2, r4
    1f44:	4641      	mov	r1, r8
    1f46:	f7ff ff01 	bl	1d4c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT>
    1f4a:	7da8      	ldrb	r0, [r5, #22]
    1f4c:	2701      	movs	r7, #1
    1f4e:	f1a9 0420 	sub.w	r4, r9, #32
    1f52:	b140      	cbz	r0, 1f66 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21a>
    1f54:	2801      	cmp	r0, #1
    1f56:	d01f      	beq.n	1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f58:	2802      	cmp	r0, #2
    1f5a:	d030      	beq.n	1fbe <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x272>
    1f5c:	2803      	cmp	r0, #3
    1f5e:	d03c      	beq.n	1fda <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28e>
    1f60:	f240 21ff 	movw	r1, #767	; 0x2ff
    1f64:	e058      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1f66:	79a0      	ldrb	r0, [r4, #6]
    1f68:	2150      	movs	r1, #80	; 0x50
    1f6a:	f8ad 0004 	strh.w	r0, [sp, #4]
    1f6e:	5388      	strh	r0, [r1, r6]
    1f70:	4648      	mov	r0, r9
    1f72:	f7ff fb0b 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1f76:	b128      	cbz	r0, 1f84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x238>
    1f78:	2080      	movs	r0, #128	; 0x80
    1f7a:	6a21      	ldr	r1, [r4, #32]
    1f7c:	f7ff fd14 	bl	19a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    1f80:	746f      	strb	r7, [r5, #17]
    1f82:	e02e      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f84:	466a      	mov	r2, sp
    1f86:	a901      	add	r1, sp, #4
    1f88:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1f8a:	f00b fd2d 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1f8e:	6220      	str	r0, [r4, #32]
    1f90:	b110      	cbz	r0, 1f98 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24c>
    1f92:	f895 105d 	ldrb.w	r1, [r5, #93]	; 0x5d
    1f96:	b111      	cbz	r1, 1f9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x252>
    1f98:	4842      	ldr	r0, [pc, #264]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    1f9a:	6220      	str	r0, [r4, #32]
    1f9c:	e021      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1f9e:	f89d 1000 	ldrb.w	r1, [sp]
    1fa2:	b931      	cbnz	r1, 1fb2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x266>
    1fa4:	f8a0 8000 	strh.w	r8, [r0]
    1fa8:	f880 8002 	strb.w	r8, [r0, #2]
    1fac:	2101      	movs	r1, #1
    1fae:	f00c f883 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    1fb2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    1fb6:	6a20      	ldr	r0, [r4, #32]
    1fb8:	f00c f818 	bl	dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>
    1fbc:	e011      	b.n	1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fbe:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    1fc2:	f8ad 0004 	strh.w	r0, [sp, #4]
    1fc6:	466a      	mov	r2, sp
    1fc8:	a901      	add	r1, sp, #4
    1fca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1fcc:	f00b fd0c 	bl	d9e8 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    1fd0:	6220      	str	r0, [r4, #32]
    1fd2:	b930      	cbnz	r0, 1fe2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x296>
    1fd4:	f240 21e9 	movw	r1, #745	; 0x2e9
    1fd8:	e01e      	b.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1fda:	4648      	mov	r0, r9
    1fdc:	f7ff fad6 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    1fe0:	b1c0      	cbz	r0, 2014 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2c8>
    1fe2:	6a20      	ldr	r0, [r4, #32]
    1fe4:	2308      	movs	r3, #8
    1fe6:	7801      	ldrb	r1, [r0, #0]
    1fe8:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
    1fec:	7001      	strb	r1, [r0, #0]
    1fee:	7dea      	ldrb	r2, [r5, #23]
    1ff0:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    1ff4:	4311      	orrs	r1, r2
    1ff6:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
    1ffa:	7001      	strb	r1, [r0, #0]
    1ffc:	7e2a      	ldrb	r2, [r5, #24]
    1ffe:	2304      	movs	r3, #4
    2000:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    2004:	4311      	orrs	r1, r2
    2006:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    200a:	7001      	strb	r1, [r0, #0]
    200c:	43c9      	mvns	r1, r1
    200e:	0789      	lsls	r1, r1, #30
    2010:	d005      	beq.n	201e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d2>
    2012:	e007      	b.n	2024 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d8>
    2014:	f240 21f2 	movw	r1, #754	; 0x2f2
    2018:	2027      	movs	r0, #39	; 0x27
    201a:	f7fe fd23 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    201e:	78c0      	ldrb	r0, [r0, #3]
    2020:	2802      	cmp	r0, #2
    2022:	d00f      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    2024:	6b60      	ldr	r0, [r4, #52]	; 0x34
    2026:	f00b fa63 	bl	d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    202a:	b108      	cbz	r0, 2030 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2e4>
    202c:	2101      	movs	r1, #1
    202e:	e00a      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2030:	6a20      	ldr	r0, [r4, #32]
    2032:	7800      	ldrb	r0, [r0, #0]
    2034:	43c0      	mvns	r0, r0
    2036:	0780      	lsls	r0, r0, #30
    2038:	d004      	beq.n	2044 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2f8>
    203a:	f7ff fa65 	bl	1508 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    203e:	f080 0101 	eor.w	r1, r0, #1
    2042:	e000      	b.n	2046 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fa>
    2044:	2100      	movs	r1, #0
    2046:	6a20      	ldr	r0, [r4, #32]
    2048:	7802      	ldrb	r2, [r0, #0]
    204a:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    204e:	7001      	strb	r1, [r0, #0]
    2050:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
    2054:	b181      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    2056:	7841      	ldrb	r1, [r0, #1]
    2058:	b171      	cbz	r1, 2078 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x32c>
    205a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    205c:	f006 f852 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    2060:	4810      	ldr	r0, [pc, #64]	; (20a4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x358>)
    2062:	3828      	subs	r0, #40	; 0x28
    2064:	7607      	strb	r7, [r0, #24]
    2066:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    206a:	e9c0 1204 	strd	r1, r2, [r0, #16]
    206e:	6a21      	ldr	r1, [r4, #32]
    2070:	6b20      	ldr	r0, [r4, #48]	; 0x30
    2072:	f005 fd01 	bl	7a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>
    2076:	e003      	b.n	2080 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x334>
    2078:	f006 f844 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    207c:	f005 fd3e 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    2080:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    2084:	2101      	movs	r1, #1
    2086:	2000      	movs	r0, #0
    2088:	f006 f8c4 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    208c:	70e7      	strb	r7, [r4, #3]
    208e:	6a20      	ldr	r0, [r4, #32]
    2090:	8801      	ldrh	r1, [r0, #0]
    2092:	8221      	strh	r1, [r4, #16]
    2094:	7880      	ldrb	r0, [r0, #2]
    2096:	74a0      	strb	r0, [r4, #18]
    2098:	7027      	strb	r7, [r4, #0]
    209a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    209e:	0000      	.short	0x0000
    20a0:	2000008c 	.word	0x2000008c
    20a4:	20000a30 	.word	0x20000a30
    20a8:	00001d21 	.word	0x00001d21
    20ac:	00001a71 	.word	0x00001a71
    20b0:	00001c19 	.word	0x00001c19
    20b4:	00001e95 	.word	0x00001e95

000020b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    20b8:	4800      	ldr	r0, [pc, #0]	; (20bc <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    20ba:	4770      	bx	lr
    20bc:	200014c5 	.word	0x200014c5

000020c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    20c0:	b570      	push	{r4, r5, r6, lr}
    20c2:	2600      	movs	r6, #0
    20c4:	4635      	mov	r5, r6
    20c6:	4c0f      	ldr	r4, [pc, #60]	; (2104 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    20c8:	e018      	b.n	20fc <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    20ca:	1960      	adds	r0, r4, r5
    20cc:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    20d0:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    20d4:	2a01      	cmp	r2, #1
    20d6:	d002      	beq.n	20de <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    20d8:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    20dc:	b160      	cbz	r0, 20f8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    20de:	480a      	ldr	r0, [pc, #40]	; (2108 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    20e0:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    20e4:	1c73      	adds	r3, r6, #1
    20e6:	5585      	strb	r5, [r0, r6]
    20e8:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    20ec:	4630      	mov	r0, r6
    20ee:	b2de      	uxtb	r6, r3
    20f0:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    20f4:	f006 f9b4 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    20f8:	1c6d      	adds	r5, r5, #1
    20fa:	b2ed      	uxtb	r5, r5
    20fc:	78a0      	ldrb	r0, [r4, #2]
    20fe:	42a8      	cmp	r0, r5
    2100:	d8e3      	bhi.n	20ca <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    2102:	bd70      	pop	{r4, r5, r6, pc}
    2104:	200012f2 	.word	0x200012f2
    2108:	20000334 	.word	0x20000334

0000210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    210c:	4904      	ldr	r1, [pc, #16]	; (2120 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    210e:	788a      	ldrb	r2, [r1, #2]
    2110:	4282      	cmp	r2, r0
    2112:	d903      	bls.n	211c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    2114:	4408      	add	r0, r1
    2116:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    211a:	4770      	bx	lr
    211c:	2000      	movs	r0, #0
    211e:	4770      	bx	lr
    2120:	200012f2 	.word	0x200012f2

00002124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    2124:	4904      	ldr	r1, [pc, #16]	; (2138 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    2126:	788a      	ldrb	r2, [r1, #2]
    2128:	4282      	cmp	r2, r0
    212a:	d903      	bls.n	2134 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    212c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    2130:	3083      	adds	r0, #131	; 0x83
    2132:	4770      	bx	lr
    2134:	2000      	movs	r0, #0
    2136:	4770      	bx	lr
    2138:	200012f2 	.word	0x200012f2

0000213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    213c:	4a05      	ldr	r2, [pc, #20]	; (2154 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    213e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2142:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    2146:	6802      	ldr	r2, [r0, #0]
    2148:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    214c:	8880      	ldrh	r0, [r0, #4]
    214e:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    2152:	4770      	bx	lr
    2154:	200012f2 	.word	0x200012f2

00002158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    2158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    215c:	4607      	mov	r7, r0
    215e:	2400      	movs	r4, #0
    2160:	4d10      	ldr	r5, [pc, #64]	; (21a4 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    2162:	e019      	b.n	2198 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    2164:	4620      	mov	r0, r4
    2166:	f7ff ffdd 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    216a:	0003      	movs	r3, r0
    216c:	d012      	beq.n	2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    216e:	1928      	adds	r0, r5, r4
    2170:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    2174:	b970      	cbnz	r0, 2194 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    2176:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    217a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    217e:	f206 160b 	addw	r6, r6, #267	; 0x10b
    2182:	463a      	mov	r2, r7
    2184:	4631      	mov	r1, r6
    2186:	4618      	mov	r0, r3
    2188:	f00b fbb1 	bl	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    218c:	4630      	mov	r0, r6
    218e:	4621      	mov	r1, r4
    2190:	f7ff ffd4 	bl	213c <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    2194:	1c64      	adds	r4, r4, #1
    2196:	b2e4      	uxtb	r4, r4
    2198:	78a8      	ldrb	r0, [r5, #2]
    219a:	42a0      	cmp	r0, r4
    219c:	d8e2      	bhi.n	2164 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    21a2:	0000      	.short	0x0000
    21a4:	200012f2 	.word	0x200012f2

000021a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    21a8:	4904      	ldr	r1, [pc, #16]	; (21bc <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    21aa:	788a      	ldrb	r2, [r1, #2]
    21ac:	4282      	cmp	r2, r0
    21ae:	d903      	bls.n	21b8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    21b0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    21b4:	1cc0      	adds	r0, r0, #3
    21b6:	4770      	bx	lr
    21b8:	2000      	movs	r0, #0
    21ba:	4770      	bx	lr
    21bc:	200012f2 	.word	0x200012f2

000021c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    21c0:	4908      	ldr	r1, [pc, #32]	; (21e4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    21c2:	788a      	ldrb	r2, [r1, #2]
    21c4:	4282      	cmp	r2, r0
    21c6:	d903      	bls.n	21d0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    21c8:	180a      	adds	r2, r1, r0
    21ca:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    21ce:	b10a      	cbz	r2, 21d4 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    21d0:	2000      	movs	r0, #0
    21d2:	4770      	bx	lr
    21d4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    21d8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    21dc:	f200 100b 	addw	r0, r0, #267	; 0x10b
    21e0:	4770      	bx	lr
    21e2:	0000      	.short	0x0000
    21e4:	200012f2 	.word	0x200012f2

000021e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    21e8:	b510      	push	{r4, lr}
    21ea:	f240 12d3 	movw	r2, #467	; 0x1d3
    21ee:	2100      	movs	r1, #0
    21f0:	4808      	ldr	r0, [pc, #32]	; (2214 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    21f2:	f00e fab6 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    21f6:	2208      	movs	r2, #8
    21f8:	21ff      	movs	r1, #255	; 0xff
    21fa:	4807      	ldr	r0, [pc, #28]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    21fc:	f00e fab1 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2200:	4805      	ldr	r0, [pc, #20]	; (2218 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    2202:	2100      	movs	r1, #0
    2204:	1f00      	subs	r0, r0, #4
    2206:	7001      	strb	r1, [r0, #0]
    2208:	7041      	strb	r1, [r0, #1]
    220a:	f44f 7161 	mov.w	r1, #900	; 0x384
    220e:	8041      	strh	r1, [r0, #2]
    2210:	bd10      	pop	{r4, pc}
    2212:	0000      	.short	0x0000
    2214:	200012f2 	.word	0x200012f2
    2218:	20000334 	.word	0x20000334

0000221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    221c:	4b0b      	ldr	r3, [pc, #44]	; (224c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    221e:	b510      	push	{r4, lr}
    2220:	789c      	ldrb	r4, [r3, #2]
    2222:	4284      	cmp	r4, r0
    2224:	d90f      	bls.n	2246 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    2226:	4418      	add	r0, r3
    2228:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    222c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2230:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    2234:	700b      	strb	r3, [r1, #0]
    2236:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    223a:	6011      	str	r1, [r2, #0]
    223c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    2240:	8090      	strh	r0, [r2, #4]
    2242:	2001      	movs	r0, #1
    2244:	bd10      	pop	{r4, pc}
    2246:	2000      	movs	r0, #0
    2248:	bd10      	pop	{r4, pc}
    224a:	0000      	.short	0x0000
    224c:	200012f2 	.word	0x200012f2

00002250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    2250:	4907      	ldr	r1, [pc, #28]	; (2270 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    2252:	788a      	ldrb	r2, [r1, #2]
    2254:	4282      	cmp	r2, r0
    2256:	d909      	bls.n	226c <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    2258:	4408      	add	r0, r1
    225a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    225e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2262:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2266:	f000 0001 	and.w	r0, r0, #1
    226a:	4770      	bx	lr
    226c:	2000      	movs	r0, #0
    226e:	4770      	bx	lr
    2270:	200012f2 	.word	0x200012f2

00002274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    2274:	4801      	ldr	r0, [pc, #4]	; (227c <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    2276:	8840      	ldrh	r0, [r0, #2]
    2278:	4770      	bx	lr
    227a:	0000      	.short	0x0000
    227c:	20000330 	.word	0x20000330

00002280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    2280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2284:	4614      	mov	r4, r2
    2286:	2501      	movs	r5, #1
    2288:	2200      	movs	r2, #0
    228a:	461f      	mov	r7, r3
    228c:	462e      	mov	r6, r5
    228e:	7022      	strb	r2, [r4, #0]
    2290:	f000 f8f6 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    2294:	2810      	cmp	r0, #16
    2296:	d024      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    2298:	f8df 8054 	ldr.w	r8, [pc, #84]	; 22f0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    229c:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    22a0:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    22a4:	f001 0101 	and.w	r1, r1, #1
    22a8:	7021      	strb	r1, [r4, #0]
    22aa:	f000 f8b9 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    22ae:	4604      	mov	r4, r0
    22b0:	2810      	cmp	r0, #16
    22b2:	d016      	beq.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22b4:	b107      	cbz	r7, 22b8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    22b6:	703c      	strb	r4, [r7, #0]
    22b8:	4620      	mov	r0, r4
    22ba:	f7ff ff75 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    22be:	b180      	cbz	r0, 22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22c0:	f898 1002 	ldrb.w	r1, [r8, #2]
    22c4:	4640      	mov	r0, r8
    22c6:	42a1      	cmp	r1, r4
    22c8:	d903      	bls.n	22d2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    22ca:	1901      	adds	r1, r0, r4
    22cc:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    22d0:	e000      	b.n	22d4 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    22d2:	2600      	movs	r6, #0
    22d4:	eb08 0004 	add.w	r0, r8, r4
    22d8:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    22dc:	2801      	cmp	r0, #1
    22de:	d004      	beq.n	22ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    22e0:	2500      	movs	r5, #0
    22e2:	ea45 0006 	orr.w	r0, r5, r6
    22e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ea:	2501      	movs	r5, #1
    22ec:	e7f9      	b.n	22e2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    22ee:	0000      	.short	0x0000
    22f0:	200012f2 	.word	0x200012f2

000022f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    22f4:	b570      	push	{r4, r5, r6, lr}
    22f6:	460d      	mov	r5, r1
    22f8:	4606      	mov	r6, r0
    22fa:	f000 f8c1 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    22fe:	4c10      	ldr	r4, [pc, #64]	; (2340 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    2300:	2810      	cmp	r0, #16
    2302:	d007      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2304:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    2308:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    230c:	07c9      	lsls	r1, r1, #31
    230e:	d001      	beq.n	2314 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    2310:	2001      	movs	r0, #1
    2312:	bd70      	pop	{r4, r5, r6, pc}
    2314:	7861      	ldrb	r1, [r4, #1]
    2316:	2908      	cmp	r1, #8
    2318:	d210      	bcs.n	233c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    231a:	2810      	cmp	r0, #16
    231c:	d008      	beq.n	2330 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    231e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    2322:	2101      	movs	r1, #1
    2324:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    2328:	7860      	ldrb	r0, [r4, #1]
    232a:	1c40      	adds	r0, r0, #1
    232c:	7060      	strb	r0, [r4, #1]
    232e:	e7ef      	b.n	2310 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    2330:	2201      	movs	r2, #1
    2332:	4629      	mov	r1, r5
    2334:	4630      	mov	r0, r6
    2336:	f000 f887 	bl	2448 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    233a:	e7f5      	b.n	2328 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    233c:	2000      	movs	r0, #0
    233e:	bd70      	pop	{r4, r5, r6, pc}
    2340:	200012f2 	.word	0x200012f2

00002344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    2344:	b570      	push	{r4, r5, r6, lr}
    2346:	4d0b      	ldr	r5, [pc, #44]	; (2374 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    2348:	7828      	ldrb	r0, [r5, #0]
    234a:	1e40      	subs	r0, r0, #1
    234c:	b244      	sxtb	r4, r0
    234e:	e00a      	b.n	2366 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    2350:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    2354:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    2358:	07c0      	lsls	r0, r0, #31
    235a:	d002      	beq.n	2362 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    235c:	b2e0      	uxtb	r0, r4
    235e:	f000 f8ed 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    2362:	1e64      	subs	r4, r4, #1
    2364:	b264      	sxtb	r4, r4
    2366:	2c00      	cmp	r4, #0
    2368:	daf2      	bge.n	2350 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    236a:	4903      	ldr	r1, [pc, #12]	; (2378 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    236c:	2000      	movs	r0, #0
    236e:	7048      	strb	r0, [r1, #1]
    2370:	bd70      	pop	{r4, r5, r6, pc}
    2372:	0000      	.short	0x0000
    2374:	200012f2 	.word	0x200012f2
    2378:	20000330 	.word	0x20000330

0000237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    237c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2380:	2400      	movs	r4, #0
    2382:	4625      	mov	r5, r4
    2384:	4e18      	ldr	r6, [pc, #96]	; (23e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    2386:	e029      	b.n	23dc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    2388:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    238c:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    2390:	07c0      	lsls	r0, r0, #31
    2392:	d021      	beq.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    2394:	4628      	mov	r0, r5
    2396:	f000 f843 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    239a:	4603      	mov	r3, r0
    239c:	f7ff ff04 	bl	21a8 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    23a0:	4601      	mov	r1, r0
    23a2:	2000      	movs	r0, #0
    23a4:	2b10      	cmp	r3, #16
    23a6:	d009      	beq.n	23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23a8:	18f2      	adds	r2, r6, r3
    23aa:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    23ae:	f1bc 0f01 	cmp.w	ip, #1
    23b2:	d002      	beq.n	23ba <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    23b4:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    23b8:	b102      	cbz	r2, 23bc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    23ba:	2001      	movs	r0, #1
    23bc:	1e40      	subs	r0, r0, #1
    23be:	4201      	tst	r1, r0
    23c0:	d10a      	bne.n	23d8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    23c2:	480a      	ldr	r0, [pc, #40]	; (23ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    23c4:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    23c8:	5503      	strb	r3, [r0, r4]
    23ca:	4620      	mov	r0, r4
    23cc:	1c64      	adds	r4, r4, #1
    23ce:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    23d2:	b2e4      	uxtb	r4, r4
    23d4:	f006 f844 	bl	8460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    23d8:	1c6d      	adds	r5, r5, #1
    23da:	b2ed      	uxtb	r5, r5
    23dc:	7830      	ldrb	r0, [r6, #0]
    23de:	42a8      	cmp	r0, r5
    23e0:	d8d2      	bhi.n	2388 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    23e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    23e6:	0000      	.short	0x0000
    23e8:	200012f2 	.word	0x200012f2
    23ec:	20000334 	.word	0x20000334
    23f0:	4602      	mov	r2, r0
    23f2:	4809      	ldr	r0, [pc, #36]	; (2418 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    23f4:	b510      	push	{r4, lr}
    23f6:	7800      	ldrb	r0, [r0, #0]
    23f8:	460b      	mov	r3, r1
    23fa:	b158      	cbz	r0, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    23fc:	4807      	ldr	r0, [pc, #28]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    23fe:	7881      	ldrb	r1, [r0, #2]
    2400:	b141      	cbz	r1, 2414 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    2402:	b10b      	cbz	r3, 2408 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    2404:	1cc0      	adds	r0, r0, #3
    2406:	e001      	b.n	240c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    2408:	4804      	ldr	r0, [pc, #16]	; (241c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    240a:	3083      	adds	r0, #131	; 0x83
    240c:	f005 fa3c 	bl	7888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    2410:	2001      	movs	r0, #1
    2412:	bd10      	pop	{r4, pc}
    2414:	2000      	movs	r0, #0
    2416:	bd10      	pop	{r4, pc}
    2418:	20000330 	.word	0x20000330
    241c:	200012f2 	.word	0x200012f2
    2420:	4908      	ldr	r1, [pc, #32]	; (2444 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    2422:	b510      	push	{r4, lr}
    2424:	4603      	mov	r3, r0
    2426:	2000      	movs	r0, #0
    2428:	788a      	ldrb	r2, [r1, #2]
    242a:	e006      	b.n	243a <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    242c:	180c      	adds	r4, r1, r0
    242e:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    2432:	429c      	cmp	r4, r3
    2434:	d004      	beq.n	2440 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    2436:	1c40      	adds	r0, r0, #1
    2438:	b2c0      	uxtb	r0, r0
    243a:	4282      	cmp	r2, r0
    243c:	d8f6      	bhi.n	242c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    243e:	2010      	movs	r0, #16
    2440:	bd10      	pop	{r4, pc}
    2442:	0000      	.short	0x0000
    2444:	200012f2 	.word	0x200012f2
    2448:	b570      	push	{r4, r5, r6, lr}
    244a:	4b0c      	ldr	r3, [pc, #48]	; (247c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    244c:	4604      	mov	r4, r0
    244e:	7818      	ldrb	r0, [r3, #0]
    2450:	1c45      	adds	r5, r0, #1
    2452:	701d      	strb	r5, [r3, #0]
    2454:	2810      	cmp	r0, #16
    2456:	d303      	bcc.n	2460 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    2458:	2146      	movs	r1, #70	; 0x46
    245a:	2028      	movs	r0, #40	; 0x28
    245c:	f7fe fb02 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2460:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2464:	680d      	ldr	r5, [r1, #0]
    2466:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    246a:	8889      	ldrh	r1, [r1, #4]
    246c:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    2470:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    2474:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    2478:	bd70      	pop	{r4, r5, r6, pc}
    247a:	0000      	.short	0x0000
    247c:	200012f2 	.word	0x200012f2
    2480:	b5f0      	push	{r4, r5, r6, r7, lr}
    2482:	4c1a      	ldr	r4, [pc, #104]	; (24ec <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x170>)
    2484:	4603      	mov	r3, r0
    2486:	2000      	movs	r0, #0
    2488:	7825      	ldrb	r5, [r4, #0]
    248a:	e02a      	b.n	24e2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x166>
    248c:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    2490:	780f      	ldrb	r7, [r1, #0]
    2492:	f892 c154 	ldrb.w	ip, [r2, #340]	; 0x154
    2496:	f892 6153 	ldrb.w	r6, [r2, #339]	; 0x153
    249a:	ea87 070c 	eor.w	r7, r7, ip
    249e:	405e      	eors	r6, r3
    24a0:	443e      	add	r6, r7
    24a2:	784f      	ldrb	r7, [r1, #1]
    24a4:	f892 c155 	ldrb.w	ip, [r2, #341]	; 0x155
    24a8:	ea87 070c 	eor.w	r7, r7, ip
    24ac:	443e      	add	r6, r7
    24ae:	788f      	ldrb	r7, [r1, #2]
    24b0:	f892 c156 	ldrb.w	ip, [r2, #342]	; 0x156
    24b4:	ea87 070c 	eor.w	r7, r7, ip
    24b8:	443e      	add	r6, r7
    24ba:	78cf      	ldrb	r7, [r1, #3]
    24bc:	f892 c157 	ldrb.w	ip, [r2, #343]	; 0x157
    24c0:	ea87 070c 	eor.w	r7, r7, ip
    24c4:	443e      	add	r6, r7
    24c6:	790f      	ldrb	r7, [r1, #4]
    24c8:	f892 c158 	ldrb.w	ip, [r2, #344]	; 0x158
    24cc:	f892 2159 	ldrb.w	r2, [r2, #345]	; 0x159
    24d0:	ea87 070c 	eor.w	r7, r7, ip
    24d4:	443e      	add	r6, r7
    24d6:	794f      	ldrb	r7, [r1, #5]
    24d8:	4057      	eors	r7, r2
    24da:	42f7      	cmn	r7, r6
    24dc:	d004      	beq.n	24e8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x16c>
    24de:	1c40      	adds	r0, r0, #1
    24e0:	b2c0      	uxtb	r0, r0
    24e2:	4285      	cmp	r5, r0
    24e4:	d8d2      	bhi.n	248c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x110>
    24e6:	2010      	movs	r0, #16
    24e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ea:	0000      	.short	0x0000
    24ec:	200012f2 	.word	0x200012f2
    24f0:	b570      	push	{r4, r5, r6, lr}
    24f2:	4605      	mov	r5, r0
    24f4:	f7ff ff94 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    24f8:	2810      	cmp	r0, #16
    24fa:	d11c      	bne.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    24fc:	4c0e      	ldr	r4, [pc, #56]	; (2538 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1bc>)
    24fe:	7820      	ldrb	r0, [r4, #0]
    2500:	1e40      	subs	r0, r0, #1
    2502:	b2c0      	uxtb	r0, r0
    2504:	7020      	strb	r0, [r4, #0]
    2506:	42a8      	cmp	r0, r5
    2508:	d015      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    250a:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    250e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    2512:	f502 7080 	add.w	r0, r2, #256	; 0x100
    2516:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    251a:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    251e:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    2522:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    2526:	7820      	ldrb	r0, [r4, #0]
    2528:	f7ff ff7a 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    252c:	2810      	cmp	r0, #16
    252e:	d002      	beq.n	2536 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1ba>
    2530:	4420      	add	r0, r4
    2532:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    2536:	bd70      	pop	{r4, r5, r6, pc}
    2538:	200012f2 	.word	0x200012f2
    253c:	4905      	ldr	r1, [pc, #20]	; (2554 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1d8>)
    253e:	784a      	ldrb	r2, [r1, #1]
    2540:	1e52      	subs	r2, r2, #1
    2542:	704a      	strb	r2, [r1, #1]
    2544:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    2548:	2200      	movs	r2, #0
    254a:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    254e:	f7ff bfcf 	b.w	24f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x174>
    2552:	0000      	.short	0x0000
    2554:	200012f2 	.word	0x200012f2

00002558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    2558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    255c:	4604      	mov	r4, r0
    255e:	f100 0788 	add.w	r7, r0, #136	; 0x88
    2562:	b171      	cbz	r1, 2582 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    2564:	f104 06ae 	add.w	r6, r4, #174	; 0xae
    2568:	1e75      	subs	r5, r6, #1
    256a:	2901      	cmp	r1, #1
    256c:	d016      	beq.n	259c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    256e:	2902      	cmp	r1, #2
    2570:	d025      	beq.n	25be <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    2572:	2903      	cmp	r1, #3
    2574:	d110      	bne.n	2598 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    2576:	4631      	mov	r1, r6
    2578:	4628      	mov	r0, r5
    257a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    257e:	f00b bc8e 	b.w	de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    2582:	f44f 722a 	mov.w	r2, #680	; 0x2a8
    2586:	2100      	movs	r1, #0
    2588:	f00e f8eb 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    258c:	4638      	mov	r0, r7
    258e:	f000 f84d 	bl	262c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd4>
    2592:	2020      	movs	r0, #32
    2594:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    259c:	6921      	ldr	r1, [r4, #16]
    259e:	480d      	ldr	r0, [pc, #52]	; (25d4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    25a0:	460a      	mov	r2, r1
    25a2:	4408      	add	r0, r1
    25a4:	fbb0 f0f1 	udiv	r0, r0, r1
    25a8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    25ac:	f640 30b8 	movw	r0, #3000	; 0xbb8
    25b0:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
    25b4:	8b63      	ldrh	r3, [r4, #26]
    25b6:	4638      	mov	r0, r7
    25b8:	f000 f80e 	bl	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25bc:	e7db      	b.n	2576 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    25be:	6901      	ldr	r1, [r0, #16]
    25c0:	f8b4 3276 	ldrh.w	r3, [r4, #630]	; 0x276
    25c4:	f8d4 2270 	ldr.w	r2, [r4, #624]	; 0x270
    25c8:	4638      	mov	r0, r7
    25ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    25ce:	f000 b803 	b.w	25d8 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    25d2:	0000      	.short	0x0000
    25d4:	01c9c37f 	.word	0x01c9c37f
    25d8:	b510      	push	{r4, lr}
    25da:	2400      	movs	r4, #0
    25dc:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    25e0:	f830 4f52 	ldrh.w	r4, [r0, #82]!
    25e4:	434c      	muls	r4, r1
    25e6:	fbb4 f4f2 	udiv	r4, r4, r2
    25ea:	f820 4912 	strh.w	r4, [r0], #-18
    25ee:	f240 2471 	movw	r4, #625	; 0x271
    25f2:	4363      	muls	r3, r4
    25f4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    25f8:	1e5b      	subs	r3, r3, #1
    25fa:	fbb3 f3f2 	udiv	r3, r3, r2
    25fe:	8203      	strh	r3, [r0, #16]
    2600:	4b09      	ldr	r3, [pc, #36]	; (2628 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd0>)
    2602:	fbb3 f3f2 	udiv	r3, r3, r2
    2606:	1c5b      	adds	r3, r3, #1
    2608:	82c3      	strh	r3, [r0, #22]
    260a:	8903      	ldrh	r3, [r0, #8]
    260c:	4363      	muls	r3, r4
    260e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    2612:	1e5b      	subs	r3, r3, #1
    2614:	fbb3 f3f2 	udiv	r3, r3, r2
    2618:	6043      	str	r3, [r0, #4]
    261a:	6803      	ldr	r3, [r0, #0]
    261c:	434b      	muls	r3, r1
    261e:	fbb3 f1f2 	udiv	r1, r3, r2
    2622:	6001      	str	r1, [r0, #0]
    2624:	bd10      	pop	{r4, pc}
    2626:	0000      	.short	0x0000
    2628:	02625a00 	.word	0x02625a00
    262c:	2101      	movs	r1, #1
    262e:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    2632:	490b      	ldr	r1, [pc, #44]	; (2660 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x108>)
    2634:	f8c0 106e 	str.w	r1, [r0, #110]	; 0x6e
    2638:	2107      	movs	r1, #7
    263a:	f8c0 1072 	str.w	r1, [r0, #114]	; 0x72
    263e:	f100 016e 	add.w	r1, r0, #110	; 0x6e
    2642:	780a      	ldrb	r2, [r1, #0]
    2644:	f022 0204 	bic.w	r2, r2, #4
    2648:	700a      	strb	r2, [r1, #0]
    264a:	21fe      	movs	r1, #254	; 0xfe
    264c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    2650:	217f      	movs	r1, #127	; 0x7f
    2652:	7641      	strb	r1, [r0, #25]
    2654:	4903      	ldr	r1, [pc, #12]	; (2664 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x10c>)
    2656:	6081      	str	r1, [r0, #8]
    2658:	2100      	movs	r1, #0
    265a:	e9c0 1100 	strd	r1, r1, [r0]
    265e:	4770      	bx	lr
    2660:	3404492f 	.word	0x3404492f
    2664:	fffce000 	.word	0xfffce000

00002668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>:
    2668:	4902      	ldr	r1, [pc, #8]	; (2674 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ+0xc>)
    266a:	f991 1000 	ldrsb.w	r1, [r1]
    266e:	f00b bbc7 	b.w	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2672:	0000      	.short	0x0000
    2674:	20000350 	.word	0x20000350

00002678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>:
    2678:	b508      	push	{r3, lr}
    267a:	207f      	movs	r0, #127	; 0x7f
    267c:	f88d 0000 	strb.w	r0, [sp]
    2680:	4668      	mov	r0, sp
    2682:	f005 fded 	bl	8260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    2686:	b140      	cbz	r0, 269a <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x22>
    2688:	4805      	ldr	r0, [pc, #20]	; (26a0 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I+0x28>)
    268a:	7840      	ldrb	r0, [r0, #1]
    268c:	4240      	negs	r0, r0
    268e:	b241      	sxtb	r1, r0
    2690:	f99d 0000 	ldrsb.w	r0, [sp]
    2694:	f00b fbb4 	bl	de00 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x28>
    2698:	bd08      	pop	{r3, pc}
    269a:	f99d 0000 	ldrsb.w	r0, [sp]
    269e:	bd08      	pop	{r3, pc}
    26a0:	20000350 	.word	0x20000350

000026a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    26a4:	4909      	ldr	r1, [pc, #36]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26a6:	b508      	push	{r3, lr}
    26a8:	7809      	ldrb	r1, [r1, #0]
    26aa:	f88d 1000 	strb.w	r1, [sp]
    26ae:	9900      	ldr	r1, [sp, #0]
    26b0:	9100      	str	r1, [sp, #0]
    26b2:	f89d 1000 	ldrb.w	r1, [sp]
    26b6:	b109      	cbz	r1, 26bc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    26b8:	2000      	movs	r0, #0
    26ba:	bd08      	pop	{r3, pc}
    26bc:	4903      	ldr	r1, [pc, #12]	; (26cc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    26be:	f8d1 2001 	ldr.w	r2, [r1, #1]
    26c2:	6002      	str	r2, [r0, #0]
    26c4:	7949      	ldrb	r1, [r1, #5]
    26c6:	7101      	strb	r1, [r0, #4]
    26c8:	2001      	movs	r0, #1
    26ca:	bd08      	pop	{r3, pc}
    26cc:	20000352 	.word	0x20000352

000026d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    26d0:	4905      	ldr	r1, [pc, #20]	; (26e8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    26d2:	22ff      	movs	r2, #255	; 0xff
    26d4:	700a      	strb	r2, [r1, #0]
    26d6:	460a      	mov	r2, r1
    26d8:	6803      	ldr	r3, [r0, #0]
    26da:	f8c2 3001 	str.w	r3, [r2, #1]
    26de:	7900      	ldrb	r0, [r0, #4]
    26e0:	7150      	strb	r0, [r2, #5]
    26e2:	2000      	movs	r0, #0
    26e4:	7008      	strb	r0, [r1, #0]
    26e6:	4770      	bx	lr
    26e8:	20000352 	.word	0x20000352
    26ec:	b570      	push	{r4, r5, r6, lr}
    26ee:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
    26f2:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    26f6:	2401      	movs	r4, #1
    26f8:	fb03 2101 	mla	r1, r3, r1, r2
    26fc:	2225      	movs	r2, #37	; 0x25
    26fe:	fbb1 f3f2 	udiv	r3, r1, r2
    2702:	fb02 1113 	mls	r1, r2, r3, r1
    2706:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    270a:	f880 1032 	strb.w	r1, [r0, #50]	; 0x32
    270e:	f001 0307 	and.w	r3, r1, #7
    2712:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
    2716:	fa04 f303 	lsl.w	r3, r4, r3
    271a:	421a      	tst	r2, r3
    271c:	d004      	beq.n	2728 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x58>
    271e:	bf00      	nop
    2720:	f880 1033 	strb.w	r1, [r0, #51]	; 0x33
    2724:	2000      	movs	r0, #0
    2726:	bd70      	pop	{r4, r5, r6, pc}
    2728:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
    272c:	fbb1 f3f2 	udiv	r3, r1, r2
    2730:	fb02 1113 	mls	r1, r2, r3, r1
    2734:	1c49      	adds	r1, r1, #1
    2736:	b2c9      	uxtb	r1, r1
    2738:	2300      	movs	r3, #0
    273a:	18c5      	adds	r5, r0, r3
    273c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
    2740:	428a      	cmp	r2, r1
    2742:	d312      	bcc.n	276a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9a>
    2744:	f895 5026 	ldrb.w	r5, [r5, #38]	; 0x26
    2748:	2200      	movs	r2, #0
    274a:	bf00      	nop
    274c:	fa04 f602 	lsl.w	r6, r4, r2
    2750:	4235      	tst	r5, r6
    2752:	d001      	beq.n	2758 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x88>
    2754:	1e49      	subs	r1, r1, #1
    2756:	b2c9      	uxtb	r1, r1
    2758:	b121      	cbz	r1, 2764 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x94>
    275a:	1c52      	adds	r2, r2, #1
    275c:	b2d2      	uxtb	r2, r2
    275e:	2a08      	cmp	r2, #8
    2760:	d3f4      	bcc.n	274c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x7c>
    2762:	e004      	b.n	276e <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x9e>
    2764:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    2768:	e7da      	b.n	2720 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x50>
    276a:	1a89      	subs	r1, r1, r2
    276c:	b2c9      	uxtb	r1, r1
    276e:	1c5b      	adds	r3, r3, #1
    2770:	b2db      	uxtb	r3, r3
    2772:	2b05      	cmp	r3, #5
    2774:	d3e1      	bcc.n	273a <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x6a>
    2776:	201f      	movs	r0, #31
    2778:	bd70      	pop	{r4, r5, r6, pc}
    277a:	0000      	movs	r0, r0
    277c:	b570      	push	{r4, r5, r6, lr}
    277e:	1c49      	adds	r1, r1, #1
    2780:	2300      	movs	r3, #0
    2782:	b2c9      	uxtb	r1, r1
    2784:	2401      	movs	r4, #1
    2786:	18c5      	adds	r5, r0, r3
    2788:	79aa      	ldrb	r2, [r5, #6]
    278a:	428a      	cmp	r2, r1
    278c:	d312      	bcc.n	27b4 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe4>
    278e:	f895 5001 	ldrb.w	r5, [r5, #1]
    2792:	2200      	movs	r2, #0
    2794:	fa04 f602 	lsl.w	r6, r4, r2
    2798:	4235      	tst	r5, r6
    279a:	d001      	beq.n	27a0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xd0>
    279c:	1e49      	subs	r1, r1, #1
    279e:	b2c9      	uxtb	r1, r1
    27a0:	b121      	cbz	r1, 27ac <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xdc>
    27a2:	1c52      	adds	r2, r2, #1
    27a4:	b2d2      	uxtb	r2, r2
    27a6:	2a08      	cmp	r2, #8
    27a8:	d3f4      	bcc.n	2794 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xc4>
    27aa:	e005      	b.n	27b8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xe8>
    27ac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
    27b0:	b2c0      	uxtb	r0, r0
    27b2:	bd70      	pop	{r4, r5, r6, pc}
    27b4:	1a89      	subs	r1, r1, r2
    27b6:	b2c9      	uxtb	r1, r1
    27b8:	1c5b      	adds	r3, r3, #1
    27ba:	b2db      	uxtb	r3, r3
    27bc:	2b05      	cmp	r3, #5
    27be:	d3e2      	bcc.n	2786 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xb6>
    27c0:	219d      	movs	r1, #157	; 0x9d
    27c2:	2046      	movs	r0, #70	; 0x46
    27c4:	f7fe f94e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

000027c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>:
    27c8:	7841      	ldrb	r1, [r0, #1]
    27ca:	b141      	cbz	r1, 27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27cc:	78c0      	ldrb	r0, [r0, #3]
    27ce:	282b      	cmp	r0, #43	; 0x2b
    27d0:	d203      	bcs.n	27da <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x12>
    27d2:	4a04      	ldr	r2, [pc, #16]	; (27e4 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x1c>)
    27d4:	5c10      	ldrb	r0, [r2, r0]
    27d6:	4288      	cmp	r0, r1
    27d8:	d101      	bne.n	27de <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA+0x16>
    27da:	2001      	movs	r0, #1
    27dc:	4770      	bx	lr
    27de:	2000      	movs	r0, #0
    27e0:	4770      	bx	lr
    27e2:	0000      	.short	0x0000
    27e4:	000108ac 	.word	0x000108ac

000027e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>:
    27e8:	b510      	push	{r4, lr}
    27ea:	2201      	movs	r2, #1
    27ec:	70c1      	strb	r1, [r0, #3]
    27ee:	292b      	cmp	r1, #43	; 0x2b
    27f0:	d202      	bcs.n	27f8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x10>
    27f2:	4a06      	ldr	r2, [pc, #24]	; (280c <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x24>)
    27f4:	5c52      	ldrb	r2, [r2, r1]
    27f6:	e006      	b.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27f8:	29ff      	cmp	r1, #255	; 0xff
    27fa:	d004      	beq.n	2806 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ+0x1e>
    27fc:	f240 4175 	movw	r1, #1141	; 0x475
    2800:	202a      	movs	r0, #42	; 0x2a
    2802:	f7fe f92f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2806:	7042      	strb	r2, [r0, #1]
    2808:	bd10      	pop	{r4, pc}
    280a:	0000      	.short	0x0000
    280c:	000108ac 	.word	0x000108ac

00002810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>:
    2810:	4904      	ldr	r1, [pc, #16]	; (2824 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0x14>)
    2812:	7c89      	ldrb	r1, [r1, #18]
    2814:	0749      	lsls	r1, r1, #29
    2816:	d400      	bmi.n	281a <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xa>
    2818:	b108      	cbz	r0, 281e <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA+0xe>
    281a:	2000      	movs	r0, #0
    281c:	4770      	bx	lr
    281e:	2001      	movs	r0, #1
    2820:	4770      	bx	lr
    2822:	0000      	.short	0x0000
    2824:	20000dc4 	.word	0x20000dc4

00002828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>:
    2828:	4803      	ldr	r0, [pc, #12]	; (2838 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0x10>)
    282a:	7c80      	ldrb	r0, [r0, #18]
    282c:	0780      	lsls	r0, r0, #30
    282e:	d401      	bmi.n	2834 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I+0xc>
    2830:	2001      	movs	r0, #1
    2832:	4770      	bx	lr
    2834:	2000      	movs	r0, #0
    2836:	4770      	bx	lr
    2838:	20000dc4 	.word	0x20000dc4

0000283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>:
    283c:	4803      	ldr	r0, [pc, #12]	; (284c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x10>)
    283e:	7c80      	ldrb	r0, [r0, #18]
    2840:	07c0      	lsls	r0, r0, #31
    2842:	d001      	beq.n	2848 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xc>
    2844:	2000      	movs	r0, #0
    2846:	4770      	bx	lr
    2848:	2001      	movs	r0, #1
    284a:	4770      	bx	lr
    284c:	20000dc4 	.word	0x20000dc4
    2850:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    2854:	4688      	mov	r8, r1
    2856:	4699      	mov	r9, r3
    2858:	4615      	mov	r5, r2
    285a:	4604      	mov	r4, r0
    285c:	a901      	add	r1, sp, #4
    285e:	f00b f924 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    2862:	bbb0      	cbnz	r0, 28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2864:	9e02      	ldr	r6, [sp, #8]
    2866:	2001      	movs	r0, #1
    2868:	3688      	adds	r6, #136	; 0x88
    286a:	b17d      	cbz	r5, 288c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x50>
    286c:	4620      	mov	r0, r4
    286e:	f7fe fcdb 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2872:	0004      	movs	r4, r0
    2874:	d00d      	beq.n	2892 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x56>
    2876:	4629      	mov	r1, r5
    2878:	f00a fe0c 	bl	d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    287c:	b118      	cbz	r0, 2886 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4a>
    287e:	4918      	ldr	r1, [pc, #96]	; (28e0 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0xa4>)
    2880:	8849      	ldrh	r1, [r1, #2]
    2882:	42a9      	cmp	r1, r5
    2884:	d207      	bcs.n	2896 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x5a>
    2886:	2000      	movs	r0, #0
    2888:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    288c:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
    2890:	e01f      	b.n	28d2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x96>
    2892:	2167      	movs	r1, #103	; 0x67
    2894:	e020      	b.n	28d8 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9c>
    2896:	4601      	mov	r1, r0
    2898:	466a      	mov	r2, sp
    289a:	4620      	mov	r0, r4
    289c:	f00a fdf3 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    28a0:	9800      	ldr	r0, [sp, #0]
    28a2:	2700      	movs	r7, #0
    28a4:	8007      	strh	r7, [r0, #0]
    28a6:	7087      	strb	r7, [r0, #2]
    28a8:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
    28ac:	b109      	cbz	r1, 28b2 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x76>
    28ae:	f04f 0802 	mov.w	r8, #2
    28b2:	4641      	mov	r1, r8
    28b4:	f00b fc00 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    28b8:	9800      	ldr	r0, [sp, #0]
    28ba:	462a      	mov	r2, r5
    28bc:	4649      	mov	r1, r9
    28be:	1cc0      	adds	r0, r0, #3
    28c0:	f00d fed5 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    28c4:	4620      	mov	r0, r4
    28c6:	4629      	mov	r1, r5
    28c8:	f00a fd9b 	bl	d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    28cc:	b118      	cbz	r0, 28d6 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x9a>
    28ce:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
    28d2:	2001      	movs	r0, #1
    28d4:	e7d8      	b.n	2888 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x4c>
    28d6:	217c      	movs	r1, #124	; 0x7c
    28d8:	202b      	movs	r0, #43	; 0x2b
    28da:	f7fe f8c3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    28de:	0000      	.short	0x0000
    28e0:	20000dc4 	.word	0x20000dc4

000028e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    28e4:	4809      	ldr	r0, [pc, #36]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    28e6:	b082      	sub	sp, #8
    28e8:	7a00      	ldrb	r0, [r0, #8]
    28ea:	f88d 0000 	strb.w	r0, [sp]
    28ee:	9800      	ldr	r0, [sp, #0]
    28f0:	9000      	str	r0, [sp, #0]
    28f2:	f89d 0000 	ldrb.w	r0, [sp]
    28f6:	2800      	cmp	r0, #0
    28f8:	d105      	bne.n	2906 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x22>
    28fa:	2202      	movs	r2, #2
    28fc:	4904      	ldr	r1, [pc, #16]	; (2910 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x2c>)
    28fe:	4803      	ldr	r0, [pc, #12]	; (290c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x28>)
    2900:	b002      	add	sp, #8
    2902:	f00b bc0c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2906:	b002      	add	sp, #8
    2908:	4770      	bx	lr
    290a:	0000      	.short	0x0000
    290c:	20000ddc 	.word	0x20000ddc
    2910:	0000e165 	.word	0x0000e165

00002914 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    2914:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2918:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 2ad8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c4>
    291c:	f8df a1bc 	ldr.w	sl, [pc, #444]	; 2adc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c8>
    2920:	4683      	mov	fp, r0
    2922:	f04f 0901 	mov.w	r9, #1
    2926:	2600      	movs	r6, #0
    2928:	f8d8 0004 	ldr.w	r0, [r8, #4]
    292c:	7a00      	ldrb	r0, [r0, #8]
    292e:	f88d 0000 	strb.w	r0, [sp]
    2932:	9800      	ldr	r0, [sp, #0]
    2934:	9000      	str	r0, [sp, #0]
    2936:	f89d 1000 	ldrb.w	r1, [sp]
    293a:	292a      	cmp	r1, #42	; 0x2a
    293c:	d106      	bne.n	294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    293e:	f89a 1013 	ldrb.w	r1, [sl, #19]
    2942:	b119      	cbz	r1, 294c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    2944:	f8ba 0014 	ldrh.w	r0, [sl, #20]
    2948:	2800      	cmp	r0, #0
    294a:	d06f      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    294c:	2700      	movs	r7, #0
    294e:	f88d 6000 	strb.w	r6, [sp]
    2952:	4668      	mov	r0, sp
    2954:	f000 f924 	bl	2ba0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xb0>
    2958:	f89d 1000 	ldrb.w	r1, [sp]
    295c:	2900      	cmp	r1, #0
    295e:	d1f8      	bne.n	2952 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    2960:	2800      	cmp	r0, #0
    2962:	d063      	beq.n	2a2c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x118>
    2964:	4604      	mov	r4, r0
    2966:	7a00      	ldrb	r0, [r0, #8]
    2968:	f88d 0000 	strb.w	r0, [sp]
    296c:	9800      	ldr	r0, [sp, #0]
    296e:	9000      	str	r0, [sp, #0]
    2970:	f89d 5000 	ldrb.w	r5, [sp]
    2974:	1ea8      	subs	r0, r5, #2
    2976:	2830      	cmp	r0, #48	; 0x30
    2978:	d27b      	bcs.n	2a72 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x15e>
    297a:	e8df f000 	tbb	[pc, r0]
    297e:	3b18      	.short	0x3b18
    2980:	97359727 	.word	0x97359727
    2984:	7b977b3b 	.word	0x7b977b3b
    2988:	7b417b7b 	.word	0x7b417b7b
    298c:	97359797 	.word	0x97359797
    2990:	35977b7b 	.word	0x35977b7b
    2994:	7b979797 	.word	0x7b979797
    2998:	7b97975a 	.word	0x7b97975a
    299c:	8f7b7b97 	.word	0x8f7b7b97
    29a0:	2197977b 	.word	0x2197977b
    29a4:	97816963 	.word	0x97816963
    29a8:	97979797 	.word	0x97979797
    29ac:	6397      	.short	0x6397
    29ae:	6862      	ldr	r2, [r4, #4]
    29b0:	b912      	cbnz	r2, 29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29b2:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
    29b6:	e076      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29b8:	4659      	mov	r1, fp
    29ba:	4620      	mov	r0, r4
    29bc:	4790      	blx	r2
    29be:	e050      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29c0:	6862      	ldr	r2, [r4, #4]
    29c2:	2a00      	cmp	r2, #0
    29c4:	d1f8      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29c6:	f240 11ad 	movw	r1, #429	; 0x1ad
    29ca:	e06c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29cc:	f001 ff70 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    29d0:	b128      	cbz	r0, 29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    29d2:	6862      	ldr	r2, [r4, #4]
    29d4:	b12a      	cbz	r2, 29e2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xce>
    29d6:	4659      	mov	r1, fp
    29d8:	4620      	mov	r0, r4
    29da:	4790      	blx	r2
    29dc:	e07a      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    29de:	2701      	movs	r7, #1
    29e0:	e03f      	b.n	2a62 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14e>
    29e2:	f240 2133 	movw	r1, #563	; 0x233
    29e6:	e05e      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29e8:	6862      	ldr	r2, [r4, #4]
    29ea:	2a00      	cmp	r2, #0
    29ec:	d1e4      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29ee:	f240 213f 	movw	r1, #575	; 0x23f
    29f2:	e058      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    29f4:	6862      	ldr	r2, [r4, #4]
    29f6:	2a00      	cmp	r2, #0
    29f8:	d1de      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    29fa:	f240 214b 	movw	r1, #587	; 0x24b
    29fe:	e052      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a00:	6860      	ldr	r0, [r4, #4]
    2a02:	465d      	mov	r5, fp
    2a04:	b180      	cbz	r0, 2a28 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x114>
    2a06:	8804      	ldrh	r4, [r0, #0]
    2a08:	4620      	mov	r0, r4
    2a0a:	f7fe fc0d 	bl	1228 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    2a0e:	b170      	cbz	r0, 2a2e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x11a>
    2a10:	706e      	strb	r6, [r5, #1]
    2a12:	220f      	movs	r2, #15
    2a14:	702a      	strb	r2, [r5, #0]
    2a16:	80ec      	strh	r4, [r5, #6]
    2a18:	f8a5 9008 	strh.w	r9, [r5, #8]
    2a1c:	4631      	mov	r1, r6
    2a1e:	f885 9004 	strb.w	r9, [r5, #4]
    2a22:	f00a fdce 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2a26:	e055      	b.n	2ad4 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1c0>
    2a28:	21ce      	movs	r1, #206	; 0xce
    2a2a:	e03c      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a2c:	e031      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2a2e:	21ae      	movs	r1, #174	; 0xae
    2a30:	e039      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a32:	6862      	ldr	r2, [r4, #4]
    2a34:	b11a      	cbz	r2, 2a3e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x12a>
    2a36:	4659      	mov	r1, fp
    2a38:	4620      	mov	r0, r4
    2a3a:	4790      	blx	r2
    2a3c:	e7cf      	b.n	29de <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xca>
    2a3e:	f240 2163 	movw	r1, #611	; 0x263
    2a42:	e030      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a44:	6862      	ldr	r2, [r4, #4]
    2a46:	2a00      	cmp	r2, #0
    2a48:	d1b6      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a4a:	f240 216f 	movw	r1, #623	; 0x26f
    2a4e:	e02a      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a50:	f88b 6001 	strb.w	r6, [fp, #1]
    2a54:	211a      	movs	r1, #26
    2a56:	f88b 1000 	strb.w	r1, [fp]
    2a5a:	f8d4 1009 	ldr.w	r1, [r4, #9]
    2a5e:	f8cb 1004 	str.w	r1, [fp, #4]
    2a62:	7226      	strb	r6, [r4, #8]
    2a64:	2d21      	cmp	r5, #33	; 0x21
    2a66:	d024      	beq.n	2ab2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x19e>
    2a68:	2d14      	cmp	r5, #20
    2a6a:	d025      	beq.n	2ab8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1a4>
    2a6c:	2d22      	cmp	r5, #34	; 0x22
    2a6e:	d02a      	beq.n	2ac6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b2>
    2a70:	e02e      	b.n	2ad0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1bc>
    2a72:	e01b      	b.n	2aac <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x198>
    2a74:	6862      	ldr	r2, [r4, #4]
    2a76:	2a00      	cmp	r2, #0
    2a78:	d19e      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2a7a:	f240 2196 	movw	r1, #662	; 0x296
    2a7e:	e012      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a80:	4817      	ldr	r0, [pc, #92]	; (2ae0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1cc>)
    2a82:	6802      	ldr	r2, [r0, #0]
    2a84:	b122      	cbz	r2, 2a90 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17c>
    2a86:	6860      	ldr	r0, [r4, #4]
    2a88:	b128      	cbz	r0, 2a96 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x182>
    2a8a:	8800      	ldrh	r0, [r0, #0]
    2a8c:	4659      	mov	r1, fp
    2a8e:	4790      	blx	r2
    2a90:	2002      	movs	r0, #2
    2a92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a96:	f240 219f 	movw	r1, #671	; 0x29f
    2a9a:	e004      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2a9c:	6862      	ldr	r2, [r4, #4]
    2a9e:	2a00      	cmp	r2, #0
    2aa0:	d18a      	bne.n	29b8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>
    2aa2:	f44f 712b 	mov.w	r1, #684	; 0x2ac
    2aa6:	2010      	movs	r0, #16
    2aa8:	f7fd ffdc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2aac:	f240 21bd 	movw	r1, #701	; 0x2bd
    2ab0:	e7f9      	b.n	2aa6 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x192>
    2ab2:	f7ff feb9 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    2ab6:	e008      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ab8:	f89b 000e 	ldrb.w	r0, [fp, #14]
    2abc:	f000 0001 	and.w	r0, r0, #1
    2ac0:	f7ff fea6 	bl	2810 <sym_5INKXEHJ7NSOP6JSEWOYQNB6PUCWPUG5RVXPDVA>
    2ac4:	e001      	b.n	2aca <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b6>
    2ac6:	f7ff feb9 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
    2aca:	2800      	cmp	r0, #0
    2acc:	f47f af2c 	bne.w	2928 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x14>
    2ad0:	2f00      	cmp	r7, #0
    2ad2:	d1fb      	bne.n	2acc <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1b8>
    2ad4:	2004      	movs	r0, #4
    2ad6:	e7dc      	b.n	2a92 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x17e>
    2ad8:	20000df0 	.word	0x20000df0
    2adc:	20000dc4 	.word	0x20000dc4
    2ae0:	200000b0 	.word	0x200000b0

00002ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    2ae4:	4901      	ldr	r1, [pc, #4]	; (2aec <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    2ae6:	7008      	strb	r0, [r1, #0]
    2ae8:	f000 b8b0 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>
    2aec:	20000358 	.word	0x20000358

00002af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    2af0:	4902      	ldr	r1, [pc, #8]	; (2afc <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xc>)
    2af2:	4801      	ldr	r0, [pc, #4]	; (2af8 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x8>)
    2af4:	6008      	str	r0, [r1, #0]
    2af6:	4770      	bx	lr
    2af8:	00002b01 	.word	0x00002b01
    2afc:	200000b0 	.word	0x200000b0
    2b00:	b538      	push	{r3, r4, r5, lr}
    2b02:	000d      	movs	r5, r1
    2b04:	d014      	beq.n	2b30 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x40>
    2b06:	80a8      	strh	r0, [r5, #4]
    2b08:	2100      	movs	r1, #0
    2b0a:	7269      	strb	r1, [r5, #9]
    2b0c:	f7fe fb76 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    2b10:	4604      	mov	r4, r0
    2b12:	f00a fc9a 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    2b16:	b168      	cbz	r0, 2b34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x44>
    2b18:	4601      	mov	r1, r0
    2b1a:	466a      	mov	r2, sp
    2b1c:	4620      	mov	r0, r4
    2b1e:	f00a fcb2 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    2b22:	80e8      	strh	r0, [r5, #6]
    2b24:	b148      	cbz	r0, 2b3a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x4a>
    2b26:	28fb      	cmp	r0, #251	; 0xfb
    2b28:	d90a      	bls.n	2b40 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x50>
    2b2a:	f44f 7186 	mov.w	r1, #268	; 0x10c
    2b2e:	e032      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b30:	21fc      	movs	r1, #252	; 0xfc
    2b32:	e030      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b34:	f240 1105 	movw	r1, #261	; 0x105
    2b38:	e02d      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
    2b3e:	e02a      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b40:	9800      	ldr	r0, [sp, #0]
    2b42:	f00b fa77 	bl	e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>
    2b46:	2801      	cmp	r0, #1
    2b48:	d004      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4a:	2802      	cmp	r0, #2
    2b4c:	d002      	beq.n	2b54 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x64>
    2b4e:	f44f 718e 	mov.w	r1, #284	; 0x11c
    2b52:	e020      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b54:	7228      	strb	r0, [r5, #8]
    2b56:	6828      	ldr	r0, [r5, #0]
    2b58:	b1a8      	cbz	r0, 2b86 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x96>
    2b5a:	9900      	ldr	r1, [sp, #0]
    2b5c:	88ea      	ldrh	r2, [r5, #6]
    2b5e:	1cc9      	adds	r1, r1, #3
    2b60:	f00d fd85 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2b64:	4620      	mov	r0, r4
    2b66:	f00a fc38 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    2b6a:	b178      	cbz	r0, 2b8c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x9c>
    2b6c:	4620      	mov	r0, r4
    2b6e:	2100      	movs	r1, #0
    2b70:	f00a fd27 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    2b74:	b168      	cbz	r0, 2b92 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa2>
    2b76:	4809      	ldr	r0, [pc, #36]	; (2b9c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xac>)
    2b78:	7cc1      	ldrb	r1, [r0, #19]
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d002      	beq.n	2b84 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x94>
    2b7e:	8a81      	ldrh	r1, [r0, #20]
    2b80:	1e49      	subs	r1, r1, #1
    2b82:	8281      	strh	r1, [r0, #20]
    2b84:	bd38      	pop	{r3, r4, r5, pc}
    2b86:	f240 1123 	movw	r1, #291	; 0x123
    2b8a:	e004      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b8c:	f44f 7194 	mov.w	r1, #296	; 0x128
    2b90:	e001      	b.n	2b96 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xa6>
    2b92:	f240 112d 	movw	r1, #301	; 0x12d
    2b96:	2010      	movs	r0, #16
    2b98:	f7fd ff64 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2b9c:	20000dc4 	.word	0x20000dc4
    2ba0:	b538      	push	{r3, r4, r5, lr}
    2ba2:	4602      	mov	r2, r0
    2ba4:	4b11      	ldr	r3, [pc, #68]	; (2bec <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xfc>)
    2ba6:	2000      	movs	r0, #0
    2ba8:	7010      	strb	r0, [r2, #0]
    2baa:	6858      	ldr	r0, [r3, #4]
    2bac:	7a01      	ldrb	r1, [r0, #8]
    2bae:	f88d 1000 	strb.w	r1, [sp]
    2bb2:	9900      	ldr	r1, [sp, #0]
    2bb4:	9100      	str	r1, [sp, #0]
    2bb6:	f89d 5000 	ldrb.w	r5, [sp]
    2bba:	2401      	movs	r4, #1
    2bbc:	2d01      	cmp	r5, #1
    2bbe:	d006      	beq.n	2bce <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xde>
    2bc0:	f3ef 8110 	mrs	r1, PRIMASK
    2bc4:	b672      	cpsid	i
    2bc6:	6805      	ldr	r5, [r0, #0]
    2bc8:	605d      	str	r5, [r3, #4]
    2bca:	b111      	cbz	r1, 2bd2 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe2>
    2bcc:	e002      	b.n	2bd4 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe4>
    2bce:	2000      	movs	r0, #0
    2bd0:	bd38      	pop	{r3, r4, r5, pc}
    2bd2:	b662      	cpsie	i
    2bd4:	7a01      	ldrb	r1, [r0, #8]
    2bd6:	f88d 1000 	strb.w	r1, [sp]
    2bda:	9900      	ldr	r1, [sp, #0]
    2bdc:	9100      	str	r1, [sp, #0]
    2bde:	f89d 3000 	ldrb.w	r3, [sp]
    2be2:	2b00      	cmp	r3, #0
    2be4:	d1f4      	bne.n	2bd0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0xe0>
    2be6:	7014      	strb	r4, [r2, #0]
    2be8:	bd38      	pop	{r3, r4, r5, pc}
    2bea:	0000      	.short	0x0000
    2bec:	20000df0 	.word	0x20000df0
    2bf0:	b538      	push	{r3, r4, r5, lr}
    2bf2:	b1d0      	cbz	r0, 2c2a <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x13a>
    2bf4:	6041      	str	r1, [r0, #4]
    2bf6:	f100 0108 	add.w	r1, r0, #8
    2bfa:	700a      	strb	r2, [r1, #0]
    2bfc:	f3ef 8310 	mrs	r3, PRIMASK
    2c00:	b672      	cpsid	i
    2c02:	4c10      	ldr	r4, [pc, #64]	; (2c44 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x154>)
    2c04:	6004      	str	r4, [r0, #0]
    2c06:	1f21      	subs	r1, r4, #4
    2c08:	684a      	ldr	r2, [r1, #4]
    2c0a:	b14a      	cbz	r2, 2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c0c:	7a12      	ldrb	r2, [r2, #8]
    2c0e:	f88d 2000 	strb.w	r2, [sp]
    2c12:	9a00      	ldr	r2, [sp, #0]
    2c14:	9200      	str	r2, [sp, #0]
    2c16:	f89d 5000 	ldrb.w	r5, [sp]
    2c1a:	2d01      	cmp	r5, #1
    2c1c:	d100      	bne.n	2c20 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x130>
    2c1e:	600c      	str	r4, [r1, #0]
    2c20:	680a      	ldr	r2, [r1, #0]
    2c22:	6010      	str	r0, [r2, #0]
    2c24:	6008      	str	r0, [r1, #0]
    2c26:	b12b      	cbz	r3, 2c34 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x144>
    2c28:	e005      	b.n	2c36 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x146>
    2c2a:	f240 21e2 	movw	r1, #738	; 0x2e2
    2c2e:	2010      	movs	r0, #16
    2c30:	f7fd ff18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2c34:	b662      	cpsie	i
    2c36:	4804      	ldr	r0, [pc, #16]	; (2c48 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x158>)
    2c38:	7800      	ldrb	r0, [r0, #0]
    2c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2c3e:	f009 bc5f 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2c42:	0000      	.short	0x0000
    2c44:	20000df4 	.word	0x20000df4
    2c48:	20000358 	.word	0x20000358
    2c4c:	4808      	ldr	r0, [pc, #32]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c4e:	b510      	push	{r4, lr}
    2c50:	2100      	movs	r1, #0
    2c52:	6141      	str	r1, [r0, #20]
    2c54:	6181      	str	r1, [r0, #24]
    2c56:	61c1      	str	r1, [r0, #28]
    2c58:	6201      	str	r1, [r0, #32]
    2c5a:	2212      	movs	r2, #18
    2c5c:	f00d fd81 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    2c60:	4803      	ldr	r0, [pc, #12]	; (2c70 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x180>)
    2c62:	3014      	adds	r0, #20
    2c64:	2101      	movs	r1, #1
    2c66:	7301      	strb	r1, [r0, #12]
    2c68:	1d01      	adds	r1, r0, #4
    2c6a:	6041      	str	r1, [r0, #4]
    2c6c:	6001      	str	r1, [r0, #0]
    2c6e:	bd10      	pop	{r4, pc}
    2c70:	20000ddc 	.word	0x20000ddc

00002c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    2c74:	b4f0      	push	{r4, r5, r6, r7}
    2c76:	8150      	strh	r0, [r2, #10]
    2c78:	890c      	ldrh	r4, [r1, #8]
    2c7a:	4613      	mov	r3, r2
    2c7c:	8194      	strh	r4, [r2, #12]
    2c7e:	898a      	ldrh	r2, [r1, #12]
    2c80:	81da      	strh	r2, [r3, #14]
    2c82:	8948      	ldrh	r0, [r1, #10]
    2c84:	8218      	strh	r0, [r3, #16]
    2c86:	89cd      	ldrh	r5, [r1, #14]
    2c88:	825d      	strh	r5, [r3, #18]
    2c8a:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    2c8c:	42ae      	cmp	r6, r5
    2c8e:	d108      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c90:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    2c92:	4285      	cmp	r5, r0
    2c94:	d105      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c96:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    2c98:	4295      	cmp	r5, r2
    2c9a:	d102      	bne.n	2ca2 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2e>
    2c9c:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
    2c9e:	42a2      	cmp	r2, r4
    2ca0:	d001      	beq.n	2ca6 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    2ca2:	2201      	movs	r2, #1
    2ca4:	e000      	b.n	2ca8 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x34>
    2ca6:	2200      	movs	r2, #0
    2ca8:	751a      	strb	r2, [r3, #20]
    2caa:	8548      	strh	r0, [r1, #42]	; 0x2a
    2cac:	8a58      	ldrh	r0, [r3, #18]
    2cae:	85c8      	strh	r0, [r1, #46]	; 0x2e
    2cb0:	8998      	ldrh	r0, [r3, #12]
    2cb2:	8588      	strh	r0, [r1, #44]	; 0x2c
    2cb4:	89d8      	ldrh	r0, [r3, #14]
    2cb6:	8608      	strh	r0, [r1, #48]	; 0x30
    2cb8:	bcf0      	pop	{r4, r5, r6, r7}
    2cba:	2214      	movs	r2, #20
    2cbc:	4901      	ldr	r1, [pc, #4]	; (2cc4 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x50>)
    2cbe:	4618      	mov	r0, r3
    2cc0:	f00b ba41 	b.w	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2cc4:	0000e323 	.word	0x0000e323

00002cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    2cc8:	8150      	strh	r0, [r2, #10]
    2cca:	8a88      	ldrh	r0, [r1, #20]
    2ccc:	8190      	strh	r0, [r2, #12]
    2cce:	8ac8      	ldrh	r0, [r1, #22]
    2cd0:	81d0      	strh	r0, [r2, #14]
    2cd2:	8b08      	ldrh	r0, [r1, #24]
    2cd4:	8210      	strh	r0, [r2, #16]
    2cd6:	8b48      	ldrh	r0, [r1, #26]
    2cd8:	4613      	mov	r3, r2
    2cda:	8250      	strh	r0, [r2, #18]
    2cdc:	2221      	movs	r2, #33	; 0x21
    2cde:	4902      	ldr	r1, [pc, #8]	; (2ce8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>)
    2ce0:	4618      	mov	r0, r3
    2ce2:	f00b ba1c 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2ce6:	0000      	.short	0x0000
    2ce8:	0000e359 	.word	0x0000e359

00002cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    2cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cee:	f06f 021f 	mvn.w	r2, #31
    2cf2:	0c01      	lsrs	r1, r0, #16
    2cf4:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    2cf8:	251f      	movs	r5, #31
    2cfa:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2cfe:	3854      	subs	r0, #84	; 0x54
    2d00:	d00d      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d02:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    2d06:	3855      	subs	r0, #85	; 0x55
    2d08:	d009      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d0a:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    2d0e:	38aa      	subs	r0, #170	; 0xaa
    2d10:	d005      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d12:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    2d16:	38aa      	subs	r0, #170	; 0xaa
    2d18:	d001      	beq.n	2d1e <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    2d1a:	2001      	movs	r0, #1
    2d1c:	e000      	b.n	2d20 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    2d1e:	2000      	movs	r0, #0
    2d20:	2200      	movs	r2, #0
    2d22:	4613      	mov	r3, r2
    2d24:	ea4f 0402 	mov.w	r4, r2
    2d28:	ea82 0701 	eor.w	r7, r2, r1
    2d2c:	43ff      	mvns	r7, r7
    2d2e:	431f      	orrs	r7, r3
    2d30:	1c7f      	adds	r7, r7, #1
    2d32:	d00f      	beq.n	2d54 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    2d34:	f006 0701 	and.w	r7, r6, #1
    2d38:	0852      	lsrs	r2, r2, #1
    2d3a:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    2d3e:	f005 0701 	and.w	r7, r5, #1
    2d42:	085b      	lsrs	r3, r3, #1
    2d44:	0876      	lsrs	r6, r6, #1
    2d46:	086d      	lsrs	r5, r5, #1
    2d48:	1c64      	adds	r4, r4, #1
    2d4a:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    2d4e:	2c16      	cmp	r4, #22
    2d50:	d3ea      	bcc.n	2d28 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    2d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d54:	2000      	movs	r0, #0
    2d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    2d58:	b510      	push	{r4, lr}
    2d5a:	4604      	mov	r4, r0
    2d5c:	f00b fb8c 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d60:	b308      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d62:	43e0      	mvns	r0, r4
    2d64:	f00b fb88 	bl	e478 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x58>
    2d68:	b1e8      	cbz	r0, 2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d6a:	16a0      	asrs	r0, r4, #26
    2d6c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    2d70:	1e41      	subs	r1, r0, #1
    2d72:	4208      	tst	r0, r1
    2d74:	d017      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d76:	4620      	mov	r0, r4
    2d78:	f00b fbcd 	bl	e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>
    2d7c:	2818      	cmp	r0, #24
    2d7e:	d812      	bhi.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d80:	b2a0      	uxth	r0, r4
    2d82:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    2d86:	d107      	bne.n	2d98 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x40>
    2d88:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    2d8c:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    2d90:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    2d94:	4281      	cmp	r1, r0
    2d96:	d006      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2d98:	4804      	ldr	r0, [pc, #16]	; (2dac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    2d9a:	4044      	eors	r4, r0
    2d9c:	1e60      	subs	r0, r4, #1
    2d9e:	4204      	tst	r4, r0
    2da0:	d001      	beq.n	2da6 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x4e>
    2da2:	2001      	movs	r0, #1
    2da4:	bd10      	pop	{r4, pc}
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	0000      	.short	0x0000
    2dac:	8e89bed6 	.word	0x8e89bed6

00002db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    2db0:	b510      	push	{r4, lr}
    2db2:	4804      	ldr	r0, [pc, #16]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2db4:	f00b fb71 	bl	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2db8:	4802      	ldr	r0, [pc, #8]	; (2dc4 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x14>)
    2dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2dbe:	3008      	adds	r0, #8
    2dc0:	f00b bb6b 	b.w	e49a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7a>
    2dc4:	200000b4 	.word	0x200000b4

00002dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>:
    2dc8:	4801      	ldr	r0, [pc, #4]	; (2dd0 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x8>)
    2dca:	f000 b803 	b.w	2dd4 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0xc>
    2dce:	0000      	.short	0x0000
    2dd0:	200000bc 	.word	0x200000bc
    2dd4:	b510      	push	{r4, lr}
    2dd6:	e9d0 2100 	ldrd	r2, r1, [r0]
    2dda:	4b09      	ldr	r3, [pc, #36]	; (2e00 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x38>)
    2ddc:	4c09      	ldr	r4, [pc, #36]	; (2e04 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY+0x3c>)
    2dde:	4353      	muls	r3, r2
    2de0:	4354      	muls	r4, r2
    2de2:	4051      	eors	r1, r2
    2de4:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    2de8:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    2dec:	ea4f 41f1 	mov.w	r1, r1, ror #19
    2df0:	e9c0 2100 	strd	r2, r1, [r0]
    2df4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    2df8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2dfc:	4618      	mov	r0, r3
    2dfe:	bd10      	pop	{r4, pc}
    2e00:	c6ef3760 	.word	0xc6ef3760
    2e04:	9e3779bb 	.word	0x9e3779bb

00002e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>:
    2e08:	b570      	push	{r4, r5, r6, lr}
    2e0a:	6845      	ldr	r5, [r0, #4]
    2e0c:	1d0c      	adds	r4, r1, #4
    2e0e:	2300      	movs	r3, #0
    2e10:	f895 20a6 	ldrb.w	r2, [r5, #166]	; 0xa6
    2e14:	3588      	adds	r5, #136	; 0x88
    2e16:	2601      	movs	r6, #1
    2e18:	4619      	mov	r1, r3
    2e1a:	4628      	mov	r0, r5
    2e1c:	f00a fe6e 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e20:	b190      	cbz	r0, 2e48 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x40>
    2e22:	6820      	ldr	r0, [r4, #0]
    2e24:	4a09      	ldr	r2, [pc, #36]	; (2e4c <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ+0x44>)
    2e26:	7921      	ldrb	r1, [r4, #4]
    2e28:	4010      	ands	r0, r2
    2e2a:	f8c5 006e 	str.w	r0, [r5, #110]	; 0x6e
    2e2e:	f001 0107 	and.w	r1, r1, #7
    2e32:	f8c5 1072 	str.w	r1, [r5, #114]	; 0x72
    2e36:	2000      	movs	r0, #0
    2e38:	f8a5 005a 	strh.w	r0, [r5, #90]	; 0x5a
    2e3c:	f885 605c 	strb.w	r6, [r5, #92]	; 0x5c
    2e40:	2004      	movs	r0, #4
    2e42:	77a8      	strb	r0, [r5, #30]
    2e44:	2000      	movs	r0, #0
    2e46:	bd70      	pop	{r4, r5, r6, pc}
    2e48:	2001      	movs	r0, #1
    2e4a:	bd70      	pop	{r4, r5, r6, pc}
    2e4c:	3704492f 	.word	0x3704492f

00002e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>:
    2e50:	b510      	push	{r4, lr}
    2e52:	1d04      	adds	r4, r0, #4
    2e54:	f004 fce0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2e58:	4a03      	ldr	r2, [pc, #12]	; (2e68 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY+0x18>)
    2e5a:	f001 0107 	and.w	r1, r1, #7
    2e5e:	4010      	ands	r0, r2
    2e60:	6020      	str	r0, [r4, #0]
    2e62:	6061      	str	r1, [r4, #4]
    2e64:	bd10      	pop	{r4, pc}
    2e66:	0000      	.short	0x0000
    2e68:	3704492f 	.word	0x3704492f

00002e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>:
    2e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e70:	4605      	mov	r5, r0
    2e72:	7803      	ldrb	r3, [r0, #0]
    2e74:	6840      	ldr	r0, [r0, #4]
    2e76:	1d0f      	adds	r7, r1, #4
    2e78:	f100 0688 	add.w	r6, r0, #136	; 0x88
    2e7c:	f500 74a9 	add.w	r4, r0, #338	; 0x152
    2e80:	4680      	mov	r8, r0
    2e82:	7f72      	ldrb	r2, [r6, #29]
    2e84:	2107      	movs	r1, #7
    2e86:	4630      	mov	r0, r6
    2e88:	f00a fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2e8c:	b1d0      	cbz	r0, 2ec4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x58>
    2e8e:	6838      	ldr	r0, [r7, #0]
    2e90:	4a17      	ldr	r2, [pc, #92]	; (2ef0 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x84>)
    2e92:	7939      	ldrb	r1, [r7, #4]
    2e94:	4010      	ands	r0, r2
    2e96:	f8c6 006e 	str.w	r0, [r6, #110]	; 0x6e
    2e9a:	f001 0107 	and.w	r1, r1, #7
    2e9e:	f8c6 1072 	str.w	r1, [r6, #114]	; 0x72
    2ea2:	2000      	movs	r0, #0
    2ea4:	f886 0058 	strb.w	r0, [r6, #88]	; 0x58
    2ea8:	7770      	strb	r0, [r6, #29]
    2eaa:	6869      	ldr	r1, [r5, #4]
    2eac:	f881 014b 	strb.w	r0, [r1, #331]	; 0x14b
    2eb0:	f894 1068 	ldrb.w	r1, [r4, #104]	; 0x68
    2eb4:	f88d 1000 	strb.w	r1, [sp]
    2eb8:	9900      	ldr	r1, [sp, #0]
    2eba:	9100      	str	r1, [sp, #0]
    2ebc:	f89d 1000 	ldrb.w	r1, [sp]
    2ec0:	b999      	cbnz	r1, 2eea <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x7e>
    2ec2:	e002      	b.n	2eca <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5e>
    2ec4:	2001      	movs	r0, #1
    2ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2eca:	f8b8 1000 	ldrh.w	r1, [r8]
    2ece:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
    2ed2:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2ed6:	6839      	ldr	r1, [r7, #0]
    2ed8:	66e1      	str	r1, [r4, #108]	; 0x6c
    2eda:	6879      	ldr	r1, [r7, #4]
    2edc:	6721      	str	r1, [r4, #112]	; 0x70
    2ede:	2208      	movs	r2, #8
    2ee0:	4904      	ldr	r1, [pc, #16]	; (2ef4 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x88>)
    2ee2:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2ee6:	f00b f91a 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    2eea:	2000      	movs	r0, #0
    2eec:	e7eb      	b.n	2ec6 <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI+0x5a>
    2eee:	0000      	.short	0x0000
    2ef0:	3704492f 	.word	0x3704492f
    2ef4:	0000e621 	.word	0x0000e621

00002ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>:
    2ef8:	b570      	push	{r4, r5, r6, lr}
    2efa:	1d0d      	adds	r5, r1, #4
    2efc:	6844      	ldr	r4, [r0, #4]
    2efe:	f004 fc8b 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    2f02:	4a06      	ldr	r2, [pc, #24]	; (2f1c <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ+0x24>)
    2f04:	4010      	ands	r0, r2
    2f06:	f001 0207 	and.w	r2, r1, #7
    2f0a:	f894 10f6 	ldrb.w	r1, [r4, #246]	; 0xf6
    2f0e:	4001      	ands	r1, r0
    2f10:	f361 0007 	bfi	r0, r1, #0, #8
    2f14:	6028      	str	r0, [r5, #0]
    2f16:	606a      	str	r2, [r5, #4]
    2f18:	bd70      	pop	{r4, r5, r6, pc}
    2f1a:	0000      	.short	0x0000
    2f1c:	3704492f 	.word	0x3704492f

00002f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>:
    2f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f24:	6844      	ldr	r4, [r0, #4]
    2f26:	460d      	mov	r5, r1
    2f28:	7803      	ldrb	r3, [r0, #0]
    2f2a:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    2f2e:	3488      	adds	r4, #136	; 0x88
    2f30:	2701      	movs	r7, #1
    2f32:	2108      	movs	r1, #8
    2f34:	4620      	mov	r0, r4
    2f36:	f00a fde1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f3a:	b930      	cbnz	r0, 2f4a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x2a>
    2f3c:	2300      	movs	r3, #0
    2f3e:	7fa2      	ldrb	r2, [r4, #30]
    2f40:	4619      	mov	r1, r3
    2f42:	4620      	mov	r0, r4
    2f44:	f00a fdda 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2f48:	b320      	cbz	r0, 2f94 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x74>
    2f4a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f4e:	f04f 0600 	mov.w	r6, #0
    2f52:	0780      	lsls	r0, r0, #30
    2f54:	d419      	bmi.n	2f8a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x6a>
    2f56:	4628      	mov	r0, r5
    2f58:	f00b f8c8 	bl	e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>
    2f5c:	f884 0069 	strb.w	r0, [r4, #105]	; 0x69
    2f60:	f835 0f05 	ldrh.w	r0, [r5, #5]!
    2f64:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    2f68:	8868      	ldrh	r0, [r5, #2]
    2f6a:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    2f6e:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f72:	f040 0002 	orr.w	r0, r0, #2
    2f76:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
    2f7a:	07c0      	lsls	r0, r0, #31
    2f7c:	d00d      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f7e:	2203      	movs	r2, #3
    2f80:	4912      	ldr	r1, [pc, #72]	; (2fcc <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xac>)
    2f82:	f104 0060 	add.w	r0, r4, #96	; 0x60
    2f86:	f00b f8de 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    2f8a:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
    2f8e:	07c0      	lsls	r0, r0, #31
    2f90:	d003      	beq.n	2f9a <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x7a>
    2f92:	e00e      	b.n	2fb2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x92>
    2f94:	2001      	movs	r0, #1
    2f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f9a:	2300      	movs	r3, #0
    2f9c:	7fa2      	ldrb	r2, [r4, #30]
    2f9e:	4619      	mov	r1, r3
    2fa0:	4620      	mov	r0, r4
    2fa2:	f00a fdab 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    2fa6:	b140      	cbz	r0, 2fba <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x9a>
    2fa8:	77a7      	strb	r7, [r4, #30]
    2faa:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
    2fae:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    2fb2:	7f60      	ldrb	r0, [r4, #29]
    2fb4:	2801      	cmp	r0, #1
    2fb6:	d004      	beq.n	2fc2 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa2>
    2fb8:	e006      	b.n	2fc8 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0xa8>
    2fba:	2148      	movs	r1, #72	; 0x48
    2fbc:	2040      	movs	r0, #64	; 0x40
    2fbe:	f7fd fd51 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    2fc2:	7766      	strb	r6, [r4, #29]
    2fc4:	f884 6058 	strb.w	r6, [r4, #88]	; 0x58
    2fc8:	2000      	movs	r0, #0
    2fca:	e7e4      	b.n	2f96 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY+0x76>
    2fcc:	0000e64f 	.word	0x0000e64f

00002fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>:
    2fd0:	4907      	ldr	r1, [pc, #28]	; (2ff0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x20>)
    2fd2:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    2fd6:	1300      	asrs	r0, r0, #12
    2fd8:	7809      	ldrb	r1, [r1, #0]
    2fda:	b240      	sxtb	r0, r0
    2fdc:	4249      	negs	r1, r1
    2fde:	b249      	sxtb	r1, r1
    2fe0:	4408      	add	r0, r1
    2fe2:	f300 0007 	ssat	r0, #8, r0
    2fe6:	2800      	cmp	r0, #0
    2fe8:	dc00      	bgt.n	2fec <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY+0x1c>
    2fea:	2000      	movs	r0, #0
    2fec:	b2c0      	uxtb	r0, r0
    2fee:	4770      	bx	lr
    2ff0:	200000c4 	.word	0x200000c4

00002ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>:
    2ff4:	4a04      	ldr	r2, [pc, #16]	; (3008 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ+0x14>)
    2ff6:	6892      	ldr	r2, [r2, #8]
    2ff8:	f5c2 5380 	rsb	r3, r2, #4096	; 0x1000
    2ffc:	434b      	muls	r3, r1
    2ffe:	4342      	muls	r2, r0
    3000:	eb03 3022 	add.w	r0, r3, r2, asr #12
    3004:	4770      	bx	lr
    3006:	0000      	.short	0x0000
    3008:	200000c4 	.word	0x200000c4

0000300c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA>:
    300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    300e:	6844      	ldr	r4, [r0, #4]
    3010:	4606      	mov	r6, r0
    3012:	f104 0588 	add.w	r5, r4, #136	; 0x88
    3016:	f000 f87f 	bl	3118 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x10c>
    301a:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    301e:	2901      	cmp	r1, #1
    3020:	d11a      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3022:	2800      	cmp	r0, #0
    3024:	d018      	beq.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3026:	6870      	ldr	r0, [r6, #4]
    3028:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    302c:	f88d 1000 	strb.w	r1, [sp]
    3030:	9900      	ldr	r1, [sp, #0]
    3032:	9100      	str	r1, [sp, #0]
    3034:	f89d 1000 	ldrb.w	r1, [sp]
    3038:	f500 70a9 	add.w	r0, r0, #338	; 0x152
    303c:	2900      	cmp	r1, #0
    303e:	d10b      	bne.n	3058 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x4c>
    3040:	8821      	ldrh	r1, [r4, #0]
    3042:	8141      	strh	r1, [r0, #10]
    3044:	7e69      	ldrb	r1, [r5, #25]
    3046:	7301      	strb	r1, [r0, #12]
    3048:	7ea9      	ldrb	r1, [r5, #26]
    304a:	7341      	strb	r1, [r0, #13]
    304c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3050:	221f      	movs	r2, #31
    3052:	4902      	ldr	r1, [pc, #8]	; (305c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x50>)
    3054:	f00b b863 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    3058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    305a:	0000      	.short	0x0000
    305c:	0000e6e7 	.word	0x0000e6e7
    3060:	f500 6100 	add.w	r1, r0, #2048	; 0x800
    3064:	4a0d      	ldr	r2, [pc, #52]	; (309c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x90>)
    3066:	b510      	push	{r4, lr}
    3068:	f500 6000 	add.w	r0, r0, #2048	; 0x800
    306c:	1309      	asrs	r1, r1, #12
    306e:	1300      	asrs	r0, r0, #12
    3070:	b24b      	sxtb	r3, r1
    3072:	f992 4000 	ldrsb.w	r4, [r2]
    3076:	4240      	negs	r0, r0
    3078:	2100      	movs	r1, #0
    307a:	b240      	sxtb	r0, r0
    307c:	42a3      	cmp	r3, r4
    307e:	da02      	bge.n	3086 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x7a>
    3080:	f992 1002 	ldrsb.w	r1, [r2, #2]
    3084:	e005      	b.n	3092 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x86>
    3086:	f992 4001 	ldrsb.w	r4, [r2, #1]
    308a:	42a3      	cmp	r3, r4
    308c:	dd04      	ble.n	3098 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x8c>
    308e:	f992 1003 	ldrsb.w	r1, [r2, #3]
    3092:	4408      	add	r0, r1
    3094:	f300 0107 	ssat	r1, #8, r0
    3098:	4608      	mov	r0, r1
    309a:	bd10      	pop	{r4, pc}
    309c:	200000c4 	.word	0x200000c4
    30a0:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    30a4:	2200      	movs	r2, #0
    30a6:	704a      	strb	r2, [r1, #1]
    30a8:	f5a0 75fe 	sub.w	r5, r0, #508	; 0x1fc
    30ac:	700a      	strb	r2, [r1, #0]
    30ae:	f5a0 74ba 	sub.w	r4, r0, #372	; 0x174
    30b2:	f895 006b 	ldrb.w	r0, [r5, #107]	; 0x6b
    30b6:	f00c f928 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    30ba:	4606      	mov	r6, r0
    30bc:	68a0      	ldr	r0, [r4, #8]
    30be:	f7ff ffcf 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    30c2:	0007      	movs	r7, r0
    30c4:	d021      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30c6:	4620      	mov	r0, r4
    30c8:	f00b fb15 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    30cc:	2800      	cmp	r0, #0
    30ce:	d01c      	beq.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30d0:	8828      	ldrh	r0, [r5, #0]
    30d2:	4669      	mov	r1, sp
    30d4:	f00a fce9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    30d8:	b118      	cbz	r0, 30e2 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xd6>
    30da:	2189      	movs	r1, #137	; 0x89
    30dc:	207a      	movs	r0, #122	; 0x7a
    30de:	f7fd fcc1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    30e2:	1c76      	adds	r6, r6, #1
    30e4:	b2f1      	uxtb	r1, r6
    30e6:	2302      	movs	r3, #2
    30e8:	463a      	mov	r2, r7
    30ea:	4668      	mov	r0, sp
    30ec:	f00c f92c 	bl	f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>
    30f0:	2800      	cmp	r0, #0
    30f2:	d10a      	bne.n	310a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0xfe>
    30f4:	4806      	ldr	r0, [pc, #24]	; (3110 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x104>)
    30f6:	4907      	ldr	r1, [pc, #28]	; (3114 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x108>)
    30f8:	7900      	ldrb	r0, [r0, #4]
    30fa:	fba0 6501 	umull	r6, r5, r0, r1
    30fe:	f008 f847 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    3102:	1980      	adds	r0, r0, r6
    3104:	4169      	adcs	r1, r5
    3106:	e9c4 0100 	strd	r0, r1, [r4]
    310a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    310e:	0000      	.short	0x0000
    3110:	200000c4 	.word	0x200000c4
    3114:	000f4240 	.word	0x000f4240
    3118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    311c:	4607      	mov	r7, r0
    311e:	f7ff faab 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3122:	687c      	ldr	r4, [r7, #4]
    3124:	4605      	mov	r5, r0
    3126:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
    312a:	3488      	adds	r4, #136	; 0x88
    312c:	287f      	cmp	r0, #127	; 0x7f
    312e:	d03c      	beq.n	31aa <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19e>
    3130:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    3134:	687e      	ldr	r6, [r7, #4]
    3136:	76a0      	strb	r0, [r4, #26]
    3138:	4629      	mov	r1, r5
    313a:	68a0      	ldr	r0, [r4, #8]
    313c:	f7ff ff5a 	bl	2ff4 <sym_3E5VWVFRMYHMNGUSJEPBKKOP7X6VGWWURR334MQ>
    3140:	60a0      	str	r0, [r4, #8]
    3142:	481b      	ldr	r0, [pc, #108]	; (31b0 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a4>)
    3144:	7940      	ldrb	r0, [r0, #5]
    3146:	b190      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3148:	6878      	ldr	r0, [r7, #4]
    314a:	f100 0888 	add.w	r8, r0, #136	; 0x88
    314e:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    3152:	f7ff ff85 	bl	3060 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x54>
    3156:	b150      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3158:	4640      	mov	r0, r8
    315a:	f00b facc 	bl	e6f6 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x66>
    315e:	b130      	cbz	r0, 316e <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x162>
    3160:	6878      	ldr	r0, [r7, #4]
    3162:	2231      	movs	r2, #49	; 0x31
    3164:	4913      	ldr	r1, [pc, #76]	; (31b4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x1a8>)
    3166:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
    316a:	f00a ffec 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    316e:	f994 001b 	ldrsb.w	r0, [r4, #27]
    3172:	2100      	movs	r1, #0
    3174:	1a28      	subs	r0, r5, r0
    3176:	d500      	bpl.n	317a <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x16e>
    3178:	4240      	negs	r0, r0
    317a:	f896 2029 	ldrb.w	r2, [r6, #41]	; 0x29
    317e:	4282      	cmp	r2, r0
    3180:	dc10      	bgt.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3182:	2aff      	cmp	r2, #255	; 0xff
    3184:	d00e      	beq.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    3186:	7f20      	ldrb	r0, [r4, #28]
    3188:	1c40      	adds	r0, r0, #1
    318a:	b2c0      	uxtb	r0, r0
    318c:	7720      	strb	r0, [r4, #28]
    318e:	f896 202a 	ldrb.w	r2, [r6, #42]	; 0x2a
    3192:	4290      	cmp	r0, r2
    3194:	d802      	bhi.n	319c <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x190>
    3196:	7ee0      	ldrb	r0, [r4, #27]
    3198:	287f      	cmp	r0, #127	; 0x7f
    319a:	d103      	bne.n	31a4 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x198>
    319c:	2000      	movs	r0, #0
    319e:	76e5      	strb	r5, [r4, #27]
    31a0:	7720      	strb	r0, [r4, #28]
    31a2:	2101      	movs	r1, #1
    31a4:	4608      	mov	r0, r1
    31a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31aa:	2000      	movs	r0, #0
    31ac:	e7fb      	b.n	31a6 <sym_MKU2XEL6QB4MO4JU3HW4P3NALUM7PALQ3OF2VGA+0x19a>
    31ae:	0000      	.short	0x0000
    31b0:	200000c4 	.word	0x200000c4
    31b4:	000030a1 	.word	0x000030a1

000031b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    31b8:	4801      	ldr	r0, [pc, #4]	; (31c0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    31ba:	6840      	ldr	r0, [r0, #4]
    31bc:	30a0      	adds	r0, #160	; 0xa0
    31be:	4770      	bx	lr
    31c0:	200000d0 	.word	0x200000d0

000031c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    31c4:	b510      	push	{r4, lr}
    31c6:	4c21      	ldr	r4, [pc, #132]	; (324c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x88>)
    31c8:	6860      	ldr	r0, [r4, #4]
    31ca:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31ce:	f00b fabb 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    31d2:	6861      	ldr	r1, [r4, #4]
    31d4:	f881 0049 	strb.w	r0, [r1, #73]	; 0x49
    31d8:	314a      	adds	r1, #74	; 0x4a
    31da:	f7fe fa23 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    31de:	6860      	ldr	r0, [r4, #4]
    31e0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    31e4:	f00b fab7 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    31e8:	6861      	ldr	r1, [r4, #4]
    31ea:	f881 007d 	strb.w	r0, [r1, #125]	; 0x7d
    31ee:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    31f2:	314a      	adds	r1, #74	; 0x4a
    31f4:	f00b fa94 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    31f8:	b930      	cbnz	r0, 3208 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    31fa:	6861      	ldr	r1, [r4, #4]
    31fc:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3200:	314a      	adds	r1, #74	; 0x4a
    3202:	f00b fa96 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3206:	b108      	cbz	r0, 320c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    3208:	2101      	movs	r1, #1
    320a:	e000      	b.n	320e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    320c:	2100      	movs	r1, #0
    320e:	6860      	ldr	r0, [r4, #4]
    3210:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    3214:	b919      	cbnz	r1, 321e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    3216:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    321a:	2800      	cmp	r0, #0
    321c:	d014      	beq.n	3248 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x84>
    321e:	f7ff f829 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    3222:	490b      	ldr	r1, [pc, #44]	; (3250 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x8c>)
    3224:	fba0 2301 	umull	r2, r3, r0, r1
    3228:	6860      	ldr	r0, [r4, #4]
    322a:	3090      	adds	r0, #144	; 0x90
    322c:	f00b fae5 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    3230:	6860      	ldr	r0, [r4, #4]
    3232:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3236:	b110      	cbz	r0, 323e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7a>
    3238:	2000      	movs	r0, #0
    323a:	f7fe ff8d 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    323e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3242:	2000      	movs	r0, #0
    3244:	f000 be38 	b.w	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    3248:	bd10      	pop	{r4, pc}
    324a:	0000      	.short	0x0000
    324c:	200000d0 	.word	0x200000d0
    3250:	000f4240 	.word	0x000f4240

00003254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    3254:	4a04      	ldr	r2, [pc, #16]	; (3268 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x14>)
    3256:	2803      	cmp	r0, #3
    3258:	6852      	ldr	r2, [r2, #4]
    325a:	d100      	bne.n	325e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0xa>
    325c:	6551      	str	r1, [r2, #84]	; 0x54
    325e:	f882 0058 	strb.w	r0, [r2, #88]	; 0x58
    3262:	2000      	movs	r0, #0
    3264:	4770      	bx	lr
    3266:	0000      	.short	0x0000
    3268:	200000d0 	.word	0x200000d0

0000326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>:
    326c:	4806      	ldr	r0, [pc, #24]	; (3288 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1c>)
    326e:	b508      	push	{r3, lr}
    3270:	6840      	ldr	r0, [r0, #4]
    3272:	7a00      	ldrb	r0, [r0, #8]
    3274:	f88d 0000 	strb.w	r0, [sp]
    3278:	9800      	ldr	r0, [sp, #0]
    327a:	9000      	str	r0, [sp, #0]
    327c:	f89d 0000 	ldrb.w	r0, [sp]
    3280:	2800      	cmp	r0, #0
    3282:	d000      	beq.n	3286 <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI+0x1a>
    3284:	2001      	movs	r0, #1
    3286:	bd08      	pop	{r3, pc}
    3288:	200000d0 	.word	0x200000d0

0000328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    328c:	4902      	ldr	r1, [pc, #8]	; (3298 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    328e:	6849      	ldr	r1, [r1, #4]
    3290:	f881 007e 	strb.w	r0, [r1, #126]	; 0x7e
    3294:	2000      	movs	r0, #0
    3296:	4770      	bx	lr
    3298:	200000d0 	.word	0x200000d0

0000329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    329c:	480a      	ldr	r0, [pc, #40]	; (32c8 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    329e:	6841      	ldr	r1, [r0, #4]
    32a0:	6e88      	ldr	r0, [r1, #104]	; 0x68
    32a2:	b170      	cbz	r0, 32c2 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x26>
    32a4:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    32a8:	22ff      	movs	r2, #255	; 0xff
    32aa:	7002      	strb	r2, [r0, #0]
    32ac:	2200      	movs	r2, #0
    32ae:	668a      	str	r2, [r1, #104]	; 0x68
    32b0:	7002      	strb	r2, [r0, #0]
    32b2:	f891 106c 	ldrb.w	r1, [r1, #108]	; 0x6c
    32b6:	2001      	movs	r0, #1
    32b8:	4088      	lsls	r0, r1
    32ba:	4904      	ldr	r1, [pc, #16]	; (32cc <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x30>)
    32bc:	6008      	str	r0, [r1, #0]
    32be:	2000      	movs	r0, #0
    32c0:	4770      	bx	lr
    32c2:	200c      	movs	r0, #12
    32c4:	4770      	bx	lr
    32c6:	0000      	.short	0x0000
    32c8:	200000d0 	.word	0x200000d0
    32cc:	4001f508 	.word	0x4001f508

000032d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    32d0:	4602      	mov	r2, r0
    32d2:	480c      	ldr	r0, [pc, #48]	; (3304 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x34>)
    32d4:	b510      	push	{r4, lr}
    32d6:	6082      	str	r2, [r0, #8]
    32d8:	68c0      	ldr	r0, [r0, #12]
    32da:	460c      	mov	r4, r1
    32dc:	b168      	cbz	r0, 32fa <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x2a>
    32de:	f000 ffe5 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    32e2:	f00b fb70 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    32e6:	4620      	mov	r0, r4
    32e8:	f000 f8c0 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    32ec:	2800      	cmp	r0, #0
    32ee:	d007      	beq.n	3300 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x30>
    32f0:	f640 119d 	movw	r1, #2461	; 0x99d
    32f4:	2032      	movs	r0, #50	; 0x32
    32f6:	f7fd fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    32fa:	f640 1197 	movw	r1, #2455	; 0x997
    32fe:	e7f9      	b.n	32f4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x24>
    3300:	bd10      	pop	{r4, pc}
    3302:	0000      	.short	0x0000
    3304:	200000d0 	.word	0x200000d0

00003308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    3308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    330c:	4c0f      	ldr	r4, [pc, #60]	; (334c <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    330e:	4605      	mov	r5, r0
    3310:	4616      	mov	r6, r2
    3312:	6860      	ldr	r0, [r4, #4]
    3314:	460f      	mov	r7, r1
    3316:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    331a:	f00b fa1c 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    331e:	b158      	cbz	r0, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3320:	b955      	cbnz	r5, 3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3322:	4638      	mov	r0, r7
    3324:	f00b fa10 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3328:	4631      	mov	r1, r6
    332a:	f00a fb6c 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    332e:	2808      	cmp	r0, #8
    3330:	d002      	beq.n	3338 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    3332:	2001      	movs	r0, #1
    3334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3338:	6860      	ldr	r0, [r4, #4]
    333a:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    333e:	f00b fa03 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    3342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3346:	f7fe b999 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    334a:	0000      	.short	0x0000
    334c:	200000d0 	.word	0x200000d0

00003350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>:
    3350:	b510      	push	{r4, lr}
    3352:	4c0a      	ldr	r4, [pc, #40]	; (337c <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x2c>)
    3354:	6860      	ldr	r0, [r4, #4]
    3356:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3358:	b159      	cbz	r1, 3372 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x22>
    335a:	2202      	movs	r2, #2
    335c:	7242      	strb	r2, [r0, #9]
    335e:	8809      	ldrh	r1, [r1, #0]
    3360:	8141      	strh	r1, [r0, #10]
    3362:	2212      	movs	r2, #18
    3364:	4906      	ldr	r1, [pc, #24]	; (3380 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A+0x30>)
    3366:	f00a feda 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    336a:	6861      	ldr	r1, [r4, #4]
    336c:	2000      	movs	r0, #0
    336e:	6548      	str	r0, [r1, #84]	; 0x54
    3370:	bd10      	pop	{r4, pc}
    3372:	f240 4122 	movw	r1, #1058	; 0x422
    3376:	2032      	movs	r0, #50	; 0x32
    3378:	f7fd fb74 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    337c:	200000d0 	.word	0x200000d0
    3380:	000036b5 	.word	0x000036b5

00003384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    3384:	b570      	push	{r4, r5, r6, lr}
    3386:	4c13      	ldr	r4, [pc, #76]	; (33d4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    3388:	4615      	mov	r5, r2
    338a:	460e      	mov	r6, r1
    338c:	2800      	cmp	r0, #0
    338e:	d016      	beq.n	33be <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    3390:	f04f 0200 	mov.w	r2, #0
    3394:	6861      	ldr	r1, [r4, #4]
    3396:	f801 2f51 	strb.w	r2, [r1, #81]!
    339a:	7248      	strb	r0, [r1, #9]
    339c:	f04f 0008 	mov.w	r0, #8
    33a0:	f881 002a 	strb.w	r0, [r1, #42]	; 0x2a
    33a4:	d114      	bne.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33a6:	4630      	mov	r0, r6
    33a8:	f00b f9ce 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    33ac:	4629      	mov	r1, r5
    33ae:	f00a fb2a 	bl	da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    33b2:	6861      	ldr	r1, [r4, #4]
    33b4:	2808      	cmp	r0, #8
    33b6:	f881 007b 	strb.w	r0, [r1, #123]	; 0x7b
    33ba:	d003      	beq.n	33c4 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    33bc:	e008      	b.n	33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33be:	f04f 0201 	mov.w	r2, #1
    33c2:	e7e7      	b.n	3394 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    33c4:	4630      	mov	r0, r6
    33c6:	f00b f9c6 	bl	e756 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc6>
    33ca:	b108      	cbz	r0, 33d0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    33cc:	2012      	movs	r0, #18
    33ce:	bd70      	pop	{r4, r5, r6, pc}
    33d0:	2000      	movs	r0, #0
    33d2:	bd70      	pop	{r4, r5, r6, pc}
    33d4:	200000d0 	.word	0x200000d0

000033d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>:
    33d8:	b510      	push	{r4, lr}
    33da:	b1b1      	cbz	r1, 340a <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x32>
    33dc:	4a0d      	ldr	r2, [pc, #52]	; (3414 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI+0x3c>)
    33de:	6852      	ldr	r2, [r2, #4]
    33e0:	f882 005f 	strb.w	r0, [r2, #95]	; 0x5f
    33e4:	6808      	ldr	r0, [r1, #0]
    33e6:	6610      	str	r0, [r2, #96]	; 0x60
    33e8:	8888      	ldrh	r0, [r1, #4]
    33ea:	f8a2 0064 	strh.w	r0, [r2, #100]	; 0x64
    33ee:	f892 0049 	ldrb.w	r0, [r2, #73]	; 0x49
    33f2:	f852 1f54 	ldr.w	r1, [r2, #84]!
    33f6:	7248      	strb	r0, [r1, #9]
    33f8:	f852 0908 	ldr.w	r0, [r2], #-8
    33fc:	f852 1c02 	ldr.w	r1, [r2, #-2]
    3400:	f8c0 100a 	str.w	r1, [r0, #10]
    3404:	8851      	ldrh	r1, [r2, #2]
    3406:	81c1      	strh	r1, [r0, #14]
    3408:	bd10      	pop	{r4, pc}
    340a:	f640 31a7 	movw	r1, #2983	; 0xba7
    340e:	2032      	movs	r0, #50	; 0x32
    3410:	f7fd fb28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3414:	200000d0 	.word	0x200000d0

00003418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>:
    3418:	4902      	ldr	r1, [pc, #8]	; (3424 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0xc>)
    341a:	4801      	ldr	r0, [pc, #4]	; (3420 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI+0x8>)
    341c:	60c8      	str	r0, [r1, #12]
    341e:	4770      	bx	lr
    3420:	000044e8 	.word	0x000044e8
    3424:	200000d0 	.word	0x200000d0

00003428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    3428:	4902      	ldr	r1, [pc, #8]	; (3434 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    342a:	6849      	ldr	r1, [r1, #4]
    342c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3430:	4770      	bx	lr
    3432:	0000      	.short	0x0000
    3434:	200000d0 	.word	0x200000d0

00003438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    3438:	b570      	push	{r4, r5, r6, lr}
    343a:	4605      	mov	r5, r0
    343c:	f7fd ff0c 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3440:	4604      	mov	r4, r0
    3442:	f7fd ff0f 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3446:	4621      	mov	r1, r4
    3448:	f00b f9d5 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    344c:	0001      	movs	r1, r0
    344e:	d006      	beq.n	345e <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    3450:	4805      	ldr	r0, [pc, #20]	; (3468 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    3452:	68c0      	ldr	r0, [r0, #12]
    3454:	6802      	ldr	r2, [r0, #0]
    3456:	4628      	mov	r0, r5
    3458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    345c:	4710      	bx	r2
    345e:	f640 21ab 	movw	r1, #2731	; 0xaab
    3462:	2032      	movs	r0, #50	; 0x32
    3464:	f7fd fafe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3468:	200000d0 	.word	0x200000d0

0000346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    346c:	b570      	push	{r4, r5, r6, lr}
    346e:	4d19      	ldr	r5, [pc, #100]	; (34d4 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    3470:	4604      	mov	r4, r0
    3472:	6868      	ldr	r0, [r5, #4]
    3474:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3478:	2901      	cmp	r1, #1
    347a:	d004      	beq.n	3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    347c:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    3480:	b108      	cbz	r0, 3486 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x1a>
    3482:	200c      	movs	r0, #12
    3484:	bd70      	pop	{r4, r5, r6, pc}
    3486:	f7fd ff11 	bl	12ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    348a:	f00b fa9c 	bl	e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>
    348e:	f000 f8c1 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    3492:	2246      	movs	r2, #70	; 0x46
    3494:	2100      	movs	r1, #0
    3496:	6868      	ldr	r0, [r5, #4]
    3498:	f00d f963 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    349c:	6869      	ldr	r1, [r5, #4]
    349e:	2200      	movs	r2, #0
    34a0:	2001      	movs	r0, #1
    34a2:	f881 205d 	strb.w	r2, [r1, #93]	; 0x5d
    34a6:	f881 0051 	strb.w	r0, [r1, #81]	; 0x51
    34aa:	f881 2058 	strb.w	r2, [r1, #88]	; 0x58
    34ae:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    34b2:	f881 405e 	strb.w	r4, [r1, #94]	; 0x5e
    34b6:	f881 2098 	strb.w	r2, [r1, #152]	; 0x98
    34ba:	2007      	movs	r0, #7
    34bc:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    34c0:	f101 006d 	add.w	r0, r1, #109	; 0x6d
    34c4:	23ff      	movs	r3, #255	; 0xff
    34c6:	7003      	strb	r3, [r0, #0]
    34c8:	f881 206c 	strb.w	r2, [r1, #108]	; 0x6c
    34cc:	668a      	str	r2, [r1, #104]	; 0x68
    34ce:	7002      	strb	r2, [r0, #0]
    34d0:	2000      	movs	r0, #0
    34d2:	bd70      	pop	{r4, r5, r6, pc}
    34d4:	200000d0 	.word	0x200000d0

000034d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    34d8:	4805      	ldr	r0, [pc, #20]	; (34f0 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    34da:	b510      	push	{r4, lr}
    34dc:	6840      	ldr	r0, [r0, #4]
    34de:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
    34e2:	f00b f931 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    34e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ea:	f7fe b8c7 	b.w	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    34ee:	0000      	.short	0x0000
    34f0:	200000d0 	.word	0x200000d0

000034f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    34f4:	b140      	cbz	r0, 3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34f6:	2802      	cmp	r0, #2
    34f8:	d006      	beq.n	3508 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    34fa:	2200      	movs	r2, #0
    34fc:	4903      	ldr	r1, [pc, #12]	; (350c <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    34fe:	6849      	ldr	r1, [r1, #4]
    3500:	f801 2f51 	strb.w	r2, [r1, #81]!
    3504:	7208      	strb	r0, [r1, #8]
    3506:	4770      	bx	lr
    3508:	2201      	movs	r2, #1
    350a:	e7f7      	b.n	34fc <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    350c:	200000d0 	.word	0x200000d0

00003510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    3510:	4902      	ldr	r1, [pc, #8]	; (351c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    3512:	6849      	ldr	r1, [r1, #4]
    3514:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    3518:	4770      	bx	lr
    351a:	0000      	.short	0x0000
    351c:	200000d0 	.word	0x200000d0

00003520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    3520:	b510      	push	{r4, lr}
    3522:	4603      	mov	r3, r0
    3524:	7800      	ldrb	r0, [r0, #0]
    3526:	07c0      	lsls	r0, r0, #31
    3528:	d005      	beq.n	3536 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x16>
    352a:	7858      	ldrb	r0, [r3, #1]
    352c:	2100      	movs	r1, #0
    352e:	f7ff fe91 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    3532:	2800      	cmp	r0, #0
    3534:	d10c      	bne.n	3550 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x30>
    3536:	4c07      	ldr	r4, [pc, #28]	; (3554 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>)
    3538:	7898      	ldrb	r0, [r3, #2]
    353a:	6861      	ldr	r1, [r4, #4]
    353c:	f881 0048 	strb.w	r0, [r1, #72]	; 0x48
    3540:	78d8      	ldrb	r0, [r3, #3]
    3542:	f7ff ffd7 	bl	34f4 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    3546:	6861      	ldr	r1, [r4, #4]
    3548:	7918      	ldrb	r0, [r3, #4]
    354a:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    354e:	2000      	movs	r0, #0
    3550:	bd10      	pop	{r4, pc}
    3552:	0000      	.short	0x0000
    3554:	200000d0 	.word	0x200000d0

00003558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    3558:	4801      	ldr	r0, [pc, #4]	; (3560 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    355a:	68c0      	ldr	r0, [r0, #12]
    355c:	6840      	ldr	r0, [r0, #4]
    355e:	4700      	bx	r0
    3560:	200000d0 	.word	0x200000d0

00003564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>:
    3564:	4807      	ldr	r0, [pc, #28]	; (3584 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x20>)
    3566:	b508      	push	{r3, lr}
    3568:	6840      	ldr	r0, [r0, #4]
    356a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    356e:	f88d 0000 	strb.w	r0, [sp]
    3572:	9800      	ldr	r0, [sp, #0]
    3574:	9000      	str	r0, [sp, #0]
    3576:	f89d 0000 	ldrb.w	r0, [sp]
    357a:	2800      	cmp	r0, #0
    357c:	d000      	beq.n	3580 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY+0x1c>
    357e:	2001      	movs	r0, #1
    3580:	bd08      	pop	{r3, pc}
    3582:	0000      	.short	0x0000
    3584:	200000d0 	.word	0x200000d0

00003588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    3588:	b510      	push	{r4, lr}
    358a:	f000 f951 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    358e:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x38>)
    3590:	b140      	cbz	r0, 35a4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1c>
    3592:	6858      	ldr	r0, [r3, #4]
    3594:	2101      	movs	r1, #1
    3596:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
    359a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    359c:	8809      	ldrh	r1, [r1, #0]
    359e:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    35a2:	e004      	b.n	35ae <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x26>
    35a4:	6859      	ldr	r1, [r3, #4]
    35a6:	2000      	movs	r0, #0
    35a8:	f801 0f42 	strb.w	r0, [r1, #66]!
    35ac:	8048      	strh	r0, [r1, #2]
    35ae:	6858      	ldr	r0, [r3, #4]
    35b0:	2217      	movs	r2, #23
    35b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    35b6:	4903      	ldr	r1, [pc, #12]	; (35c4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x3c>)
    35b8:	3038      	adds	r0, #56	; 0x38
    35ba:	f00a bdb0 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    35be:	0000      	.short	0x0000
    35c0:	200000d0 	.word	0x200000d0
    35c4:	00004245 	.word	0x00004245

000035c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    35c8:	4802      	ldr	r0, [pc, #8]	; (35d4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    35ca:	6840      	ldr	r0, [r0, #4]
    35cc:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    35d0:	4770      	bx	lr
    35d2:	0000      	.short	0x0000
    35d4:	200000d0 	.word	0x200000d0

000035d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    35d8:	b510      	push	{r4, lr}
    35da:	f000 f929 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    35de:	490c      	ldr	r1, [pc, #48]	; (3610 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    35e0:	b128      	cbz	r0, 35ee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    35e2:	6848      	ldr	r0, [r1, #4]
    35e4:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
    35e8:	2801      	cmp	r0, #1
    35ea:	d00e      	beq.n	360a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    35ec:	e00c      	b.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35ee:	6849      	ldr	r1, [r1, #4]
    35f0:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    35f4:	2801      	cmp	r0, #1
    35f6:	d001      	beq.n	35fc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    35f8:	2802      	cmp	r0, #2
    35fa:	d105      	bne.n	3608 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    35fc:	f891 0059 	ldrb.w	r0, [r1, #89]	; 0x59
    3600:	2801      	cmp	r0, #1
    3602:	d003      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3604:	2803      	cmp	r0, #3
    3606:	d001      	beq.n	360c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    3608:	2000      	movs	r0, #0
    360a:	bd10      	pop	{r4, pc}
    360c:	2001      	movs	r0, #1
    360e:	bd10      	pop	{r4, pc}
    3610:	200000d0 	.word	0x200000d0
    3614:	b510      	push	{r4, lr}
    3616:	4c07      	ldr	r4, [pc, #28]	; (3634 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    3618:	6860      	ldr	r0, [r4, #4]
    361a:	f890 007c 	ldrb.w	r0, [r0, #124]	; 0x7c
    361e:	2800      	cmp	r0, #0
    3620:	d007      	beq.n	3632 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    3622:	f004 fb23 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    3626:	f004 f947 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    362a:	6861      	ldr	r1, [r4, #4]
    362c:	2000      	movs	r0, #0
    362e:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    3632:	bd10      	pop	{r4, pc}
    3634:	200000d0 	.word	0x200000d0
    3638:	b518      	push	{r3, r4, lr}
    363a:	2300      	movs	r3, #0
    363c:	704b      	strb	r3, [r1, #1]
    363e:	2207      	movs	r2, #7
    3640:	700a      	strb	r2, [r1, #0]
    3642:	4a07      	ldr	r2, [pc, #28]	; (3660 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x88>)
    3644:	6852      	ldr	r2, [r2, #4]
    3646:	7203      	strb	r3, [r0, #8]
    3648:	6b54      	ldr	r4, [r2, #52]	; 0x34
    364a:	604c      	str	r4, [r1, #4]
    364c:	7a04      	ldrb	r4, [r0, #8]
    364e:	f88d 4000 	strb.w	r4, [sp]
    3652:	9c00      	ldr	r4, [sp, #0]
    3654:	9400      	str	r4, [sp, #0]
    3656:	f89d 4000 	ldrb.w	r4, [sp]
    365a:	2c00      	cmp	r4, #0
    365c:	d1f3      	bne.n	3646 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6e>
    365e:	bd18      	pop	{r3, r4, pc}
    3660:	200000d0 	.word	0x200000d0
    3664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3668:	4d10      	ldr	r5, [pc, #64]	; (36ac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd4>)
    366a:	4606      	mov	r6, r0
    366c:	460f      	mov	r7, r1
    366e:	6868      	ldr	r0, [r5, #4]
    3670:	490f      	ldr	r1, [pc, #60]	; (36b0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd8>)
    3672:	f890 007a 	ldrb.w	r0, [r0, #122]	; 0x7a
    3676:	5c0c      	ldrb	r4, [r1, r0]
    3678:	4620      	mov	r0, r4
    367a:	f004 fe37 	bl	82ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    367e:	6868      	ldr	r0, [r5, #4]
    3680:	2101      	movs	r1, #1
    3682:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
    3686:	2025      	movs	r0, #37	; 0x25
    3688:	f004 fe06 	bl	8298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>
    368c:	4638      	mov	r0, r7
    368e:	f004 fd39 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3692:	f04f 0101 	mov.w	r1, #1
    3696:	4608      	mov	r0, r1
    3698:	b126      	cbz	r6, 36a4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xcc>
    369a:	f004 fb93 	bl	7dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    369e:	b918      	cbnz	r0, 36a8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xd0>
    36a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    36a4:	f004 fb54 	bl	7d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    36a8:	2001      	movs	r0, #1
    36aa:	e7f9      	b.n	36a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xc8>
    36ac:	200000d0 	.word	0x200000d0
    36b0:	000108d7 	.word	0x000108d7
    36b4:	b570      	push	{r4, r5, r6, lr}
    36b6:	4e1a      	ldr	r6, [pc, #104]	; (3720 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x148>)
    36b8:	460c      	mov	r4, r1
    36ba:	6870      	ldr	r0, [r6, #4]
    36bc:	7a41      	ldrb	r1, [r0, #9]
    36be:	b191      	cbz	r1, 36e6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x10e>
    36c0:	8940      	ldrh	r0, [r0, #10]
    36c2:	2100      	movs	r1, #0
    36c4:	f00a f858 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    36c8:	0005      	movs	r5, r0
    36ca:	d025      	beq.n	3718 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x140>
    36cc:	8828      	ldrh	r0, [r5, #0]
    36ce:	f00a f8da 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    36d2:	8828      	ldrh	r0, [r5, #0]
    36d4:	2100      	movs	r1, #0
    36d6:	f7fd fc29 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    36da:	b188      	cbz	r0, 3700 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x128>
    36dc:	f240 31f2 	movw	r1, #1010	; 0x3f2
    36e0:	2032      	movs	r0, #50	; 0x32
    36e2:	f7fd f9bf 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    36e6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    36e8:	f8d0 200e 	ldr.w	r2, [r0, #14]
    36ec:	f841 2f03 	str.w	r2, [r1, #3]!
    36f0:	8a42      	ldrh	r2, [r0, #18]
    36f2:	808a      	strh	r2, [r1, #4]
    36f4:	7b40      	ldrb	r0, [r0, #13]
    36f6:	f00b f827 	bl	e748 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb8>
    36fa:	6871      	ldr	r1, [r6, #4]
    36fc:	6d49      	ldr	r1, [r1, #84]	; 0x54
    36fe:	7088      	strb	r0, [r1, #2]
    3700:	2500      	movs	r5, #0
    3702:	7065      	strb	r5, [r4, #1]
    3704:	2015      	movs	r0, #21
    3706:	7020      	strb	r0, [r4, #0]
    3708:	6871      	ldr	r1, [r6, #4]
    370a:	2221      	movs	r2, #33	; 0x21
    370c:	1d20      	adds	r0, r4, #4
    370e:	3109      	adds	r1, #9
    3710:	f00c ffad 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3714:	71e5      	strb	r5, [r4, #7]
    3716:	bd70      	pop	{r4, r5, r6, pc}
    3718:	f240 31ee 	movw	r1, #1006	; 0x3ee
    371c:	e7e0      	b.n	36e0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x108>
    371e:	0000      	.short	0x0000
    3720:	200000d0 	.word	0x200000d0
    3724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3726:	2600      	movs	r6, #0
    3728:	460f      	mov	r7, r1
    372a:	4605      	mov	r5, r0
    372c:	f88d 6000 	strb.w	r6, [sp]
    3730:	466b      	mov	r3, sp
    3732:	f000 f895 	bl	3860 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    3736:	0001      	movs	r1, r0
    3738:	4810      	ldr	r0, [pc, #64]	; (377c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a4>)
    373a:	d003      	beq.n	3744 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16c>
    373c:	6840      	ldr	r0, [r0, #4]
    373e:	f880 6081 	strb.w	r6, [r0, #129]	; 0x81
    3742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3744:	6840      	ldr	r0, [r0, #4]
    3746:	f89d 1000 	ldrb.w	r1, [sp]
    374a:	2f07      	cmp	r7, #7
    374c:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
    3750:	d301      	bcc.n	3756 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x17e>
    3752:	4634      	mov	r4, r6
    3754:	e002      	b.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    3756:	0022      	movs	r2, r4
    3758:	d100      	bne.n	375c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x184>
    375a:	460c      	mov	r4, r1
    375c:	f880 4081 	strb.w	r4, [r0, #129]	; 0x81
    3760:	6869      	ldr	r1, [r5, #4]
    3762:	2900      	cmp	r1, #0
    3764:	d0ed      	beq.n	3742 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16a>
    3766:	7c69      	ldrb	r1, [r5, #17]
    3768:	f880 1089 	strb.w	r1, [r0, #137]	; 0x89
    376c:	6869      	ldr	r1, [r5, #4]
    376e:	680a      	ldr	r2, [r1, #0]
    3770:	f840 2f82 	str.w	r2, [r0, #130]!
    3774:	8889      	ldrh	r1, [r1, #4]
    3776:	8081      	strh	r1, [r0, #4]
    3778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    377a:	0000      	.short	0x0000
    377c:	200000d0 	.word	0x200000d0
    3780:	b510      	push	{r4, lr}
    3782:	4915      	ldr	r1, [pc, #84]	; (37d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x200>)
    3784:	6842      	ldr	r2, [r0, #4]
    3786:	6849      	ldr	r1, [r1, #4]
    3788:	7813      	ldrb	r3, [r2, #0]
    378a:	f891 4082 	ldrb.w	r4, [r1, #130]	; 0x82
    378e:	42a3      	cmp	r3, r4
    3790:	d11f      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    3792:	7853      	ldrb	r3, [r2, #1]
    3794:	f891 4083 	ldrb.w	r4, [r1, #131]	; 0x83
    3798:	42a3      	cmp	r3, r4
    379a:	d11a      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    379c:	7893      	ldrb	r3, [r2, #2]
    379e:	f891 4084 	ldrb.w	r4, [r1, #132]	; 0x84
    37a2:	42a3      	cmp	r3, r4
    37a4:	d115      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37a6:	78d3      	ldrb	r3, [r2, #3]
    37a8:	f891 4085 	ldrb.w	r4, [r1, #133]	; 0x85
    37ac:	42a3      	cmp	r3, r4
    37ae:	d110      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37b0:	7913      	ldrb	r3, [r2, #4]
    37b2:	f891 4086 	ldrb.w	r4, [r1, #134]	; 0x86
    37b6:	42a3      	cmp	r3, r4
    37b8:	d10b      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ba:	7952      	ldrb	r2, [r2, #5]
    37bc:	f891 3087 	ldrb.w	r3, [r1, #135]	; 0x87
    37c0:	429a      	cmp	r2, r3
    37c2:	d106      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37c4:	7c40      	ldrb	r0, [r0, #17]
    37c6:	f891 1089 	ldrb.w	r1, [r1, #137]	; 0x89
    37ca:	4288      	cmp	r0, r1
    37cc:	d101      	bne.n	37d2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1fa>
    37ce:	2001      	movs	r0, #1
    37d0:	bd10      	pop	{r4, pc}
    37d2:	2000      	movs	r0, #0
    37d4:	bd10      	pop	{r4, pc}
    37d6:	0000      	.short	0x0000
    37d8:	200000d0 	.word	0x200000d0
    37dc:	b510      	push	{r4, lr}
    37de:	7801      	ldrb	r1, [r0, #0]
    37e0:	b08c      	sub	sp, #48	; 0x30
    37e2:	f001 040f 	and.w	r4, r1, #15
    37e6:	4622      	mov	r2, r4
    37e8:	a901      	add	r1, sp, #4
    37ea:	f000 ff0b 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    37ee:	f004 fa5f 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    37f2:	f000 fba1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    37f6:	2c04      	cmp	r4, #4
    37f8:	d114      	bne.n	3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    37fa:	a801      	add	r0, sp, #4
    37fc:	f7ff ffc0 	bl	3780 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1a8>
    3800:	b180      	cbz	r0, 3824 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24c>
    3802:	a80b      	add	r0, sp, #44	; 0x2c
    3804:	f000 fba0 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3808:	f99d 002c 	ldrsb.w	r0, [sp, #44]	; 0x2c
    380c:	9000      	str	r0, [sp, #0]
    380e:	4807      	ldr	r0, [pc, #28]	; (382c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x254>)
    3810:	6840      	ldr	r0, [r0, #4]
    3812:	f890 3088 	ldrb.w	r3, [r0, #136]	; 0x88
    3816:	f890 2098 	ldrb.w	r2, [r0, #152]	; 0x98
    381a:	f890 1079 	ldrb.w	r1, [r0, #121]	; 0x79
    381e:	a801      	add	r0, sp, #4
    3820:	f00b f886 	bl	e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    3824:	b00c      	add	sp, #48	; 0x30
    3826:	2005      	movs	r0, #5
    3828:	bd10      	pop	{r4, pc}
    382a:	0000      	.short	0x0000
    382c:	200000d0 	.word	0x200000d0
    3830:	4804      	ldr	r0, [pc, #16]	; (3844 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x26c>)
    3832:	6840      	ldr	r0, [r0, #4]
    3834:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3838:	2803      	cmp	r0, #3
    383a:	d001      	beq.n	3840 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x268>
    383c:	2000      	movs	r0, #0
    383e:	4770      	bx	lr
    3840:	2001      	movs	r0, #1
    3842:	4770      	bx	lr
    3844:	200000d0 	.word	0x200000d0
    3848:	7c82      	ldrb	r2, [r0, #18]
    384a:	6883      	ldr	r3, [r0, #8]
    384c:	4803      	ldr	r0, [pc, #12]	; (385c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    384e:	6841      	ldr	r1, [r0, #4]
    3850:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3854:	314a      	adds	r1, #74	; 0x4a
    3856:	f00a b81a 	b.w	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    385a:	0000      	.short	0x0000
    385c:	200000d0 	.word	0x200000d0
    3860:	b570      	push	{r4, r5, r6, lr}
    3862:	6841      	ldr	r1, [r0, #4]
    3864:	461e      	mov	r6, r3
    3866:	4604      	mov	r4, r0
    3868:	b1c1      	cbz	r1, 389c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    386a:	7c60      	ldrb	r0, [r4, #17]
    386c:	f00a ff61 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3870:	4d10      	ldr	r5, [pc, #64]	; (38b4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    3872:	6869      	ldr	r1, [r5, #4]
    3874:	f891 107c 	ldrb.w	r1, [r1, #124]	; 0x7c
    3878:	b141      	cbz	r1, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387a:	b138      	cbz	r0, 388c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    387c:	f00a f8b9 	bl	d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    3880:	6869      	ldr	r1, [r5, #4]
    3882:	f801 0f78 	strb.w	r0, [r1, #120]!
    3886:	7048      	strb	r0, [r1, #1]
    3888:	2001      	movs	r0, #1
    388a:	71c8      	strb	r0, [r1, #7]
    388c:	686b      	ldr	r3, [r5, #4]
    388e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
    3892:	28ff      	cmp	r0, #255	; 0xff
    3894:	d004      	beq.n	38a0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    3896:	f7fe fcdb 	bl	2250 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    389a:	7030      	strb	r0, [r6, #0]
    389c:	2000      	movs	r0, #0
    389e:	bd70      	pop	{r4, r5, r6, pc}
    38a0:	7c60      	ldrb	r0, [r4, #17]
    38a2:	4632      	mov	r2, r6
    38a4:	3378      	adds	r3, #120	; 0x78
    38a6:	6861      	ldr	r1, [r4, #4]
    38a8:	f7fe fcea 	bl	2280 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    38ac:	f080 0001 	eor.w	r0, r0, #1
    38b0:	bd70      	pop	{r4, r5, r6, pc}
    38b2:	0000      	.short	0x0000
    38b4:	200000d0 	.word	0x200000d0
    38b8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    38bc:	4c40      	ldr	r4, [pc, #256]	; (39c0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3e8>)
    38be:	2500      	movs	r5, #0
    38c0:	466f      	mov	r7, sp
    38c2:	6860      	ldr	r0, [r4, #4]
    38c4:	7245      	strb	r5, [r0, #9]
    38c6:	6d41      	ldr	r1, [r0, #84]	; 0x54
    38c8:	880a      	ldrh	r2, [r1, #0]
    38ca:	8142      	strh	r2, [r0, #10]
    38cc:	6908      	ldr	r0, [r1, #16]
    38ce:	f00a f8fc 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    38d2:	6861      	ldr	r1, [r4, #4]
    38d4:	f821 0f20 	strh.w	r0, [r1, #32]!
    38d8:	6b48      	ldr	r0, [r1, #52]	; 0x34
    38da:	8b02      	ldrh	r2, [r0, #24]
    38dc:	804a      	strh	r2, [r1, #2]
    38de:	8b40      	ldrh	r0, [r0, #26]
    38e0:	8088      	strh	r0, [r1, #4]
    38e2:	718d      	strb	r5, [r1, #6]
    38e4:	20ff      	movs	r0, #255	; 0xff
    38e6:	71c8      	strb	r0, [r1, #7]
    38e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    38ec:	8108      	strh	r0, [r1, #8]
    38ee:	4669      	mov	r1, sp
    38f0:	68a0      	ldr	r0, [r4, #8]
    38f2:	f00a fb24 	bl	df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>
    38f6:	68a0      	ldr	r0, [r4, #8]
    38f8:	7800      	ldrb	r0, [r0, #0]
    38fa:	f3c0 1680 	ubfx	r6, r0, #6, #1
    38fe:	6860      	ldr	r0, [r4, #4]
    3900:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3904:	b120      	cbz	r0, 3910 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x338>
    3906:	4639      	mov	r1, r7
    3908:	4630      	mov	r0, r6
    390a:	f00a ff12 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    390e:	b940      	cbnz	r0, 3922 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34a>
    3910:	6860      	ldr	r0, [r4, #4]
    3912:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
    3916:	b158      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3918:	4639      	mov	r1, r7
    391a:	4630      	mov	r0, r6
    391c:	f00a ff00 	bl	e720 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x90>
    3920:	b130      	cbz	r0, 3930 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x358>
    3922:	6860      	ldr	r0, [r4, #4]
    3924:	9900      	ldr	r1, [sp, #0]
    3926:	6141      	str	r1, [r0, #20]
    3928:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    392c:	8301      	strh	r1, [r0, #24]
    392e:	e002      	b.n	3936 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x35e>
    3930:	6860      	ldr	r0, [r4, #4]
    3932:	6145      	str	r5, [r0, #20]
    3934:	8305      	strh	r5, [r0, #24]
    3936:	6861      	ldr	r1, [r4, #4]
    3938:	f891 0079 	ldrb.w	r0, [r1, #121]	; 0x79
    393c:	28ff      	cmp	r0, #255	; 0xff
    393e:	d017      	beq.n	3970 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x398>
    3940:	f101 020e 	add.w	r2, r1, #14
    3944:	310d      	adds	r1, #13
    3946:	f7fe fc69 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    394a:	b160      	cbz	r0, 3966 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38e>
    394c:	6860      	ldr	r0, [r4, #4]
    394e:	7b41      	ldrb	r1, [r0, #13]
    3950:	f041 0102 	orr.w	r1, r1, #2
    3954:	7341      	strb	r1, [r0, #13]
    3956:	f8d0 1082 	ldr.w	r1, [r0, #130]	; 0x82
    395a:	f8c0 101a 	str.w	r1, [r0, #26]
    395e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    3962:	83c1      	strh	r1, [r0, #30]
    3964:	e010      	b.n	3988 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3b0>
    3966:	f241 5197 	movw	r1, #5527	; 0x1597
    396a:	2032      	movs	r0, #50	; 0x32
    396c:	f7fd f87a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3970:	f891 0089 	ldrb.w	r0, [r1, #137]	; 0x89
    3974:	7348      	strb	r0, [r1, #13]
    3976:	f8d1 0082 	ldr.w	r0, [r1, #130]	; 0x82
    397a:	f841 0f0e 	str.w	r0, [r1, #14]!
    397e:	f8b1 0078 	ldrh.w	r0, [r1, #120]	; 0x78
    3982:	8088      	strh	r0, [r1, #4]
    3984:	60cd      	str	r5, [r1, #12]
    3986:	820d      	strh	r5, [r1, #16]
    3988:	6860      	ldr	r0, [r4, #4]
    398a:	6d42      	ldr	r2, [r0, #84]	; 0x54
    398c:	f890 105e 	ldrb.w	r1, [r0, #94]	; 0x5e
    3990:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    3994:	2212      	movs	r2, #18
    3996:	490b      	ldr	r1, [pc, #44]	; (39c4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ec>)
    3998:	f00a fbc1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    399c:	6860      	ldr	r0, [r4, #4]
    399e:	6d41      	ldr	r1, [r0, #84]	; 0x54
    39a0:	302a      	adds	r0, #42	; 0x2a
    39a2:	880a      	ldrh	r2, [r1, #0]
    39a4:	4908      	ldr	r1, [pc, #32]	; (39c8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f0>)
    39a6:	868a      	strh	r2, [r1, #52]	; 0x34
    39a8:	6d4a      	ldr	r2, [r1, #84]	; 0x54
    39aa:	f892 20ad 	ldrb.w	r2, [r2, #173]	; 0xad
    39ae:	f881 2036 	strb.w	r2, [r1, #54]	; 0x36
    39b2:	2206      	movs	r2, #6
    39b4:	4905      	ldr	r1, [pc, #20]	; (39cc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f4>)
    39b6:	f00a fbc6 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    39ba:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    39be:	0000      	.short	0x0000
    39c0:	200000d0 	.word	0x200000d0
    39c4:	000036b5 	.word	0x000036b5
    39c8:	20000a78 	.word	0x20000a78
    39cc:	00003639 	.word	0x00003639
    39d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	4c4c      	ldr	r4, [pc, #304]	; (3b08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x530>)
    39d6:	4606      	mov	r6, r0
    39d8:	2100      	movs	r1, #0
    39da:	e9d4 5001 	ldrd	r5, r0, [r4, #4]
    39de:	3570      	adds	r5, #112	; 0x70
    39e0:	8001      	strh	r1, [r0, #0]
    39e2:	2e03      	cmp	r6, #3
    39e4:	d002      	beq.n	39ec <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x414>
    39e6:	2e05      	cmp	r6, #5
    39e8:	d004      	beq.n	39f4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x41c>
    39ea:	e051      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39ec:	2103      	movs	r1, #3
    39ee:	f00a fabd 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39f2:	e04d      	b.n	3a90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4b8>
    39f4:	2105      	movs	r1, #5
    39f6:	f00a fab9 	bl	df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>
    39fa:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    39fe:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a00:	6949      	ldr	r1, [r1, #20]
    3a02:	f8c7 100f 	str.w	r1, [r7, #15]
    3a06:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a08:	69c9      	ldr	r1, [r1, #28]
    3a0a:	74f9      	strb	r1, [r7, #19]
    3a0c:	0a0a      	lsrs	r2, r1, #8
    3a0e:	753a      	strb	r2, [r7, #20]
    3a10:	0c09      	lsrs	r1, r1, #16
    3a12:	7579      	strb	r1, [r7, #21]
    3a14:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a16:	6901      	ldr	r1, [r0, #16]
    3a18:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    3a1a:	f00a f9dd 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    3a1e:	75b8      	strb	r0, [r7, #22]
    3a20:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a24:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a26:	6901      	ldr	r1, [r0, #16]
    3a28:	6a00      	ldr	r0, [r0, #32]
    3a2a:	f00a f9be 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    3a2e:	75f8      	strb	r0, [r7, #23]
    3a30:	0a00      	lsrs	r0, r0, #8
    3a32:	7638      	strb	r0, [r7, #24]
    3a34:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a38:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a3a:	6900      	ldr	r0, [r0, #16]
    3a3c:	f00a f845 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    3a40:	7678      	strb	r0, [r7, #25]
    3a42:	0a00      	lsrs	r0, r0, #8
    3a44:	76b8      	strb	r0, [r7, #26]
    3a46:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
    3a4a:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a4c:	8b09      	ldrh	r1, [r1, #24]
    3a4e:	f807 1f1b 	strb.w	r1, [r7, #27]!
    3a52:	0a09      	lsrs	r1, r1, #8
    3a54:	7079      	strb	r1, [r7, #1]
    3a56:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a58:	8b49      	ldrh	r1, [r1, #26]
    3a5a:	70b9      	strb	r1, [r7, #2]
    3a5c:	0a09      	lsrs	r1, r1, #8
    3a5e:	70f9      	strb	r1, [r7, #3]
    3a60:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3a62:	f851 2fae 	ldr.w	r2, [r1, #174]!
    3a66:	607a      	str	r2, [r7, #4]
    3a68:	7909      	ldrb	r1, [r1, #4]
    3a6a:	7239      	strb	r1, [r7, #8]
    3a6c:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3a6e:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
    3a72:	7a78      	ldrb	r0, [r7, #9]
    3a74:	f001 011f 	and.w	r1, r1, #31
    3a78:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
    3a7c:	4308      	orrs	r0, r1
    3a7e:	7278      	strb	r0, [r7, #9]
    3a80:	f003 fefa 	bl	7878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    3a84:	7a79      	ldrb	r1, [r7, #9]
    3a86:	f001 011f 	and.w	r1, r1, #31
    3a8a:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3a8e:	7279      	strb	r1, [r7, #9]
    3a90:	f105 0112 	add.w	r1, r5, #18
    3a94:	68a0      	ldr	r0, [r4, #8]
    3a96:	f00a fa84 	bl	dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>
    3a9a:	7e69      	ldrb	r1, [r5, #25]
    3a9c:	68a0      	ldr	r0, [r4, #8]
    3a9e:	f00a fa86 	bl	dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>
    3aa2:	6860      	ldr	r0, [r4, #4]
    3aa4:	f100 054a 	add.w	r5, r0, #74	; 0x4a
    3aa8:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3aac:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3ab0:	b188      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ab2:	f7ff febd 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3ab6:	b130      	cbz	r0, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ab8:	6860      	ldr	r0, [r4, #4]
    3aba:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3abe:	b111      	cbz	r1, 3ac6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4ee>
    3ac0:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3ac4:	e002      	b.n	3acc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4f4>
    3ac6:	6860      	ldr	r0, [r4, #4]
    3ac8:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3acc:	f7fe fb78 	bl	21c0 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    3ad0:	b108      	cbz	r0, 3ad6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    3ad2:	2701      	movs	r7, #1
    3ad4:	4605      	mov	r5, r0
    3ad6:	4629      	mov	r1, r5
    3ad8:	68a0      	ldr	r0, [r4, #8]
    3ada:	f00a fa6f 	bl	dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>
    3ade:	4639      	mov	r1, r7
    3ae0:	68a0      	ldr	r0, [r4, #8]
    3ae2:	f00a fa71 	bl	dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>
    3ae6:	68a0      	ldr	r0, [r4, #8]
    3ae8:	f004 fb0c 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    3aec:	2e05      	cmp	r6, #5
    3aee:	d108      	bne.n	3b02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52a>
    3af0:	6860      	ldr	r0, [r4, #4]
    3af2:	682a      	ldr	r2, [r5, #0]
    3af4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    3af6:	f8c1 200a 	str.w	r2, [r1, #10]
    3afa:	88aa      	ldrh	r2, [r5, #4]
    3afc:	81ca      	strh	r2, [r1, #14]
    3afe:	6d40      	ldr	r0, [r0, #84]	; 0x54
    3b00:	7247      	strb	r7, [r0, #9]
    3b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b06:	0000      	.short	0x0000
    3b08:	200000d0 	.word	0x200000d0
    3b0c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3b10:	4f65      	ldr	r7, [pc, #404]	; (3ca8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d0>)
    3b12:	4604      	mov	r4, r0
    3b14:	6878      	ldr	r0, [r7, #4]
    3b16:	f890 8081 	ldrb.w	r8, [r0, #129]	; 0x81
    3b1a:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    3b1e:	b180      	cbz	r0, 3b42 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56a>
    3b20:	2600      	movs	r6, #0
    3b22:	2500      	movs	r5, #0
    3b24:	7ca0      	ldrb	r0, [r4, #18]
    3b26:	68a1      	ldr	r1, [r4, #8]
    3b28:	f00a fe03 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3b2c:	4682      	mov	sl, r0
    3b2e:	f7ff fe7f 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b32:	b140      	cbz	r0, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b34:	6878      	ldr	r0, [r7, #4]
    3b36:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
    3b3a:	b121      	cbz	r1, 3b46 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x56e>
    3b3c:	f890 007b 	ldrb.w	r0, [r0, #123]	; 0x7b
    3b40:	e004      	b.n	3b4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x574>
    3b42:	2601      	movs	r6, #1
    3b44:	e7ed      	b.n	3b22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x54a>
    3b46:	6878      	ldr	r0, [r7, #4]
    3b48:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    3b4c:	4683      	mov	fp, r0
    3b4e:	f7fe fae9 	bl	2124 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    3b52:	ea5f 0900 	movs.w	r9, r0
    3b56:	d00c      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b58:	4658      	mov	r0, fp
    3b5a:	f7fe fad7 	bl	210c <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    3b5e:	b100      	cbz	r0, 3b62 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x58a>
    3b60:	2601      	movs	r6, #1
    3b62:	f1ba 0f00 	cmp.w	sl, #0
    3b66:	d004      	beq.n	3b72 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x59a>
    3b68:	4648      	mov	r0, r9
    3b6a:	68a1      	ldr	r1, [r4, #8]
    3b6c:	f009 fef4 	bl	d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    3b70:	4605      	mov	r5, r0
    3b72:	6878      	ldr	r0, [r7, #4]
    3b74:	46b9      	mov	r9, r7
    3b76:	f890 7049 	ldrb.w	r7, [r0, #73]	; 0x49
    3b7a:	b10d      	cbz	r5, 3b80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a8>
    3b7c:	f047 0702 	orr.w	r7, r7, #2
    3b80:	f7ff fe56 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3b84:	b3a0      	cbz	r0, 3bf0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x618>
    3b86:	6860      	ldr	r0, [r4, #4]
    3b88:	f8d9 1004 	ldr.w	r1, [r9, #4]
    3b8c:	7802      	ldrb	r2, [r0, #0]
    3b8e:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3b92:	429a      	cmp	r2, r3
    3b94:	d11f      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3b96:	7842      	ldrb	r2, [r0, #1]
    3b98:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3b9c:	429a      	cmp	r2, r3
    3b9e:	d11a      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3ba0:	7882      	ldrb	r2, [r0, #2]
    3ba2:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3ba6:	429a      	cmp	r2, r3
    3ba8:	d115      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3baa:	78c2      	ldrb	r2, [r0, #3]
    3bac:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3bb0:	429a      	cmp	r2, r3
    3bb2:	d110      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bb4:	7902      	ldrb	r2, [r0, #4]
    3bb6:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3bba:	429a      	cmp	r2, r3
    3bbc:	d10b      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bbe:	7940      	ldrb	r0, [r0, #5]
    3bc0:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3bc4:	4290      	cmp	r0, r2
    3bc6:	d106      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bc8:	7c60      	ldrb	r0, [r4, #17]
    3bca:	f891 105f 	ldrb.w	r1, [r1, #95]	; 0x5f
    3bce:	4288      	cmp	r0, r1
    3bd0:	d101      	bne.n	3bd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5fe>
    3bd2:	2001      	movs	r0, #1
    3bd4:	e000      	b.n	3bd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x600>
    3bd6:	2000      	movs	r0, #0
    3bd8:	4f34      	ldr	r7, [pc, #208]	; (3cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d4>)
    3bda:	4682      	mov	sl, r0
    3bdc:	f897 0078 	ldrb.w	r0, [r7, #120]	; 0x78
    3be0:	2808      	cmp	r0, #8
    3be2:	d006      	beq.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3be4:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
    3be8:	4288      	cmp	r0, r1
    3bea:	d102      	bne.n	3bf2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61a>
    3bec:	2001      	movs	r0, #1
    3bee:	e001      	b.n	3bf4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x61c>
    3bf0:	e021      	b.n	3c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x65e>
    3bf2:	2000      	movs	r0, #0
    3bf4:	4681      	mov	r9, r0
    3bf6:	b925      	cbnz	r5, 3c02 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62a>
    3bf8:	b12e      	cbz	r6, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3bfa:	4620      	mov	r0, r4
    3bfc:	f7ff fe24 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c00:	b108      	cbz	r0, 3c06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x62e>
    3c02:	2001      	movs	r0, #1
    3c04:	e000      	b.n	3c08 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x630>
    3c06:	2000      	movs	r0, #0
    3c08:	f1b8 0f00 	cmp.w	r8, #0
    3c0c:	d009      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c0e:	f897 105a 	ldrb.w	r1, [r7, #90]	; 0x5a
    3c12:	2901      	cmp	r1, #1
    3c14:	d003      	beq.n	3c1e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x646>
    3c16:	b921      	cbnz	r1, 3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c18:	ea5a 0109 	orrs.w	r1, sl, r9
    3c1c:	d001      	beq.n	3c22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64a>
    3c1e:	2101      	movs	r1, #1
    3c20:	e000      	b.n	3c24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x64c>
    3c22:	2100      	movs	r1, #0
    3c24:	4208      	tst	r0, r1
    3c26:	d003      	beq.n	3c30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x658>
    3c28:	200c      	movs	r0, #12
    3c2a:	b004      	add	sp, #16
    3c2c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    3c30:	f004 f83e 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c34:	e036      	b.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c36:	f004 f83b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3c3a:	f1b8 0f00 	cmp.w	r8, #0
    3c3e:	d031      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c40:	4620      	mov	r0, r4
    3c42:	f7ff fe01 	bl	3848 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x270>
    3c46:	b900      	cbnz	r0, 3c4a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x672>
    3c48:	b175      	cbz	r5, 3c68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x690>
    3c4a:	a803      	add	r0, sp, #12
    3c4c:	f000 f97c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c50:	f8d9 2004 	ldr.w	r2, [r9, #4]
    3c54:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c58:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c5c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c60:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c64:	463b      	mov	r3, r7
    3c66:	e018      	b.n	3c9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6c2>
    3c68:	f8d9 0004 	ldr.w	r0, [r9, #4]
    3c6c:	464d      	mov	r5, r9
    3c6e:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    3c72:	2803      	cmp	r0, #3
    3c74:	d001      	beq.n	3c7a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6a2>
    3c76:	2802      	cmp	r0, #2
    3c78:	d114      	bne.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c7a:	f1ba 0f00 	cmp.w	sl, #0
    3c7e:	d011      	beq.n	3ca4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6cc>
    3c80:	a803      	add	r0, sp, #12
    3c82:	f000 f961 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3c86:	686a      	ldr	r2, [r5, #4]
    3c88:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3c8c:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3c90:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3c94:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3c98:	23fe      	movs	r3, #254	; 0xfe
    3c9a:	2101      	movs	r1, #1
    3c9c:	4620      	mov	r0, r4
    3c9e:	324a      	adds	r2, #74	; 0x4a
    3ca0:	f00a fdce 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3ca4:	2005      	movs	r0, #5
    3ca6:	e7c0      	b.n	3c2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x652>
    3ca8:	200000d0 	.word	0x200000d0
    3cac:	20000a78 	.word	0x20000a78
    3cb0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3cb2:	4c3f      	ldr	r4, [pc, #252]	; (3db0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7d8>)
    3cb4:	4605      	mov	r5, r0
    3cb6:	6860      	ldr	r0, [r4, #4]
    3cb8:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3cbc:	2900      	cmp	r1, #0
    3cbe:	d06c      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3cc0:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3cc4:	2802      	cmp	r0, #2
    3cc6:	d02c      	beq.n	3d22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x74a>
    3cc8:	2801      	cmp	r0, #1
    3cca:	d043      	beq.n	3d54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x77c>
    3ccc:	f7ff fdb0 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3cd0:	2800      	cmp	r0, #0
    3cd2:	d067      	beq.n	3da4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7cc>
    3cd4:	686a      	ldr	r2, [r5, #4]
    3cd6:	6861      	ldr	r1, [r4, #4]
    3cd8:	7810      	ldrb	r0, [r2, #0]
    3cda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3cde:	4298      	cmp	r0, r3
    3ce0:	d14c      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3ce2:	7850      	ldrb	r0, [r2, #1]
    3ce4:	f891 3061 	ldrb.w	r3, [r1, #97]	; 0x61
    3ce8:	4298      	cmp	r0, r3
    3cea:	d147      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cec:	7890      	ldrb	r0, [r2, #2]
    3cee:	f891 3062 	ldrb.w	r3, [r1, #98]	; 0x62
    3cf2:	4298      	cmp	r0, r3
    3cf4:	d142      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3cf6:	78d0      	ldrb	r0, [r2, #3]
    3cf8:	f891 3063 	ldrb.w	r3, [r1, #99]	; 0x63
    3cfc:	4298      	cmp	r0, r3
    3cfe:	d13d      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d00:	7910      	ldrb	r0, [r2, #4]
    3d02:	f891 3064 	ldrb.w	r3, [r1, #100]	; 0x64
    3d06:	4298      	cmp	r0, r3
    3d08:	d138      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d0a:	7950      	ldrb	r0, [r2, #5]
    3d0c:	f891 2065 	ldrb.w	r2, [r1, #101]	; 0x65
    3d10:	4290      	cmp	r0, r2
    3d12:	d133      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d14:	7c68      	ldrb	r0, [r5, #17]
    3d16:	f891 205f 	ldrb.w	r2, [r1, #95]	; 0x5f
    3d1a:	4290      	cmp	r0, r2
    3d1c:	d12e      	bne.n	3d7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a4>
    3d1e:	2001      	movs	r0, #1
    3d20:	e02d      	b.n	3d7e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a6>
    3d22:	a803      	add	r0, sp, #12
    3d24:	f000 f910 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d28:	6862      	ldr	r2, [r4, #4]
    3d2a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d2e:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d32:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d36:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d3a:	23ff      	movs	r3, #255	; 0xff
    3d3c:	2100      	movs	r1, #0
    3d3e:	4628      	mov	r0, r5
    3d40:	324a      	adds	r2, #74	; 0x4a
    3d42:	f00a fd7d 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d46:	6861      	ldr	r1, [r4, #4]
    3d48:	2001      	movs	r0, #1
    3d4a:	f881 0098 	strb.w	r0, [r1, #152]	; 0x98
    3d4e:	200b      	movs	r0, #11
    3d50:	b004      	add	sp, #16
    3d52:	bd70      	pop	{r4, r5, r6, pc}
    3d54:	a803      	add	r0, sp, #12
    3d56:	f000 f8f7 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3d5a:	6862      	ldr	r2, [r4, #4]
    3d5c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3d60:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3d64:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3d68:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3d6c:	23ff      	movs	r3, #255	; 0xff
    3d6e:	2100      	movs	r1, #0
    3d70:	4628      	mov	r0, r5
    3d72:	324a      	adds	r2, #74	; 0x4a
    3d74:	f00a fd64 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3d78:	2005      	movs	r0, #5
    3d7a:	e7e9      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3d7c:	2000      	movs	r0, #0
    3d7e:	f891 105a 	ldrb.w	r1, [r1, #90]	; 0x5a
    3d82:	2901      	cmp	r1, #1
    3d84:	d00c      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d86:	b958      	cbnz	r0, 3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d88:	490a      	ldr	r1, [pc, #40]	; (3db4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7dc>)
    3d8a:	f891 007b 	ldrb.w	r0, [r1, #123]	; 0x7b
    3d8e:	2808      	cmp	r0, #8
    3d90:	d003      	beq.n	3d9a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c2>
    3d92:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
    3d96:	4281      	cmp	r1, r0
    3d98:	d002      	beq.n	3da0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7c8>
    3d9a:	f003 ff89 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3d9e:	e7eb      	b.n	3d78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7a0>
    3da0:	200c      	movs	r0, #12
    3da2:	e7d5      	b.n	3d50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x778>
    3da4:	f640 61df 	movw	r1, #3807	; 0xedf
    3da8:	2032      	movs	r0, #50	; 0x32
    3daa:	f7fc fe5b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3dae:	0000      	.short	0x0000
    3db0:	200000d0 	.word	0x200000d0
    3db4:	20000a78 	.word	0x20000a78
    3db8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3dba:	4c1e      	ldr	r4, [pc, #120]	; (3e34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x85c>)
    3dbc:	4605      	mov	r5, r0
    3dbe:	6860      	ldr	r0, [r4, #4]
    3dc0:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3dc4:	b129      	cbz	r1, 3dd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7fa>
    3dc6:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3dca:	2802      	cmp	r0, #2
    3dcc:	d004      	beq.n	3dd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x800>
    3dce:	2801      	cmp	r0, #1
    3dd0:	d01b      	beq.n	3e0a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x832>
    3dd2:	f003 ff6d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3dd6:	e02a      	b.n	3e2e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x856>
    3dd8:	a803      	add	r0, sp, #12
    3dda:	f000 f8b5 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3dde:	6862      	ldr	r2, [r4, #4]
    3de0:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3de4:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3de8:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3dec:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3df0:	23ff      	movs	r3, #255	; 0xff
    3df2:	2106      	movs	r1, #6
    3df4:	4628      	mov	r0, r5
    3df6:	324a      	adds	r2, #74	; 0x4a
    3df8:	f00a fd22 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3dfc:	6862      	ldr	r2, [r4, #4]
    3dfe:	200b      	movs	r0, #11
    3e00:	2100      	movs	r1, #0
    3e02:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
    3e06:	b004      	add	sp, #16
    3e08:	bd70      	pop	{r4, r5, r6, pc}
    3e0a:	a803      	add	r0, sp, #12
    3e0c:	f000 f89c 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e10:	6862      	ldr	r2, [r4, #4]
    3e12:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e16:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e1a:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e1e:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e22:	23ff      	movs	r3, #255	; 0xff
    3e24:	2106      	movs	r1, #6
    3e26:	4628      	mov	r0, r5
    3e28:	324a      	adds	r2, #74	; 0x4a
    3e2a:	f00a fd09 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e2e:	2005      	movs	r0, #5
    3e30:	e7e9      	b.n	3e06 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x82e>
    3e32:	0000      	.short	0x0000
    3e34:	200000d0 	.word	0x200000d0
    3e38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    3e3a:	b389      	cbz	r1, 3ea0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c8>
    3e3c:	2901      	cmp	r1, #1
    3e3e:	d034      	beq.n	3eaa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8d2>
    3e40:	2505      	movs	r5, #5
    3e42:	2902      	cmp	r1, #2
    3e44:	d004      	beq.n	3e50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x878>
    3e46:	2906      	cmp	r1, #6
    3e48:	d025      	beq.n	3e96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8be>
    3e4a:	f003 ff31 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e4e:	e01f      	b.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e50:	4606      	mov	r6, r0
    3e52:	f003 ff2d 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    3e56:	4c17      	ldr	r4, [pc, #92]	; (3eb4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8dc>)
    3e58:	6860      	ldr	r0, [r4, #4]
    3e5a:	f890 1081 	ldrb.w	r1, [r0, #129]	; 0x81
    3e5e:	b1b9      	cbz	r1, 3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e60:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3e64:	2801      	cmp	r0, #1
    3e66:	d001      	beq.n	3e6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x894>
    3e68:	2802      	cmp	r0, #2
    3e6a:	d111      	bne.n	3e90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8b8>
    3e6c:	a803      	add	r0, sp, #12
    3e6e:	f000 f86b 	bl	3f48 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x970>
    3e72:	6862      	ldr	r2, [r4, #4]
    3e74:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    3e78:	f892 0079 	ldrb.w	r0, [r2, #121]	; 0x79
    3e7c:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
    3e80:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    3e84:	23ff      	movs	r3, #255	; 0xff
    3e86:	2102      	movs	r1, #2
    3e88:	4630      	mov	r0, r6
    3e8a:	324a      	adds	r2, #74	; 0x4a
    3e8c:	f00a fcd8 	bl	e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    3e90:	b004      	add	sp, #16
    3e92:	4628      	mov	r0, r5
    3e94:	bd70      	pop	{r4, r5, r6, pc}
    3e96:	b004      	add	sp, #16
    3e98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3e9c:	f7ff bf8c 	b.w	3db8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x7e0>
    3ea0:	b004      	add	sp, #16
    3ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ea6:	f7ff bf03 	b.w	3cb0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x6d8>
    3eaa:	b004      	add	sp, #16
    3eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3eb0:	f7ff be2c 	b.w	3b0c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x534>
    3eb4:	200000d0 	.word	0x200000d0
    3eb8:	b570      	push	{r4, r5, r6, lr}
    3eba:	4c11      	ldr	r4, [pc, #68]	; (3f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x928>)
    3ebc:	4605      	mov	r5, r0
    3ebe:	6861      	ldr	r1, [r4, #4]
    3ec0:	f891 005d 	ldrb.w	r0, [r1, #93]	; 0x5d
    3ec4:	2800      	cmp	r0, #0
    3ec6:	d019      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ec8:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
    3ecc:	2800      	cmp	r0, #0
    3ece:	d015      	beq.n	3efc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x924>
    3ed0:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    3ed4:	314a      	adds	r1, #74	; 0x4a
    3ed6:	f00a fc2c 	bl	e732 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xa2>
    3eda:	b140      	cbz	r0, 3eee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x916>
    3edc:	f7fe f8ec 	bl	20b8 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    3ee0:	6861      	ldr	r1, [r4, #4]
    3ee2:	462a      	mov	r2, r5
    3ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ee8:	314a      	adds	r1, #74	; 0x4a
    3eea:	f009 bd00 	b.w	d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    3eee:	6860      	ldr	r0, [r4, #4]
    3ef0:	4629      	mov	r1, r5
    3ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ef6:	304a      	adds	r0, #74	; 0x4a
    3ef8:	f009 bce8 	b.w	d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    3efc:	bd70      	pop	{r4, r5, r6, pc}
    3efe:	0000      	.short	0x0000
    3f00:	200000d0 	.word	0x200000d0
    3f04:	4602      	mov	r2, r0
    3f06:	480b      	ldr	r0, [pc, #44]	; (3f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x95c>)
    3f08:	b082      	sub	sp, #8
    3f0a:	6840      	ldr	r0, [r0, #4]
    3f0c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    3f10:	f88d 1000 	strb.w	r1, [sp]
    3f14:	9900      	ldr	r1, [sp, #0]
    3f16:	9100      	str	r1, [sp, #0]
    3f18:	f89d 1000 	ldrb.w	r1, [sp]
    3f1c:	2900      	cmp	r1, #0
    3f1e:	d107      	bne.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f20:	6e81      	ldr	r1, [r0, #104]	; 0x68
    3f22:	2900      	cmp	r1, #0
    3f24:	d004      	beq.n	3f30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x958>
    3f26:	f890 006c 	ldrb.w	r0, [r0, #108]	; 0x6c
    3f2a:	b002      	add	sp, #8
    3f2c:	f007 b912 	b.w	b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    3f30:	b002      	add	sp, #8
    3f32:	4770      	bx	lr
    3f34:	200000d0 	.word	0x200000d0
    3f38:	b510      	push	{r4, lr}
    3f3a:	f7fe fb9d 	bl	2678 <sym_ZIE6EQ2YDF5ZLLLNRMU6NPOFHB7VMBHYMI4646I>
    3f3e:	4901      	ldr	r1, [pc, #4]	; (3f44 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x96c>)
    3f40:	7008      	strb	r0, [r1, #0]
    3f42:	bd10      	pop	{r4, pc}
    3f44:	200000d0 	.word	0x200000d0
    3f48:	4a07      	ldr	r2, [pc, #28]	; (3f68 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x990>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	f992 1000 	ldrsb.w	r1, [r2]
    3f50:	297f      	cmp	r1, #127	; 0x7f
    3f52:	d003      	beq.n	3f5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x984>
    3f54:	7001      	strb	r1, [r0, #0]
    3f56:	207f      	movs	r0, #127	; 0x7f
    3f58:	7010      	strb	r0, [r2, #0]
    3f5a:	bd10      	pop	{r4, pc}
    3f5c:	f44f 6189 	mov.w	r1, #1096	; 0x448
    3f60:	2032      	movs	r0, #50	; 0x32
    3f62:	f7fc fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3f66:	0000      	.short	0x0000
    3f68:	200000d0 	.word	0x200000d0
    3f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f70:	4607      	mov	r7, r0
    3f72:	f7fd f971 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    3f76:	4604      	mov	r4, r0
    3f78:	f7fd f974 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    3f7c:	4621      	mov	r1, r4
    3f7e:	f00a fc3a 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    3f82:	0005      	movs	r5, r0
    3f84:	d012      	beq.n	3fac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9d4>
    3f86:	4c2d      	ldr	r4, [pc, #180]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f88:	6860      	ldr	r0, [r4, #4]
    3f8a:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    3f8e:	2801      	cmp	r0, #1
    3f90:	d004      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f92:	2802      	cmp	r0, #2
    3f94:	d002      	beq.n	3f9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c4>
    3f96:	f7ff fc4b 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    3f9a:	b150      	cbz	r0, 3fb2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9da>
    3f9c:	f06f 0613 	mvn.w	r6, #19
    3fa0:	b33f      	cbz	r7, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fa2:	4628      	mov	r0, r5
    3fa4:	f009 ffb3 	bl	df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>
    3fa8:	b950      	cbnz	r0, 3fc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e8>
    3faa:	e005      	b.n	3fb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9e0>
    3fac:	f241 5142 	movw	r1, #5442	; 0x1542
    3fb0:	e03a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb2:	f241 5148 	movw	r1, #5448	; 0x1548
    3fb6:	e037      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fb8:	4628      	mov	r0, r5
    3fba:	f009 ffca 	bl	df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>
    3fbe:	b1c0      	cbz	r0, 3ff2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa1a>
    3fc0:	6861      	ldr	r1, [r4, #4]
    3fc2:	4628      	mov	r0, r5
    3fc4:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fc8:	2a05      	cmp	r2, #5
    3fca:	d202      	bcs.n	3fd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9fa>
    3fcc:	f241 41cc 	movw	r1, #5324	; 0x14cc
    3fd0:	e02a      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fd2:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    3fd6:	2a0b      	cmp	r2, #11
    3fd8:	d302      	bcc.n	3fe0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa08>
    3fda:	f241 41cd 	movw	r1, #5325	; 0x14cd
    3fde:	e023      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    3fe0:	68e2      	ldr	r2, [r4, #12]
    3fe2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    3fe6:	6952      	ldr	r2, [r2, #20]
    3fe8:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    3fec:	5851      	ldr	r1, [r2, r1]
    3fee:	4788      	blx	r1
    3ff0:	e016      	b.n	4020 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20>
    3ff2:	6860      	ldr	r0, [r4, #4]
    3ff4:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    3ff8:	2905      	cmp	r1, #5
    3ffa:	d202      	bcs.n	4002 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2>
    3ffc:	f241 5138 	movw	r1, #5432	; 0x1538
    4000:	e012      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4002:	f890 1070 	ldrb.w	r1, [r0, #112]	; 0x70
    4006:	290b      	cmp	r1, #11
    4008:	d302      	bcc.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
    400a:	f241 5139 	movw	r1, #5433	; 0x1539
    400e:	e00b      	b.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
    4010:	68e1      	ldr	r1, [r4, #12]
    4012:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4016:	6989      	ldr	r1, [r1, #24]
    4018:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    401c:	5808      	ldr	r0, [r1, r0]
    401e:	4780      	blx	r0
    4020:	280f      	cmp	r0, #15
    4022:	d304      	bcc.n	402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4024:	f241 515d 	movw	r1, #5469	; 0x155d
    4028:	2032      	movs	r0, #50	; 0x32
    402a:	f7fc fd1b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    402e:	68e1      	ldr	r1, [r4, #12]
    4030:	6909      	ldr	r1, [r1, #16]
    4032:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    403a:	4700      	bx	r0
    403c:	200000d0 	.word	0x200000d0
    4040:	b510      	push	{r4, lr}
    4042:	b118      	cbz	r0, 404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>
    4044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4048:	f000 b922 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    404c:	2900      	cmp	r1, #0
    404e:	d01d      	beq.n	408c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x8c>
    4050:	480f      	ldr	r0, [pc, #60]	; (4090 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x90>)
    4052:	6841      	ldr	r1, [r0, #4]
    4054:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4058:	2a0b      	cmp	r2, #11
    405a:	d202      	bcs.n	4062 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x62>
    405c:	f241 6118 	movw	r1, #5656	; 0x1618
    4060:	e005      	b.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
    4062:	f891 2070 	ldrb.w	r2, [r1, #112]	; 0x70
    4066:	2a0f      	cmp	r2, #15
    4068:	d304      	bcc.n	4074 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x74>
    406a:	f241 6119 	movw	r1, #5657	; 0x1619
    406e:	2032      	movs	r0, #50	; 0x32
    4070:	f7fc fcf8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4074:	68c0      	ldr	r0, [r0, #12]
    4076:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
    407a:	6880      	ldr	r0, [r0, #8]
    407c:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    4080:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    4084:	5840      	ldr	r0, [r0, r1]
    4086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    408a:	4700      	bx	r0
    408c:	bd10      	pop	{r4, pc}
    408e:	0000      	.short	0x0000
    4090:	200000d0 	.word	0x200000d0
    4094:	b510      	push	{r4, lr}
    4096:	f7ff fabd 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    409a:	f000 f907 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    409e:	4805      	ldr	r0, [pc, #20]	; (40b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb4>)
    40a0:	6881      	ldr	r1, [r0, #8]
    40a2:	2000      	movs	r0, #0
    40a4:	f7ff fc08 	bl	38b8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    40a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40ac:	2002      	movs	r0, #2
    40ae:	f000 bae1 	b.w	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    40b2:	0000      	.short	0x0000
    40b4:	200000d0 	.word	0x200000d0
    40b8:	b510      	push	{r4, lr}
    40ba:	f7fd f8cd 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    40be:	4604      	mov	r4, r0
    40c0:	f7fd f8d0 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    40c4:	4621      	mov	r1, r4
    40c6:	f00a fb96 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    40ca:	b150      	cbz	r0, 40e2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xe2>
    40cc:	f004 f81a 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    40d0:	2000      	movs	r0, #0
    40d2:	f003 fee3 	bl	7e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    40d6:	4905      	ldr	r1, [pc, #20]	; (40ec <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xec>)
    40d8:	2006      	movs	r0, #6
    40da:	6849      	ldr	r1, [r1, #4]
    40dc:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    40e0:	bd10      	pop	{r4, pc}
    40e2:	f240 612b 	movw	r1, #1579	; 0x62b
    40e6:	2032      	movs	r0, #50	; 0x32
    40e8:	f7fc fcbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40ec:	200000d0 	.word	0x200000d0
    40f0:	490f      	ldr	r1, [pc, #60]	; (4130 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x130>)
    40f2:	b510      	push	{r4, lr}
    40f4:	6848      	ldr	r0, [r1, #4]
    40f6:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    40fa:	2a06      	cmp	r2, #6
    40fc:	d202      	bcs.n	4104 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x104>
    40fe:	f241 6146 	movw	r1, #5702	; 0x1646
    4102:	e005      	b.n	4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
    4104:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
    4108:	2a0b      	cmp	r2, #11
    410a:	d304      	bcc.n	4116 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x116>
    410c:	f241 6147 	movw	r1, #5703	; 0x1647
    4110:	2032      	movs	r0, #50	; 0x32
    4112:	f7fc fca7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4116:	68c9      	ldr	r1, [r1, #12]
    4118:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    411c:	68c9      	ldr	r1, [r1, #12]
    411e:	f06f 0213 	mvn.w	r2, #19
    4122:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    4126:	5808      	ldr	r0, [r1, r0]
    4128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    412c:	4700      	bx	r0
    412e:	0000      	.short	0x0000
    4130:	200000d0 	.word	0x200000d0
    4134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4138:	4c31      	ldr	r4, [pc, #196]	; (4200 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x200>)
    413a:	4605      	mov	r5, r0
    413c:	460e      	mov	r6, r1
    413e:	6860      	ldr	r0, [r4, #4]
    4140:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4144:	b120      	cbz	r0, 4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    4146:	2801      	cmp	r0, #1
    4148:	d002      	beq.n	4150 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x150>
    414a:	200c      	movs	r0, #12
    414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4150:	f003 ff32 	bl	7fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4154:	f003 fd8a 	bl	7c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    4158:	f003 fbae 	bl	78b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    415c:	f004 f9b0 	bl	84c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    4160:	4828      	ldr	r0, [pc, #160]	; (4204 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x204>)
    4162:	f003 fe93 	bl	7e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4166:	4828      	ldr	r0, [pc, #160]	; (4208 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x208>)
    4168:	f004 f890 	bl	828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    416c:	4827      	ldr	r0, [pc, #156]	; (420c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x20c>)
    416e:	f004 f883 	bl	8278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4172:	4630      	mov	r0, r6
    4174:	f003 ffc6 	bl	8104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    4178:	7968      	ldrb	r0, [r5, #5]
    417a:	b110      	cbz	r0, 4182 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x182>
    417c:	2001      	movs	r0, #1
    417e:	f7ff fec1 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    4182:	7928      	ldrb	r0, [r5, #4]
    4184:	2803      	cmp	r0, #3
    4186:	d001      	beq.n	418c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x18c>
    4188:	b118      	cbz	r0, 4192 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x192>
    418a:	e018      	b.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    418c:	f640 2141 	movw	r1, #2625	; 0xa41
    4190:	e033      	b.n	41fa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1fa>
    4192:	6861      	ldr	r1, [r4, #4]
    4194:	2000      	movs	r0, #0
    4196:	2503      	movs	r5, #3
    4198:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    419c:	f891 207a 	ldrb.w	r2, [r1, #122]	; 0x7a
    41a0:	1c52      	adds	r2, r2, #1
    41a2:	fbb2 f7f5 	udiv	r7, r2, r5
    41a6:	fb05 2217 	mls	r2, r5, r7, r2
    41aa:	f881 207a 	strb.w	r2, [r1, #122]	; 0x7a
    41ae:	fa23 f202 	lsr.w	r2, r3, r2
    41b2:	07d2      	lsls	r2, r2, #31
    41b4:	d103      	bne.n	41be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1be>
    41b6:	1c40      	adds	r0, r0, #1
    41b8:	b2c0      	uxtb	r0, r0
    41ba:	2803      	cmp	r0, #3
    41bc:	d3ee      	bcc.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
    41be:	6860      	ldr	r0, [r4, #4]
    41c0:	f990 005e 	ldrsb.w	r0, [r0, #94]	; 0x5e
    41c4:	f003 ff7c 	bl	80c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    41c8:	4631      	mov	r1, r6
    41ca:	2001      	movs	r0, #1
    41cc:	f7ff fa4a 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    41d0:	2800      	cmp	r0, #0
    41d2:	d0bb      	beq.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41d4:	f000 f922 	bl	441c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x41c>
    41d8:	6860      	ldr	r0, [r4, #4]
    41da:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
    41de:	b138      	cbz	r0, 41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>
    41e0:	f7fd ff6e 	bl	20c0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    41e4:	480a      	ldr	r0, [pc, #40]	; (4210 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x210>)
    41e6:	6800      	ldr	r0, [r0, #0]
    41e8:	2803      	cmp	r0, #3
    41ea:	d004      	beq.n	41f6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f6>
    41ec:	2000      	movs	r0, #0
    41ee:	e7ad      	b.n	414c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x14c>
    41f0:	f7fe f8c4 	bl	237c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    41f4:	e7f6      	b.n	41e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1e4>
    41f6:	f640 2153 	movw	r1, #2643	; 0xa53
    41fa:	2032      	movs	r0, #50	; 0x32
    41fc:	f7fc fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4200:	200000d0 	.word	0x200000d0
    4204:	00004504 	.word	0x00004504
    4208:	00555555 	.word	0x00555555
    420c:	8e89bed6 	.word	0x8e89bed6
    4210:	40001550 	.word	0x40001550
    4214:	b510      	push	{r4, lr}
    4216:	2000      	movs	r0, #0
    4218:	f7ff fe74 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    421c:	4808      	ldr	r0, [pc, #32]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    421e:	6840      	ldr	r0, [r0, #4]
    4220:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    4224:	b128      	cbz	r0, 4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    4226:	2801      	cmp	r0, #1
    4228:	d003      	beq.n	4232 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x232>
    422a:	2802      	cmp	r0, #2
    422c:	d004      	beq.n	4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>
    422e:	200c      	movs	r0, #12
    4230:	bd10      	pop	{r4, pc}
    4232:	f000 f82d 	bl	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4236:	e001      	b.n	423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>
    4238:	f000 f840 	bl	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    423c:	2000      	movs	r0, #0
    423e:	bd10      	pop	{r4, pc}
    4240:	200000d0 	.word	0x200000d0
    4244:	b510      	push	{r4, lr}
    4246:	2000      	movs	r0, #0
    4248:	7048      	strb	r0, [r1, #1]
    424a:	2019      	movs	r0, #25
    424c:	7008      	strb	r0, [r1, #0]
    424e:	480f      	ldr	r0, [pc, #60]	; (428c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28c>)
    4250:	6840      	ldr	r0, [r0, #4]
    4252:	f8d0 0042 	ldr.w	r0, [r0, #66]	; 0x42
    4256:	6048      	str	r0, [r1, #4]
    4258:	7908      	ldrb	r0, [r1, #4]
    425a:	2801      	cmp	r0, #1
    425c:	d114      	bne.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    425e:	88cc      	ldrh	r4, [r1, #6]
    4260:	2100      	movs	r1, #0
    4262:	4620      	mov	r0, r4
    4264:	f009 fa88 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    4268:	2800      	cmp	r0, #0
    426a:	d00d      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    426c:	4620      	mov	r0, r4
    426e:	f009 fb0a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    4272:	2100      	movs	r1, #0
    4274:	4620      	mov	r0, r4
    4276:	f7fc fe59 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    427a:	2800      	cmp	r0, #0
    427c:	d004      	beq.n	4288 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x288>
    427e:	f44f 6182 	mov.w	r1, #1040	; 0x410
    4282:	2032      	movs	r0, #50	; 0x32
    4284:	f7fc fbee 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4288:	bd10      	pop	{r4, pc}
    428a:	0000      	.short	0x0000
    428c:	200000d0 	.word	0x200000d0
    4290:	b510      	push	{r4, lr}
    4292:	f7ff f9bf 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    4296:	4904      	ldr	r1, [pc, #16]	; (42a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2a8>)
    4298:	2001      	movs	r0, #1
    429a:	6849      	ldr	r1, [r1, #4]
    429c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42a4:	f000 bb0a 	b.w	48bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>
    42a8:	200000d0 	.word	0x200000d0
    42ac:	4902      	ldr	r1, [pc, #8]	; (42b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2b8>)
    42ae:	2000      	movs	r0, #0
    42b0:	6849      	ldr	r1, [r1, #4]
    42b2:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    42b6:	4770      	bx	lr
    42b8:	200000d0 	.word	0x200000d0
    42bc:	b570      	push	{r4, r5, r6, lr}
    42be:	f7fc ffcb 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    42c2:	4604      	mov	r4, r0
    42c4:	f7fc ffce 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    42c8:	4621      	mov	r1, r4
    42ca:	f00a fa94 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    42ce:	0004      	movs	r4, r0
    42d0:	d020      	beq.n	4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>
    42d2:	f00a fa9d 	bl	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    42d6:	2000      	movs	r0, #0
    42d8:	f000 f9fa 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    42dc:	b1f8      	cbz	r0, 431e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31e>
    42de:	4d20      	ldr	r5, [pc, #128]	; (4360 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x360>)
    42e0:	6868      	ldr	r0, [r5, #4]
    42e2:	f890 0070 	ldrb.w	r0, [r0, #112]	; 0x70
    42e6:	2802      	cmp	r0, #2
    42e8:	d003      	beq.n	42f2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2f2>
    42ea:	4621      	mov	r1, r4
    42ec:	2000      	movs	r0, #0
    42ee:	f7ff f9b9 	bl	3664 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8c>
    42f2:	1ce0      	adds	r0, r4, #3
    42f4:	f009 fb7a 	bl	d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    42f8:	6869      	ldr	r1, [r5, #4]
    42fa:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    42fe:	b128      	cbz	r0, 430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>
    4300:	2440      	movs	r4, #64	; 0x40
    4302:	f003 faf9 	bl	78f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    4306:	4620      	mov	r0, r4
    4308:	f003 fcbe 	bl	7c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    430c:	f7ff fa90 	bl	3830 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    4310:	b970      	cbnz	r0, 4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>
    4312:	e008      	b.n	4326 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x326>
    4314:	f240 5119 	movw	r1, #1305	; 0x519
    4318:	2032      	movs	r0, #50	; 0x32
    431a:	f7fc fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4322:	f7ff bfb5 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4326:	6868      	ldr	r0, [r5, #4]
    4328:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    432c:	2802      	cmp	r0, #2
    432e:	d104      	bne.n	433a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33a>
    4330:	2100      	movs	r1, #0
    4332:	2201      	movs	r2, #1
    4334:	4608      	mov	r0, r1
    4336:	f003 ff6d 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    433a:	6868      	ldr	r0, [r5, #4]
    433c:	21ff      	movs	r1, #255	; 0xff
    433e:	f880 1078 	strb.w	r1, [r0, #120]	; 0x78
    4342:	f880 1079 	strb.w	r1, [r0, #121]	; 0x79
    4346:	2100      	movs	r1, #0
    4348:	f880 1080 	strb.w	r1, [r0, #128]	; 0x80
    434c:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
    4350:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    4354:	f880 1098 	strb.w	r1, [r0, #152]	; 0x98
    4358:	2105      	movs	r1, #5
    435a:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    435e:	bd70      	pop	{r4, r5, r6, pc}
    4360:	200000d0 	.word	0x200000d0
    4364:	b570      	push	{r4, r5, r6, lr}
    4366:	f7fc ff77 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    436a:	4604      	mov	r4, r0
    436c:	f7fc ff7a 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    4370:	4621      	mov	r1, r4
    4372:	f00a fa40 	bl	e7f6 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x8c>
    4376:	0005      	movs	r5, r0
    4378:	d028      	beq.n	43cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3cc>
    437a:	4e19      	ldr	r6, [pc, #100]	; (43e0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e0>)
    437c:	2004      	movs	r0, #4
    437e:	6874      	ldr	r4, [r6, #4]
    4380:	3470      	adds	r4, #112	; 0x70
    4382:	f000 f9a5 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    4386:	b330      	cbz	r0, 43d6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3d6>
    4388:	200c      	movs	r0, #12
    438a:	7020      	strb	r0, [r4, #0]
    438c:	2000      	movs	r0, #0
    438e:	f000 f971 	bl	4674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>
    4392:	7828      	ldrb	r0, [r5, #0]
    4394:	6871      	ldr	r1, [r6, #4]
    4396:	f3c0 1040 	ubfx	r0, r0, #5, #1
    439a:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
    439e:	2005      	movs	r0, #5
    43a0:	f7ff fb16 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43a4:	4a0f      	ldr	r2, [pc, #60]	; (43e4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3e4>)
    43a6:	68b1      	ldr	r1, [r6, #8]
    43a8:	2520      	movs	r5, #32
    43aa:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43ac:	f890 30ad 	ldrb.w	r3, [r0, #173]	; 0xad
    43b0:	7808      	ldrb	r0, [r1, #0]
    43b2:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    43b6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
    43ba:	4318      	orrs	r0, r3
    43bc:	7008      	strb	r0, [r1, #0]
    43be:	6d50      	ldr	r0, [r2, #84]	; 0x54
    43c0:	7ea2      	ldrb	r2, [r4, #26]
    43c2:	f810 1fad 	ldrb.w	r1, [r0, #173]!
    43c6:	4011      	ands	r1, r2
    43c8:	7001      	strb	r1, [r0, #0]
    43ca:	bd70      	pop	{r4, r5, r6, pc}
    43cc:	f240 619a 	movw	r1, #1690	; 0x69a
    43d0:	2032      	movs	r0, #50	; 0x32
    43d2:	f7fc fb47 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    43d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    43da:	f7ff bf59 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    43de:	0000      	.short	0x0000
    43e0:	200000d0 	.word	0x200000d0
    43e4:	20000a78 	.word	0x20000a78
    43e8:	b510      	push	{r4, lr}
    43ea:	2003      	movs	r0, #3
    43ec:	f000 f970 	bl	46d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    43f0:	b168      	cbz	r0, 440e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40e>
    43f2:	2003      	movs	r0, #3
    43f4:	f7ff faec 	bl	39d0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f8>
    43f8:	2201      	movs	r2, #1
    43fa:	4611      	mov	r1, r2
    43fc:	2000      	movs	r0, #0
    43fe:	f003 ff09 	bl	8214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    4402:	4905      	ldr	r1, [pc, #20]	; (4418 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x418>)
    4404:	200b      	movs	r0, #11
    4406:	6849      	ldr	r1, [r1, #4]
    4408:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    440c:	bd10      	pop	{r4, pc}
    440e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4412:	f7ff bf3d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    4416:	0000      	.short	0x0000
    4418:	200000d0 	.word	0x200000d0
    441c:	b570      	push	{r4, r5, r6, lr}
    441e:	4d19      	ldr	r5, [pc, #100]	; (4484 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x484>)
    4420:	2000      	movs	r0, #0
    4422:	686c      	ldr	r4, [r5, #4]
    4424:	f884 0098 	strb.w	r0, [r4, #152]	; 0x98
    4428:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
    442c:	b910      	cbnz	r0, 4434 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x434>
    442e:	f894 007d 	ldrb.w	r0, [r4, #125]	; 0x7d
    4432:	b308      	cbz	r0, 4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4434:	e9f4 1024 	ldrd	r1, r0, [r4, #144]!	; 0x90
    4438:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    443c:	4050      	eors	r0, r2
    443e:	ea70 0101 	orns	r1, r0, r1
    4442:	d019      	beq.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4444:	f006 fea4 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4448:	e9d4 2300 	ldrd	r2, r3, [r4]
    444c:	1a80      	subs	r0, r0, r2
    444e:	4199      	sbcs	r1, r3
    4450:	d312      	bcc.n	4478 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x478>
    4452:	f7fd ff0f 	bl	2274 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    4456:	490c      	ldr	r1, [pc, #48]	; (4488 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x488>)
    4458:	fba0 2301 	umull	r2, r3, r0, r1
    445c:	6868      	ldr	r0, [r5, #4]
    445e:	3090      	adds	r0, #144	; 0x90
    4460:	f00a f9cb 	bl	e7fa <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x90>
    4464:	6868      	ldr	r0, [r5, #4]
    4466:	f890 007d 	ldrb.w	r0, [r0, #125]	; 0x7d
    446a:	b110      	cbz	r0, 4472 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x472>
    446c:	2001      	movs	r0, #1
    446e:	f7fd fe73 	bl	2158 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    4472:	2001      	movs	r0, #1
    4474:	f7ff fd20 	bl	3eb8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x8e0>
    4478:	6869      	ldr	r1, [r5, #4]
    447a:	2002      	movs	r0, #2
    447c:	f881 0070 	strb.w	r0, [r1, #112]	; 0x70
    4480:	bd70      	pop	{r4, r5, r6, pc}
    4482:	0000      	.short	0x0000
    4484:	200000d0 	.word	0x200000d0
    4488:	000f4240 	.word	0x000f4240
    448c:	000042ad 	.word	0x000042ad
    4490:	00004291 	.word	0x00004291
    4494:	0000e7d7 	.word	0x0000e7d7
    4498:	0000e7d7 	.word	0x0000e7d7
    449c:	0000e7d7 	.word	0x0000e7d7
    44a0:	000042bd 	.word	0x000042bd
    44a4:	0000e7d7 	.word	0x0000e7d7
    44a8:	0000e7d7 	.word	0x0000e7d7
    44ac:	0000e7d7 	.word	0x0000e7d7
    44b0:	0000e7d7 	.word	0x0000e7d7
    44b4:	0000e7d7 	.word	0x0000e7d7
    44b8:	000043e9 	.word	0x000043e9
    44bc:	00004365 	.word	0x00004365
    44c0:	0000e7d7 	.word	0x0000e7d7
    44c4:	0000e7d7 	.word	0x0000e7d7
    44c8:	000040b9 	.word	0x000040b9
    44cc:	00004095 	.word	0x00004095
    44d0:	00000000 	.word	0x00000000
    44d4:	0000e7e1 	.word	0x0000e7e1
    44d8:	0000e77f 	.word	0x0000e77f
    44dc:	0000e791 	.word	0x0000e791
    44e0:	0000e79f 	.word	0x0000e79f
    44e4:	000037dd 	.word	0x000037dd
    44e8:	00004135 	.word	0x00004135
    44ec:	00004215 	.word	0x00004215
    44f0:	000044c8 	.word	0x000044c8
    44f4:	000044d0 	.word	0x000044d0
    44f8:	0000448c 	.word	0x0000448c
    44fc:	000044e0 	.word	0x000044e0
    4500:	000044d8 	.word	0x000044d8
    4504:	000040f1 	.word	0x000040f1
    4508:	00003f6d 	.word	0x00003f6d
    450c:	00004041 	.word	0x00004041
    4510:	0000e7f3 	.word	0x0000e7f3
    4514:	b570      	push	{r4, r5, r6, lr}
    4516:	4604      	mov	r4, r0
    4518:	7800      	ldrb	r0, [r0, #0]
    451a:	2805      	cmp	r0, #5
    451c:	d001      	beq.n	4522 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x522>
    451e:	2148      	movs	r1, #72	; 0x48
    4520:	e058      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    4522:	7ba0      	ldrb	r0, [r4, #14]
    4524:	06c0      	lsls	r0, r0, #27
    4526:	d401      	bmi.n	452c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52c>
    4528:	2149      	movs	r1, #73	; 0x49
    452a:	e053      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    452c:	221c      	movs	r2, #28
    452e:	1d21      	adds	r1, r4, #4
    4530:	482f      	ldr	r0, [pc, #188]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4532:	f00c f89c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4536:	482e      	ldr	r0, [pc, #184]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4538:	7b22      	ldrb	r2, [r4, #12]
    453a:	f104 0120 	add.w	r1, r4, #32
    453e:	301c      	adds	r0, #28
    4540:	f00c f895 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4544:	482a      	ldr	r0, [pc, #168]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    4546:	f04f 0201 	mov.w	r2, #1
    454a:	7a81      	ldrb	r1, [r0, #10]
    454c:	0749      	lsls	r1, r1, #29
    454e:	d502      	bpl.n	4556 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x556>
    4550:	7cc1      	ldrb	r1, [r0, #19]
    4552:	29fe      	cmp	r1, #254	; 0xfe
    4554:	d00c      	beq.n	4570 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x570>
    4556:	2304      	movs	r3, #4
    4558:	7023      	strb	r3, [r4, #0]
    455a:	6801      	ldr	r1, [r0, #0]
    455c:	6061      	str	r1, [r4, #4]
    455e:	6841      	ldr	r1, [r0, #4]
    4560:	60a1      	str	r1, [r4, #8]
    4562:	8901      	ldrh	r1, [r0, #8]
    4564:	81a1      	strh	r1, [r4, #12]
    4566:	7a81      	ldrb	r1, [r0, #10]
    4568:	070d      	lsls	r5, r1, #28
    456a:	d519      	bpl.n	45a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5a0>
    456c:	73a3      	strb	r3, [r4, #14]
    456e:	e02d      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    4570:	2113      	movs	r1, #19
    4572:	7021      	strb	r1, [r4, #0]
    4574:	7801      	ldrb	r1, [r0, #0]
    4576:	7121      	strb	r1, [r4, #4]
    4578:	7162      	strb	r2, [r4, #5]
    457a:	7841      	ldrb	r1, [r0, #1]
    457c:	71a1      	strb	r1, [r4, #6]
    457e:	f8d0 1002 	ldr.w	r1, [r0, #2]
    4582:	f8c4 1007 	str.w	r1, [r4, #7]
    4586:	88c1      	ldrh	r1, [r0, #6]
    4588:	f8a4 100b 	strh.w	r1, [r4, #11]
    458c:	21fe      	movs	r1, #254	; 0xfe
    458e:	7361      	strb	r1, [r4, #13]
    4590:	6941      	ldr	r1, [r0, #20]
    4592:	f8c4 100e 	str.w	r1, [r4, #14]
    4596:	8b01      	ldrh	r1, [r0, #24]
    4598:	8261      	strh	r1, [r4, #18]
    459a:	7a40      	ldrb	r0, [r0, #9]
    459c:	7520      	strb	r0, [r4, #20]
    459e:	bd70      	pop	{r4, r5, r6, pc}
    45a0:	07cb      	lsls	r3, r1, #31
    45a2:	d003      	beq.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a4:	078b      	lsls	r3, r1, #30
    45a6:	d501      	bpl.n	45ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ac>
    45a8:	2100      	movs	r1, #0
    45aa:	e00e      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45ac:	074b      	lsls	r3, r1, #29
    45ae:	d501      	bpl.n	45b4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5b4>
    45b0:	73a2      	strb	r2, [r4, #14]
    45b2:	e00b      	b.n	45cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5cc>
    45b4:	07ca      	lsls	r2, r1, #31
    45b6:	d110      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45b8:	078a      	lsls	r2, r1, #30
    45ba:	d501      	bpl.n	45c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c0>
    45bc:	2102      	movs	r1, #2
    45be:	e004      	b.n	45ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5ca>
    45c0:	07ca      	lsls	r2, r1, #31
    45c2:	d10a      	bne.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c4:	0789      	lsls	r1, r1, #30
    45c6:	d408      	bmi.n	45da <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5da>
    45c8:	2103      	movs	r1, #3
    45ca:	73a1      	strb	r1, [r4, #14]
    45cc:	7a02      	ldrb	r2, [r0, #8]
    45ce:	2a1f      	cmp	r2, #31
    45d0:	d905      	bls.n	45de <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5de>
    45d2:	218d      	movs	r1, #141	; 0x8d
    45d4:	2033      	movs	r0, #51	; 0x33
    45d6:	f7fc fa45 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    45da:	218a      	movs	r1, #138	; 0x8a
    45dc:	e7fa      	b.n	45d4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5d4>
    45de:	f104 000f 	add.w	r0, r4, #15
    45e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    45e6:	4902      	ldr	r1, [pc, #8]	; (45f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f0>)
    45e8:	311c      	adds	r1, #28
    45ea:	f00c b840 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    45ee:	0000      	.short	0x0000
    45f0:	200014d5 	.word	0x200014d5
    45f4:	2100      	movs	r1, #0
    45f6:	7201      	strb	r1, [r0, #8]
    45f8:	2204      	movs	r2, #4
    45fa:	4901      	ldr	r1, [pc, #4]	; (4600 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x600>)
    45fc:	f009 bd8f 	b.w	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    4600:	0000e9cb 	.word	0x0000e9cb

00004604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    4604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4608:	4616      	mov	r6, r2
    460a:	460c      	mov	r4, r1
    460c:	4605      	mov	r5, r0
    460e:	f009 fc9c 	bl	df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>
    4612:	7460      	strb	r0, [r4, #17]
    4614:	4628      	mov	r0, r5
    4616:	f009 fc8f 	bl	df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>
    461a:	74a0      	strb	r0, [r4, #18]
    461c:	1cea      	adds	r2, r5, #3
    461e:	4b14      	ldr	r3, [pc, #80]	; (4670 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    4620:	1d90      	adds	r0, r2, #6
    4622:	2100      	movs	r1, #0
    4624:	2e07      	cmp	r6, #7
    4626:	d21f      	bcs.n	4668 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    4628:	e8df f006 	tbb	[pc, r6]
    462c:	1e110b04 	.word	0x1e110b04
    4630:	00041e13 	.word	0x00041e13
    4634:	781b      	ldrb	r3, [r3, #0]
    4636:	e00d      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4638:	60e0      	str	r0, [r4, #12]
    463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    463e:	60e1      	str	r1, [r4, #12]
    4640:	e7fb      	b.n	463a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    4642:	785b      	ldrb	r3, [r3, #1]
    4644:	7063      	strb	r3, [r4, #1]
    4646:	e9c4 2001 	strd	r2, r0, [r4, #4]
    464a:	7421      	strb	r1, [r4, #16]
    464c:	e7f7      	b.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    464e:	789b      	ldrb	r3, [r3, #2]
    4650:	e000      	b.n	4654 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    4652:	78db      	ldrb	r3, [r3, #3]
    4654:	7063      	strb	r3, [r4, #1]
    4656:	e9c4 2101 	strd	r2, r1, [r4, #4]
    465a:	786a      	ldrb	r2, [r5, #1]
    465c:	1f92      	subs	r2, r2, #6
    465e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    4662:	7422      	strb	r2, [r4, #16]
    4664:	d0eb      	beq.n	463e <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    4666:	e7e7      	b.n	4638 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    4668:	7061      	strb	r1, [r4, #1]
    466a:	6061      	str	r1, [r4, #4]
    466c:	60a1      	str	r1, [r4, #8]
    466e:	e7ec      	b.n	464a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    4670:	000108da 	.word	0x000108da

00004674 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA>:
    4674:	b570      	push	{r4, r5, r6, lr}
    4676:	b140      	cbz	r0, 468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    4678:	2801      	cmp	r0, #1
    467a:	d006      	beq.n	468a <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x16>
    467c:	2802      	cmp	r0, #2
    467e:	d00a      	beq.n	4696 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x22>
    4680:	2803      	cmp	r0, #3
    4682:	d006      	beq.n	4692 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x1e>
    4684:	f640 01c8 	movw	r1, #2248	; 0x8c8
    4688:	e015      	b.n	46b6 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x42>
    468a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    468e:	f000 b97d 	b.w	498c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    4692:	2001      	movs	r0, #1
    4694:	e000      	b.n	4698 <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x24>
    4696:	2000      	movs	r0, #0
    4698:	4c0c      	ldr	r4, [pc, #48]	; (46cc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x58>)
    469a:	2101      	movs	r1, #1
    469c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    46a0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    46a4:	6a20      	ldr	r0, [r4, #32]
    46a6:	2500      	movs	r5, #0
    46a8:	f880 5248 	strb.w	r5, [r0, #584]	; 0x248
    46ac:	7821      	ldrb	r1, [r4, #0]
    46ae:	2905      	cmp	r1, #5
    46b0:	d004      	beq.n	46bc <sym_BAQ6XKIJ2DDNHUPTZJSMTWD7KTOEUEG7XPMPCIA+0x48>
    46b2:	f640 0149 	movw	r1, #2121	; 0x849
    46b6:	2021      	movs	r0, #33	; 0x21
    46b8:	f7fc f9d4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46bc:	f000 fd9a 	bl	51f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>
    46c0:	6225      	str	r5, [r4, #32]
    46c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    46c6:	f000 b9c5 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    46ca:	0000      	.short	0x0000
    46cc:	20000b20 	.word	0x20000b20

000046d0 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    46d0:	b570      	push	{r4, r5, r6, lr}
    46d2:	4605      	mov	r5, r0
    46d4:	f006 fd5c 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    46d8:	4c16      	ldr	r4, [pc, #88]	; (4734 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>)
    46da:	6921      	ldr	r1, [r4, #16]
    46dc:	1a46      	subs	r6, r0, r1
    46de:	b155      	cbz	r5, 46f6 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x26>
    46e0:	2d03      	cmp	r5, #3
    46e2:	d00d      	beq.n	4700 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x30>
    46e4:	2d04      	cmp	r5, #4
    46e6:	d00e      	beq.n	4706 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    46e8:	2d06      	cmp	r5, #6
    46ea:	d01d      	beq.n	4728 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x58>
    46ec:	f240 31d6 	movw	r1, #982	; 0x3d6
    46f0:	2021      	movs	r0, #33	; 0x21
    46f2:	f7fc f9b7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46f6:	2001      	movs	r0, #1
    46f8:	f00a fa05 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    46fc:	3098      	adds	r0, #152	; 0x98
    46fe:	e004      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4700:	f44f 7057 	mov.w	r0, #860	; 0x35c
    4704:	e001      	b.n	470a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3a>
    4706:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    470a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    470c:	1835      	adds	r5, r6, r0
    470e:	39f4      	subs	r1, #244	; 0xf4
    4710:	428d      	cmp	r5, r1
    4712:	d307      	bcc.n	4724 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x54>
    4714:	2600      	movs	r6, #0
    4716:	f000 fac9 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    471a:	b140      	cbz	r0, 472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    471c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    471e:	38f4      	subs	r0, #244	; 0xf4
    4720:	4285      	cmp	r5, r0
    4722:	d203      	bcs.n	472c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5c>
    4724:	2601      	movs	r6, #1
    4726:	e002      	b.n	472e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    4728:	2001      	movs	r0, #1
    472a:	bd70      	pop	{r4, r5, r6, pc}
    472c:	2600      	movs	r6, #0
    472e:	4630      	mov	r0, r6
    4730:	bd70      	pop	{r4, r5, r6, pc}
    4732:	0000      	.short	0x0000
    4734:	20000b20 	.word	0x20000b20

00004738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    4738:	b5f0      	push	{r4, r5, r6, r7, lr}
    473a:	4c1e      	ldr	r4, [pc, #120]	; (47b4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x7c>)
    473c:	4607      	mov	r7, r0
    473e:	b087      	sub	sp, #28
    4740:	7820      	ldrb	r0, [r4, #0]
    4742:	460e      	mov	r6, r1
    4744:	b110      	cbz	r0, 474c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x14>
    4746:	200c      	movs	r0, #12
    4748:	b007      	add	sp, #28
    474a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    474c:	f7fe fd34 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4750:	4605      	mov	r5, r0
    4752:	6227      	str	r7, [r4, #32]
    4754:	f897 0248 	ldrb.w	r0, [r7, #584]	; 0x248
    4758:	b110      	cbz	r0, 4760 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x28>
    475a:	f44f 713f 	mov.w	r1, #764	; 0x2fc
    475e:	e025      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    4760:	2005      	movs	r0, #5
    4762:	7020      	strb	r0, [r4, #0]
    4764:	2000      	movs	r0, #0
    4766:	7060      	strb	r0, [r4, #1]
    4768:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    476c:	f000 fae4 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4770:	64a0      	str	r0, [r4, #72]	; 0x48
    4772:	2100      	movs	r1, #0
    4774:	4810      	ldr	r0, [pc, #64]	; (47b8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    4776:	f006 fadd 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    477a:	7028      	strb	r0, [r5, #0]
    477c:	2820      	cmp	r0, #32
    477e:	d00d      	beq.n	479c <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x64>
    4780:	4633      	mov	r3, r6
    4782:	2200      	movs	r2, #0
    4784:	2101      	movs	r1, #1
    4786:	4668      	mov	r0, sp
    4788:	f000 fb30 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    478c:	b148      	cbz	r0, 47a2 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6a>
    478e:	7828      	ldrb	r0, [r5, #0]
    4790:	4669      	mov	r1, sp
    4792:	f00a f9e3 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4796:	b138      	cbz	r0, 47a8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x70>
    4798:	2000      	movs	r0, #0
    479a:	e7d5      	b.n	4748 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    479c:	f240 310a 	movw	r1, #778	; 0x30a
    47a0:	e004      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a2:	f240 310d 	movw	r1, #781	; 0x30d
    47a6:	e001      	b.n	47ac <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    47a8:	f240 310e 	movw	r1, #782	; 0x30e
    47ac:	2021      	movs	r0, #33	; 0x21
    47ae:	f7fc f959 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    47b2:	0000      	.short	0x0000
    47b4:	20000b20 	.word	0x20000b20
    47b8:	00004a75 	.word	0x00004a75

000047bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    47bc:	4902      	ldr	r1, [pc, #8]	; (47c8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    47be:	6a09      	ldr	r1, [r1, #32]
    47c0:	6001      	str	r1, [r0, #0]
    47c2:	f000 b83d 	b.w	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    47c6:	0000      	.short	0x0000
    47c8:	20000b20 	.word	0x20000b20

000047cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    47cc:	b570      	push	{r4, r5, r6, lr}
    47ce:	b086      	sub	sp, #24
    47d0:	4606      	mov	r6, r0
    47d2:	b111      	cbz	r1, 47da <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xe>
    47d4:	2011      	movs	r0, #17
    47d6:	b006      	add	sp, #24
    47d8:	bd70      	pop	{r4, r5, r6, pc}
    47da:	4c17      	ldr	r4, [pc, #92]	; (4838 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x6c>)
    47dc:	7820      	ldrb	r0, [r4, #0]
    47de:	b108      	cbz	r0, 47e4 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x18>
    47e0:	200c      	movs	r0, #12
    47e2:	e7f8      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    47e4:	f7fe fce8 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    47e8:	4605      	mov	r5, r0
    47ea:	2000      	movs	r0, #0
    47ec:	7060      	strb	r0, [r4, #1]
    47ee:	2004      	movs	r0, #4
    47f0:	7020      	strb	r0, [r4, #0]
    47f2:	f000 faa1 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    47f6:	64a0      	str	r0, [r4, #72]	; 0x48
    47f8:	2100      	movs	r1, #0
    47fa:	4810      	ldr	r0, [pc, #64]	; (483c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    47fc:	f006 fa9a 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    4800:	7028      	strb	r0, [r5, #0]
    4802:	2820      	cmp	r0, #32
    4804:	d00d      	beq.n	4822 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x56>
    4806:	4633      	mov	r3, r6
    4808:	2200      	movs	r2, #0
    480a:	2101      	movs	r1, #1
    480c:	4668      	mov	r0, sp
    480e:	f000 faed 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4812:	b148      	cbz	r0, 4828 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5c>
    4814:	7828      	ldrb	r0, [r5, #0]
    4816:	4669      	mov	r1, sp
    4818:	f00a f9a0 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    481c:	b138      	cbz	r0, 482e <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x62>
    481e:	2000      	movs	r0, #0
    4820:	e7d9      	b.n	47d6 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xa>
    4822:	f240 3162 	movw	r1, #866	; 0x362
    4826:	e004      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    4828:	f44f 7159 	mov.w	r1, #868	; 0x364
    482c:	e001      	b.n	4832 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x66>
    482e:	f240 3165 	movw	r1, #869	; 0x365
    4832:	2021      	movs	r0, #33	; 0x21
    4834:	f7fc f916 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4838:	20000b20 	.word	0x20000b20
    483c:	00004a75 	.word	0x00004a75

00004840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    4840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4844:	2700      	movs	r7, #0
    4846:	f7fe fcb7 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    484a:	4c18      	ldr	r4, [pc, #96]	; (48ac <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x6c>)
    484c:	4605      	mov	r5, r0
    484e:	7820      	ldrb	r0, [r4, #0]
    4850:	2804      	cmp	r0, #4
    4852:	d005      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    4854:	7820      	ldrb	r0, [r4, #0]
    4856:	2805      	cmp	r0, #5
    4858:	d002      	beq.n	4860 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    485a:	200c      	movs	r0, #12
    485c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4860:	2001      	movs	r0, #1
    4862:	7060      	strb	r0, [r4, #1]
    4864:	7b20      	ldrb	r0, [r4, #12]
    4866:	b160      	cbz	r0, 4882 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    4868:	f3ef 8610 	mrs	r6, PRIMASK
    486c:	b672      	cpsid	i
    486e:	7b20      	ldrb	r0, [r4, #12]
    4870:	b128      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4872:	7b60      	ldrb	r0, [r4, #13]
    4874:	b118      	cbz	r0, 487e <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    4876:	f009 ff78 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    487a:	f000 f8eb 	bl	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    487e:	b126      	cbz	r6, 488a <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    4880:	e004      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    4882:	7828      	ldrb	r0, [r5, #0]
    4884:	f005 ffea 	bl	a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    4888:	e000      	b.n	488c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    488a:	b662      	cpsie	i
    488c:	7828      	ldrb	r0, [r5, #0]
    488e:	f006 f939 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    4892:	f000 fc03 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4896:	2000      	movs	r0, #0
    4898:	7060      	strb	r0, [r4, #1]
    489a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    489e:	b100      	cbz	r0, 48a2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x62>
    48a0:	270c      	movs	r7, #12
    48a2:	f000 fc27 	bl	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    48a6:	4638      	mov	r0, r7
    48a8:	e7d8      	b.n	485c <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    48aa:	0000      	.short	0x0000
    48ac:	20000b20 	.word	0x20000b20

000048b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    48b0:	4801      	ldr	r0, [pc, #4]	; (48b8 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    48b2:	7800      	ldrb	r0, [r0, #0]
    48b4:	4770      	bx	lr
    48b6:	0000      	.short	0x0000
    48b8:	20000b20 	.word	0x20000b20

000048bc <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ>:
    48bc:	b510      	push	{r4, lr}
    48be:	4c10      	ldr	r4, [pc, #64]	; (4900 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x44>)
    48c0:	b086      	sub	sp, #24
    48c2:	7b20      	ldrb	r0, [r4, #12]
    48c4:	b1b0      	cbz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48c6:	7860      	ldrb	r0, [r4, #1]
    48c8:	b9a0      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48ca:	2300      	movs	r3, #0
    48cc:	461a      	mov	r2, r3
    48ce:	4619      	mov	r1, r3
    48d0:	4668      	mov	r0, sp
    48d2:	f000 fa8b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    48d6:	b158      	cbz	r0, 48f0 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x34>
    48d8:	f7fe fc6e 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    48dc:	7800      	ldrb	r0, [r0, #0]
    48de:	4669      	mov	r1, sp
    48e0:	f00a f93c 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    48e4:	b930      	cbnz	r0, 48f4 <sym_KBLYJZQ5R2WICKGMMMTOVLLRNIVEKRPHH44ZWLQ+0x38>
    48e6:	f240 71ae 	movw	r1, #1966	; 0x7ae
    48ea:	2021      	movs	r0, #33	; 0x21
    48ec:	f7fc f8ba 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    48f0:	2001      	movs	r0, #1
    48f2:	70a0      	strb	r0, [r4, #2]
    48f4:	b006      	add	sp, #24
    48f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48fa:	f000 b8ab 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    48fe:	0000      	.short	0x0000
    4900:	20000b20 	.word	0x20000b20

00004904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>:
    4904:	b508      	push	{r3, lr}
    4906:	2260      	movs	r2, #96	; 0x60
    4908:	2100      	movs	r1, #0
    490a:	480c      	ldr	r0, [pc, #48]	; (493c <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x38>)
    490c:	f00b ff29 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4910:	f7fe fc52 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4914:	2120      	movs	r1, #32
    4916:	7001      	strb	r1, [r0, #0]
    4918:	f000 f812 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
    491c:	b120      	cbz	r0, 4928 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q+0x24>
    491e:	f240 2135 	movw	r1, #565	; 0x235
    4922:	2021      	movs	r0, #33	; 0x21
    4924:	f7fc f89e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4928:	f242 7010 	movw	r0, #10000	; 0x2710
    492c:	9000      	str	r0, [sp, #0]
    492e:	2201      	movs	r2, #1
    4930:	4669      	mov	r1, sp
    4932:	1080      	asrs	r0, r0, #2
    4934:	f000 f940 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4938:	bd08      	pop	{r3, pc}
    493a:	0000      	.short	0x0000
    493c:	20000b20 	.word	0x20000b20

00004940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>:
    4940:	4803      	ldr	r0, [pc, #12]	; (4950 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0x10>)
    4942:	b510      	push	{r4, lr}
    4944:	7800      	ldrb	r0, [r0, #0]
    4946:	b108      	cbz	r0, 494c <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ+0xc>
    4948:	f7ff ff7a 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    494c:	2000      	movs	r0, #0
    494e:	bd10      	pop	{r4, pc}
    4950:	20000b20 	.word	0x20000b20

00004954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    4954:	490c      	ldr	r1, [pc, #48]	; (4988 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    4956:	b508      	push	{r3, lr}
    4958:	7809      	ldrb	r1, [r1, #0]
    495a:	b121      	cbz	r1, 4966 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    495c:	f44f 7147 	mov.w	r1, #796	; 0x31c
    4960:	2021      	movs	r0, #33	; 0x21
    4962:	f7fc f87f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4966:	2300      	movs	r3, #0
    4968:	9300      	str	r3, [sp, #0]
    496a:	7801      	ldrb	r1, [r0, #0]
    496c:	461a      	mov	r2, r3
    496e:	07c9      	lsls	r1, r1, #31
    4970:	d003      	beq.n	497a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    4972:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    4976:	2201      	movs	r2, #1
    4978:	9000      	str	r0, [sp, #0]
    497a:	4669      	mov	r1, sp
    497c:	4618      	mov	r0, r3
    497e:	f000 f91b 	bl	4bb8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x264>
    4982:	2000      	movs	r0, #0
    4984:	bd08      	pop	{r3, pc}
    4986:	0000      	.short	0x0000
    4988:	20000b20 	.word	0x20000b20
    498c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4990:	4c2e      	ldr	r4, [pc, #184]	; (4a4c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xf8>)
    4992:	4680      	mov	r8, r0
    4994:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
    4998:	461e      	mov	r6, r3
    499a:	f003 fad3 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    499e:	4607      	mov	r7, r0
    49a0:	6a20      	ldr	r0, [r4, #32]
    49a2:	2101      	movs	r1, #1
    49a4:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
    49a8:	f880 106b 	strb.w	r1, [r0, #107]	; 0x6b
    49ac:	3062      	adds	r0, #98	; 0x62
    49ae:	21ff      	movs	r1, #255	; 0xff
    49b0:	7281      	strb	r1, [r0, #10]
    49b2:	6a20      	ldr	r0, [r4, #32]
    49b4:	f04f 0900 	mov.w	r9, #0
    49b8:	4649      	mov	r1, r9
    49ba:	302c      	adds	r0, #44	; 0x2c
    49bc:	f009 fc5e 	bl	e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    49c0:	462a      	mov	r2, r5
    49c2:	4633      	mov	r3, r6
    49c4:	2101      	movs	r1, #1
    49c6:	4640      	mov	r0, r8
    49c8:	9700      	str	r7, [sp, #0]
    49ca:	f00a f8ae 	bl	eb2a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x3a>
    49ce:	6a27      	ldr	r7, [r4, #32]
    49d0:	4606      	mov	r6, r0
    49d2:	460d      	mov	r5, r1
    49d4:	f8d7 8010 	ldr.w	r8, [r7, #16]
    49d8:	f002 fa5a 	bl	6e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    49dc:	f104 0140 	add.w	r1, r4, #64	; 0x40
    49e0:	4288      	cmp	r0, r1
    49e2:	d00b      	beq.n	49fc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa8>
    49e4:	e9cd 6500 	strd	r6, r5, [sp]
    49e8:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
    49ec:	4642      	mov	r2, r8
    49ee:	f00a fc18 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    49f2:	4540      	cmp	r0, r8
    49f4:	d903      	bls.n	49fe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaa>
    49f6:	f240 410c 	movw	r1, #1036	; 0x40c
    49fa:	e01d      	b.n	4a38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xe4>
    49fc:	2000      	movs	r0, #0
    49fe:	4914      	ldr	r1, [pc, #80]	; (4a50 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xfc>)
    4a00:	4607      	mov	r7, r0
    4a02:	6809      	ldr	r1, [r1, #0]
    4a04:	4288      	cmp	r0, r1
    4a06:	6a20      	ldr	r0, [r4, #32]
    4a08:	6901      	ldr	r1, [r0, #16]
    4a0a:	d202      	bcs.n	4a12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbe>
    4a0c:	440f      	add	r7, r1
    4a0e:	6201      	str	r1, [r0, #32]
    4a10:	e004      	b.n	4a1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xc8>
    4a12:	4638      	mov	r0, r7
    4a14:	f009 f9cf 	bl	ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>
    4a18:	6a21      	ldr	r1, [r4, #32]
    4a1a:	6208      	str	r0, [r1, #32]
    4a1c:	6a20      	ldr	r0, [r4, #32]
    4a1e:	6901      	ldr	r1, [r0, #16]
    4a20:	2005      	movs	r0, #5
    4a22:	f009 f9d0 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    4a26:	6a21      	ldr	r1, [r4, #32]
    4a28:	8488      	strh	r0, [r1, #36]	; 0x24
    4a2a:	6a21      	ldr	r1, [r4, #32]
    4a2c:	6a0a      	ldr	r2, [r1, #32]
    4a2e:	1aba      	subs	r2, r7, r2
    4a30:	4290      	cmp	r0, r2
    4a32:	d804      	bhi.n	4a3e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xea>
    4a34:	f640 0137 	movw	r1, #2103	; 0x837
    4a38:	2021      	movs	r0, #33	; 0x21
    4a3a:	f7fc f813 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a3e:	19f2      	adds	r2, r6, r7
    4a40:	eb45 0509 	adc.w	r5, r5, r9
    4a44:	e9c1 258a 	strd	r2, r5, [r1, #552]	; 0x228
    4a48:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    4a4c:	20000b20 	.word	0x20000b20
    4a50:	200000e0 	.word	0x200000e0
    4a54:	b510      	push	{r4, lr}
    4a56:	4c06      	ldr	r4, [pc, #24]	; (4a70 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>)
    4a58:	7b20      	ldrb	r0, [r4, #12]
    4a5a:	2800      	cmp	r0, #0
    4a5c:	d006      	beq.n	4a6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    4a5e:	f003 fa77 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    4a62:	f006 f98f 	bl	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    4a66:	2000      	movs	r0, #0
    4a68:	7320      	strb	r0, [r4, #12]
    4a6a:	7360      	strb	r0, [r4, #13]
    4a6c:	bd10      	pop	{r4, pc}
    4a6e:	0000      	.short	0x0000
    4a70:	20000b20 	.word	0x20000b20
    4a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a76:	b087      	sub	sp, #28
    4a78:	460d      	mov	r5, r1
    4a7a:	f7fe fb9d 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    4a7e:	2701      	movs	r7, #1
    4a80:	4c3f      	ldr	r4, [pc, #252]	; (4b80 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>)
    4a82:	2d09      	cmp	r5, #9
    4a84:	d278      	bcs.n	4b78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x224>
    4a86:	e8df f005 	tbb	[pc, r5]
    4a8a:	3905      	.short	0x3905
    4a8c:	774a4f4f 	.word	0x774a4f4f
    4a90:	00726d64 	.word	0x00726d64
    4a94:	7327      	strb	r7, [r4, #12]
    4a96:	7861      	ldrb	r1, [r4, #1]
    4a98:	2900      	cmp	r1, #0
    4a9a:	d12d      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4a9c:	7800      	ldrb	r0, [r0, #0]
    4a9e:	f005 fabb 	bl	a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    4aa2:	4605      	mov	r5, r0
    4aa4:	460e      	mov	r6, r1
    4aa6:	e9c4 0104 	strd	r0, r1, [r4, #16]
    4aaa:	f000 fb3f 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4aae:	b118      	cbz	r0, 4ab8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x164>
    4ab0:	2000      	movs	r0, #0
    4ab2:	f88d 0004 	strb.w	r0, [sp, #4]
    4ab6:	e001      	b.n	4abc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x168>
    4ab8:	f88d 7004 	strb.w	r7, [sp, #4]
    4abc:	f000 f950 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4ac0:	4633      	mov	r3, r6
    4ac2:	462a      	mov	r2, r5
    4ac4:	f00a f84c 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4ac8:	6861      	ldr	r1, [r4, #4]
    4aca:	fbb0 f2f1 	udiv	r2, r0, r1
    4ace:	fb01 0012 	mls	r0, r1, r2, r0
    4ad2:	b150      	cbz	r0, 4aea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x196>
    4ad4:	f05f 0000 	movs.w	r0, #0
    4ad8:	f88d 0005 	strb.w	r0, [sp, #5]
    4adc:	4668      	mov	r0, sp
    4ade:	f7fe fcab 	bl	3438 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    4ae2:	b120      	cbz	r0, 4aee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x19a>
    4ae4:	f44f 71e7 	mov.w	r1, #462	; 0x1ce
    4ae8:	e043      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4aea:	2001      	movs	r0, #1
    4aec:	e7f4      	b.n	4ad8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x184>
    4aee:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4af0:	38e3      	subs	r0, #227	; 0xe3
    4af2:	63a0      	str	r0, [r4, #56]	; 0x38
    4af4:	f006 fa60 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4af8:	b007      	add	sp, #28
    4afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4afc:	7860      	ldrb	r0, [r4, #1]
    4afe:	b130      	cbz	r0, 4b0e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ba>
    4b00:	f009 fe33 	bl	e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    4b04:	b007      	add	sp, #28
    4b06:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b0a:	f7ff bfa3 	b.w	4a54 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x100>
    4b0e:	7367      	strb	r7, [r4, #13]
    4b10:	f7fe fd22 	bl	3558 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    4b14:	2800      	cmp	r0, #0
    4b16:	d0ef      	beq.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b18:	f240 11e1 	movw	r1, #481	; 0x1e1
    4b1c:	e029      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b1e:	b007      	add	sp, #28
    4b20:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b24:	f003 bbe8 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    4b28:	7805      	ldrb	r5, [r0, #0]
    4b2a:	2300      	movs	r3, #0
    4b2c:	2201      	movs	r2, #1
    4b2e:	4619      	mov	r1, r3
    4b30:	4668      	mov	r0, sp
    4b32:	f000 f95b 	bl	4dec <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x498>
    4b36:	b140      	cbz	r0, 4b4a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f6>
    4b38:	4669      	mov	r1, sp
    4b3a:	4628      	mov	r0, r5
    4b3c:	f00a f80e 	bl	eb5c <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x6c>
    4b40:	2800      	cmp	r0, #0
    4b42:	d1d9      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b44:	f240 71c9 	movw	r1, #1993	; 0x7c9
    4b48:	e013      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b4a:	70a7      	strb	r7, [r4, #2]
    4b4c:	f000 f81a 	bl	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b50:	e7d2      	b.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b52:	f000 f8ab 	bl	4cac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    4b56:	2800      	cmp	r0, #0
    4b58:	d1ce      	bne.n	4af8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a4>
    4b5a:	b007      	add	sp, #28
    4b5c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b60:	f009 be01 	b.w	e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    4b64:	b007      	add	sp, #28
    4b66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    4b6a:	f000 b80b 	b.w	4b84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x230>
    4b6e:	f240 2113 	movw	r1, #531	; 0x213
    4b72:	2021      	movs	r0, #33	; 0x21
    4b74:	f7fb ff76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4b78:	f240 2117 	movw	r1, #535	; 0x217
    4b7c:	e7f9      	b.n	4b72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21e>
    4b7e:	0000      	.short	0x0000
    4b80:	20000b20 	.word	0x20000b20
    4b84:	b510      	push	{r4, lr}
    4b86:	4c0b      	ldr	r4, [pc, #44]	; (4bb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x260>)
    4b88:	7820      	ldrb	r0, [r4, #0]
    4b8a:	b138      	cbz	r0, 4b9c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x248>
    4b8c:	f000 fa86 	bl	509c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x748>
    4b90:	78a0      	ldrb	r0, [r4, #2]
    4b92:	b150      	cbz	r0, 4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b94:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    4b98:	b128      	cbz	r0, 4ba6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x252>
    4b9a:	e006      	b.n	4baa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x256>
    4b9c:	f240 117b 	movw	r1, #379	; 0x17b
    4ba0:	2021      	movs	r0, #33	; 0x21
    4ba2:	f7fb ff5f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ba6:	f7fe fcef 	bl	3588 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    4baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4bae:	f000 baa1 	b.w	50f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>
    4bb2:	0000      	.short	0x0000
    4bb4:	20000b20 	.word	0x20000b20
    4bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bbc:	4d11      	ldr	r5, [pc, #68]	; (4c04 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b0>)
    4bbe:	4616      	mov	r6, r2
    4bc0:	460f      	mov	r7, r1
    4bc2:	2400      	movs	r4, #0
    4bc4:	6068      	str	r0, [r5, #4]
    4bc6:	f009 ff93 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4bca:	f8df c03c 	ldr.w	ip, [pc, #60]	; 4c08 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b4>
    4bce:	2100      	movs	r1, #0
    4bd0:	f81c 2001 	ldrb.w	r2, [ip, r1]
    4bd4:	4232      	tst	r2, r6
    4bd6:	d007      	beq.n	4be8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x294>
    4bd8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4bdc:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    4be0:	1a1b      	subs	r3, r3, r0
    4be2:	1c64      	adds	r4, r4, #1
    4be4:	b2e4      	uxtb	r4, r4
    4be6:	6093      	str	r3, [r2, #8]
    4be8:	1c49      	adds	r1, r1, #1
    4bea:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4bee:	d0ef      	beq.n	4bd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x27c>
    4bf0:	f016 0f0e 	tst.w	r6, #14
    4bf4:	d004      	beq.n	4c00 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ac>
    4bf6:	f240 7103 	movw	r1, #1795	; 0x703
    4bfa:	2021      	movs	r0, #33	; 0x21
    4bfc:	f7fb ff32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4c04:	20000b20 	.word	0x20000b20
    4c08:	000108de 	.word	0x000108de
    4c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c10:	b086      	sub	sp, #24
    4c12:	4692      	mov	sl, r2
    4c14:	4607      	mov	r7, r0
    4c16:	4689      	mov	r9, r1
    4c18:	f000 fa94 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c1c:	4d22      	ldr	r5, [pc, #136]	; (4ca8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    4c1e:	f04f 0800 	mov.w	r8, #0
    4c22:	686a      	ldr	r2, [r5, #4]
    4c24:	1886      	adds	r6, r0, r2
    4c26:	eb41 0108 	adc.w	r1, r1, r8
    4c2a:	460c      	mov	r4, r1
    4c2c:	460b      	mov	r3, r1
    4c2e:	4632      	mov	r2, r6
    4c30:	4638      	mov	r0, r7
    4c32:	4649      	mov	r1, r9
    4c34:	f009 ff94 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c38:	4607      	mov	r7, r0
    4c3a:	f009 ff88 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4c3e:	4287      	cmp	r7, r0
    4c40:	da13      	bge.n	4c6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x316>
    4c42:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c46:	f000 fa7d 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c4a:	4632      	mov	r2, r6
    4c4c:	4623      	mov	r3, r4
    4c4e:	f009 ff87 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    4c52:	6869      	ldr	r1, [r5, #4]
    4c54:	fbb0 f1f1 	udiv	r1, r0, r1
    4c58:	f8ca 1000 	str.w	r1, [sl]
    4c5c:	6868      	ldr	r0, [r5, #4]
    4c5e:	1980      	adds	r0, r0, r6
    4c60:	eb48 0104 	adc.w	r1, r8, r4
    4c64:	b006      	add	sp, #24
    4c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c6a:	f88d 8000 	strb.w	r8, [sp]
    4c6e:	6b68      	ldr	r0, [r5, #52]	; 0x34
    4c70:	9001      	str	r0, [sp, #4]
    4c72:	f009 ff26 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4c76:	f8ad 0008 	strh.w	r0, [sp, #8]
    4c7a:	2001      	movs	r0, #1
    4c7c:	f88d 000b 	strb.w	r0, [sp, #11]
    4c80:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
    4c84:	f000 fa5e 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4c8c:	f000 f9ec 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4c90:	f88d 000a 	strb.w	r0, [sp, #10]
    4c94:	4668      	mov	r0, sp
    4c96:	6869      	ldr	r1, [r5, #4]
    4c98:	f009 f83c 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    4c9c:	f8ca 0000 	str.w	r0, [sl]
    4ca0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4ca4:	e7de      	b.n	4c64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x310>
    4ca6:	0000      	.short	0x0000
    4ca8:	20000b20 	.word	0x20000b20
    4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cb0:	f006 fa6e 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4cb4:	4c1f      	ldr	r4, [pc, #124]	; (4d34 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e0>)
    4cb6:	4606      	mov	r6, r0
    4cb8:	460d      	mov	r5, r1
    4cba:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    4cbe:	f000 f9d3 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    4cc2:	4607      	mov	r7, r0
    4cc4:	f005 f94c 	bl	9f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    4cc8:	4602      	mov	r2, r0
    4cca:	2865      	cmp	r0, #101	; 0x65
    4ccc:	d323      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4cce:	1c50      	adds	r0, r2, #1
    4cd0:	d024      	beq.n	4d1c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c8>
    4cd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4cd6:	1888      	adds	r0, r1, r2
    4cd8:	4283      	cmp	r3, r0
    4cda:	d800      	bhi.n	4cde <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38a>
    4cdc:	1a5a      	subs	r2, r3, r1
    4cde:	f06f 0039 	mvn.w	r0, #57	; 0x39
    4ce2:	1830      	adds	r0, r6, r0
    4ce4:	f145 31ff 	adc.w	r1, r5, #4294967295
    4ce8:	f000 fa42 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4cec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cee:	4408      	add	r0, r1
    4cf0:	6b21      	ldr	r1, [r4, #48]	; 0x30
    4cf2:	1a45      	subs	r5, r0, r1
    4cf4:	f241 3088 	movw	r0, #5000	; 0x1388
    4cf8:	4285      	cmp	r5, r0
    4cfa:	d900      	bls.n	4cfe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3aa>
    4cfc:	4605      	mov	r5, r0
    4cfe:	f006 fa47 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4d02:	1b80      	subs	r0, r0, r6
    4d04:	f100 009d 	add.w	r0, r0, #157	; 0x9d
    4d08:	4285      	cmp	r5, r0
    4d0a:	d304      	bcc.n	4d16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c2>
    4d0c:	4639      	mov	r1, r7
    4d0e:	4628      	mov	r0, r5
    4d10:	f005 f848 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    4d14:	b120      	cbz	r0, 4d20 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>
    4d16:	2000      	movs	r0, #0
    4d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4d1c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    4d1e:	e7e7      	b.n	4cf0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x39c>
    4d20:	6b20      	ldr	r0, [r4, #48]	; 0x30
    4d22:	4428      	add	r0, r5
    4d24:	6320      	str	r0, [r4, #48]	; 0x30
    4d26:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    4d28:	4428      	add	r0, r5
    4d2a:	63a0      	str	r0, [r4, #56]	; 0x38
    4d2c:	f006 f944 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    4d30:	2001      	movs	r0, #1
    4d32:	e7f1      	b.n	4d18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    4d34:	20000b20 	.word	0x20000b20
    4d38:	b510      	push	{r4, lr}
    4d3a:	2400      	movs	r4, #0
    4d3c:	f009 fed8 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    4d40:	4a06      	ldr	r2, [pc, #24]	; (4d5c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x408>)
    4d42:	2100      	movs	r1, #0
    4d44:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    4d48:	4404      	add	r4, r0
    4d4a:	689b      	ldr	r3, [r3, #8]
    4d4c:	1c49      	adds	r1, r1, #1
    4d4e:	441c      	add	r4, r3
    4d50:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    4d54:	d0f6      	beq.n	4d44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3f0>
    4d56:	4620      	mov	r0, r4
    4d58:	bd10      	pop	{r4, pc}
    4d5a:	0000      	.short	0x0000
    4d5c:	20000b20 	.word	0x20000b20
    4d60:	4901      	ldr	r1, [pc, #4]	; (4d68 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x414>)
    4d62:	e9d1 0110 	ldrd	r0, r1, [r1, #64]	; 0x40
    4d66:	4770      	bx	lr
    4d68:	20000b20 	.word	0x20000b20
    4d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d70:	4606      	mov	r6, r0
    4d72:	481d      	ldr	r0, [pc, #116]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4d74:	4688      	mov	r8, r1
    4d76:	4615      	mov	r5, r2
    4d78:	e9d0 100a 	ldrd	r1, r0, [r0, #40]	; 0x28
    4d7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    4d80:	2701      	movs	r7, #1
    4d82:	4050      	eors	r0, r2
    4d84:	b086      	sub	sp, #24
    4d86:	ea70 0101 	orns	r1, r0, r1
    4d8a:	d021      	beq.n	4dd0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47c>
    4d8c:	2400      	movs	r4, #0
    4d8e:	f88d 4000 	strb.w	r4, [sp]
    4d92:	9501      	str	r5, [sp, #4]
    4d94:	f009 fe95 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    4d98:	f8ad 0008 	strh.w	r0, [sp, #8]
    4d9c:	f88d 700b 	strb.w	r7, [sp, #11]
    4da0:	f009 fed5 	bl	eb4e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x5e>
    4da4:	1982      	adds	r2, r0, r6
    4da6:	eb44 0008 	adc.w	r0, r4, r8
    4daa:	e9cd 2004 	strd	r2, r0, [sp, #16]
    4dae:	2002      	movs	r0, #2
    4db0:	f88d 000a 	strb.w	r0, [sp, #10]
    4db4:	4668      	mov	r0, sp
    4db6:	f005 fc21 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    4dba:	b168      	cbz	r0, 4dd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x484>
    4dbc:	e9dd 1004 	ldrd	r1, r0, [sp, #16]
    4dc0:	194a      	adds	r2, r1, r5
    4dc2:	4909      	ldr	r1, [pc, #36]	; (4de8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x494>)
    4dc4:	4160      	adcs	r0, r4
    4dc6:	e9d1 310a 	ldrd	r3, r1, [r1, #40]	; 0x28
    4dca:	1a9a      	subs	r2, r3, r2
    4dcc:	4181      	sbcs	r1, r0
    4dce:	d408      	bmi.n	4de2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    4dd0:	2001      	movs	r0, #1
    4dd2:	b006      	add	sp, #24
    4dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4dd8:	f240 5135 	movw	r1, #1333	; 0x535
    4ddc:	2021      	movs	r0, #33	; 0x21
    4dde:	f7fb fe41 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4de2:	2000      	movs	r0, #0
    4de4:	e7f5      	b.n	4dd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x47e>
    4de6:	0000      	.short	0x0000
    4de8:	20000b20 	.word	0x20000b20
    4dec:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df0:	b087      	sub	sp, #28
    4df2:	4614      	mov	r4, r2
    4df4:	4606      	mov	r6, r0
    4df6:	f006 f9cb 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    4dfa:	4d99      	ldr	r5, [pc, #612]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4dfc:	4680      	mov	r8, r0
    4dfe:	4689      	mov	r9, r1
    4e00:	68a8      	ldr	r0, [r5, #8]
    4e02:	f04f 0a00 	mov.w	sl, #0
    4e06:	9002      	str	r0, [sp, #8]
    4e08:	f7ff ff96 	bl	4d38 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3e4>
    4e0c:	6869      	ldr	r1, [r5, #4]
    4e0e:	4288      	cmp	r0, r1
    4e10:	d101      	bne.n	4e16 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c2>
    4e12:	2001      	movs	r0, #1
    4e14:	e000      	b.n	4e18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4c4>
    4e16:	2000      	movs	r0, #0
    4e18:	9004      	str	r0, [sp, #16]
    4e1a:	4020      	ands	r0, r4
    4e1c:	9003      	str	r0, [sp, #12]
    4e1e:	9808      	ldr	r0, [sp, #32]
    4e20:	2800      	cmp	r0, #0
    4e22:	d07f      	beq.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4e24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    4e28:	eb18 0b02 	adds.w	fp, r8, r2
    4e2c:	f149 0400 	adc.w	r4, r9, #0
    4e30:	f002 f834 	bl	6e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    4e34:	9000      	str	r0, [sp, #0]
    4e36:	488a      	ldr	r0, [pc, #552]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e38:	7800      	ldrb	r0, [r0, #0]
    4e3a:	4f89      	ldr	r7, [pc, #548]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e3c:	3740      	adds	r7, #64	; 0x40
    4e3e:	2805      	cmp	r0, #5
    4e40:	d135      	bne.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4e42:	4887      	ldr	r0, [pc, #540]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e44:	6a00      	ldr	r0, [r0, #32]
    4e46:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e4a:	f002 f807 	bl	6e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    4e4e:	9900      	ldr	r1, [sp, #0]
    4e50:	4605      	mov	r5, r0
    4e52:	4288      	cmp	r0, r1
    4e54:	d009      	beq.n	4e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x516>
    4e56:	4882      	ldr	r0, [pc, #520]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e58:	4629      	mov	r1, r5
    4e5a:	6a00      	ldr	r0, [r0, #32]
    4e5c:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e60:	f001 ffc0 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4e64:	2000      	movs	r0, #0
    4e66:	61b8      	str	r0, [r7, #24]
    4e68:	e00c      	b.n	4e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x530>
    4e6a:	497d      	ldr	r1, [pc, #500]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e6c:	6a08      	ldr	r0, [r1, #32]
    4e6e:	f500 700a 	add.w	r0, r0, #552	; 0x228
    4e72:	61b8      	str	r0, [r7, #24]
    4e74:	6a08      	ldr	r0, [r1, #32]
    4e76:	6c8a      	ldr	r2, [r1, #72]	; 0x48
    4e78:	f8d0 0230 	ldr.w	r0, [r0, #560]	; 0x230
    4e7c:	4282      	cmp	r2, r0
    4e7e:	d300      	bcc.n	4e82 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x52e>
    4e80:	4610      	mov	r0, r2
    4e82:	6488      	str	r0, [r1, #72]	; 0x48
    4e84:	4876      	ldr	r0, [pc, #472]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4e86:	6a00      	ldr	r0, [r0, #32]
    4e88:	b158      	cbz	r0, 4ea2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54e>
    4e8a:	b16d      	cbz	r5, 4ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x554>
    4e8c:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    4e90:	f8d5 c000 	ldr.w	ip, [r5]
    4e94:	eb1c 0303 	adds.w	r3, ip, r3
    4e98:	eb41 010a 	adc.w	r1, r1, sl
    4e9c:	e9c0 318a 	strd	r3, r1, [r0, #552]	; 0x228
    4ea0:	e005      	b.n	4eae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x55a>
    4ea2:	f240 7185 	movw	r1, #1925	; 0x785
    4ea6:	e01a      	b.n	4ede <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58a>
    4ea8:	2100      	movs	r1, #0
    4eaa:	e9c0 118a 	strd	r1, r1, [r0, #552]	; 0x228
    4eae:	4638      	mov	r0, r7
    4eb0:	9900      	ldr	r1, [sp, #0]
    4eb2:	f001 ff97 	bl	6de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    4eb6:	486a      	ldr	r0, [pc, #424]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eb8:	9a00      	ldr	r2, [sp, #0]
    4eba:	6845      	ldr	r5, [r0, #4]
    4ebc:	b192      	cbz	r2, 4ee4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x590>
    4ebe:	e9d2 1301 	ldrd	r1, r3, [r2, #4]
    4ec2:	6817      	ldr	r7, [r2, #0]
    4ec4:	e9cd b400 	strd	fp, r4, [sp]
    4ec8:	18f8      	adds	r0, r7, r3
    4eca:	eb41 010a 	adc.w	r1, r1, sl
    4ece:	462a      	mov	r2, r5
    4ed0:	f00a f9a7 	bl	f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    4ed4:	4601      	mov	r1, r0
    4ed6:	42a8      	cmp	r0, r5
    4ed8:	d905      	bls.n	4ee6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x592>
    4eda:	f240 31f9 	movw	r1, #1017	; 0x3f9
    4ede:	2021      	movs	r0, #33	; 0x21
    4ee0:	f7fb fdc0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ee4:	2100      	movs	r1, #0
    4ee6:	eb1b 0501 	adds.w	r5, fp, r1
    4eea:	495d      	ldr	r1, [pc, #372]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4eec:	4650      	mov	r0, sl
    4eee:	4144      	adcs	r4, r0
    4ef0:	684a      	ldr	r2, [r1, #4]
    4ef2:	1aab      	subs	r3, r5, r2
    4ef4:	eb64 020a 	sbc.w	r2, r4, sl
    4ef8:	e9c1 3210 	strd	r3, r2, [r1, #64]	; 0x40
    4efc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4efe:	3128      	adds	r1, #40	; 0x28
    4f00:	b152      	cbz	r2, 4f18 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5c4>
    4f02:	f242 7310 	movw	r3, #10000	; 0x2710
    4f06:	435a      	muls	r2, r3
    4f08:	18aa      	adds	r2, r5, r2
    4f0a:	eb44 000a 	adc.w	r0, r4, sl
    4f0e:	e9c1 2000 	strd	r2, r0, [r1]
    4f12:	2001      	movs	r0, #1
    4f14:	e051      	b.n	4fba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x666>
    4f16:	e005      	b.n	4f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    4f18:	f04f 30ff 	mov.w	r0, #4294967295
    4f1c:	0842      	lsrs	r2, r0, #1
    4f1e:	e9c1 0200 	strd	r0, r2, [r1]
    4f22:	e7f6      	b.n	4f12 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5be>
    4f24:	9803      	ldr	r0, [sp, #12]
    4f26:	b1d8      	cbz	r0, 4f60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    4f28:	2001      	movs	r0, #1
    4f2a:	f009 fdec 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4f2e:	4604      	mov	r4, r0
    4f30:	2001      	movs	r0, #1
    4f32:	f003 f8f7 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4f36:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4f3a:	4401      	add	r1, r0
    4f3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f40:	fbb1 f0f0 	udiv	r0, r1, r0
    4f44:	1822      	adds	r2, r4, r0
    4f46:	4640      	mov	r0, r8
    4f48:	4649      	mov	r1, r9
    4f4a:	32f4      	adds	r2, #244	; 0xf4
    4f4c:	f7ff ff0e 	bl	4d6c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x418>
    4f50:	b908      	cbnz	r0, 4f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x602>
    4f52:	2000      	movs	r0, #0
    4f54:	9002      	str	r0, [sp, #8]
    4f56:	4645      	mov	r5, r8
    4f58:	464c      	mov	r4, r9
    4f5a:	f8cd a014 	str.w	sl, [sp, #20]
    4f5e:	e02d      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f60:	b13c      	cbz	r4, 4f72 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x61e>
    4f62:	aa05      	add	r2, sp, #20
    4f64:	4640      	mov	r0, r8
    4f66:	4649      	mov	r1, r9
    4f68:	f7ff fe50 	bl	4c0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2b8>
    4f6c:	4605      	mov	r5, r0
    4f6e:	460c      	mov	r4, r1
    4f70:	e024      	b.n	4fbc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x668>
    4f72:	4640      	mov	r0, r8
    4f74:	4649      	mov	r1, r9
    4f76:	f000 f8e5 	bl	5144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f0>
    4f7a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>
    4f7e:	4602      	mov	r2, r0
    4f80:	4608      	mov	r0, r1
    4f82:	f8db 1008 	ldr.w	r1, [fp, #8]
    4f86:	9102      	str	r1, [sp, #8]
    4f88:	f8db 3004 	ldr.w	r3, [fp, #4]
    4f8c:	4657      	mov	r7, sl
    4f8e:	189d      	adds	r5, r3, r2
    4f90:	eb4a 0400 	adc.w	r4, sl, r0
    4f94:	e9db 0104 	ldrd	r0, r1, [fp, #16]
    4f98:	f000 f8c8 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4f9c:	f8db 1004 	ldr.w	r1, [fp, #4]
    4fa0:	4348      	muls	r0, r1
    4fa2:	9000      	str	r0, [sp, #0]
    4fa4:	f7ff fedc 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    4fa8:	9a00      	ldr	r2, [sp, #0]
    4faa:	1880      	adds	r0, r0, r2
    4fac:	4179      	adcs	r1, r7
    4fae:	e9cb 0110 	strd	r0, r1, [fp, #64]	; 0x40
    4fb2:	4621      	mov	r1, r4
    4fb4:	4628      	mov	r0, r5
    4fb6:	f000 f8b9 	bl	512c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d8>
    4fba:	9005      	str	r0, [sp, #20]
    4fbc:	2001      	movs	r0, #1
    4fbe:	f009 fda2 	bl	eb06 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x16>
    4fc2:	4607      	mov	r7, r0
    4fc4:	2001      	movs	r0, #1
    4fc6:	f003 f8ad 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    4fca:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    4fce:	4401      	add	r1, r0
    4fd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4fd4:	fbb1 f0f0 	udiv	r0, r1, r0
    4fd8:	4407      	add	r7, r0
    4fda:	4628      	mov	r0, r5
    4fdc:	4621      	mov	r1, r4
    4fde:	37f4      	adds	r7, #244	; 0xf4
    4fe0:	9a02      	ldr	r2, [sp, #8]
    4fe2:	f000 f8c5 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    4fe6:	491e      	ldr	r1, [pc, #120]	; (5060 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x70c>)
    4fe8:	eb01 028a 	add.w	r2, r1, sl, lsl #2
    4fec:	6892      	ldr	r2, [r2, #8]
    4fee:	4282      	cmp	r2, r0
    4ff0:	d800      	bhi.n	4ff4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6a0>
    4ff2:	4610      	mov	r0, r2
    4ff4:	6348      	str	r0, [r1, #52]	; 0x34
    4ff6:	9a08      	ldr	r2, [sp, #32]
    4ff8:	b10a      	cbz	r2, 4ffe <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6aa>
    4ffa:	e9c1 5404 	strd	r5, r4, [r1, #16]
    4ffe:	e9c1 5406 	strd	r5, r4, [r1, #24]
    5002:	468b      	mov	fp, r1
    5004:	9904      	ldr	r1, [sp, #16]
    5006:	b111      	cbz	r1, 500e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6ba>
    5008:	f8cb 7030 	str.w	r7, [fp, #48]	; 0x30
    500c:	e001      	b.n	5012 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6be>
    500e:	f8cb 0030 	str.w	r0, [fp, #48]	; 0x30
    5012:	2001      	movs	r0, #1
    5014:	72f0      	strb	r0, [r6, #11]
    5016:	f009 fd54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    501a:	8130      	strh	r0, [r6, #8]
    501c:	4628      	mov	r0, r5
    501e:	4621      	mov	r1, r4
    5020:	f000 f822 	bl	5068 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x714>
    5024:	72b0      	strb	r0, [r6, #10]
    5026:	f8db 0030 	ldr.w	r0, [fp, #48]	; 0x30
    502a:	6070      	str	r0, [r6, #4]
    502c:	9803      	ldr	r0, [sp, #12]
    502e:	b148      	cbz	r0, 5044 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f0>
    5030:	2001      	movs	r0, #1
    5032:	7030      	strb	r0, [r6, #0]
    5034:	4a0b      	ldr	r2, [pc, #44]	; (5064 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>)
    5036:	4640      	mov	r0, r8
    5038:	4649      	mov	r1, r9
    503a:	f000 f899 	bl	5170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81c>
    503e:	1bc0      	subs	r0, r0, r7
    5040:	6130      	str	r0, [r6, #16]
    5042:	e003      	b.n	504c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6f8>
    5044:	f886 a000 	strb.w	sl, [r6]
    5048:	e9c6 5404 	strd	r5, r4, [r6, #16]
    504c:	f8db 0034 	ldr.w	r0, [fp, #52]	; 0x34
    5050:	42b8      	cmp	r0, r7
    5052:	d303      	bcc.n	505c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x708>
    5054:	2001      	movs	r0, #1
    5056:	b00b      	add	sp, #44	; 0x2c
    5058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    505c:	2000      	movs	r0, #0
    505e:	e7fa      	b.n	5056 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x702>
    5060:	20000b20 	.word	0x20000b20
    5064:	0f424000 	.word	0x0f424000
    5068:	b570      	push	{r4, r5, r6, lr}
    506a:	4604      	mov	r4, r0
    506c:	480a      	ldr	r0, [pc, #40]	; (5098 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x744>)
    506e:	460d      	mov	r5, r1
    5070:	7801      	ldrb	r1, [r0, #0]
    5072:	2904      	cmp	r1, #4
    5074:	d10d      	bne.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    5076:	6840      	ldr	r0, [r0, #4]
    5078:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    507c:	0046      	lsls	r6, r0, #1
    507e:	f7ff fe6f 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5082:	4622      	mov	r2, r4
    5084:	462b      	mov	r3, r5
    5086:	f009 fd6b 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    508a:	42b0      	cmp	r0, r6
    508c:	d201      	bcs.n	5092 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x73e>
    508e:	2002      	movs	r0, #2
    5090:	bd70      	pop	{r4, r5, r6, pc}
    5092:	2001      	movs	r0, #1
    5094:	bd70      	pop	{r4, r5, r6, pc}
    5096:	0000      	.short	0x0000
    5098:	20000b20 	.word	0x20000b20
    509c:	b570      	push	{r4, r5, r6, lr}
    509e:	4d14      	ldr	r5, [pc, #80]	; (50f0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    50a0:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    50a4:	f105 0440 	add.w	r4, r5, #64	; 0x40
    50a8:	2800      	cmp	r0, #0
    50aa:	7828      	ldrb	r0, [r5, #0]
    50ac:	d00f      	beq.n	50ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x77a>
    50ae:	2805      	cmp	r0, #5
    50b0:	d004      	beq.n	50bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x768>
    50b2:	f240 2157 	movw	r1, #599	; 0x257
    50b6:	2021      	movs	r0, #33	; 0x21
    50b8:	f7fb fcd4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50bc:	4620      	mov	r0, r4
    50be:	f009 fd1d 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50c2:	b178      	cbz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50c4:	4620      	mov	r0, r4
    50c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ca:	f001 be69 	b.w	6da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    50ce:	2805      	cmp	r0, #5
    50d0:	d108      	bne.n	50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50d2:	4620      	mov	r0, r4
    50d4:	f009 fd12 	bl	eafc <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0xc>
    50d8:	b920      	cbnz	r0, 50e4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x790>
    50da:	6a28      	ldr	r0, [r5, #32]
    50dc:	f500 700a 	add.w	r0, r0, #552	; 0x228
    50e0:	f001 fea0 	bl	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50e4:	4620      	mov	r0, r4
    50e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    50ea:	f001 be9b 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    50ee:	0000      	.short	0x0000
    50f0:	20000b20 	.word	0x20000b20
    50f4:	b510      	push	{r4, lr}
    50f6:	f7fe f8d1 	bl	329c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    50fa:	490b      	ldr	r1, [pc, #44]	; (5128 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d4>)
    50fc:	2000      	movs	r0, #0
    50fe:	7088      	strb	r0, [r1, #2]
    5100:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
    5104:	6208      	str	r0, [r1, #32]
    5106:	7008      	strb	r0, [r1, #0]
    5108:	f7fe f856 	bl	31b8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    510c:	4604      	mov	r4, r0
    510e:	7800      	ldrb	r0, [r0, #0]
    5110:	f005 fcd6 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    5114:	b110      	cbz	r0, 511c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7c8>
    5116:	2020      	movs	r0, #32
    5118:	7020      	strb	r0, [r4, #0]
    511a:	bd10      	pop	{r4, pc}
    511c:	f240 3192 	movw	r1, #914	; 0x392
    5120:	2021      	movs	r0, #33	; 0x21
    5122:	f7fb fc9f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5126:	0000      	.short	0x0000
    5128:	20000b20 	.word	0x20000b20
    512c:	b510      	push	{r4, lr}
    512e:	4604      	mov	r4, r0
    5130:	f7ff fe16 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5134:	4902      	ldr	r1, [pc, #8]	; (5140 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7ec>)
    5136:	1a20      	subs	r0, r4, r0
    5138:	6849      	ldr	r1, [r1, #4]
    513a:	fbb0 f0f1 	udiv	r0, r0, r1
    513e:	bd10      	pop	{r4, pc}
    5140:	20000b20 	.word	0x20000b20
    5144:	b570      	push	{r4, r5, r6, lr}
    5146:	4604      	mov	r4, r0
    5148:	460d      	mov	r5, r1
    514a:	f7ff fe09 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    514e:	4622      	mov	r2, r4
    5150:	462b      	mov	r3, r5
    5152:	f009 fd05 	bl	eb60 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x70>
    5156:	4905      	ldr	r1, [pc, #20]	; (516c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x818>)
    5158:	684c      	ldr	r4, [r1, #4]
    515a:	fbb0 f0f4 	udiv	r0, r0, r4
    515e:	4344      	muls	r4, r0
    5160:	f7ff fdfe 	bl	4d60 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x40c>
    5164:	1900      	adds	r0, r0, r4
    5166:	f141 0100 	adc.w	r1, r1, #0
    516a:	bd70      	pop	{r4, r5, r6, pc}
    516c:	20000b20 	.word	0x20000b20
    5170:	4b0a      	ldr	r3, [pc, #40]	; (519c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x848>)
    5172:	b510      	push	{r4, lr}
    5174:	e9d3 430a 	ldrd	r4, r3, [r3, #40]	; 0x28
    5178:	1a20      	subs	r0, r4, r0
    517a:	eb63 0301 	sbc.w	r3, r3, r1
    517e:	2400      	movs	r4, #0
    5180:	4621      	mov	r1, r4
    5182:	1a24      	subs	r4, r4, r0
    5184:	4199      	sbcs	r1, r3
    5186:	da06      	bge.n	5196 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x842>
    5188:	2100      	movs	r1, #0
    518a:	1a14      	subs	r4, r2, r0
    518c:	eb71 0403 	sbcs.w	r4, r1, r3
    5190:	da00      	bge.n	5194 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x840>
    5192:	4610      	mov	r0, r2
    5194:	bd10      	pop	{r4, pc}
    5196:	2000      	movs	r0, #0
    5198:	bd10      	pop	{r4, pc}
    519a:	0000      	.short	0x0000
    519c:	20000b20 	.word	0x20000b20

000051a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    51a0:	b570      	push	{r4, r5, r6, lr}
    51a2:	f002 fecf 	bl	7f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    51a6:	4c0d      	ldr	r4, [pc, #52]	; (51dc <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3c>)
    51a8:	4606      	mov	r6, r0
    51aa:	4602      	mov	r2, r0
    51ac:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    51b0:	4628      	mov	r0, r5
    51b2:	f008 fc90 	bl	dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    51b6:	6060      	str	r0, [r4, #4]
    51b8:	42a8      	cmp	r0, r5
    51ba:	d005      	beq.n	51c8 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x28>
    51bc:	68e1      	ldr	r1, [r4, #12]
    51be:	1b40      	subs	r0, r0, r5
    51c0:	4408      	add	r0, r1
    51c2:	60e0      	str	r0, [r4, #12]
    51c4:	f005 fef8 	bl	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    51c8:	6860      	ldr	r0, [r4, #4]
    51ca:	42b0      	cmp	r0, r6
    51cc:	d301      	bcc.n	51d2 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x32>
    51ce:	7820      	ldrb	r0, [r4, #0]
    51d0:	b108      	cbz	r0, 51d6 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    51d2:	2000      	movs	r0, #0
    51d4:	bd70      	pop	{r4, r5, r6, pc}
    51d6:	2001      	movs	r0, #1
    51d8:	bd70      	pop	{r4, r5, r6, pc}
    51da:	0000      	.short	0x0000
    51dc:	20000e00 	.word	0x20000e00

000051e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    51e0:	4903      	ldr	r1, [pc, #12]	; (51f0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x10>)
    51e2:	2000      	movs	r0, #0
    51e4:	6008      	str	r0, [r1, #0]
    51e6:	6048      	str	r0, [r1, #4]
    51e8:	6088      	str	r0, [r1, #8]
    51ea:	60c8      	str	r0, [r1, #12]
    51ec:	f000 b856 	b.w	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    51f0:	20000e00 	.word	0x20000e00

000051f4 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I>:
    51f4:	b510      	push	{r4, lr}
    51f6:	b086      	sub	sp, #24
    51f8:	0004      	movs	r4, r0
    51fa:	d005      	beq.n	5208 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x14>
    51fc:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    5200:	b128      	cbz	r0, 520e <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x1a>
    5202:	f240 1177 	movw	r1, #375	; 0x177
    5206:	e025      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5208:	f44f 71bb 	mov.w	r1, #374	; 0x176
    520c:	e022      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    520e:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    5212:	2820      	cmp	r0, #32
    5214:	d002      	beq.n	521c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x28>
    5216:	f240 1179 	movw	r1, #377	; 0x179
    521a:	e01b      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    521c:	4621      	mov	r1, r4
    521e:	480f      	ldr	r0, [pc, #60]	; (525c <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x68>)
    5220:	f005 fd88 	bl	ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    5224:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    5228:	2820      	cmp	r0, #32
    522a:	d00e      	beq.n	524a <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x56>
    522c:	2300      	movs	r3, #0
    522e:	2201      	movs	r2, #1
    5230:	4621      	mov	r1, r4
    5232:	4668      	mov	r0, sp
    5234:	f009 fce8 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    5238:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    523c:	4669      	mov	r1, sp
    523e:	f009 fdca 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    5242:	b128      	cbz	r0, 5250 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x5c>
    5244:	b006      	add	sp, #24
    5246:	2000      	movs	r0, #0
    5248:	bd10      	pop	{r4, pc}
    524a:	f44f 71be 	mov.w	r1, #380	; 0x17c
    524e:	e001      	b.n	5254 <sym_5ZBAGF5IPZJLTC3H62ZY4U4SW6MV7I4QJW2DD3I+0x60>
    5250:	f240 117f 	movw	r1, #383	; 0x17f
    5254:	2035      	movs	r0, #53	; 0x35
    5256:	f7fb fc05 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    525a:	0000      	.short	0x0000
    525c:	0000535d 	.word	0x0000535d

00005260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    5260:	4901      	ldr	r1, [pc, #4]	; (5268 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    5262:	7048      	strb	r0, [r1, #1]
    5264:	4770      	bx	lr
    5266:	0000      	.short	0x0000
    5268:	20000e00 	.word	0x20000e00

0000526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    526c:	b570      	push	{r4, r5, r6, lr}
    526e:	4605      	mov	r5, r0
    5270:	4809      	ldr	r0, [pc, #36]	; (5298 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x2c>)
    5272:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5276:	fbb0 f4f1 	udiv	r4, r0, r1
    527a:	f009 fc39 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    527e:	1901      	adds	r1, r0, r4
    5280:	4628      	mov	r0, r5
    5282:	f501 719d 	add.w	r1, r1, #314	; 0x13a
    5286:	f009 f812 	bl	e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    528a:	f640 0148 	movw	r1, #2120	; 0x848
    528e:	4288      	cmp	r0, r1
    5290:	d300      	bcc.n	5294 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x28>
    5292:	4608      	mov	r0, r1
    5294:	b280      	uxth	r0, r0
    5296:	bd70      	pop	{r4, r5, r6, pc}
    5298:	000122f9 	.word	0x000122f9
    529c:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    52a0:	4d15      	ldr	r5, [pc, #84]	; (52f8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x8c>)
    52a2:	2001      	movs	r0, #1
    52a4:	7028      	strb	r0, [r5, #0]
    52a6:	2400      	movs	r4, #0
    52a8:	f64f 76ff 	movw	r6, #65535	; 0xffff
    52ac:	e00b      	b.n	52c6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x5a>
    52ae:	2100      	movs	r1, #0
    52b0:	f008 fa62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    52b4:	0007      	movs	r7, r0
    52b6:	d009      	beq.n	52cc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x60>
    52b8:	f897 0249 	ldrb.w	r0, [r7, #585]	; 0x249
    52bc:	f005 fc22 	bl	ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    52c0:	4638      	mov	r0, r7
    52c2:	f009 fd59 	bl	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    52c6:	9400      	str	r4, [sp, #0]
    52c8:	9401      	str	r4, [sp, #4]
    52ca:	e00d      	b.n	52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52cc:	f240 1199 	movw	r1, #409	; 0x199
    52d0:	2035      	movs	r0, #53	; 0x35
    52d2:	f7fb fbc7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52d6:	9800      	ldr	r0, [sp, #0]
    52d8:	b130      	cbz	r0, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52da:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
    52de:	b119      	cbz	r1, 52e8 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x7c>
    52e0:	8800      	ldrh	r0, [r0, #0]
    52e2:	42b0      	cmp	r0, r6
    52e4:	d1e3      	bne.n	52ae <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x42>
    52e6:	e004      	b.n	52f2 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x86>
    52e8:	4668      	mov	r0, sp
    52ea:	f7fb fdd9 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    52ee:	2800      	cmp	r0, #0
    52f0:	d0f1      	beq.n	52d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x6a>
    52f2:	702c      	strb	r4, [r5, #0]
    52f4:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    52f8:	20000e00 	.word	0x20000e00
    52fc:	b510      	push	{r4, lr}
    52fe:	4604      	mov	r4, r0
    5300:	2901      	cmp	r1, #1
    5302:	d102      	bne.n	530a <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x9e>
    5304:	480a      	ldr	r0, [pc, #40]	; (5330 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc4>)
    5306:	7800      	ldrb	r0, [r0, #0]
    5308:	b140      	cbz	r0, 531c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xb0>
    530a:	2004      	movs	r0, #4
    530c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    5310:	f002 fe1e 	bl	7f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    5314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5318:	f005 bd34 	b.w	ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    531c:	2200      	movs	r2, #0
    531e:	2101      	movs	r1, #1
    5320:	4620      	mov	r0, r4
    5322:	f009 fd41 	bl	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    5326:	f834 0f9c 	ldrh.w	r0, [r4, #156]!
    532a:	1c40      	adds	r0, r0, #1
    532c:	8020      	strh	r0, [r4, #0]
    532e:	e7ef      	b.n	5310 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xa4>
    5330:	20000e00 	.word	0x20000e00
    5334:	b510      	push	{r4, lr}
    5336:	4604      	mov	r4, r0
    5338:	4608      	mov	r0, r1
    533a:	f002 fef3 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    533e:	4906      	ldr	r1, [pc, #24]	; (5358 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xec>)
    5340:	f200 709d 	addw	r0, r0, #1949	; 0x79d
    5344:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
    5348:	4408      	add	r0, r1
    534a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    534e:	fbb0 f0f1 	udiv	r0, r0, r1
    5352:	f500 709d 	add.w	r0, r0, #314	; 0x13a
    5356:	bd10      	pop	{r4, pc}
    5358:	0000edda 	.word	0x0000edda
    535c:	b570      	push	{r4, r5, r6, lr}
    535e:	0004      	movs	r4, r0
    5360:	d008      	beq.n	5374 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x108>
    5362:	2909      	cmp	r1, #9
    5364:	d25f      	bcs.n	5426 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1ba>
    5366:	e8df f001 	tbb	[pc, r1]
    536a:	3807      	.short	0x3807
    536c:	5e3c4040 	.word	0x5e3c4040
    5370:	00594e47 	.word	0x00594e47
    5374:	21b7      	movs	r1, #183	; 0xb7
    5376:	e053      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5378:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    537c:	b358      	cbz	r0, 53d6 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x16a>
    537e:	4620      	mov	r0, r4
    5380:	f000 f928 	bl	55d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    5384:	f009 fbb4 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    5388:	f200 103b 	addw	r0, r0, #315	; 0x13b
    538c:	b285      	uxth	r5, r0
    538e:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    5392:	2128      	movs	r1, #40	; 0x28
    5394:	f009 fc24 	bl	ebe0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    5398:	182e      	adds	r6, r5, r0
    539a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    539c:	6920      	ldr	r0, [r4, #16]
    539e:	4288      	cmp	r0, r1
    53a0:	d200      	bcs.n	53a4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x138>
    53a2:	4601      	mov	r1, r0
    53a4:	4632      	mov	r2, r6
    53a6:	4620      	mov	r0, r4
    53a8:	f008 fef1 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53ac:	4d1f      	ldr	r5, [pc, #124]	; (542c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1c0>)
    53ae:	6068      	str	r0, [r5, #4]
    53b0:	7869      	ldrb	r1, [r5, #1]
    53b2:	b121      	cbz	r1, 53be <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x152>
    53b4:	4632      	mov	r2, r6
    53b6:	4620      	mov	r0, r4
    53b8:	6921      	ldr	r1, [r4, #16]
    53ba:	f008 fee8 	bl	e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    53be:	60a8      	str	r0, [r5, #8]
    53c0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    53c4:	f008 ff44 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    53c8:	f5a0 7095 	sub.w	r0, r0, #298	; 0x12a
    53cc:	60e8      	str	r0, [r5, #12]
    53ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53d2:	f005 bdf1 	b.w	afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    53d6:	21bf      	movs	r1, #191	; 0xbf
    53d8:	e022      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    53da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53de:	f009 bd0d 	b.w	edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    53e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53e6:	f002 bf87 	b.w	82f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    53ea:	4620      	mov	r0, r4
    53ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53f0:	2201      	movs	r2, #1
    53f2:	2100      	movs	r1, #0
    53f4:	f009 bcd8 	b.w	eda8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1ce>
    53f8:	2001      	movs	r0, #1
    53fa:	f004 fcc3 	bl	9d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    53fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5402:	f008 bad7 	b.w	d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    5406:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    540a:	2804      	cmp	r0, #4
    540c:	d001      	beq.n	5412 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1a6>
    540e:	21fe      	movs	r1, #254	; 0xfe
    5410:	e006      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    5412:	4620      	mov	r0, r4
    5414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5418:	f009 bcae 	b.w	ed78 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x19e>
    541c:	f44f 7183 	mov.w	r1, #262	; 0x106
    5420:	2035      	movs	r0, #53	; 0x35
    5422:	f7fb fb1f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5426:	f44f 7185 	mov.w	r1, #266	; 0x10a
    542a:	e7f9      	b.n	5420 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x1b4>
    542c:	20000e00 	.word	0x20000e00

00005430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    5430:	4806      	ldr	r0, [pc, #24]	; (544c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    5432:	4905      	ldr	r1, [pc, #20]	; (5448 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    5434:	6501      	str	r1, [r0, #80]	; 0x50
    5436:	4906      	ldr	r1, [pc, #24]	; (5450 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    5438:	6541      	str	r1, [r0, #84]	; 0x54
    543a:	4807      	ldr	r0, [pc, #28]	; (5458 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    543c:	4905      	ldr	r1, [pc, #20]	; (5454 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    543e:	6501      	str	r1, [r0, #80]	; 0x50
    5440:	4906      	ldr	r1, [pc, #24]	; (545c <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    5442:	6541      	str	r1, [r0, #84]	; 0x54
    5444:	4770      	bx	lr
    5446:	0000      	.short	0x0000
    5448:	000065f9 	.word	0x000065f9
    544c:	200000f8 	.word	0x200000f8
    5450:	000066d1 	.word	0x000066d1
    5454:	0000efcf 	.word	0x0000efcf
    5458:	200001a4 	.word	0x200001a4
    545c:	0000eff9 	.word	0x0000eff9

00005460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    5460:	b570      	push	{r4, r5, r6, lr}
    5462:	4605      	mov	r5, r0
    5464:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    5468:	f895 10a9 	ldrb.w	r1, [r5, #169]	; 0xa9
    546c:	b1c9      	cbz	r1, 54a2 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    546e:	f8b5 10d8 	ldrh.w	r1, [r5, #216]	; 0xd8
    5472:	1a0c      	subs	r4, r1, r0
    5474:	f1b4 0404 	subs.w	r4, r4, #4
    5478:	f895 00d4 	ldrb.w	r0, [r5, #212]	; 0xd4
    547c:	b140      	cbz	r0, 5490 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    547e:	f895 20a5 	ldrb.w	r2, [r5, #165]	; 0xa5
    5482:	2300      	movs	r3, #0
    5484:	2109      	movs	r1, #9
    5486:	f105 0088 	add.w	r0, r5, #136	; 0x88
    548a:	f008 fb37 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    548e:	b160      	cbz	r0, 54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    5490:	4628      	mov	r0, r5
    5492:	f009 feb7 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    5496:	b138      	cbz	r0, 54a8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    5498:	e9d5 1032 	ldrd	r1, r0, [r5, #200]	; 0xc8
    549c:	1a40      	subs	r0, r0, r1
    549e:	1f00      	subs	r0, r0, #4
    54a0:	e003      	b.n	54aa <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    54a2:	f1c0 0402 	rsb	r4, r0, #2
    54a6:	e7e7      	b.n	5478 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    54a8:	4620      	mov	r0, r4
    54aa:	42a0      	cmp	r0, r4
    54ac:	da00      	bge.n	54b0 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    54ae:	4604      	mov	r4, r0
    54b0:	2c00      	cmp	r4, #0
    54b2:	dc01      	bgt.n	54b8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    54b4:	2000      	movs	r0, #0
    54b6:	bd70      	pop	{r4, r5, r6, pc}
    54b8:	b2a0      	uxth	r0, r4
    54ba:	bd70      	pop	{r4, r5, r6, pc}

000054bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    54bc:	481d      	ldr	r0, [pc, #116]	; (5534 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    54be:	491c      	ldr	r1, [pc, #112]	; (5530 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    54c0:	6081      	str	r1, [r0, #8]
    54c2:	491d      	ldr	r1, [pc, #116]	; (5538 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    54c4:	61c1      	str	r1, [r0, #28]
    54c6:	491d      	ldr	r1, [pc, #116]	; (553c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    54c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    54ca:	491d      	ldr	r1, [pc, #116]	; (5540 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    54cc:	6101      	str	r1, [r0, #16]
    54ce:	491d      	ldr	r1, [pc, #116]	; (5544 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    54d0:	6141      	str	r1, [r0, #20]
    54d2:	491d      	ldr	r1, [pc, #116]	; (5548 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    54d4:	6441      	str	r1, [r0, #68]	; 0x44
    54d6:	491d      	ldr	r1, [pc, #116]	; (554c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    54d8:	6181      	str	r1, [r0, #24]
    54da:	491d      	ldr	r1, [pc, #116]	; (5550 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    54dc:	6301      	str	r1, [r0, #48]	; 0x30
    54de:	491d      	ldr	r1, [pc, #116]	; (5554 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    54e0:	6241      	str	r1, [r0, #36]	; 0x24
    54e2:	491d      	ldr	r1, [pc, #116]	; (5558 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    54e4:	64c1      	str	r1, [r0, #76]	; 0x4c
    54e6:	491d      	ldr	r1, [pc, #116]	; (555c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    54e8:	6481      	str	r1, [r0, #72]	; 0x48
    54ea:	491d      	ldr	r1, [pc, #116]	; (5560 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    54ec:	6341      	str	r1, [r0, #52]	; 0x34
    54ee:	491d      	ldr	r1, [pc, #116]	; (5564 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    54f0:	6381      	str	r1, [r0, #56]	; 0x38
    54f2:	481e      	ldr	r0, [pc, #120]	; (556c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    54f4:	491c      	ldr	r1, [pc, #112]	; (5568 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    54f6:	6081      	str	r1, [r0, #8]
    54f8:	491d      	ldr	r1, [pc, #116]	; (5570 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    54fa:	61c1      	str	r1, [r0, #28]
    54fc:	491d      	ldr	r1, [pc, #116]	; (5574 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    54fe:	6201      	str	r1, [r0, #32]
    5500:	491d      	ldr	r1, [pc, #116]	; (5578 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    5502:	6041      	str	r1, [r0, #4]
    5504:	491d      	ldr	r1, [pc, #116]	; (557c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    5506:	6001      	str	r1, [r0, #0]
    5508:	491d      	ldr	r1, [pc, #116]	; (5580 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    550a:	6281      	str	r1, [r0, #40]	; 0x28
    550c:	491d      	ldr	r1, [pc, #116]	; (5584 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    550e:	62c1      	str	r1, [r0, #44]	; 0x2c
    5510:	491d      	ldr	r1, [pc, #116]	; (5588 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    5512:	60c1      	str	r1, [r0, #12]
    5514:	491d      	ldr	r1, [pc, #116]	; (558c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    5516:	6181      	str	r1, [r0, #24]
    5518:	491d      	ldr	r1, [pc, #116]	; (5590 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    551a:	6301      	str	r1, [r0, #48]	; 0x30
    551c:	491d      	ldr	r1, [pc, #116]	; (5594 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd8>)
    551e:	6481      	str	r1, [r0, #72]	; 0x48
    5520:	491d      	ldr	r1, [pc, #116]	; (5598 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xdc>)
    5522:	64c1      	str	r1, [r0, #76]	; 0x4c
    5524:	491d      	ldr	r1, [pc, #116]	; (559c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe0>)
    5526:	6441      	str	r1, [r0, #68]	; 0x44
    5528:	491d      	ldr	r1, [pc, #116]	; (55a0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xe4>)
    552a:	6241      	str	r1, [r0, #36]	; 0x24
    552c:	4770      	bx	lr
    552e:	0000      	.short	0x0000
    5530:	00006a01 	.word	0x00006a01
    5534:	200000f8 	.word	0x200000f8
    5538:	00006a45 	.word	0x00006a45
    553c:	0000eedd 	.word	0x0000eedd
    5540:	00006539 	.word	0x00006539
    5544:	0000eefd 	.word	0x0000eefd
    5548:	00006905 	.word	0x00006905
    554c:	00006985 	.word	0x00006985
    5550:	00006a8d 	.word	0x00006a8d
    5554:	00006575 	.word	0x00006575
    5558:	0000eeaf 	.word	0x0000eeaf
    555c:	0000ee79 	.word	0x0000ee79
    5560:	00006939 	.word	0x00006939
    5564:	00006751 	.word	0x00006751
    5568:	0000f197 	.word	0x0000f197
    556c:	200001a4 	.word	0x200001a4
    5570:	0000f1c7 	.word	0x0000f1c7
    5574:	0000efcb 	.word	0x0000efcb
    5578:	0000ef3d 	.word	0x0000ef3d
    557c:	0000ef67 	.word	0x0000ef67
    5580:	0000f05b 	.word	0x0000f05b
    5584:	0000f08d 	.word	0x0000f08d
    5588:	0000ef91 	.word	0x0000ef91
    558c:	0000f179 	.word	0x0000f179
    5590:	0000f201 	.word	0x0000f201
    5594:	0000f027 	.word	0x0000f027
    5598:	0000f051 	.word	0x0000f051
    559c:	0000f157 	.word	0x0000f157
    55a0:	0000f023 	.word	0x0000f023

000055a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    55a4:	4806      	ldr	r0, [pc, #24]	; (55c0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    55a6:	4905      	ldr	r1, [pc, #20]	; (55bc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    55a8:	6581      	str	r1, [r0, #88]	; 0x58
    55aa:	4906      	ldr	r1, [pc, #24]	; (55c4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    55ac:	65c1      	str	r1, [r0, #92]	; 0x5c
    55ae:	4807      	ldr	r0, [pc, #28]	; (55cc <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    55b0:	4905      	ldr	r1, [pc, #20]	; (55c8 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    55b2:	6581      	str	r1, [r0, #88]	; 0x58
    55b4:	4906      	ldr	r1, [pc, #24]	; (55d0 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    55b6:	6601      	str	r1, [r0, #96]	; 0x60
    55b8:	4770      	bx	lr
    55ba:	0000      	.short	0x0000
    55bc:	0000675d 	.word	0x0000675d
    55c0:	200000f8 	.word	0x200000f8
    55c4:	00006895 	.word	0x00006895
    55c8:	0000f0b3 	.word	0x0000f0b3
    55cc:	200001a4 	.word	0x200001a4
    55d0:	0000f0dd 	.word	0x0000f0dd

000055d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    55d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55d6:	4d39      	ldr	r5, [pc, #228]	; (56bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    55d8:	2600      	movs	r6, #0
    55da:	f1a5 070c 	sub.w	r7, r5, #12
    55de:	702e      	strb	r6, [r5, #0]
    55e0:	6068      	str	r0, [r5, #4]
    55e2:	807e      	strh	r6, [r7, #2]
    55e4:	707e      	strb	r6, [r7, #1]
    55e6:	4604      	mov	r4, r0
    55e8:	703e      	strb	r6, [r7, #0]
    55ea:	8800      	ldrh	r0, [r0, #0]
    55ec:	f7fb fff6 	bl	15dc <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    55f0:	6868      	ldr	r0, [r5, #4]
    55f2:	8800      	ldrh	r0, [r0, #0]
    55f4:	f7fb ff9a 	bl	152c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    55f8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    55fc:	1c40      	adds	r0, r0, #1
    55fe:	b282      	uxth	r2, r0
    5600:	6868      	ldr	r0, [r5, #4]
    5602:	f100 0388 	add.w	r3, r0, #136	; 0x88
    5606:	4601      	mov	r1, r0
    5608:	4618      	mov	r0, r3
    560a:	f008 fc26 	bl	de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    560e:	b120      	cbz	r0, 561a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x46>
    5610:	f240 11c1 	movw	r1, #449	; 0x1c1
    5614:	2036      	movs	r0, #54	; 0x36
    5616:	f7fb fa25 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    561a:	f8a4 624a 	strh.w	r6, [r4, #586]	; 0x24a
    561e:	f894 00a6 	ldrb.w	r0, [r4, #166]	; 0xa6
    5622:	2825      	cmp	r0, #37	; 0x25
    5624:	d10a      	bne.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5626:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    562a:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    562e:	1a40      	subs	r0, r0, r1
    5630:	b200      	sxth	r0, r0
    5632:	2800      	cmp	r0, #0
    5634:	db02      	blt.n	563c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x68>
    5636:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
    563a:	e011      	b.n	5660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c>
    563c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    5640:	2825      	cmp	r0, #37	; 0x25
    5642:	d003      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5644:	2826      	cmp	r0, #38	; 0x26
    5646:	d001      	beq.n	564c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x78>
    5648:	2827      	cmp	r0, #39	; 0x27
    564a:	d10c      	bne.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    564c:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5650:	f8b4 1260 	ldrh.w	r1, [r4, #608]	; 0x260
    5654:	1a40      	subs	r0, r0, r1
    5656:	b200      	sxth	r0, r0
    5658:	2800      	cmp	r0, #0
    565a:	db04      	blt.n	5666 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x92>
    565c:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
    5660:	f000 febe 	bl	63e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd14>
    5664:	b318      	cbz	r0, 56ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    5666:	f000 fd43 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    566a:	2800      	cmp	r0, #0
    566c:	d125      	bne.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    566e:	6868      	ldr	r0, [r5, #4]
    5670:	3088      	adds	r0, #136	; 0x88
    5672:	f009 fbd1 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5676:	b120      	cbz	r0, 5682 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae>
    5678:	6868      	ldr	r0, [r5, #4]
    567a:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    567e:	f000 fbdd 	bl	5e3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x770>
    5682:	480f      	ldr	r0, [pc, #60]	; (56c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>)
    5684:	9000      	str	r0, [sp, #0]
    5686:	e9d7 0103 	ldrd	r0, r1, [r7, #12]
    568a:	4b0e      	ldr	r3, [pc, #56]	; (56c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf0>)
    568c:	4a0e      	ldr	r2, [pc, #56]	; (56c8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf4>)
    568e:	f7fc f827 	bl	16e0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    5692:	6868      	ldr	r0, [r5, #4]
    5694:	2300      	movs	r3, #0
    5696:	2105      	movs	r1, #5
    5698:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    569c:	3088      	adds	r0, #136	; 0x88
    569e:	f008 fa2d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    56a2:	2800      	cmp	r0, #0
    56a4:	d009      	beq.n	56ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe6>
    56a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56aa:	f7fc b813 	b.w	16d4 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    56ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    56b2:	2100      	movs	r1, #0
    56b4:	4608      	mov	r0, r1
    56b6:	f000 bcc3 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    56ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56bc:	200000f0 	.word	0x200000f0
    56c0:	00006041 	.word	0x00006041
    56c4:	000058a9 	.word	0x000058a9
    56c8:	00006359 	.word	0x00006359

000056cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    56cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ce:	460d      	mov	r5, r1
    56d0:	4604      	mov	r4, r0
    56d2:	2600      	movs	r6, #0
    56d4:	e051      	b.n	577a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xae>
    56d6:	bf00      	nop
    56d8:	f8b4 024a 	ldrh.w	r0, [r4, #586]	; 0x24a
    56dc:	1c40      	adds	r0, r0, #1
    56de:	f8a4 024a 	strh.w	r0, [r4, #586]	; 0x24a
    56e2:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
    56e6:	1c40      	adds	r0, r0, #1
    56e8:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
    56ec:	4620      	mov	r0, r4
    56ee:	f009 fd89 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    56f2:	b198      	cbz	r0, 571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    56f4:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
    56f8:	1c40      	adds	r0, r0, #1
    56fa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
    56fe:	4620      	mov	r0, r4
    5700:	f009 fbab 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    5704:	e9d4 0132 	ldrd	r0, r1, [r4, #200]	; 0xc8
    5708:	4288      	cmp	r0, r1
    570a:	d307      	bcc.n	571c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x50>
    570c:	220f      	movs	r2, #15
    570e:	491d      	ldr	r1, [pc, #116]	; (5784 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb8>)
    5710:	f504 70b0 	add.w	r0, r4, #352	; 0x160
    5714:	f8c4 60c8 	str.w	r6, [r4, #200]	; 0xc8
    5718:	f008 fd15 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    571c:	f894 00e0 	ldrb.w	r0, [r4, #224]	; 0xe0
    5720:	b120      	cbz	r0, 572c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x60>
    5722:	f8b4 00dc 	ldrh.w	r0, [r4, #220]	; 0xdc
    5726:	1c40      	adds	r0, r0, #1
    5728:	f8a4 00dc 	strh.w	r0, [r4, #220]	; 0xdc
    572c:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
    5730:	b120      	cbz	r0, 573c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x70>
    5732:	f8b4 00e2 	ldrh.w	r0, [r4, #226]	; 0xe2
    5736:	1c40      	adds	r0, r0, #1
    5738:	f8a4 00e2 	strh.w	r0, [r4, #226]	; 0xe2
    573c:	f894 0138 	ldrb.w	r0, [r4, #312]	; 0x138
    5740:	f88d 0000 	strb.w	r0, [sp]
    5744:	9800      	ldr	r0, [sp, #0]
    5746:	9000      	str	r0, [sp, #0]
    5748:	f89d 0000 	ldrb.w	r0, [sp]
    574c:	b940      	cbnz	r0, 5760 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94>
    574e:	f894 20a7 	ldrb.w	r2, [r4, #167]	; 0xa7
    5752:	2300      	movs	r3, #0
    5754:	2101      	movs	r1, #1
    5756:	f104 0088 	add.w	r0, r4, #136	; 0x88
    575a:	f008 f9cf 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    575e:	b120      	cbz	r0, 576a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e>
    5760:	f8b4 00da 	ldrh.w	r0, [r4, #218]	; 0xda
    5764:	1c40      	adds	r0, r0, #1
    5766:	f8a4 00da 	strh.w	r0, [r4, #218]	; 0xda
    576a:	4620      	mov	r0, r4
    576c:	f000 fa30 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5770:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5774:	1c40      	adds	r0, r0, #1
    5776:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
    577a:	1e6d      	subs	r5, r5, #1
    577c:	b2ad      	uxth	r5, r5
    577e:	d2ab      	bcs.n	56d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc>
    5780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5782:	0000      	.short	0x0000
    5784:	0000e63d 	.word	0x0000e63d
    5788:	4411      	add	r1, r2
    578a:	78c2      	ldrb	r2, [r0, #3]
    578c:	480c      	ldr	r0, [pc, #48]	; (57c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf4>)
    578e:	1d89      	adds	r1, r1, #6
    5790:	b289      	uxth	r1, r1
    5792:	6840      	ldr	r0, [r0, #4]
    5794:	2a01      	cmp	r2, #1
    5796:	d006      	beq.n	57a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xda>
    5798:	b142      	cbz	r2, 57ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0>
    579a:	2a18      	cmp	r2, #24
    579c:	d105      	bne.n	57aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde>
    579e:	f890 2262 	ldrb.w	r2, [r0, #610]	; 0x262
    57a2:	b132      	cbz	r2, 57b2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe6>
    57a4:	e009      	b.n	57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57a6:	f8a0 125e 	strh.w	r1, [r0, #606]	; 0x25e
    57aa:	4770      	bx	lr
    57ac:	f8a0 1266 	strh.w	r1, [r0, #614]	; 0x266
    57b0:	4770      	bx	lr
    57b2:	f890 2263 	ldrb.w	r2, [r0, #611]	; 0x263
    57b6:	b902      	cbnz	r2, 57ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xee>
    57b8:	2100      	movs	r1, #0
    57ba:	f8a0 1260 	strh.w	r1, [r0, #608]	; 0x260
    57be:	4770      	bx	lr
    57c0:	200000f0 	.word	0x200000f0
    57c4:	490b      	ldr	r1, [pc, #44]	; (57f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x128>)
    57c6:	78c2      	ldrb	r2, [r0, #3]
    57c8:	6849      	ldr	r1, [r1, #4]
    57ca:	2a01      	cmp	r2, #1
    57cc:	d006      	beq.n	57dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x110>
    57ce:	b15a      	cbz	r2, 57e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c>
    57d0:	2a18      	cmp	r2, #24
    57d2:	d108      	bne.n	57e6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a>
    57d4:	f8b1 1260 	ldrh.w	r1, [r1, #608]	; 0x260
    57d8:	f008 bc54 	b.w	e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>
    57dc:	f8b1 125e 	ldrh.w	r1, [r1, #606]	; 0x25e
    57e0:	7241      	strb	r1, [r0, #9]
    57e2:	0a09      	lsrs	r1, r1, #8
    57e4:	7281      	strb	r1, [r0, #10]
    57e6:	4770      	bx	lr
    57e8:	f8b1 1266 	ldrh.w	r1, [r1, #614]	; 0x266
    57ec:	7341      	strb	r1, [r0, #13]
    57ee:	0a09      	lsrs	r1, r1, #8
    57f0:	7381      	strb	r1, [r0, #14]
    57f2:	4770      	bx	lr
    57f4:	200000f0 	.word	0x200000f0
    57f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    57fa:	4c2a      	ldr	r4, [pc, #168]	; (58a4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d8>)
    57fc:	2300      	movs	r3, #0
    57fe:	4619      	mov	r1, r3
    5800:	6860      	ldr	r0, [r4, #4]
    5802:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5806:	3088      	adds	r0, #136	; 0x88
    5808:	f008 f978 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    580c:	2800      	cmp	r0, #0
    580e:	d048      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5810:	6860      	ldr	r0, [r4, #4]
    5812:	f890 125c 	ldrb.w	r1, [r0, #604]	; 0x25c
    5816:	f88d 1000 	strb.w	r1, [sp]
    581a:	9900      	ldr	r1, [sp, #0]
    581c:	9100      	str	r1, [sp, #0]
    581e:	f89d 1000 	ldrb.w	r1, [sp]
    5822:	2500      	movs	r5, #0
    5824:	2900      	cmp	r1, #0
    5826:	d03c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5828:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    582c:	f008 f9c9 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    5830:	2800      	cmp	r0, #0
    5832:	d136      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5834:	6860      	ldr	r0, [r4, #4]
    5836:	f8b0 009c 	ldrh.w	r0, [r0, #156]	; 0x9c
    583a:	280a      	cmp	r0, #10
    583c:	d931      	bls.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    583e:	4668      	mov	r0, sp
    5840:	f7fc ff30 	bl	26a4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    5844:	2800      	cmp	r0, #0
    5846:	d02c      	beq.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    5848:	6861      	ldr	r1, [r4, #4]
    584a:	2205      	movs	r2, #5
    584c:	4668      	mov	r0, sp
    584e:	31ae      	adds	r1, #174	; 0xae
    5850:	f00a fefb 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5854:	b310      	cbz	r0, 589c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d0>
    5856:	6860      	ldr	r0, [r4, #4]
    5858:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    585c:	7808      	ldrb	r0, [r1, #0]
    585e:	b158      	cbz	r0, 5878 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1ac>
    5860:	2205      	movs	r2, #5
    5862:	4668      	mov	r0, sp
    5864:	1c49      	adds	r1, r1, #1
    5866:	f00a fef0 	bl	1064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    586a:	2800      	cmp	r0, #0
    586c:	d119      	bne.n	58a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1d6>
    586e:	6860      	ldr	r0, [r4, #4]
    5870:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5874:	7800      	ldrb	r0, [r0, #0]
    5876:	b940      	cbnz	r0, 588a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1be>
    5878:	6860      	ldr	r0, [r4, #4]
    587a:	9900      	ldr	r1, [sp, #0]
    587c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5880:	f8c0 1001 	str.w	r1, [r0, #1]
    5884:	f89d 1004 	ldrb.w	r1, [sp, #4]
    5888:	7141      	strb	r1, [r0, #5]
    588a:	6860      	ldr	r0, [r4, #4]
    588c:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    5890:	7801      	ldrb	r1, [r0, #0]
    5892:	1c49      	adds	r1, r1, #1
    5894:	7001      	strb	r1, [r0, #0]
    5896:	2001      	movs	r0, #1
    5898:	f000 fe0c 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    589c:	6860      	ldr	r0, [r4, #4]
    589e:	f880 525c 	strb.w	r5, [r0, #604]	; 0x25c
    58a2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    58a4:	200000f0 	.word	0x200000f0
    58a8:	4a0c      	ldr	r2, [pc, #48]	; (58dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x210>)
    58aa:	7851      	ldrb	r1, [r2, #1]
    58ac:	b9a1      	cbnz	r1, 58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58ae:	f102 010c 	add.w	r1, r2, #12
    58b2:	2801      	cmp	r0, #1
    58b4:	6849      	ldr	r1, [r1, #4]
    58b6:	d008      	beq.n	58ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fe>
    58b8:	7890      	ldrb	r0, [r2, #2]
    58ba:	0740      	lsls	r0, r0, #29
    58bc:	d503      	bpl.n	58c6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1fa>
    58be:	f891 00a7 	ldrb.w	r0, [r1, #167]	; 0xa7
    58c2:	2806      	cmp	r0, #6
    58c4:	d008      	beq.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58c6:	2001      	movs	r0, #1
    58c8:	4770      	bx	lr
    58ca:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    58ce:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    58d0:	4288      	cmp	r0, r1
    58d2:	d801      	bhi.n	58d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x20c>
    58d4:	f7ff bc64 	b.w	51a0 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    58d8:	2000      	movs	r0, #0
    58da:	4770      	bx	lr
    58dc:	200000e4 	.word	0x200000e4
    58e0:	b538      	push	{r3, r4, r5, lr}
    58e2:	4c93      	ldr	r4, [pc, #588]	; (5b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x464>)
    58e4:	6860      	ldr	r0, [r4, #4]
    58e6:	3088      	adds	r0, #136	; 0x88
    58e8:	f009 fa96 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    58ec:	2800      	cmp	r0, #0
    58ee:	d164      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    58f0:	6860      	ldr	r0, [r4, #4]
    58f2:	2300      	movs	r3, #0
    58f4:	2101      	movs	r1, #1
    58f6:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    58fa:	3088      	adds	r0, #136	; 0x88
    58fc:	f008 f8fe 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5900:	2800      	cmp	r0, #0
    5902:	d15a      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    5904:	6860      	ldr	r0, [r4, #4]
    5906:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
    590a:	f88d 1000 	strb.w	r1, [sp]
    590e:	9900      	ldr	r1, [sp, #0]
    5910:	9100      	str	r1, [sp, #0]
    5912:	f89d 1000 	ldrb.w	r1, [sp]
    5916:	b109      	cbz	r1, 591c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x250>
    5918:	2002      	movs	r0, #2
    591a:	e03c      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    591c:	2500      	movs	r5, #0
    591e:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5922:	462b      	mov	r3, r5
    5924:	4629      	mov	r1, r5
    5926:	3088      	adds	r0, #136	; 0x88
    5928:	f008 f8e8 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    592c:	b128      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    592e:	6860      	ldr	r0, [r4, #4]
    5930:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
    5934:	b108      	cbz	r0, 593a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x26e>
    5936:	2012      	movs	r0, #18
    5938:	e02d      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    593a:	6860      	ldr	r0, [r4, #4]
    593c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5940:	2a19      	cmp	r2, #25
    5942:	d027      	beq.n	5994 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c8>
    5944:	dc06      	bgt.n	5954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x288>
    5946:	2a03      	cmp	r2, #3
    5948:	d029      	beq.n	599e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2d2>
    594a:	2a12      	cmp	r2, #18
    594c:	d01e      	beq.n	598c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2c0>
    594e:	2a13      	cmp	r2, #19
    5950:	d104      	bne.n	595c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x290>
    5952:	e019      	b.n	5988 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2bc>
    5954:	2a24      	cmp	r2, #36	; 0x24
    5956:	d02a      	beq.n	59ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2e2>
    5958:	2a2f      	cmp	r2, #47	; 0x2f
    595a:	d02f      	beq.n	59bc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f0>
    595c:	2300      	movs	r3, #0
    595e:	2104      	movs	r1, #4
    5960:	3088      	adds	r0, #136	; 0x88
    5962:	f008 f8cb 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5966:	2800      	cmp	r0, #0
    5968:	d127      	bne.n	59ba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ee>
    596a:	6860      	ldr	r0, [r4, #4]
    596c:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    5970:	291e      	cmp	r1, #30
    5972:	d048      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    5974:	dc29      	bgt.n	59ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fe>
    5976:	2901      	cmp	r1, #1
    5978:	d036      	beq.n	59e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x31c>
    597a:	2902      	cmp	r1, #2
    597c:	d041      	beq.n	5a02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x336>
    597e:	2903      	cmp	r1, #3
    5980:	d02c      	beq.n	59dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x310>
    5982:	2904      	cmp	r1, #4
    5984:	d13c      	bne.n	5a00 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x334>
    5986:	e0b7      	b.n	5af8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x42c>
    5988:	200b      	movs	r0, #11
    598a:	e004      	b.n	5996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2ca>
    598c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5990:	f000 bca2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    5994:	2006      	movs	r0, #6
    5996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    599a:	f000 bd8b 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    599e:	f890 1129 	ldrb.w	r1, [r0, #297]	; 0x129
    59a2:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59a6:	2007      	movs	r0, #7
    59a8:	f000 fd84 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ac:	e009      	b.n	59c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2f6>
    59ae:	2018      	movs	r0, #24
    59b0:	f000 fd80 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59b4:	6860      	ldr	r0, [r4, #4]
    59b6:	f8a0 50dc 	strh.w	r5, [r0, #220]	; 0xdc
    59ba:	bd38      	pop	{r3, r4, r5, pc}
    59bc:	2001      	movs	r0, #1
    59be:	f000 fd81 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    59c2:	6860      	ldr	r0, [r4, #4]
    59c4:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    59c8:	bd38      	pop	{r3, r4, r5, pc}
    59ca:	291f      	cmp	r1, #31
    59cc:	d01b      	beq.n	5a06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x33a>
    59ce:	2922      	cmp	r1, #34	; 0x22
    59d0:	d061      	beq.n	5a96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ca>
    59d2:	2928      	cmp	r1, #40	; 0x28
    59d4:	d071      	beq.n	5aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ee>
    59d6:	292f      	cmp	r1, #47	; 0x2f
    59d8:	d17d      	bne.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    59da:	e089      	b.n	5af0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x424>
    59dc:	f890 1128 	ldrb.w	r1, [r0, #296]	; 0x128
    59e0:	f880 1130 	strb.w	r1, [r0, #304]	; 0x130
    59e4:	2007      	movs	r0, #7
    59e6:	e08a      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    59e8:	200c      	movs	r0, #12
    59ea:	f000 fd63 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    59ee:	6860      	ldr	r0, [r4, #4]
    59f0:	f820 5fe2 	strh.w	r5, [r0, #226]!
    59f4:	7941      	ldrb	r1, [r0, #5]
    59f6:	f041 0101 	orr.w	r1, r1, #1
    59fa:	7141      	strb	r1, [r0, #5]
    59fc:	f800 5c3c 	strb.w	r5, [r0, #-60]
    5a00:	e069      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a02:	2013      	movs	r0, #19
    5a04:	e039      	b.n	5a7a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3ae>
    5a06:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    5a0a:	f88d 2000 	strb.w	r2, [sp]
    5a0e:	9a00      	ldr	r2, [sp, #0]
    5a10:	9200      	str	r2, [sp, #0]
    5a12:	f89d 2000 	ldrb.w	r2, [sp]
    5a16:	bbba      	cbnz	r2, 5a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3bc>
    5a18:	f890 213a 	ldrb.w	r2, [r0, #314]	; 0x13a
    5a1c:	f88d 2000 	strb.w	r2, [sp]
    5a20:	9a00      	ldr	r2, [sp, #0]
    5a22:	9200      	str	r2, [sp, #0]
    5a24:	f89d 2000 	ldrb.w	r2, [sp]
    5a28:	b37a      	cbz	r2, 5a8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3be>
    5a2a:	2925      	cmp	r1, #37	; 0x25
    5a2c:	d031      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a2e:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5a32:	2925      	cmp	r1, #37	; 0x25
    5a34:	d02d      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a36:	2926      	cmp	r1, #38	; 0x26
    5a38:	d02b      	beq.n	5a92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c6>
    5a3a:	2300      	movs	r3, #0
    5a3c:	f200 2262 	addw	r2, r0, #610	; 0x262
    5a40:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    5a44:	f008 fb95 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    5a48:	6860      	ldr	r0, [r4, #4]
    5a4a:	211f      	movs	r1, #31
    5a4c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    5a50:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    5a54:	6860      	ldr	r0, [r4, #4]
    5a56:	f008 fba7 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    5a5a:	2104      	movs	r1, #4
    5a5c:	6860      	ldr	r0, [r4, #4]
    5a5e:	f009 f881 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5a62:	f000 f867 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    5a66:	6861      	ldr	r1, [r4, #4]
    5a68:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    5a6c:	8bc2      	ldrh	r2, [r0, #30]
    5a6e:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    5a72:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    5a74:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    5a78:	2015      	movs	r0, #21
    5a7a:	f000 fd1b 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5a7e:	6860      	ldr	r0, [r4, #4]
    5a80:	f8a0 50e2 	strh.w	r5, [r0, #226]	; 0xe2
    5a84:	f880 50a6 	strb.w	r5, [r0, #166]	; 0xa6
    5a88:	e025      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a8a:	e7ff      	b.n	5a8c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3c0>
    5a8c:	291f      	cmp	r1, #31
    5a8e:	d0e1      	beq.n	5a54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x388>
    5a90:	e021      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5a92:	2301      	movs	r3, #1
    5a94:	e7d2      	b.n	5a3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x370>
    5a96:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5a9a:	2901      	cmp	r1, #1
    5a9c:	d108      	bne.n	5ab0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3e4>
    5a9e:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    5aa2:	f88d 1000 	strb.w	r1, [sp]
    5aa6:	9900      	ldr	r1, [sp, #0]
    5aa8:	9100      	str	r1, [sp, #0]
    5aaa:	f89d 1000 	ldrb.w	r1, [sp]
    5aae:	b129      	cbz	r1, 5abc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3f0>
    5ab0:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    5ab4:	2902      	cmp	r1, #2
    5ab6:	d006      	beq.n	5ac6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3fa>
    5ab8:	e00d      	b.n	5ad6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x40a>
    5aba:	e01f      	b.n	5afc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x430>
    5abc:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    5ac0:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    5ac4:	e002      	b.n	5acc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x400>
    5ac6:	f850 1f62 	ldr.w	r1, [r0, #98]!
    5aca:	6840      	ldr	r0, [r0, #4]
    5acc:	f000 fd04 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    5ad0:	2018      	movs	r0, #24
    5ad2:	f000 fcef 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5ad6:	6860      	ldr	r0, [r4, #4]
    5ad8:	3088      	adds	r0, #136	; 0x88
    5ada:	f009 f99d 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5ade:	2800      	cmp	r0, #0
    5ae0:	f47f af72 	bne.w	59c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x2fc>
    5ae4:	6860      	ldr	r0, [r4, #4]
    5ae6:	3088      	adds	r0, #136	; 0x88
    5ae8:	f009 f996 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5aec:	b158      	cbz	r0, 5b06 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x43a>
    5aee:	e015      	b.n	5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5af0:	2000      	movs	r0, #0
    5af2:	f000 fce7 	bl	64c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf8>
    5af6:	e004      	b.n	5b02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x436>
    5af8:	2009      	movs	r0, #9
    5afa:	e000      	b.n	5afe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x432>
    5afc:	2024      	movs	r0, #36	; 0x24
    5afe:	f000 fcd9 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    5b02:	6860      	ldr	r0, [r4, #4]
    5b04:	e7be      	b.n	5a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x3b8>
    5b06:	6860      	ldr	r0, [r4, #4]
    5b08:	2300      	movs	r3, #0
    5b0a:	4619      	mov	r1, r3
    5b0c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5b10:	3088      	adds	r0, #136	; 0x88
    5b12:	f007 fff3 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5b16:	b108      	cbz	r0, 5b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x450>
    5b18:	f000 fb14 	bl	6144 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa78>
    5b1c:	6860      	ldr	r0, [r4, #4]
    5b1e:	3088      	adds	r0, #136	; 0x88
    5b20:	f009 f97a 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5b24:	2800      	cmp	r0, #0
    5b26:	d1db      	bne.n	5ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x414>
    5b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b2c:	f7ff be64 	b.w	57f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12c>
    5b30:	200000f0 	.word	0x200000f0
    5b34:	4808      	ldr	r0, [pc, #32]	; (5b58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x48c>)
    5b36:	6843      	ldr	r3, [r0, #4]
    5b38:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    5b3c:	2801      	cmp	r0, #1
    5b3e:	d006      	beq.n	5b4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x482>
    5b40:	f503 72b5 	add.w	r2, r3, #362	; 0x16a
    5b44:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    5b48:	8818      	ldrh	r0, [r3, #0]
    5b4a:	f7fd b893 	b.w	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    5b4e:	2002      	movs	r0, #2
    5b50:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    5b54:	4770      	bx	lr
    5b56:	0000      	.short	0x0000
    5b58:	200000f0 	.word	0x200000f0
    5b5c:	b538      	push	{r3, r4, r5, lr}
    5b5e:	4d1a      	ldr	r5, [pc, #104]	; (5bc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4fc>)
    5b60:	686b      	ldr	r3, [r5, #4]
    5b62:	f893 10a5 	ldrb.w	r1, [r3, #165]	; 0xa5
    5b66:	2917      	cmp	r1, #23
    5b68:	d001      	beq.n	5b6e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a2>
    5b6a:	2914      	cmp	r1, #20
    5b6c:	d102      	bne.n	5b74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4a8>
    5b6e:	f893 10e6 	ldrb.w	r1, [r3, #230]	; 0xe6
    5b72:	b109      	cbz	r1, 5b78 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4ac>
    5b74:	2002      	movs	r0, #2
    5b76:	bd38      	pop	{r3, r4, r5, pc}
    5b78:	2400      	movs	r4, #0
    5b7a:	f883 40e5 	strb.w	r4, [r3, #229]	; 0xe5
    5b7e:	f883 40e0 	strb.w	r4, [r3, #224]	; 0xe0
    5b82:	f893 121a 	ldrb.w	r1, [r3, #538]	; 0x21a
    5b86:	f88d 1000 	strb.w	r1, [sp]
    5b8a:	9900      	ldr	r1, [sp, #0]
    5b8c:	9100      	str	r1, [sp, #0]
    5b8e:	f89d 1000 	ldrb.w	r1, [sp]
    5b92:	b121      	cbz	r1, 5b9e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4d2>
    5b94:	f240 31df 	movw	r1, #991	; 0x3df
    5b98:	2036      	movs	r0, #54	; 0x36
    5b9a:	f7fa ff63 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b9e:	8819      	ldrh	r1, [r3, #0]
    5ba0:	f8a3 121e 	strh.w	r1, [r3, #542]	; 0x21e
    5ba4:	f883 021c 	strb.w	r0, [r3, #540]	; 0x21c
    5ba8:	f883 4220 	strb.w	r4, [r3, #544]	; 0x220
    5bac:	f883 4278 	strb.w	r4, [r3, #632]	; 0x278
    5bb0:	f203 2012 	addw	r0, r3, #530	; 0x212
    5bb4:	220c      	movs	r2, #12
    5bb6:	4905      	ldr	r1, [pc, #20]	; (5bcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x500>)
    5bb8:	f008 fab1 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5bbc:	6868      	ldr	r0, [r5, #4]
    5bbe:	f880 40a5 	strb.w	r4, [r0, #165]	; 0xa5
    5bc2:	2000      	movs	r0, #0
    5bc4:	bd38      	pop	{r3, r4, r5, pc}
    5bc6:	0000      	.short	0x0000
    5bc8:	200000f0 	.word	0x200000f0
    5bcc:	0000e5a1 	.word	0x0000e5a1
    5bd0:	b570      	push	{r4, r5, r6, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    5bd8:	2500      	movs	r5, #0
    5bda:	280b      	cmp	r0, #11
    5bdc:	d001      	beq.n	5be2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x516>
    5bde:	280c      	cmp	r0, #12
    5be0:	d108      	bne.n	5bf4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x528>
    5be2:	f8b4 109c 	ldrh.w	r1, [r4, #156]	; 0x9c
    5be6:	f8b4 225e 	ldrh.w	r2, [r4, #606]	; 0x25e
    5bea:	1a89      	subs	r1, r1, r2
    5bec:	1c49      	adds	r1, r1, #1
    5bee:	0409      	lsls	r1, r1, #16
    5bf0:	0c09      	lsrs	r1, r1, #16
    5bf2:	d032      	beq.n	5c5a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58e>
    5bf4:	280d      	cmp	r0, #13
    5bf6:	d001      	beq.n	5bfc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x530>
    5bf8:	280e      	cmp	r0, #14
    5bfa:	d12d      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5bfc:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    5c00:	f8b4 1266 	ldrh.w	r1, [r4, #614]	; 0x266
    5c04:	1a40      	subs	r0, r0, r1
    5c06:	1c40      	adds	r0, r0, #1
    5c08:	0400      	lsls	r0, r0, #16
    5c0a:	0c00      	lsrs	r0, r0, #16
    5c0c:	d124      	bne.n	5c58 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x58c>
    5c0e:	8820      	ldrh	r0, [r4, #0]
    5c10:	f8a4 01d2 	strh.w	r0, [r4, #466]	; 0x1d2
    5c14:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    5c18:	f007 ff57 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5c1c:	f8a4 01d4 	strh.w	r0, [r4, #468]	; 0x1d4
    5c20:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    5c24:	f8a4 01d6 	strh.w	r0, [r4, #470]	; 0x1d6
    5c28:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    5c2c:	f8a4 01d8 	strh.w	r0, [r4, #472]	; 0x1d8
    5c30:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
    5c34:	2209      	movs	r2, #9
    5c36:	4919      	ldr	r1, [pc, #100]	; (5c9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d0>)
    5c38:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
    5c3c:	f008 fa83 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    5c40:	f884 5264 	strb.w	r5, [r4, #612]	; 0x264
    5c44:	2102      	movs	r1, #2
    5c46:	4620      	mov	r0, r4
    5c48:	f7fc fc86 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c4c:	2103      	movs	r1, #3
    5c4e:	4620      	mov	r0, r4
    5c50:	f008 ff88 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    5c54:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c58:	bd70      	pop	{r4, r5, r6, pc}
    5c5a:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c5e:	f8d0 1001 	ldr.w	r1, [r0, #1]
    5c62:	f8c4 10ae 	str.w	r1, [r4, #174]	; 0xae
    5c66:	7940      	ldrb	r0, [r0, #5]
    5c68:	f884 00b2 	strb.w	r0, [r4, #178]	; 0xb2
    5c6c:	2103      	movs	r1, #3
    5c6e:	4620      	mov	r0, r4
    5c70:	f7fc fc72 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    5c74:	f8d4 0258 	ldr.w	r0, [r4, #600]	; 0x258
    5c78:	7800      	ldrb	r0, [r0, #0]
    5c7a:	b148      	cbz	r0, 5c90 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c4>
    5c7c:	2101      	movs	r1, #1
    5c7e:	20fe      	movs	r0, #254	; 0xfe
    5c80:	f001 f858 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5c84:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
    5c88:	20ff      	movs	r0, #255	; 0xff
    5c8a:	f884 00fe 	strb.w	r0, [r4, #254]	; 0xfe
    5c8e:	bd70      	pop	{r4, r5, r6, pc}
    5c90:	f240 2152 	movw	r1, #594	; 0x252
    5c94:	2036      	movs	r0, #54	; 0x36
    5c96:	f7fa fee5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c9a:	0000      	.short	0x0000
    5c9c:	0000e563 	.word	0x0000e563
    5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ca2:	4d28      	ldr	r5, [pc, #160]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5ca4:	f04f 0600 	mov.w	r6, #0
    5ca8:	f105 040c 	add.w	r4, r5, #12
    5cac:	8869      	ldrh	r1, [r5, #2]
    5cae:	0748      	lsls	r0, r1, #29
    5cb0:	d510      	bpl.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cb2:	6860      	ldr	r0, [r4, #4]
    5cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5cb8:	2a03      	cmp	r2, #3
    5cba:	d004      	beq.n	5cc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5fa>
    5cbc:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    5cc0:	2a06      	cmp	r2, #6
    5cc2:	d107      	bne.n	5cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x608>
    5cc4:	e002      	b.n	5ccc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x600>
    5cc6:	f240 7109 	movw	r1, #1801	; 0x709
    5cca:	e025      	b.n	5d18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x64c>
    5ccc:	2201      	movs	r2, #1
    5cce:	702a      	strb	r2, [r5, #0]
    5cd0:	f880 60a7 	strb.w	r6, [r0, #167]	; 0xa7
    5cd4:	0788      	lsls	r0, r1, #30
    5cd6:	d50a      	bpl.n	5cee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x622>
    5cd8:	6868      	ldr	r0, [r5, #4]
    5cda:	78c0      	ldrb	r0, [r0, #3]
    5cdc:	282b      	cmp	r0, #43	; 0x2b
    5cde:	d219      	bcs.n	5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce0:	4919      	ldr	r1, [pc, #100]	; (5d48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x67c>)
    5ce2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5ce6:	b1a9      	cbz	r1, 5d14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x648>
    5ce8:	4816      	ldr	r0, [pc, #88]	; (5d44 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x678>)
    5cea:	300c      	adds	r0, #12
    5cec:	4788      	blx	r1
    5cee:	f000 f86d 	bl	5dcc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x700>
    5cf2:	f000 f82b 	bl	5d4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x680>
    5cf6:	4607      	mov	r7, r0
    5cf8:	7868      	ldrb	r0, [r5, #1]
    5cfa:	0700      	lsls	r0, r0, #28
    5cfc:	d51c      	bpl.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5cfe:	6860      	ldr	r0, [r4, #4]
    5d00:	2300      	movs	r3, #0
    5d02:	2105      	movs	r1, #5
    5d04:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d08:	3088      	adds	r0, #136	; 0x88
    5d0a:	f007 fef7 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d0e:	b130      	cbz	r0, 5d1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x652>
    5d10:	2708      	movs	r7, #8
    5d12:	e011      	b.n	5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d14:	f640 0149 	movw	r1, #2121	; 0x849
    5d18:	2036      	movs	r0, #54	; 0x36
    5d1a:	f7fa fea3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5d1e:	4669      	mov	r1, sp
    5d20:	2003      	movs	r0, #3
    5d22:	9600      	str	r6, [sp, #0]
    5d24:	f7fb fdb2 	bl	188c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    5d28:	9800      	ldr	r0, [sp, #0]
    5d2a:	b128      	cbz	r0, 5d38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x66c>
    5d2c:	7206      	strb	r6, [r0, #8]
    5d2e:	222a      	movs	r2, #42	; 0x2a
    5d30:	6861      	ldr	r1, [r4, #4]
    5d32:	9800      	ldr	r0, [sp, #0]
    5d34:	f008 f9f3 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    5d38:	6860      	ldr	r0, [r4, #4]
    5d3a:	f7ff ff49 	bl	5bd0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x504>
    5d3e:	4638      	mov	r0, r7
    5d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d42:	0000      	.short	0x0000
    5d44:	200000e4 	.word	0x200000e4
    5d48:	200001a4 	.word	0x200001a4
    5d4c:	b570      	push	{r4, r5, r6, lr}
    5d4e:	4c1d      	ldr	r4, [pc, #116]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5d50:	2000      	movs	r0, #0
    5d52:	78a1      	ldrb	r1, [r4, #2]
    5d54:	07c9      	lsls	r1, r1, #31
    5d56:	d01d      	beq.n	5d94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c8>
    5d58:	68a0      	ldr	r0, [r4, #8]
    5d5a:	2300      	movs	r3, #0
    5d5c:	2105      	movs	r1, #5
    5d5e:	78c5      	ldrb	r5, [r0, #3]
    5d60:	f104 000c 	add.w	r0, r4, #12
    5d64:	6840      	ldr	r0, [r0, #4]
    5d66:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    5d6a:	3088      	adds	r0, #136	; 0x88
    5d6c:	f007 fec6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    5d70:	b188      	cbz	r0, 5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d72:	2d06      	cmp	r5, #6
    5d74:	d00f      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d76:	dc06      	bgt.n	5d86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ba>
    5d78:	2d02      	cmp	r5, #2
    5d7a:	d00c      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d7c:	2d04      	cmp	r5, #4
    5d7e:	d00a      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d80:	2d05      	cmp	r5, #5
    5d82:	d106      	bne.n	5d92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c6>
    5d84:	e007      	b.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d86:	2d0b      	cmp	r5, #11
    5d88:	d005      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8a:	2d0d      	cmp	r5, #13
    5d8c:	d003      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d8e:	2d11      	cmp	r5, #17
    5d90:	d001      	beq.n	5d96 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ca>
    5d92:	2008      	movs	r0, #8
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	68a0      	ldr	r0, [r4, #8]
    5d98:	f7fc fd16 	bl	27c8 <sym_3S3ZPZTS3JKT3LR3P6QZ3KOW4P72YQZEIQOYGSA>
    5d9c:	b160      	cbz	r0, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5d9e:	68a0      	ldr	r0, [r4, #8]
    5da0:	78c0      	ldrb	r0, [r0, #3]
    5da2:	282b      	cmp	r0, #43	; 0x2b
    5da4:	d208      	bcs.n	5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5da6:	4908      	ldr	r1, [pc, #32]	; (5dc8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6fc>)
    5da8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    5dac:	b121      	cbz	r1, 5db8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6ec>
    5dae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5db2:	4804      	ldr	r0, [pc, #16]	; (5dc4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6f8>)
    5db4:	300c      	adds	r0, #12
    5db6:	4708      	bx	r1
    5db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5dbc:	2000      	movs	r0, #0
    5dbe:	f000 bbdf 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    5dc2:	0000      	.short	0x0000
    5dc4:	200000e4 	.word	0x200000e4
    5dc8:	200000f8 	.word	0x200000f8
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	4d1a      	ldr	r5, [pc, #104]	; (5e38 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x76c>)
    5dd0:	78a8      	ldrb	r0, [r5, #2]
    5dd2:	0700      	lsls	r0, r0, #28
    5dd4:	d52e      	bpl.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5dd6:	f105 040c 	add.w	r4, r5, #12
    5dda:	2100      	movs	r1, #0
    5ddc:	6860      	ldr	r0, [r4, #4]
    5dde:	f890 012e 	ldrb.w	r0, [r0, #302]	; 0x12e
    5de2:	f000 ffa7 	bl	6d34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1668>
    5de6:	6860      	ldr	r0, [r4, #4]
    5de8:	3088      	adds	r0, #136	; 0x88
    5dea:	f009 f815 	bl	ee18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    5dee:	b160      	cbz	r0, 5e0a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x73e>
    5df0:	6860      	ldr	r0, [r4, #4]
    5df2:	21fe      	movs	r1, #254	; 0xfe
    5df4:	f880 112e 	strb.w	r1, [r0, #302]	; 0x12e
    5df8:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    5dfc:	290b      	cmp	r1, #11
    5dfe:	d009      	beq.n	5e14 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x748>
    5e00:	290d      	cmp	r1, #13
    5e02:	d009      	beq.n	5e18 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x74c>
    5e04:	2925      	cmp	r1, #37	; 0x25
    5e06:	d10c      	bne.n	5e22 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x756>
    5e08:	e008      	b.n	5e1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x750>
    5e0a:	f640 0155 	movw	r1, #2133	; 0x855
    5e0e:	2036      	movs	r0, #54	; 0x36
    5e10:	f7fa fe28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e14:	210c      	movs	r1, #12
    5e16:	e002      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e18:	210e      	movs	r1, #14
    5e1a:	e000      	b.n	5e1e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x752>
    5e1c:	2126      	movs	r1, #38	; 0x26
    5e1e:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    5e22:	f890 10a7 	ldrb.w	r1, [r0, #167]	; 0xa7
    5e26:	2907      	cmp	r1, #7
    5e28:	d104      	bne.n	5e34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x768>
    5e2a:	2102      	movs	r1, #2
    5e2c:	7029      	strb	r1, [r5, #0]
    5e2e:	2100      	movs	r1, #0
    5e30:	f880 10a7 	strb.w	r1, [r0, #167]	; 0xa7
    5e34:	bd70      	pop	{r4, r5, r6, pc}
    5e36:	0000      	.short	0x0000
    5e38:	200000e4 	.word	0x200000e4
    5e3c:	b538      	push	{r3, r4, r5, lr}
    5e3e:	4605      	mov	r5, r0
    5e40:	4668      	mov	r0, sp
    5e42:	f7fb fbb5 	bl	15b0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    5e46:	b348      	cbz	r0, 5e9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x7d0>
    5e48:	2222      	movs	r2, #34	; 0x22
    5e4a:	2100      	movs	r1, #0
    5e4c:	9800      	ldr	r0, [sp, #0]
    5e4e:	f00a fc88 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5e52:	2103      	movs	r1, #3
    5e54:	9800      	ldr	r0, [sp, #0]
    5e56:	f008 f92f 	bl	e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>
    5e5a:	9800      	ldr	r0, [sp, #0]
    5e5c:	7801      	ldrb	r1, [r0, #0]
    5e5e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
    5e62:	7001      	strb	r1, [r0, #0]
    5e64:	4629      	mov	r1, r5
    5e66:	f7fc fcbf 	bl	27e8 <sym_U3LPDM4ZN7F4EBRA6GBYBEUAHXDWZU7U4P3OZRQ>
    5e6a:	2100      	movs	r1, #0
    5e6c:	4c73      	ldr	r4, [pc, #460]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5e6e:	2d26      	cmp	r5, #38	; 0x26
    5e70:	d277      	bcs.n	5f62 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x896>
    5e72:	e8df f005 	tbb	[pc, r5]
    5e76:	222a      	.short	0x222a
    5e78:	dbdb5216 	.word	0xdbdb5216
    5e7c:	7b771cd4 	.word	0x7b771cd4
    5e80:	db6bd4d4 	.word	0xdb6bd4d4
    5e84:	bcdbdbdb 	.word	0xbcdbdbdb
    5e88:	8080d4d4 	.word	0x8080d4d4
    5e8c:	dba3db99 	.word	0xdba3db99
    5e90:	dbdbdbdb 	.word	0xdbdbdbdb
    5e94:	dbdbdbdb 	.word	0xdbdbdbdb
    5e98:	b6b6b6db 	.word	0xb6b6b6db
    5e9c:	f640 217b 	movw	r1, #2683	; 0xa7b
    5ea0:	e0c9      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    5ea2:	6860      	ldr	r0, [r4, #4]
    5ea4:	9900      	ldr	r1, [sp, #0]
    5ea6:	f890 0139 	ldrb.w	r0, [r0, #313]	; 0x139
    5eaa:	7108      	strb	r0, [r1, #4]
    5eac:	e0b7      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eae:	6861      	ldr	r1, [r4, #4]
    5eb0:	9800      	ldr	r0, [sp, #0]
    5eb2:	f891 1130 	ldrb.w	r1, [r1, #304]	; 0x130
    5eb6:	7101      	strb	r1, [r0, #4]
    5eb8:	e0b1      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eba:	6860      	ldr	r0, [r4, #4]
    5ebc:	f8d0 1258 	ldr.w	r1, [r0, #600]	; 0x258
    5ec0:	9800      	ldr	r0, [sp, #0]
    5ec2:	1c49      	adds	r1, r1, #1
    5ec4:	f008 f889 	bl	dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>
    5ec8:	e0a9      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5eca:	6860      	ldr	r0, [r4, #4]
    5ecc:	9d00      	ldr	r5, [sp, #0]
    5ece:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
    5ed2:	f8b0 0268 	ldrh.w	r0, [r0, #616]	; 0x268
    5ed6:	f007 ff7f 	bl	ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    5eda:	7128      	strb	r0, [r5, #4]
    5edc:	6860      	ldr	r0, [r4, #4]
    5ede:	9d00      	ldr	r5, [sp, #0]
    5ee0:	f500 701b 	add.w	r0, r0, #620	; 0x26c
    5ee4:	c803      	ldmia	r0, {r0, r1}
    5ee6:	f007 ff60 	bl	ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    5eea:	7168      	strb	r0, [r5, #5]
    5eec:	0a00      	lsrs	r0, r0, #8
    5eee:	71a8      	strb	r0, [r5, #6]
    5ef0:	6860      	ldr	r0, [r4, #4]
    5ef2:	9d00      	ldr	r5, [sp, #0]
    5ef4:	f8d0 0270 	ldr.w	r0, [r0, #624]	; 0x270
    5ef8:	f007 fde7 	bl	daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    5efc:	71e8      	strb	r0, [r5, #7]
    5efe:	0a00      	lsrs	r0, r0, #8
    5f00:	7228      	strb	r0, [r5, #8]
    5f02:	6862      	ldr	r2, [r4, #4]
    5f04:	9800      	ldr	r0, [sp, #0]
    5f06:	f8b2 1274 	ldrh.w	r1, [r2, #628]	; 0x274
    5f0a:	7241      	strb	r1, [r0, #9]
    5f0c:	0a09      	lsrs	r1, r1, #8
    5f0e:	7281      	strb	r1, [r0, #10]
    5f10:	f8b2 1276 	ldrh.w	r1, [r2, #630]	; 0x276
    5f14:	f008 f866 	bl	dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>
    5f18:	e081      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f1a:	6861      	ldr	r1, [r4, #4]
    5f1c:	9800      	ldr	r0, [sp, #0]
    5f1e:	f201 2179 	addw	r1, r1, #633	; 0x279
    5f22:	f008 f874 	bl	e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>
    5f26:	6861      	ldr	r1, [r4, #4]
    5f28:	9800      	ldr	r0, [sp, #0]
    5f2a:	f201 2181 	addw	r1, r1, #641	; 0x281
    5f2e:	f008 f867 	bl	e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>
    5f32:	6861      	ldr	r1, [r4, #4]
    5f34:	9800      	ldr	r0, [sp, #0]
    5f36:	f201 2193 	addw	r1, r1, #659	; 0x293
    5f3a:	f008 f86d 	bl	e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>
    5f3e:	6861      	ldr	r1, [r4, #4]
    5f40:	9800      	ldr	r0, [sp, #0]
    5f42:	f501 7190 	add.w	r1, r1, #288	; 0x120
    5f46:	f008 f85e 	bl	e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>
    5f4a:	e068      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f4c:	9800      	ldr	r0, [sp, #0]
    5f4e:	220c      	movs	r2, #12
    5f50:	7102      	strb	r2, [r0, #4]
    5f52:	2259      	movs	r2, #89	; 0x59
    5f54:	7142      	strb	r2, [r0, #5]
    5f56:	7181      	strb	r1, [r0, #6]
    5f58:	214b      	movs	r1, #75	; 0x4b
    5f5a:	71c1      	strb	r1, [r0, #7]
    5f5c:	2112      	movs	r1, #18
    5f5e:	7201      	strb	r1, [r0, #8]
    5f60:	e05d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f62:	e063      	b.n	602c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x960>
    5f64:	9800      	ldr	r0, [sp, #0]
    5f66:	f7fc ff73 	bl	2e50 <sym_CYYZ5DA5UWAE37FM7XP643I473QUSWWZ2MS7OLY>
    5f6a:	e058      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f6c:	4833      	ldr	r0, [pc, #204]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5f6e:	9900      	ldr	r1, [sp, #0]
    5f70:	f7fc ffc2 	bl	2ef8 <sym_KQ4RAL3HW3LUBE4EKZDESO77BJMQRXFGP63ANLQ>
    5f74:	e053      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5f76:	6860      	ldr	r0, [r4, #4]
    5f78:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    5f7c:	9800      	ldr	r0, [sp, #0]
    5f7e:	f008 f8ab 	bl	e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>
    5f82:	6860      	ldr	r0, [r4, #4]
    5f84:	f8b0 1130 	ldrh.w	r1, [r0, #304]	; 0x130
    5f88:	9800      	ldr	r0, [sp, #0]
    5f8a:	f008 f8a9 	bl	e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>
    5f8e:	6860      	ldr	r0, [r4, #4]
    5f90:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    5f94:	9800      	ldr	r0, [sp, #0]
    5f96:	f008 f897 	bl	e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>
    5f9a:	6860      	ldr	r0, [r4, #4]
    5f9c:	f8b0 1132 	ldrh.w	r1, [r0, #306]	; 0x132
    5fa0:	9800      	ldr	r0, [sp, #0]
    5fa2:	f008 f895 	bl	e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>
    5fa6:	e03a      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fa8:	6861      	ldr	r1, [r4, #4]
    5faa:	9800      	ldr	r0, [sp, #0]
    5fac:	f891 1146 	ldrb.w	r1, [r1, #326]	; 0x146
    5fb0:	7101      	strb	r1, [r0, #4]
    5fb2:	6861      	ldr	r1, [r4, #4]
    5fb4:	f891 1147 	ldrb.w	r1, [r1, #327]	; 0x147
    5fb8:	7141      	strb	r1, [r0, #5]
    5fba:	e030      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fbc:	6860      	ldr	r0, [r4, #4]
    5fbe:	f890 0263 	ldrb.w	r0, [r0, #611]	; 0x263
    5fc2:	f007 fe50 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fc6:	4601      	mov	r1, r0
    5fc8:	9800      	ldr	r0, [sp, #0]
    5fca:	f008 f861 	bl	e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>
    5fce:	6860      	ldr	r0, [r4, #4]
    5fd0:	f890 0262 	ldrb.w	r0, [r0, #610]	; 0x262
    5fd4:	f007 fe47 	bl	dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    5fd8:	4601      	mov	r1, r0
    5fda:	9800      	ldr	r0, [sp, #0]
    5fdc:	f008 f856 	bl	e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>
    5fe0:	e01d      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fe2:	4a16      	ldr	r2, [pc, #88]	; (603c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x970>)
    5fe4:	4628      	mov	r0, r5
    5fe6:	9900      	ldr	r1, [sp, #0]
    5fe8:	f009 f947 	bl	f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>
    5fec:	e017      	b.n	601e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x952>
    5fee:	6860      	ldr	r0, [r4, #4]
    5ff0:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
    5ff4:	b141      	cbz	r1, 6008 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x93c>
    5ff6:	f890 112d 	ldrb.w	r1, [r0, #301]	; 0x12d
    5ffa:	9800      	ldr	r0, [sp, #0]
    5ffc:	f008 f856 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6000:	6860      	ldr	r0, [r4, #4]
    6002:	f890 112c 	ldrb.w	r1, [r0, #300]	; 0x12c
    6006:	e007      	b.n	6018 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x94c>
    6008:	f890 112b 	ldrb.w	r1, [r0, #299]	; 0x12b
    600c:	9800      	ldr	r0, [sp, #0]
    600e:	f008 f84d 	bl	e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>
    6012:	6860      	ldr	r0, [r4, #4]
    6014:	f890 112a 	ldrb.w	r1, [r0, #298]	; 0x12a
    6018:	9800      	ldr	r0, [sp, #0]
    601a:	f008 f84b 	bl	e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>
    601e:	f7fb faa1 	bl	1564 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    6022:	b130      	cbz	r0, 6032 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x966>
    6024:	9800      	ldr	r0, [sp, #0]
    6026:	f7ff fbcd 	bl	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    602a:	bd38      	pop	{r3, r4, r5, pc}
    602c:	f640 314e 	movw	r1, #2894	; 0xb4e
    6030:	e001      	b.n	6036 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x96a>
    6032:	f640 3154 	movw	r1, #2900	; 0xb54
    6036:	2036      	movs	r0, #54	; 0x36
    6038:	f7fa fd14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    603c:	200000f0 	.word	0x200000f0
    6040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6044:	4e28      	ldr	r6, [pc, #160]	; (60e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa1c>)
    6046:	4680      	mov	r8, r0
    6048:	460d      	mov	r5, r1
    604a:	8870      	ldrh	r0, [r6, #2]
    604c:	f106 040c 	add.w	r4, r6, #12
    6050:	05c1      	lsls	r1, r0, #23
    6052:	6860      	ldr	r0, [r4, #4]
    6054:	f04f 0700 	mov.w	r7, #0
    6058:	d502      	bpl.n	6060 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x994>
    605a:	f8a0 70d6 	strh.w	r7, [r0, #214]	; 0xd6
    605e:	e004      	b.n	606a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x99e>
    6060:	f8b0 10d6 	ldrh.w	r1, [r0, #214]	; 0xd6
    6064:	1c49      	adds	r1, r1, #1
    6066:	f8a0 10d6 	strh.w	r1, [r0, #214]	; 0xd6
    606a:	f009 f8cb 	bl	f204 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x408>
    606e:	b1f0      	cbz	r0, 60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6070:	8870      	ldrh	r0, [r6, #2]
    6072:	0500      	lsls	r0, r0, #20
    6074:	d506      	bpl.n	6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    6076:	6860      	ldr	r0, [r4, #4]
    6078:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    607c:	b111      	cbz	r1, 6084 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9b8>
    607e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    6082:	e014      	b.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    6084:	6860      	ldr	r0, [r4, #4]
    6086:	f8d0 10c8 	ldr.w	r1, [r0, #200]	; 0xc8
    608a:	1c49      	adds	r1, r1, #1
    608c:	f8c0 10c8 	str.w	r1, [r0, #200]	; 0xc8
    6090:	f008 fee3 	bl	ee5a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    6094:	6860      	ldr	r0, [r4, #4]
    6096:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    609a:	4291      	cmp	r1, r2
    609c:	d307      	bcc.n	60ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9e2>
    609e:	f8c0 70c8 	str.w	r7, [r0, #200]	; 0xc8
    60a2:	220f      	movs	r2, #15
    60a4:	4911      	ldr	r1, [pc, #68]	; (60ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa20>)
    60a6:	f500 70b0 	add.w	r0, r0, #352	; 0x160
    60aa:	f008 f84c 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    60ae:	8870      	ldrh	r0, [r6, #2]
    60b0:	f410 7f40 	tst.w	r0, #768	; 0x300
    60b4:	d008      	beq.n	60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60b6:	6860      	ldr	r0, [r4, #4]
    60b8:	f890 10a9 	ldrb.w	r1, [r0, #169]	; 0xa9
    60bc:	b921      	cbnz	r1, 60c8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9fc>
    60be:	2101      	movs	r1, #1
    60c0:	f880 10a9 	strb.w	r1, [r0, #169]	; 0xa9
    60c4:	f008 fd4e 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    60c8:	ea58 0005 	orrs.w	r0, r8, r5
    60cc:	d104      	bne.n	60d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa0c>
    60ce:	f7ff fde7 	bl	5ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5d4>
    60d2:	4605      	mov	r5, r0
    60d4:	f7ff fc04 	bl	58e0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x214>
    60d8:	4629      	mov	r1, r5
    60da:	4640      	mov	r0, r8
    60dc:	f000 fd36 	bl	6b4c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1480>
    60e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    60e4:	f7fb ba28 	b.w	1538 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    60e8:	200000e4 	.word	0x200000e4
    60ec:	0000e63d 	.word	0x0000e63d
    60f0:	4813      	ldr	r0, [pc, #76]	; (6140 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa74>)
    60f2:	6840      	ldr	r0, [r0, #4]
    60f4:	f890 10e0 	ldrb.w	r1, [r0, #224]	; 0xe0
    60f8:	b129      	cbz	r1, 6106 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa3a>
    60fa:	f8b0 10dc 	ldrh.w	r1, [r0, #220]	; 0xdc
    60fe:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6102:	4291      	cmp	r1, r2
    6104:	d215      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6106:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
    610a:	b129      	cbz	r1, 6118 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa4c>
    610c:	f8b0 10e2 	ldrh.w	r1, [r0, #226]	; 0xe2
    6110:	f8b0 20de 	ldrh.w	r2, [r0, #222]	; 0xde
    6114:	4291      	cmp	r1, r2
    6116:	d20c      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6118:	f8b0 20da 	ldrh.w	r2, [r0, #218]	; 0xda
    611c:	f8b0 10d8 	ldrh.w	r1, [r0, #216]	; 0xd8
    6120:	428a      	cmp	r2, r1
    6122:	d206      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    6124:	f890 20a9 	ldrb.w	r2, [r0, #169]	; 0xa9
    6128:	f8b0 00d6 	ldrh.w	r0, [r0, #214]	; 0xd6
    612c:	b11a      	cbz	r2, 6136 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6a>
    612e:	4288      	cmp	r0, r1
    6130:	d303      	bcc.n	613a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa6e>
    6132:	2001      	movs	r0, #1
    6134:	4770      	bx	lr
    6136:	2806      	cmp	r0, #6
    6138:	d2fb      	bcs.n	6132 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa66>
    613a:	2000      	movs	r0, #0
    613c:	4770      	bx	lr
    613e:	0000      	.short	0x0000
    6140:	200000f0 	.word	0x200000f0
    6144:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    6146:	4c63      	ldr	r4, [pc, #396]	; (62d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc08>)
    6148:	6860      	ldr	r0, [r4, #4]
    614a:	f890 1264 	ldrb.w	r1, [r0, #612]	; 0x264
    614e:	f88d 1000 	strb.w	r1, [sp]
    6152:	9900      	ldr	r1, [sp, #0]
    6154:	9100      	str	r1, [sp, #0]
    6156:	f89d 1000 	ldrb.w	r1, [sp]
    615a:	2500      	movs	r5, #0
    615c:	b129      	cbz	r1, 616a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa9e>
    615e:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    6162:	f007 fd2e 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    6166:	2800      	cmp	r0, #0
    6168:	d07d      	beq.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    616a:	6860      	ldr	r0, [r4, #4]
    616c:	f890 1278 	ldrb.w	r1, [r0, #632]	; 0x278
    6170:	b181      	cbz	r1, 6194 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac8>
    6172:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
    6176:	b149      	cbz	r1, 618c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xac0>
    6178:	f890 00ab 	ldrb.w	r0, [r0, #171]	; 0xab
    617c:	b108      	cbz	r0, 6182 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xab6>
    617e:	200a      	movs	r0, #10
    6180:	e071      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6182:	f640 01dc 	movw	r1, #2268	; 0x8dc
    6186:	2036      	movs	r0, #54	; 0x36
    6188:	f7fa fc6c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    618c:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    6190:	f000 b8a2 	b.w	62d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc0c>
    6194:	f890 114b 	ldrb.w	r1, [r0, #331]	; 0x14b
    6198:	b109      	cbz	r1, 619e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xad2>
    619a:	2008      	movs	r0, #8
    619c:	e063      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    619e:	f890 114a 	ldrb.w	r1, [r0, #330]	; 0x14a
    61a2:	b179      	cbz	r1, 61c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf8>
    61a4:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    61a8:	0780      	lsls	r0, r0, #30
    61aa:	d10a      	bne.n	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    61ac:	200c      	movs	r0, #12
    61ae:	f000 f981 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    61b2:	6860      	ldr	r0, [r4, #4]
    61b4:	f810 1fe7 	ldrb.w	r1, [r0, #231]!
    61b8:	f041 0101 	orr.w	r1, r1, #1
    61bc:	7001      	strb	r1, [r0, #0]
    61be:	f880 5063 	strb.w	r5, [r0, #99]	; 0x63
    61c2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    61c4:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    61c8:	f88d 1004 	strb.w	r1, [sp, #4]
    61cc:	9901      	ldr	r1, [sp, #4]
    61ce:	9101      	str	r1, [sp, #4]
    61d0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    61d4:	b141      	cbz	r1, 61e8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb1c>
    61d6:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    61da:	f88d 1000 	strb.w	r1, [sp]
    61de:	9900      	ldr	r1, [sp, #0]
    61e0:	9100      	str	r1, [sp, #0]
    61e2:	f89d 1000 	ldrb.w	r1, [sp]
    61e6:	b121      	cbz	r1, 61f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb26>
    61e8:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    61ec:	2901      	cmp	r1, #1
    61ee:	d021      	beq.n	6234 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb68>
    61f0:	e02e      	b.n	6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    61f2:	f890 10a6 	ldrb.w	r1, [r0, #166]	; 0xa6
    61f6:	2925      	cmp	r1, #37	; 0x25
    61f8:	d01a      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    61fa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    61fe:	2925      	cmp	r1, #37	; 0x25
    6200:	d016      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6202:	2926      	cmp	r1, #38	; 0x26
    6204:	d014      	beq.n	6230 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb64>
    6206:	2300      	movs	r3, #0
    6208:	f200 2262 	addw	r2, r0, #610	; 0x262
    620c:	f500 719d 	add.w	r1, r0, #314	; 0x13a
    6210:	f007 ffaf 	bl	e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    6214:	6860      	ldr	r0, [r4, #4]
    6216:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
    621a:	6861      	ldr	r1, [r4, #4]
    621c:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    6220:	8bc2      	ldrh	r2, [r0, #30]
    6222:	f8a1 2130 	strh.w	r2, [r1, #304]	; 0x130
    6226:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    6228:	f8a1 0132 	strh.w	r0, [r1, #306]	; 0x132
    622c:	2014      	movs	r0, #20
    622e:	e01a      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    6230:	2301      	movs	r3, #1
    6232:	e7e9      	b.n	6208 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb3c>
    6234:	f890 1145 	ldrb.w	r1, [r0, #325]	; 0x145
    6238:	f88d 1000 	strb.w	r1, [sp]
    623c:	9900      	ldr	r1, [sp, #0]
    623e:	9100      	str	r1, [sp, #0]
    6240:	f89d 1000 	ldrb.w	r1, [sp]
    6244:	b921      	cbnz	r1, 6250 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb84>
    6246:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    624a:	f007 fcba 	bl	dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    624e:	b170      	cbz	r0, 626e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xba2>
    6250:	6860      	ldr	r0, [r4, #4]
    6252:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    6256:	f88d 1000 	strb.w	r1, [sp]
    625a:	9900      	ldr	r1, [sp, #0]
    625c:	9100      	str	r1, [sp, #0]
    625e:	f89d 1000 	ldrb.w	r1, [sp]
    6262:	b329      	cbz	r1, 62b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe4>
    6264:	2023      	movs	r0, #35	; 0x23
    6266:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    626a:	f000 b923 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    626e:	6860      	ldr	r0, [r4, #4]
    6270:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6274:	f008 fdd8 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6278:	4605      	mov	r5, r0
    627a:	6860      	ldr	r0, [r4, #4]
    627c:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    6280:	f008 fdd2 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6284:	4606      	mov	r6, r0
    6286:	6860      	ldr	r0, [r4, #4]
    6288:	f890 1146 	ldrb.w	r1, [r0, #326]	; 0x146
    628c:	4628      	mov	r0, r5
    628e:	f008 fdd6 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    6292:	b158      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    6294:	6860      	ldr	r0, [r4, #4]
    6296:	f890 1147 	ldrb.w	r1, [r0, #327]	; 0x147
    629a:	4630      	mov	r0, r6
    629c:	f008 fdcf 	bl	ee3e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    62a0:	b120      	cbz	r0, 62ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbe0>
    62a2:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    62a6:	2000      	movs	r0, #0
    62a8:	f000 b8de 	b.w	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    62ac:	2016      	movs	r0, #22
    62ae:	e7da      	b.n	6266 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xb9a>
    62b0:	f890 014e 	ldrb.w	r0, [r0, #334]	; 0x14e
    62b4:	f88d 0000 	strb.w	r0, [sp]
    62b8:	9800      	ldr	r0, [sp, #0]
    62ba:	9000      	str	r0, [sp, #0]
    62bc:	f89d 0000 	ldrb.w	r0, [sp]
    62c0:	2800      	cmp	r0, #0
    62c2:	f43f af7e 	beq.w	61c2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaf6>
    62c6:	2025      	movs	r0, #37	; 0x25
    62c8:	f000 f8f4 	bl	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    62cc:	6860      	ldr	r0, [r4, #4]
    62ce:	f880 514e 	strb.w	r5, [r0, #334]	; 0x14e
    62d2:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    62d4:	200000f0 	.word	0x200000f0
    62d8:	b510      	push	{r4, lr}
    62da:	4c1e      	ldr	r4, [pc, #120]	; (6354 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc88>)
    62dc:	6862      	ldr	r2, [r4, #4]
    62de:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    62e2:	2808      	cmp	r0, #8
    62e4:	d20d      	bcs.n	6302 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc36>
    62e6:	f1c0 0108 	rsb	r1, r0, #8
    62ea:	f200 2093 	addw	r0, r0, #659	; 0x293
    62ee:	b2c9      	uxtb	r1, r1
    62f0:	4410      	add	r0, r2
    62f2:	f7fa fc49 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    62f6:	6861      	ldr	r1, [r4, #4]
    62f8:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    62fc:	4410      	add	r0, r2
    62fe:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    6302:	6862      	ldr	r2, [r4, #4]
    6304:	f892 0134 	ldrb.w	r0, [r2, #308]	; 0x134
    6308:	3808      	subs	r0, #8
    630a:	2804      	cmp	r0, #4
    630c:	d20d      	bcs.n	632a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc5e>
    630e:	f1c0 0104 	rsb	r1, r0, #4
    6312:	f500 7090 	add.w	r0, r0, #288	; 0x120
    6316:	b2c9      	uxtb	r1, r1
    6318:	4410      	add	r0, r2
    631a:	f7fa fc35 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    631e:	6861      	ldr	r1, [r4, #4]
    6320:	f891 2134 	ldrb.w	r2, [r1, #308]	; 0x134
    6324:	4410      	add	r0, r2
    6326:	f881 0134 	strb.w	r0, [r1, #308]	; 0x134
    632a:	6860      	ldr	r0, [r4, #4]
    632c:	f890 1134 	ldrb.w	r1, [r0, #308]	; 0x134
    6330:	290c      	cmp	r1, #12
    6332:	d30e      	bcc.n	6352 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc86>
    6334:	d005      	beq.n	6342 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xc76>
    6336:	f640 31c5 	movw	r1, #3013	; 0xbc5
    633a:	f04f 0036 	mov.w	r0, #54	; 0x36
    633e:	f7fa fb91 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6342:	2100      	movs	r1, #0
    6344:	f880 1134 	strb.w	r1, [r0, #308]	; 0x134
    6348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    634c:	2003      	movs	r0, #3
    634e:	f000 b8b1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    6352:	bd10      	pop	{r4, pc}
    6354:	200000f0 	.word	0x200000f0
    6358:	b570      	push	{r4, r5, r6, lr}
    635a:	4b20      	ldr	r3, [pc, #128]	; (63dc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd10>)
    635c:	4602      	mov	r2, r0
    635e:	460c      	mov	r4, r1
    6360:	8858      	ldrh	r0, [r3, #2]
    6362:	4310      	orrs	r0, r2
    6364:	8058      	strh	r0, [r3, #2]
    6366:	f103 000c 	add.w	r0, r3, #12
    636a:	0791      	lsls	r1, r2, #30
    636c:	6840      	ldr	r0, [r0, #4]
    636e:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    6372:	d507      	bpl.n	6384 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb8>
    6374:	b121      	cbz	r1, 6380 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcb4>
    6376:	f640 41cc 	movw	r1, #3276	; 0xccc
    637a:	2036      	movs	r0, #54	; 0x36
    637c:	f7fa fb72 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6380:	605c      	str	r4, [r3, #4]
    6382:	e003      	b.n	638c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcc0>
    6384:	b101      	cbz	r1, 6388 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcbc>
    6386:	609c      	str	r4, [r3, #8]
    6388:	0791      	lsls	r1, r2, #30
    638a:	d515      	bpl.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    638c:	78e1      	ldrb	r1, [r4, #3]
    638e:	2906      	cmp	r1, #6
    6390:	d002      	beq.n	6398 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xccc>
    6392:	290b      	cmp	r1, #11
    6394:	d110      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    6396:	e008      	b.n	63aa <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcde>
    6398:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    639c:	2919      	cmp	r1, #25
    639e:	d10b      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63a0:	2100      	movs	r1, #0
    63a2:	e9c0 1142 	strd	r1, r1, [r0, #264]	; 0x108
    63a6:	2101      	movs	r1, #1
    63a8:	e004      	b.n	63b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xce8>
    63aa:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    63ae:	2913      	cmp	r1, #19
    63b0:	d102      	bne.n	63b8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcec>
    63b2:	2100      	movs	r1, #0
    63b4:	f880 10ab 	strb.w	r1, [r0, #171]	; 0xab
    63b8:	0691      	lsls	r1, r2, #26
    63ba:	d501      	bpl.n	63c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xcf4>
    63bc:	2108      	movs	r1, #8
    63be:	7059      	strb	r1, [r3, #1]
    63c0:	0611      	lsls	r1, r2, #24
    63c2:	d50a      	bpl.n	63da <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd0e>
    63c4:	8b02      	ldrh	r2, [r0, #24]
    63c6:	f8b0 109c 	ldrh.w	r1, [r0, #156]	; 0x9c
    63ca:	4620      	mov	r0, r4
    63cc:	f7ff f9dc 	bl	5788 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xbc>
    63d0:	4620      	mov	r0, r4
    63d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63d6:	f7ff b9f5 	b.w	57c4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8>
    63da:	bd70      	pop	{r4, r5, r6, pc}
    63dc:	200000e4 	.word	0x200000e4
    63e0:	b570      	push	{r4, r5, r6, lr}
    63e2:	4c20      	ldr	r4, [pc, #128]	; (6464 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd98>)
    63e4:	2501      	movs	r5, #1
    63e6:	6862      	ldr	r2, [r4, #4]
    63e8:	f892 1262 	ldrb.w	r1, [r2, #610]	; 0x262
    63ec:	b909      	cbnz	r1, 63f2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd26>
    63ee:	f892 106a 	ldrb.w	r1, [r2, #106]	; 0x6a
    63f2:	f892 0263 	ldrb.w	r0, [r2, #611]	; 0x263
    63f6:	b908      	cbnz	r0, 63fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd30>
    63f8:	f892 006b 	ldrb.w	r0, [r2, #107]	; 0x6b
    63fc:	f102 0362 	add.w	r3, r2, #98	; 0x62
    6400:	7219      	strb	r1, [r3, #8]
    6402:	7258      	strb	r0, [r3, #9]
    6404:	20ff      	movs	r0, #255	; 0xff
    6406:	7298      	strb	r0, [r3, #10]
    6408:	4610      	mov	r0, r2
    640a:	f008 fffa 	bl	f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>
    640e:	2000      	movs	r0, #0
    6410:	f000 f82a 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6414:	6860      	ldr	r0, [r4, #4]
    6416:	302c      	adds	r0, #44	; 0x2c
    6418:	f007 ff1a 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    641c:	4606      	mov	r6, r0
    641e:	6860      	ldr	r0, [r4, #4]
    6420:	f007 fec2 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6424:	b130      	cbz	r0, 6434 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd68>
    6426:	6861      	ldr	r1, [r4, #4]
    6428:	f501 72b5 	add.w	r2, r1, #362	; 0x16a
    642c:	f831 0b2c 	ldrh.w	r0, [r1], #44
    6430:	f7fc fc20 	bl	2c74 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    6434:	2104      	movs	r1, #4
    6436:	6860      	ldr	r0, [r4, #4]
    6438:	f008 fb94 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    643c:	6860      	ldr	r0, [r4, #4]
    643e:	302c      	adds	r0, #44	; 0x2c
    6440:	f007 ff06 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    6444:	4604      	mov	r4, r0
    6446:	42a6      	cmp	r6, r4
    6448:	d20a      	bcs.n	6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    644a:	f003 fdd5 	bl	9ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    644e:	4601      	mov	r1, r0
    6450:	1ba0      	subs	r0, r4, r6
    6452:	2865      	cmp	r0, #101	; 0x65
    6454:	d200      	bcs.n	6458 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd8c>
    6456:	2065      	movs	r0, #101	; 0x65
    6458:	f003 fca4 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    645c:	b100      	cbz	r0, 6460 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd94>
    645e:	2500      	movs	r5, #0
    6460:	4628      	mov	r0, r5
    6462:	bd70      	pop	{r4, r5, r6, pc}
    6464:	200000f0 	.word	0x200000f0
    6468:	b510      	push	{r4, lr}
    646a:	4c10      	ldr	r4, [pc, #64]	; (64ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde0>)
    646c:	6861      	ldr	r1, [r4, #4]
    646e:	880a      	ldrh	r2, [r1, #0]
    6470:	f8a1 21ae 	strh.w	r2, [r1, #430]	; 0x1ae
    6474:	f881 01ac 	strb.w	r0, [r1, #428]	; 0x1ac
    6478:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    647c:	f008 fcd4 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    6480:	6861      	ldr	r1, [r4, #4]
    6482:	f881 01b0 	strb.w	r0, [r1, #432]	; 0x1b0
    6486:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    648a:	f008 fccd 	bl	ee28 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    648e:	6863      	ldr	r3, [r4, #4]
    6490:	2215      	movs	r2, #21
    6492:	4907      	ldr	r1, [pc, #28]	; (64b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde4>)
    6494:	f883 01b1 	strb.w	r0, [r3, #433]	; 0x1b1
    6498:	f503 70d1 	add.w	r0, r3, #418	; 0x1a2
    649c:	f007 fe53 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    64a0:	6861      	ldr	r1, [r4, #4]
    64a2:	2000      	movs	r0, #0
    64a4:	f881 0144 	strb.w	r0, [r1, #324]	; 0x144
    64a8:	bd10      	pop	{r4, pc}
    64aa:	0000      	.short	0x0000
    64ac:	200000f0 	.word	0x200000f0
    64b0:	00010189 	.word	0x00010189
    64b4:	4902      	ldr	r1, [pc, #8]	; (64c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xdf4>)
    64b6:	6849      	ldr	r1, [r1, #4]
    64b8:	f881 012e 	strb.w	r0, [r1, #302]	; 0x12e
    64bc:	f000 bb10 	b.w	6ae0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1414>
    64c0:	200000f0 	.word	0x200000f0
    64c4:	4903      	ldr	r1, [pc, #12]	; (64d4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe08>)
    64c6:	6849      	ldr	r1, [r1, #4]
    64c8:	f881 0130 	strb.w	r0, [r1, #304]	; 0x130
    64cc:	2011      	movs	r0, #17
    64ce:	f7ff bff1 	b.w	64b4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xde8>
    64d2:	0000      	.short	0x0000
    64d4:	200000f0 	.word	0x200000f0
    64d8:	b538      	push	{r3, r4, r5, lr}
    64da:	4c11      	ldr	r4, [pc, #68]	; (6520 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe54>)
    64dc:	6862      	ldr	r2, [r4, #4]
    64de:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    64e2:	f8ad 2000 	strh.w	r2, [sp]
    64e6:	f007 fbe5 	bl	dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    64ea:	f89d 3000 	ldrb.w	r3, [sp]
    64ee:	b2c2      	uxtb	r2, r0
    64f0:	2100      	movs	r1, #0
    64f2:	4293      	cmp	r3, r2
    64f4:	d003      	beq.n	64fe <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe32>
    64f6:	6863      	ldr	r3, [r4, #4]
    64f8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
    64fc:	e002      	b.n	6504 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe38>
    64fe:	6862      	ldr	r2, [r4, #4]
    6500:	f882 1262 	strb.w	r1, [r2, #610]	; 0x262
    6504:	f89d 2001 	ldrb.w	r2, [sp, #1]
    6508:	f3c0 2007 	ubfx	r0, r0, #8, #8
    650c:	4282      	cmp	r2, r0
    650e:	d003      	beq.n	6518 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe4c>
    6510:	6861      	ldr	r1, [r4, #4]
    6512:	f881 0263 	strb.w	r0, [r1, #611]	; 0x263
    6516:	bd38      	pop	{r3, r4, r5, pc}
    6518:	6860      	ldr	r0, [r4, #4]
    651a:	f880 1263 	strb.w	r1, [r0, #611]	; 0x263
    651e:	bd38      	pop	{r3, r4, r5, pc}
    6520:	200000f0 	.word	0x200000f0
    6524:	4a03      	ldr	r2, [pc, #12]	; (6534 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe68>)
    6526:	6852      	ldr	r2, [r2, #4]
    6528:	f882 012a 	strb.w	r0, [r2, #298]	; 0x12a
    652c:	f882 112b 	strb.w	r1, [r2, #299]	; 0x12b
    6530:	4770      	bx	lr
    6532:	0000      	.short	0x0000
    6534:	200000f0 	.word	0x200000f0
    6538:	b570      	push	{r4, r5, r6, lr}
    653a:	6841      	ldr	r1, [r0, #4]
    653c:	4604      	mov	r4, r0
    653e:	f891 00a5 	ldrb.w	r0, [r1, #165]	; 0xa5
    6542:	2814      	cmp	r0, #20
    6544:	d001      	beq.n	654a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe7e>
    6546:	2002      	movs	r0, #2
    6548:	bd70      	pop	{r4, r5, r6, pc}
    654a:	4d09      	ldr	r5, [pc, #36]	; (6570 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xea4>)
    654c:	f201 219b 	addw	r1, r1, #667	; 0x29b
    6550:	68a8      	ldr	r0, [r5, #8]
    6552:	f007 fd6a 	bl	e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>
    6556:	6861      	ldr	r1, [r4, #4]
    6558:	68a8      	ldr	r0, [r5, #8]
    655a:	f501 7192 	add.w	r1, r1, #292	; 0x124
    655e:	f007 fd61 	bl	e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>
    6562:	6861      	ldr	r1, [r4, #4]
    6564:	2017      	movs	r0, #23
    6566:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    656a:	2000      	movs	r0, #0
    656c:	bd70      	pop	{r4, r5, r6, pc}
    656e:	0000      	.short	0x0000
    6570:	200000e4 	.word	0x200000e4
    6574:	4901      	ldr	r1, [pc, #4]	; (657c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb0>)
    6576:	6889      	ldr	r1, [r1, #8]
    6578:	f7fc bc78 	b.w	2e6c <sym_RHE23VLW3YS5P4HRDMPTVWIHXVLEGJ7BJEAEEUI>
    657c:	200000e4 	.word	0x200000e4
    6580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6584:	4e1b      	ldr	r6, [pc, #108]	; (65f4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf28>)
    6586:	2500      	movs	r5, #0
    6588:	f106 010c 	add.w	r1, r6, #12
    658c:	2703      	movs	r7, #3
    658e:	f8d1 c004 	ldr.w	ip, [r1, #4]
    6592:	2401      	movs	r4, #1
    6594:	b1a0      	cbz	r0, 65c0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xef4>
    6596:	68b0      	ldr	r0, [r6, #8]
    6598:	78c0      	ldrb	r0, [r0, #3]
    659a:	f88c 0129 	strb.w	r0, [ip, #297]	; 0x129
    659e:	fa04 f000 	lsl.w	r0, r4, r0
    65a2:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    65a6:	b130      	cbz	r0, 65b6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeea>
    65a8:	f88c 70a5 	strb.w	r7, [ip, #165]	; 0xa5
    65ac:	f8ac 50dc 	strh.w	r5, [ip, #220]	; 0xdc
    65b0:	f88c 40e0 	strb.w	r4, [ip, #224]	; 0xe0
    65b4:	e019      	b.n	65ea <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf1e>
    65b6:	f240 6195 	movw	r1, #1685	; 0x695
    65ba:	2036      	movs	r0, #54	; 0x36
    65bc:	f7fa fa52 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65c0:	4688      	mov	r8, r1
    65c2:	2300      	movs	r3, #0
    65c4:	f89c 20a6 	ldrb.w	r2, [ip, #166]	; 0xa6
    65c8:	f10c 0088 	add.w	r0, ip, #136	; 0x88
    65cc:	4619      	mov	r1, r3
    65ce:	f007 fa95 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    65d2:	b168      	cbz	r0, 65f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf24>
    65d4:	68b0      	ldr	r0, [r6, #8]
    65d6:	78c1      	ldrb	r1, [r0, #3]
    65d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
    65dc:	f880 1128 	strb.w	r1, [r0, #296]	; 0x128
    65e0:	f800 7fa6 	strb.w	r7, [r0, #166]!
    65e4:	8785      	strh	r5, [r0, #60]	; 0x3c
    65e6:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
    65ea:	2000      	movs	r0, #0
    65ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    65f0:	2001      	movs	r0, #1
    65f2:	e7fb      	b.n	65ec <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf20>
    65f4:	200000e4 	.word	0x200000e4
    65f8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    65fc:	4604      	mov	r4, r0
    65fe:	6840      	ldr	r0, [r0, #4]
    6600:	2300      	movs	r3, #0
    6602:	4619      	mov	r1, r3
    6604:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    6608:	3088      	adds	r0, #136	; 0x88
    660a:	f007 fa77 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    660e:	b310      	cbz	r0, 6656 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8a>
    6610:	4d2e      	ldr	r5, [pc, #184]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    6612:	68a8      	ldr	r0, [r5, #8]
    6614:	f007 fd1a 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    6618:	b300      	cbz	r0, 665c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf90>
    661a:	68a8      	ldr	r0, [r5, #8]
    661c:	f007 fd10 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    6620:	4607      	mov	r7, r0
    6622:	68a8      	ldr	r0, [r5, #8]
    6624:	f007 fd10 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6628:	4680      	mov	r8, r0
    662a:	68a8      	ldr	r0, [r5, #8]
    662c:	f007 fd06 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6630:	4606      	mov	r6, r0
    6632:	68a8      	ldr	r0, [r5, #8]
    6634:	f007 fd06 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6638:	4601      	mov	r1, r0
    663a:	9700      	str	r7, [sp, #0]
    663c:	6860      	ldr	r0, [r4, #4]
    663e:	4643      	mov	r3, r8
    6640:	4632      	mov	r2, r6
    6642:	302c      	adds	r0, #44	; 0x2c
    6644:	f007 fe3e 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6648:	6860      	ldr	r0, [r4, #4]
    664a:	2501      	movs	r5, #1
    664c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    6650:	291d      	cmp	r1, #29
    6652:	d008      	beq.n	6666 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9a>
    6654:	e009      	b.n	666a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf9e>
    6656:	2001      	movs	r0, #1
    6658:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    665c:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    6660:	2000      	movs	r0, #0
    6662:	f7ff bf8d 	b.w	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6666:	f880 5060 	strb.w	r5, [r0, #96]	; 0x60
    666a:	6860      	ldr	r0, [r4, #4]
    666c:	2600      	movs	r6, #0
    666e:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    6672:	2901      	cmp	r1, #1
    6674:	d011      	beq.n	669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6676:	f890 113b 	ldrb.w	r1, [r0, #315]	; 0x13b
    667a:	f88d 1004 	strb.w	r1, [sp, #4]
    667e:	9901      	ldr	r1, [sp, #4]
    6680:	9101      	str	r1, [sp, #4]
    6682:	f89d 1004 	ldrb.w	r1, [sp, #4]
    6686:	b941      	cbnz	r1, 669a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfce>
    6688:	f890 113a 	ldrb.w	r1, [r0, #314]	; 0x13a
    668c:	f88d 1000 	strb.w	r1, [sp]
    6690:	9900      	ldr	r1, [sp, #0]
    6692:	9100      	str	r1, [sp, #0]
    6694:	f89d 1000 	ldrb.w	r1, [sp]
    6698:	b151      	cbz	r1, 66b0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfe4>
    669a:	211f      	movs	r1, #31
    669c:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66a0:	6860      	ldr	r0, [r4, #4]
    66a2:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    66a6:	6860      	ldr	r0, [r4, #4]
    66a8:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    66ac:	2000      	movs	r0, #0
    66ae:	e7d3      	b.n	6658 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xf8c>
    66b0:	211e      	movs	r1, #30
    66b2:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
    66b6:	4805      	ldr	r0, [pc, #20]	; (66cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1000>)
    66b8:	300c      	adds	r0, #12
    66ba:	6843      	ldr	r3, [r0, #4]
    66bc:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    66c0:	8818      	ldrh	r0, [r3, #0]
    66c2:	f503 72c0 	add.w	r2, r3, #384	; 0x180
    66c6:	f7fc faff 	bl	2cc8 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    66ca:	e7e9      	b.n	66a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xfd4>
    66cc:	200000e4 	.word	0x200000e4
    66d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    66d4:	4604      	mov	r4, r0
    66d6:	6840      	ldr	r0, [r0, #4]
    66d8:	2300      	movs	r3, #0
    66da:	210a      	movs	r1, #10
    66dc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    66e0:	3088      	adds	r0, #136	; 0x88
    66e2:	f007 fa0b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    66e6:	b370      	cbz	r0, 6746 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107a>
    66e8:	4d18      	ldr	r5, [pc, #96]	; (674c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1080>)
    66ea:	68a8      	ldr	r0, [r5, #8]
    66ec:	f007 fcae 	bl	e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>
    66f0:	b1e8      	cbz	r0, 672e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1062>
    66f2:	68a8      	ldr	r0, [r5, #8]
    66f4:	f007 fca4 	bl	e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>
    66f8:	4607      	mov	r7, r0
    66fa:	68a8      	ldr	r0, [r5, #8]
    66fc:	f007 fca4 	bl	e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>
    6700:	4680      	mov	r8, r0
    6702:	68a8      	ldr	r0, [r5, #8]
    6704:	f007 fc9a 	bl	e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>
    6708:	4606      	mov	r6, r0
    670a:	68a8      	ldr	r0, [r5, #8]
    670c:	f007 fc9a 	bl	e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>
    6710:	4601      	mov	r1, r0
    6712:	9700      	str	r7, [sp, #0]
    6714:	6860      	ldr	r0, [r4, #4]
    6716:	4643      	mov	r3, r8
    6718:	4632      	mov	r2, r6
    671a:	302c      	adds	r0, #44	; 0x2c
    671c:	f007 fdd2 	bl	e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    6720:	6860      	ldr	r0, [r4, #4]
    6722:	f007 fd41 	bl	e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    6726:	2104      	movs	r1, #4
    6728:	6860      	ldr	r0, [r4, #4]
    672a:	f008 fa1b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    672e:	6861      	ldr	r1, [r4, #4]
    6730:	2000      	movs	r0, #0
    6732:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6736:	6861      	ldr	r1, [r4, #4]
    6738:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    673c:	f7ff f9fa 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6740:	2000      	movs	r0, #0
    6742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6746:	e7ff      	b.n	6748 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x107c>
    6748:	2001      	movs	r0, #1
    674a:	e7fa      	b.n	6742 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1076>
    674c:	200000e4 	.word	0x200000e4
    6750:	4901      	ldr	r1, [pc, #4]	; (6758 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x108c>)
    6752:	6889      	ldr	r1, [r1, #8]
    6754:	f7fc bb58 	b.w	2e08 <sym_7ABLLIXUF3HMINU3DLWXJDVBNAU7RSUXPXZ3RFQ>
    6758:	200000e4 	.word	0x200000e4
    675c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6760:	4604      	mov	r4, r0
    6762:	6840      	ldr	r0, [r0, #4]
    6764:	f04f 0800 	mov.w	r8, #0
    6768:	b086      	sub	sp, #24
    676a:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    676e:	4643      	mov	r3, r8
    6770:	4641      	mov	r1, r8
    6772:	3088      	adds	r0, #136	; 0x88
    6774:	f007 f9c2 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6778:	b190      	cbz	r0, 67a0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d4>
    677a:	6860      	ldr	r0, [r4, #4]
    677c:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    6780:	2824      	cmp	r0, #36	; 0x24
    6782:	d011      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6784:	2825      	cmp	r0, #37	; 0x25
    6786:	d00f      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    6788:	2826      	cmp	r0, #38	; 0x26
    678a:	d00d      	beq.n	67a8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10dc>
    678c:	4668      	mov	r0, sp
    678e:	f7fa fefd 	bl	158c <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    6792:	b158      	cbz	r0, 67ac <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e0>
    6794:	9800      	ldr	r0, [sp, #0]
    6796:	a903      	add	r1, sp, #12
    6798:	78c0      	ldrb	r0, [r0, #3]
    679a:	f88d 000c 	strb.w	r0, [sp, #12]
    679e:	e006      	b.n	67ae <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10e2>
    67a0:	2001      	movs	r0, #1
    67a2:	b006      	add	sp, #24
    67a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67a8:	2020      	movs	r0, #32
    67aa:	e7fa      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67ac:	2100      	movs	r1, #0
    67ae:	6860      	ldr	r0, [r4, #4]
    67b0:	ab02      	add	r3, sp, #8
    67b2:	2216      	movs	r2, #22
    67b4:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    67b8:	f007 fa5b 	bl	dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    67bc:	2501      	movs	r5, #1
    67be:	2600      	movs	r6, #0
    67c0:	b180      	cbz	r0, 67e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1118>
    67c2:	2116      	movs	r1, #22
    67c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    67c8:	f7ff feac 	bl	6524 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe58>
    67cc:	6861      	ldr	r1, [r4, #4]
    67ce:	202f      	movs	r0, #47	; 0x2f
    67d0:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    67d4:	6860      	ldr	r0, [r4, #4]
    67d6:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    67da:	6860      	ldr	r0, [r4, #4]
    67dc:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    67e0:	2000      	movs	r0, #0
    67e2:	e7de      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    67e4:	4f29      	ldr	r7, [pc, #164]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    67e6:	68b8      	ldr	r0, [r7, #8]
    67e8:	f007 fc42 	bl	e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>
    67ec:	b1b8      	cbz	r0, 681e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1152>
    67ee:	68b8      	ldr	r0, [r7, #8]
    67f0:	6862      	ldr	r2, [r4, #4]
    67f2:	7901      	ldrb	r1, [r0, #4]
    67f4:	f001 0107 	and.w	r1, r1, #7
    67f8:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    67fc:	7940      	ldrb	r0, [r0, #5]
    67fe:	f000 0107 	and.w	r1, r0, #7
    6802:	6860      	ldr	r0, [r4, #4]
    6804:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    6808:	6860      	ldr	r0, [r4, #4]
    680a:	f890 2145 	ldrb.w	r2, [r0, #325]	; 0x145
    680e:	f88d 200c 	strb.w	r2, [sp, #12]
    6812:	9a03      	ldr	r2, [sp, #12]
    6814:	9203      	str	r2, [sp, #12]
    6816:	f89d 200c 	ldrb.w	r2, [sp, #12]
    681a:	bb5a      	cbnz	r2, 6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    681c:	e004      	b.n	6828 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x115c>
    681e:	2000      	movs	r0, #0
    6820:	f7ff feae 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    6824:	4680      	mov	r8, r0
    6826:	e02f      	b.n	6888 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11bc>
    6828:	f890 2144 	ldrb.w	r2, [r0, #324]	; 0x144
    682c:	2a01      	cmp	r2, #1
    682e:	d021      	beq.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    6830:	f100 026a 	add.w	r2, r0, #106	; 0x6a
    6834:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    6838:	7857      	ldrb	r7, [r2, #1]
    683a:	429f      	cmp	r7, r3
    683c:	d106      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    683e:	7812      	ldrb	r2, [r2, #0]
    6840:	428a      	cmp	r2, r1
    6842:	d103      	bne.n	684c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1180>
    6844:	2102      	movs	r1, #2
    6846:	f880 1144 	strb.w	r1, [r0, #324]	; 0x144
    684a:	e013      	b.n	6874 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11a8>
    684c:	480f      	ldr	r0, [pc, #60]	; (688c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c0>)
    684e:	300c      	adds	r0, #12
    6850:	6841      	ldr	r1, [r0, #4]
    6852:	f501 70cf 	add.w	r0, r1, #414	; 0x19e
    6856:	880a      	ldrh	r2, [r1, #0]
    6858:	f820 2b02 	strh.w	r2, [r0], #2
    685c:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
    6860:	f800 2b01 	strb.w	r2, [r0], #1
    6864:	f891 1063 	ldrb.w	r1, [r1, #99]	; 0x63
    6868:	f800 190d 	strb.w	r1, [r0], #-13
    686c:	2222      	movs	r2, #34	; 0x22
    686e:	4908      	ldr	r1, [pc, #32]	; (6890 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11c4>)
    6870:	f007 fc55 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6874:	6861      	ldr	r1, [r4, #4]
    6876:	2022      	movs	r0, #34	; 0x22
    6878:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    687c:	6860      	ldr	r0, [r4, #4]
    687e:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    6882:	6860      	ldr	r0, [r4, #4]
    6884:	f8a0 60e2 	strh.w	r6, [r0, #226]	; 0xe2
    6888:	4640      	mov	r0, r8
    688a:	e78a      	b.n	67a2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x10d6>
    688c:	200000e4 	.word	0x200000e4
    6890:	000101b3 	.word	0x000101b3
    6894:	b570      	push	{r4, r5, r6, lr}
    6896:	4604      	mov	r4, r0
    6898:	6840      	ldr	r0, [r0, #4]
    689a:	f890 00a5 	ldrb.w	r0, [r0, #165]	; 0xa5
    689e:	2820      	cmp	r0, #32
    68a0:	d001      	beq.n	68a6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x11da>
    68a2:	2001      	movs	r0, #1
    68a4:	bd70      	pop	{r4, r5, r6, pc}
    68a6:	4e16      	ldr	r6, [pc, #88]	; (6900 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1234>)
    68a8:	68b0      	ldr	r0, [r6, #8]
    68aa:	f007 fbf3 	bl	e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>
    68ae:	b1f0      	cbz	r0, 68ee <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1222>
    68b0:	68b0      	ldr	r0, [r6, #8]
    68b2:	6862      	ldr	r2, [r4, #4]
    68b4:	7901      	ldrb	r1, [r0, #4]
    68b6:	7940      	ldrb	r0, [r0, #5]
    68b8:	f001 0107 	and.w	r1, r1, #7
    68bc:	f361 0507 	bfi	r5, r1, #0, #8
    68c0:	4629      	mov	r1, r5
    68c2:	f000 0007 	and.w	r0, r0, #7
    68c6:	f360 210f 	bfi	r1, r0, #8, #8
    68ca:	2001      	movs	r0, #1
    68cc:	f882 00e0 	strb.w	r0, [r2, #224]	; 0xe0
    68d0:	6862      	ldr	r2, [r4, #4]
    68d2:	2000      	movs	r0, #0
    68d4:	f8a2 00dc 	strh.w	r0, [r2, #220]	; 0xdc
    68d8:	6862      	ldr	r2, [r4, #4]
    68da:	2024      	movs	r0, #36	; 0x24
    68dc:	f882 00a5 	strb.w	r0, [r2, #165]	; 0xa5
    68e0:	6860      	ldr	r0, [r4, #4]
    68e2:	f8d0 0146 	ldr.w	r0, [r0, #326]	; 0x146
    68e6:	f7ff fdf7 	bl	64d8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xe0c>
    68ea:	2000      	movs	r0, #0
    68ec:	bd70      	pop	{r4, r5, r6, pc}
    68ee:	2001      	movs	r0, #1
    68f0:	f7ff fe46 	bl	6580 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xeb4>
    68f4:	4604      	mov	r4, r0
    68f6:	201e      	movs	r0, #30
    68f8:	f7ff fdb6 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    68fc:	4620      	mov	r0, r4
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	200000e4 	.word	0x200000e4
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	4604      	mov	r4, r0
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	4d0a      	ldr	r5, [pc, #40]	; (6934 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1268>)
    690c:	f810 1ff6 	ldrb.w	r1, [r0, #246]!
    6910:	f041 0104 	orr.w	r1, r1, #4
    6914:	7001      	strb	r1, [r0, #0]
    6916:	68a8      	ldr	r0, [r5, #8]
    6918:	f007 fbc6 	bl	e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>
    691c:	4606      	mov	r6, r0
    691e:	68a8      	ldr	r0, [r5, #8]
    6920:	f007 fbc6 	bl	e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>
    6924:	4601      	mov	r1, r0
    6926:	4622      	mov	r2, r4
    6928:	4630      	mov	r0, r6
    692a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    692e:	f000 b8b3 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    6932:	0000      	.short	0x0000
    6934:	200000e4 	.word	0x200000e4
    6938:	4a11      	ldr	r2, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693a:	4911      	ldr	r1, [pc, #68]	; (6980 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12b4>)
    693c:	320c      	adds	r2, #12
    693e:	6852      	ldr	r2, [r2, #4]
    6940:	6889      	ldr	r1, [r1, #8]
    6942:	f892 30a5 	ldrb.w	r3, [r2, #165]	; 0xa5
    6946:	7909      	ldrb	r1, [r1, #4]
    6948:	f1a3 0210 	sub.w	r2, r3, #16
    694c:	2a0c      	cmp	r2, #12
    694e:	d801      	bhi.n	6954 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1288>
    6950:	2303      	movs	r3, #3
    6952:	e008      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6954:	2b28      	cmp	r3, #40	; 0x28
    6956:	d00a      	beq.n	696e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a2>
    6958:	2b1d      	cmp	r3, #29
    695a:	d00a      	beq.n	6972 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12a6>
    695c:	2b05      	cmp	r3, #5
    695e:	d00a      	beq.n	6976 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12aa>
    6960:	2b20      	cmp	r3, #32
    6962:	d00a      	beq.n	697a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ae>
    6964:	23fe      	movs	r3, #254	; 0xfe
    6966:	4602      	mov	r2, r0
    6968:	4618      	mov	r0, r3
    696a:	f000 b895 	b.w	6a98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13cc>
    696e:	2323      	movs	r3, #35	; 0x23
    6970:	e7f9      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6972:	2314      	movs	r3, #20
    6974:	e7f7      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    6976:	2312      	movs	r3, #18
    6978:	e7f5      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697a:	2316      	movs	r3, #22
    697c:	e7f3      	b.n	6966 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x129a>
    697e:	0000      	.short	0x0000
    6980:	200000e4 	.word	0x200000e4
    6984:	b570      	push	{r4, r5, r6, lr}
    6986:	4604      	mov	r4, r0
    6988:	6840      	ldr	r0, [r0, #4]
    698a:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    698e:	291b      	cmp	r1, #27
    6990:	d001      	beq.n	6996 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12ca>
    6992:	2002      	movs	r0, #2
    6994:	bd70      	pop	{r4, r5, r6, pc}
    6996:	2500      	movs	r5, #0
    6998:	f880 50e5 	strb.w	r5, [r0, #229]	; 0xe5
    699c:	6860      	ldr	r0, [r4, #4]
    699e:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    69a2:	6860      	ldr	r0, [r4, #4]
    69a4:	f880 5278 	strb.w	r5, [r0, #632]	; 0x278
    69a8:	6860      	ldr	r0, [r4, #4]
    69aa:	f890 10e6 	ldrb.w	r1, [r0, #230]	; 0xe6
    69ae:	b161      	cbz	r1, 69ca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x12fe>
    69b0:	f880 50e6 	strb.w	r5, [r0, #230]	; 0xe6
    69b4:	6860      	ldr	r0, [r4, #4]
    69b6:	220d      	movs	r2, #13
    69b8:	8801      	ldrh	r1, [r0, #0]
    69ba:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69be:	6860      	ldr	r0, [r4, #4]
    69c0:	490d      	ldr	r1, [pc, #52]	; (69f8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x132c>)
    69c2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69c6:	6860      	ldr	r0, [r4, #4]
    69c8:	e00c      	b.n	69e4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1318>
    69ca:	8801      	ldrh	r1, [r0, #0]
    69cc:	f8a0 121e 	strh.w	r1, [r0, #542]	; 0x21e
    69d0:	6860      	ldr	r0, [r4, #4]
    69d2:	f880 521c 	strb.w	r5, [r0, #540]	; 0x21c
    69d6:	6861      	ldr	r1, [r4, #4]
    69d8:	2001      	movs	r0, #1
    69da:	220c      	movs	r2, #12
    69dc:	f881 0220 	strb.w	r0, [r1, #544]	; 0x220
    69e0:	4906      	ldr	r1, [pc, #24]	; (69fc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1330>)
    69e2:	6860      	ldr	r0, [r4, #4]
    69e4:	f200 2012 	addw	r0, r0, #530	; 0x212
    69e8:	f007 fb99 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    69ec:	6860      	ldr	r0, [r4, #4]
    69ee:	f880 50a5 	strb.w	r5, [r0, #165]	; 0xa5
    69f2:	2000      	movs	r0, #0
    69f4:	bd70      	pop	{r4, r5, r6, pc}
    69f6:	0000      	.short	0x0000
    69f8:	0000e5bf 	.word	0x0000e5bf
    69fc:	0000e5a1 	.word	0x0000e5a1
    6a00:	b510      	push	{r4, lr}
    6a02:	4604      	mov	r4, r0
    6a04:	6840      	ldr	r0, [r0, #4]
    6a06:	2300      	movs	r3, #0
    6a08:	2101      	movs	r1, #1
    6a0a:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    6a0e:	3088      	adds	r0, #136	; 0x88
    6a10:	f007 f874 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6a14:	b108      	cbz	r0, 6a1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134e>
    6a16:	2000      	movs	r0, #0
    6a18:	bd10      	pop	{r4, pc}
    6a1a:	4809      	ldr	r0, [pc, #36]	; (6a40 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1374>)
    6a1c:	6880      	ldr	r0, [r0, #8]
    6a1e:	f007 fb63 	bl	e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>
    6a22:	6861      	ldr	r1, [r4, #4]
    6a24:	f881 00a8 	strb.w	r0, [r1, #168]	; 0xa8
    6a28:	6861      	ldr	r1, [r4, #4]
    6a2a:	2006      	movs	r0, #6
    6a2c:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    6a30:	6861      	ldr	r1, [r4, #4]
    6a32:	2000      	movs	r0, #0
    6a34:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    6a38:	6861      	ldr	r1, [r4, #4]
    6a3a:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6a3e:	e7ea      	b.n	6a16 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x134a>
    6a40:	200000e4 	.word	0x200000e4
    6a44:	4602      	mov	r2, r0
    6a46:	480f      	ldr	r0, [pc, #60]	; (6a84 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b8>)
    6a48:	b510      	push	{r4, lr}
    6a4a:	6880      	ldr	r0, [r0, #8]
    6a4c:	6851      	ldr	r1, [r2, #4]
    6a4e:	2400      	movs	r4, #0
    6a50:	7900      	ldrb	r0, [r0, #4]
    6a52:	f891 10a5 	ldrb.w	r1, [r1, #165]	; 0xa5
    6a56:	2812      	cmp	r0, #18
    6a58:	d006      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5a:	2814      	cmp	r0, #20
    6a5c:	d004      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a5e:	2816      	cmp	r0, #22
    6a60:	d002      	beq.n	6a68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x139c>
    6a62:	2823      	cmp	r0, #35	; 0x23
    6a64:	d10c      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a66:	e004      	b.n	6a72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13a6>
    6a68:	2101      	movs	r1, #1
    6a6a:	f000 f91d 	bl	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6a6e:	4604      	mov	r4, r0
    6a70:	e006      	b.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a72:	2928      	cmp	r1, #40	; 0x28
    6a74:	d104      	bne.n	6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a76:	4804      	ldr	r0, [pc, #16]	; (6a88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13bc>)
    6a78:	6801      	ldr	r1, [r0, #0]
    6a7a:	b109      	cbz	r1, 6a80 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13b4>
    6a7c:	4610      	mov	r0, r2
    6a7e:	4788      	blx	r1
    6a80:	4620      	mov	r0, r4
    6a82:	bd10      	pop	{r4, pc}
    6a84:	200000e4 	.word	0x200000e4
    6a88:	20000254 	.word	0x20000254
    6a8c:	4901      	ldr	r1, [pc, #4]	; (6a94 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13c8>)
    6a8e:	6889      	ldr	r1, [r1, #8]
    6a90:	f7fc ba46 	b.w	2f20 <sym_365Y77DXDRWJHR4QPTXJM46KZ7L557J533F2SNY>
    6a94:	200000e4 	.word	0x200000e4
    6a98:	4603      	mov	r3, r0
    6a9a:	2000      	movs	r0, #0
    6a9c:	2b23      	cmp	r3, #35	; 0x23
    6a9e:	d017      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6aa0:	dc0b      	bgt.n	6aba <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13ee>
    6aa2:	2b03      	cmp	r3, #3
    6aa4:	d011      	beq.n	6aca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fe>
    6aa6:	2b12      	cmp	r3, #18
    6aa8:	d003      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aaa:	2b14      	cmp	r3, #20
    6aac:	d001      	beq.n	6ab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13e6>
    6aae:	2b16      	cmp	r3, #22
    6ab0:	d10a      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ab2:	2100      	movs	r1, #0
    6ab4:	4618      	mov	r0, r3
    6ab6:	f000 b8f7 	b.w	6ca8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15dc>
    6aba:	2b24      	cmp	r3, #36	; 0x24
    6abc:	d008      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6abe:	2b25      	cmp	r3, #37	; 0x25
    6ac0:	d006      	beq.n	6ad0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1404>
    6ac2:	2bfe      	cmp	r3, #254	; 0xfe
    6ac4:	d100      	bne.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ac6:	2002      	movs	r0, #2
    6ac8:	4770      	bx	lr
    6aca:	4608      	mov	r0, r1
    6acc:	f7ff b846 	b.w	5b5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x490>
    6ad0:	4a02      	ldr	r2, [pc, #8]	; (6adc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1410>)
    6ad2:	6812      	ldr	r2, [r2, #0]
    6ad4:	2a00      	cmp	r2, #0
    6ad6:	d0f7      	beq.n	6ac8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x13fc>
    6ad8:	4618      	mov	r0, r3
    6ada:	4710      	bx	r2
    6adc:	20000250 	.word	0x20000250
    6ae0:	280c      	cmp	r0, #12
    6ae2:	d01a      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae4:	2813      	cmp	r0, #19
    6ae6:	d018      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6ae8:	2818      	cmp	r0, #24
    6aea:	d016      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6aec:	4910      	ldr	r1, [pc, #64]	; (6b30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1464>)
    6aee:	2200      	movs	r2, #0
    6af0:	2811      	cmp	r0, #17
    6af2:	6849      	ldr	r1, [r1, #4]
    6af4:	d012      	beq.n	6b1c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1450>
    6af6:	2807      	cmp	r0, #7
    6af8:	d00f      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afa:	2809      	cmp	r0, #9
    6afc:	d00d      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6afe:	2815      	cmp	r0, #21
    6b00:	d012      	beq.n	6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b02:	2824      	cmp	r0, #36	; 0x24
    6b04:	d009      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b06:	2801      	cmp	r0, #1
    6b08:	d007      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0a:	2800      	cmp	r0, #0
    6b0c:	d005      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b0e:	2802      	cmp	r0, #2
    6b10:	d003      	beq.n	6b1a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x144e>
    6b12:	f821 2fdc 	strh.w	r2, [r1, #220]!
    6b16:	2001      	movs	r0, #1
    6b18:	7108      	strb	r0, [r1, #4]
    6b1a:	4770      	bx	lr
    6b1c:	f891 0130 	ldrb.w	r0, [r1, #304]	; 0x130
    6b20:	b110      	cbz	r0, 6b28 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x145c>
    6b22:	f8a1 20dc 	strh.w	r2, [r1, #220]	; 0xdc
    6b26:	4770      	bx	lr
    6b28:	f8a1 20e2 	strh.w	r2, [r1, #226]	; 0xe2
    6b2c:	4770      	bx	lr
    6b2e:	0000      	.short	0x0000
    6b30:	200000f0 	.word	0x200000f0
    6b34:	4904      	ldr	r1, [pc, #16]	; (6b48 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x147c>)
    6b36:	2000      	movs	r0, #0
    6b38:	6849      	ldr	r1, [r1, #4]
    6b3a:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    6b3e:	f8a1 00dc 	strh.w	r0, [r1, #220]	; 0xdc
    6b42:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    6b46:	4770      	bx	lr
    6b48:	200000f0 	.word	0x200000f0
    6b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6b50:	4d53      	ldr	r5, [pc, #332]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6b52:	4680      	mov	r8, r0
    6b54:	460f      	mov	r7, r1
    6b56:	6868      	ldr	r0, [r5, #4]
    6b58:	f100 0488 	add.w	r4, r0, #136	; 0x88
    6b5c:	f890 0138 	ldrb.w	r0, [r0, #312]	; 0x138
    6b60:	f88d 0000 	strb.w	r0, [sp]
    6b64:	9800      	ldr	r0, [sp, #0]
    6b66:	9000      	str	r0, [sp, #0]
    6b68:	f89d 0000 	ldrb.w	r0, [sp]
    6b6c:	2600      	movs	r6, #0
    6b6e:	b930      	cbnz	r0, 6b7e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14b2>
    6b70:	7fe2      	ldrb	r2, [r4, #31]
    6b72:	2300      	movs	r3, #0
    6b74:	2101      	movs	r1, #1
    6b76:	4620      	mov	r0, r4
    6b78:	f006 ffc0 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6b7c:	b120      	cbz	r0, 6b88 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14bc>
    6b7e:	f8b4 0052 	ldrh.w	r0, [r4, #82]	; 0x52
    6b82:	1c40      	adds	r0, r0, #1
    6b84:	f8a4 0052 	strh.w	r0, [r4, #82]	; 0x52
    6b88:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
    6b8c:	b121      	cbz	r1, 6b98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14cc>
    6b8e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
    6b92:	1c40      	adds	r0, r0, #1
    6b94:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
    6b98:	f994 005c 	ldrsb.w	r0, [r4, #92]	; 0x5c
    6b9c:	b120      	cbz	r0, 6ba8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14dc>
    6b9e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
    6ba2:	1c52      	adds	r2, r2, #1
    6ba4:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    6ba8:	f1b8 0f00 	cmp.w	r8, #0
    6bac:	d114      	bne.n	6bd8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x150c>
    6bae:	4a3c      	ldr	r2, [pc, #240]	; (6ca0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d4>)
    6bb0:	3a0c      	subs	r2, #12
    6bb2:	7812      	ldrb	r2, [r2, #0]
    6bb4:	2a02      	cmp	r2, #2
    6bb6:	d006      	beq.n	6bc6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fa>
    6bb8:	2a01      	cmp	r2, #1
    6bba:	d006      	beq.n	6bca <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x14fe>
    6bbc:	b1df      	cbz	r7, 6bf6 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x152a>
    6bbe:	06f8      	lsls	r0, r7, #27
    6bc0:	d508      	bpl.n	6bd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1508>
    6bc2:	201e      	movs	r0, #30
    6bc4:	e043      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bc6:	2016      	movs	r0, #22
    6bc8:	e041      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bca:	6868      	ldr	r0, [r5, #4]
    6bcc:	f890 00a8 	ldrb.w	r0, [r0, #168]	; 0xa8
    6bd0:	bba0      	cbnz	r0, 6c3c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1570>
    6bd2:	e05e      	b.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6bd4:	0738      	lsls	r0, r7, #28
    6bd6:	d501      	bpl.n	6bdc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1510>
    6bd8:	203d      	movs	r0, #61	; 0x3d
    6bda:	e038      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bdc:	07b8      	lsls	r0, r7, #30
    6bde:	d001      	beq.n	6be4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1518>
    6be0:	202a      	movs	r0, #42	; 0x2a
    6be2:	e034      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6be4:	06b8      	lsls	r0, r7, #26
    6be6:	d404      	bmi.n	6bf2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1526>
    6be8:	f640 515f 	movw	r1, #3423	; 0xd5f
    6bec:	2036      	movs	r0, #54	; 0x36
    6bee:	f7f9 ff39 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6bf2:	2023      	movs	r0, #35	; 0x23
    6bf4:	e02b      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6bf6:	b129      	cbz	r1, 6c04 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1538>
    6bf8:	f8b4 1054 	ldrh.w	r1, [r4, #84]	; 0x54
    6bfc:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c00:	4291      	cmp	r1, r2
    6c02:	d81a      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c04:	b128      	cbz	r0, 6c12 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1546>
    6c06:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
    6c0a:	f8b4 1056 	ldrh.w	r1, [r4, #86]	; 0x56
    6c0e:	4288      	cmp	r0, r1
    6c10:	d813      	bhi.n	6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c12:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
    6c16:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
    6c1a:	4281      	cmp	r1, r0
    6c1c:	d309      	bcc.n	6c32 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1566>
    6c1e:	686a      	ldr	r2, [r5, #4]
    6c20:	f892 2138 	ldrb.w	r2, [r2, #312]	; 0x138
    6c24:	f88d 2000 	strb.w	r2, [sp]
    6c28:	9a00      	ldr	r2, [sp, #0]
    6c2a:	9200      	str	r2, [sp, #0]
    6c2c:	f89d 2000 	ldrb.w	r2, [sp]
    6c30:	b91a      	cbnz	r2, 6c3a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x156e>
    6c32:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
    6c36:	4291      	cmp	r1, r2
    6c38:	d301      	bcc.n	6c3e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1572>
    6c3a:	2022      	movs	r0, #34	; 0x22
    6c3c:	e007      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c3e:	f894 1021 	ldrb.w	r1, [r4, #33]	; 0x21
    6c42:	b301      	cbz	r1, 6c86 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15ba>
    6c44:	f8b4 104e 	ldrh.w	r1, [r4, #78]	; 0x4e
    6c48:	4281      	cmp	r1, r0
    6c4a:	d322      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c4c:	2008      	movs	r0, #8
    6c4e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    6c52:	220b      	movs	r2, #11
    6c54:	4913      	ldr	r1, [pc, #76]	; (6ca4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15d8>)
    6c56:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c5a:	f007 fa60 	bl	e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>
    6c5e:	7766      	strb	r6, [r4, #29]
    6c60:	77a6      	strb	r6, [r4, #30]
    6c62:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
    6c66:	2102      	movs	r1, #2
    6c68:	6868      	ldr	r0, [r5, #4]
    6c6a:	f007 ff7b 	bl	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c6e:	6868      	ldr	r0, [r5, #4]
    6c70:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    6c74:	2901      	cmp	r1, #1
    6c76:	d104      	bne.n	6c82 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15b6>
    6c78:	f8d0 0258 	ldr.w	r0, [r0, #600]	; 0x258
    6c7c:	7801      	ldrb	r1, [r0, #0]
    6c7e:	1e49      	subs	r1, r1, #1
    6c80:	7001      	strb	r1, [r0, #0]
    6c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6c86:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    6c8a:	2806      	cmp	r0, #6
    6c8c:	d301      	bcc.n	6c92 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x15c6>
    6c8e:	203e      	movs	r0, #62	; 0x3e
    6c90:	e7dd      	b.n	6c4e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1582>
    6c92:	6868      	ldr	r0, [r5, #4]
    6c94:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6c98:	2100      	movs	r1, #0
    6c9a:	f007 bf63 	b.w	eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    6c9e:	0000      	.short	0x0000
    6ca0:	200000f0 	.word	0x200000f0
    6ca4:	0000e51f 	.word	0x0000e51f
    6ca8:	b570      	push	{r4, r5, r6, lr}
    6caa:	460e      	mov	r6, r1
    6cac:	4601      	mov	r1, r0
    6cae:	6850      	ldr	r0, [r2, #4]
    6cb0:	4614      	mov	r4, r2
    6cb2:	2500      	movs	r5, #0
    6cb4:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    6cb8:	481d      	ldr	r0, [pc, #116]	; (6d30 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1664>)
    6cba:	6840      	ldr	r0, [r0, #4]
    6cbc:	3088      	adds	r0, #136	; 0x88
    6cbe:	2912      	cmp	r1, #18
    6cc0:	d008      	beq.n	6cd4 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1608>
    6cc2:	2914      	cmp	r1, #20
    6cc4:	d010      	beq.n	6ce8 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x161c>
    6cc6:	2916      	cmp	r1, #22
    6cc8:	d01e      	beq.n	6d08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x163c>
    6cca:	f240 613e 	movw	r1, #1598	; 0x63e
    6cce:	2036      	movs	r0, #54	; 0x36
    6cd0:	f7f9 fec8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6cd4:	2109      	movs	r1, #9
    6cd6:	2300      	movs	r3, #0
    6cd8:	f006 ff10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cdc:	b330      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cde:	4620      	mov	r0, r4
    6ce0:	f008 f8e5 	bl	eeae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xb2>
    6ce4:	4605      	mov	r5, r0
    6ce6:	e021      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6ce8:	210a      	movs	r1, #10
    6cea:	2300      	movs	r3, #0
    6cec:	f006 ff06 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    6cf0:	b1e0      	cbz	r0, 6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6cf2:	f7ff ff1f 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6cf6:	b126      	cbz	r6, 6d02 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1636>
    6cf8:	6860      	ldr	r0, [r4, #4]
    6cfa:	2105      	movs	r1, #5
    6cfc:	30f6      	adds	r0, #246	; 0xf6
    6cfe:	f008 f86f 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d02:	f7fe ff17 	bl	5b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x468>
    6d06:	e011      	b.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d08:	2a20      	cmp	r2, #32
    6d0a:	d10f      	bne.n	6d2c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1660>
    6d0c:	f7ff ff12 	bl	6b34 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1468>
    6d10:	b14e      	cbz	r6, 6d26 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x165a>
    6d12:	6860      	ldr	r0, [r4, #4]
    6d14:	2108      	movs	r1, #8
    6d16:	30f6      	adds	r0, #246	; 0xf6
    6d18:	f008 f862 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d1c:	6860      	ldr	r0, [r4, #4]
    6d1e:	210b      	movs	r1, #11
    6d20:	30f6      	adds	r0, #246	; 0xf6
    6d22:	f008 f85d 	bl	ede0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x206>
    6d26:	201a      	movs	r0, #26
    6d28:	f7ff fb9e 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    6d2c:	4628      	mov	r0, r5
    6d2e:	bd70      	pop	{r4, r5, r6, pc}
    6d30:	200000f0 	.word	0x200000f0
    6d34:	4a19      	ldr	r2, [pc, #100]	; (6d9c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16d0>)
    6d36:	2901      	cmp	r1, #1
    6d38:	6852      	ldr	r2, [r2, #4]
    6d3a:	d010      	beq.n	6d5e <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1692>
    6d3c:	2100      	movs	r1, #0
    6d3e:	b1c8      	cbz	r0, 6d74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a8>
    6d40:	2801      	cmp	r0, #1
    6d42:	d022      	beq.n	6d8a <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16be>
    6d44:	2803      	cmp	r0, #3
    6d46:	d109      	bne.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d48:	f892 00a5 	ldrb.w	r0, [r2, #165]	; 0xa5
    6d4c:	2814      	cmp	r0, #20
    6d4e:	d005      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d50:	2817      	cmp	r0, #23
    6d52:	d003      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d54:	2819      	cmp	r0, #25
    6d56:	d001      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d58:	f882 1278 	strb.w	r1, [r2, #632]	; 0x278
    6d5c:	4770      	bx	lr
    6d5e:	f892 012e 	ldrb.w	r0, [r2, #302]	; 0x12e
    6d62:	2801      	cmp	r0, #1
    6d64:	d0fa      	beq.n	6d5c <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x1690>
    6d66:	bf00      	nop
    6d68:	f8d2 0258 	ldr.w	r0, [r2, #600]	; 0x258
    6d6c:	7801      	ldrb	r1, [r0, #0]
    6d6e:	1e49      	subs	r1, r1, #1
    6d70:	7001      	strb	r1, [r0, #0]
    6d72:	4770      	bx	lr
    6d74:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d78:	f8b2 3266 	ldrh.w	r3, [r2, #614]	; 0x266
    6d7c:	1ac0      	subs	r0, r0, r3
    6d7e:	b200      	sxth	r0, r0
    6d80:	2800      	cmp	r0, #0
    6d82:	dbf6      	blt.n	6d72 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x16a6>
    6d84:	f882 1264 	strb.w	r1, [r2, #612]	; 0x264
    6d88:	4770      	bx	lr
    6d8a:	f8b2 009c 	ldrh.w	r0, [r2, #156]	; 0x9c
    6d8e:	f8b2 125e 	ldrh.w	r1, [r2, #606]	; 0x25e
    6d92:	1a40      	subs	r0, r0, r1
    6d94:	b200      	sxth	r0, r0
    6d96:	2800      	cmp	r0, #0
    6d98:	dae6      	bge.n	6d68 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x169c>
    6d9a:	4770      	bx	lr
    6d9c:	200000f0 	.word	0x200000f0

00006da0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    6da0:	b510      	push	{r4, lr}
    6da2:	6981      	ldr	r1, [r0, #24]
    6da4:	b119      	cbz	r1, 6dae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    6da6:	6882      	ldr	r2, [r0, #8]
    6da8:	688b      	ldr	r3, [r1, #8]
    6daa:	429a      	cmp	r2, r3
    6dac:	d203      	bcs.n	6db6 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    6dae:	21c0      	movs	r1, #192	; 0xc0
    6db0:	2037      	movs	r0, #55	; 0x37
    6db2:	f7f9 fe57 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6db6:	6942      	ldr	r2, [r0, #20]
    6db8:	614a      	str	r2, [r1, #20]
    6dba:	6903      	ldr	r3, [r0, #16]
    6dbc:	610b      	str	r3, [r1, #16]
    6dbe:	b10a      	cbz	r2, 6dc4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    6dc0:	6111      	str	r1, [r2, #16]
    6dc2:	e001      	b.n	6dc8 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    6dc4:	4a06      	ldr	r2, [pc, #24]	; (6de0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    6dc6:	6011      	str	r1, [r2, #0]
    6dc8:	690a      	ldr	r2, [r1, #16]
    6dca:	b132      	cbz	r2, 6dda <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    6dcc:	6151      	str	r1, [r2, #20]
    6dce:	e9d0 2002 	ldrd	r2, r0, [r0, #8]
    6dd2:	4410      	add	r0, r2
    6dd4:	688a      	ldr	r2, [r1, #8]
    6dd6:	1a80      	subs	r0, r0, r2
    6dd8:	e000      	b.n	6ddc <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    6dda:	2000      	movs	r0, #0
    6ddc:	60c8      	str	r0, [r1, #12]
    6dde:	bd10      	pop	{r4, pc}
    6de0:	20000258 	.word	0x20000258

00006de4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    6de4:	b510      	push	{r4, lr}
    6de6:	2200      	movs	r2, #0
    6de8:	6141      	str	r1, [r0, #20]
    6dea:	b189      	cbz	r1, 6e10 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    6dec:	690b      	ldr	r3, [r1, #16]
    6dee:	6108      	str	r0, [r1, #16]
    6df0:	6103      	str	r3, [r0, #16]
    6df2:	b103      	cbz	r3, 6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6df4:	6158      	str	r0, [r3, #20]
    6df6:	6941      	ldr	r1, [r0, #20]
    6df8:	60c2      	str	r2, [r0, #12]
    6dfa:	2900      	cmp	r1, #0
    6dfc:	d00f      	beq.n	6e1e <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    6dfe:	68cb      	ldr	r3, [r1, #12]
    6e00:	b163      	cbz	r3, 6e1c <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    6e02:	6884      	ldr	r4, [r0, #8]
    6e04:	42a3      	cmp	r3, r4
    6e06:	d207      	bcs.n	6e18 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    6e08:	212b      	movs	r1, #43	; 0x2b
    6e0a:	2037      	movs	r0, #55	; 0x37
    6e0c:	f7f9 fe2a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e10:	4903      	ldr	r1, [pc, #12]	; (6e20 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    6e12:	6102      	str	r2, [r0, #16]
    6e14:	6008      	str	r0, [r1, #0]
    6e16:	e7ee      	b.n	6df6 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    6e18:	1b1b      	subs	r3, r3, r4
    6e1a:	60c3      	str	r3, [r0, #12]
    6e1c:	60ca      	str	r2, [r1, #12]
    6e1e:	bd10      	pop	{r4, pc}
    6e20:	20000258 	.word	0x20000258

00006e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    6e24:	6941      	ldr	r1, [r0, #20]
    6e26:	b149      	cbz	r1, 6e3c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    6e28:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    6e2c:	441a      	add	r2, r3
    6e2e:	68cb      	ldr	r3, [r1, #12]
    6e30:	441a      	add	r2, r3
    6e32:	60ca      	str	r2, [r1, #12]
    6e34:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
    6e38:	6111      	str	r1, [r2, #16]
    6e3a:	e002      	b.n	6e42 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    6e3c:	4a06      	ldr	r2, [pc, #24]	; (6e58 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    6e3e:	6901      	ldr	r1, [r0, #16]
    6e40:	6011      	str	r1, [r2, #0]
    6e42:	e9d0 1004 	ldrd	r1, r0, [r0, #16]
    6e46:	b109      	cbz	r1, 6e4c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    6e48:	6148      	str	r0, [r1, #20]
    6e4a:	4770      	bx	lr
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d0fc      	beq.n	6e4a <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    6e50:	2100      	movs	r1, #0
    6e52:	60c1      	str	r1, [r0, #12]
    6e54:	4770      	bx	lr
    6e56:	0000      	.short	0x0000
    6e58:	20000258 	.word	0x20000258

00006e5c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    6e5c:	b510      	push	{r4, lr}
    6e5e:	4604      	mov	r4, r0
    6e60:	490a      	ldr	r1, [pc, #40]	; (6e8c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    6e62:	2000      	movs	r0, #0
    6e64:	4602      	mov	r2, r0
    6e66:	6809      	ldr	r1, [r1, #0]
    6e68:	1e43      	subs	r3, r0, #1
    6e6a:	e008      	b.n	6e7e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    6e6c:	68ca      	ldr	r2, [r1, #12]
    6e6e:	42a2      	cmp	r2, r4
    6e70:	d303      	bcc.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e72:	429a      	cmp	r2, r3
    6e74:	d201      	bcs.n	6e7a <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    6e76:	4613      	mov	r3, r2
    6e78:	4608      	mov	r0, r1
    6e7a:	460a      	mov	r2, r1
    6e7c:	6909      	ldr	r1, [r1, #16]
    6e7e:	2900      	cmp	r1, #0
    6e80:	d1f4      	bne.n	6e6c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    6e82:	2800      	cmp	r0, #0
    6e84:	d100      	bne.n	6e88 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    6e86:	4610      	mov	r0, r2
    6e88:	bd10      	pop	{r4, pc}
    6e8a:	0000      	.short	0x0000
    6e8c:	20000258 	.word	0x20000258

00006e90 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    6e90:	4801      	ldr	r0, [pc, #4]	; (6e98 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    6e92:	6800      	ldr	r0, [r0, #0]
    6e94:	4770      	bx	lr
    6e96:	0000      	.short	0x0000
    6e98:	20000258 	.word	0x20000258

00006e9c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    6e9c:	4804      	ldr	r0, [pc, #16]	; (6eb0 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    6e9e:	6801      	ldr	r1, [r0, #0]
    6ea0:	2000      	movs	r0, #0
    6ea2:	e001      	b.n	6ea8 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    6ea4:	4608      	mov	r0, r1
    6ea6:	6909      	ldr	r1, [r1, #16]
    6ea8:	2900      	cmp	r1, #0
    6eaa:	d1fb      	bne.n	6ea4 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    6eac:	4770      	bx	lr
    6eae:	0000      	.short	0x0000
    6eb0:	20000258 	.word	0x20000258

00006eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    6eb4:	4801      	ldr	r0, [pc, #4]	; (6ebc <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    6eb6:	2100      	movs	r1, #0
    6eb8:	6001      	str	r1, [r0, #0]
    6eba:	4770      	bx	lr
    6ebc:	20000258 	.word	0x20000258

00006ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    6ec0:	4903      	ldr	r1, [pc, #12]	; (6ed0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    6ec2:	2000      	movs	r0, #0
    6ec4:	6809      	ldr	r1, [r1, #0]
    6ec6:	2900      	cmp	r1, #0
    6ec8:	d000      	beq.n	6ecc <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    6eca:	200c      	movs	r0, #12
    6ecc:	4770      	bx	lr
    6ece:	0000      	.short	0x0000
    6ed0:	20000258 	.word	0x20000258

00006ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>:
    6ed4:	b570      	push	{r4, r5, r6, lr}
    6ed6:	6844      	ldr	r4, [r0, #4]
    6ed8:	220d      	movs	r2, #13
    6eda:	f504 759c 	add.w	r5, r4, #312	; 0x138
    6ede:	2100      	movs	r1, #0
    6ee0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    6ee4:	f009 fc3d 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6ee8:	f44f 70a7 	mov.w	r0, #334	; 0x14e
    6eec:	2100      	movs	r1, #0
    6eee:	f8a4 114c 	strh.w	r1, [r4, #332]	; 0x14c
    6ef2:	5501      	strb	r1, [r0, r4]
    6ef4:	f8a5 1017 	strh.w	r1, [r5, #23]
    6ef8:	7669      	strb	r1, [r5, #25]
    6efa:	4608      	mov	r0, r1
    6efc:	f05f 017f 	movs.w	r1, #127	; 0x7f
    6f00:	eb04 0240 	add.w	r2, r4, r0, lsl #1
    6f04:	1c40      	adds	r0, r0, #1
    6f06:	b2c0      	uxtb	r0, r0
    6f08:	f882 107d 	strb.w	r1, [r2, #125]	; 0x7d
    6f0c:	2802      	cmp	r0, #2
    6f0e:	d3f7      	bcc.n	6f00 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x2c>
    6f10:	f994 106e 	ldrsb.w	r1, [r4, #110]	; 0x6e
    6f14:	4620      	mov	r0, r4
    6f16:	f008 fa4e 	bl	f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>
    6f1a:	2000      	movs	r0, #0
    6f1c:	21ff      	movs	r1, #255	; 0xff
    6f1e:	1822      	adds	r2, r4, r0
    6f20:	1c40      	adds	r0, r0, #1
    6f22:	b2c0      	uxtb	r0, r0
    6f24:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
    6f28:	2802      	cmp	r0, #2
    6f2a:	d3f8      	bcc.n	6f1e <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI+0x4a>
    6f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    6f30:	b500      	push	{lr}
    6f32:	7941      	ldrb	r1, [r0, #5]
    6f34:	b095      	sub	sp, #84	; 0x54
    6f36:	b141      	cbz	r1, 6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f38:	2901      	cmp	r1, #1
    6f3a:	d006      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f3c:	2902      	cmp	r1, #2
    6f3e:	d004      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f40:	2903      	cmp	r1, #3
    6f42:	d002      	beq.n	6f4a <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    6f44:	2012      	movs	r0, #18
    6f46:	b015      	add	sp, #84	; 0x54
    6f48:	bd00      	pop	{pc}
    6f4a:	7901      	ldrb	r1, [r0, #4]
    6f4c:	f88d 1000 	strb.w	r1, [sp]
    6f50:	7b01      	ldrb	r1, [r0, #12]
    6f52:	f88d 1001 	strb.w	r1, [sp, #1]
    6f56:	7942      	ldrb	r2, [r0, #5]
    6f58:	2100      	movs	r1, #0
    6f5a:	2301      	movs	r3, #1
    6f5c:	b3f2      	cbz	r2, 6fdc <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xac>
    6f5e:	2a02      	cmp	r2, #2
    6f60:	d03d      	beq.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6f62:	f88d 3002 	strb.w	r3, [sp, #2]
    6f66:	bf00      	nop
    6f68:	f8d0 2006 	ldr.w	r2, [r0, #6]
    6f6c:	f8cd 2003 	str.w	r2, [sp, #3]
    6f70:	8942      	ldrh	r2, [r0, #10]
    6f72:	f8ad 2007 	strh.w	r2, [sp, #7]
    6f76:	f88d 3009 	strb.w	r3, [sp, #9]
    6f7a:	f830 2b01 	ldrh.w	r2, [r0], #1
    6f7e:	f240 2371 	movw	r3, #625	; 0x271
    6f82:	435a      	muls	r2, r3
    6f84:	9203      	str	r2, [sp, #12]
    6f86:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    6f8a:	435a      	muls	r2, r3
    6f8c:	9206      	str	r2, [sp, #24]
    6f8e:	8982      	ldrh	r2, [r0, #12]
    6f90:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    6f94:	89c2      	ldrh	r2, [r0, #14]
    6f96:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    6f9a:	8a02      	ldrh	r2, [r0, #16]
    6f9c:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    6fa0:	8a42      	ldrh	r2, [r0, #18]
    6fa2:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    6fa6:	8a82      	ldrh	r2, [r0, #20]
    6fa8:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    6fac:	8ac0      	ldrh	r0, [r0, #22]
    6fae:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    6fb2:	2007      	movs	r0, #7
    6fb4:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    6fb8:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    6fbc:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    6fc0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6fc4:	9806      	ldr	r0, [sp, #24]
    6fc6:	f000 fa0d 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    6fca:	b158      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fcc:	9803      	ldr	r0, [sp, #12]
    6fce:	f000 f9fd 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    6fd2:	b138      	cbz	r0, 6fe4 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb4>
    6fd4:	4668      	mov	r0, sp
    6fd6:	f008 fc5b 	bl	f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    6fda:	e7b4      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    6fdc:	e7ff      	b.n	6fde <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xae>
    6fde:	f88d 1002 	strb.w	r1, [sp, #2]
    6fe2:	e7c1      	b.n	6f68 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    6fe4:	2030      	movs	r0, #48	; 0x30
    6fe6:	e7ae      	b.n	6f46 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

00006fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    6fe8:	4903      	ldr	r1, [pc, #12]	; (6ff8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    6fea:	884a      	ldrh	r2, [r1, #2]
    6fec:	8002      	strh	r2, [r0, #0]
    6fee:	7809      	ldrb	r1, [r1, #0]
    6ff0:	7081      	strb	r1, [r0, #2]
    6ff2:	2000      	movs	r0, #0
    6ff4:	4770      	bx	lr
    6ff6:	0000      	.short	0x0000
    6ff8:	20000dc4 	.word	0x20000dc4

00006ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    6ffc:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    6ffe:	460c      	mov	r4, r1
    7000:	4605      	mov	r5, r0
    7002:	8800      	ldrh	r0, [r0, #0]
    7004:	4669      	mov	r1, sp
    7006:	f006 fd50 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    700a:	2200      	movs	r2, #0
    700c:	b128      	cbz	r0, 701a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    700e:	f8c4 2002 	str.w	r2, [r4, #2]
    7012:	71a2      	strb	r2, [r4, #6]
    7014:	8022      	strh	r2, [r4, #0]
    7016:	2002      	movs	r0, #2
    7018:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    701a:	9901      	ldr	r1, [sp, #4]
    701c:	f111 0188 	adds.w	r1, r1, #136	; 0x88
    7020:	f881 2076 	strb.w	r2, [r1, #118]	; 0x76
    7024:	f8d1 0026 	ldr.w	r0, [r1, #38]	; 0x26
    7028:	f8c4 0002 	str.w	r0, [r4, #2]
    702c:	f891 002a 	ldrb.w	r0, [r1, #42]	; 0x2a
    7030:	71a0      	strb	r0, [r4, #6]
    7032:	8828      	ldrh	r0, [r5, #0]
    7034:	8020      	strh	r0, [r4, #0]
    7036:	f891 0076 	ldrb.w	r0, [r1, #118]	; 0x76
    703a:	f88d 0008 	strb.w	r0, [sp, #8]
    703e:	9802      	ldr	r0, [sp, #8]
    7040:	9002      	str	r0, [sp, #8]
    7042:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7046:	2800      	cmp	r0, #0
    7048:	d1ea      	bne.n	7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>
    704a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    704c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    704e:	460d      	mov	r5, r1
    7050:	4606      	mov	r6, r0
    7052:	8800      	ldrh	r0, [r0, #0]
    7054:	4669      	mov	r1, sp
    7056:	f006 fd28 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    705a:	2800      	cmp	r0, #0
    705c:	d11a      	bne.n	7094 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x48>
    705e:	f8dd 4004 	ldr.w	r4, [sp, #4]
    7062:	2700      	movs	r7, #0
    7064:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    7068:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    706c:	f008 fe08 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7070:	70a8      	strb	r0, [r5, #2]
    7072:	7860      	ldrb	r0, [r4, #1]
    7074:	f008 fe04 	bl	fc80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x44>
    7078:	70e8      	strb	r0, [r5, #3]
    707a:	78a0      	ldrb	r0, [r4, #2]
    707c:	f88d 0008 	strb.w	r0, [sp, #8]
    7080:	9802      	ldr	r0, [sp, #8]
    7082:	9002      	str	r0, [sp, #8]
    7084:	f89d 0008 	ldrb.w	r0, [sp, #8]
    7088:	3c6a      	subs	r4, #106	; 0x6a
    708a:	2800      	cmp	r0, #0
    708c:	d1ea      	bne.n	7064 <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x18>
    708e:	8830      	ldrh	r0, [r6, #0]
    7090:	8028      	strh	r0, [r5, #0]
    7092:	2000      	movs	r0, #0
    7094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00007098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    7098:	4903      	ldr	r1, [pc, #12]	; (70a8 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x10>)
    709a:	888a      	ldrh	r2, [r1, #4]
    709c:	8002      	strh	r2, [r0, #0]
    709e:	88c9      	ldrh	r1, [r1, #6]
    70a0:	8041      	strh	r1, [r0, #2]
    70a2:	2000      	movs	r0, #0
    70a4:	4770      	bx	lr
    70a6:	0000      	.short	0x0000
    70a8:	2000026a 	.word	0x2000026a

000070ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    70ac:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    70ae:	2400      	movs	r4, #0
    70b0:	a902      	add	r1, sp, #8
    70b2:	f88d 4004 	strb.w	r4, [sp, #4]
    70b6:	f88d 4008 	strb.w	r4, [sp, #8]
    70ba:	9100      	str	r1, [sp, #0]
    70bc:	7882      	ldrb	r2, [r0, #2]
    70be:	7841      	ldrb	r1, [r0, #1]
    70c0:	7800      	ldrb	r0, [r0, #0]
    70c2:	ab01      	add	r3, sp, #4
    70c4:	f008 ffdb 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    70c8:	2800      	cmp	r0, #0
    70ca:	d112      	bne.n	70f2 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x46>
    70cc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    70d0:	f008 fded 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70d4:	b170      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
    70da:	f008 fde8 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    70de:	b148      	cbz	r0, 70f4 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x48>
    70e0:	4805      	ldr	r0, [pc, #20]	; (70f8 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x4c>)
    70e2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    70e6:	7381      	strb	r1, [r0, #14]
    70e8:	f89d 1008 	ldrb.w	r1, [sp, #8]
    70ec:	73c1      	strb	r1, [r0, #15]
    70ee:	8204      	strh	r4, [r0, #16]
    70f0:	2000      	movs	r0, #0
    70f2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f4:	2011      	movs	r0, #17
    70f6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    70f8:	20000dc4 	.word	0x20000dc4

000070fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    70fc:	b51c      	push	{r2, r3, r4, lr}
    70fe:	4604      	mov	r4, r0
    7100:	f006 fcbd 	bl	da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    7104:	b148      	cbz	r0, 711a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x1e>
    7106:	4620      	mov	r0, r4
    7108:	f7fb fae2 	bl	26d0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    710c:	4909      	ldr	r1, [pc, #36]	; (7134 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x38>)
    710e:	24ff      	movs	r4, #255	; 0xff
    7110:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
    7114:	e9cd 0100 	strd	r0, r1, [sp]
    7118:	e004      	b.n	7124 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    711a:	2012      	movs	r0, #18
    711c:	bd1c      	pop	{r2, r3, r4, pc}
    711e:	9800      	ldr	r0, [sp, #0]
    7120:	f880 425c 	strb.w	r4, [r0, #604]	; 0x25c
    7124:	4668      	mov	r0, sp
    7126:	f7f9 febb 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    712a:	2800      	cmp	r0, #0
    712c:	d0f7      	beq.n	711e <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x22>
    712e:	2000      	movs	r0, #0
    7130:	bd1c      	pop	{r2, r3, r4, pc}
    7132:	0000      	.short	0x0000
    7134:	00007718 	.word	0x00007718

00007138 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    7138:	7801      	ldrb	r1, [r0, #0]
    713a:	b171      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    713c:	7841      	ldrb	r1, [r0, #1]
    713e:	b161      	cbz	r1, 715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7140:	8841      	ldrh	r1, [r0, #2]
    7142:	291b      	cmp	r1, #27
    7144:	d309      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    7146:	8881      	ldrh	r1, [r0, #4]
    7148:	291b      	cmp	r1, #27
    714a:	d306      	bcc.n	715a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    714c:	4904      	ldr	r1, [pc, #16]	; (7160 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    714e:	6802      	ldr	r2, [r0, #0]
    7150:	600a      	str	r2, [r1, #0]
    7152:	8880      	ldrh	r0, [r0, #4]
    7154:	8088      	strh	r0, [r1, #4]
    7156:	2000      	movs	r0, #0
    7158:	4770      	bx	lr
    715a:	2012      	movs	r0, #18
    715c:	4770      	bx	lr
    715e:	0000      	.short	0x0000
    7160:	20000dc4 	.word	0x20000dc4

00007164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    7164:	6800      	ldr	r0, [r0, #0]
    7166:	f240 41e2 	movw	r1, #1250	; 0x4e2
    716a:	4288      	cmp	r0, r1
    716c:	d303      	bcc.n	7176 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    716e:	4903      	ldr	r1, [pc, #12]	; (717c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    7170:	6088      	str	r0, [r1, #8]
    7172:	2000      	movs	r0, #0
    7174:	4770      	bx	lr
    7176:	2012      	movs	r0, #18
    7178:	4770      	bx	lr
    717a:	0000      	.short	0x0000
    717c:	20000dc4 	.word	0x20000dc4

00007180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    7180:	b510      	push	{r4, lr}
    7182:	b086      	sub	sp, #24
    7184:	4604      	mov	r4, r0
    7186:	f008 fe6d 	bl	fe64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x228>
    718a:	2800      	cmp	r0, #0
    718c:	d103      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    718e:	f008 ff63 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    7192:	b110      	cbz	r0, 719a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    7194:	200c      	movs	r0, #12
    7196:	b006      	add	sp, #24
    7198:	bd10      	pop	{r4, pc}
    719a:	2102      	movs	r1, #2
    719c:	f104 0010 	add.w	r0, r4, #16
    71a0:	f000 f92c 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    71a4:	78a0      	ldrb	r0, [r4, #2]
    71a6:	f88d 0008 	strb.w	r0, [sp, #8]
    71aa:	78a0      	ldrb	r0, [r4, #2]
    71ac:	f88d 0000 	strb.w	r0, [sp]
    71b0:	7860      	ldrb	r0, [r4, #1]
    71b2:	f88d 0003 	strb.w	r0, [sp, #3]
    71b6:	7820      	ldrb	r0, [r4, #0]
    71b8:	f88d 0002 	strb.w	r0, [sp, #2]
    71bc:	7e20      	ldrb	r0, [r4, #24]
    71be:	f88d 0004 	strb.w	r0, [sp, #4]
    71c2:	78a0      	ldrb	r0, [r4, #2]
    71c4:	07c0      	lsls	r0, r0, #31
    71c6:	d00b      	beq.n	71e0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    71c8:	78e0      	ldrb	r0, [r4, #3]
    71ca:	2801      	cmp	r0, #1
    71cc:	d011      	beq.n	71f2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    71ce:	b190      	cbz	r0, 71f6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    71d0:	f05f 0000 	movs.w	r0, #0
    71d4:	f88d 0001 	strb.w	r0, [sp, #1]
    71d8:	68a0      	ldr	r0, [r4, #8]
    71da:	9003      	str	r0, [sp, #12]
    71dc:	6920      	ldr	r0, [r4, #16]
    71de:	9004      	str	r0, [sp, #16]
    71e0:	a802      	add	r0, sp, #8
    71e2:	f7fd fbb7 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    71e6:	2800      	cmp	r0, #0
    71e8:	d1d5      	bne.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71ea:	4668      	mov	r0, sp
    71ec:	f7fc f998 	bl	3520 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    71f0:	e7d1      	b.n	7196 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    71f2:	2002      	movs	r0, #2
    71f4:	e7ee      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    71f6:	2001      	movs	r0, #1
    71f8:	e7ec      	b.n	71d4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

000071fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>:
    71fc:	4801      	ldr	r0, [pc, #4]	; (7204 <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA+0x8>)
    71fe:	f990 0000 	ldrsb.w	r0, [r0]
    7202:	4770      	bx	lr
    7204:	2000025c 	.word	0x2000025c

00007208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    7208:	4a03      	ldr	r2, [pc, #12]	; (7218 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    720a:	e9d2 1200 	ldrd	r1, r2, [r2]
    720e:	6001      	str	r1, [r0, #0]
    7210:	6042      	str	r2, [r0, #4]
    7212:	2000      	movs	r0, #0
    7214:	4770      	bx	lr
    7216:	0000      	.short	0x0000
    7218:	00007718 	.word	0x00007718

0000721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    721c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    721e:	8800      	ldrh	r0, [r0, #0]
    7220:	4669      	mov	r1, sp
    7222:	f006 fc42 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7226:	b968      	cbnz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7228:	2401      	movs	r4, #1
    722a:	9801      	ldr	r0, [sp, #4]
    722c:	f008 fefe 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    7230:	b140      	cbz	r0, 7244 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    7232:	9801      	ldr	r0, [sp, #4]
    7234:	4601      	mov	r1, r0
    7236:	f890 214a 	ldrb.w	r2, [r0, #330]	; 0x14a
    723a:	3088      	adds	r0, #136	; 0x88
    723c:	f501 71a5 	add.w	r1, r1, #330	; 0x14a
    7240:	b95a      	cbnz	r2, 725a <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x3e>
    7242:	e001      	b.n	7248 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    7244:	2002      	movs	r0, #2
    7246:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7248:	f890 2068 	ldrb.w	r2, [r0, #104]	; 0x68
    724c:	f88d 2008 	strb.w	r2, [sp, #8]
    7250:	9a02      	ldr	r2, [sp, #8]
    7252:	9202      	str	r2, [sp, #8]
    7254:	f89d 2008 	ldrb.w	r2, [sp, #8]
    7258:	b10a      	cbz	r2, 725e <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x42>
    725a:	203a      	movs	r0, #58	; 0x3a
    725c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    725e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
    7262:	0792      	lsls	r2, r2, #30
    7264:	d006      	beq.n	7274 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x58>
    7266:	2203      	movs	r2, #3
    7268:	4903      	ldr	r1, [pc, #12]	; (7278 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x5c>)
    726a:	3060      	adds	r0, #96	; 0x60
    726c:	f006 ff6b 	bl	e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>
    7270:	2000      	movs	r0, #0
    7272:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    7274:	700c      	strb	r4, [r1, #0]
    7276:	e7fb      	b.n	7270 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x54>
    7278:	0000e64f 	.word	0x0000e64f

0000727c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ>:
    727c:	b510      	push	{r4, lr}
    727e:	2005      	movs	r0, #5
    7280:	f000 fabe 	bl	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    7284:	f7fe f8d4 	bl	5430 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    7288:	4902      	ldr	r1, [pc, #8]	; (7294 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x18>)
    728a:	4801      	ldr	r0, [pc, #4]	; (7290 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14>)
    728c:	6048      	str	r0, [r1, #4]
    728e:	bd10      	pop	{r4, pc}
    7290:	00007299 	.word	0x00007299
    7294:	2000025c 	.word	0x2000025c
    7298:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    729c:	4613      	mov	r3, r2
    729e:	4a33      	ldr	r2, [pc, #204]	; (736c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf0>)
    72a0:	460f      	mov	r7, r1
    72a2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
    72a6:	8814      	ldrh	r4, [r2, #0]
    72a8:	f8b0 6052 	ldrh.w	r6, [r0, #82]	; 0x52
    72ac:	428c      	cmp	r4, r1
    72ae:	d200      	bcs.n	72b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x36>
    72b0:	4621      	mov	r1, r4
    72b2:	4688      	mov	r8, r1
    72b4:	8891      	ldrh	r1, [r2, #4]
    72b6:	42b1      	cmp	r1, r6
    72b8:	d200      	bcs.n	72bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x40>
    72ba:	460e      	mov	r6, r1
    72bc:	8851      	ldrh	r1, [r2, #2]
    72be:	f640 0448 	movw	r4, #2120	; 0x848
    72c2:	42a1      	cmp	r1, r4
    72c4:	d300      	bcc.n	72c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x4c>
    72c6:	4621      	mov	r1, r4
    72c8:	88d5      	ldrh	r5, [r2, #6]
    72ca:	42a5      	cmp	r5, r4
    72cc:	d300      	bcc.n	72d0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x54>
    72ce:	4625      	mov	r5, r4
    72d0:	42a1      	cmp	r1, r4
    72d2:	d200      	bcs.n	72d6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x5a>
    72d4:	460c      	mov	r4, r1
    72d6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    72da:	2e1b      	cmp	r6, #27
    72dc:	d001      	beq.n	72e2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x66>
    72de:	4295      	cmp	r5, r2
    72e0:	d104      	bne.n	72ec <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x70>
    72e2:	f1b8 0f1b 	cmp.w	r8, #27
    72e6:	d03e      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72e8:	4294      	cmp	r4, r2
    72ea:	d03c      	beq.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    72ec:	466a      	mov	r2, sp
    72ee:	4619      	mov	r1, r3
    72f0:	f008 fe43 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    72f4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    72f8:	4641      	mov	r1, r8
    72fa:	4540      	cmp	r0, r8
    72fc:	d900      	bls.n	7300 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x84>
    72fe:	4608      	mov	r0, r1
    7300:	80f8      	strh	r0, [r7, #6]
    7302:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    7306:	42a1      	cmp	r1, r4
    7308:	d800      	bhi.n	730c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x90>
    730a:	460c      	mov	r4, r1
    730c:	813c      	strh	r4, [r7, #8]
    730e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    7312:	42b1      	cmp	r1, r6
    7314:	d800      	bhi.n	7318 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x9c>
    7316:	460e      	mov	r6, r1
    7318:	807e      	strh	r6, [r7, #2]
    731a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    731e:	42a9      	cmp	r1, r5
    7320:	d800      	bhi.n	7324 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xa8>
    7322:	460d      	mov	r5, r1
    7324:	80bd      	strh	r5, [r7, #4]
    7326:	21ff      	movs	r1, #255	; 0xff
    7328:	7039      	strb	r1, [r7, #0]
    732a:	381b      	subs	r0, #27
    732c:	28e0      	cmp	r0, #224	; 0xe0
    732e:	d902      	bls.n	7336 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xba>
    7330:	f640 516e 	movw	r1, #3438	; 0xd6e
    7334:	e014      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7336:	3e1b      	subs	r6, #27
    7338:	2ee0      	cmp	r6, #224	; 0xe0
    733a:	d902      	bls.n	7342 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xc6>
    733c:	f44f 6157 	mov.w	r1, #3440	; 0xd70
    7340:	e00e      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7342:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    7346:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    734a:	4284      	cmp	r4, r0
    734c:	d902      	bls.n	7354 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xd8>
    734e:	f640 5172 	movw	r1, #3442	; 0xd72
    7352:	e005      	b.n	7360 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xe4>
    7354:	f5a5 75a4 	sub.w	r5, r5, #328	; 0x148
    7358:	4285      	cmp	r5, r0
    735a:	d904      	bls.n	7366 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xea>
    735c:	f640 5174 	movw	r1, #3444	; 0xd74
    7360:	2039      	movs	r0, #57	; 0x39
    7362:	f7f9 fb7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7366:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    736a:	0000      	.short	0x0000
    736c:	2000026a 	.word	0x2000026a
    7370:	b510      	push	{r4, lr}
    7372:	480e      	ldr	r0, [pc, #56]	; (73ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x130>)
    7374:	2100      	movs	r1, #0
    7376:	4b0e      	ldr	r3, [pc, #56]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    7378:	74c1      	strb	r1, [r0, #19]
    737a:	8281      	strh	r1, [r0, #20]
    737c:	221b      	movs	r2, #27
    737e:	801a      	strh	r2, [r3, #0]
    7380:	f44f 74a4 	mov.w	r4, #328	; 0x148
    7384:	805c      	strh	r4, [r3, #2]
    7386:	809a      	strh	r2, [r3, #4]
    7388:	80dc      	strh	r4, [r3, #6]
    738a:	7381      	strb	r1, [r0, #14]
    738c:	73c1      	strb	r1, [r0, #15]
    738e:	2303      	movs	r3, #3
    7390:	7003      	strb	r3, [r0, #0]
    7392:	2302      	movs	r3, #2
    7394:	7043      	strb	r3, [r0, #1]
    7396:	8042      	strh	r2, [r0, #2]
    7398:	8082      	strh	r2, [r0, #4]
    739a:	f640 62a6 	movw	r2, #3750	; 0xea6
    739e:	6082      	str	r2, [r0, #8]
    73a0:	7481      	strb	r1, [r0, #18]
    73a2:	7301      	strb	r1, [r0, #12]
    73a4:	4802      	ldr	r0, [pc, #8]	; (73b0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x134>)
    73a6:	1f80      	subs	r0, r0, #6
    73a8:	7001      	strb	r1, [r0, #0]
    73aa:	bd10      	pop	{r4, pc}
    73ac:	20000dc4 	.word	0x20000dc4
    73b0:	2000026a 	.word	0x2000026a
    73b4:	4904      	ldr	r1, [pc, #16]	; (73c8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x14c>)
    73b6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ba:	4288      	cmp	r0, r1
    73bc:	d301      	bcc.n	73c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x146>
    73be:	2000      	movs	r0, #0
    73c0:	4770      	bx	lr
    73c2:	2001      	movs	r0, #1
    73c4:	4770      	bx	lr
    73c6:	0000      	.short	0x0000
    73c8:	0270f3cc 	.word	0x0270f3cc
    73cc:	4904      	ldr	r1, [pc, #16]	; (73e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x164>)
    73ce:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73d2:	4288      	cmp	r0, r1
    73d4:	d301      	bcc.n	73da <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x15e>
    73d6:	2000      	movs	r0, #0
    73d8:	4770      	bx	lr
    73da:	2001      	movs	r0, #1
    73dc:	4770      	bx	lr
    73de:	0000      	.short	0x0000
    73e0:	009c363d 	.word	0x009c363d
    73e4:	4904      	ldr	r1, [pc, #16]	; (73f8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x17c>)
    73e6:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    73ea:	4288      	cmp	r0, r1
    73ec:	d301      	bcc.n	73f2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x176>
    73ee:	2000      	movs	r0, #0
    73f0:	4770      	bx	lr
    73f2:	2001      	movs	r0, #1
    73f4:	4770      	bx	lr
    73f6:	0000      	.short	0x0000
    73f8:	009c363d 	.word	0x009c363d
    73fc:	b530      	push	{r4, r5, lr}
    73fe:	2200      	movs	r2, #0
    7400:	4d07      	ldr	r5, [pc, #28]	; (7420 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a4>)
    7402:	e009      	b.n	7418 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x19c>
    7404:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    7408:	462b      	mov	r3, r5
    740a:	429c      	cmp	r4, r3
    740c:	d800      	bhi.n	7410 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x194>
    740e:	4623      	mov	r3, r4
    7410:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    7414:	1c52      	adds	r2, r2, #1
    7416:	b2d2      	uxtb	r2, r2
    7418:	428a      	cmp	r2, r1
    741a:	d3f3      	bcc.n	7404 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x188>
    741c:	bd30      	pop	{r4, r5, pc}
    741e:	0000      	.short	0x0000
    7420:	00f42400 	.word	0x00f42400
    7424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7428:	4604      	mov	r4, r0
    742a:	a05c      	add	r0, pc, #368	; (adr r0, 759c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x320>)
    742c:	4688      	mov	r8, r1
    742e:	e9d0 7600 	ldrd	r7, r6, [r0]
    7432:	b087      	sub	sp, #28
    7434:	4699      	mov	r9, r3
    7436:	4615      	mov	r5, r2
    7438:	2100      	movs	r1, #0
    743a:	4620      	mov	r0, r4
    743c:	f7fb f88c 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7440:	f8a4 8000 	strh.w	r8, [r4]
    7444:	4857      	ldr	r0, [pc, #348]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7446:	f8c4 0258 	str.w	r0, [r4, #600]	; 0x258
    744a:	f000 f9e5 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    744e:	0940      	lsrs	r0, r0, #5
    7450:	ea40 60c1 	orr.w	r0, r0, r1, lsl #27
    7454:	07c1      	lsls	r1, r0, #31
    7456:	f8df 8150 	ldr.w	r8, [pc, #336]	; 75a8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x32c>
    745a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    745e:	d006      	beq.n	746e <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f2>
    7460:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    7464:	f8b8 1004 	ldrh.w	r1, [r8, #4]
    7468:	84c2      	strh	r2, [r0, #38]	; 0x26
    746a:	8501      	strh	r1, [r0, #40]	; 0x28
    746c:	e002      	b.n	7474 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1f8>
    746e:	211b      	movs	r1, #27
    7470:	84c1      	strh	r1, [r0, #38]	; 0x26
    7472:	8501      	strh	r1, [r0, #40]	; 0x28
    7474:	f000 f9d0 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    7478:	0788      	lsls	r0, r1, #30
    747a:	d506      	bpl.n	748a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x20e>
    747c:	2000      	movs	r0, #0
    747e:	f88d 0000 	strb.w	r0, [sp]
    7482:	4668      	mov	r0, sp
    7484:	9401      	str	r4, [sp, #4]
    7486:	f7ff fd25 	bl	6ed4 <sym_5FDRWQI6XUFWVRIX2PMRPNDHWCIMAZ67SSGSRVI>
    748a:	f898 1001 	ldrb.w	r1, [r8, #1]
    748e:	9100      	str	r1, [sp, #0]
    7490:	f898 3000 	ldrb.w	r3, [r8]
    7494:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    7498:	f8b8 1002 	ldrh.w	r1, [r8, #2]
    749c:	8820      	ldrh	r0, [r4, #0]
    749e:	f7f9 fded 	bl	107c <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    74a2:	b120      	cbz	r0, 74ae <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x232>
    74a4:	f640 7106 	movw	r1, #3846	; 0xf06
    74a8:	2039      	movs	r0, #57	; 0x39
    74aa:	f7f9 fadb 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ae:	f006 ffb7 	bl	e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    74b2:	6160      	str	r0, [r4, #20]
    74b4:	f1b9 0f00 	cmp.w	r9, #0
    74b8:	d004      	beq.n	74c4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x248>
    74ba:	f7fb fc85 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    74be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    74c2:	61e0      	str	r0, [r4, #28]
    74c4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74c8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74cc:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
    74ce:	f006 faf8 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    74d2:	6120      	str	r0, [r4, #16]
    74d4:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74d8:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74dc:	8e00      	ldrh	r0, [r0, #48]	; 0x30
    74de:	8320      	strh	r0, [r4, #24]
    74e0:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
    74e4:	eb05 0040 	add.w	r0, r5, r0, lsl #1
    74e8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    74ea:	8360      	strh	r0, [r4, #26]
    74ec:	7a68      	ldrb	r0, [r5, #9]
    74ee:	f008 fbbd 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
    74f2:	f8d8 1008 	ldr.w	r1, [r8, #8]
    74f6:	4645      	mov	r5, r8
    74f8:	4620      	mov	r0, r4
    74fa:	62e1      	str	r1, [r4, #44]	; 0x2c
    74fc:	f007 fb6d 	bl	ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    7500:	f8c4 70ae 	str.w	r7, [r4, #174]	; 0xae
    7504:	f884 60b2 	strb.w	r6, [r4, #178]	; 0xb2
    7508:	20ff      	movs	r0, #255	; 0xff
    750a:	f884 025c 	strb.w	r0, [r4, #604]	; 0x25c
    750e:	4825      	ldr	r0, [pc, #148]	; (75a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x328>)
    7510:	3808      	subs	r0, #8
    7512:	6843      	ldr	r3, [r0, #4]
    7514:	b123      	cbz	r3, 7520 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2a4>
    7516:	2201      	movs	r2, #1
    7518:	f504 719d 	add.w	r1, r4, #314	; 0x13a
    751c:	4620      	mov	r0, r4
    751e:	4798      	blx	r3
    7520:	8821      	ldrh	r1, [r4, #0]
    7522:	f8ad 1004 	strh.w	r1, [sp, #4]
    7526:	7ba9      	ldrb	r1, [r5, #14]
    7528:	f88d 1006 	strb.w	r1, [sp, #6]
    752c:	7be9      	ldrb	r1, [r5, #15]
    752e:	f88d 1007 	strb.w	r1, [sp, #7]
    7532:	8a29      	ldrh	r1, [r5, #16]
    7534:	f8ad 1008 	strh.w	r1, [sp, #8]
    7538:	a904      	add	r1, sp, #16
    753a:	9100      	str	r1, [sp, #0]
    753c:	2000      	movs	r0, #0
    753e:	ab03      	add	r3, sp, #12
    7540:	aa01      	add	r2, sp, #4
    7542:	4621      	mov	r1, r4
    7544:	f008 fd4f 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    7548:	0005      	movs	r5, r0
    754a:	d10f      	bne.n	756c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x2f0>
    754c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    7550:	f88d 0014 	strb.w	r0, [sp, #20]
    7554:	f89d 0010 	ldrb.w	r0, [sp, #16]
    7558:	f88d 0015 	strb.w	r0, [sp, #21]
    755c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    7560:	f8ad 0016 	strh.w	r0, [sp, #22]
    7564:	a905      	add	r1, sp, #20
    7566:	4620      	mov	r0, r4
    7568:	f006 fb79 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    756c:	f7fb fc2c 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    7570:	210c      	movs	r1, #12
    7572:	fbb0 f2f1 	udiv	r2, r0, r1
    7576:	fb01 0012 	mls	r0, r1, r2, r0
    757a:	1d40      	adds	r0, r0, #5
    757c:	b2c0      	uxtb	r0, r0
    757e:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    7582:	2809      	cmp	r0, #9
    7584:	d202      	bcs.n	758c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x310>
    7586:	3008      	adds	r0, #8
    7588:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
    758c:	2101      	movs	r1, #1
    758e:	4620      	mov	r0, r4
    7590:	f7fa ffe2 	bl	2558 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    7594:	b007      	add	sp, #28
    7596:	4628      	mov	r0, r5
    7598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    759c:	ffffffff 	.word	0xffffffff
    75a0:	0000001f 	.word	0x0000001f
    75a4:	20000264 	.word	0x20000264
    75a8:	20000dc4 	.word	0x20000dc4
    75ac:	4a09      	ldr	r2, [pc, #36]	; (75d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x358>)
    75ae:	4290      	cmp	r0, r2
    75b0:	d80b      	bhi.n	75ca <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34e>
    75b2:	2901      	cmp	r1, #1
    75b4:	d002      	beq.n	75bc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x340>
    75b6:	2904      	cmp	r1, #4
    75b8:	d003      	beq.n	75c2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x346>
    75ba:	e008      	b.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75bc:	f240 7153 	movw	r1, #1875	; 0x753
    75c0:	e001      	b.n	75c6 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x34a>
    75c2:	f640 11c4 	movw	r1, #2500	; 0x9c4
    75c6:	4288      	cmp	r0, r1
    75c8:	d201      	bcs.n	75ce <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x352>
    75ca:	2000      	movs	r0, #0
    75cc:	4770      	bx	lr
    75ce:	2001      	movs	r0, #1
    75d0:	4770      	bx	lr
    75d2:	0000      	.short	0x0000
    75d4:	0270fd8f 	.word	0x0270fd8f
    75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75dc:	b088      	sub	sp, #32
    75de:	4604      	mov	r4, r0
    75e0:	8800      	ldrh	r0, [r0, #0]
    75e2:	a906      	add	r1, sp, #24
    75e4:	f006 fa61 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    75e8:	2800      	cmp	r0, #0
    75ea:	d147      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    75ec:	9807      	ldr	r0, [sp, #28]
    75ee:	f890 1188 	ldrb.w	r1, [r0, #392]	; 0x188
    75f2:	f88d 1008 	strb.w	r1, [sp, #8]
    75f6:	9902      	ldr	r1, [sp, #8]
    75f8:	9102      	str	r1, [sp, #8]
    75fa:	f89d 1008 	ldrb.w	r1, [sp, #8]
    75fe:	3088      	adds	r0, #136	; 0x88
    7600:	b101      	cbz	r1, 7604 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x388>
    7602:	2101      	movs	r1, #1
    7604:	f88d 100c 	strb.w	r1, [sp, #12]
    7608:	7f81      	ldrb	r1, [r0, #30]
    760a:	f04f 0801 	mov.w	r8, #1
    760e:	291e      	cmp	r1, #30
    7610:	d102      	bne.n	7618 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x39c>
    7612:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7616:	b149      	cbz	r1, 762c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b0>
    7618:	f05f 0100 	movs.w	r1, #0
    761c:	f88d 1004 	strb.w	r1, [sp, #4]
    7620:	2105      	movs	r1, #5
    7622:	306e      	adds	r0, #110	; 0x6e
    7624:	f007 ff37 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    7628:	b110      	cbz	r0, 7630 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3b4>
    762a:	e004      	b.n	7636 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3ba>
    762c:	2101      	movs	r1, #1
    762e:	e7f5      	b.n	761c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3a0>
    7630:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7634:	b308      	cbz	r0, 767a <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x3fe>
    7636:	8921      	ldrh	r1, [r4, #8]
    7638:	88e0      	ldrh	r0, [r4, #6]
    763a:	f008 fb4d 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    763e:	2800      	cmp	r0, #0
    7640:	d11c      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7642:	88a1      	ldrh	r1, [r4, #4]
    7644:	8860      	ldrh	r0, [r4, #2]
    7646:	f008 fb47 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    764a:	2800      	cmp	r0, #0
    764c:	d116      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    764e:	8921      	ldrh	r1, [r4, #8]
    7650:	88e0      	ldrh	r0, [r4, #6]
    7652:	f008 fb37 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7656:	2800      	cmp	r0, #0
    7658:	d110      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    765a:	88a1      	ldrh	r1, [r4, #4]
    765c:	8860      	ldrh	r0, [r4, #2]
    765e:	f008 fb31 	bl	fcc4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x88>
    7662:	0006      	movs	r6, r0
    7664:	d10a      	bne.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    7666:	9807      	ldr	r0, [sp, #28]
    7668:	f500 759d 	add.w	r5, r0, #314	; 0x13a
    766c:	27ff      	movs	r7, #255	; 0xff
    766e:	706f      	strb	r7, [r5, #1]
    7670:	f89d 100c 	ldrb.w	r1, [sp, #12]
    7674:	b129      	cbz	r1, 7682 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x406>
    7676:	263a      	movs	r6, #58	; 0x3a
    7678:	e02e      	b.n	76d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x45c>
    767a:	201a      	movs	r0, #26
    767c:	b008      	add	sp, #32
    767e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7682:	4641      	mov	r1, r8
    7684:	aa03      	add	r2, sp, #12
    7686:	f008 fc78 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    768a:	8861      	ldrh	r1, [r4, #2]
    768c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    7690:	4281      	cmp	r1, r0
    7692:	d200      	bcs.n	7696 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x41a>
    7694:	4608      	mov	r0, r1
    7696:	80e8      	strh	r0, [r5, #6]
    7698:	88a1      	ldrh	r1, [r4, #4]
    769a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    769e:	4281      	cmp	r1, r0
    76a0:	d200      	bcs.n	76a4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x428>
    76a2:	4608      	mov	r0, r1
    76a4:	8128      	strh	r0, [r5, #8]
    76a6:	88e2      	ldrh	r2, [r4, #6]
    76a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    76ac:	428a      	cmp	r2, r1
    76ae:	d200      	bcs.n	76b2 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x436>
    76b0:	4611      	mov	r1, r2
    76b2:	8069      	strh	r1, [r5, #2]
    76b4:	8922      	ldrh	r2, [r4, #8]
    76b6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    76ba:	428a      	cmp	r2, r1
    76bc:	d200      	bcs.n	76c0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x444>
    76be:	4611      	mov	r1, r2
    76c0:	f640 0248 	movw	r2, #2120	; 0x848
    76c4:	80a9      	strh	r1, [r5, #4]
    76c6:	4291      	cmp	r1, r2
    76c8:	d300      	bcc.n	76cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x450>
    76ca:	4611      	mov	r1, r2
    76cc:	80a9      	strh	r1, [r5, #4]
    76ce:	4290      	cmp	r0, r2
    76d0:	d200      	bcs.n	76d4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x458>
    76d2:	4602      	mov	r2, r0
    76d4:	812a      	strh	r2, [r5, #8]
    76d6:	702f      	strb	r7, [r5, #0]
    76d8:	2000      	movs	r0, #0
    76da:	7068      	strb	r0, [r5, #1]
    76dc:	4630      	mov	r0, r6
    76de:	e7cd      	b.n	767c <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x400>
    76e0:	b510      	push	{r4, lr}
    76e2:	4604      	mov	r4, r0
    76e4:	88c1      	ldrh	r1, [r0, #6]
    76e6:	8880      	ldrh	r0, [r0, #4]
    76e8:	f008 faf6 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76ec:	2800      	cmp	r0, #0
    76ee:	d10f      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76f0:	8861      	ldrh	r1, [r4, #2]
    76f2:	8820      	ldrh	r0, [r4, #0]
    76f4:	f008 faf0 	bl	fcd8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9c>
    76f8:	2800      	cmp	r0, #0
    76fa:	d109      	bne.n	7710 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x494>
    76fc:	4805      	ldr	r0, [pc, #20]	; (7714 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x498>)
    76fe:	88a1      	ldrh	r1, [r4, #4]
    7700:	8081      	strh	r1, [r0, #4]
    7702:	8821      	ldrh	r1, [r4, #0]
    7704:	8001      	strh	r1, [r0, #0]
    7706:	88e1      	ldrh	r1, [r4, #6]
    7708:	80c1      	strh	r1, [r0, #6]
    770a:	8861      	ldrh	r1, [r4, #2]
    770c:	8041      	strh	r1, [r0, #2]
    770e:	2000      	movs	r0, #0
    7710:	bd10      	pop	{r4, pc}
    7712:	0000      	.short	0x0000
    7714:	2000026a 	.word	0x2000026a
    7718:	0c124b0c 	.word	0x0c124b0c
    771c:	124b0059 	.word	0x124b0059
	...

00007728 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    7728:	b570      	push	{r4, r5, r6, lr}
    772a:	460d      	mov	r5, r1
    772c:	f7fb f9da 	bl	2ae4 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    7730:	4c05      	ldr	r4, [pc, #20]	; (7748 <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    7732:	6065      	str	r5, [r4, #4]
    7734:	68a0      	ldr	r0, [r4, #8]
    7736:	f008 fcd1 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    773a:	f008 f9f7 	bl	fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    773e:	f7fb fb37 	bl	2db0 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7742:	2001      	movs	r0, #1
    7744:	7020      	strb	r0, [r4, #0]
    7746:	bd70      	pop	{r4, r5, r6, pc}
    7748:	20000274 	.word	0x20000274

0000774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>:
    774c:	4801      	ldr	r0, [pc, #4]	; (7754 <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ+0x8>)
    774e:	7800      	ldrb	r0, [r0, #0]
    7750:	4770      	bx	lr
    7752:	0000      	.short	0x0000
    7754:	20000274 	.word	0x20000274

00007758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    7758:	b510      	push	{r4, lr}
    775a:	4c06      	ldr	r4, [pc, #24]	; (7774 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x1c>)
    775c:	68e0      	ldr	r0, [r4, #12]
    775e:	f008 fcbd 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7762:	6920      	ldr	r0, [r4, #16]
    7764:	f008 fcba 	bl	100dc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a0>
    7768:	f008 fa68 	bl	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    776c:	2000      	movs	r0, #0
    776e:	7020      	strb	r0, [r4, #0]
    7770:	bd10      	pop	{r4, pc}
    7772:	0000      	.short	0x0000
    7774:	20000274 	.word	0x20000274

00007778 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    7778:	b510      	push	{r4, lr}
    777a:	4908      	ldr	r1, [pc, #32]	; (779c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    777c:	4808      	ldr	r0, [pc, #32]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    777e:	f008 fca0 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    7782:	4807      	ldr	r0, [pc, #28]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    7784:	4907      	ldr	r1, [pc, #28]	; (77a4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    7786:	1d00      	adds	r0, r0, #4
    7788:	f008 fc9b 	bl	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    778c:	4804      	ldr	r0, [pc, #16]	; (77a0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    778e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7792:	4905      	ldr	r1, [pc, #20]	; (77a8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    7794:	3008      	adds	r0, #8
    7796:	f008 bc94 	b.w	100c2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x486>
    779a:	0000      	.short	0x0000
    779c:	20000290 	.word	0x20000290
    77a0:	2000027c 	.word	0x2000027c
    77a4:	20000298 	.word	0x20000298
    77a8:	20000288 	.word	0x20000288
    77ac:	b510      	push	{r4, lr}
    77ae:	f7fb fe33 	bl	3418 <sym_K7SQKMVWESLZUZE22L4CEOMCL4JSVJET4SYEPLI>
    77b2:	f000 f813 	bl	77dc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x64>
    77b6:	f006 f868 	bl	d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    77ba:	4907      	ldr	r1, [pc, #28]	; (77d8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x60>)
    77bc:	f5a1 7081 	sub.w	r0, r1, #258	; 0x102
    77c0:	f7f9 ff72 	bl	16a8 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    77c4:	2000      	movs	r0, #0
    77c6:	f005 ffbe 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    77ca:	f7fd fe77 	bl	54bc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    77ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77d2:	f7fb b98d 	b.w	2af0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    77d6:	0000      	.short	0x0000
    77d8:	20001612 	.word	0x20001612
    77dc:	b510      	push	{r4, lr}
    77de:	f7ff fb69 	bl	6eb4 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    77e2:	f7fd f88f 	bl	4904 <sym_ONCJZGDCVZ7ETEDMUY5VMUUWXXIFFJBUOZSJQ3Q>
    77e6:	f7fd fcfb 	bl	51e0 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    77ea:	f7ff fd07 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
    77ee:	4601      	mov	r1, r0
    77f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77f4:	4801      	ldr	r0, [pc, #4]	; (77fc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x84>)
    77f6:	f7fb bd6b 	b.w	32d0 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    77fa:	0000      	.short	0x0000
    77fc:	20001510 	.word	0x20001510

00007800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    7800:	4a04      	ldr	r2, [pc, #16]	; (7814 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x14>)
    7802:	08c1      	lsrs	r1, r0, #3
    7804:	f000 0307 	and.w	r3, r0, #7
    7808:	2001      	movs	r0, #1
    780a:	4098      	lsls	r0, r3
    780c:	5c53      	ldrb	r3, [r2, r1]
    780e:	4303      	orrs	r3, r0
    7810:	5453      	strb	r3, [r2, r1]
    7812:	4770      	bx	lr
    7814:	20000020 	.word	0x20000020

00007818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    7818:	4901      	ldr	r1, [pc, #4]	; (7820 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    781a:	e9d1 0100 	ldrd	r0, r1, [r1]
    781e:	4770      	bx	lr
    7820:	20000020 	.word	0x20000020

00007824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    7824:	4806      	ldr	r0, [pc, #24]	; (7840 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x1c>)
    7826:	8801      	ldrh	r1, [r0, #0]
    7828:	7900      	ldrb	r0, [r0, #4]
    782a:	0602      	lsls	r2, r0, #24
    782c:	ea42 2011 	orr.w	r0, r2, r1, lsr #8
    7830:	f000 0001 	and.w	r0, r0, #1
    7834:	1800      	adds	r0, r0, r0
    7836:	b2c0      	uxtb	r0, r0
    7838:	f040 0001 	orr.w	r0, r0, #1
    783c:	4770      	bx	lr
    783e:	0000      	.short	0x0000
    7840:	20000020 	.word	0x20000020

00007844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    7844:	b510      	push	{r4, lr}
    7846:	f004 fc99 	bl	c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    784a:	2200      	movs	r2, #0
    784c:	4b08      	ldr	r3, [pc, #32]	; (7870 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    784e:	4611      	mov	r1, r2
    7850:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    7854:	4284      	cmp	r4, r0
    7856:	d303      	bcc.n	7860 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    7858:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    785c:	7882      	ldrb	r2, [r0, #2]
    785e:	e003      	b.n	7868 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    7860:	1c49      	adds	r1, r1, #1
    7862:	b2c9      	uxtb	r1, r1
    7864:	290c      	cmp	r1, #12
    7866:	d3f3      	bcc.n	7850 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    7868:	4802      	ldr	r0, [pc, #8]	; (7874 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    786a:	7002      	strb	r2, [r0, #0]
    786c:	bd10      	pop	{r4, pc}
    786e:	0000      	.short	0x0000
    7870:	00010158 	.word	0x00010158
    7874:	20000359 	.word	0x20000359

00007878 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    7878:	4802      	ldr	r0, [pc, #8]	; (7884 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0xc>)
    787a:	7800      	ldrb	r0, [r0, #0]
    787c:	f000 0007 	and.w	r0, r0, #7
    7880:	4770      	bx	lr
    7882:	0000      	.short	0x0000
    7884:	20000359 	.word	0x20000359

00007888 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    7888:	b570      	push	{r4, r5, r6, lr}
    788a:	4605      	mov	r5, r0
    788c:	4616      	mov	r6, r2
    788e:	460c      	mov	r4, r1
    7890:	2002      	movs	r0, #2
    7892:	f000 f9b7 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7896:	4906      	ldr	r1, [pc, #24]	; (78b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    7898:	2001      	movs	r0, #1
    789a:	1ef6      	subs	r6, r6, #3
    789c:	7008      	strb	r0, [r1, #0]
    789e:	4805      	ldr	r0, [pc, #20]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a0:	6006      	str	r6, [r0, #0]
    78a2:	4804      	ldr	r0, [pc, #16]	; (78b4 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    78a4:	3808      	subs	r0, #8
    78a6:	6005      	str	r5, [r0, #0]
    78a8:	1f00      	subs	r0, r0, #4
    78aa:	6004      	str	r4, [r0, #0]
    78ac:	bd70      	pop	{r4, r5, r6, pc}
    78ae:	0000      	.short	0x0000
    78b0:	2000035a 	.word	0x2000035a
    78b4:	4000f510 	.word	0x4000f510

000078b8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    78b8:	b510      	push	{r4, lr}
    78ba:	4c0c      	ldr	r4, [pc, #48]	; (78ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    78bc:	7820      	ldrb	r0, [r4, #0]
    78be:	b180      	cbz	r0, 78e2 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    78c0:	490b      	ldr	r1, [pc, #44]	; (78f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    78c2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    78c6:	6008      	str	r0, [r1, #0]
    78c8:	f000 f86a 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    78cc:	2100      	movs	r1, #0
    78ce:	b120      	cbz	r0, 78da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    78d0:	2001      	movs	r0, #1
    78d2:	7060      	strb	r0, [r4, #1]
    78d4:	4807      	ldr	r0, [pc, #28]	; (78f4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    78d6:	6800      	ldr	r0, [r0, #0]
    78d8:	e001      	b.n	78de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    78da:	7061      	strb	r1, [r4, #1]
    78dc:	2010      	movs	r0, #16
    78de:	70a0      	strb	r0, [r4, #2]
    78e0:	7021      	strb	r1, [r4, #0]
    78e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    78e6:	2000      	movs	r0, #0
    78e8:	f000 b98c 	b.w	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    78ec:	2000035a 	.word	0x2000035a
    78f0:	4001f508 	.word	0x4001f508
    78f4:	4000f400 	.word	0x4000f400

000078f8 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    78f8:	b510      	push	{r4, lr}
    78fa:	2002      	movs	r0, #2
    78fc:	f000 f982 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    7900:	4904      	ldr	r1, [pc, #16]	; (7914 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    7902:	2001      	movs	r0, #1
    7904:	7008      	strb	r0, [r1, #0]
    7906:	f000 f859 	bl	79bc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    790a:	4903      	ldr	r1, [pc, #12]	; (7918 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    790c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7910:	6008      	str	r0, [r1, #0]
    7912:	bd10      	pop	{r4, pc}
    7914:	2000035a 	.word	0x2000035a
    7918:	4001f504 	.word	0x4001f504

0000791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    791c:	4803      	ldr	r0, [pc, #12]	; (792c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    791e:	2100      	movs	r1, #0
    7920:	7001      	strb	r1, [r0, #0]
    7922:	7041      	strb	r1, [r0, #1]
    7924:	2110      	movs	r1, #16
    7926:	7081      	strb	r1, [r0, #2]
    7928:	4770      	bx	lr
    792a:	0000      	.short	0x0000
    792c:	2000035a 	.word	0x2000035a

00007930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    7930:	4807      	ldr	r0, [pc, #28]	; (7950 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    7932:	b510      	push	{r4, lr}
    7934:	7801      	ldrb	r1, [r0, #0]
    7936:	b141      	cbz	r1, 794a <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    7938:	f000 f832 	bl	79a0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    793c:	b118      	cbz	r0, 7946 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    793e:	4805      	ldr	r0, [pc, #20]	; (7954 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    7940:	6800      	ldr	r0, [r0, #0]
    7942:	b2c0      	uxtb	r0, r0
    7944:	bd10      	pop	{r4, pc}
    7946:	2010      	movs	r0, #16
    7948:	bd10      	pop	{r4, pc}
    794a:	7880      	ldrb	r0, [r0, #2]
    794c:	bd10      	pop	{r4, pc}
    794e:	0000      	.short	0x0000
    7950:	2000035a 	.word	0x2000035a
    7954:	4000f400 	.word	0x4000f400

00007958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    7958:	4808      	ldr	r0, [pc, #32]	; (797c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    795a:	b510      	push	{r4, lr}
    795c:	7801      	ldrb	r1, [r0, #0]
    795e:	b159      	cbz	r1, 7978 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    7960:	4807      	ldr	r0, [pc, #28]	; (7980 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    7962:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    7966:	b128      	cbz	r0, 7974 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    7968:	f000 f80c 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    796c:	2800      	cmp	r0, #0
    796e:	d000      	beq.n	7972 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    7970:	2001      	movs	r0, #1
    7972:	bd10      	pop	{r4, pc}
    7974:	2002      	movs	r0, #2
    7976:	bd10      	pop	{r4, pc}
    7978:	7840      	ldrb	r0, [r0, #1]
    797a:	bd10      	pop	{r4, pc}
    797c:	2000035a 	.word	0x2000035a
    7980:	4000f000 	.word	0x4000f000
    7984:	4805      	ldr	r0, [pc, #20]	; (799c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    7986:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    798a:	b111      	cbz	r1, 7992 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    798c:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    7990:	b108      	cbz	r0, 7996 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    7992:	2000      	movs	r0, #0
    7994:	4770      	bx	lr
    7996:	2001      	movs	r0, #1
    7998:	4770      	bx	lr
    799a:	0000      	.short	0x0000
    799c:	4000f000 	.word	0x4000f000
    79a0:	4805      	ldr	r0, [pc, #20]	; (79b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    79a2:	b510      	push	{r4, lr}
    79a4:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    79a8:	b120      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79aa:	f7ff ffeb 	bl	7984 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    79ae:	b108      	cbz	r0, 79b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    79b0:	2001      	movs	r0, #1
    79b2:	bd10      	pop	{r4, pc}
    79b4:	2000      	movs	r0, #0
    79b6:	bd10      	pop	{r4, pc}
    79b8:	4000f000 	.word	0x4000f000
    79bc:	4804      	ldr	r0, [pc, #16]	; (79d0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    79be:	2100      	movs	r1, #0
    79c0:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    79c4:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    79c8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    79cc:	4770      	bx	lr
    79ce:	0000      	.short	0x0000
    79d0:	4000f000 	.word	0x4000f000

000079d4 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA>:
    79d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d8:	4604      	mov	r4, r0
    79da:	461e      	mov	r6, r3
    79dc:	4690      	mov	r8, r2
    79de:	460f      	mov	r7, r1
    79e0:	2001      	movs	r0, #1
    79e2:	f000 f90f 	bl	7c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    79e6:	4d1e      	ldr	r5, [pc, #120]	; (7a60 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x8c>)
    79e8:	481e      	ldr	r0, [pc, #120]	; (7a64 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x90>)
    79ea:	f004 0103 	and.w	r1, r4, #3
    79ee:	712e      	strb	r6, [r5, #4]
    79f0:	6800      	ldr	r0, [r0, #0]
    79f2:	0432      	lsls	r2, r6, #16
    79f4:	f361 0007 	bfi	r0, r1, #0, #8
    79f8:	f366 200f 	bfi	r0, r6, #8, #8
    79fc:	0c00      	lsrs	r0, r0, #16
    79fe:	4e1a      	ldr	r6, [pc, #104]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a00:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    7a04:	4308      	orrs	r0, r1
    7a06:	f8c6 0504 	str.w	r0, [r6, #1284]	; 0x504
    7a0a:	4818      	ldr	r0, [pc, #96]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a0c:	6007      	str	r7, [r0, #0]
    7a0e:	f008 fd91 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7a12:	b938      	cbnz	r0, 7a24 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x50>
    7a14:	4815      	ldr	r0, [pc, #84]	; (7a6c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x98>)
    7a16:	3010      	adds	r0, #16
    7a18:	6801      	ldr	r1, [r0, #0]
    7a1a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    7a1e:	ea41 0108 	orr.w	r1, r1, r8
    7a22:	6001      	str	r1, [r0, #0]
    7a24:	f000 f8e4 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7a28:	b10c      	cbz	r4, 7a2e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x5a>
    7a2a:	2c04      	cmp	r4, #4
    7a2c:	d107      	bne.n	7a3e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x6a>
    7a2e:	4811      	ldr	r0, [pc, #68]	; (7a74 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0xa0>)
    7a30:	490d      	ldr	r1, [pc, #52]	; (7a68 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x94>)
    7a32:	4a0f      	ldr	r2, [pc, #60]	; (7a70 <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x9c>)
    7a34:	1d09      	adds	r1, r1, #4
    7a36:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    7a3a:	f8c0 1514 	str.w	r1, [r0, #1300]	; 0x514
    7a3e:	2001      	movs	r0, #1
    7a40:	7068      	strb	r0, [r5, #1]
    7a42:	70ec      	strb	r4, [r5, #3]
    7a44:	b11c      	cbz	r4, 7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a46:	2c01      	cmp	r4, #1
    7a48:	d001      	beq.n	7a4e <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x7a>
    7a4a:	2c02      	cmp	r4, #2
    7a4c:	d106      	bne.n	7a5c <sym_5I5MTMPTF2F4WI7MIXG5OG4TUPLUR53CB2QHVUA+0x88>
    7a4e:	7028      	strb	r0, [r5, #0]
    7a50:	2100      	movs	r1, #0
    7a52:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
    7a56:	f8c6 1200 	str.w	r1, [r6, #512]	; 0x200
    7a5a:	6030      	str	r0, [r6, #0]
    7a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a60:	2000035d 	.word	0x2000035d
    7a64:	00007c00 	.word	0x00007c00
    7a68:	4000f000 	.word	0x4000f000
    7a6c:	4000f508 	.word	0x4000f508
    7a70:	4000f100 	.word	0x4000f100
    7a74:	4001f088 	.word	0x4001f088

00007a78 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA>:
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	4a1c      	ldr	r2, [pc, #112]	; (7aec <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x74>)
    7a7c:	7853      	ldrb	r3, [r2, #1]
    7a7e:	b1a3      	cbz	r3, 7aaa <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x32>
    7a80:	4b1b      	ldr	r3, [pc, #108]	; (7af0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x78>)
    7a82:	6019      	str	r1, [r3, #0]
    7a84:	1d19      	adds	r1, r3, #4
    7a86:	6008      	str	r0, [r1, #0]
    7a88:	2501      	movs	r5, #1
    7a8a:	7095      	strb	r5, [r2, #2]
    7a8c:	4610      	mov	r0, r2
    7a8e:	78d6      	ldrb	r6, [r2, #3]
    7a90:	4b18      	ldr	r3, [pc, #96]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7a92:	7800      	ldrb	r0, [r0, #0]
    7a94:	4c18      	ldr	r4, [pc, #96]	; (7af8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x80>)
    7a96:	2100      	movs	r1, #0
    7a98:	b156      	cbz	r6, 7ab0 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x38>
    7a9a:	2e04      	cmp	r6, #4
    7a9c:	d01b      	beq.n	7ad6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5e>
    7a9e:	b308      	cbz	r0, 7ae4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6c>
    7aa0:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7aa4:	0668      	lsls	r0, r5, #25
    7aa6:	6018      	str	r0, [r3, #0]
    7aa8:	bd70      	pop	{r4, r5, r6, pc}
    7aaa:	f240 11bd 	movw	r1, #445	; 0x1bd
    7aae:	e01a      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ab0:	b178      	cbz	r0, 7ad2 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x5a>
    7ab2:	4620      	mov	r0, r4
    7ab4:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7ab8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
    7abc:	601e      	str	r6, [r3, #0]
    7abe:	1271      	asrs	r1, r6, #9
    7ac0:	f008 fbc2 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7ac4:	2800      	cmp	r0, #0
    7ac6:	d0ef      	beq.n	7aa8 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x30>
    7ac8:	6065      	str	r5, [r4, #4]
    7aca:	480a      	ldr	r0, [pc, #40]	; (7af4 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x7c>)
    7acc:	1d00      	adds	r0, r0, #4
    7ace:	6006      	str	r6, [r0, #0]
    7ad0:	bd70      	pop	{r4, r5, r6, pc}
    7ad2:	21b3      	movs	r1, #179	; 0xb3
    7ad4:	e007      	b.n	7ae6 <sym_WLH66EC4H754I3MAYKGHFOCADIOY4E4WNRBI4TA+0x6e>
    7ad6:	7015      	strb	r5, [r2, #0]
    7ad8:	f8c4 1104 	str.w	r1, [r4, #260]	; 0x104
    7adc:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
    7ae0:	6025      	str	r5, [r4, #0]
    7ae2:	bd70      	pop	{r4, r5, r6, pc}
    7ae4:	21c6      	movs	r1, #198	; 0xc6
    7ae6:	203c      	movs	r0, #60	; 0x3c
    7ae8:	f7f8 ffbc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7aec:	2000035d 	.word	0x2000035d
    7af0:	4000f50c 	.word	0x4000f50c
    7af4:	4001f504 	.word	0x4001f504
    7af8:	4000f000 	.word	0x4000f000

00007afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	4d05      	ldr	r5, [pc, #20]	; (7b14 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x18>)
    7b00:	2400      	movs	r4, #0
    7b02:	7828      	ldrb	r0, [r5, #0]
    7b04:	b110      	cbz	r0, 7b0c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x10>
    7b06:	f000 f873 	bl	7bf0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>
    7b0a:	702c      	strb	r4, [r5, #0]
    7b0c:	706c      	strb	r4, [r5, #1]
    7b0e:	70ac      	strb	r4, [r5, #2]
    7b10:	bd70      	pop	{r4, r5, r6, pc}
    7b12:	0000      	.short	0x0000
    7b14:	2000035d 	.word	0x2000035d

00007b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    7b18:	4802      	ldr	r0, [pc, #8]	; (7b24 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0xc>)
    7b1a:	2100      	movs	r1, #0
    7b1c:	7001      	strb	r1, [r0, #0]
    7b1e:	7041      	strb	r1, [r0, #1]
    7b20:	7081      	strb	r1, [r0, #2]
    7b22:	4770      	bx	lr
    7b24:	2000035d 	.word	0x2000035d

00007b28 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    7b28:	480b      	ldr	r0, [pc, #44]	; (7b58 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x30>)
    7b2a:	b510      	push	{r4, lr}
    7b2c:	7800      	ldrb	r0, [r0, #0]
    7b2e:	b158      	cbz	r0, 7b48 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>
    7b30:	f44f 7182 	mov.w	r1, #260	; 0x104
    7b34:	4809      	ldr	r0, [pc, #36]	; (7b5c <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x34>)
    7b36:	f008 fb87 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b3a:	b140      	cbz	r0, 7b4e <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x26>
    7b3c:	4808      	ldr	r0, [pc, #32]	; (7b60 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x38>)
    7b3e:	6800      	ldr	r0, [r0, #0]
    7b40:	2800      	cmp	r0, #0
    7b42:	d000      	beq.n	7b46 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1e>
    7b44:	2001      	movs	r0, #1
    7b46:	bd10      	pop	{r4, pc}
    7b48:	f240 2123 	movw	r1, #547	; 0x223
    7b4c:	e001      	b.n	7b52 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x2a>
    7b4e:	f44f 7109 	mov.w	r1, #548	; 0x224
    7b52:	203c      	movs	r0, #60	; 0x3c
    7b54:	f7f8 ff86 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b58:	2000035d 	.word	0x2000035d
    7b5c:	4000f000 	.word	0x4000f000
    7b60:	4000f400 	.word	0x4000f400

00007b64 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    7b64:	4801      	ldr	r0, [pc, #4]	; (7b6c <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    7b66:	2101      	movs	r1, #1
    7b68:	6081      	str	r1, [r0, #8]
    7b6a:	4770      	bx	lr
    7b6c:	4000f000 	.word	0x4000f000

00007b70 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    7b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b74:	481b      	ldr	r0, [pc, #108]	; (7be4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    7b76:	7800      	ldrb	r0, [r0, #0]
    7b78:	b1d8      	cbz	r0, 7bb2 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x42>
    7b7a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7be8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    7b7e:	f44f 7682 	mov.w	r6, #260	; 0x104
    7b82:	4631      	mov	r1, r6
    7b84:	4640      	mov	r0, r8
    7b86:	f008 fb5f 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7b8a:	2800      	cmp	r0, #0
    7b8c:	d128      	bne.n	7be0 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>
    7b8e:	2002      	movs	r0, #2
    7b90:	f8c8 0304 	str.w	r0, [r8, #772]	; 0x304
    7b94:	4c15      	ldr	r4, [pc, #84]	; (7bec <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x7c>)
    7b96:	6820      	ldr	r0, [r4, #0]
    7b98:	43c0      	mvns	r0, r0
    7b9a:	f340 1500 	sbfx	r5, r0, #4, #1
    7b9e:	6820      	ldr	r0, [r4, #0]
    7ba0:	f040 0010 	orr.w	r0, r0, #16
    7ba4:	6020      	str	r0, [r4, #0]
    7ba6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7baa:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    7bae:	1c6d      	adds	r5, r5, #1
    7bb0:	e008      	b.n	7bc4 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x54>
    7bb2:	f240 212f 	movw	r1, #559	; 0x22f
    7bb6:	203c      	movs	r0, #60	; 0x3c
    7bb8:	f7f8 ff54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bbc:	f8c9 7280 	str.w	r7, [r9, #640]	; 0x280
    7bc0:	f008 fcf8 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    7bc4:	4631      	mov	r1, r6
    7bc6:	4640      	mov	r0, r8
    7bc8:	f008 fb3e 	bl	10248 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x24>
    7bcc:	2800      	cmp	r0, #0
    7bce:	d0f5      	beq.n	7bbc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x4c>
    7bd0:	b91d      	cbnz	r5, 7bda <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6a>
    7bd2:	6820      	ldr	r0, [r4, #0]
    7bd4:	f020 0010 	bic.w	r0, r0, #16
    7bd8:	6020      	str	r0, [r4, #0]
    7bda:	2002      	movs	r0, #2
    7bdc:	f8c8 0308 	str.w	r0, [r8, #776]	; 0x308
    7be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7be4:	2000035d 	.word	0x2000035d
    7be8:	4000f000 	.word	0x4000f000
    7bec:	e000ed10 	.word	0xe000ed10
    7bf0:	4902      	ldr	r1, [pc, #8]	; (7bfc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x8c>)
    7bf2:	4801      	ldr	r0, [pc, #4]	; (7bf8 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x88>)
    7bf4:	6008      	str	r0, [r1, #0]
    7bf6:	4770      	bx	lr
    7bf8:	02020000 	.word	0x02020000
    7bfc:	4001f508 	.word	0x4001f508
    7c00:	00010000 	.word	0x00010000

00007c04 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    7c04:	b510      	push	{r4, lr}
    7c06:	4604      	mov	r4, r0
    7c08:	f000 f820 	bl	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
    7c0c:	2c00      	cmp	r4, #0
    7c0e:	d00e      	beq.n	7c2e <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2a>
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c12:	480b      	ldr	r0, [pc, #44]	; (7c40 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>)
    7c14:	490b      	ldr	r1, [pc, #44]	; (7c44 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    7c16:	3214      	adds	r2, #20
    7c18:	2c01      	cmp	r4, #1
    7c1a:	d005      	beq.n	7c28 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x24>
    7c1c:	2c02      	cmp	r4, #2
    7c1e:	d007      	beq.n	7c30 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x2c>
    7c20:	2182      	movs	r1, #130	; 0x82
    7c22:	203d      	movs	r0, #61	; 0x3d
    7c24:	f7f8 ff1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7c28:	2302      	movs	r3, #2
    7c2a:	6003      	str	r3, [r0, #0]
    7c2c:	6011      	str	r1, [r2, #0]
    7c2e:	bd10      	pop	{r4, pc}
    7c30:	2303      	movs	r3, #3
    7c32:	6003      	str	r3, [r0, #0]
    7c34:	6011      	str	r1, [r2, #0]
    7c36:	4904      	ldr	r1, [pc, #16]	; (7c48 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    7c38:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c3c:	6008      	str	r0, [r1, #0]
    7c3e:	bd10      	pop	{r4, pc}
    7c40:	4000f500 	.word	0x4000f500
    7c44:	20001714 	.word	0x20001714
    7c48:	4001f504 	.word	0x4001f504
    7c4c:	4805      	ldr	r0, [pc, #20]	; (7c64 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    7c4e:	b510      	push	{r4, lr}
    7c50:	2100      	movs	r1, #0
    7c52:	6001      	str	r1, [r0, #0]
    7c54:	6001      	str	r1, [r0, #0]
    7c56:	f7ff ff51 	bl	7afc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    7c5a:	4903      	ldr	r1, [pc, #12]	; (7c68 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    7c5c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7c60:	6008      	str	r0, [r1, #0]
    7c62:	bd10      	pop	{r4, pc}
    7c64:	4000f500 	.word	0x4000f500
    7c68:	4001f508 	.word	0x4001f508

00007c6c <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    7c6c:	4805      	ldr	r0, [pc, #20]	; (7c84 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    7c6e:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    7c72:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    7c76:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    7c7a:	2100      	movs	r1, #0
    7c7c:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    7c80:	4770      	bx	lr
    7c82:	0000      	.short	0x0000
    7c84:	40001000 	.word	0x40001000

00007c88 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    7c88:	4904      	ldr	r1, [pc, #16]	; (7c9c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    7c8a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    7c8e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    7c92:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    7c96:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    7c9a:	4770      	bx	lr
    7c9c:	40001000 	.word	0x40001000

00007ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>:
    7ca0:	4902      	ldr	r1, [pc, #8]	; (7cac <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I+0xc>)
    7ca2:	5c08      	ldrb	r0, [r1, r0]
    7ca4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    7ca8:	4770      	bx	lr
    7caa:	0000      	.short	0x0000
    7cac:	00008972 	.word	0x00008972

00007cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb2:	4c24      	ldr	r4, [pc, #144]	; (7d44 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    7cb4:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    7cb8:	f010 0f10 	tst.w	r0, #16
    7cbc:	d001      	beq.n	7cc2 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    7cbe:	2701      	movs	r7, #1
    7cc0:	e000      	b.n	7cc4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    7cc2:	2700      	movs	r7, #0
    7cc4:	2010      	movs	r0, #16
    7cc6:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    7cca:	2002      	movs	r0, #2
    7ccc:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    7cd0:	481d      	ldr	r0, [pc, #116]	; (7d48 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    7cd2:	2500      	movs	r5, #0
    7cd4:	491d      	ldr	r1, [pc, #116]	; (7d4c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    7cd6:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    7cda:	f44f 2060 	mov.w	r0, #917504	; 0xe0000
    7cde:	6008      	str	r0, [r1, #0]
    7ce0:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    7ce4:	f44f 7688 	mov.w	r6, #272	; 0x110
    7ce8:	f010 0fff 	tst.w	r0, #255	; 0xff
    7cec:	d019      	beq.n	7d22 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x72>
    7cee:	20ff      	movs	r0, #255	; 0xff
    7cf0:	f88d 0000 	strb.w	r0, [sp]
    7cf4:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7cf8:	2001      	movs	r0, #1
    7cfa:	6120      	str	r0, [r4, #16]
    7cfc:	e005      	b.n	7d0a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x5a>
    7cfe:	bf00      	nop
    7d00:	f89d 0000 	ldrb.w	r0, [sp]
    7d04:	1e40      	subs	r0, r0, #1
    7d06:	f88d 0000 	strb.w	r0, [sp]
    7d0a:	f89d 0000 	ldrb.w	r0, [sp]
    7d0e:	b128      	cbz	r0, 7d1c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6c>
    7d10:	4631      	mov	r1, r6
    7d12:	4620      	mov	r0, r4
    7d14:	f008 fac7 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    7d18:	2800      	cmp	r0, #0
    7d1a:	d0f1      	beq.n	7d00 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x50>
    7d1c:	f89d 0000 	ldrb.w	r0, [sp]
    7d20:	b158      	cbz	r0, 7d3a <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x8a>
    7d22:	f000 fc15 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    7d26:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    7d2a:	f000 fda3 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7d2e:	2f00      	cmp	r7, #0
    7d30:	d002      	beq.n	7d38 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x88>
    7d32:	2010      	movs	r0, #16
    7d34:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    7d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7d3a:	f640 01aa 	movw	r1, #2218	; 0x8aa
    7d3e:	203e      	movs	r0, #62	; 0x3e
    7d40:	f7f8 fe90 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d44:	40001000 	.word	0x40001000
    7d48:	20000e20 	.word	0x20000e20
    7d4c:	4001f508 	.word	0x4001f508

00007d50 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    7d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d54:	4d18      	ldr	r5, [pc, #96]	; (7db8 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x68>)
    7d56:	4607      	mov	r7, r0
    7d58:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    7d5c:	07c2      	lsls	r2, r0, #31
    7d5e:	d00f      	beq.n	7d80 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x30>
    7d60:	4c16      	ldr	r4, [pc, #88]	; (7dbc <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x6c>)
    7d62:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
    7d66:	f042 0201 	orr.w	r2, r2, #1
    7d6a:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    7d6e:	f040 0002 	orr.w	r0, r0, #2
    7d72:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    7d76:	2601      	movs	r6, #1
    7d78:	b13f      	cbz	r7, 7d8a <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x3a>
    7d7a:	2f01      	cmp	r7, #1
    7d7c:	d00b      	beq.n	7d96 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x46>
    7d7e:	e010      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d80:	f240 7185 	movw	r1, #1925	; 0x785
    7d84:	203e      	movs	r0, #62	; 0x3e
    7d86:	f7f8 fe6d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	4608      	mov	r0, r1
    7d8c:	f000 fdcc 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7d90:	726e      	strb	r6, [r5, #9]
    7d92:	6026      	str	r6, [r4, #0]
    7d94:	e005      	b.n	7da2 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x52>
    7d96:	4608      	mov	r0, r1
    7d98:	f000 fdac 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7d9c:	2002      	movs	r0, #2
    7d9e:	7268      	strb	r0, [r5, #9]
    7da0:	6066      	str	r6, [r4, #4]
    7da2:	4807      	ldr	r0, [pc, #28]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da4:	64c6      	str	r6, [r0, #76]	; 0x4c
    7da6:	4806      	ldr	r0, [pc, #24]	; (7dc0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x70>)
    7da8:	300c      	adds	r0, #12
    7daa:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    7dae:	4638      	mov	r0, r7
    7db0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7db4:	f000 bd30 	b.w	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7db8:	20000e20 	.word	0x20000e20
    7dbc:	40001000 	.word	0x40001000
    7dc0:	40008000 	.word	0x40008000

00007dc4 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    7dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7dc8:	4c2c      	ldr	r4, [pc, #176]	; (7e7c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb8>)
    7dca:	0006      	movs	r6, r0
    7dcc:	4d2c      	ldr	r5, [pc, #176]	; (7e80 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xbc>)
    7dce:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    7dd2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 7e84 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc0>
    7dd6:	f040 0002 	orr.w	r0, r0, #2
    7dda:	4689      	mov	r9, r1
    7ddc:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    7de0:	f04f 0700 	mov.w	r7, #0
    7de4:	d002      	beq.n	7dec <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x28>
    7de6:	2e01      	cmp	r6, #1
    7de8:	d020      	beq.n	7e2c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x68>
    7dea:	e036      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7dec:	4608      	mov	r0, r1
    7dee:	f000 fd9b 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    7df2:	2001      	movs	r0, #1
    7df4:	7260      	strb	r0, [r4, #9]
    7df6:	79e0      	ldrb	r0, [r4, #7]
    7df8:	2801      	cmp	r0, #1
    7dfa:	d105      	bne.n	7e08 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x44>
    7dfc:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e00:	f040 0008 	orr.w	r0, r0, #8
    7e04:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e0a:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    7e0e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e10:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    7e14:	f8c8 0000 	str.w	r0, [r8]
    7e18:	491b      	ldr	r1, [pc, #108]	; (7e88 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xc4>)
    7e1a:	f831 0019 	ldrh.w	r0, [r1, r9, lsl #1]
    7e1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    7e22:	f500 70fa 	add.w	r0, r0, #500	; 0x1f4
    7e26:	fbb0 f7f1 	udiv	r7, r0, r1
    7e2a:	e016      	b.n	7e5a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x96>
    7e2c:	4608      	mov	r0, r1
    7e2e:	f000 fd61 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    7e32:	2002      	movs	r0, #2
    7e34:	7260      	strb	r0, [r4, #9]
    7e36:	79e0      	ldrb	r0, [r4, #7]
    7e38:	2801      	cmp	r0, #1
    7e3a:	d105      	bne.n	7e48 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    7e3c:	f8d5 0200 	ldr.w	r0, [r5, #512]	; 0x200
    7e40:	f040 0004 	orr.w	r0, r0, #4
    7e44:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    7e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7e4a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    7e4e:	62a0      	str	r0, [r4, #40]	; 0x28
    7e50:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    7e54:	f8c8 0000 	str.w	r0, [r8]
    7e58:	2729      	movs	r7, #41	; 0x29
    7e5a:	f000 fbe5 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    7e5e:	f008 fa6a 	bl	10336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>
    7e62:	b120      	cbz	r0, 7e6e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xaa>
    7e64:	f7ff ff24 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7e68:	2000      	movs	r0, #0
    7e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7e6e:	2100      	movs	r1, #0
    7e70:	4630      	mov	r0, r6
    7e72:	f000 fcd1 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    7e76:	4638      	mov	r0, r7
    7e78:	e7f7      	b.n	7e6a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xa6>
    7e7a:	0000      	.short	0x0000
    7e7c:	20000e20 	.word	0x20000e20
    7e80:	40001000 	.word	0x40001000
    7e84:	4001f504 	.word	0x4001f504
    7e88:	0000896c 	.word	0x0000896c

00007e8c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    7e8c:	b510      	push	{r4, lr}
    7e8e:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    7e90:	4901      	ldr	r1, [pc, #4]	; (7e98 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    7e92:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    7e96:	bd10      	pop	{r4, pc}
    7e98:	20000e10 	.word	0x20000e10

00007e9c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    7e9c:	b570      	push	{r4, r5, r6, lr}
    7e9e:	4c0f      	ldr	r4, [pc, #60]	; (7edc <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x40>)
    7ea0:	4603      	mov	r3, r0
    7ea2:	2002      	movs	r0, #2
    7ea4:	7320      	strb	r0, [r4, #12]
    7ea6:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
    7eaa:	2096      	movs	r0, #150	; 0x96
    7eac:	f894 1020 	ldrb.w	r1, [r4, #32]
    7eb0:	7d22      	ldrb	r2, [r4, #20]
    7eb2:	2d01      	cmp	r5, #1
    7eb4:	d00e      	beq.n	7ed4 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x38>
    7eb6:	f000 fd95 	bl	89e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    7eba:	6120      	str	r0, [r4, #16]
    7ebc:	4808      	ldr	r0, [pc, #32]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ebe:	2100      	movs	r1, #0
    7ec0:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    7ec4:	6921      	ldr	r1, [r4, #16]
    7ec6:	69e0      	ldr	r0, [r4, #28]
    7ec8:	4408      	add	r0, r1
    7eca:	4905      	ldr	r1, [pc, #20]	; (7ee0 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x44>)
    7ecc:	1d09      	adds	r1, r1, #4
    7ece:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    7ed2:	bd70      	pop	{r4, r5, r6, pc}
    7ed4:	f000 fda4 	bl	8a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    7ed8:	e7ef      	b.n	7eba <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x1e>
    7eda:	0000      	.short	0x0000
    7edc:	20000e20 	.word	0x20000e20
    7ee0:	40008000 	.word	0x40008000

00007ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    7ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ee8:	2238      	movs	r2, #56	; 0x38
    7eea:	2100      	movs	r1, #0
    7eec:	4813      	ldr	r0, [pc, #76]	; (7f3c <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    7eee:	f008 fc38 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7ef2:	f000 fcbf 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    7ef6:	f008 faf2 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    7efa:	4d11      	ldr	r5, [pc, #68]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efc:	4e10      	ldr	r6, [pc, #64]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7efe:	2400      	movs	r4, #0
    7f00:	4f0f      	ldr	r7, [pc, #60]	; (7f40 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    7f02:	3508      	adds	r5, #8
    7f04:	3610      	adds	r6, #16
    7f06:	b928      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f08:	f008 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    7f0c:	b910      	cbnz	r0, 7f14 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    7f0e:	f008 fb07 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    7f12:	b108      	cbz	r0, 7f18 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    7f14:	2224      	movs	r2, #36	; 0x24
    7f16:	e006      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f18:	f008 fb42 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    7f1c:	b910      	cbnz	r0, 7f24 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    7f1e:	f008 fb35 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    7f22:	b140      	cbz	r0, 7f36 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    7f24:	2240      	movs	r2, #64	; 0x40
    7f26:	21ff      	movs	r1, #255	; 0xff
    7f28:	4638      	mov	r0, r7
    7f2a:	f008 fc1a 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7f2e:	602c      	str	r4, [r5, #0]
    7f30:	6034      	str	r4, [r6, #0]
    7f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f36:	2238      	movs	r2, #56	; 0x38
    7f38:	e7f5      	b.n	7f26 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    7f3a:	0000      	.short	0x0000
    7f3c:	20000e20 	.word	0x20000e20
    7f40:	40000e00 	.word	0x40000e00

00007f44 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    7f44:	4801      	ldr	r0, [pc, #4]	; (7f4c <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x8>)
    7f46:	69c0      	ldr	r0, [r0, #28]
    7f48:	4770      	bx	lr
    7f4a:	0000      	.short	0x0000
    7f4c:	20000e20 	.word	0x20000e20

00007f50 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    7f50:	b510      	push	{r4, lr}
    7f52:	f000 fc43 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f56:	f7ff feab 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7f5a:	f004 fb8d 	bl	c678 <mpsl_fem_disable>
    7f5e:	b130      	cbz	r0, 7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f60:	1c40      	adds	r0, r0, #1
    7f62:	d004      	beq.n	7f6e <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x1e>
    7f64:	f240 516d 	movw	r1, #1389	; 0x56d
    7f68:	203e      	movs	r0, #62	; 0x3e
    7f6a:	f7f8 fd7b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7f6e:	480f      	ldr	r0, [pc, #60]	; (7fac <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x5c>)
    7f70:	4a0f      	ldr	r2, [pc, #60]	; (7fb0 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x60>)
    7f72:	6a81      	ldr	r1, [r0, #40]	; 0x28
    7f74:	f041 6144 	orr.w	r1, r1, #205520896	; 0xc400000
    7f78:	6011      	str	r1, [r2, #0]
    7f7a:	2400      	movs	r4, #0
    7f7c:	6284      	str	r4, [r0, #40]	; 0x28
    7f7e:	7304      	strb	r4, [r0, #12]
    7f80:	61c4      	str	r4, [r0, #28]
    7f82:	6184      	str	r4, [r0, #24]
    7f84:	f000 fc2a 	bl	87dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>
    7f88:	480a      	ldr	r0, [pc, #40]	; (7fb4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x64>)
    7f8a:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    7f8e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    7f92:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    7f96:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    7f9a:	2001      	movs	r0, #1
    7f9c:	f008 f972 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7fa4:	2001      	movs	r0, #1
    7fa6:	f008 b960 	b.w	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    7faa:	0000      	.short	0x0000
    7fac:	20000e20 	.word	0x20000e20
    7fb0:	4001f508 	.word	0x4001f508
    7fb4:	40008000 	.word	0x40008000

00007fb8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    7fb8:	b570      	push	{r4, r5, r6, lr}
    7fba:	2001      	movs	r0, #1
    7fbc:	f008 f962 	bl	10284 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    7fc0:	4c37      	ldr	r4, [pc, #220]	; (80a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa0>)
    7fc2:	2000      	movs	r0, #0
    7fc4:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fc8:	2001      	movs	r0, #1
    7fca:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    7fce:	f008 fabd 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    7fd2:	4d34      	ldr	r5, [pc, #208]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7fd4:	b118      	cbz	r0, 7fde <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    7fd6:	6828      	ldr	r0, [r5, #0]
    7fd8:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    7fdc:	6028      	str	r0, [r5, #0]
    7fde:	f008 faa9 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    7fe2:	b128      	cbz	r0, 7ff0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    7fe4:	6828      	ldr	r0, [r5, #0]
    7fe6:	4930      	ldr	r1, [pc, #192]	; (80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>)
    7fe8:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    7fec:	4308      	orrs	r0, r1
    7fee:	6028      	str	r0, [r5, #0]
    7ff0:	f008 fabc 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    7ff4:	b138      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7ff6:	482b      	ldr	r0, [pc, #172]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7ff8:	1d00      	adds	r0, r0, #4
    7ffa:	6801      	ldr	r1, [r0, #0]
    7ffc:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    8000:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    8004:	6001      	str	r1, [r0, #0]
    8006:	4927      	ldr	r1, [pc, #156]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8008:	4828      	ldr	r0, [pc, #160]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    800a:	313c      	adds	r1, #60	; 0x3c
    800c:	6008      	str	r0, [r1, #0]
    800e:	f004 fb6d 	bl	c6ec <mpsl_fem_device_config_254_apply_get>
    8012:	b140      	cbz	r0, 8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8014:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    8018:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    801c:	1c41      	adds	r1, r0, #1
    801e:	d002      	beq.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	4920      	ldr	r1, [pc, #128]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    8022:	3110      	adds	r1, #16
    8024:	6008      	str	r0, [r1, #0]
    8026:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    802a:	6e00      	ldr	r0, [r0, #96]	; 0x60
    802c:	1c41      	adds	r1, r0, #1
    802e:	d004      	beq.n	803a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a>
    8030:	491f      	ldr	r1, [pc, #124]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    8032:	680a      	ldr	r2, [r1, #0]
    8034:	f360 4217 	bfi	r2, r0, #16, #8
    8038:	600a      	str	r2, [r1, #0]
    803a:	f240 1103 	movw	r1, #259	; 0x103
    803e:	f240 605b 	movw	r0, #1627	; 0x65b
    8042:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    8046:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    804a:	2001      	movs	r0, #1
    804c:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    8050:	f000 f842 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8054:	f240 2001 	movw	r0, #513	; 0x201
    8058:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    805c:	2002      	movs	r0, #2
    805e:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    8062:	4914      	ldr	r1, [pc, #80]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
    8064:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    8068:	6008      	str	r0, [r1, #0]
    806a:	4913      	ldr	r1, [pc, #76]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    806c:	2000      	movs	r0, #0
    806e:	4d13      	ldr	r5, [pc, #76]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    8070:	8608      	strh	r0, [r1, #48]	; 0x30
    8072:	3110      	adds	r1, #16
    8074:	61c8      	str	r0, [r1, #28]
    8076:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    807a:	7028      	strb	r0, [r5, #0]
    807c:	2001      	movs	r0, #1
    807e:	f008 f8f4 	bl	1026a <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    8082:	2010      	movs	r0, #16
    8084:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    8088:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    808c:	2002      	movs	r0, #2
    808e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    8092:	6868      	ldr	r0, [r5, #4]
    8094:	2800      	cmp	r0, #0
    8096:	d002      	beq.n	809e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9e>
    8098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    809c:	4700      	bx	r0
    809e:	bd70      	pop	{r4, r5, r6, pc}
    80a0:	40001000 	.word	0x40001000
    80a4:	4000173c 	.word	0x4000173c
    80a8:	80000096 	.word	0x80000096
    80ac:	8900002c 	.word	0x8900002c
    80b0:	4000158c 	.word	0x4000158c
    80b4:	4001f504 	.word	0x4001f504
    80b8:	20000e10 	.word	0x20000e10
    80bc:	200002a0 	.word	0x200002a0

000080c0 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    80c0:	4901      	ldr	r1, [pc, #4]	; (80c8 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    80c2:	7548      	strb	r0, [r1, #21]
    80c4:	4770      	bx	lr
    80c6:	0000      	.short	0x0000
    80c8:	20000e20 	.word	0x20000e20

000080cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    80cc:	4901      	ldr	r1, [pc, #4]	; (80d4 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x8>)
    80ce:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    80d2:	4770      	bx	lr
    80d4:	000089c0 	.word	0x000089c0

000080d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>:
    80d8:	4908      	ldr	r1, [pc, #32]	; (80fc <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x24>)
    80da:	b510      	push	{r4, lr}
    80dc:	7508      	strb	r0, [r1, #20]
    80de:	4908      	ldr	r1, [pc, #32]	; (8100 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x28>)
    80e0:	2801      	cmp	r0, #1
    80e2:	d006      	beq.n	80f2 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1a>
    80e4:	2802      	cmp	r0, #2
    80e6:	d006      	beq.n	80f6 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x1e>
    80e8:	f640 5186 	movw	r1, #3462	; 0xd86
    80ec:	203e      	movs	r0, #62	; 0x3e
    80ee:	f7f8 fcb9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    80f2:	2003      	movs	r0, #3
    80f4:	e000      	b.n	80f8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ+0x20>
    80f6:	2004      	movs	r0, #4
    80f8:	6008      	str	r0, [r1, #0]
    80fa:	bd10      	pop	{r4, pc}
    80fc:	20000e20 	.word	0x20000e20
    8100:	40001510 	.word	0x40001510

00008104 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    8104:	4905      	ldr	r1, [pc, #20]	; (811c <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    8106:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    810a:	4805      	ldr	r0, [pc, #20]	; (8120 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    810c:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    8110:	f041 0101 	orr.w	r1, r1, #1
    8114:	7001      	strb	r1, [r0, #0]
    8116:	f000 ba4d 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    811a:	0000      	.short	0x0000
    811c:	40001000 	.word	0x40001000
    8120:	20000e20 	.word	0x20000e20

00008124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    8124:	4901      	ldr	r1, [pc, #4]	; (812c <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x8>)
    8126:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    812a:	4770      	bx	lr
    812c:	000089cc 	.word	0x000089cc

00008130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    8130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8134:	4e30      	ldr	r6, [pc, #192]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8136:	4c31      	ldr	r4, [pc, #196]	; (81fc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>)
    8138:	4688      	mov	r8, r1
    813a:	0007      	movs	r7, r0
    813c:	4615      	mov	r5, r2
    813e:	f04f 0901 	mov.w	r9, #1
    8142:	d006      	beq.n	8152 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x22>
    8144:	2f01      	cmp	r7, #1
    8146:	d012      	beq.n	816e <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x3e>
    8148:	f640 012d 	movw	r1, #2093	; 0x82d
    814c:	203e      	movs	r0, #62	; 0x3e
    814e:	f7f8 fc89 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8152:	4610      	mov	r0, r2
    8154:	f000 fbe8 	bl	8928 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x468>
    8158:	4829      	ldr	r0, [pc, #164]	; (8200 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd0>)
    815a:	f884 9009 	strb.w	r9, [r4, #9]
    815e:	f830 1015 	ldrh.w	r1, [r0, r5, lsl #1]
    8162:	4640      	mov	r0, r8
    8164:	f000 fb8e 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8168:	4605      	mov	r5, r0
    816a:	4630      	mov	r0, r6
    816c:	e00c      	b.n	8188 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x58>
    816e:	4610      	mov	r0, r2
    8170:	f000 fbc0 	bl	88f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    8174:	2002      	movs	r0, #2
    8176:	7260      	strb	r0, [r4, #9]
    8178:	f649 71ba 	movw	r1, #40890	; 0x9fba
    817c:	4640      	mov	r0, r8
    817e:	f000 fb81 	bl	8884 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>
    8182:	4605      	mov	r5, r0
    8184:	481c      	ldr	r0, [pc, #112]	; (81f8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xc8>)
    8186:	1d00      	adds	r0, r0, #4
    8188:	f000 fb3a 	bl	8800 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x340>
    818c:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>
    8190:	f8c8 5540 	str.w	r5, [r8, #1344]	; 0x540
    8194:	f8df a074 	ldr.w	sl, [pc, #116]	; 820c <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xdc>
    8198:	481b      	ldr	r0, [pc, #108]	; (8208 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd8>)
    819a:	f8ca 0510 	str.w	r0, [sl, #1296]	; 0x510
    819e:	2010      	movs	r0, #16
    81a0:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
    81a4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81a6:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    81aa:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    81ae:	62a0      	str	r0, [r4, #40]	; 0x28
    81b0:	4817      	ldr	r0, [pc, #92]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81b2:	6006      	str	r6, [r0, #0]
    81b4:	f000 fa38 	bl	8628 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x168>
    81b8:	4641      	mov	r1, r8
    81ba:	f8c8 904c 	str.w	r9, [r8, #76]	; 0x4c
    81be:	4811      	ldr	r0, [pc, #68]	; (8204 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd4>)
    81c0:	300c      	adds	r0, #12
    81c2:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    81c6:	42a8      	cmp	r0, r5
    81c8:	d310      	bcc.n	81ec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xbc>
    81ca:	2000      	movs	r0, #0
    81cc:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    81d0:	f8ca 0514 	str.w	r0, [sl, #1300]	; 0x514
    81d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    81d6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
    81da:	62a0      	str	r0, [r4, #40]	; 0x28
    81dc:	480c      	ldr	r0, [pc, #48]	; (8210 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    81de:	1d00      	adds	r0, r0, #4
    81e0:	6006      	str	r6, [r0, #0]
    81e2:	f7ff fd65 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    81e6:	2000      	movs	r0, #0
    81e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    81ec:	4629      	mov	r1, r5
    81ee:	4638      	mov	r0, r7
    81f0:	f000 fb12 	bl	8818 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x358>
    81f4:	2001      	movs	r0, #1
    81f6:	e7f7      	b.n	81e8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xb8>
    81f8:	40001000 	.word	0x40001000
    81fc:	20000e20 	.word	0x20000e20
    8200:	0000896c 	.word	0x0000896c
    8204:	40008000 	.word	0x40008000
    8208:	40008140 	.word	0x40008140
    820c:	4001f098 	.word	0x4001f098
    8210:	4001f504 	.word	0x4001f504

00008214 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    8214:	4b0d      	ldr	r3, [pc, #52]	; (824c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    8216:	b510      	push	{r4, lr}
    8218:	71d8      	strb	r0, [r3, #7]
    821a:	729a      	strb	r2, [r3, #10]
    821c:	b151      	cbz	r1, 8234 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    821e:	2002      	movs	r0, #2
    8220:	7218      	strb	r0, [r3, #8]
    8222:	2801      	cmp	r0, #1
    8224:	d008      	beq.n	8238 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    8226:	2802      	cmp	r0, #2
    8228:	d00f      	beq.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    822a:	f640 2163 	movw	r1, #2659	; 0xa63
    822e:	203e      	movs	r0, #62	; 0x3e
    8230:	f7f8 fc18 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8234:	2001      	movs	r0, #1
    8236:	e7f3      	b.n	8220 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    8238:	7a58      	ldrb	r0, [r3, #9]
    823a:	2802      	cmp	r0, #2
    823c:	d105      	bne.n	824a <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    823e:	f000 f97d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8246:	f000 bab1 	b.w	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    824a:	bd10      	pop	{r4, pc}
    824c:	20000e20 	.word	0x20000e20

00008250 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    8250:	4902      	ldr	r1, [pc, #8]	; (825c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    8252:	2000      	movs	r0, #0
    8254:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    8258:	4770      	bx	lr
    825a:	0000      	.short	0x0000
    825c:	40008000 	.word	0x40008000

00008260 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    8260:	4904      	ldr	r1, [pc, #16]	; (8274 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x14>)
    8262:	f8d1 1548 	ldr.w	r1, [r1, #1352]	; 0x548
    8266:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    826a:	4249      	negs	r1, r1
    826c:	7001      	strb	r1, [r0, #0]
    826e:	2001      	movs	r0, #1
    8270:	4770      	bx	lr
    8272:	0000      	.short	0x0000
    8274:	40001000 	.word	0x40001000

00008278 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    8278:	4903      	ldr	r1, [pc, #12]	; (8288 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    827a:	0e02      	lsrs	r2, r0, #24
    827c:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    8280:	0200      	lsls	r0, r0, #8
    8282:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    8286:	4770      	bx	lr
    8288:	40001000 	.word	0x40001000

0000828c <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    828c:	4901      	ldr	r1, [pc, #4]	; (8294 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x8>)
    828e:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    8292:	4770      	bx	lr
    8294:	40001000 	.word	0x40001000

00008298 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ>:
    8298:	b510      	push	{r4, lr}
    829a:	2200      	movs	r2, #0
    829c:	2901      	cmp	r1, #1
    829e:	d006      	beq.n	82ae <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x16>
    82a0:	2902      	cmp	r1, #2
    82a2:	d002      	beq.n	82aa <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x12>
    82a4:	f240 21d9 	movw	r1, #729	; 0x2d9
    82a8:	e014      	b.n	82d4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x3c>
    82aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    82ae:	490b      	ldr	r1, [pc, #44]	; (82dc <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x44>)
    82b0:	430a      	orrs	r2, r1
    82b2:	490b      	ldr	r1, [pc, #44]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82b4:	600a      	str	r2, [r1, #0]
    82b6:	490b      	ldr	r1, [pc, #44]	; (82e4 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x4c>)
    82b8:	4308      	orrs	r0, r1
    82ba:	4909      	ldr	r1, [pc, #36]	; (82e0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x48>)
    82bc:	1d09      	adds	r1, r1, #4
    82be:	6008      	str	r0, [r1, #0]
    82c0:	4809      	ldr	r0, [pc, #36]	; (82e8 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x50>)
    82c2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    82c6:	b2c0      	uxtb	r0, r0
    82c8:	2803      	cmp	r0, #3
    82ca:	d001      	beq.n	82d0 <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x38>
    82cc:	280b      	cmp	r0, #11
    82ce:	d104      	bne.n	82da <sym_5CHOZAQ75MOW32NPEGX5AYLDFVQR6HZCDXZY5PQ+0x42>
    82d0:	f240 21f1 	movw	r1, #753	; 0x2f1
    82d4:	203e      	movs	r0, #62	; 0x3e
    82d6:	f7f8 fbc5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    82da:	bd10      	pop	{r4, pc}
    82dc:	00100108 	.word	0x00100108
    82e0:	40001514 	.word	0x40001514
    82e4:	02030000 	.word	0x02030000
    82e8:	40001000 	.word	0x40001000

000082ec <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    82ec:	4901      	ldr	r1, [pc, #4]	; (82f4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    82ee:	7588      	strb	r0, [r1, #22]
    82f0:	4770      	bx	lr
    82f2:	0000      	.short	0x0000
    82f4:	20000e20 	.word	0x20000e20

000082f8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    82f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    82fc:	4853      	ldr	r0, [pc, #332]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    82fe:	f04f 0a01 	mov.w	sl, #1
    8302:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    8306:	4851      	ldr	r0, [pc, #324]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8308:	300c      	adds	r0, #12
    830a:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    830e:	f008 f810 	bl	10332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>
    8312:	4c4f      	ldr	r4, [pc, #316]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    8314:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    8318:	f000 f91a 	bl	8550 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x90>
    831c:	494d      	ldr	r1, [pc, #308]	; (8454 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    831e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8320:	6008      	str	r0, [r1, #0]
    8322:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8458 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>
    8326:	2000      	movs	r0, #0
    8328:	62a0      	str	r0, [r4, #40]	; 0x28
    832a:	f8d8 2200 	ldr.w	r2, [r8, #512]	; 0x200
    832e:	f240 131d 	movw	r3, #285	; 0x11d
    8332:	439a      	bics	r2, r3
    8334:	f8c8 2200 	str.w	r2, [r8, #512]	; 0x200
    8338:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    833c:	f000 f988 	bl	8650 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x190>
    8340:	4605      	mov	r5, r0
    8342:	4842      	ldr	r0, [pc, #264]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    8344:	3008      	adds	r0, #8
    8346:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    834a:	4e40      	ldr	r6, [pc, #256]	; (844c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    834c:	61e0      	str	r0, [r4, #28]
    834e:	1d36      	adds	r6, r6, #4
    8350:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    8354:	61a0      	str	r0, [r4, #24]
    8356:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    835a:	7d21      	ldrb	r1, [r4, #20]
    835c:	f884 1020 	strb.w	r1, [r4, #32]
    8360:	7a61      	ldrb	r1, [r4, #9]
    8362:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    8366:	46a1      	mov	r9, r4
    8368:	2400      	movs	r4, #0
    836a:	4639      	mov	r1, r7
    836c:	4628      	mov	r0, r5
    836e:	f000 f9e3 	bl	8738 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x278>
    8372:	b910      	cbnz	r0, 837a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x82>
    8374:	f8c8 a010 	str.w	sl, [r8, #16]
    8378:	2401      	movs	r4, #1
    837a:	4f35      	ldr	r7, [pc, #212]	; (8450 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    837c:	07e8      	lsls	r0, r5, #31
    837e:	f1a7 0710 	sub.w	r7, r7, #16
    8382:	d002      	beq.n	838a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    8384:	6838      	ldr	r0, [r7, #0]
    8386:	4780      	blx	r0
    8388:	e034      	b.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    838a:	07a8      	lsls	r0, r5, #30
    838c:	d529      	bpl.n	83e2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xea>
    838e:	0768      	lsls	r0, r5, #29
    8390:	d421      	bmi.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8392:	f008 f8eb 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    8396:	b9f0      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    8398:	f008 f8d8 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    839c:	b9d8      	cbnz	r0, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    839e:	482f      	ldr	r0, [pc, #188]	; (845c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>)
    83a0:	6800      	ldr	r0, [r0, #0]
    83a2:	f3c0 5242 	ubfx	r2, r0, #21, #3
    83a6:	f3c0 6100 	ubfx	r1, r0, #24, #1
    83aa:	f000 0c0f 	and.w	ip, r0, #15
    83ae:	f3c0 1303 	ubfx	r3, r0, #4, #4
    83b2:	f3c0 2803 	ubfx	r8, r0, #8, #4
    83b6:	b171      	cbz	r1, 83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83b8:	f1bc 0f00 	cmp.w	ip, #0
    83bc:	d003      	beq.n	83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83be:	b113      	cbz	r3, 83c6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xce>
    83c0:	f1b8 0f00 	cmp.w	r8, #0
    83c4:	d107      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83c6:	f3c0 4004 	ubfx	r0, r0, #16, #5
    83ca:	2801      	cmp	r0, #1
    83cc:	d103      	bne.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83ce:	2a03      	cmp	r2, #3
    83d0:	d201      	bcs.n	83d6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xde>
    83d2:	f045 0504 	orr.w	r5, r5, #4
    83d6:	f345 0080 	sbfx	r0, r5, #2, #1
    83da:	4621      	mov	r1, r4
    83dc:	1c40      	adds	r0, r0, #1
    83de:	687a      	ldr	r2, [r7, #4]
    83e0:	e007      	b.n	83f2 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfa>
    83e2:	f015 0f28 	tst.w	r5, #40	; 0x28
    83e6:	d005      	beq.n	83f4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xfc>
    83e8:	f345 1140 	sbfx	r1, r5, #5, #1
    83ec:	68ba      	ldr	r2, [r7, #8]
    83ee:	4620      	mov	r0, r4
    83f0:	1c49      	adds	r1, r1, #1
    83f2:	4790      	blx	r2
    83f4:	06e8      	lsls	r0, r5, #27
    83f6:	d501      	bpl.n	83fc <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    83f8:	68f8      	ldr	r0, [r7, #12]
    83fa:	4780      	blx	r0
    83fc:	f899 1009 	ldrb.w	r1, [r9, #9]
    8400:	4648      	mov	r0, r9
    8402:	2902      	cmp	r1, #2
    8404:	d120      	bne.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    8406:	7b01      	ldrb	r1, [r0, #12]
    8408:	2900      	cmp	r1, #0
    840a:	d01d      	beq.n	8448 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x150>
    840c:	2902      	cmp	r1, #2
    840e:	d004      	beq.n	841a <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x122>
    8410:	2901      	cmp	r1, #1
    8412:	d009      	beq.n	8428 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    8414:	f640 4166 	movw	r1, #3174	; 0xc66
    8418:	e00d      	b.n	8436 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13e>
    841a:	69c1      	ldr	r1, [r0, #28]
    841c:	f8d9 0010 	ldr.w	r0, [r9, #16]
    8420:	4408      	add	r0, r1
    8422:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    8426:	e00b      	b.n	8440 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x148>
    8428:	6901      	ldr	r1, [r0, #16]
    842a:	f8d9 001c 	ldr.w	r0, [r9, #28]
    842e:	4281      	cmp	r1, r0
    8430:	d804      	bhi.n	843c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x144>
    8432:	f640 4167 	movw	r1, #3175	; 0xc67
    8436:	203e      	movs	r0, #62	; 0x3e
    8438:	f7f8 fb14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    843c:	f8c6 1540 	str.w	r1, [r6, #1344]	; 0x540
    8440:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8444:	f000 b9bc 	b.w	87c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x300>
    8448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    844c:	40008000 	.word	0x40008000
    8450:	20000e20 	.word	0x20000e20
    8454:	4001f508 	.word	0x4001f508
    8458:	40001000 	.word	0x40001000
    845c:	40001450 	.word	0x40001450

00008460 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    8460:	b570      	push	{r4, r5, r6, lr}
    8462:	4b16      	ldr	r3, [pc, #88]	; (84bc <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x5c>)
    8464:	888c      	ldrh	r4, [r1, #4]
    8466:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    846a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    846e:	780c      	ldrb	r4, [r1, #0]
    8470:	f8d1 1001 	ldr.w	r1, [r1, #1]
    8474:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    8478:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    847c:	f8d3 1640 	ldr.w	r1, [r3, #1600]	; 0x640
    8480:	2401      	movs	r4, #1
    8482:	4084      	lsls	r4, r0
    8484:	b2c9      	uxtb	r1, r1
    8486:	b2e5      	uxtb	r5, r4
    8488:	4329      	orrs	r1, r5
    848a:	b132      	cbz	r2, 849a <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x3a>
    848c:	2a01      	cmp	r2, #1
    848e:	d00a      	beq.n	84a6 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x46>
    8490:	f240 51d4 	movw	r1, #1492	; 0x5d4
    8494:	203e      	movs	r0, #62	; 0x3e
    8496:	f7f8 fae5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    849a:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    849e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84a2:	43a0      	bics	r0, r4
    84a4:	e004      	b.n	84b0 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x50>
    84a6:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    84aa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    84ae:	4328      	orrs	r0, r5
    84b0:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    84b4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    84b8:	bd70      	pop	{r4, r5, r6, pc}
    84ba:	0000      	.short	0x0000
    84bc:	40001000 	.word	0x40001000

000084c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    84c0:	4901      	ldr	r1, [pc, #4]	; (84c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    84c2:	2001      	movs	r0, #1
    84c4:	7008      	strb	r0, [r1, #0]
    84c6:	4770      	bx	lr
    84c8:	200002a0 	.word	0x200002a0
    84cc:	480b      	ldr	r0, [pc, #44]	; (84fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c>)
    84ce:	7d81      	ldrb	r1, [r0, #22]
    84d0:	480b      	ldr	r0, [pc, #44]	; (8500 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    84d2:	5c40      	ldrb	r0, [r0, r1]
    84d4:	f500 6016 	add.w	r0, r0, #2400	; 0x960
    84d8:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    84dc:	d204      	bcs.n	84e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x28>
    84de:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    84e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    84e6:	e001      	b.n	84ec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    84e8:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    84ec:	4a05      	ldr	r2, [pc, #20]	; (8504 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>)
    84ee:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    84f2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    84f6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    84fa:	4770      	bx	lr
    84fc:	20000e20 	.word	0x20000e20
    8500:	00008972 	.word	0x00008972
    8504:	40001000 	.word	0x40001000
    8508:	b508      	push	{r3, lr}
    850a:	490b      	ldr	r1, [pc, #44]	; (8538 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>)
    850c:	466b      	mov	r3, sp
    850e:	f991 2015 	ldrsb.w	r2, [r1, #21]
    8512:	7d89      	ldrb	r1, [r1, #22]
    8514:	f000 fad0 	bl	8ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>
    8518:	f99d 0000 	ldrsb.w	r0, [sp]
    851c:	f000 faa0 	bl	8a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    8520:	f10d 0001 	add.w	r0, sp, #1
    8524:	f004 f8cc 	bl	c6c0 <mpsl_fem_pa_gain_set>
    8528:	2800      	cmp	r0, #0
    852a:	d004      	beq.n	8536 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x76>
    852c:	f240 6115 	movw	r1, #1557	; 0x615
    8530:	203e      	movs	r0, #62	; 0x3e
    8532:	f7f8 fa97 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8536:	bd08      	pop	{r3, pc}
    8538:	20000e20 	.word	0x20000e20
    853c:	4803      	ldr	r0, [pc, #12]	; (854c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>)
    853e:	7a01      	ldrb	r1, [r0, #8]
    8540:	2901      	cmp	r1, #1
    8542:	d102      	bne.n	854a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8a>
    8544:	7a80      	ldrb	r0, [r0, #10]
    8546:	f7ff bfdf 	b.w	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    854a:	4770      	bx	lr
    854c:	20000e20 	.word	0x20000e20
    8550:	480d      	ldr	r0, [pc, #52]	; (8588 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>)
    8552:	b510      	push	{r4, lr}
    8554:	7a40      	ldrb	r0, [r0, #9]
    8556:	2801      	cmp	r0, #1
    8558:	d00c      	beq.n	8574 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xb4>
    855a:	2802      	cmp	r0, #2
    855c:	d113      	bne.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    855e:	f004 f891 	bl	c684 <mpsl_fem_lna_configuration_clear>
    8562:	2800      	cmp	r0, #0
    8564:	d00f      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8566:	1c40      	adds	r0, r0, #1
    8568:	d00d      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    856a:	f640 01c1 	movw	r1, #2241	; 0x8c1
    856e:	203e      	movs	r0, #62	; 0x3e
    8570:	f7f8 fa78 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8574:	f004 f898 	bl	c6a8 <mpsl_fem_pa_configuration_clear>
    8578:	2800      	cmp	r0, #0
    857a:	d004      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    857c:	1c40      	adds	r0, r0, #1
    857e:	d002      	beq.n	8586 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc6>
    8580:	f640 01bb 	movw	r1, #2235	; 0x8bb
    8584:	e7f3      	b.n	856e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xae>
    8586:	bd10      	pop	{r4, pc}
    8588:	20000e20 	.word	0x20000e20
    858c:	4808      	ldr	r0, [pc, #32]	; (85b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    858e:	2100      	movs	r1, #0
    8590:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    8594:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    8598:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    859c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    85a0:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    85a4:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    85a8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    85ac:	4770      	bx	lr
    85ae:	0000      	.short	0x0000
    85b0:	40001000 	.word	0x40001000
    85b4:	4818      	ldr	r0, [pc, #96]	; (8618 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x158>)
    85b6:	b510      	push	{r4, lr}
    85b8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    85bc:	07c1      	lsls	r1, r0, #31
    85be:	d029      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85c0:	0781      	lsls	r1, r0, #30
    85c2:	d514      	bpl.n	85ee <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x12e>
    85c4:	4815      	ldr	r0, [pc, #84]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85c6:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    85ca:	f041 0101 	orr.w	r1, r1, #1
    85ce:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    85d2:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    85d6:	b2c0      	uxtb	r0, r0
    85d8:	280b      	cmp	r0, #11
    85da:	d005      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85dc:	280a      	cmp	r0, #10
    85de:	d003      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e0:	2803      	cmp	r0, #3
    85e2:	d001      	beq.n	85e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x128>
    85e4:	2802      	cmp	r0, #2
    85e6:	d115      	bne.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85e8:	f240 613e 	movw	r1, #1598	; 0x63e
    85ec:	e00f      	b.n	860e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x14e>
    85ee:	0740      	lsls	r0, r0, #29
    85f0:	d510      	bpl.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    85f2:	480a      	ldr	r0, [pc, #40]	; (861c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x15c>)
    85f4:	490a      	ldr	r1, [pc, #40]	; (8620 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x160>)
    85f6:	3008      	adds	r0, #8
    85f8:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    85fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    8600:	4808      	ldr	r0, [pc, #32]	; (8624 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x164>)
    8602:	f007 fe55 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8606:	2800      	cmp	r0, #0
    8608:	d004      	beq.n	8614 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x154>
    860a:	f240 6146 	movw	r1, #1606	; 0x646
    860e:	203e      	movs	r0, #62	; 0x3e
    8610:	f7f8 fa28 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8614:	bd10      	pop	{r4, pc}
    8616:	0000      	.short	0x0000
    8618:	20000e20 	.word	0x20000e20
    861c:	40001000 	.word	0x40001000
    8620:	4001f098 	.word	0x4001f098
    8624:	40008000 	.word	0x40008000
    8628:	4808      	ldr	r0, [pc, #32]	; (864c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x18c>)
    862a:	4601      	mov	r1, r0
    862c:	79c2      	ldrb	r2, [r0, #7]
    862e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    8632:	b112      	cbz	r2, 863a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17a>
    8634:	2a01      	cmp	r2, #1
    8636:	d003      	beq.n	8640 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x180>
    8638:	e006      	b.n	8648 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x188>
    863a:	f041 0102 	orr.w	r1, r1, #2
    863e:	e001      	b.n	8644 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x184>
    8640:	f041 0104 	orr.w	r1, r1, #4
    8644:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    8648:	f7ff bfb4 	b.w	85b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    864c:	20000e20 	.word	0x20000e20
    8650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8654:	4d34      	ldr	r5, [pc, #208]	; (8728 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x268>)
    8656:	2400      	movs	r4, #0
    8658:	7b28      	ldrb	r0, [r5, #12]
    865a:	b138      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    865c:	f44f 71a2 	mov.w	r1, #324	; 0x144
    8660:	4832      	ldr	r0, [pc, #200]	; (872c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26c>)
    8662:	f007 fe25 	bl	102b0 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5e>
    8666:	b108      	cbz	r0, 866c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>
    8668:	2601      	movs	r6, #1
    866a:	e000      	b.n	866e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ae>
    866c:	2600      	movs	r6, #0
    866e:	7a68      	ldrb	r0, [r5, #9]
    8670:	4f2f      	ldr	r7, [pc, #188]	; (8730 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x270>)
    8672:	f44f 7186 	mov.w	r1, #268	; 0x10c
    8676:	2801      	cmp	r0, #1
    8678:	d002      	beq.n	8680 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1c0>
    867a:	2802      	cmp	r0, #2
    867c:	d006      	beq.n	868c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1cc>
    867e:	e016      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8680:	4638      	mov	r0, r7
    8682:	f007 fe10 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8686:	b190      	cbz	r0, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    8688:	2408      	movs	r4, #8
    868a:	e010      	b.n	86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    868c:	4638      	mov	r0, r7
    868e:	f007 fe0a 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    8692:	b100      	cbz	r0, 8696 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d6>
    8694:	2402      	movs	r4, #2
    8696:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
    869a:	43c0      	mvns	r0, r0
    869c:	f340 0000 	sbfx	r0, r0, #0, #1
    86a0:	1c40      	adds	r0, r0, #1
    86a2:	d101      	bne.n	86a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e8>
    86a4:	f044 0404 	orr.w	r4, r4, #4
    86a8:	b10e      	cbz	r6, 86ae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ee>
    86aa:	f044 0401 	orr.w	r4, r4, #1
    86ae:	f014 0f0b 	tst.w	r4, #11
    86b2:	d107      	bne.n	86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86b4:	f44f 7188 	mov.w	r1, #272	; 0x110
    86b8:	4638      	mov	r0, r7
    86ba:	f007 fdf4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86be:	b108      	cbz	r0, 86c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>
    86c0:	f044 0410 	orr.w	r4, r4, #16
    86c4:	481b      	ldr	r0, [pc, #108]	; (8734 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x274>)
    86c6:	7800      	ldrb	r0, [r0, #0]
    86c8:	b1f8      	cbz	r0, 870a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x24a>
    86ca:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    86ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    86d2:	d007      	beq.n	86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86d4:	f44f 718a 	mov.w	r1, #276	; 0x114
    86d8:	4638      	mov	r0, r7
    86da:	f007 fde4 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86de:	b108      	cbz	r0, 86e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    86e0:	2001      	movs	r0, #1
    86e2:	e000      	b.n	86e6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    86e4:	2000      	movs	r0, #0
    86e6:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    86ea:	b13e      	cbz	r6, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86ec:	f44f 718c 	mov.w	r1, #280	; 0x118
    86f0:	4638      	mov	r0, r7
    86f2:	f007 fdd8 	bl	102a6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x54>
    86f6:	b108      	cbz	r0, 86fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23c>
    86f8:	2001      	movs	r0, #1
    86fa:	e000      	b.n	86fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x23e>
    86fc:	2000      	movs	r0, #0
    86fe:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    8702:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    8706:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    870a:	f7ff ff3f 	bl	858c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    870e:	06e0      	lsls	r0, r4, #27
    8710:	d506      	bpl.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8712:	0720      	lsls	r0, r4, #28
    8714:	d404      	bmi.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    8716:	7a68      	ldrb	r0, [r5, #9]
    8718:	2801      	cmp	r0, #1
    871a:	d101      	bne.n	8720 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x260>
    871c:	f044 0420 	orr.w	r4, r4, #32
    8720:	4620      	mov	r0, r4
    8722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8726:	0000      	.short	0x0000
    8728:	20000e20 	.word	0x20000e20
    872c:	40008000 	.word	0x40008000
    8730:	40001000 	.word	0x40001000
    8734:	200002a0 	.word	0x200002a0
    8738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    873c:	4c1a      	ldr	r4, [pc, #104]	; (87a8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    873e:	460d      	mov	r5, r1
    8740:	7a21      	ldrb	r1, [r4, #8]
    8742:	b129      	cbz	r1, 8750 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x290>
    8744:	f010 0f11 	tst.w	r0, #17
    8748:	d007      	beq.n	875a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x29a>
    874a:	f7ff fab1 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    874e:	e024      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    8750:	f000 f890 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8754:	2000      	movs	r0, #0
    8756:	7320      	strb	r0, [r4, #12]
    8758:	e01f      	b.n	879a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2da>
    875a:	2901      	cmp	r1, #1
    875c:	d001      	beq.n	8762 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    875e:	2601      	movs	r6, #1
    8760:	e000      	b.n	8764 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a4>
    8762:	2600      	movs	r6, #0
    8764:	79e0      	ldrb	r0, [r4, #7]
    8766:	2801      	cmp	r0, #1
    8768:	d00e      	beq.n	8788 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c8>
    876a:	2700      	movs	r7, #0
    876c:	f000 f882 	bl	8874 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b4>
    8770:	2196      	movs	r1, #150	; 0x96
    8772:	4630      	mov	r0, r6
    8774:	f000 f894 	bl	88a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3e0>
    8778:	4601      	mov	r1, r0
    877a:	b14f      	cbz	r7, 8790 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2d0>
    877c:	353b      	adds	r5, #59	; 0x3b
    877e:	428d      	cmp	r5, r1
    8780:	d904      	bls.n	878c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2cc>
    8782:	2000      	movs	r0, #0
    8784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8788:	2701      	movs	r7, #1
    878a:	e7ef      	b.n	876c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ac>
    878c:	2001      	movs	r0, #1
    878e:	71e0      	strb	r0, [r4, #7]
    8790:	7aa2      	ldrb	r2, [r4, #10]
    8792:	4630      	mov	r0, r6
    8794:	f7ff fccc 	bl	8130 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    8798:	b108      	cbz	r0, 879e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2de>
    879a:	2001      	movs	r0, #1
    879c:	e7f2      	b.n	8784 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c4>
    879e:	f640 21c4 	movw	r1, #2756	; 0xac4
    87a2:	203e      	movs	r0, #62	; 0x3e
    87a4:	f7f8 f95e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    87a8:	20000e20 	.word	0x20000e20
    87ac:	4803      	ldr	r0, [pc, #12]	; (87bc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2fc>)
    87ae:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    87b2:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    87b6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    87ba:	4770      	bx	lr
    87bc:	40001000 	.word	0x40001000
    87c0:	4804      	ldr	r0, [pc, #16]	; (87d4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x314>)
    87c2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    87c4:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    87c8:	6281      	str	r1, [r0, #40]	; 0x28
    87ca:	4903      	ldr	r1, [pc, #12]	; (87d8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x318>)
    87cc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    87d0:	6008      	str	r0, [r1, #0]
    87d2:	4770      	bx	lr
    87d4:	20000e20 	.word	0x20000e20
    87d8:	4001f504 	.word	0x4001f504
    87dc:	4a07      	ldr	r2, [pc, #28]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87de:	2000      	movs	r0, #0
    87e0:	3208      	adds	r2, #8
    87e2:	4906      	ldr	r1, [pc, #24]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87e4:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87e8:	1d0a      	adds	r2, r1, #4
    87ea:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    87ee:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87f2:	4902      	ldr	r1, [pc, #8]	; (87fc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x33c>)
    87f4:	310c      	adds	r1, #12
    87f6:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    87fa:	4770      	bx	lr
    87fc:	40008000 	.word	0x40008000
    8800:	4903      	ldr	r1, [pc, #12]	; (8810 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x350>)
    8802:	79c9      	ldrb	r1, [r1, #7]
    8804:	2900      	cmp	r1, #0
    8806:	d102      	bne.n	880e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34e>
    8808:	4902      	ldr	r1, [pc, #8]	; (8814 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>)
    880a:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    880e:	4770      	bx	lr
    8810:	20000e20 	.word	0x20000e20
    8814:	4001f098 	.word	0x4001f098
    8818:	b510      	push	{r4, lr}
    881a:	4a14      	ldr	r2, [pc, #80]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    881c:	b120      	cbz	r0, 8828 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x368>
    881e:	2801      	cmp	r0, #1
    8820:	d011      	beq.n	8846 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x386>
    8822:	f240 7169 	movw	r1, #1897	; 0x769
    8826:	e01c      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8828:	f101 0028 	add.w	r0, r1, #40	; 0x28
    882c:	e9c2 1002 	strd	r1, r0, [r2, #8]
    8830:	490f      	ldr	r1, [pc, #60]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8832:	480e      	ldr	r0, [pc, #56]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8834:	f003 ff3e 	bl	c6b4 <mpsl_fem_pa_configuration_set>
    8838:	2800      	cmp	r0, #0
    883a:	d015      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    883c:	1c40      	adds	r0, r0, #1
    883e:	d013      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    8840:	f44f 61eb 	mov.w	r1, #1880	; 0x758
    8844:	e00d      	b.n	8862 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a2>
    8846:	f101 0029 	add.w	r0, r1, #41	; 0x29
    884a:	e9c2 1002 	strd	r1, r0, [r2, #8]
    884e:	4908      	ldr	r1, [pc, #32]	; (8870 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>)
    8850:	4806      	ldr	r0, [pc, #24]	; (886c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    8852:	f003 ff1d 	bl	c690 <mpsl_fem_lna_configuration_set>
    8856:	2800      	cmp	r0, #0
    8858:	d006      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885a:	1c40      	adds	r0, r0, #1
    885c:	d004      	beq.n	8868 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3a8>
    885e:	f240 7165 	movw	r1, #1893	; 0x765
    8862:	203e      	movs	r0, #62	; 0x3e
    8864:	f7f8 f8fe 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8868:	bd10      	pop	{r4, pc}
    886a:	0000      	.short	0x0000
    886c:	200002a8 	.word	0x200002a8
    8870:	0000899c 	.word	0x0000899c
    8874:	4802      	ldr	r0, [pc, #8]	; (8880 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c0>)
    8876:	2100      	movs	r1, #0
    8878:	71c1      	strb	r1, [r0, #7]
    887a:	7201      	strb	r1, [r0, #8]
    887c:	7241      	strb	r1, [r0, #9]
    887e:	4770      	bx	lr
    8880:	20000e20 	.word	0x20000e20
    8884:	4a05      	ldr	r2, [pc, #20]	; (889c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3dc>)
    8886:	79d2      	ldrb	r2, [r2, #7]
    8888:	2a01      	cmp	r2, #1
    888a:	d006      	beq.n	889a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3da>
    888c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8890:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    8894:	fbb1 f1f2 	udiv	r1, r1, r2
    8898:	1a40      	subs	r0, r0, r1
    889a:	4770      	bx	lr
    889c:	20000e20 	.word	0x20000e20
    88a0:	b570      	push	{r4, r5, r6, lr}
    88a2:	4c13      	ldr	r4, [pc, #76]	; (88f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    88a4:	4603      	mov	r3, r0
    88a6:	460d      	mov	r5, r1
    88a8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    88ac:	2000      	movs	r0, #0
    88ae:	b15a      	cbz	r2, 88c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    88b0:	4621      	mov	r1, r4
    88b2:	f891 1020 	ldrb.w	r1, [r1, #32]
    88b6:	b163      	cbz	r3, 88d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x412>
    88b8:	2b01      	cmp	r3, #1
    88ba:	d111      	bne.n	88e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x420>
    88bc:	2a01      	cmp	r2, #1
    88be:	4628      	mov	r0, r5
    88c0:	d012      	beq.n	88e8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x428>
    88c2:	f007 fcfa 	bl	102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    88c6:	e009      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88c8:	f640 016e 	movw	r1, #2158	; 0x86e
    88cc:	203e      	movs	r0, #62	; 0x3e
    88ce:	f7f8 f8c9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88d2:	2a01      	cmp	r2, #1
    88d4:	4628      	mov	r0, r5
    88d6:	d004      	beq.n	88e2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x422>
    88d8:	f007 fcfd 	bl	102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    88dc:	69e1      	ldr	r1, [r4, #28]
    88de:	4408      	add	r0, r1
    88e0:	bd70      	pop	{r4, r5, r6, pc}
    88e2:	f000 f8d1 	bl	8a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    88e6:	e7f9      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88e8:	f000 f8c0 	bl	8a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    88ec:	e7f6      	b.n	88dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x41c>
    88ee:	0000      	.short	0x0000
    88f0:	20000e20 	.word	0x20000e20
    88f4:	b510      	push	{r4, lr}
    88f6:	f7ff fbef 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    88fa:	f7ff fde7 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    88fe:	f7ff fe1d 	bl	853c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x7c>
    8902:	f7ff ff53 	bl	87ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>
    8906:	f007 fe31 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    890a:	2800      	cmp	r0, #0
    890c:	d108      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    890e:	f007 fe1d 	bl	1054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    8912:	2800      	cmp	r0, #0
    8914:	d104      	bne.n	8920 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x460>
    8916:	4803      	ldr	r0, [pc, #12]	; (8924 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x464>)
    8918:	6801      	ldr	r1, [r0, #0]
    891a:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    891e:	6001      	str	r1, [r0, #0]
    8920:	bd10      	pop	{r4, pc}
    8922:	0000      	.short	0x0000
    8924:	40001568 	.word	0x40001568
    8928:	b510      	push	{r4, lr}
    892a:	4604      	mov	r4, r0
    892c:	f7ff fbd4 	bl	80d8 <sym_PHVPWYOPAKZKJKURGZ7GXJVYEVEK2ONKU5LBGEQ>
    8930:	f7ff fdcc 	bl	84cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    8934:	4620      	mov	r0, r4
    8936:	f7ff fde7 	bl	8508 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x48>
    893a:	f007 fe17 	bl	1056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    893e:	2800      	cmp	r0, #0
    8940:	d00d      	beq.n	895e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    8942:	4a09      	ldr	r2, [pc, #36]	; (8968 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a8>)
    8944:	6811      	ldr	r1, [r2, #0]
    8946:	0650      	lsls	r0, r2, #25
    8948:	2c02      	cmp	r4, #2
    894a:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    894e:	d007      	beq.n	8960 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a0>
    8950:	f3c0 2006 	ubfx	r0, r0, #8, #7
    8954:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    8958:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    895c:	6010      	str	r0, [r2, #0]
    895e:	bd10      	pop	{r4, pc}
    8960:	f3c0 6006 	ubfx	r0, r0, #24, #7
    8964:	e7f6      	b.n	8954 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x494>
    8966:	0000      	.short	0x0000
    8968:	40001588 	.word	0x40001588
    896c:	a62c0000 	.word	0xa62c0000
    8970:	0604a1e0 	.word	0x0604a1e0
    8974:	0e0c0a08 	.word	0x0e0c0a08
    8978:	16141210 	.word	0x16141210
    897c:	201e1c18 	.word	0x201e1c18
    8980:	28262422 	.word	0x28262422
    8984:	302e2c2a 	.word	0x302e2c2a
    8988:	38363432 	.word	0x38363432
    898c:	403e3c3a 	.word	0x403e3c3a
    8990:	48464442 	.word	0x48464442
    8994:	024e4c4a 	.word	0x024e4c4a
    8998:	0000501a 	.word	0x0000501a
    899c:	00000001 	.word	0x00000001
    89a0:	40001110 	.word	0x40001110
	...
    89b8:	00001e14 	.word	0x00001e14
    89bc:	00001130 	.word	0x00001130
    89c0:	00000000 	.word	0x00000000
    89c4:	00000028 	.word	0x00000028
    89c8:	00000018 	.word	0x00000018
    89cc:	00000000 	.word	0x00000000
    89d0:	00001e14 	.word	0x00001e14
    89d4:	00001130 	.word	0x00001130
    89d8:	00000000 	.word	0x00000000
    89dc:	00001770 	.word	0x00001770
    89e0:	00000fa0 	.word	0x00000fa0

000089e4 <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    89e4:	b570      	push	{r4, r5, r6, lr}
    89e6:	4605      	mov	r5, r0
    89e8:	4614      	mov	r4, r2
    89ea:	4608      	mov	r0, r1
    89ec:	f7ff fb9a 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    89f0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    89f4:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    89f8:	ebc0 01c1 	rsb	r1, r0, r1, lsl #3
    89fc:	4807      	ldr	r0, [pc, #28]	; (8a1c <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA+0x38>)
    89fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    8a02:	4408      	add	r0, r1
    8a04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a08:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    8a0c:	fbb0 f5f1 	udiv	r5, r0, r1
    8a10:	4620      	mov	r0, r4
    8a12:	f7ff fb5b 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a16:	4428      	add	r0, r5
    8a18:	1d40      	adds	r0, r0, #5
    8a1a:	bd70      	pop	{r4, r5, r6, pc}
    8a1c:	00008aac 	.word	0x00008aac

00008a20 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    8a20:	b570      	push	{r4, r5, r6, lr}
    8a22:	4d0e      	ldr	r5, [pc, #56]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a24:	461c      	mov	r4, r3
    8a26:	3d08      	subs	r5, #8
    8a28:	4b0c      	ldr	r3, [pc, #48]	; (8a5c <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x3c>)
    8a2a:	f835 1011 	ldrh.w	r1, [r5, r1, lsl #1]
    8a2e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    8a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    8a36:	ebc5 10c0 	rsb	r0, r5, r0, lsl #7
    8a3a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    8a3e:	f603 33b7 	addw	r3, r3, #2999	; 0xbb7
    8a42:	4418      	add	r0, r3
    8a44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8a48:	fbb0 f5f1 	udiv	r5, r0, r1
    8a4c:	4610      	mov	r0, r2
    8a4e:	f7ff fb3d 	bl	80cc <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    8a52:	4428      	add	r0, r5
    8a54:	4420      	add	r0, r4
    8a56:	1d40      	adds	r0, r0, #5
    8a58:	bd70      	pop	{r4, r5, r6, pc}
    8a5a:	0000      	.short	0x0000
    8a5c:	00008aac 	.word	0x00008aac

00008a60 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    8a60:	4901      	ldr	r1, [pc, #4]	; (8a68 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    8a62:	b2c0      	uxtb	r0, r0
    8a64:	6008      	str	r0, [r1, #0]
    8a66:	4770      	bx	lr
    8a68:	4000150c 	.word	0x4000150c

00008a6c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    8a6c:	4a05      	ldr	r2, [pc, #20]	; (8a84 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x18>)
    8a6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a76:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    8a7a:	fbb1 f1f2 	udiv	r1, r1, r2
    8a7e:	4408      	add	r0, r1
    8a80:	1e80      	subs	r0, r0, #2
    8a82:	4770      	bx	lr
    8a84:	00008aa4 	.word	0x00008aa4

00008a88 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    8a88:	4a05      	ldr	r2, [pc, #20]	; (8aa0 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>)
    8a8a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
    8a8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8a92:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    8a96:	fbb1 f1f2 	udiv	r1, r1, r2
    8a9a:	4408      	add	r0, r1
    8a9c:	4770      	bx	lr
    8a9e:	0000      	.short	0x0000
    8aa0:	00008aa4 	.word	0x00008aa4
    8aa4:	05dc0000 	.word	0x05dc0000
    8aa8:	000003e8 	.word	0x000003e8
    8aac:	00000000 	.word	0x00000000
    8ab0:	00001e14 	.word	0x00001e14
    8ab4:	00001130 	.word	0x00001130

00008ab8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ>:
    8ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8abc:	461e      	mov	r6, r3
    8abe:	4617      	mov	r7, r2
    8ac0:	460c      	mov	r4, r1
    8ac2:	4605      	mov	r5, r0
    8ac4:	f000 f856 	bl	8b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>
    8ac8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8b70 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb8>
    8acc:	4680      	mov	r8, r0
    8ace:	f899 0000 	ldrb.w	r0, [r9]
    8ad2:	42a8      	cmp	r0, r5
    8ad4:	d110      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ad6:	f899 1001 	ldrb.w	r1, [r9, #1]
    8ada:	4648      	mov	r0, r9
    8adc:	42a1      	cmp	r1, r4
    8ade:	d10b      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae0:	f990 1002 	ldrsb.w	r1, [r0, #2]
    8ae4:	42b9      	cmp	r1, r7
    8ae6:	d107      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8ae8:	78c2      	ldrb	r2, [r0, #3]
    8aea:	4542      	cmp	r2, r8
    8aec:	d104      	bne.n	8af8 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x40>
    8aee:	8881      	ldrh	r1, [r0, #4]
    8af0:	8031      	strh	r1, [r6, #0]
    8af2:	7980      	ldrb	r0, [r0, #6]
    8af4:	70b0      	strb	r0, [r6, #2]
    8af6:	e037      	b.n	8b68 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0xb0>
    8af8:	463a      	mov	r2, r7
    8afa:	4621      	mov	r1, r4
    8afc:	2d01      	cmp	r5, #1
    8afe:	d009      	beq.n	8b14 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x5c>
    8b00:	2d02      	cmp	r5, #2
    8b02:	d009      	beq.n	8b18 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x60>
    8b04:	2d04      	cmp	r5, #4
    8b06:	d009      	beq.n	8b1c <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x64>
    8b08:	2d08      	cmp	r5, #8
    8b0a:	d009      	beq.n	8b20 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x68>
    8b0c:	f240 4162 	movw	r1, #1122	; 0x462
    8b10:	2006      	movs	r0, #6
    8b12:	e00c      	b.n	8b2e <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x76>
    8b14:	2000      	movs	r0, #0
    8b16:	e004      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b18:	2001      	movs	r0, #1
    8b1a:	e002      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b1c:	2003      	movs	r0, #3
    8b1e:	e000      	b.n	8b22 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x6a>
    8b20:	2002      	movs	r0, #2
    8b22:	466b      	mov	r3, sp
    8b24:	f000 f89e 	bl	8c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>
    8b28:	b118      	cbz	r0, 8b32 <sym_472GCM45ITLH5GOXITRUEUJXOU6SPVHTMEVFHWQ+0x7a>
    8b2a:	213d      	movs	r1, #61	; 0x3d
    8b2c:	2075      	movs	r0, #117	; 0x75
    8b2e:	f7f7 ff99 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b32:	4620      	mov	r0, r4
    8b34:	f7ff f8b4 	bl	7ca0 <sym_DRIMECVE2FH7O6C2LQ25QRVJOICPHLA5GC6TM2I>
    8b38:	4602      	mov	r2, r0
    8b3a:	2300      	movs	r3, #0
    8b3c:	4631      	mov	r1, r6
    8b3e:	f99d 0000 	ldrsb.w	r0, [sp]
    8b42:	f003 fdc9 	bl	c6d8 <mpsl_fem_tx_power_split>
    8b46:	4601      	mov	r1, r0
    8b48:	f889 1007 	strb.w	r1, [r9, #7]
    8b4c:	8831      	ldrh	r1, [r6, #0]
    8b4e:	f8a9 1004 	strh.w	r1, [r9, #4]
    8b52:	78b1      	ldrb	r1, [r6, #2]
    8b54:	f889 1006 	strb.w	r1, [r9, #6]
    8b58:	f889 5000 	strb.w	r5, [r9]
    8b5c:	f889 4001 	strb.w	r4, [r9, #1]
    8b60:	f889 7002 	strb.w	r7, [r9, #2]
    8b64:	f889 8003 	strb.w	r8, [r9, #3]
    8b68:	f999 0007 	ldrsb.w	r0, [r9, #7]
    8b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8b70:	20000362 	.word	0x20000362

00008b74 <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA>:
    8b74:	4801      	ldr	r0, [pc, #4]	; (8b7c <sym_3NUECOSAIC227DBCPHAP4U7EQ3UBTGANU5ASIOA+0x8>)
    8b76:	7800      	ldrb	r0, [r0, #0]
    8b78:	4770      	bx	lr
    8b7a:	0000      	.short	0x0000
    8b7c:	200002c0 	.word	0x200002c0

00008b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
    8b80:	b570      	push	{r4, r5, r6, lr}
    8b82:	4c17      	ldr	r4, [pc, #92]	; (8be0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x60>)
    8b84:	7860      	ldrb	r0, [r4, #1]
    8b86:	2800      	cmp	r0, #0
    8b88:	d123      	bne.n	8bd2 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
    8b8a:	2001      	movs	r0, #1
    8b8c:	7060      	strb	r0, [r4, #1]
    8b8e:	f007 fcc7 	bl	10520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    8b92:	f06f 0527 	mvn.w	r5, #39	; 0x27
    8b96:	b928      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b98:	f007 fcf8 	bl	1058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    8b9c:	b910      	cbnz	r0, 8ba4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
    8b9e:	f007 fcff 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    8ba2:	b120      	cbz	r0, 8bae <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
    8ba4:	480f      	ldr	r0, [pc, #60]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8ba6:	6060      	str	r0, [r4, #4]
    8ba8:	70a5      	strb	r5, [r4, #2]
    8baa:	2008      	movs	r0, #8
    8bac:	e010      	b.n	8bd0 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
    8bae:	f007 fc8c 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    8bb2:	b940      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bb4:	f007 fc93 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    8bb8:	b928      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bba:	f007 fca7 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    8bbe:	b910      	cbnz	r0, 8bc6 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
    8bc0:	f007 fcb8 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    8bc4:	b130      	cbz	r0, 8bd4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
    8bc6:	4807      	ldr	r0, [pc, #28]	; (8be4 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x64>)
    8bc8:	3031      	adds	r0, #49	; 0x31
    8bca:	6060      	str	r0, [r4, #4]
    8bcc:	70a5      	strb	r5, [r4, #2]
    8bce:	2004      	movs	r0, #4
    8bd0:	70e0      	strb	r0, [r4, #3]
    8bd2:	bd70      	pop	{r4, r5, r6, pc}
    8bd4:	f240 113f 	movw	r1, #319	; 0x13f
    8bd8:	2074      	movs	r0, #116	; 0x74
    8bda:	f003 fbbd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8bde:	0000      	.short	0x0000
    8be0:	200002c0 	.word	0x200002c0
    8be4:	000108ed 	.word	0x000108ed

00008be8 <mpsl_tx_power_radio_supported_power_adjust>:
    8be8:	4a06      	ldr	r2, [pc, #24]	; (8c04 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
    8bea:	b500      	push	{lr}
    8bec:	f992 2003 	ldrsb.w	r2, [r2, #3]
    8bf0:	4290      	cmp	r0, r2
    8bf2:	db01      	blt.n	8bf8 <mpsl_tx_power_radio_supported_power_adjust+0x10>
    8bf4:	4610      	mov	r0, r2
    8bf6:	bd00      	pop	{pc}
    8bf8:	f000 f808 	bl	8c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
    8bfc:	4902      	ldr	r1, [pc, #8]	; (8c08 <mpsl_tx_power_radio_supported_power_adjust+0x20>)
    8bfe:	5608      	ldrsb	r0, [r1, r0]
    8c00:	bd00      	pop	{pc}
    8c02:	0000      	.short	0x0000
    8c04:	200002c0 	.word	0x200002c0
    8c08:	000108df 	.word	0x000108df

00008c0c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
    8c0c:	4602      	mov	r2, r0
    8c0e:	4813      	ldr	r0, [pc, #76]	; (8c5c <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
    8c10:	b510      	push	{r4, lr}
    8c12:	f990 3003 	ldrsb.w	r3, [r0, #3]
    8c16:	429a      	cmp	r2, r3
    8c18:	db01      	blt.n	8c1e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
    8c1a:	200d      	movs	r0, #13
    8c1c:	bd10      	pop	{r4, pc}
    8c1e:	f990 3002 	ldrsb.w	r3, [r0, #2]
    8c22:	429a      	cmp	r2, r3
    8c24:	dc01      	bgt.n	8c2a <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
    8c26:	2000      	movs	r0, #0
    8c28:	bd10      	pop	{r4, pc}
    8c2a:	b101      	cbz	r1, 8c2e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
    8c2c:	2101      	movs	r1, #1
    8c2e:	1ad4      	subs	r4, r2, r3
    8c30:	6843      	ldr	r3, [r0, #4]
    8c32:	5d18      	ldrb	r0, [r3, r4]
    8c34:	4c0a      	ldr	r4, [pc, #40]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c36:	5624      	ldrsb	r4, [r4, r0]
    8c38:	4294      	cmp	r4, r2
    8c3a:	d0f5      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c3c:	4c08      	ldr	r4, [pc, #32]	; (8c60 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
    8c3e:	4408      	add	r0, r1
    8c40:	343f      	adds	r4, #63	; 0x3f
    8c42:	b2c0      	uxtb	r0, r0
    8c44:	b2d2      	uxtb	r2, r2
    8c46:	42a3      	cmp	r3, r4
    8c48:	d1ee      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4a:	2900      	cmp	r1, #0
    8c4c:	d0ec      	beq.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c4e:	2a01      	cmp	r2, #1
    8c50:	d001      	beq.n	8c56 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
    8c52:	2a02      	cmp	r2, #2
    8c54:	d1e8      	bne.n	8c28 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
    8c56:	1c40      	adds	r0, r0, #1
    8c58:	b2c0      	uxtb	r0, r0
    8c5a:	bd10      	pop	{r4, pc}
    8c5c:	200002c0 	.word	0x200002c0
    8c60:	000108df 	.word	0x000108df

00008c64 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ>:
    8c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8c68:	461c      	mov	r4, r3
    8c6a:	4690      	mov	r8, r2
    8c6c:	460d      	mov	r5, r1
    8c6e:	4606      	mov	r6, r0
    8c70:	f06f 0715 	mvn.w	r7, #21
    8c74:	2804      	cmp	r0, #4
    8c76:	d804      	bhi.n	8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c78:	b11c      	cbz	r4, 8c82 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x1e>
    8c7a:	f007 fb37 	bl	102ec <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x16>
    8c7e:	42a8      	cmp	r0, r5
    8c80:	d802      	bhi.n	8c88 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x24>
    8c82:	4638      	mov	r0, r7
    8c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c88:	4805      	ldr	r0, [pc, #20]	; (8ca0 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x3c>)
    8c8a:	4642      	mov	r2, r8
    8c8c:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
    8c90:	b118      	cbz	r0, 8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c92:	5740      	ldrsb	r0, [r0, r5]
    8c94:	4282      	cmp	r2, r0
    8c96:	dd00      	ble.n	8c9a <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x36>
    8c98:	4602      	mov	r2, r0
    8c9a:	7022      	strb	r2, [r4, #0]
    8c9c:	2000      	movs	r0, #0
    8c9e:	e7f1      	b.n	8c84 <sym_QLJBNB55XHXGY3EZ4W3ZZ3U6AVPE2YGDOXRUZSQ+0x20>
    8ca0:	20000e58 	.word	0x20000e58

00008ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    8ca4:	4801      	ldr	r0, [pc, #4]	; (8cac <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    8ca6:	7800      	ldrb	r0, [r0, #0]
    8ca8:	4770      	bx	lr
    8caa:	0000      	.short	0x0000
    8cac:	200002c8 	.word	0x200002c8

00008cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    8cb0:	4905      	ldr	r1, [pc, #20]	; (8cc8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    8cb2:	780a      	ldrb	r2, [r1, #0]
    8cb4:	4290      	cmp	r0, r2
    8cb6:	d301      	bcc.n	8cbc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    8cb8:	2000      	movs	r0, #0
    8cba:	4770      	bx	lr
    8cbc:	6849      	ldr	r1, [r1, #4]
    8cbe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    8cc2:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    8cc6:	4770      	bx	lr
    8cc8:	200002c8 	.word	0x200002c8

00008ccc <MPSL_IRQ_RADIO_Handler>:
    8ccc:	490e      	ldr	r1, [pc, #56]	; (8d08 <MPSL_IRQ_RADIO_Handler+0x3c>)
    8cce:	b510      	push	{r4, lr}
    8cd0:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cd4:	2820      	cmp	r0, #32
    8cd6:	d012      	beq.n	8cfe <MPSL_IRQ_RADIO_Handler+0x32>
    8cd8:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
    8cdc:	f5a1 6280 	sub.w	r2, r1, #1024	; 0x400
    8ce0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ce4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    8ce8:	f891 1032 	ldrb.w	r1, [r1, #50]	; 0x32
    8cec:	6840      	ldr	r0, [r0, #4]
    8cee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8cf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    8cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8cfa:	2104      	movs	r1, #4
    8cfc:	4710      	bx	r2
    8cfe:	f640 01bc 	movw	r1, #2236	; 0x8bc
    8d02:	2070      	movs	r0, #112	; 0x70
    8d04:	f003 fb28 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d08:	2000126c 	.word	0x2000126c
    8d0c:	b570      	push	{r4, r5, r6, lr}
    8d0e:	4605      	mov	r5, r0
    8d10:	2a20      	cmp	r2, #32
    8d12:	d028      	beq.n	8d66 <MPSL_IRQ_RADIO_Handler+0x9a>
    8d14:	4819      	ldr	r0, [pc, #100]	; (8d7c <MPSL_IRQ_RADIO_Handler+0xb0>)
    8d16:	4c1a      	ldr	r4, [pc, #104]	; (8d80 <MPSL_IRQ_RADIO_Handler+0xb4>)
    8d18:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    8d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    8d20:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    8d24:	4423      	add	r3, r4
    8d26:	2920      	cmp	r1, #32
    8d28:	d022      	beq.n	8d70 <MPSL_IRQ_RADIO_Handler+0xa4>
    8d2a:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    8d2e:	7840      	ldrb	r0, [r0, #1]
    8d30:	784c      	ldrb	r4, [r1, #1]
    8d32:	7048      	strb	r0, [r1, #1]
    8d34:	4620      	mov	r0, r4
    8d36:	4601      	mov	r1, r0
    8d38:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    8d3c:	4291      	cmp	r1, r2
    8d3e:	7005      	strb	r5, [r0, #0]
    8d40:	7840      	ldrb	r0, [r0, #1]
    8d42:	d1f8      	bne.n	8d36 <MPSL_IRQ_RADIO_Handler+0x6a>
    8d44:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    8d48:	2a20      	cmp	r2, #32
    8d4a:	bf1a      	itte	ne
    8d4c:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    8d50:	7054      	strbne	r4, [r2, #1]
    8d52:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    8d56:	2220      	movs	r2, #32
    8d58:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    8d5c:	f88c 2001 	strb.w	r2, [ip, #1]
    8d60:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    8d64:	bd70      	pop	{r4, r5, r6, pc}
    8d66:	f44f 7126 	mov.w	r1, #664	; 0x298
    8d6a:	2070      	movs	r0, #112	; 0x70
    8d6c:	f003 faf4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    8d70:	f893 4020 	ldrb.w	r4, [r3, #32]
    8d74:	7840      	ldrb	r0, [r0, #1]
    8d76:	f883 0020 	strb.w	r0, [r3, #32]
    8d7a:	e7db      	b.n	8d34 <MPSL_IRQ_RADIO_Handler+0x68>
    8d7c:	200011ec 	.word	0x200011ec
    8d80:	2000126c 	.word	0x2000126c
    8d84:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d88:	b08d      	sub	sp, #52	; 0x34
    8d8a:	4615      	mov	r5, r2
    8d8c:	460c      	mov	r4, r1
    8d8e:	f002 fa11 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    8d92:	4428      	add	r0, r5
    8d94:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8d98:	9008      	str	r0, [sp, #32]
    8d9a:	6821      	ldr	r1, [r4, #0]
    8d9c:	1a08      	subs	r0, r1, r0
    8d9e:	0200      	lsls	r0, r0, #8
    8da0:	17c1      	asrs	r1, r0, #31
    8da2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8da6:	1200      	asrs	r0, r0, #8
    8da8:	2800      	cmp	r0, #0
    8daa:	f300 80f0 	bgt.w	8f8e <MPSL_IRQ_RADIO_Handler+0x2c2>
    8dae:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    8db2:	48cd      	ldr	r0, [pc, #820]	; (90e8 <MPSL_IRQ_RADIO_Handler+0x41c>)
    8db4:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    8db8:	4408      	add	r0, r1
    8dba:	9009      	str	r0, [sp, #36]	; 0x24
    8dbc:	f890 5020 	ldrb.w	r5, [r0, #32]
    8dc0:	2020      	movs	r0, #32
    8dc2:	4eca      	ldr	r6, [pc, #808]	; (90ec <MPSL_IRQ_RADIO_Handler+0x420>)
    8dc4:	f10d 0a18 	add.w	sl, sp, #24
    8dc8:	f10d 091c 	add.w	r9, sp, #28
    8dcc:	f88d 0018 	strb.w	r0, [sp, #24]
    8dd0:	2d20      	cmp	r5, #32
    8dd2:	bf1c      	itt	ne
    8dd4:	48c6      	ldrne	r0, [pc, #792]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8dd6:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8dda:	d038      	beq.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8ddc:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8de0:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8de4:	f100 0108 	add.w	r1, r0, #8
    8de8:	68c0      	ldr	r0, [r0, #12]
    8dea:	6827      	ldr	r7, [r4, #0]
    8dec:	1a38      	subs	r0, r7, r0
    8dee:	0200      	lsls	r0, r0, #8
    8df0:	17c2      	asrs	r2, r0, #31
    8df2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8df6:	1200      	asrs	r0, r0, #8
    8df8:	d429      	bmi.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8dfa:	89e0      	ldrh	r0, [r4, #14]
    8dfc:	b300      	cbz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8dfe:	89c8      	ldrh	r0, [r1, #14]
    8e00:	b9f0      	cbnz	r0, 8e40 <MPSL_IRQ_RADIO_Handler+0x174>
    8e02:	6808      	ldr	r0, [r1, #0]
    8e04:	9003      	str	r0, [sp, #12]
    8e06:	f003 f907 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e0a:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8e0e:	bf08      	it	eq
    8e10:	200d      	moveq	r0, #13
    8e12:	d00b      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e14:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8e18:	3856      	subs	r0, #86	; 0x56
    8e1a:	bf08      	it	eq
    8e1c:	201c      	moveq	r0, #28
    8e1e:	d005      	beq.n	8e2c <MPSL_IRQ_RADIO_Handler+0x160>
    8e20:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8e24:	389f      	subs	r0, #159	; 0x9f
    8e26:	bf14      	ite	ne
    8e28:	2000      	movne	r0, #0
    8e2a:	2032      	moveq	r0, #50	; 0x32
    8e2c:	1c41      	adds	r1, r0, #1
    8e2e:	9803      	ldr	r0, [sp, #12]
    8e30:	1a38      	subs	r0, r7, r0
    8e32:	0200      	lsls	r0, r0, #8
    8e34:	17c2      	asrs	r2, r0, #31
    8e36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8e3a:	1200      	asrs	r0, r0, #8
    8e3c:	4288      	cmp	r0, r1
    8e3e:	db06      	blt.n	8e4e <MPSL_IRQ_RADIO_Handler+0x182>
    8e40:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8e44:	f88a 5000 	strb.w	r5, [sl]
    8e48:	7845      	ldrb	r5, [r0, #1]
    8e4a:	2d20      	cmp	r5, #32
    8e4c:	d1c6      	bne.n	8ddc <MPSL_IRQ_RADIO_Handler+0x110>
    8e4e:	f89a 0000 	ldrb.w	r0, [sl]
    8e52:	f889 0000 	strb.w	r0, [r9]
    8e56:	2d20      	cmp	r5, #32
    8e58:	bf1c      	itt	ne
    8e5a:	48a5      	ldrne	r0, [pc, #660]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8e5c:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    8e60:	f000 813e 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e64:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8e68:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    8e6c:	6861      	ldr	r1, [r4, #4]
    8e6e:	f8d7 8008 	ldr.w	r8, [r7, #8]
    8e72:	f107 0008 	add.w	r0, r7, #8
    8e76:	eba8 0101 	sub.w	r1, r8, r1
    8e7a:	0209      	lsls	r1, r1, #8
    8e7c:	17ca      	asrs	r2, r1, #31
    8e7e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    8e82:	1209      	asrs	r1, r1, #8
    8e84:	d427      	bmi.n	8ed6 <MPSL_IRQ_RADIO_Handler+0x20a>
    8e86:	89c0      	ldrh	r0, [r0, #14]
    8e88:	2800      	cmp	r0, #0
    8e8a:	f000 8129 	beq.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e8e:	89e0      	ldrh	r0, [r4, #14]
    8e90:	2800      	cmp	r0, #0
    8e92:	f040 8125 	bne.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8e96:	f8d4 a000 	ldr.w	sl, [r4]
    8e9a:	f003 f8bd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8e9e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8ea2:	bf08      	it	eq
    8ea4:	200d      	moveq	r0, #13
    8ea6:	d00b      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8ea8:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8eac:	3856      	subs	r0, #86	; 0x56
    8eae:	bf08      	it	eq
    8eb0:	201c      	moveq	r0, #28
    8eb2:	d005      	beq.n	8ec0 <MPSL_IRQ_RADIO_Handler+0x1f4>
    8eb4:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8eb8:	389f      	subs	r0, #159	; 0x9f
    8eba:	bf14      	ite	ne
    8ebc:	2000      	movne	r0, #0
    8ebe:	2032      	moveq	r0, #50	; 0x32
    8ec0:	1c41      	adds	r1, r0, #1
    8ec2:	eba8 000a 	sub.w	r0, r8, sl
    8ec6:	0200      	lsls	r0, r0, #8
    8ec8:	17c2      	asrs	r2, r0, #31
    8eca:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ece:	1200      	asrs	r0, r0, #8
    8ed0:	4288      	cmp	r0, r1
    8ed2:	f280 8105 	bge.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ed6:	f889 5000 	strb.w	r5, [r9]
    8eda:	7e38      	ldrb	r0, [r7, #24]
    8edc:	7c21      	ldrb	r1, [r4, #16]
    8ede:	4288      	cmp	r0, r1
    8ee0:	d906      	bls.n	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    8ee2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    8ee6:	7845      	ldrb	r5, [r0, #1]
    8ee8:	2d20      	cmp	r5, #32
    8eea:	d1bb      	bne.n	8e64 <MPSL_IRQ_RADIO_Handler+0x198>
    8eec:	f000 b8f8 	b.w	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    8ef0:	f89d 001c 	ldrb.w	r0, [sp, #28]
    8ef4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8ef8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8efc:	8ac1      	ldrh	r1, [r0, #22]
    8efe:	68c5      	ldr	r5, [r0, #12]
    8f00:	bbe1      	cbnz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f02:	89e1      	ldrh	r1, [r4, #14]
    8f04:	b3d1      	cbz	r1, 8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f06:	6887      	ldr	r7, [r0, #8]
    8f08:	f003 f886 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f0c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f10:	bf08      	it	eq
    8f12:	200d      	moveq	r0, #13
    8f14:	d00b      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f16:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f1a:	3856      	subs	r0, #86	; 0x56
    8f1c:	bf08      	it	eq
    8f1e:	201c      	moveq	r0, #28
    8f20:	d005      	beq.n	8f2e <MPSL_IRQ_RADIO_Handler+0x262>
    8f22:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f26:	389f      	subs	r0, #159	; 0x9f
    8f28:	bf14      	ite	ne
    8f2a:	2000      	movne	r0, #0
    8f2c:	2032      	moveq	r0, #50	; 0x32
    8f2e:	1c41      	adds	r1, r0, #1
    8f30:	1be8      	subs	r0, r5, r7
    8f32:	0200      	lsls	r0, r0, #8
    8f34:	17c2      	asrs	r2, r0, #31
    8f36:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8f3a:	1200      	asrs	r0, r0, #8
    8f3c:	4288      	cmp	r0, r1
    8f3e:	da1d      	bge.n	8f7c <MPSL_IRQ_RADIO_Handler+0x2b0>
    8f40:	f003 f86a 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    8f44:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    8f48:	bf08      	it	eq
    8f4a:	200d      	moveq	r0, #13
    8f4c:	d00b      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f4e:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    8f52:	3856      	subs	r0, #86	; 0x56
    8f54:	bf08      	it	eq
    8f56:	201c      	moveq	r0, #28
    8f58:	d005      	beq.n	8f66 <MPSL_IRQ_RADIO_Handler+0x29a>
    8f5a:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    8f5e:	389f      	subs	r0, #159	; 0x9f
    8f60:	bf14      	ite	ne
    8f62:	2000      	movne	r0, #0
    8f64:	2032      	moveq	r0, #50	; 0x32
    8f66:	f89d 101c 	ldrb.w	r1, [sp, #28]
    8f6a:	1c40      	adds	r0, r0, #1
    8f6c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    8f70:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    8f74:	6889      	ldr	r1, [r1, #8]
    8f76:	4408      	add	r0, r1
    8f78:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    8f7c:	9808      	ldr	r0, [sp, #32]
    8f7e:	1a28      	subs	r0, r5, r0
    8f80:	0200      	lsls	r0, r0, #8
    8f82:	17c1      	asrs	r1, r0, #31
    8f84:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    8f88:	1200      	asrs	r0, r0, #8
    8f8a:	2800      	cmp	r0, #0
    8f8c:	dd03      	ble.n	8f96 <MPSL_IRQ_RADIO_Handler+0x2ca>
    8f8e:	b011      	add	sp, #68	; 0x44
    8f90:	2000      	movs	r0, #0
    8f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8f96:	6820      	ldr	r0, [r4, #0]
    8f98:	42a8      	cmp	r0, r5
    8f9a:	d902      	bls.n	8fa2 <MPSL_IRQ_RADIO_Handler+0x2d6>
    8f9c:	68a1      	ldr	r1, [r4, #8]
    8f9e:	1c49      	adds	r1, r1, #1
    8fa0:	60a1      	str	r1, [r4, #8]
    8fa2:	6861      	ldr	r1, [r4, #4]
    8fa4:	f10d 0a18 	add.w	sl, sp, #24
    8fa8:	1a08      	subs	r0, r1, r0
    8faa:	4428      	add	r0, r5
    8fac:	f025 417f 	bic.w	r1, r5, #4278190080	; 0xff000000
    8fb0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8fb4:	e9c4 1000 	strd	r1, r0, [r4]
    8fb8:	9810      	ldr	r0, [sp, #64]	; 0x40
    8fba:	900b      	str	r0, [sp, #44]	; 0x2c
    8fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8fbe:	f10d 081c 	add.w	r8, sp, #28
    8fc2:	f890 5020 	ldrb.w	r5, [r0, #32]
    8fc6:	2020      	movs	r0, #32
    8fc8:	f88d 0018 	strb.w	r0, [sp, #24]
    8fcc:	2d20      	cmp	r5, #32
    8fce:	d03c      	beq.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8fd0:	4947      	ldr	r1, [pc, #284]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    8fd2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8fd4:	eb01 1b80 	add.w	fp, r1, r0, lsl #6
    8fd8:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    8fdc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    8fe0:	f100 0108 	add.w	r1, r0, #8
    8fe4:	68c0      	ldr	r0, [r0, #12]
    8fe6:	6827      	ldr	r7, [r4, #0]
    8fe8:	1a38      	subs	r0, r7, r0
    8fea:	0200      	lsls	r0, r0, #8
    8fec:	17c2      	asrs	r2, r0, #31
    8fee:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    8ff2:	1200      	asrs	r0, r0, #8
    8ff4:	d429      	bmi.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    8ff6:	89e0      	ldrh	r0, [r4, #14]
    8ff8:	b300      	cbz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffa:	89c8      	ldrh	r0, [r1, #14]
    8ffc:	b9f0      	cbnz	r0, 903c <MPSL_IRQ_RADIO_Handler+0x370>
    8ffe:	f8d1 9000 	ldr.w	r9, [r1]
    9002:	f003 f809 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9006:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    900a:	bf08      	it	eq
    900c:	200d      	moveq	r0, #13
    900e:	d00b      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    9010:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9014:	3856      	subs	r0, #86	; 0x56
    9016:	bf08      	it	eq
    9018:	201c      	moveq	r0, #28
    901a:	d005      	beq.n	9028 <MPSL_IRQ_RADIO_Handler+0x35c>
    901c:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9020:	389f      	subs	r0, #159	; 0x9f
    9022:	bf14      	ite	ne
    9024:	2000      	movne	r0, #0
    9026:	2032      	moveq	r0, #50	; 0x32
    9028:	1c41      	adds	r1, r0, #1
    902a:	eba7 0009 	sub.w	r0, r7, r9
    902e:	0200      	lsls	r0, r0, #8
    9030:	17c2      	asrs	r2, r0, #31
    9032:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9036:	1200      	asrs	r0, r0, #8
    9038:	4288      	cmp	r0, r1
    903a:	db06      	blt.n	904a <MPSL_IRQ_RADIO_Handler+0x37e>
    903c:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9040:	f88a 5000 	strb.w	r5, [sl]
    9044:	7845      	ldrb	r5, [r0, #1]
    9046:	2d20      	cmp	r5, #32
    9048:	d1c6      	bne.n	8fd8 <MPSL_IRQ_RADIO_Handler+0x30c>
    904a:	f89a 0000 	ldrb.w	r0, [sl]
    904e:	f888 0000 	strb.w	r0, [r8]
    9052:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9054:	2d20      	cmp	r5, #32
    9056:	bf1c      	itt	ne
    9058:	4925      	ldrne	r1, [pc, #148]	; (90f0 <MPSL_IRQ_RADIO_Handler+0x424>)
    905a:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    905e:	d03f      	beq.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9060:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9064:	eb06 0780 	add.w	r7, r6, r0, lsl #2
    9068:	6860      	ldr	r0, [r4, #4]
    906a:	f8d7 9008 	ldr.w	r9, [r7, #8]
    906e:	f107 0108 	add.w	r1, r7, #8
    9072:	eba9 0000 	sub.w	r0, r9, r0
    9076:	0200      	lsls	r0, r0, #8
    9078:	17c2      	asrs	r2, r0, #31
    907a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    907e:	1200      	asrs	r0, r0, #8
    9080:	d422      	bmi.n	90c8 <MPSL_IRQ_RADIO_Handler+0x3fc>
    9082:	89c8      	ldrh	r0, [r1, #14]
    9084:	b360      	cbz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    9086:	89e0      	ldrh	r0, [r4, #14]
    9088:	bb50      	cbnz	r0, 90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    908a:	f8d4 a000 	ldr.w	sl, [r4]
    908e:	f002 ffc3 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9092:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9096:	bf08      	it	eq
    9098:	200d      	moveq	r0, #13
    909a:	d00b      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    909c:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    90a0:	3856      	subs	r0, #86	; 0x56
    90a2:	bf08      	it	eq
    90a4:	201c      	moveq	r0, #28
    90a6:	d005      	beq.n	90b4 <MPSL_IRQ_RADIO_Handler+0x3e8>
    90a8:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    90ac:	389f      	subs	r0, #159	; 0x9f
    90ae:	bf14      	ite	ne
    90b0:	2000      	movne	r0, #0
    90b2:	2032      	moveq	r0, #50	; 0x32
    90b4:	1c41      	adds	r1, r0, #1
    90b6:	eba9 000a 	sub.w	r0, r9, sl
    90ba:	0200      	lsls	r0, r0, #8
    90bc:	17c2      	asrs	r2, r0, #31
    90be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    90c2:	1200      	asrs	r0, r0, #8
    90c4:	4288      	cmp	r0, r1
    90c6:	da0b      	bge.n	90e0 <MPSL_IRQ_RADIO_Handler+0x414>
    90c8:	f888 5000 	strb.w	r5, [r8]
    90cc:	7e38      	ldrb	r0, [r7, #24]
    90ce:	7c21      	ldrb	r1, [r4, #16]
    90d0:	4288      	cmp	r0, r1
    90d2:	f67f af0d 	bls.w	8ef0 <MPSL_IRQ_RADIO_Handler+0x224>
    90d6:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    90da:	7845      	ldrb	r5, [r0, #1]
    90dc:	2d20      	cmp	r5, #32
    90de:	d1bf      	bne.n	9060 <MPSL_IRQ_RADIO_Handler+0x394>
    90e0:	b011      	add	sp, #68	; 0x44
    90e2:	2001      	movs	r0, #1
    90e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    90e8:	2000126c 	.word	0x2000126c
    90ec:	20000e6c 	.word	0x20000e6c
    90f0:	200011ec 	.word	0x200011ec
    90f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90f8:	460f      	mov	r7, r1
    90fa:	4606      	mov	r6, r0
    90fc:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9100:	494b      	ldr	r1, [pc, #300]	; (9230 <MPSL_IRQ_RADIO_Handler+0x564>)
    9102:	4699      	mov	r9, r3
    9104:	4408      	add	r0, r1
    9106:	4692      	mov	sl, r2
    9108:	f890 4020 	ldrb.w	r4, [r0, #32]
    910c:	2020      	movs	r0, #32
    910e:	7010      	strb	r0, [r2, #0]
    9110:	f5a1 6880 	sub.w	r8, r1, #1024	; 0x400
    9114:	2c20      	cmp	r4, #32
    9116:	bf1c      	itt	ne
    9118:	4846      	ldrne	r0, [pc, #280]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    911a:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    911e:	d038      	beq.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9120:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9124:	eb08 0080 	add.w	r0, r8, r0, lsl #2
    9128:	f100 0108 	add.w	r1, r0, #8
    912c:	68c0      	ldr	r0, [r0, #12]
    912e:	6835      	ldr	r5, [r6, #0]
    9130:	1a28      	subs	r0, r5, r0
    9132:	0200      	lsls	r0, r0, #8
    9134:	17c2      	asrs	r2, r0, #31
    9136:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    913a:	1200      	asrs	r0, r0, #8
    913c:	d429      	bmi.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    913e:	89f0      	ldrh	r0, [r6, #14]
    9140:	b300      	cbz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9142:	89c8      	ldrh	r0, [r1, #14]
    9144:	b9f0      	cbnz	r0, 9184 <MPSL_IRQ_RADIO_Handler+0x4b8>
    9146:	6808      	ldr	r0, [r1, #0]
    9148:	9000      	str	r0, [sp, #0]
    914a:	f002 ff65 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    914e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9152:	bf08      	it	eq
    9154:	200d      	moveq	r0, #13
    9156:	d00b      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9158:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    915c:	3856      	subs	r0, #86	; 0x56
    915e:	bf08      	it	eq
    9160:	201c      	moveq	r0, #28
    9162:	d005      	beq.n	9170 <MPSL_IRQ_RADIO_Handler+0x4a4>
    9164:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9168:	389f      	subs	r0, #159	; 0x9f
    916a:	bf14      	ite	ne
    916c:	2000      	movne	r0, #0
    916e:	2032      	moveq	r0, #50	; 0x32
    9170:	1c41      	adds	r1, r0, #1
    9172:	9800      	ldr	r0, [sp, #0]
    9174:	1a28      	subs	r0, r5, r0
    9176:	0200      	lsls	r0, r0, #8
    9178:	17c2      	asrs	r2, r0, #31
    917a:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    917e:	1200      	asrs	r0, r0, #8
    9180:	4288      	cmp	r0, r1
    9182:	db06      	blt.n	9192 <MPSL_IRQ_RADIO_Handler+0x4c6>
    9184:	eb0b 0044 	add.w	r0, fp, r4, lsl #1
    9188:	f88a 4000 	strb.w	r4, [sl]
    918c:	7844      	ldrb	r4, [r0, #1]
    918e:	2c20      	cmp	r4, #32
    9190:	d1c6      	bne.n	9120 <MPSL_IRQ_RADIO_Handler+0x454>
    9192:	f89a 0000 	ldrb.w	r0, [sl]
    9196:	f889 0000 	strb.w	r0, [r9]
    919a:	2c20      	cmp	r4, #32
    919c:	bf1c      	itt	ne
    919e:	4825      	ldrne	r0, [pc, #148]	; (9234 <MPSL_IRQ_RADIO_Handler+0x568>)
    91a0:	eb00 1a87 	addne.w	sl, r0, r7, lsl #6
    91a4:	d040      	beq.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91a6:	bf00      	nop
    91a8:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    91ac:	eb08 0780 	add.w	r7, r8, r0, lsl #2
    91b0:	6870      	ldr	r0, [r6, #4]
    91b2:	68bd      	ldr	r5, [r7, #8]
    91b4:	f107 0108 	add.w	r1, r7, #8
    91b8:	1a28      	subs	r0, r5, r0
    91ba:	0200      	lsls	r0, r0, #8
    91bc:	17c2      	asrs	r2, r0, #31
    91be:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    91c2:	1200      	asrs	r0, r0, #8
    91c4:	d422      	bmi.n	920c <MPSL_IRQ_RADIO_Handler+0x540>
    91c6:	89c8      	ldrh	r0, [r1, #14]
    91c8:	b370      	cbz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ca:	89f0      	ldrh	r0, [r6, #14]
    91cc:	bb60      	cbnz	r0, 9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    91ce:	f8d6 b000 	ldr.w	fp, [r6]
    91d2:	f002 ff21 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    91d6:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    91da:	bf08      	it	eq
    91dc:	200d      	moveq	r0, #13
    91de:	d00b      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91e0:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    91e4:	3856      	subs	r0, #86	; 0x56
    91e6:	bf08      	it	eq
    91e8:	201c      	moveq	r0, #28
    91ea:	d005      	beq.n	91f8 <MPSL_IRQ_RADIO_Handler+0x52c>
    91ec:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    91f0:	389f      	subs	r0, #159	; 0x9f
    91f2:	bf14      	ite	ne
    91f4:	2000      	movne	r0, #0
    91f6:	2032      	moveq	r0, #50	; 0x32
    91f8:	1c41      	adds	r1, r0, #1
    91fa:	eba5 000b 	sub.w	r0, r5, fp
    91fe:	0200      	lsls	r0, r0, #8
    9200:	17c2      	asrs	r2, r0, #31
    9202:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9206:	1200      	asrs	r0, r0, #8
    9208:	4288      	cmp	r0, r1
    920a:	da0d      	bge.n	9228 <MPSL_IRQ_RADIO_Handler+0x55c>
    920c:	f889 4000 	strb.w	r4, [r9]
    9210:	7e38      	ldrb	r0, [r7, #24]
    9212:	7c31      	ldrb	r1, [r6, #16]
    9214:	4288      	cmp	r0, r1
    9216:	d802      	bhi.n	921e <MPSL_IRQ_RADIO_Handler+0x552>
    9218:	2000      	movs	r0, #0
    921a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    921e:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
    9222:	7844      	ldrb	r4, [r0, #1]
    9224:	2c20      	cmp	r4, #32
    9226:	d1bf      	bne.n	91a8 <MPSL_IRQ_RADIO_Handler+0x4dc>
    9228:	2001      	movs	r0, #1
    922a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    922e:	0000      	.short	0x0000
    9230:	2000126c 	.word	0x2000126c
    9234:	200011ec 	.word	0x200011ec
    9238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    923c:	b098      	sub	sp, #96	; 0x60
    923e:	4615      	mov	r5, r2
    9240:	f002 fa7a 	bl	b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    9244:	4604      	mov	r4, r0
    9246:	f002 fd0f 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    924a:	4606      	mov	r6, r0
    924c:	9819      	ldr	r0, [sp, #100]	; 0x64
    924e:	2801      	cmp	r0, #1
    9250:	bf18      	it	ne
    9252:	2802      	cmpne	r0, #2
    9254:	d005      	beq.n	9262 <MPSL_IRQ_RADIO_Handler+0x596>
    9256:	f640 1192 	movw	r1, #2450	; 0x992
    925a:	f04f 0070 	mov.w	r0, #112	; 0x70
    925e:	f003 f87b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9262:	49fa      	ldr	r1, [pc, #1000]	; (964c <MPSL_IRQ_RADIO_Handler+0x980>)
    9264:	2001      	movs	r0, #1
    9266:	6008      	str	r0, [r1, #0]
    9268:	49f9      	ldr	r1, [pc, #996]	; (9650 <MPSL_IRQ_RADIO_Handler+0x984>)
    926a:	6889      	ldr	r1, [r1, #8]
    926c:	6008      	str	r0, [r1, #0]
    926e:	2000      	movs	r0, #0
    9270:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9274:	900a      	str	r0, [sp, #40]	; 0x28
    9276:	1e40      	subs	r0, r0, #1
    9278:	900b      	str	r0, [sp, #44]	; 0x2c
    927a:	49f6      	ldr	r1, [pc, #984]	; (9654 <MPSL_IRQ_RADIO_Handler+0x988>)
    927c:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9280:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    9284:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
    9288:	e9d1 c204 	ldrd	ip, r2, [r1, #16]
    928c:	e9cd 030c 	strd	r0, r3, [sp, #48]	; 0x30
    9290:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
    9294:	6989      	ldr	r1, [r1, #24]
    9296:	9110      	str	r1, [sp, #64]	; 0x40
    9298:	f007 f856 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    929c:	4602      	mov	r2, r0
    929e:	f8bd 803e 	ldrh.w	r8, [sp, #62]	; 0x3e
    92a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    92a6:	4bec      	ldr	r3, [pc, #944]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    92a8:	4440      	add	r0, r8
    92aa:	1c41      	adds	r1, r0, #1
    92ac:	1850      	adds	r0, r2, r1
    92ae:	429a      	cmp	r2, r3
    92b0:	d854      	bhi.n	935c <MPSL_IRQ_RADIO_Handler+0x690>
    92b2:	4dea      	ldr	r5, [pc, #936]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    92b4:	42a9      	cmp	r1, r5
    92b6:	dc58      	bgt.n	936a <MPSL_IRQ_RADIO_Handler+0x69e>
    92b8:	426a      	negs	r2, r5
    92ba:	4291      	cmp	r1, r2
    92bc:	db5d      	blt.n	937a <MPSL_IRQ_RADIO_Handler+0x6ae>
    92be:	1c59      	adds	r1, r3, #1
    92c0:	4281      	cmp	r1, r0
    92c2:	bfdc      	itt	le
    92c4:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    92c8:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    92cc:	dd05      	ble.n	92da <MPSL_IRQ_RADIO_Handler+0x60e>
    92ce:	2800      	cmp	r0, #0
    92d0:	bfbc      	itt	lt
    92d2:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    92d6:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    92da:	9014      	str	r0, [sp, #80]	; 0x50
    92dc:	48e0      	ldr	r0, [pc, #896]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    92de:	f1b8 0f00 	cmp.w	r8, #0
    92e2:	8b80      	ldrh	r0, [r0, #28]
    92e4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
    92e8:	bf14      	ite	ne
    92ea:	f04f 0a01 	movne.w	sl, #1
    92ee:	f04f 0a00 	moveq.w	sl, #0
    92f2:	f002 ffb9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    92f6:	9016      	str	r0, [sp, #88]	; 0x58
    92f8:	f1ba 0f00 	cmp.w	sl, #0
    92fc:	d008      	beq.n	9310 <MPSL_IRQ_RADIO_Handler+0x644>
    92fe:	48d8      	ldr	r0, [pc, #864]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    9300:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    9302:	f1b0 3fff 	cmp.w	r0, #4294967295
    9306:	bf02      	ittt	eq
    9308:	9816      	ldreq	r0, [sp, #88]	; 0x58
    930a:	2800      	cmpeq	r0, #0
    930c:	2701      	moveq	r7, #1
    930e:	d001      	beq.n	9314 <MPSL_IRQ_RADIO_Handler+0x648>
    9310:	f04f 0700 	mov.w	r7, #0
    9314:	f002 fe80 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9318:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    931c:	bf08      	it	eq
    931e:	200d      	moveq	r0, #13
    9320:	d00b      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    9322:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9326:	3856      	subs	r0, #86	; 0x56
    9328:	bf08      	it	eq
    932a:	201c      	moveq	r0, #28
    932c:	d005      	beq.n	933a <MPSL_IRQ_RADIO_Handler+0x66e>
    932e:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9332:	389f      	subs	r0, #159	; 0x9f
    9334:	bf14      	ite	ne
    9336:	2000      	movne	r0, #0
    9338:	2032      	moveq	r0, #50	; 0x32
    933a:	f04f 0900 	mov.w	r9, #0
    933e:	46cb      	mov	fp, r9
    9340:	9013      	str	r0, [sp, #76]	; 0x4c
    9342:	4546      	cmp	r6, r8
    9344:	d936      	bls.n	93b4 <MPSL_IRQ_RADIO_Handler+0x6e8>
    9346:	9b14      	ldr	r3, [sp, #80]	; 0x50
    9348:	f8df 930c 	ldr.w	r9, [pc, #780]	; 9658 <MPSL_IRQ_RADIO_Handler+0x98c>
    934c:	ea6f 0c06 	mvn.w	ip, r6
    9350:	4669      	mov	r1, sp
    9352:	aa17      	add	r2, sp, #92	; 0x5c
    9354:	eb03 000c 	add.w	r0, r3, ip
    9358:	454b      	cmp	r3, r9
    935a:	d904      	bls.n	9366 <MPSL_IRQ_RADIO_Handler+0x69a>
    935c:	f240 519e 	movw	r1, #1438	; 0x59e
    9360:	2070      	movs	r0, #112	; 0x70
    9362:	f002 fff9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9366:	45ac      	cmp	ip, r5
    9368:	dd04      	ble.n	9374 <MPSL_IRQ_RADIO_Handler+0x6a8>
    936a:	f240 519f 	movw	r1, #1439	; 0x59f
    936e:	2070      	movs	r0, #112	; 0x70
    9370:	f002 fff2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9374:	4bbb      	ldr	r3, [pc, #748]	; (9664 <MPSL_IRQ_RADIO_Handler+0x998>)
    9376:	459c      	cmp	ip, r3
    9378:	da04      	bge.n	9384 <MPSL_IRQ_RADIO_Handler+0x6b8>
    937a:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    937e:	2070      	movs	r0, #112	; 0x70
    9380:	f002 ffea 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9384:	4bb8      	ldr	r3, [pc, #736]	; (9668 <MPSL_IRQ_RADIO_Handler+0x99c>)
    9386:	4283      	cmp	r3, r0
    9388:	bfdc      	itt	le
    938a:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    938e:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9392:	dd05      	ble.n	93a0 <MPSL_IRQ_RADIO_Handler+0x6d4>
    9394:	2800      	cmp	r0, #0
    9396:	bfbc      	itt	lt
    9398:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    939c:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    93a0:	f001 ff24 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    93a4:	9800      	ldr	r0, [sp, #0]
    93a6:	990c      	ldr	r1, [sp, #48]	; 0x30
    93a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    93ac:	9000      	str	r0, [sp, #0]
    93ae:	1a08      	subs	r0, r1, r0
    93b0:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
    93b4:	2f00      	cmp	r7, #0
    93b6:	bf18      	it	ne
    93b8:	f8dd b04c 	ldrne.w	fp, [sp, #76]	; 0x4c
    93bc:	d105      	bne.n	93ca <MPSL_IRQ_RADIO_Handler+0x6fe>
    93be:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93c2:	2800      	cmp	r0, #0
    93c4:	bf18      	it	ne
    93c6:	f04f 0b02 	movne.w	fp, #2
    93ca:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    93ce:	d008      	beq.n	93e2 <MPSL_IRQ_RADIO_Handler+0x716>
    93d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    93d2:	1b00      	subs	r0, r0, r4
    93d4:	0200      	lsls	r0, r0, #8
    93d6:	17c1      	asrs	r1, r0, #31
    93d8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    93dc:	1200      	asrs	r0, r0, #8
    93de:	2801      	cmp	r0, #1
    93e0:	da02      	bge.n	93e8 <MPSL_IRQ_RADIO_Handler+0x71c>
    93e2:	2003      	movs	r0, #3
    93e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
    93e6:	e00d      	b.n	9404 <MPSL_IRQ_RADIO_Handler+0x738>
    93e8:	b157      	cbz	r7, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93ea:	489d      	ldr	r0, [pc, #628]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    93ec:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    93f0:	b130      	cbz	r0, 9400 <MPSL_IRQ_RADIO_Handler+0x734>
    93f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    93f6:	f110 0b00 	adds.w	fp, r0, #0
    93fa:	bf18      	it	ne
    93fc:	f04f 0b02 	movne.w	fp, #2
    9400:	4625      	mov	r5, r4
    9402:	2000      	movs	r0, #0
    9404:	4483      	add	fp, r0
    9406:	980c      	ldr	r0, [sp, #48]	; 0x30
    9408:	eba0 0009 	sub.w	r0, r0, r9
    940c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9410:	1e48      	subs	r0, r1, #1
    9412:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9416:	1b42      	subs	r2, r0, r5
    9418:	0212      	lsls	r2, r2, #8
    941a:	17d3      	asrs	r3, r2, #31
    941c:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9420:	1212      	asrs	r2, r2, #8
    9422:	455a      	cmp	r2, fp
    9424:	db04      	blt.n	9430 <MPSL_IRQ_RADIO_Handler+0x764>
    9426:	f1b9 0f00 	cmp.w	r9, #0
    942a:	bf18      	it	ne
    942c:	910c      	strne	r1, [sp, #48]	; 0x30
    942e:	e02d      	b.n	948c <MPSL_IRQ_RADIO_Handler+0x7c0>
    9430:	f1b9 0f00 	cmp.w	r9, #0
    9434:	d005      	beq.n	9442 <MPSL_IRQ_RADIO_Handler+0x776>
    9436:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    943a:	b920      	cbnz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    943c:	f002 fc0a 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    9440:	b108      	cbz	r0, 9446 <MPSL_IRQ_RADIO_Handler+0x77a>
    9442:	b9af      	cbnz	r7, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9444:	e00c      	b.n	9460 <MPSL_IRQ_RADIO_Handler+0x794>
    9446:	b92f      	cbnz	r7, 9454 <MPSL_IRQ_RADIO_Handler+0x788>
    9448:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    944c:	2800      	cmp	r0, #0
    944e:	bf18      	it	ne
    9450:	f1ab 0b02 	subne.w	fp, fp, #2
    9454:	f04f 0900 	mov.w	r9, #0
    9458:	f88d 9044 	strb.w	r9, [sp, #68]	; 0x44
    945c:	464e      	mov	r6, r9
    945e:	e007      	b.n	9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9460:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9464:	b120      	cbz	r0, 9470 <MPSL_IRQ_RADIO_Handler+0x7a4>
    9466:	2000      	movs	r0, #0
    9468:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    946c:	f1ab 0b02 	sub.w	fp, fp, #2
    9470:	980c      	ldr	r0, [sp, #48]	; 0x30
    9472:	eba0 0109 	sub.w	r1, r0, r9
    9476:	1e48      	subs	r0, r1, #1
    9478:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    947c:	1b42      	subs	r2, r0, r5
    947e:	0212      	lsls	r2, r2, #8
    9480:	17d3      	asrs	r3, r2, #31
    9482:	eb02 6213 	add.w	r2, r2, r3, lsr #24
    9486:	1212      	asrs	r2, r2, #8
    9488:	455a      	cmp	r2, fp
    948a:	db7d      	blt.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    948c:	4a74      	ldr	r2, [pc, #464]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    948e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9490:	1a89      	subs	r1, r1, r2
    9492:	0209      	lsls	r1, r1, #8
    9494:	17cb      	asrs	r3, r1, #31
    9496:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    949a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    949c:	1209      	asrs	r1, r1, #8
    949e:	b93b      	cbnz	r3, 94b0 <MPSL_IRQ_RADIO_Handler+0x7e4>
    94a0:	f1b2 3fff 	cmp.w	r2, #4294967295
    94a4:	bf1c      	itt	ne
    94a6:	9a13      	ldrne	r2, [sp, #76]	; 0x4c
    94a8:	4291      	cmpne	r1, r2
    94aa:	bfb8      	it	lt
    94ac:	2100      	movlt	r1, #0
    94ae:	db00      	blt.n	94b2 <MPSL_IRQ_RADIO_Handler+0x7e6>
    94b0:	2101      	movs	r1, #1
    94b2:	ea3a 0101 	bics.w	r1, sl, r1
    94b6:	d167      	bne.n	9588 <MPSL_IRQ_RADIO_Handler+0x8bc>
    94b8:	9919      	ldr	r1, [sp, #100]	; 0x64
    94ba:	4605      	mov	r5, r0
    94bc:	f04f 0900 	mov.w	r9, #0
    94c0:	9105      	str	r1, [sp, #20]
    94c2:	f001 fffd 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    94c6:	1a28      	subs	r0, r5, r0
    94c8:	0200      	lsls	r0, r0, #8
    94ca:	17c1      	asrs	r1, r0, #31
    94cc:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    94d0:	ea4f 2b20 	mov.w	fp, r0, asr #8
    94d4:	f002 fda0 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    94d8:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    94dc:	bf08      	it	eq
    94de:	200d      	moveq	r0, #13
    94e0:	d00b      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94e2:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    94e6:	3856      	subs	r0, #86	; 0x56
    94e8:	bf08      	it	eq
    94ea:	201c      	moveq	r0, #28
    94ec:	d005      	beq.n	94fa <MPSL_IRQ_RADIO_Handler+0x82e>
    94ee:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    94f2:	389f      	subs	r0, #159	; 0x9f
    94f4:	bf14      	ite	ne
    94f6:	2000      	movne	r0, #0
    94f8:	2032      	moveq	r0, #50	; 0x32
    94fa:	300b      	adds	r0, #11
    94fc:	4558      	cmp	r0, fp
    94fe:	dd1f      	ble.n	9540 <MPSL_IRQ_RADIO_Handler+0x874>
    9500:	9805      	ldr	r0, [sp, #20]
    9502:	2801      	cmp	r0, #1
    9504:	d001      	beq.n	950a <MPSL_IRQ_RADIO_Handler+0x83e>
    9506:	b147      	cbz	r7, 951a <MPSL_IRQ_RADIO_Handler+0x84e>
    9508:	e012      	b.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    950a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    950e:	d11c      	bne.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9510:	f640 1113 	movw	r1, #2323	; 0x913
    9514:	2070      	movs	r0, #112	; 0x70
    9516:	f002 ff1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    951a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    951e:	d007      	beq.n	9530 <MPSL_IRQ_RADIO_Handler+0x864>
    9520:	1b60      	subs	r0, r4, r5
    9522:	0200      	lsls	r0, r0, #8
    9524:	17c1      	asrs	r1, r0, #31
    9526:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    952a:	1200      	asrs	r0, r0, #8
    952c:	2804      	cmp	r0, #4
    952e:	dd04      	ble.n	953a <MPSL_IRQ_RADIO_Handler+0x86e>
    9530:	462c      	mov	r4, r5
    9532:	4620      	mov	r0, r4
    9534:	f001 ffea 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9538:	e007      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    953a:	2800      	cmp	r0, #0
    953c:	dc63      	bgt.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    953e:	e004      	b.n	954a <MPSL_IRQ_RADIO_Handler+0x87e>
    9540:	462c      	mov	r4, r5
    9542:	4620      	mov	r0, r4
    9544:	f001 ffe2 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    9548:	46d1      	mov	r9, sl
    954a:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    954e:	d055      	beq.n	95fc <MPSL_IRQ_RADIO_Handler+0x930>
    9550:	980c      	ldr	r0, [sp, #48]	; 0x30
    9552:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    9554:	1b00      	subs	r0, r0, r4
    9556:	1b12      	subs	r2, r2, r4
    9558:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    955c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9560:	2801      	cmp	r0, #1
    9562:	d350      	bcc.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9568:	bf98      	it	ls
    956a:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    956e:	d84a      	bhi.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    9570:	4620      	mov	r0, r4
    9572:	f006 fee9 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9576:	9914      	ldr	r1, [sp, #80]	; 0x50
    9578:	4a38      	ldr	r2, [pc, #224]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    957a:	1a0d      	subs	r5, r1, r0
    957c:	f04f 0b00 	mov.w	fp, #0
    9580:	1aaa      	subs	r2, r5, r2
    9582:	f17b 0200 	sbcs.w	r2, fp, #0
    9586:	e000      	b.n	958a <MPSL_IRQ_RADIO_Handler+0x8be>
    9588:	e03d      	b.n	9606 <MPSL_IRQ_RADIO_Handler+0x93a>
    958a:	d316      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    958c:	4a33      	ldr	r2, [pc, #204]	; (965c <MPSL_IRQ_RADIO_Handler+0x990>)
    958e:	1a43      	subs	r3, r0, r1
    9590:	1a9a      	subs	r2, r3, r2
    9592:	f17b 0200 	sbcs.w	r2, fp, #0
    9596:	d310      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    9598:	4a2f      	ldr	r2, [pc, #188]	; (9658 <MPSL_IRQ_RADIO_Handler+0x98c>)
    959a:	42aa      	cmp	r2, r5
    959c:	bf3e      	ittt	cc
    959e:	f5c0 2090 	rsbcc	r0, r0, #294912	; 0x48000
    95a2:	f100 50f4 	addcc.w	r0, r0, #511705088	; 0x1e800000
    95a6:	1845      	addcc	r5, r0, r1
    95a8:	d307      	bcc.n	95ba <MPSL_IRQ_RADIO_Handler+0x8ee>
    95aa:	429a      	cmp	r2, r3
    95ac:	d22f      	bcs.n	960e <MPSL_IRQ_RADIO_Handler+0x942>
    95ae:	f5c1 2190 	rsb	r1, r1, #294912	; 0x48000
    95b2:	f101 51f4 	add.w	r1, r1, #511705088	; 0x1e800000
    95b6:	4408      	add	r0, r1
    95b8:	4245      	negs	r5, r0
    95ba:	4f29      	ldr	r7, [pc, #164]	; (9660 <MPSL_IRQ_RADIO_Handler+0x994>)
    95bc:	7fb8      	ldrb	r0, [r7, #30]
    95be:	b358      	cbz	r0, 9618 <MPSL_IRQ_RADIO_Handler+0x94c>
    95c0:	9819      	ldr	r0, [sp, #100]	; 0x64
    95c2:	2801      	cmp	r0, #1
    95c4:	d005      	beq.n	95d2 <MPSL_IRQ_RADIO_Handler+0x906>
    95c6:	2002      	movs	r0, #2
    95c8:	f002 f9f0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95cc:	2001      	movs	r0, #1
    95ce:	f002 f9ed 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    95d2:	45b0      	cmp	r8, r6
    95d4:	d22c      	bcs.n	9630 <MPSL_IRQ_RADIO_Handler+0x964>
    95d6:	eba5 0106 	sub.w	r1, r5, r6
    95da:	f04f 0002 	mov.w	r0, #2
    95de:	f002 f92f 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95e2:	b390      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95e4:	f1b8 0f00 	cmp.w	r8, #0
    95e8:	bf1c      	itt	ne
    95ea:	eba5 0108 	subne.w	r1, r5, r8
    95ee:	2001      	movne	r0, #1
    95f0:	d044      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95f2:	bf00      	nop
    95f4:	f002 f924 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    95f8:	b338      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    95fa:	e03f      	b.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    95fc:	f640 2131 	movw	r1, #2609	; 0xa31
    9600:	2070      	movs	r0, #112	; 0x70
    9602:	f002 fea9 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9606:	b01b      	add	sp, #108	; 0x6c
    9608:	2000      	movs	r0, #0
    960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    960e:	f640 3105 	movw	r1, #2821	; 0xb05
    9612:	2070      	movs	r0, #112	; 0x70
    9614:	f002 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9618:	45b0      	cmp	r8, r6
    961a:	bf34      	ite	cc
    961c:	4630      	movcc	r0, r6
    961e:	4640      	movcs	r0, r8
    9620:	301e      	adds	r0, #30
    9622:	42a8      	cmp	r0, r5
    9624:	dbcc      	blt.n	95c0 <MPSL_IRQ_RADIO_Handler+0x8f4>
    9626:	f640 2145 	movw	r1, #2629	; 0xa45
    962a:	2070      	movs	r0, #112	; 0x70
    962c:	f002 fe94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9630:	d91c      	bls.n	966c <MPSL_IRQ_RADIO_Handler+0x9a0>
    9632:	eba5 0108 	sub.w	r1, r5, r8
    9636:	2001      	movs	r0, #1
    9638:	f002 f902 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    963c:	b128      	cbz	r0, 964a <MPSL_IRQ_RADIO_Handler+0x97e>
    963e:	2e00      	cmp	r6, #0
    9640:	bf1c      	itt	ne
    9642:	1ba9      	subne	r1, r5, r6
    9644:	2002      	movne	r0, #2
    9646:	d019      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9648:	e7d4      	b.n	95f4 <MPSL_IRQ_RADIO_Handler+0x928>
    964a:	e042      	b.n	96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    964c:	40000508 	.word	0x40000508
    9650:	200002d0 	.word	0x200002d0
    9654:	20000e6c 	.word	0x20000e6c
    9658:	1e847fff 	.word	0x1e847fff
    965c:	0f424000 	.word	0x0f424000
    9660:	2000126c 	.word	0x2000126c
    9664:	f0bdc000 	.word	0xf0bdc000
    9668:	1e848000 	.word	0x1e848000
    966c:	ea56 0008 	orrs.w	r0, r6, r8
    9670:	d004      	beq.n	967c <MPSL_IRQ_RADIO_Handler+0x9b0>
    9672:	f640 1176 	movw	r1, #2422	; 0x976
    9676:	2070      	movs	r0, #112	; 0x70
    9678:	f002 fe6e 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    967c:	4629      	mov	r1, r5
    967e:	2000      	movs	r0, #0
    9680:	f002 f8de 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    9684:	b328      	cbz	r0, 96d2 <MPSL_IRQ_RADIO_Handler+0xa06>
    9686:	2601      	movs	r6, #1
    9688:	f1ba 0f00 	cmp.w	sl, #0
    968c:	bf04      	itt	eq
    968e:	f897 0030 	ldrbeq.w	r0, [r7, #48]	; 0x30
    9692:	2800      	cmpeq	r0, #0
    9694:	d002      	beq.n	969c <MPSL_IRQ_RADIO_Handler+0x9d0>
    9696:	f1b9 0f00 	cmp.w	r9, #0
    969a:	d024      	beq.n	96e6 <MPSL_IRQ_RADIO_Handler+0xa1a>
    969c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    969e:	f1b0 3fff 	cmp.w	r0, #4294967295
    96a2:	d004      	beq.n	96ae <MPSL_IRQ_RADIO_Handler+0x9e2>
    96a4:	f002 fcbe 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    96a8:	f04f 30ff 	mov.w	r0, #4294967295
    96ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    96ae:	f1b9 0f00 	cmp.w	r9, #0
    96b2:	d01c      	beq.n	96ee <MPSL_IRQ_RADIO_Handler+0xa22>
    96b4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    96b6:	1a20      	subs	r0, r4, r0
    96b8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    96bc:	2005      	movs	r0, #5
    96be:	f002 f8bf 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    96c2:	b360      	cbz	r0, 971e <MPSL_IRQ_RADIO_Handler+0xa52>
    96c4:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96c8:	2800      	cmp	r0, #0
    96ca:	bf08      	it	eq
    96cc:	f887 6030 	strbeq.w	r6, [r7, #48]	; 0x30
    96d0:	e015      	b.n	96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96d2:	2002      	movs	r0, #2
    96d4:	f002 f96a 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96d8:	2001      	movs	r0, #1
    96da:	f002 f967 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96de:	b01b      	add	sp, #108	; 0x6c
    96e0:	2000      	movs	r0, #0
    96e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    96e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    96ec:	d012      	beq.n	9714 <MPSL_IRQ_RADIO_Handler+0xa48>
    96ee:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
    96f2:	b120      	cbz	r0, 96fe <MPSL_IRQ_RADIO_Handler+0xa32>
    96f4:	2005      	movs	r0, #5
    96f6:	f002 f959 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    96fa:	f887 b030 	strb.w	fp, [r7, #48]	; 0x30
    96fe:	eba5 0008 	sub.w	r0, r5, r8
    9702:	f1a0 0119 	sub.w	r1, r0, #25
    9706:	2900      	cmp	r1, #0
    9708:	dc0e      	bgt.n	9728 <MPSL_IRQ_RADIO_Handler+0xa5c>
    970a:	f640 216e 	movw	r1, #2670	; 0xa6e
    970e:	2070      	movs	r0, #112	; 0x70
    9710:	f002 fe22 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9714:	f002 fca2 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    9718:	f001 fed2 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    971c:	e7c6      	b.n	96ac <MPSL_IRQ_RADIO_Handler+0x9e0>
    971e:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    9722:	2070      	movs	r0, #112	; 0x70
    9724:	f002 fe18 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9728:	2003      	movs	r0, #3
    972a:	f002 f889 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    972e:	b1c0      	cbz	r0, 9762 <MPSL_IRQ_RADIO_Handler+0xa96>
    9730:	480e      	ldr	r0, [pc, #56]	; (976c <MPSL_IRQ_RADIO_Handler+0xaa0>)
    9732:	6880      	ldr	r0, [r0, #8]
    9734:	f8c0 b000 	str.w	fp, [r0]
    9738:	480d      	ldr	r0, [pc, #52]	; (9770 <MPSL_IRQ_RADIO_Handler+0xaa4>)
    973a:	f8c0 b000 	str.w	fp, [r0]
    973e:	ac0a      	add	r4, sp, #40	; 0x28
    9740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9744:	6038      	str	r0, [r7, #0]
    9746:	6079      	str	r1, [r7, #4]
    9748:	60ba      	str	r2, [r7, #8]
    974a:	60fb      	str	r3, [r7, #12]
    974c:	ac0e      	add	r4, sp, #56	; 0x38
    974e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9752:	6138      	str	r0, [r7, #16]
    9754:	6179      	str	r1, [r7, #20]
    9756:	61ba      	str	r2, [r7, #24]
    9758:	61fb      	str	r3, [r7, #28]
    975a:	b01b      	add	sp, #108	; 0x6c
    975c:	2001      	movs	r0, #1
    975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9762:	f640 2176 	movw	r1, #2678	; 0xa76
    9766:	2070      	movs	r0, #112	; 0x70
    9768:	f002 fdf6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    976c:	200002d0 	.word	0x200002d0
    9770:	40000508 	.word	0x40000508
    9774:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9778:	4614      	mov	r4, r2
    977a:	460d      	mov	r5, r1
    977c:	f04f 0a00 	mov.w	sl, #0
    9780:	890a      	ldrh	r2, [r1, #8]
    9782:	4651      	mov	r1, sl
    9784:	f362 411f 	bfi	r1, r2, #16, #16
    9788:	7aaa      	ldrb	r2, [r5, #10]
    978a:	46d1      	mov	r9, sl
    978c:	f362 0907 	bfi	r9, r2, #0, #8
    9790:	7aea      	ldrb	r2, [r5, #11]
    9792:	4606      	mov	r6, r0
    9794:	f362 290f 	bfi	r9, r2, #8, #8
    9798:	782a      	ldrb	r2, [r5, #0]
    979a:	b083      	sub	sp, #12
    979c:	6840      	ldr	r0, [r0, #4]
    979e:	f8c4 a000 	str.w	sl, [r4]
    97a2:	f362 4917 	bfi	r9, r2, #16, #8
    97a6:	f8c4 a004 	str.w	sl, [r4, #4]
    97aa:	f8c4 9010 	str.w	r9, [r4, #16]
    97ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
    97b2:	4f9d      	ldr	r7, [pc, #628]	; (9a28 <MPSL_IRQ_RADIO_Handler+0xd5c>)
    97b4:	6870      	ldr	r0, [r6, #4]
    97b6:	fba0 8907 	umull	r8, r9, r0, r7
    97ba:	6830      	ldr	r0, [r6, #0]
    97bc:	f006 fdc4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    97c0:	eb10 0108 	adds.w	r1, r0, r8
    97c4:	eb4a 0209 	adc.w	r2, sl, r9
    97c8:	7828      	ldrb	r0, [r5, #0]
    97ca:	ea4f 0967 	mov.w	r9, r7, asr #1
    97ce:	f1c9 0b00 	rsb	fp, r9, #0
    97d2:	b170      	cbz	r0, 97f2 <MPSL_IRQ_RADIO_Handler+0xb26>
    97d4:	89e0      	ldrh	r0, [r4, #14]
    97d6:	f894 8011 	ldrb.w	r8, [r4, #17]
    97da:	43c0      	mvns	r0, r0
    97dc:	f8d5 a004 	ldr.w	sl, [r5, #4]
    97e0:	f104 020c 	add.w	r2, r4, #12
    97e4:	4548      	cmp	r0, r9
    97e6:	dd7c      	ble.n	98e2 <MPSL_IRQ_RADIO_Handler+0xc16>
    97e8:	f240 519f 	movw	r1, #1439	; 0x59f
    97ec:	2070      	movs	r0, #112	; 0x70
    97ee:	f002 fdb3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    97f2:	f8df c238 	ldr.w	ip, [pc, #568]	; 9a2c <MPSL_IRQ_RADIO_Handler+0xd60>
    97f6:	e9d5 0304 	ldrd	r0, r3, [r5, #16]
    97fa:	eb11 0a0c 	adds.w	sl, r1, ip
    97fe:	f142 0c00 	adc.w	ip, r2, #0
    9802:	ebb0 0a0a 	subs.w	sl, r0, sl
    9806:	eb73 0c0c 	sbcs.w	ip, r3, ip
    980a:	d272      	bcs.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    980c:	1a41      	subs	r1, r0, r1
    980e:	eb73 0102 	sbcs.w	r1, r3, r2
    9812:	d36e      	bcc.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    9814:	ebb0 0608 	subs.w	r6, r0, r8
    9818:	42b7      	cmp	r7, r6
    981a:	d82b      	bhi.n	9874 <MPSL_IRQ_RADIO_Handler+0xba8>
    981c:	89e0      	ldrh	r0, [r4, #14]
    981e:	f1a6 58f4 	sub.w	r8, r6, #511705088	; 0x1e800000
    9822:	f5a8 2890 	sub.w	r8, r8, #294912	; 0x48000
    9826:	43c1      	mvns	r1, r0
    9828:	4a81      	ldr	r2, [pc, #516]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    982a:	eb08 0001 	add.w	r0, r8, r1
    982e:	4542      	cmp	r2, r8
    9830:	d32b      	bcc.n	988a <MPSL_IRQ_RADIO_Handler+0xbbe>
    9832:	4549      	cmp	r1, r9
    9834:	dcd8      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9836:	4559      	cmp	r1, fp
    9838:	db66      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    983a:	4287      	cmp	r7, r0
    983c:	bfdc      	itt	le
    983e:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    9842:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    9846:	dd05      	ble.n	9854 <MPSL_IRQ_RADIO_Handler+0xb88>
    9848:	2800      	cmp	r0, #0
    984a:	bfbc      	itt	lt
    984c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    9850:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    9854:	466a      	mov	r2, sp
    9856:	a901      	add	r1, sp, #4
    9858:	f001 fcc8 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    985c:	89e0      	ldrh	r0, [r4, #14]
    985e:	f89d 1000 	ldrb.w	r1, [sp]
    9862:	1a30      	subs	r0, r6, r0
    9864:	1a40      	subs	r0, r0, r1
    9866:	1e40      	subs	r0, r0, #1
    9868:	42b8      	cmp	r0, r7
    986a:	d302      	bcc.n	9872 <MPSL_IRQ_RADIO_Handler+0xba6>
    986c:	68a0      	ldr	r0, [r4, #8]
    986e:	1c40      	adds	r0, r0, #1
    9870:	60a0      	str	r0, [r4, #8]
    9872:	4646      	mov	r6, r8
    9874:	89e0      	ldrh	r0, [r4, #14]
    9876:	4b6e      	ldr	r3, [pc, #440]	; (9a30 <MPSL_IRQ_RADIO_Handler+0xd64>)
    9878:	43c1      	mvns	r1, r0
    987a:	686d      	ldr	r5, [r5, #4]
    987c:	f894 8011 	ldrb.w	r8, [r4, #17]
    9880:	1870      	adds	r0, r6, r1
    9882:	f104 020c 	add.w	r2, r4, #12
    9886:	429e      	cmp	r6, r3
    9888:	d904      	bls.n	9894 <MPSL_IRQ_RADIO_Handler+0xbc8>
    988a:	f240 519e 	movw	r1, #1438	; 0x59e
    988e:	2070      	movs	r0, #112	; 0x70
    9890:	f002 fd62 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9894:	4549      	cmp	r1, r9
    9896:	dca7      	bgt.n	97e8 <MPSL_IRQ_RADIO_Handler+0xb1c>
    9898:	4559      	cmp	r1, fp
    989a:	db35      	blt.n	9908 <MPSL_IRQ_RADIO_Handler+0xc3c>
    989c:	4287      	cmp	r7, r0
    989e:	bfdc      	itt	le
    98a0:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    98a4:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    98a8:	dd05      	ble.n	98b6 <MPSL_IRQ_RADIO_Handler+0xbea>
    98aa:	2800      	cmp	r0, #0
    98ac:	bfbc      	itt	lt
    98ae:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    98b2:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    98b6:	4621      	mov	r1, r4
    98b8:	f001 fc98 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    98bc:	6820      	ldr	r0, [r4, #0]
    98be:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    98c2:	1970      	adds	r0, r6, r5
    98c4:	1c40      	adds	r0, r0, #1
    98c6:	6021      	str	r1, [r4, #0]
    98c8:	f1b8 0f00 	cmp.w	r8, #0
    98cc:	bf08      	it	eq
    98ce:	307a      	addeq	r0, #122	; 0x7a
    98d0:	d004      	beq.n	98dc <MPSL_IRQ_RADIO_Handler+0xc10>
    98d2:	f1b8 0f01 	cmp.w	r8, #1
    98d6:	bf08      	it	eq
    98d8:	3048      	addeq	r0, #72	; 0x48
    98da:	d13a      	bne.n	9952 <MPSL_IRQ_RADIO_Handler+0xc86>
    98dc:	f001 fc6a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    98e0:	e001      	b.n	98e6 <MPSL_IRQ_RADIO_Handler+0xc1a>
    98e2:	e00e      	b.n	9902 <MPSL_IRQ_RADIO_Handler+0xc36>
    98e4:	e005      	b.n	98f2 <MPSL_IRQ_RADIO_Handler+0xc26>
    98e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98ea:	6060      	str	r0, [r4, #4]
    98ec:	b007      	add	sp, #28
    98ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    98f2:	6830      	ldr	r0, [r6, #0]
    98f4:	1e40      	subs	r0, r0, #1
    98f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    98fa:	6020      	str	r0, [r4, #0]
    98fc:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
    9900:	e7f3      	b.n	98ea <MPSL_IRQ_RADIO_Handler+0xc1e>
    9902:	4601      	mov	r1, r0
    9904:	4558      	cmp	r0, fp
    9906:	da04      	bge.n	9912 <MPSL_IRQ_RADIO_Handler+0xc46>
    9908:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    990c:	2070      	movs	r0, #112	; 0x70
    990e:	f002 fd23 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9912:	4287      	cmp	r7, r0
    9914:	bfdc      	itt	le
    9916:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    991a:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    991e:	dd05      	ble.n	992c <MPSL_IRQ_RADIO_Handler+0xc60>
    9920:	2800      	cmp	r0, #0
    9922:	bfbc      	itt	lt
    9924:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    9928:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    992c:	4621      	mov	r1, r4
    992e:	f001 fc5d 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9932:	6820      	ldr	r0, [r4, #0]
    9934:	f1b8 0f00 	cmp.w	r8, #0
    9938:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    993c:	f10a 0001 	add.w	r0, sl, #1
    9940:	6021      	str	r1, [r4, #0]
    9942:	bf08      	it	eq
    9944:	307a      	addeq	r0, #122	; 0x7a
    9946:	d009      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9948:	f1b8 0f01 	cmp.w	r8, #1
    994c:	bf08      	it	eq
    994e:	3048      	addeq	r0, #72	; 0x48
    9950:	d004      	beq.n	995c <MPSL_IRQ_RADIO_Handler+0xc90>
    9952:	f240 6139 	movw	r1, #1593	; 0x639
    9956:	2070      	movs	r0, #112	; 0x70
    9958:	f002 fcfe 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    995c:	f001 fc2a 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    9960:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    9964:	6061      	str	r1, [r4, #4]
    9966:	f8b4 900e 	ldrh.w	r9, [r4, #14]
    996a:	aa01      	add	r2, sp, #4
    996c:	4669      	mov	r1, sp
    996e:	4648      	mov	r0, r9
    9970:	6837      	ldr	r7, [r6, #0]
    9972:	f001 fc3b 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9976:	f002 f977 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    997a:	f001 fc1b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    997e:	4680      	mov	r8, r0
    9980:	482c      	ldr	r0, [pc, #176]	; (9a34 <MPSL_IRQ_RADIO_Handler+0xd68>)
    9982:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    9986:	2920      	cmp	r1, #32
    9988:	d02a      	beq.n	99e0 <MPSL_IRQ_RADIO_Handler+0xd14>
    998a:	68c0      	ldr	r0, [r0, #12]
    998c:	1d40      	adds	r0, r0, #5
    998e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9992:	bf00      	nop
    9994:	e9d4 2100 	ldrd	r2, r1, [r4]
    9998:	1a89      	subs	r1, r1, r2
    999a:	4401      	add	r1, r0
    999c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    99a0:	e9c4 0100 	strd	r0, r1, [r4]
    99a4:	6831      	ldr	r1, [r6, #0]
    99a6:	4281      	cmp	r1, r0
    99a8:	d902      	bls.n	99b0 <MPSL_IRQ_RADIO_Handler+0xce4>
    99aa:	68a0      	ldr	r0, [r4, #8]
    99ac:	1c40      	adds	r0, r0, #1
    99ae:	60a0      	str	r0, [r4, #8]
    99b0:	6832      	ldr	r2, [r6, #0]
    99b2:	6928      	ldr	r0, [r5, #16]
    99b4:	4621      	mov	r1, r4
    99b6:	9b06      	ldr	r3, [sp, #24]
    99b8:	f7ff f9e4 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    99bc:	2800      	cmp	r0, #0
    99be:	bf1c      	itt	ne
    99c0:	b007      	addne	sp, #28
    99c2:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99c6:	e9d4 1000 	ldrd	r1, r0, [r4]
    99ca:	1a40      	subs	r0, r0, r1
    99cc:	6831      	ldr	r1, [r6, #0]
    99ce:	6021      	str	r1, [r4, #0]
    99d0:	6831      	ldr	r1, [r6, #0]
    99d2:	4408      	add	r0, r1
    99d4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    99d8:	6060      	str	r0, [r4, #4]
    99da:	b007      	add	sp, #28
    99dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99e0:	3709      	adds	r7, #9
    99e2:	f1b9 0f00 	cmp.w	r9, #0
    99e6:	d016      	beq.n	9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99e8:	f002 fc3e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    99ec:	b998      	cbnz	r0, 9a16 <MPSL_IRQ_RADIO_Handler+0xd4a>
    99ee:	f002 fb13 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    99f2:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    99f6:	bf08      	it	eq
    99f8:	200d      	moveq	r0, #13
    99fa:	d00b      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    99fc:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9a00:	3856      	subs	r0, #86	; 0x56
    9a02:	bf08      	it	eq
    9a04:	201c      	moveq	r0, #28
    9a06:	d005      	beq.n	9a14 <MPSL_IRQ_RADIO_Handler+0xd48>
    9a08:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9a0c:	389f      	subs	r0, #159	; 0x9f
    9a0e:	bf14      	ite	ne
    9a10:	2000      	movne	r0, #0
    9a12:	2032      	moveq	r0, #50	; 0x32
    9a14:	4407      	add	r7, r0
    9a16:	9800      	ldr	r0, [sp, #0]
    9a18:	4580      	cmp	r8, r0
    9a1a:	bf84      	itt	hi
    9a1c:	eba8 0000 	subhi.w	r0, r8, r0
    9a20:	4407      	addhi	r7, r0
    9a22:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    9a26:	e7b5      	b.n	9994 <MPSL_IRQ_RADIO_Handler+0xcc8>
    9a28:	1e848000 	.word	0x1e848000
    9a2c:	0f424000 	.word	0x0f424000
    9a30:	1e847fff 	.word	0x1e847fff
    9a34:	2000126c 	.word	0x2000126c
    9a38:	b570      	push	{r4, r5, r6, lr}
    9a3a:	4d1e      	ldr	r5, [pc, #120]	; (9ab4 <MPSL_IRQ_RADIO_Handler+0xde8>)
    9a3c:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    9a40:	2820      	cmp	r0, #32
    9a42:	bf18      	it	ne
    9a44:	bd70      	popne	{r4, r5, r6, pc}
    9a46:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    9a4a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    9a4e:	4428      	add	r0, r5
    9a50:	f890 4020 	ldrb.w	r4, [r0, #32]
    9a54:	2c20      	cmp	r4, #32
    9a56:	d027      	beq.n	9aa8 <MPSL_IRQ_RADIO_Handler+0xddc>
    9a58:	4b17      	ldr	r3, [pc, #92]	; (9ab8 <MPSL_IRQ_RADIO_Handler+0xdec>)
    9a5a:	eb03 1182 	add.w	r1, r3, r2, lsl #6
    9a5e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    9a62:	7849      	ldrb	r1, [r1, #1]
    9a64:	f880 1020 	strb.w	r1, [r0, #32]
    9a68:	20ff      	movs	r0, #255	; 0xff
    9a6a:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    9a6e:	f885 4032 	strb.w	r4, [r5, #50]	; 0x32
    9a72:	4621      	mov	r1, r4
    9a74:	2002      	movs	r0, #2
    9a76:	f000 f891 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9a7a:	2000      	movs	r0, #0
    9a7c:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
    9a80:	77a8      	strb	r0, [r5, #30]
    9a82:	490e      	ldr	r1, [pc, #56]	; (9abc <MPSL_IRQ_RADIO_Handler+0xdf0>)
    9a84:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    9a88:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9a8c:	7e00      	ldrb	r0, [r0, #24]
    9a8e:	2800      	cmp	r0, #0
    9a90:	bf08      	it	eq
    9a92:	f002 fdcb 	bleq	c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>
    9a96:	2000      	movs	r0, #0
    9a98:	4909      	ldr	r1, [pc, #36]	; (9ac0 <MPSL_IRQ_RADIO_Handler+0xdf4>)
    9a9a:	6849      	ldr	r1, [r1, #4]
    9a9c:	2900      	cmp	r1, #0
    9a9e:	bf08      	it	eq
    9aa0:	bd70      	popeq	{r4, r5, r6, pc}
    9aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9aa6:	4708      	bx	r1
    9aa8:	f240 3132 	movw	r1, #818	; 0x332
    9aac:	2070      	movs	r0, #112	; 0x70
    9aae:	f002 fc53 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9ab2:	0000      	.short	0x0000
    9ab4:	2000126c 	.word	0x2000126c
    9ab8:	200011ec 	.word	0x200011ec
    9abc:	20000e6c 	.word	0x20000e6c
    9ac0:	200002d0 	.word	0x200002d0
    9ac4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9ac8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9b8c <MPSL_IRQ_RADIO_Handler+0xec0>
    9acc:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9ad0:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9ad4:	4440      	add	r0, r8
    9ad6:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9ada:	2c20      	cmp	r4, #32
    9adc:	bf08      	it	eq
    9ade:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9ae2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9b90 <MPSL_IRQ_RADIO_Handler+0xec4>
    9ae6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 9b94 <MPSL_IRQ_RADIO_Handler+0xec8>
    9aea:	f5aa 7960 	sub.w	r9, sl, #896	; 0x380
    9aee:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    9af2:	2607      	movs	r6, #7
    9af4:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    9af8:	2801      	cmp	r0, #1
    9afa:	d00e      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9afc:	2804      	cmp	r0, #4
    9afe:	bf08      	it	eq
    9b00:	2602      	moveq	r6, #2
    9b02:	d00a      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b04:	2805      	cmp	r0, #5
    9b06:	bf0c      	ite	eq
    9b08:	2603      	moveq	r6, #3
    9b0a:	2806      	cmpne	r0, #6
    9b0c:	d005      	beq.n	9b1a <MPSL_IRQ_RADIO_Handler+0xe4e>
    9b0e:	f640 01dd 	movw	r1, #2269	; 0x8dd
    9b12:	f04f 0070 	mov.w	r0, #112	; 0x70
    9b16:	f002 fc1f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9b1a:	f1bb 0f00 	cmp.w	fp, #0
    9b1e:	bf18      	it	ne
    9b20:	f3af 8000 	nopne.w
    9b24:	f3ef 8010 	mrs	r0, PRIMASK
    9b28:	b672      	cpsid	i
    9b2a:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    9b2e:	784a      	ldrb	r2, [r1, #1]
    9b30:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    9b34:	4441      	add	r1, r8
    9b36:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    9b3a:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    9b3e:	42a2      	cmp	r2, r4
    9b40:	bf04      	itt	eq
    9b42:	2220      	moveq	r2, #32
    9b44:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    9b48:	b1c0      	cbz	r0, 9b7c <MPSL_IRQ_RADIO_Handler+0xeb0>
    9b4a:	462a      	mov	r2, r5
    9b4c:	4621      	mov	r1, r4
    9b4e:	2001      	movs	r0, #1
    9b50:	f000 f824 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    9b54:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9b58:	eb09 0081 	add.w	r0, r9, r1, lsl #2
    9b5c:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    9b60:	6840      	ldr	r0, [r0, #4]
    9b62:	4631      	mov	r1, r6
    9b64:	4790      	blx	r2
    9b66:	f898 5031 	ldrb.w	r5, [r8, #49]	; 0x31
    9b6a:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    9b6e:	4440      	add	r0, r8
    9b70:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    9b74:	2c20      	cmp	r4, #32
    9b76:	d1ba      	bne.n	9aee <MPSL_IRQ_RADIO_Handler+0xe22>
    9b78:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9b7c:	4806      	ldr	r0, [pc, #24]	; (9b98 <MPSL_IRQ_RADIO_Handler+0xecc>)
    9b7e:	2800      	cmp	r0, #0
    9b80:	bf18      	it	ne
    9b82:	f3af 8000 	nopne.w
    9b86:	b662      	cpsie	i
    9b88:	e7df      	b.n	9b4a <MPSL_IRQ_RADIO_Handler+0xe7e>
    9b8a:	0000      	.short	0x0000
    9b8c:	2000126c 	.word	0x2000126c
    9b90:	00000000 	.word	0x00000000
    9b94:	200011ec 	.word	0x200011ec
    9b98:	00000000 	.word	0x00000000
    9b9c:	f8df c058 	ldr.w	ip, [pc, #88]	; 9bf8 <MPSL_IRQ_RADIO_Handler+0xf2c>
    9ba0:	b510      	push	{r4, lr}
    9ba2:	2300      	movs	r3, #0
    9ba4:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    9ba8:	2807      	cmp	r0, #7
    9baa:	d21f      	bcs.n	9bec <MPSL_IRQ_RADIO_Handler+0xf20>
    9bac:	e8df f000 	tbb	[pc, r0]
    9bb0:	05050505 	.word	0x05050505
    9bb4:	00040404 	.word	0x00040404
    9bb8:	2301      	movs	r3, #1
    9bba:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    9bbe:	2b00      	cmp	r3, #0
    9bc0:	bf08      	it	eq
    9bc2:	bd10      	popeq	{r4, pc}
    9bc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    9bc8:	480c      	ldr	r0, [pc, #48]	; (9bfc <MPSL_IRQ_RADIO_Handler+0xf30>)
    9bca:	4402      	add	r2, r0
    9bcc:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    9bd0:	2820      	cmp	r0, #32
    9bd2:	bf0e      	itee	eq
    9bd4:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    9bd8:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    9bdc:	7041      	strbne	r1, [r0, #1]
    9bde:	2020      	movs	r0, #32
    9be0:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    9be4:	7058      	strb	r0, [r3, #1]
    9be6:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    9bea:	bd10      	pop	{r4, pc}
    9bec:	f240 216e 	movw	r1, #622	; 0x26e
    9bf0:	2070      	movs	r0, #112	; 0x70
    9bf2:	f002 fbb1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9bf6:	0000      	.short	0x0000
    9bf8:	200011ec 	.word	0x200011ec
    9bfc:	2000126c 	.word	0x2000126c
    9c00:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9c04:	460f      	mov	r7, r1
    9c06:	4680      	mov	r8, r0
    9c08:	f8df a160 	ldr.w	sl, [pc, #352]	; 9d6c <MPSL_IRQ_RADIO_Handler+0x10a0>
    9c0c:	eb01 0047 	add.w	r0, r1, r7, lsl #1
    9c10:	4450      	add	r0, sl
    9c12:	f1b8 0f01 	cmp.w	r8, #1
    9c16:	f890 4020 	ldrb.w	r4, [r0, #32]
    9c1a:	4625      	mov	r5, r4
    9c1c:	bf18      	it	ne
    9c1e:	f1b8 0f02 	cmpne.w	r8, #2
    9c22:	d005      	beq.n	9c30 <MPSL_IRQ_RADIO_Handler+0xf64>
    9c24:	f640 21ac 	movw	r1, #2732	; 0xaac
    9c28:	f04f 0070 	mov.w	r0, #112	; 0x70
    9c2c:	f002 fb94 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9c30:	f04f 0b00 	mov.w	fp, #0
    9c34:	2d20      	cmp	r5, #32
    9c36:	d042      	beq.n	9cbe <MPSL_IRQ_RADIO_Handler+0xff2>
    9c38:	f89a 001e 	ldrb.w	r0, [sl, #30]
    9c3c:	2600      	movs	r6, #0
    9c3e:	2800      	cmp	r0, #0
    9c40:	bf08      	it	eq
    9c42:	2602      	moveq	r6, #2
    9c44:	f001 fc3c 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9c48:	f8df c124 	ldr.w	ip, [pc, #292]	; 9d70 <MPSL_IRQ_RADIO_Handler+0x10a4>
    9c4c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c50:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c54:	688a      	ldr	r2, [r1, #8]
    9c56:	68c9      	ldr	r1, [r1, #12]
    9c58:	1a12      	subs	r2, r2, r0
    9c5a:	1a09      	subs	r1, r1, r0
    9c5c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9c60:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c64:	4296      	cmp	r6, r2
    9c66:	bf99      	ittee	ls
    9c68:	f5b2 0f00 	cmpls.w	r2, #8388608	; 0x800000
    9c6c:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9c70:	4a40      	ldrhi	r2, [pc, #256]	; (9d74 <MPSL_IRQ_RADIO_Handler+0x10a8>)
    9c72:	eb02 1987 	addhi.w	r9, r2, r7, lsl #6
    9c76:	d920      	bls.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9c78:	4622      	mov	r2, r4
    9c7a:	eb09 0142 	add.w	r1, r9, r2, lsl #1
    9c7e:	784c      	ldrb	r4, [r1, #1]
    9c80:	2c20      	cmp	r4, #32
    9c82:	d012      	beq.n	9caa <MPSL_IRQ_RADIO_Handler+0xfde>
    9c84:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    9c88:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    9c8c:	688b      	ldr	r3, [r1, #8]
    9c8e:	68c9      	ldr	r1, [r1, #12]
    9c90:	1a1b      	subs	r3, r3, r0
    9c92:	1a09      	subs	r1, r1, r0
    9c94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9c98:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9c9c:	429e      	cmp	r6, r3
    9c9e:	bf9c      	itt	ls
    9ca0:	f5b3 0f00 	cmpls.w	r3, #8388608	; 0x800000
    9ca4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    9ca8:	d8e6      	bhi.n	9c78 <MPSL_IRQ_RADIO_Handler+0xfac>
    9caa:	2a20      	cmp	r2, #32
    9cac:	d005      	beq.n	9cba <MPSL_IRQ_RADIO_Handler+0xfee>
    9cae:	463b      	mov	r3, r7
    9cb0:	2120      	movs	r1, #32
    9cb2:	2004      	movs	r0, #4
    9cb4:	f7ff f82a 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9cb8:	4604      	mov	r4, r0
    9cba:	42ac      	cmp	r4, r5
    9cbc:	d116      	bne.n	9cec <MPSL_IRQ_RADIO_Handler+0x1020>
    9cbe:	482e      	ldr	r0, [pc, #184]	; (9d78 <MPSL_IRQ_RADIO_Handler+0x10ac>)
    9cc0:	2800      	cmp	r0, #0
    9cc2:	bf18      	it	ne
    9cc4:	f3af 8000 	nopne.w
    9cc8:	f001 fbfa 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    9ccc:	4603      	mov	r3, r0
    9cce:	f89a 0033 	ldrb.w	r0, [sl, #51]	; 0x33
    9cd2:	2820      	cmp	r0, #32
    9cd4:	d00d      	beq.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cd6:	f8da 0008 	ldr.w	r0, [sl, #8]
    9cda:	1c99      	adds	r1, r3, #2
    9cdc:	1a08      	subs	r0, r1, r0
    9cde:	0200      	lsls	r0, r0, #8
    9ce0:	17c1      	asrs	r1, r0, #31
    9ce2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9ce6:	1200      	asrs	r0, r0, #8
    9ce8:	2800      	cmp	r0, #0
    9cea:	dd02      	ble.n	9cf2 <MPSL_IRQ_RADIO_Handler+0x1026>
    9cec:	2000      	movs	r0, #0
    9cee:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9cf2:	2d20      	cmp	r5, #32
    9cf4:	d014      	beq.n	9d20 <MPSL_IRQ_RADIO_Handler+0x1054>
    9cf6:	462a      	mov	r2, r5
    9cf8:	4641      	mov	r1, r8
    9cfa:	4618      	mov	r0, r3
    9cfc:	f7ff fa9c 	bl	9238 <MPSL_IRQ_RADIO_Handler+0x56c>
    9d00:	2800      	cmp	r0, #0
    9d02:	bf1e      	ittt	ne
    9d04:	f88a 5033 	strbne.w	r5, [sl, #51]	; 0x33
    9d08:	2002      	movne	r0, #2
    9d0a:	e8bd 9ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d0e:	463b      	mov	r3, r7
    9d10:	462a      	mov	r2, r5
    9d12:	2120      	movs	r1, #32
    9d14:	2004      	movs	r0, #4
    9d16:	f7fe fff9 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9d1a:	2000      	movs	r0, #0
    9d1c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d20:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
    9d24:	f1b0 3fff 	cmp.w	r0, #4294967295
    9d28:	d005      	beq.n	9d36 <MPSL_IRQ_RADIO_Handler+0x106a>
    9d2a:	f002 f97b 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    9d2e:	f04f 30ff 	mov.w	r0, #4294967295
    9d32:	f8ca 002c 	str.w	r0, [sl, #44]	; 0x2c
    9d36:	f89a 0030 	ldrb.w	r0, [sl, #48]	; 0x30
    9d3a:	b120      	cbz	r0, 9d46 <MPSL_IRQ_RADIO_Handler+0x107a>
    9d3c:	2005      	movs	r0, #5
    9d3e:	f001 fe35 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d42:	f88a b030 	strb.w	fp, [sl, #48]	; 0x30
    9d46:	2004      	movs	r0, #4
    9d48:	f001 fe30 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9d4c:	f001 fe9e 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    9d50:	2020      	movs	r0, #32
    9d52:	f88a 0033 	strb.w	r0, [sl, #51]	; 0x33
    9d56:	4809      	ldr	r0, [pc, #36]	; (9d7c <MPSL_IRQ_RADIO_Handler+0x10b0>)
    9d58:	6880      	ldr	r0, [r0, #8]
    9d5a:	f8c0 b000 	str.w	fp, [r0]
    9d5e:	4808      	ldr	r0, [pc, #32]	; (9d80 <MPSL_IRQ_RADIO_Handler+0x10b4>)
    9d60:	f8c0 b000 	str.w	fp, [r0]
    9d64:	2001      	movs	r0, #1
    9d66:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    9d6a:	0000      	.short	0x0000
    9d6c:	2000126c 	.word	0x2000126c
    9d70:	20000e6c 	.word	0x20000e6c
    9d74:	200011ec 	.word	0x200011ec
    9d78:	00000000 	.word	0x00000000
    9d7c:	200002d0 	.word	0x200002d0
    9d80:	40000508 	.word	0x40000508

00009d84 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    9d84:	4906      	ldr	r1, [pc, #24]	; (9da0 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    9d86:	b510      	push	{r4, lr}
    9d88:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
    9d8c:	2a20      	cmp	r2, #32
    9d8e:	bf1c      	itt	ne
    9d90:	7788      	strbne	r0, [r1, #30]
    9d92:	bd10      	popne	{r4, pc}
    9d94:	f240 319a 	movw	r1, #922	; 0x39a
    9d98:	2070      	movs	r0, #112	; 0x70
    9d9a:	f002 fadd 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9d9e:	0000      	.short	0x0000
    9da0:	2000126c 	.word	0x2000126c

00009da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    9da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9da8:	4e69      	ldr	r6, [pc, #420]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9daa:	4607      	mov	r7, r0
    9dac:	b08d      	sub	sp, #52	; 0x34
    9dae:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9db2:	4688      	mov	r8, r1
    9db4:	2820      	cmp	r0, #32
    9db6:	d055      	beq.n	9e64 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc0>
    9db8:	f896 0032 	ldrb.w	r0, [r6, #50]	; 0x32
    9dbc:	f106 0408 	add.w	r4, r6, #8
    9dc0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    9dc4:	f5a6 6980 	sub.w	r9, r6, #1024	; 0x400
    9dc8:	eb09 0a80 	add.w	sl, r9, r0, lsl #2
    9dcc:	2020      	movs	r0, #32
    9dce:	f88d 0020 	strb.w	r0, [sp, #32]
    9dd2:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    9dd6:	aa0a      	add	r2, sp, #40	; 0x28
    9dd8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9ddc:	4430      	add	r0, r6
    9dde:	a909      	add	r1, sp, #36	; 0x24
    9de0:	f890 5020 	ldrb.w	r5, [r0, #32]
    9de4:	68f0      	ldr	r0, [r6, #12]
    9de6:	9002      	str	r0, [sp, #8]
    9de8:	6830      	ldr	r0, [r6, #0]
    9dea:	4438      	add	r0, r7
    9dec:	f001 f9fe 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    9df0:	f8da 000c 	ldr.w	r0, [sl, #12]
    9df4:	9909      	ldr	r1, [sp, #36]	; 0x24
    9df6:	2f65      	cmp	r7, #101	; 0x65
    9df8:	4408      	add	r0, r1
    9dfa:	d338      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9dfc:	4a55      	ldr	r2, [pc, #340]	; (9f54 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b0>)
    9dfe:	2100      	movs	r1, #0
    9e00:	1bd2      	subs	r2, r2, r7
    9e02:	eb71 0201 	sbcs.w	r2, r1, r1
    9e06:	d332      	bcc.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e08:	6822      	ldr	r2, [r4, #0]
    9e0a:	1a82      	subs	r2, r0, r2
    9e0c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    9e10:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    9e14:	d82b      	bhi.n	9e6e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xca>
    9e16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9e1a:	6060      	str	r0, [r4, #4]
    9e1c:	4630      	mov	r0, r6
    9e1e:	f884 8010 	strb.w	r8, [r4, #16]
    9e22:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
    9e26:	f10d 0a20 	add.w	sl, sp, #32
    9e2a:	2d20      	cmp	r5, #32
    9e2c:	bf1c      	itt	ne
    9e2e:	494a      	ldrne	r1, [pc, #296]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9e30:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    9e34:	d050      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e36:	bf00      	nop
    9e38:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    9e3c:	eb09 0880 	add.w	r8, r9, r0, lsl #2
    9e40:	6861      	ldr	r1, [r4, #4]
    9e42:	f8d8 6008 	ldr.w	r6, [r8, #8]
    9e46:	f108 0008 	add.w	r0, r8, #8
    9e4a:	1a71      	subs	r1, r6, r1
    9e4c:	0209      	lsls	r1, r1, #8
    9e4e:	17ca      	asrs	r2, r1, #31
    9e50:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    9e54:	1209      	asrs	r1, r1, #8
    9e56:	d42d      	bmi.n	9eb4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x110>
    9e58:	89c0      	ldrh	r0, [r0, #14]
    9e5a:	2800      	cmp	r0, #0
    9e5c:	d03c      	beq.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e5e:	89e0      	ldrh	r0, [r4, #14]
    9e60:	b148      	cbz	r0, 9e76 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xd2>
    9e62:	e039      	b.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9e64:	f640 3173 	movw	r1, #2931	; 0xb73
    9e68:	2070      	movs	r0, #112	; 0x70
    9e6a:	f002 fa75 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9e6e:	b00d      	add	sp, #52	; 0x34
    9e70:	2001      	movs	r0, #1
    9e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e76:	6820      	ldr	r0, [r4, #0]
    9e78:	900c      	str	r0, [sp, #48]	; 0x30
    9e7a:	f002 f8cd 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    9e7e:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    9e82:	bf08      	it	eq
    9e84:	200d      	moveq	r0, #13
    9e86:	d00b      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e88:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    9e8c:	3856      	subs	r0, #86	; 0x56
    9e8e:	bf08      	it	eq
    9e90:	201c      	moveq	r0, #28
    9e92:	d005      	beq.n	9ea0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xfc>
    9e94:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    9e98:	389f      	subs	r0, #159	; 0x9f
    9e9a:	bf14      	ite	ne
    9e9c:	2000      	movne	r0, #0
    9e9e:	2032      	moveq	r0, #50	; 0x32
    9ea0:	1c41      	adds	r1, r0, #1
    9ea2:	980c      	ldr	r0, [sp, #48]	; 0x30
    9ea4:	1a30      	subs	r0, r6, r0
    9ea6:	0200      	lsls	r0, r0, #8
    9ea8:	17c2      	asrs	r2, r0, #31
    9eaa:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    9eae:	1200      	asrs	r0, r0, #8
    9eb0:	4288      	cmp	r0, r1
    9eb2:	da11      	bge.n	9ed8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x134>
    9eb4:	f88a 5000 	strb.w	r5, [sl]
    9eb8:	f898 1018 	ldrb.w	r1, [r8, #24]
    9ebc:	7c20      	ldrb	r0, [r4, #16]
    9ebe:	4281      	cmp	r1, r0
    9ec0:	d805      	bhi.n	9ece <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x12a>
    9ec2:	9802      	ldr	r0, [sp, #8]
    9ec4:	6060      	str	r0, [r4, #4]
    9ec6:	b00d      	add	sp, #52	; 0x34
    9ec8:	2002      	movs	r0, #2
    9eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ece:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    9ed2:	7845      	ldrb	r5, [r0, #1]
    9ed4:	2d20      	cmp	r5, #32
    9ed6:	d1af      	bne.n	9e38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x94>
    9ed8:	2005      	movs	r0, #5
    9eda:	f001 fd67 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    9ede:	4c1c      	ldr	r4, [pc, #112]	; (9f50 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1ac>)
    9ee0:	f04f 30ff 	mov.w	r0, #4294967295
    9ee4:	6060      	str	r0, [r4, #4]
    9ee6:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    9eea:	f89d 2020 	ldrb.w	r2, [sp, #32]
    9eee:	2120      	movs	r1, #32
    9ef0:	2a20      	cmp	r2, #32
    9ef2:	d003      	beq.n	9efc <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x158>
    9ef4:	2005      	movs	r0, #5
    9ef6:	f7fe ff09 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    9efa:	e004      	b.n	9f06 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x162>
    9efc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    9f00:	4420      	add	r0, r4
    9f02:	f890 0020 	ldrb.w	r0, [r0, #32]
    9f06:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    9f0a:	4913      	ldr	r1, [pc, #76]	; (9f58 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b4>)
    9f0c:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    9f10:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
    9f14:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    9f18:	7048      	strb	r0, [r1, #1]
    9f1a:	6820      	ldr	r0, [r4, #0]
    9f1c:	4438      	add	r0, r7
    9f1e:	6020      	str	r0, [r4, #0]
    9f20:	20ff      	movs	r0, #255	; 0xff
    9f22:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    9f26:	7e60      	ldrb	r0, [r4, #25]
    9f28:	2801      	cmp	r0, #1
    9f2a:	d105      	bne.n	9f38 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x194>
    9f2c:	68e0      	ldr	r0, [r4, #12]
    9f2e:	1e40      	subs	r0, r0, #1
    9f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    9f34:	f001 fb9e 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    9f38:	f89d 0020 	ldrb.w	r0, [sp, #32]
    9f3c:	2820      	cmp	r0, #32
    9f3e:	d003      	beq.n	9f48 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1a4>
    9f40:	4806      	ldr	r0, [pc, #24]	; (9f5c <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x1b8>)
    9f42:	7840      	ldrb	r0, [r0, #1]
    9f44:	f002 fadc 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    9f48:	b00d      	add	sp, #52	; 0x34
    9f4a:	2000      	movs	r0, #0
    9f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f50:	2000126c 	.word	0x2000126c
    9f54:	0f424000 	.word	0x0f424000
    9f58:	200011ec 	.word	0x200011ec
    9f5c:	200002d0 	.word	0x200002d0

00009f60 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    9f60:	b570      	push	{r4, r5, r6, lr}
    9f62:	4a24      	ldr	r2, [pc, #144]	; (9ff4 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x94>)
    9f64:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f68:	2920      	cmp	r1, #32
    9f6a:	d03a      	beq.n	9fe2 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x82>
    9f6c:	f892 1032 	ldrb.w	r1, [r2, #50]	; 0x32
    9f70:	f5a2 6380 	sub.w	r3, r2, #1024	; 0x400
    9f74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9f78:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    9f7c:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
    9f80:	f892 4031 	ldrb.w	r4, [r2, #49]	; 0x31
    9f84:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    9f88:	4411      	add	r1, r2
    9f8a:	f891 1020 	ldrb.w	r1, [r1, #32]
    9f8e:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    9f92:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    9f96:	2920      	cmp	r1, #32
    9f98:	d028      	beq.n	9fec <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8c>
    9f9a:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
    9f9e:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    9fa2:	7e2d      	ldrb	r5, [r5, #24]
    9fa4:	4285      	cmp	r5, r0
    9fa6:	bf84      	itt	hi
    9fa8:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    9fac:	7849      	ldrbhi	r1, [r1, #1]
    9fae:	d8f2      	bhi.n	9f96 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x36>
    9fb0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    9fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    9fb8:	f8dc 000c 	ldr.w	r0, [ip, #12]
    9fbc:	6889      	ldr	r1, [r1, #8]
    9fbe:	6814      	ldr	r4, [r2, #0]
    9fc0:	1a08      	subs	r0, r1, r0
    9fc2:	0200      	lsls	r0, r0, #8
    9fc4:	17c1      	asrs	r1, r0, #31
    9fc6:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    9fca:	1200      	asrs	r0, r0, #8
    9fcc:	d407      	bmi.n	9fde <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7e>
    9fce:	f006 f9bb 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    9fd2:	f104 0165 	add.w	r1, r4, #101	; 0x65
    9fd6:	4288      	cmp	r0, r1
    9fd8:	bf24      	itt	cs
    9fda:	1b00      	subcs	r0, r0, r4
    9fdc:	bd70      	popcs	{r4, r5, r6, pc}
    9fde:	2000      	movs	r0, #0
    9fe0:	bd70      	pop	{r4, r5, r6, pc}
    9fe2:	f640 3145 	movw	r1, #2885	; 0xb45
    9fe6:	2070      	movs	r0, #112	; 0x70
    9fe8:	f002 f9b6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    9fec:	f04f 30ff 	mov.w	r0, #4294967295
    9ff0:	bd70      	pop	{r4, r5, r6, pc}
    9ff2:	0000      	.short	0x0000
    9ff4:	2000126c 	.word	0x2000126c

00009ff8 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    9ff8:	4806      	ldr	r0, [pc, #24]	; (a014 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    9ffa:	b510      	push	{r4, lr}
    9ffc:	f890 1032 	ldrb.w	r1, [r0, #50]	; 0x32
    a000:	2920      	cmp	r1, #32
    a002:	bf1c      	itt	ne
    a004:	7e00      	ldrbne	r0, [r0, #24]
    a006:	bd10      	popne	{r4, pc}
    a008:	f640 316d 	movw	r1, #2925	; 0xb6d
    a00c:	2070      	movs	r0, #112	; 0x70
    a00e:	f002 f9a3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a012:	0000      	.short	0x0000
    a014:	2000126c 	.word	0x2000126c

0000a018 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    a018:	b570      	push	{r4, r5, r6, lr}
    a01a:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    a01e:	4809      	ldr	r0, [pc, #36]	; (a044 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x2c>)
    a020:	eb00 0481 	add.w	r4, r0, r1, lsl #2
    a024:	4908      	ldr	r1, [pc, #32]	; (a048 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x30>)
    a026:	6920      	ldr	r0, [r4, #16]
    a028:	fba0 5601 	umull	r5, r6, r0, r1
    a02c:	68a0      	ldr	r0, [r4, #8]
    a02e:	f006 f98b 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a032:	8ae1      	ldrh	r1, [r4, #22]
    a034:	7d22      	ldrb	r2, [r4, #20]
    a036:	1c40      	adds	r0, r0, #1
    a038:	4411      	add	r1, r2
    a03a:	4408      	add	r0, r1
    a03c:	1940      	adds	r0, r0, r5
    a03e:	f146 0100 	adc.w	r1, r6, #0
    a042:	bd70      	pop	{r4, r5, r6, pc}
    a044:	20000e6c 	.word	0x20000e6c
    a048:	1e848000 	.word	0x1e848000

0000a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    a04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a04e:	4d6f      	ldr	r5, [pc, #444]	; (a20c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    a050:	2601      	movs	r6, #1
    a052:	f505 6480 	add.w	r4, r5, #1024	; 0x400
    a056:	4a6e      	ldr	r2, [pc, #440]	; (a210 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    a058:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    a05a:	2808      	cmp	r0, #8
    a05c:	d272      	bcs.n	a144 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    a05e:	e8df f000 	tbb	[pc, r0]
    a062:	7704      	.short	0x7704
    a064:	44cfb19f 	.word	0x44cfb19f
    a068:	bbb6      	.short	0xbbb6
    a06a:	f1b1 3fff 	cmp.w	r1, #4294967295
    a06e:	d104      	bne.n	a07a <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2e>
    a070:	f001 fff4 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a074:	f001 fa24 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a078:	62e0      	str	r0, [r4, #44]	; 0x2c
    a07a:	8ae0      	ldrh	r0, [r4, #22]
    a07c:	b110      	cbz	r0, a084 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x38>
    a07e:	f002 f8f3 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a082:	b180      	cbz	r0, a0a6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x5a>
    a084:	f7ff fcd8 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a088:	20ff      	movs	r0, #255	; 0xff
    a08a:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    a08e:	6861      	ldr	r1, [r4, #4]
    a090:	f1b1 3fff 	cmp.w	r1, #4294967295
    a094:	d003      	beq.n	a09e <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x52>
    a096:	2005      	movs	r0, #5
    a098:	f001 fbd2 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    a09c:	b140      	cbz	r0, a0b0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x64>
    a09e:	7e60      	ldrb	r0, [r4, #25]
    a0a0:	2801      	cmp	r0, #1
    a0a2:	d110      	bne.n	a0c6 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x7a>
    a0a4:	e009      	b.n	a0ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6e>
    a0a6:	f640 0169 	movw	r1, #2153	; 0x869
    a0aa:	2070      	movs	r0, #112	; 0x70
    a0ac:	f002 f954 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0b0:	f640 016e 	movw	r1, #2158	; 0x86e
    a0b4:	2070      	movs	r0, #112	; 0x70
    a0b6:	f002 f94f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a0ba:	68e0      	ldr	r0, [r4, #12]
    a0bc:	1e40      	subs	r0, r0, #1
    a0be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a0c2:	f001 fad7 	bl	b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    a0c6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a0ca:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a0ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a0d2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a0d6:	6840      	ldr	r0, [r0, #4]
    a0d8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a0dc:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a0e0:	b001      	add	sp, #4
    a0e2:	2101      	movs	r1, #1
    a0e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a0e8:	4710      	bx	r2
    a0ea:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
    a0ee:	b158      	cbz	r0, a108 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xbc>
    a0f0:	f1b1 3fff 	cmp.w	r1, #4294967295
    a0f4:	d104      	bne.n	a100 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xb4>
    a0f6:	f001 ffb1 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a0fa:	f001 f9e1 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a0fe:	62e0      	str	r0, [r4, #44]	; 0x2c
    a100:	2000      	movs	r0, #0
    a102:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a108:	f7ff fc96 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a10c:	f04f 30ff 	mov.w	r0, #4294967295
    a110:	6060      	str	r0, [r4, #4]
    a112:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    a116:	f88d 0000 	strb.w	r0, [sp]
    a11a:	f89d 0000 	ldrb.w	r0, [sp]
    a11e:	b190      	cbz	r0, a146 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    a120:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a124:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a128:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a12c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a130:	6840      	ldr	r0, [r0, #4]
    a132:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a136:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a13a:	b001      	add	sp, #4
    a13c:	2106      	movs	r1, #6
    a13e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a142:	4710      	bx	r2
    a144:	e05c      	b.n	a200 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b4>
    a146:	f640 0185 	movw	r1, #2181	; 0x885
    a14a:	2070      	movs	r0, #112	; 0x70
    a14c:	f002 f904 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a150:	f7ff fc72 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a154:	f884 6026 	strb.w	r6, [r4, #38]	; 0x26
    a158:	f002 f886 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a15c:	b120      	cbz	r0, a168 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x11c>
    a15e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    a160:	f1b0 3fff 	cmp.w	r0, #4294967295
    a164:	d005      	beq.n	a172 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x126>
    a166:	e009      	b.n	a17c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x130>
    a168:	f640 0193 	movw	r1, #2195	; 0x893
    a16c:	2070      	movs	r0, #112	; 0x70
    a16e:	f002 f8f3 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a172:	f001 ff73 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    a176:	f001 f9a3 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    a17a:	62e0      	str	r0, [r4, #44]	; 0x2c
    a17c:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a180:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a184:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a188:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a18c:	6840      	ldr	r0, [r0, #4]
    a18e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a192:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a196:	b001      	add	sp, #4
    a198:	2100      	movs	r1, #0
    a19a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a19e:	4710      	bx	r2
    a1a0:	f001 fd44 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    a1a4:	8ae0      	ldrh	r0, [r4, #22]
    a1a6:	b110      	cbz	r0, a1ae <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x162>
    a1a8:	f002 f85e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a1ac:	b128      	cbz	r0, a1ba <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x16e>
    a1ae:	f001 fd51 	bl	bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>
    a1b2:	2800      	cmp	r0, #0
    a1b4:	bf18      	it	ne
    a1b6:	7766      	strbne	r6, [r4, #29]
    a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ba:	f640 019d 	movw	r1, #2205	; 0x89d
    a1be:	2070      	movs	r0, #112	; 0x70
    a1c0:	f002 f8ca 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a1c4:	4813      	ldr	r0, [pc, #76]	; (a214 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    a1c6:	6006      	str	r6, [r0, #0]
    a1c8:	6890      	ldr	r0, [r2, #8]
    a1ca:	6006      	str	r6, [r0, #0]
    a1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a1ce:	7810      	ldrb	r0, [r2, #0]
    a1d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a1d4:	f002 b994 	b.w	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a1d8:	f7ff fc2e 	bl	9a38 <MPSL_IRQ_RADIO_Handler+0xd6c>
    a1dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a1e0:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    a1e4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a1e8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    a1ec:	6840      	ldr	r0, [r0, #4]
    a1ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    a1f2:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
    a1f6:	b001      	add	sp, #4
    a1f8:	2105      	movs	r1, #5
    a1fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1fe:	4710      	bx	r2
    a200:	f44f 610b 	mov.w	r1, #2224	; 0x8b0
    a204:	2070      	movs	r0, #112	; 0x70
    a206:	f002 f8a7 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a20a:	0000      	.short	0x0000
    a20c:	20000e6c 	.word	0x20000e6c
    a210:	200002d0 	.word	0x200002d0
    a214:	40000508 	.word	0x40000508

0000a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    a218:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a21c:	4682      	mov	sl, r0
    a21e:	48ef      	ldr	r0, [pc, #956]	; (a5dc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c4>)
    a220:	b095      	sub	sp, #84	; 0x54
    a222:	6800      	ldr	r0, [r0, #0]
    a224:	4dee      	ldr	r5, [pc, #952]	; (a5e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3c8>)
    a226:	05c0      	lsls	r0, r0, #23
    a228:	0dc0      	lsrs	r0, r0, #23
    a22a:	d00e      	beq.n	a24a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    a22c:	3810      	subs	r0, #16
    a22e:	b240      	sxtb	r0, r0
    a230:	2800      	cmp	r0, #0
    a232:	bfb8      	it	lt
    a234:	f000 000f 	andlt.w	r0, r0, #15
    a238:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a23c:	bfac      	ite	ge
    a23e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a242:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a246:	0940      	lsrs	r0, r0, #5
    a248:	d00d      	beq.n	a266 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    a24a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a24c:	f04f 0b00 	mov.w	fp, #0
    a250:	7800      	ldrb	r0, [r0, #0]
    a252:	2800      	cmp	r0, #0
    a254:	bf18      	it	ne
    a256:	2801      	cmpne	r0, #1
    a258:	d018      	beq.n	a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a25a:	f240 713b 	movw	r1, #1851	; 0x73b
    a25e:	f04f 0070 	mov.w	r0, #112	; 0x70
    a262:	f002 f879 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a266:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a26a:	f04f 0b01 	mov.w	fp, #1
    a26e:	2820      	cmp	r0, #32
    a270:	d007      	beq.n	a282 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    a272:	9816      	ldr	r0, [sp, #88]	; 0x58
    a274:	7800      	ldrb	r0, [r0, #0]
    a276:	b148      	cbz	r0, a28c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    a278:	f240 7137 	movw	r1, #1847	; 0x737
    a27c:	2070      	movs	r0, #112	; 0x70
    a27e:	f002 f86b 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a282:	f240 7134 	movw	r1, #1844	; 0x734
    a286:	2070      	movs	r0, #112	; 0x70
    a288:	f002 f866 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    a28c:	4cd5      	ldr	r4, [pc, #852]	; (a5e4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3cc>)
    a28e:	b124      	cbz	r4, a29a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    a290:	2100      	movs	r1, #0
    a292:	f240 703e 	movw	r0, #1854	; 0x73e
    a296:	f3af 8000 	nop.w
    a29a:	2000      	movs	r0, #0
    a29c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
    a2a0:	49d1      	ldr	r1, [pc, #836]	; (a5e8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d0>)
    a2a2:	ebca 00ca 	rsb	r0, sl, sl, lsl #3
    a2a6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    a2aa:	f04f 0901 	mov.w	r9, #1
    a2ae:	9000      	str	r0, [sp, #0]
    a2b0:	b124      	cbz	r4, a2bc <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    a2b2:	2100      	movs	r1, #0
    a2b4:	f240 7049 	movw	r0, #1865	; 0x749
    a2b8:	f3af 8000 	nop.w
    a2bc:	f1b9 0f00 	cmp.w	r9, #0
    a2c0:	d00a      	beq.n	a2d8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc0>
    a2c2:	bf00      	nop
    a2c4:	f895 6031 	ldrb.w	r6, [r5, #49]	; 0x31
    a2c8:	f04f 0800 	mov.w	r8, #0
    a2cc:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a2d0:	f1bb 0f00 	cmp.w	fp, #0
    a2d4:	d007      	beq.n	a2e6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xce>
    a2d6:	e038      	b.n	a34a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x132>
    a2d8:	48c4      	ldr	r0, [pc, #784]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a2da:	2800      	cmp	r0, #0
    a2dc:	bf18      	it	ne
    a2de:	f3af 8000 	nopne.w
    a2e2:	b662      	cpsie	i
    a2e4:	e7ee      	b.n	a2c4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xac>
    a2e6:	4637      	mov	r7, r6
    a2e8:	2001      	movs	r0, #1
    a2ea:	ea20 0607 	bic.w	r6, r0, r7
    a2ee:	48c0      	ldr	r0, [pc, #768]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a2f0:	2240      	movs	r2, #64	; 0x40
    a2f2:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    a2f6:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    a2fa:	f006 f9b8 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a2fe:	b124      	cbz	r4, a30a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xf2>
    a300:	2100      	movs	r1, #0
    a302:	f240 505e 	movw	r0, #1374	; 0x55e
    a306:	f3af 8000 	nop.w
    a30a:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    a30e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a312:	4429      	add	r1, r5
    a314:	4428      	add	r0, r5
    a316:	8c0a      	ldrh	r2, [r1, #32]
    a318:	8402      	strh	r2, [r0, #32]
    a31a:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a31e:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a322:	b124      	cbz	r4, a32e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x116>
    a324:	2100      	movs	r1, #0
    a326:	f240 5062 	movw	r0, #1378	; 0x562
    a32a:	f3af 8000 	nop.w
    a32e:	b124      	cbz	r4, a33a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x122>
    a330:	2100      	movs	r1, #0
    a332:	f240 7053 	movw	r0, #1875	; 0x753
    a336:	f3af 8000 	nop.w
    a33a:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a33e:	f88d 0008 	strb.w	r0, [sp, #8]
    a342:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a346:	2800      	cmp	r0, #0
    a348:	d1b2      	bne.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a34a:	b124      	cbz	r4, a356 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x13e>
    a34c:	2100      	movs	r1, #0
    a34e:	f240 705d 	movw	r0, #1885	; 0x75d
    a352:	f3af 8000 	nop.w
    a356:	a802      	add	r0, sp, #8
    a358:	f001 f8b8 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a35c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    a360:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
    a364:	4633      	mov	r3, r6
    a366:	aa09      	add	r2, sp, #36	; 0x24
    a368:	a80e      	add	r0, sp, #56	; 0x38
    a36a:	9916      	ldr	r1, [sp, #88]	; 0x58
    a36c:	f7ff fa02 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a370:	b124      	cbz	r4, a37c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x164>
    a372:	2100      	movs	r1, #0
    a374:	f240 7064 	movw	r0, #1892	; 0x764
    a378:	f3af 8000 	nop.w
    a37c:	4a9c      	ldr	r2, [pc, #624]	; (a5f0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d8>)
    a37e:	990e      	ldr	r1, [sp, #56]	; 0x38
    a380:	eb02 1786 	add.w	r7, r2, r6, lsl #6
    a384:	a809      	add	r0, sp, #36	; 0x24
    a386:	f817 201a 	ldrb.w	r2, [r7, sl, lsl #1]
    a38a:	2a01      	cmp	r2, #1
    a38c:	bf18      	it	ne
    a38e:	2a02      	cmpne	r2, #2
    a390:	d138      	bne.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a392:	9a09      	ldr	r2, [sp, #36]	; 0x24
    a394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    a396:	eba2 0201 	sub.w	r2, r2, r1
    a39a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    a39e:	eba3 0101 	sub.w	r1, r3, r1
    a3a2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a3a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a3aa:	2a02      	cmp	r2, #2
    a3ac:	d364      	bcc.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ae:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    a3b2:	bf98      	it	ls
    a3b4:	f5b1 0f00 	cmpls.w	r1, #8388608	; 0x800000
    a3b8:	d85e      	bhi.n	a478 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x260>
    a3ba:	f04f 0801 	mov.w	r8, #1
    a3be:	ab14      	add	r3, sp, #80	; 0x50
    a3c0:	aa13      	add	r2, sp, #76	; 0x4c
    a3c2:	4631      	mov	r1, r6
    a3c4:	f7fe fe96 	bl	90f4 <MPSL_IRQ_RADIO_Handler+0x428>
    a3c8:	2800      	cmp	r0, #0
    a3ca:	d05d      	beq.n	a488 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    a3cc:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
    a3d0:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    a3d4:	4633      	mov	r3, r6
    a3d6:	428a      	cmp	r2, r1
    a3d8:	d05a      	beq.n	a490 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x278>
    a3da:	2005      	movs	r0, #5
    a3dc:	f7fe fc96 	bl	8d0c <MPSL_IRQ_RADIO_Handler+0x40>
    a3e0:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    a3e4:	7048      	strb	r0, [r1, #1]
    a3e6:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    a3ea:	2820      	cmp	r0, #32
    a3ec:	bf1c      	itt	ne
    a3ee:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    a3f2:	f880 a001 	strbne.w	sl, [r0, #1]
    a3f6:	d057      	beq.n	a4a8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x290>
    a3f8:	4632      	mov	r2, r6
    a3fa:	4651      	mov	r1, sl
    a3fc:	f05f 0003 	movs.w	r0, #3
    a400:	f7ff fbcc 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a404:	b124      	cbz	r4, a410 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f8>
    a406:	2100      	movs	r1, #0
    a408:	f240 7069 	movw	r0, #1897	; 0x769
    a40c:	f3af 8000 	nop.w
    a410:	4878      	ldr	r0, [pc, #480]	; (a5f4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3dc>)
    a412:	2800      	cmp	r0, #0
    a414:	bf18      	it	ne
    a416:	f3af 8000 	nopne.w
    a41a:	f3ef 8910 	mrs	r9, PRIMASK
    a41e:	b672      	cpsid	i
    a420:	b124      	cbz	r4, a42c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x214>
    a422:	2100      	movs	r1, #0
    a424:	f240 706f 	movw	r0, #1903	; 0x76f
    a428:	f3af 8000 	nop.w
    a42c:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a430:	f88d 0008 	strb.w	r0, [sp, #8]
    a434:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a438:	2800      	cmp	r0, #0
    a43a:	f47f af39 	bne.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a43e:	b124      	cbz	r4, a44a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x232>
    a440:	2100      	movs	r1, #0
    a442:	f240 7077 	movw	r0, #1911	; 0x777
    a446:	f3af 8000 	nop.w
    a44a:	af09      	add	r7, sp, #36	; 0x24
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	e897 100e 	ldmia.w	r7, {r1, r2, r3, ip}
    a452:	f100 0708 	add.w	r7, r0, #8
    a456:	f1b8 0f00 	cmp.w	r8, #0
    a45a:	e887 100e 	stmia.w	r7, {r1, r2, r3, ip}
    a45e:	990d      	ldr	r1, [sp, #52]	; 0x34
    a460:	6181      	str	r1, [r0, #24]
    a462:	d051      	beq.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a464:	b124      	cbz	r4, a470 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    a466:	2100      	movs	r1, #0
    a468:	f240 7084 	movw	r0, #1924	; 0x784
    a46c:	f3af 8000 	nop.w
    a470:	f1bb 0f00 	cmp.w	fp, #0
    a474:	d139      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a476:	e01f      	b.n	a4b8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2a0>
    a478:	4632      	mov	r2, r6
    a47a:	4651      	mov	r1, sl
    a47c:	2004      	movs	r0, #4
    a47e:	f7ff fb8d 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a482:	f04f 0801 	mov.w	r8, #1
    a486:	e7bd      	b.n	a404 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1ec>
    a488:	4632      	mov	r2, r6
    a48a:	4651      	mov	r1, sl
    a48c:	2004      	movs	r0, #4
    a48e:	e7b7      	b.n	a400 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e8>
    a490:	2920      	cmp	r1, #32
    a492:	bf19      	ittee	ne
    a494:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    a498:	7840      	ldrbne	r0, [r0, #1]
    a49a:	eb06 0046 	addeq.w	r0, r6, r6, lsl #1
    a49e:	4428      	addeq	r0, r5
    a4a0:	bf08      	it	eq
    a4a2:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    a4a6:	e79b      	b.n	a3e0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1c8>
    a4a8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    a4ac:	4429      	add	r1, r5
    a4ae:	f881 a020 	strb.w	sl, [r1, #32]
    a4b2:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
    a4b6:	e79f      	b.n	a3f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1e0>
    a4b8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a4ba:	f010 0fff 	tst.w	r0, #255	; 0xff
    a4be:	d014      	beq.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c0:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    a4c4:	2820      	cmp	r0, #32
    a4c6:	d110      	bne.n	a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4c8:	b124      	cbz	r4, a4d4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2bc>
    a4ca:	2100      	movs	r1, #0
    a4cc:	f240 7089 	movw	r0, #1929	; 0x789
    a4d0:	f3af 8000 	nop.w
    a4d4:	4631      	mov	r1, r6
    a4d6:	2002      	movs	r0, #2
    a4d8:	f7ff fb92 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    a4dc:	9010      	str	r0, [sp, #64]	; 0x40
    a4de:	b920      	cbnz	r0, a4ea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d2>
    a4e0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4e2:	7800      	ldrb	r0, [r0, #0]
    a4e4:	b1e8      	cbz	r0, a522 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30a>
    a4e6:	2801      	cmp	r0, #1
    a4e8:	d02a      	beq.n	a540 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    a4ea:	b124      	cbz	r4, a4f6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    a4ec:	2100      	movs	r1, #0
    a4ee:	f240 70a6 	movw	r0, #1958	; 0x7a6
    a4f2:	f3af 8000 	nop.w
    a4f6:	20ff      	movs	r0, #255	; 0xff
    a4f8:	f1bb 0f00 	cmp.w	fp, #0
    a4fc:	bf18      	it	ne
    a4fe:	f885 0029 	strbne.w	r0, [r5, #41]	; 0x29
    a502:	d026      	beq.n	a552 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x33a>
    a504:	f04f 0801 	mov.w	r8, #1
    a508:	b124      	cbz	r4, a514 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2fc>
    a50a:	2100      	movs	r1, #0
    a50c:	f240 70b7 	movw	r0, #1975	; 0x7b7
    a510:	f3af 8000 	nop.w
    a514:	9810      	ldr	r0, [sp, #64]	; 0x40
    a516:	4e38      	ldr	r6, [pc, #224]	; (a5f8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3e0>)
    a518:	2802      	cmp	r0, #2
    a51a:	d023      	beq.n	a564 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x34c>
    a51c:	2801      	cmp	r0, #1
    a51e:	d029      	beq.n	a574 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35c>
    a520:	e02d      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a522:	b124      	cbz	r4, a52e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x316>
    a524:	2100      	movs	r1, #0
    a526:	f240 7091 	movw	r0, #1937	; 0x791
    a52a:	f3af 8000 	nop.w
    a52e:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a532:	4651      	mov	r1, sl
    a534:	2004      	movs	r0, #4
    a536:	f7ff fb31 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a53a:	f04f 0801 	mov.w	r8, #1
    a53e:	e7e3      	b.n	a508 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2f0>
    a540:	2c00      	cmp	r4, #0
    a542:	f43f aeb5 	beq.w	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a546:	2100      	movs	r1, #0
    a548:	f240 709c 	movw	r0, #1948	; 0x79c
    a54c:	f3af 8000 	nop.w
    a550:	e6ae      	b.n	a2b0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x98>
    a552:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    a556:	2101      	movs	r1, #1
    a558:	4391      	bics	r1, r2
    a55a:	f885 1031 	strb.w	r1, [r5, #49]	; 0x31
    a55e:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    a562:	e7cf      	b.n	a504 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ec>
    a564:	68a8      	ldr	r0, [r5, #8]
    a566:	990e      	ldr	r1, [sp, #56]	; 0x38
    a568:	1a40      	subs	r0, r0, r1
    a56a:	f005 feed 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a56e:	6871      	ldr	r1, [r6, #4]
    a570:	b921      	cbnz	r1, a57c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x364>
    a572:	e004      	b.n	a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a574:	6871      	ldr	r1, [r6, #4]
    a576:	f04f 30ff 	mov.w	r0, #4294967295
    a57a:	b101      	cbz	r1, a57e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x366>
    a57c:	4788      	blx	r1
    a57e:	f1b9 0f00 	cmp.w	r9, #0
    a582:	d024      	beq.n	a5ce <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3b6>
    a584:	b124      	cbz	r4, a590 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>
    a586:	2100      	movs	r1, #0
    a588:	f240 70c7 	movw	r0, #1991	; 0x7c7
    a58c:	f3af 8000 	nop.w
    a590:	f1b8 0f00 	cmp.w	r8, #0
    a594:	d011      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a596:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a59a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    a59e:	4428      	add	r0, r5
    a5a0:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    a5a4:	2820      	cmp	r0, #32
    a5a6:	d008      	beq.n	a5ba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3a2>
    a5a8:	b124      	cbz	r4, a5b4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x39c>
    a5aa:	2100      	movs	r1, #0
    a5ac:	f240 70ce 	movw	r0, #1998	; 0x7ce
    a5b0:	f3af 8000 	nop.w
    a5b4:	7870      	ldrb	r0, [r6, #1]
    a5b6:	f001 ffa3 	bl	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    a5ba:	b124      	cbz	r4, a5c6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3ae>
    a5bc:	2100      	movs	r1, #0
    a5be:	f240 70d3 	movw	r0, #2003	; 0x7d3
    a5c2:	f3af 8000 	nop.w
    a5c6:	b017      	add	sp, #92	; 0x5c
    a5c8:	4640      	mov	r0, r8
    a5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a5ce:	4807      	ldr	r0, [pc, #28]	; (a5ec <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x3d4>)
    a5d0:	2800      	cmp	r0, #0
    a5d2:	bf18      	it	ne
    a5d4:	f3af 8000 	nopne.w
    a5d8:	b662      	cpsie	i
    a5da:	e7d3      	b.n	a584 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36c>
    a5dc:	e000ed04 	.word	0xe000ed04
    a5e0:	2000126c 	.word	0x2000126c
    a5e4:	00000000 	.word	0x00000000
    a5e8:	20000e6c 	.word	0x20000e6c
    a5ec:	00000000 	.word	0x00000000
    a5f0:	200011ec 	.word	0x200011ec
    a5f4:	00000000 	.word	0x00000000
    a5f8:	200002d0 	.word	0x200002d0

0000a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    a5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a600:	4606      	mov	r6, r0
    a602:	7800      	ldrb	r0, [r0, #0]
    a604:	b08d      	sub	sp, #52	; 0x34
    a606:	b118      	cbz	r0, a610 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x14>
    a608:	b00d      	add	sp, #52	; 0x34
    a60a:	2000      	movs	r0, #0
    a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a610:	488c      	ldr	r0, [pc, #560]	; (a844 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x248>)
    a612:	6800      	ldr	r0, [r0, #0]
    a614:	05c0      	lsls	r0, r0, #23
    a616:	0dc0      	lsrs	r0, r0, #23
    a618:	d00e      	beq.n	a638 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x3c>
    a61a:	3810      	subs	r0, #16
    a61c:	b240      	sxtb	r0, r0
    a61e:	2800      	cmp	r0, #0
    a620:	bfb8      	it	lt
    a622:	f000 000f 	andlt.w	r0, r0, #15
    a626:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    a62a:	bfac      	ite	ge
    a62c:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    a630:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    a634:	0940      	lsrs	r0, r0, #5
    a636:	d0e7      	beq.n	a608 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xc>
    a638:	4d83      	ldr	r5, [pc, #524]	; (a848 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24c>)
    a63a:	4c84      	ldr	r4, [pc, #528]	; (a84c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x250>)
    a63c:	f04f 0b01 	mov.w	fp, #1
    a640:	2700      	movs	r7, #0
    a642:	b125      	cbz	r5, a64e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x52>
    a644:	2100      	movs	r1, #0
    a646:	f240 50e5 	movw	r0, #1509	; 0x5e5
    a64a:	f3af 8000 	nop.w
    a64e:	f894 a031 	ldrb.w	sl, [r4, #49]	; 0x31
    a652:	f884 7029 	strb.w	r7, [r4, #41]	; 0x29
    a656:	f04f 0900 	mov.w	r9, #0
    a65a:	b125      	cbz	r5, a666 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x6a>
    a65c:	2100      	movs	r1, #0
    a65e:	f240 50ea 	movw	r0, #1514	; 0x5ea
    a662:	f3af 8000 	nop.w
    a666:	487a      	ldr	r0, [pc, #488]	; (a850 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>)
    a668:	ea2b 080a 	bic.w	r8, fp, sl
    a66c:	eb00 118a 	add.w	r1, r0, sl, lsl #6
    a670:	eb00 1088 	add.w	r0, r0, r8, lsl #6
    a674:	2240      	movs	r2, #64	; 0x40
    a676:	f005 fffa 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a67a:	b125      	cbz	r5, a686 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x8a>
    a67c:	2100      	movs	r1, #0
    a67e:	f240 505e 	movw	r0, #1374	; 0x55e
    a682:	f3af 8000 	nop.w
    a686:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a68a:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    a68e:	4421      	add	r1, r4
    a690:	4420      	add	r0, r4
    a692:	8c0a      	ldrh	r2, [r1, #32]
    a694:	8402      	strh	r2, [r0, #32]
    a696:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a69a:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a69e:	b125      	cbz	r5, a6aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xae>
    a6a0:	2100      	movs	r1, #0
    a6a2:	f240 5062 	movw	r0, #1378	; 0x562
    a6a6:	f3af 8000 	nop.w
    a6aa:	b125      	cbz	r5, a6b6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xba>
    a6ac:	2100      	movs	r1, #0
    a6ae:	f240 50ef 	movw	r0, #1519	; 0x5ef
    a6b2:	f3af 8000 	nop.w
    a6b6:	a808      	add	r0, sp, #32
    a6b8:	f000 ff08 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    a6bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    a6c0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    a6c4:	4643      	mov	r3, r8
    a6c6:	466a      	mov	r2, sp
    a6c8:	4631      	mov	r1, r6
    a6ca:	a80a      	add	r0, sp, #40	; 0x28
    a6cc:	f7ff f852 	bl	9774 <MPSL_IRQ_RADIO_Handler+0xaa8>
    a6d0:	b125      	cbz	r5, a6dc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe0>
    a6d2:	2100      	movs	r1, #0
    a6d4:	f240 50f5 	movw	r0, #1525	; 0x5f5
    a6d8:	f3af 8000 	nop.w
    a6dc:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a6e0:	2820      	cmp	r0, #32
    a6e2:	d01a      	beq.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6e4:	68e0      	ldr	r0, [r4, #12]
    a6e6:	9900      	ldr	r1, [sp, #0]
    a6e8:	1a09      	subs	r1, r1, r0
    a6ea:	0209      	lsls	r1, r1, #8
    a6ec:	17ca      	asrs	r2, r1, #31
    a6ee:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    a6f2:	1209      	asrs	r1, r1, #8
    a6f4:	d511      	bpl.n	a71a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x11e>
    a6f6:	9900      	ldr	r1, [sp, #0]
    a6f8:	4281      	cmp	r1, r0
    a6fa:	d902      	bls.n	a702 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x106>
    a6fc:	9902      	ldr	r1, [sp, #8]
    a6fe:	1c49      	adds	r1, r1, #1
    a700:	9102      	str	r1, [sp, #8]
    a702:	e9dd 2100 	ldrd	r2, r1, [sp]
    a706:	1a89      	subs	r1, r1, r2
    a708:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    a70c:	4408      	add	r0, r1
    a70e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a712:	e9cd 2000 	strd	r2, r0, [sp]
    a716:	f04f 0901 	mov.w	r9, #1
    a71a:	b125      	cbz	r5, a726 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12a>
    a71c:	2100      	movs	r1, #0
    a71e:	f240 50ff 	movw	r0, #1535	; 0x5ff
    a722:	f3af 8000 	nop.w
    a726:	9900      	ldr	r1, [sp, #0]
    a728:	980a      	ldr	r0, [sp, #40]	; 0x28
    a72a:	9a01      	ldr	r2, [sp, #4]
    a72c:	1a09      	subs	r1, r1, r0
    a72e:	1a10      	subs	r0, r2, r0
    a730:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    a734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a738:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    a73c:	bf98      	it	ls
    a73e:	f5b0 0f00 	cmpls.w	r0, #8388608	; 0x800000
    a742:	d809      	bhi.n	a758 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x15c>
    a744:	4643      	mov	r3, r8
    a746:	4669      	mov	r1, sp
    a748:	4842      	ldr	r0, [pc, #264]	; (a854 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x258>)
    a74a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a74c:	f7fe fb1a 	bl	8d84 <MPSL_IRQ_RADIO_Handler+0xb8>
    a750:	ea59 0000 	orrs.w	r0, r9, r0
    a754:	d129      	bne.n	a7aa <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1ae>
    a756:	e042      	b.n	a7de <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e2>
    a758:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a75a:	f8bd a00e 	ldrh.w	sl, [sp, #14]
    a75e:	9002      	str	r0, [sp, #8]
    a760:	aa09      	add	r2, sp, #36	; 0x24
    a762:	a907      	add	r1, sp, #28
    a764:	4650      	mov	r0, sl
    a766:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
    a76a:	f000 fd3f 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    a76e:	f001 fa7b 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    a772:	f000 fd1f 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    a776:	4681      	mov	r9, r0
    a778:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    a77c:	2820      	cmp	r0, #32
    a77e:	d03b      	beq.n	a7f8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1fc>
    a780:	68e0      	ldr	r0, [r4, #12]
    a782:	1d40      	adds	r0, r0, #5
    a784:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a788:	9900      	ldr	r1, [sp, #0]
    a78a:	4281      	cmp	r1, r0
    a78c:	d902      	bls.n	a794 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x198>
    a78e:	9902      	ldr	r1, [sp, #8]
    a790:	1c49      	adds	r1, r1, #1
    a792:	9102      	str	r1, [sp, #8]
    a794:	e9dd 2100 	ldrd	r2, r1, [sp]
    a798:	1a89      	subs	r1, r1, r2
    a79a:	9000      	str	r0, [sp, #0]
    a79c:	4408      	add	r0, r1
    a79e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    a7a2:	9001      	str	r0, [sp, #4]
    a7a4:	201f      	movs	r0, #31
    a7a6:	f88d 000c 	strb.w	r0, [sp, #12]
    a7aa:	9800      	ldr	r0, [sp, #0]
    a7ac:	f005 fdcc 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    a7b0:	1c41      	adds	r1, r0, #1
    a7b2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    a7b6:	f89d 200c 	ldrb.w	r2, [sp, #12]
    a7ba:	4410      	add	r0, r2
    a7bc:	4408      	add	r0, r1
    a7be:	e9c6 0704 	strd	r0, r7, [r6, #16]
    a7c2:	b125      	cbz	r5, a7ce <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1d2>
    a7c4:	2100      	movs	r1, #0
    a7c6:	f240 601a 	movw	r0, #1562	; 0x61a
    a7ca:	f3af 8000 	nop.w
    a7ce:	e9d6 1004 	ldrd	r1, r0, [r6, #16]
    a7d2:	4a21      	ldr	r2, [pc, #132]	; (a858 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25c>)
    a7d4:	9b02      	ldr	r3, [sp, #8]
    a7d6:	fbe3 1002 	umlal	r1, r0, r3, r2
    a7da:	e9c6 1004 	strd	r1, r0, [r6, #16]
    a7de:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    a7e2:	f88d 0014 	strb.w	r0, [sp, #20]
    a7e6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    a7ea:	2800      	cmp	r0, #0
    a7ec:	f47f af29 	bne.w	a642 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x46>
    a7f0:	b00d      	add	sp, #52	; 0x34
    a7f2:	2001      	movs	r0, #1
    a7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a7f8:	f108 0809 	add.w	r8, r8, #9
    a7fc:	f1ba 0f00 	cmp.w	sl, #0
    a800:	d016      	beq.n	a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a802:	f001 fd31 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    a806:	b998      	cbnz	r0, a830 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x234>
    a808:	f001 fc06 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    a80c:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    a810:	bf08      	it	eq
    a812:	200d      	moveq	r0, #13
    a814:	d00b      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a816:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    a81a:	3856      	subs	r0, #86	; 0x56
    a81c:	bf08      	it	eq
    a81e:	201c      	moveq	r0, #28
    a820:	d005      	beq.n	a82e <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x232>
    a822:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    a826:	389f      	subs	r0, #159	; 0x9f
    a828:	bf14      	ite	ne
    a82a:	4638      	movne	r0, r7
    a82c:	2032      	moveq	r0, #50	; 0x32
    a82e:	4480      	add	r8, r0
    a830:	9807      	ldr	r0, [sp, #28]
    a832:	4581      	cmp	r9, r0
    a834:	bf84      	itt	hi
    a836:	eba9 0000 	subhi.w	r0, r9, r0
    a83a:	4480      	addhi	r8, r0
    a83c:	f028 407f 	bic.w	r0, r8, #4278190080	; 0xff000000
    a840:	e7a2      	b.n	a788 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x18c>
    a842:	0000      	.short	0x0000
    a844:	e000ed04 	.word	0xe000ed04
    a848:	00000000 	.word	0x00000000
    a84c:	2000126c 	.word	0x2000126c
    a850:	200011ec 	.word	0x200011ec
    a854:	0f424000 	.word	0x0f424000
    a858:	1e848000 	.word	0x1e848000

0000a85c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    a85c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a860:	4d92      	ldr	r5, [pc, #584]	; (aaac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x250>)
    a862:	b08c      	sub	sp, #48	; 0x30
    a864:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    a868:	2000      	movs	r0, #0
    a86a:	9008      	str	r0, [sp, #32]
    a86c:	9006      	str	r0, [sp, #24]
    a86e:	2001      	movs	r0, #1
    a870:	4c8f      	ldr	r4, [pc, #572]	; (aab0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x254>)
    a872:	f1a5 0980 	sub.w	r9, r5, #128	; 0x80
    a876:	f04f 0800 	mov.w	r8, #0
    a87a:	4607      	mov	r7, r0
    a87c:	9007      	str	r0, [sp, #28]
    a87e:	b124      	cbz	r4, a88a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2e>
    a880:	2100      	movs	r1, #0
    a882:	f240 70e4 	movw	r0, #2020	; 0x7e4
    a886:	f3af 8000 	nop.w
    a88a:	9807      	ldr	r0, [sp, #28]
    a88c:	2800      	cmp	r0, #0
    a88e:	d03c      	beq.n	a90a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xae>
    a890:	f885 8029 	strb.w	r8, [r5, #41]	; 0x29
    a894:	b124      	cbz	r4, a8a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    a896:	2100      	movs	r1, #0
    a898:	f240 70e9 	movw	r0, #2025	; 0x7e9
    a89c:	f3af 8000 	nop.w
    a8a0:	f895 a031 	ldrb.w	sl, [r5, #49]	; 0x31
    a8a4:	2240      	movs	r2, #64	; 0x40
    a8a6:	ea27 060a 	bic.w	r6, r7, sl
    a8aa:	eb09 1086 	add.w	r0, r9, r6, lsl #6
    a8ae:	eb09 118a 	add.w	r1, r9, sl, lsl #6
    a8b2:	4683      	mov	fp, r0
    a8b4:	f005 fedb 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    a8b8:	b124      	cbz	r4, a8c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    a8ba:	2100      	movs	r1, #0
    a8bc:	f240 505e 	movw	r0, #1374	; 0x55e
    a8c0:	f3af 8000 	nop.w
    a8c4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    a8c8:	eb0a 014a 	add.w	r1, sl, sl, lsl #1
    a8cc:	4428      	add	r0, r5
    a8ce:	4429      	add	r1, r5
    a8d0:	9000      	str	r0, [sp, #0]
    a8d2:	8c0a      	ldrh	r2, [r1, #32]
    a8d4:	8402      	strh	r2, [r0, #32]
    a8d6:	f891 1022 	ldrb.w	r1, [r1, #34]	; 0x22
    a8da:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    a8de:	b124      	cbz	r4, a8ea <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x8e>
    a8e0:	2100      	movs	r1, #0
    a8e2:	f240 5062 	movw	r0, #1378	; 0x562
    a8e6:	f3af 8000 	nop.w
    a8ea:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a8ee:	f88d 0008 	strb.w	r0, [sp, #8]
    a8f2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a8f6:	b178      	cbz	r0, a918 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    a8f8:	2c00      	cmp	r4, #0
    a8fa:	bf1c      	itt	ne
    a8fc:	2100      	movne	r1, #0
    a8fe:	f240 70ef 	movwne	r0, #2031	; 0x7ef
    a902:	d0bc      	beq.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a904:	f3af 8000 	nop.w
    a908:	e7b9      	b.n	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a90a:	486a      	ldr	r0, [pc, #424]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    a90c:	2800      	cmp	r0, #0
    a90e:	bf18      	it	ne
    a910:	f3af 8000 	nopne.w
    a914:	b662      	cpsie	i
    a916:	e7bb      	b.n	a890 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    a918:	b124      	cbz	r4, a924 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xc8>
    a91a:	2100      	movs	r1, #0
    a91c:	f240 70f3 	movw	r0, #2035	; 0x7f3
    a920:	f3af 8000 	nop.w
    a924:	980c      	ldr	r0, [sp, #48]	; 0x30
    a926:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    a92a:	2803      	cmp	r0, #3
    a92c:	d17e      	bne.n	aa2c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d0>
    a92e:	9a00      	ldr	r2, [sp, #0]
    a930:	990c      	ldr	r1, [sp, #48]	; 0x30
    a932:	f892 0020 	ldrb.w	r0, [r2, #32]
    a936:	4288      	cmp	r0, r1
    a938:	bf14      	ite	ne
    a93a:	f04f 0a00 	movne.w	sl, #0
    a93e:	f04f 0a01 	moveq.w	sl, #1
    a942:	f102 0c20 	add.w	ip, r2, #32
    a946:	4683      	mov	fp, r0
    a948:	2220      	movs	r2, #32
    a94a:	eb09 1386 	add.w	r3, r9, r6, lsl #6
    a94e:	e003      	b.n	a958 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xfc>
    a950:	4602      	mov	r2, r0
    a952:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    a956:	7840      	ldrb	r0, [r0, #1]
    a958:	4288      	cmp	r0, r1
    a95a:	d002      	beq.n	a962 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x106>
    a95c:	2820      	cmp	r0, #32
    a95e:	d00a      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a960:	e7f6      	b.n	a950 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf4>
    a962:	2820      	cmp	r0, #32
    a964:	d007      	beq.n	a976 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11a>
    a966:	4583      	cmp	fp, r0
    a968:	d107      	bne.n	a97a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x11e>
    a96a:	eb03 004b 	add.w	r0, r3, fp, lsl #1
    a96e:	7840      	ldrb	r0, [r0, #1]
    a970:	f88c 0000 	strb.w	r0, [ip]
    a974:	e007      	b.n	a986 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x12a>
    a976:	4640      	mov	r0, r8
    a978:	e00c      	b.n	a994 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x138>
    a97a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    a97e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    a982:	7840      	ldrb	r0, [r0, #1]
    a984:	7048      	strb	r0, [r1, #1]
    a986:	b124      	cbz	r4, a992 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x136>
    a988:	2100      	movs	r1, #0
    a98a:	f240 40c9 	movw	r0, #1225	; 0x4c9
    a98e:	f3af 8000 	nop.w
    a992:	4638      	mov	r0, r7
    a994:	46c3      	mov	fp, r8
    a996:	ea10 0f0a 	tst.w	r0, sl
    a99a:	bf18      	it	ne
    a99c:	46bb      	movne	fp, r7
    a99e:	2800      	cmp	r0, #0
    a9a0:	d04e      	beq.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    a9a2:	b124      	cbz	r4, a9ae <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x152>
    a9a4:	2100      	movs	r1, #0
    a9a6:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    a9aa:	f3af 8000 	nop.w
    a9ae:	4632      	mov	r2, r6
    a9b0:	2001      	movs	r0, #1
    a9b2:	990c      	ldr	r1, [sp, #48]	; 0x30
    a9b4:	f7ff f8f2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    a9b8:	b124      	cbz	r4, a9c4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x168>
    a9ba:	2100      	movs	r1, #0
    a9bc:	f640 0001 	movw	r0, #2049	; 0x801
    a9c0:	f3af 8000 	nop.w
    a9c4:	483c      	ldr	r0, [pc, #240]	; (aab8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x25c>)
    a9c6:	2800      	cmp	r0, #0
    a9c8:	bf18      	it	ne
    a9ca:	f3af 8000 	nopne.w
    a9ce:	f3ef 8010 	mrs	r0, PRIMASK
    a9d2:	b672      	cpsid	i
    a9d4:	9007      	str	r0, [sp, #28]
    a9d6:	b124      	cbz	r4, a9e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x186>
    a9d8:	2100      	movs	r1, #0
    a9da:	f640 0006 	movw	r0, #2054	; 0x806
    a9de:	f3af 8000 	nop.w
    a9e2:	f895 0029 	ldrb.w	r0, [r5, #41]	; 0x29
    a9e6:	f88d 0008 	strb.w	r0, [sp, #8]
    a9ea:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a9ee:	b138      	cbz	r0, aa00 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1a4>
    a9f0:	2c00      	cmp	r4, #0
    a9f2:	bf1c      	itt	ne
    a9f4:	2100      	movne	r1, #0
    a9f6:	f640 000a 	movwne	r0, #2058	; 0x80a
    a9fa:	f43f af40 	beq.w	a87e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22>
    a9fe:	e781      	b.n	a904 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa8>
    aa00:	f1bb 0f00 	cmp.w	fp, #0
    aa04:	d009      	beq.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa06:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
    aa0a:	2820      	cmp	r0, #32
    aa0c:	d105      	bne.n	aa1a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1be>
    aa0e:	4631      	mov	r1, r6
    aa10:	2002      	movs	r0, #2
    aa12:	f7ff f8f5 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    aa16:	9006      	str	r0, [sp, #24]
    aa18:	b1f8      	cbz	r0, aa5a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1fe>
    aa1a:	b124      	cbz	r4, aa26 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ca>
    aa1c:	2100      	movs	r1, #0
    aa1e:	f640 001e 	movw	r0, #2078	; 0x81e
    aa22:	f3af 8000 	nop.w
    aa26:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
    aa2a:	e000      	b.n	aa2e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    aa2c:	e008      	b.n	aa40 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e4>
    aa2e:	ea27 0000 	bic.w	r0, r7, r0
    aa32:	f885 0031 	strb.w	r0, [r5, #49]	; 0x31
    aa36:	20ff      	movs	r0, #255	; 0xff
    aa38:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
    aa3c:	2001      	movs	r0, #1
    aa3e:	9008      	str	r0, [sp, #32]
    aa40:	b124      	cbz	r4, aa4c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f0>
    aa42:	2100      	movs	r1, #0
    aa44:	f640 0027 	movw	r0, #2087	; 0x827
    aa48:	f3af 8000 	nop.w
    aa4c:	9806      	ldr	r0, [sp, #24]
    aa4e:	4e1b      	ldr	r6, [pc, #108]	; (aabc <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x260>)
    aa50:	2802      	cmp	r0, #2
    aa52:	d009      	beq.n	aa68 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20c>
    aa54:	2801      	cmp	r0, #1
    aa56:	d010      	beq.n	aa7a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21e>
    aa58:	e014      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5a:	b19c      	cbz	r4, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa5c:	2100      	movs	r1, #0
    aa5e:	f640 0019 	movw	r0, #2073	; 0x819
    aa62:	f3af 8000 	nop.w
    aa66:	e7ec      	b.n	aa42 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    aa68:	f000 fd2a 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    aa6c:	68a9      	ldr	r1, [r5, #8]
    aa6e:	1a08      	subs	r0, r1, r0
    aa70:	f005 fc6a 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aa74:	6871      	ldr	r1, [r6, #4]
    aa76:	b921      	cbnz	r1, aa82 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x226>
    aa78:	e004      	b.n	aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa7a:	6871      	ldr	r1, [r6, #4]
    aa7c:	f04f 30ff 	mov.w	r0, #4294967295
    aa80:	b101      	cbz	r1, aa84 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>
    aa82:	4788      	blx	r1
    aa84:	9807      	ldr	r0, [sp, #28]
    aa86:	b148      	cbz	r0, aa9c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x240>
    aa88:	b124      	cbz	r4, aa94 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x238>
    aa8a:	2100      	movs	r1, #0
    aa8c:	f640 003c 	movw	r0, #2108	; 0x83c
    aa90:	f3af 8000 	nop.w
    aa94:	9808      	ldr	r0, [sp, #32]
    aa96:	b00d      	add	sp, #52	; 0x34
    aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aa9c:	4805      	ldr	r0, [pc, #20]	; (aab4 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x258>)
    aa9e:	2800      	cmp	r0, #0
    aaa0:	bf18      	it	ne
    aaa2:	f3af 8000 	nopne.w
    aaa6:	b662      	cpsie	i
    aaa8:	e7ee      	b.n	aa88 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>
    aaaa:	0000      	.short	0x0000
    aaac:	2000126c 	.word	0x2000126c
	...
    aabc:	200002d0 	.word	0x200002d0

0000aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    aac0:	b510      	push	{r4, lr}
    aac2:	2820      	cmp	r0, #32
    aac4:	d211      	bcs.n	aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aac6:	490e      	ldr	r1, [pc, #56]	; (ab00 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    aac8:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aacc:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    aad0:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    aad4:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    aad8:	b13b      	cbz	r3, aaea <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    aada:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    aade:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    aae2:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    aae6:	2a01      	cmp	r2, #1
    aae8:	d001      	beq.n	aaee <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    aaea:	2000      	movs	r0, #0
    aaec:	bd10      	pop	{r4, pc}
    aaee:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    aaf2:	4601      	mov	r1, r0
    aaf4:	2000      	movs	r0, #0
    aaf6:	f7ff f851 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    aafa:	2001      	movs	r0, #1
    aafc:	bd10      	pop	{r4, pc}
    aafe:	0000      	.short	0x0000
    ab00:	2000126c 	.word	0x2000126c

0000ab04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    ab04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab08:	4e86      	ldr	r6, [pc, #536]	; (ad24 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x220>)
    ab0a:	4680      	mov	r8, r0
    ab0c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
    ab10:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    ab14:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    ab18:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    ab1c:	2800      	cmp	r0, #0
    ab1e:	d071      	beq.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ab20:	f896 9031 	ldrb.w	r9, [r6, #49]	; 0x31
    ab24:	4d80      	ldr	r5, [pc, #512]	; (ad28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x224>)
    ab26:	b125      	cbz	r5, ab32 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    ab28:	2100      	movs	r1, #0
    ab2a:	f640 30b9 	movw	r0, #3001	; 0xbb9
    ab2e:	f3af 8000 	nop.w
    ab32:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    ab36:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab3a:	2801      	cmp	r0, #1
    ab3c:	d018      	beq.n	ab70 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    ab3e:	b2c0      	uxtb	r0, r0
    ab40:	2804      	cmp	r0, #4
    ab42:	bf1c      	itt	ne
    ab44:	2805      	cmpne	r0, #5
    ab46:	2806      	cmpne	r0, #6
    ab48:	d061      	beq.n	ac0e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x10a>
    ab4a:	b12d      	cbz	r5, ab58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    ab4c:	f04f 0100 	mov.w	r1, #0
    ab50:	f640 30c5 	movw	r0, #3013	; 0xbc5
    ab54:	f3af 8000 	nop.w
    ab58:	f005 fd2c 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    ab5c:	b125      	cbz	r5, ab68 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    ab5e:	2100      	movs	r1, #0
    ab60:	f640 30c9 	movw	r0, #3017	; 0xbc9
    ab64:	f3af 8000 	nop.w
    ab68:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    ab6c:	2801      	cmp	r0, #1
    ab6e:	d1e6      	bne.n	ab3e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    ab70:	2401      	movs	r4, #1
    ab72:	b125      	cbz	r5, ab7e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    ab74:	2100      	movs	r1, #0
    ab76:	f44f 603d 	mov.w	r0, #3024	; 0xbd0
    ab7a:	f3af 8000 	nop.w
    ab7e:	2c00      	cmp	r4, #0
    ab80:	d04b      	beq.n	ac1a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x116>
    ab82:	2000      	movs	r0, #0
    ab84:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    ab88:	b125      	cbz	r5, ab94 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    ab8a:	2100      	movs	r1, #0
    ab8c:	f640 30d5 	movw	r0, #3029	; 0xbd5
    ab90:	f3af 8000 	nop.w
    ab94:	f896 b031 	ldrb.w	fp, [r6, #49]	; 0x31
    ab98:	2001      	movs	r0, #1
    ab9a:	ea20 090b 	bic.w	r9, r0, fp
    ab9e:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    aba2:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    aba6:	2240      	movs	r2, #64	; 0x40
    aba8:	f005 fd61 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    abac:	b125      	cbz	r5, abb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    abae:	2100      	movs	r1, #0
    abb0:	f240 505e 	movw	r0, #1374	; 0x55e
    abb4:	f3af 8000 	nop.w
    abb8:	eb09 0049 	add.w	r0, r9, r9, lsl #1
    abbc:	eb00 0a06 	add.w	sl, r0, r6
    abc0:	eb0b 004b 	add.w	r0, fp, fp, lsl #1
    abc4:	4430      	add	r0, r6
    abc6:	8c01      	ldrh	r1, [r0, #32]
    abc8:	f8aa 1020 	strh.w	r1, [sl, #32]
    abcc:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    abd0:	f88a 0022 	strb.w	r0, [sl, #34]	; 0x22
    abd4:	b125      	cbz	r5, abe0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xdc>
    abd6:	2100      	movs	r1, #0
    abd8:	f240 5062 	movw	r0, #1378	; 0x562
    abdc:	f3af 8000 	nop.w
    abe0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    abe4:	f88d 0000 	strb.w	r0, [sp]
    abe8:	f89d 0000 	ldrb.w	r0, [sp]
    abec:	b1e0      	cbz	r0, ac28 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x124>
    abee:	2d00      	cmp	r5, #0
    abf0:	bf1c      	itt	ne
    abf2:	2100      	movne	r1, #0
    abf4:	f640 30db 	movwne	r0, #3035	; 0xbdb
    abf8:	d0bb      	beq.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    abfa:	bf00      	nop
    abfc:	f3af 8000 	nop.w
    ac00:	e7b7      	b.n	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    ac02:	e7ff      	b.n	ac04 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x100>
    ac04:	f44f 613b 	mov.w	r1, #2992	; 0xbb0
    ac08:	2070      	movs	r0, #112	; 0x70
    ac0a:	f001 fba5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ac0e:	464a      	mov	r2, r9
    ac10:	4641      	mov	r1, r8
    ac12:	2001      	movs	r0, #1
    ac14:	f7fe ffc2 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ac18:	e7a0      	b.n	ab5c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    ac1a:	4844      	ldr	r0, [pc, #272]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ac1c:	2800      	cmp	r0, #0
    ac1e:	bf18      	it	ne
    ac20:	f3af 8000 	nopne.w
    ac24:	b662      	cpsie	i
    ac26:	e7ac      	b.n	ab82 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    ac28:	b125      	cbz	r5, ac34 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x130>
    ac2a:	2100      	movs	r1, #0
    ac2c:	f640 30df 	movw	r0, #3039	; 0xbdf
    ac30:	f3af 8000 	nop.w
    ac34:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
    ac38:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    ac3c:	4640      	mov	r0, r8
    ac3e:	461c      	mov	r4, r3
    ac40:	f04f 0b20 	mov.w	fp, #32
    ac44:	eb07 1289 	add.w	r2, r7, r9, lsl #6
    ac48:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    ac4c:	e004      	b.n	ac58 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x154>
    ac4e:	46a3      	mov	fp, r4
    ac50:	eb02 0c4b 	add.w	ip, r2, fp, lsl #1
    ac54:	f89c 4001 	ldrb.w	r4, [ip, #1]
    ac58:	4284      	cmp	r4, r0
    ac5a:	d002      	beq.n	ac62 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15e>
    ac5c:	2c20      	cmp	r4, #32
    ac5e:	d02b      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac60:	e7f5      	b.n	ac4e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x14a>
    ac62:	2c20      	cmp	r4, #32
    ac64:	d028      	beq.n	acb8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b4>
    ac66:	42a3      	cmp	r3, r4
    ac68:	d104      	bne.n	ac74 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x170>
    ac6a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    ac6e:	7840      	ldrb	r0, [r0, #1]
    ac70:	7008      	strb	r0, [r1, #0]
    ac72:	e005      	b.n	ac80 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x17c>
    ac74:	eb02 0044 	add.w	r0, r2, r4, lsl #1
    ac78:	eb02 014b 	add.w	r1, r2, fp, lsl #1
    ac7c:	7840      	ldrb	r0, [r0, #1]
    ac7e:	7048      	strb	r0, [r1, #1]
    ac80:	f1ba 0f00 	cmp.w	sl, #0
    ac84:	d011      	beq.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac86:	b125      	cbz	r5, ac92 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18e>
    ac88:	2100      	movs	r1, #0
    ac8a:	f240 40c1 	movw	r0, #1217	; 0x4c1
    ac8e:	f3af 8000 	nop.w
    ac92:	f89a 0000 	ldrb.w	r0, [sl]
    ac96:	42a0      	cmp	r0, r4
    ac98:	d107      	bne.n	acaa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a6>
    ac9a:	b125      	cbz	r5, aca6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a2>
    ac9c:	2100      	movs	r1, #0
    ac9e:	f240 40c4 	movw	r0, #1220	; 0x4c4
    aca2:	f3af 8000 	nop.w
    aca6:	f88a b000 	strb.w	fp, [sl]
    acaa:	b15d      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acac:	2100      	movs	r1, #0
    acae:	f240 40c9 	movw	r0, #1225	; 0x4c9
    acb2:	f3af 8000 	nop.w
    acb6:	e000      	b.n	acba <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1b6>
    acb8:	b125      	cbz	r5, acc4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1c0>
    acba:	2100      	movs	r1, #0
    acbc:	f640 30e3 	movw	r0, #3043	; 0xbe3
    acc0:	f3af 8000 	nop.w
    acc4:	481a      	ldr	r0, [pc, #104]	; (ad30 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x22c>)
    acc6:	2800      	cmp	r0, #0
    acc8:	bf18      	it	ne
    acca:	f3af 8000 	nopne.w
    acce:	f3ef 8410 	mrs	r4, PRIMASK
    acd2:	b672      	cpsid	i
    acd4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
    acd8:	f88d 0000 	strb.w	r0, [sp]
    acdc:	f89d 0000 	ldrb.w	r0, [sp]
    ace0:	b138      	cbz	r0, acf2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1ee>
    ace2:	2d00      	cmp	r5, #0
    ace4:	bf1c      	itt	ne
    ace6:	2100      	movne	r1, #0
    ace8:	f640 30e9 	movwne	r0, #3049	; 0xbe9
    acec:	f43f af41 	beq.w	ab72 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    acf0:	e784      	b.n	abfc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    acf2:	f886 9031 	strb.w	r9, [r6, #49]	; 0x31
    acf6:	20ff      	movs	r0, #255	; 0xff
    acf8:	f886 0029 	strb.w	r0, [r6, #41]	; 0x29
    acfc:	b154      	cbz	r4, ad14 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>
    acfe:	2d00      	cmp	r5, #0
    ad00:	bf08      	it	eq
    ad02:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad06:	2100      	movs	r1, #0
    ad08:	f640 30f6 	movw	r0, #3062	; 0xbf6
    ad0c:	f3af 8000 	nop.w
    ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ad14:	4805      	ldr	r0, [pc, #20]	; (ad2c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x228>)
    ad16:	2800      	cmp	r0, #0
    ad18:	bf18      	it	ne
    ad1a:	f3af 8000 	nopne.w
    ad1e:	b662      	cpsie	i
    ad20:	e7ed      	b.n	acfe <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    ad22:	0000      	.short	0x0000
    ad24:	2000126c 	.word	0x2000126c
	...

0000ad34 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    ad34:	b570      	push	{r4, r5, r6, lr}
    ad36:	460d      	mov	r5, r1
    ad38:	4606      	mov	r6, r0
    ad3a:	f001 fa83 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    ad3e:	480f      	ldr	r0, [pc, #60]	; (ad7c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    ad40:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    ad44:	2400      	movs	r4, #0
    ad46:	3880      	subs	r0, #128	; 0x80
    ad48:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    ad4c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    ad50:	b129      	cbz	r1, ad5e <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    ad52:	1c61      	adds	r1, r4, #1
    ad54:	b2cc      	uxtb	r4, r1
    ad56:	2c20      	cmp	r4, #32
    ad58:	d3f8      	bcc.n	ad4c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    ad5a:	2020      	movs	r0, #32
    ad5c:	bd70      	pop	{r4, r5, r6, pc}
    ad5e:	4808      	ldr	r0, [pc, #32]	; (ad80 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    ad60:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    ad64:	f840 6021 	str.w	r6, [r0, r1, lsl #2]
    ad68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    ad6c:	4621      	mov	r1, r4
    ad6e:	6045      	str	r5, [r0, #4]
    ad70:	2001      	movs	r0, #1
    ad72:	f7fe ff13 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    ad76:	4620      	mov	r0, r4
    ad78:	bd70      	pop	{r4, r5, r6, pc}
    ad7a:	0000      	.short	0x0000
    ad7c:	2000126c 	.word	0x2000126c
    ad80:	20000e6c 	.word	0x20000e6c

0000ad84 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad88:	b083      	sub	sp, #12
    ad8a:	f000 fb99 	bl	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    ad8e:	4605      	mov	r5, r0
    ad90:	f000 fe7c 	bl	ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    ad94:	4c84      	ldr	r4, [pc, #528]	; (afa8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x224>)
    ad96:	6860      	ldr	r0, [r4, #4]
    ad98:	f1b0 3fff 	cmp.w	r0, #4294967295
    ad9c:	bf1c      	itt	ne
    ad9e:	f04f 30ff 	movne.w	r0, #4294967295
    ada2:	6060      	strne	r0, [r4, #4]
    ada4:	7fa0      	ldrb	r0, [r4, #30]
    ada6:	f8df 9204 	ldr.w	r9, [pc, #516]	; afac <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x228>
    adaa:	b990      	cbnz	r0, add2 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x4e>
    adac:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
    adb0:	1a40      	subs	r0, r0, r1
    adb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    adb6:	f44f 710c 	mov.w	r1, #560	; 0x230
    adba:	f001 fa2f 	bl	c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    adbe:	68e1      	ldr	r1, [r4, #12]
    adc0:	4408      	add	r0, r1
    adc2:	1a28      	subs	r0, r5, r0
    adc4:	0200      	lsls	r0, r0, #8
    adc6:	17c1      	asrs	r1, r0, #31
    adc8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    adcc:	1200      	asrs	r0, r0, #8
    adce:	0fc0      	lsrs	r0, r0, #31
    add0:	d012      	beq.n	adf8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x74>
    add2:	7e60      	ldrb	r0, [r4, #25]
    add4:	b320      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    add6:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    adda:	f88d 0000 	strb.w	r0, [sp]
    adde:	f89d 0000 	ldrb.w	r0, [sp]
    ade2:	b1e8      	cbz	r0, ae20 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x9c>
    ade4:	f000 fcae 	bl	b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    ade8:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    adec:	b1f0      	cbz	r0, ae2c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa8>
    adee:	f240 31f5 	movw	r1, #1013	; 0x3f5
    adf2:	2070      	movs	r0, #112	; 0x70
    adf4:	f001 fab0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    adf8:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    adfc:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
    ae00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae04:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    ae08:	6840      	ldr	r0, [r0, #4]
    ae0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ae0e:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    ae12:	2108      	movs	r1, #8
    ae14:	4790      	blx	r2
    ae16:	f240 31dd 	movw	r1, #989	; 0x3dd
    ae1a:	2070      	movs	r0, #112	; 0x70
    ae1c:	f001 fa9c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae20:	1ce8      	adds	r0, r5, #3
    ae22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ae26:	f000 fb71 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    ae2a:	e7dd      	b.n	ade8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x64>
    ae2c:	2001      	movs	r0, #1
    ae2e:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    ae32:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    ae36:	2820      	cmp	r0, #32
    ae38:	d021      	beq.n	ae7e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xfa>
    ae3a:	f894 8032 	ldrb.w	r8, [r4, #50]	; 0x32
    ae3e:	2020      	movs	r0, #32
    ae40:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
    ae44:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    ae48:	2000      	movs	r0, #0
    ae4a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    ae4e:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    ae52:	6020      	str	r0, [r4, #0]
    ae54:	f000 ff0e 	bl	bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>
    ae58:	7720      	strb	r0, [r4, #28]
    ae5a:	f894 6031 	ldrb.w	r6, [r4, #49]	; 0x31
    ae5e:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    ae62:	1907      	adds	r7, r0, r4
    ae64:	f897 0020 	ldrb.w	r0, [r7, #32]
    ae68:	2820      	cmp	r0, #32
    ae6a:	d058      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae6c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    ae70:	eb09 0980 	add.w	r9, r9, r0, lsl #2
    ae74:	f899 001a 	ldrb.w	r0, [r9, #26]
    ae78:	2801      	cmp	r0, #1
    ae7a:	d005      	beq.n	ae88 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x104>
    ae7c:	e04f      	b.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    ae7e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    ae82:	2070      	movs	r0, #112	; 0x70
    ae84:	f001 fa68 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ae88:	f8b9 b016 	ldrh.w	fp, [r9, #22]
    ae8c:	aa01      	add	r2, sp, #4
    ae8e:	4669      	mov	r1, sp
    ae90:	4658      	mov	r0, fp
    ae92:	f000 f9ab 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    ae96:	f000 fee7 	bl	bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>
    ae9a:	f000 f98b 	bl	b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    ae9e:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    aea2:	2820      	cmp	r0, #32
    aea4:	d004      	beq.n	aeb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x12c>
    aea6:	68e0      	ldr	r0, [r4, #12]
    aea8:	1d40      	adds	r0, r0, #5
    aeaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    aeae:	e01d      	b.n	aeec <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x168>
    aeb0:	f105 0a09 	add.w	sl, r5, #9
    aeb4:	f1bb 0f00 	cmp.w	fp, #0
    aeb8:	d016      	beq.n	aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aeba:	f001 f9d5 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    aebe:	b998      	cbnz	r0, aee8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x164>
    aec0:	f001 f8aa 	bl	c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>
    aec4:	f5b0 7fc6 	cmp.w	r0, #396	; 0x18c
    aec8:	bf08      	it	eq
    aeca:	200d      	moveq	r0, #13
    aecc:	d00b      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aece:	f5a0 7040 	sub.w	r0, r0, #768	; 0x300
    aed2:	3856      	subs	r0, #86	; 0x56
    aed4:	bf08      	it	eq
    aed6:	201c      	moveq	r0, #28
    aed8:	d005      	beq.n	aee6 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x162>
    aeda:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
    aede:	389f      	subs	r0, #159	; 0x9f
    aee0:	bf14      	ite	ne
    aee2:	2000      	movne	r0, #0
    aee4:	2032      	moveq	r0, #50	; 0x32
    aee6:	4482      	add	sl, r0
    aee8:	f02a 407f 	bic.w	r0, sl, #4278190080	; 0xff000000
    aeec:	f8d9 2008 	ldr.w	r2, [r9, #8]
    aef0:	1a81      	subs	r1, r0, r2
    aef2:	0209      	lsls	r1, r1, #8
    aef4:	17cb      	asrs	r3, r1, #31
    aef6:	eb01 6113 	add.w	r1, r1, r3, lsr #24
    aefa:	1209      	asrs	r1, r1, #8
    aefc:	2900      	cmp	r1, #0
    aefe:	dc0e      	bgt.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af00:	f109 0308 	add.w	r3, r9, #8
    af04:	4282      	cmp	r2, r0
    af06:	d202      	bcs.n	af0e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x18a>
    af08:	6899      	ldr	r1, [r3, #8]
    af0a:	1e49      	subs	r1, r1, #1
    af0c:	6099      	str	r1, [r3, #8]
    af0e:	e9d3 2100 	ldrd	r2, r1, [r3]
    af12:	1a89      	subs	r1, r1, r2
    af14:	6018      	str	r0, [r3, #0]
    af16:	4408      	add	r0, r1
    af18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    af1c:	6058      	str	r0, [r3, #4]
    af1e:	4631      	mov	r1, r6
    af20:	2001      	movs	r0, #1
    af22:	f7fe fe6d 	bl	9c00 <MPSL_IRQ_RADIO_Handler+0xf34>
    af26:	ea5f 0900 	movs.w	r9, r0
    af2a:	d0f8      	beq.n	af1e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x19a>
    af2c:	4820      	ldr	r0, [pc, #128]	; (afb0 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x22c>)
    af2e:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    af32:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    af36:	2802      	cmp	r0, #2
    af38:	d104      	bne.n	af44 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>
    af3a:	4632      	mov	r2, r6
    af3c:	4641      	mov	r1, r8
    af3e:	2006      	movs	r0, #6
    af40:	f7fe fe2c 	bl	9b9c <MPSL_IRQ_RADIO_Handler+0xed0>
    af44:	20ff      	movs	r0, #255	; 0xff
    af46:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    af4a:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
    af4e:	4e19      	ldr	r6, [pc, #100]	; (afb4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x230>)
    af50:	2820      	cmp	r0, #32
    af52:	bf1c      	itt	ne
    af54:	7870      	ldrbne	r0, [r6, #1]
    af56:	f001 fad3 	blne	c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    af5a:	7f20      	ldrb	r0, [r4, #28]
    af5c:	b120      	cbz	r0, af68 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1e4>
    af5e:	f000 fe65 	bl	bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>
    af62:	2000      	movs	r0, #0
    af64:	7720      	strb	r0, [r4, #28]
    af66:	7760      	strb	r0, [r4, #29]
    af68:	f1b9 0f02 	cmp.w	r9, #2
    af6c:	d011      	beq.n	af92 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x20e>
    af6e:	f1b9 0f01 	cmp.w	r9, #1
    af72:	bf1c      	itt	ne
    af74:	b003      	addne	sp, #12
    af76:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af7a:	f04f 30ff 	mov.w	r0, #4294967295
    af7e:	6871      	ldr	r1, [r6, #4]
    af80:	2900      	cmp	r1, #0
    af82:	bf04      	itt	eq
    af84:	b003      	addeq	sp, #12
    af86:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af8a:	b003      	add	sp, #12
    af8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af90:	4708      	bx	r1
    af92:	68a0      	ldr	r0, [r4, #8]
    af94:	1b40      	subs	r0, r0, r5
    af96:	f005 f9d7 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    af9a:	6871      	ldr	r1, [r6, #4]
    af9c:	2900      	cmp	r1, #0
    af9e:	d1f4      	bne.n	af8a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x206>
    afa0:	b003      	add	sp, #12
    afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    afa6:	0000      	.short	0x0000
    afa8:	2000126c 	.word	0x2000126c
    afac:	20000e6c 	.word	0x20000e6c
    afb0:	200011ec 	.word	0x200011ec
    afb4:	200002d0 	.word	0x200002d0

0000afb8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    afb8:	b570      	push	{r4, r5, r6, lr}
    afba:	4c42      	ldr	r4, [pc, #264]	; (b0c4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x10c>)
    afbc:	4605      	mov	r5, r0
    afbe:	b082      	sub	sp, #8
    afc0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afc4:	2820      	cmp	r0, #32
    afc6:	d008      	beq.n	afda <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x22>
    afc8:	6860      	ldr	r0, [r4, #4]
    afca:	f1b0 3fff 	cmp.w	r0, #4294967295
    afce:	d009      	beq.n	afe4 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2c>
    afd0:	f640 21e4 	movw	r1, #2788	; 0xae4
    afd4:	2070      	movs	r0, #112	; 0x70
    afd6:	f001 f9bf 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afda:	f640 21e3 	movw	r1, #2787	; 0xae3
    afde:	2070      	movs	r0, #112	; 0x70
    afe0:	f001 f9ba 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    afe4:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
    afe8:	4937      	ldr	r1, [pc, #220]	; (b0c8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x110>)
    afea:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    afee:	eb01 0680 	add.w	r6, r1, r0, lsl #2
    aff2:	68b0      	ldr	r0, [r6, #8]
    aff4:	f005 f9a8 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    aff8:	4602      	mov	r2, r0
    affa:	8af0      	ldrh	r0, [r6, #22]
    affc:	7d31      	ldrb	r1, [r6, #20]
    affe:	4b33      	ldr	r3, [pc, #204]	; (b0cc <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x114>)
    b000:	4408      	add	r0, r1
    b002:	1c40      	adds	r0, r0, #1
    b004:	1811      	adds	r1, r2, r0
    b006:	429a      	cmp	r2, r3
    b008:	d817      	bhi.n	b03a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x82>
    b00a:	4a31      	ldr	r2, [pc, #196]	; (b0d0 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x118>)
    b00c:	4290      	cmp	r0, r2
    b00e:	dc1b      	bgt.n	b048 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x90>
    b010:	f1c2 0c00 	rsb	ip, r2, #0
    b014:	4560      	cmp	r0, ip
    b016:	db1e      	blt.n	b056 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9e>
    b018:	0056      	lsls	r6, r2, #1
    b01a:	428e      	cmp	r6, r1
    b01c:	bfdc      	itt	le
    b01e:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    b022:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    b026:	dd05      	ble.n	b034 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    b028:	2900      	cmp	r1, #0
    b02a:	bfbc      	itt	lt
    b02c:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    b030:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    b034:	1948      	adds	r0, r1, r5
    b036:	4299      	cmp	r1, r3
    b038:	d904      	bls.n	b044 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x8c>
    b03a:	f240 519e 	movw	r1, #1438	; 0x59e
    b03e:	2070      	movs	r0, #112	; 0x70
    b040:	f001 f98a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b044:	4295      	cmp	r5, r2
    b046:	dd04      	ble.n	b052 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x9a>
    b048:	f240 519f 	movw	r1, #1439	; 0x59f
    b04c:	2070      	movs	r0, #112	; 0x70
    b04e:	f001 f983 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b052:	4565      	cmp	r5, ip
    b054:	da04      	bge.n	b060 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xa8>
    b056:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
    b05a:	2070      	movs	r0, #112	; 0x70
    b05c:	f001 f97c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b060:	4286      	cmp	r6, r0
    b062:	bfdc      	itt	le
    b064:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    b068:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    b06c:	dd05      	ble.n	b07a <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xc2>
    b06e:	2800      	cmp	r0, #0
    b070:	bfbc      	itt	lt
    b072:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    b076:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    b07a:	aa01      	add	r2, sp, #4
    b07c:	4669      	mov	r1, sp
    b07e:	f000 f8b5 	bl	b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    b082:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b086:	280f      	cmp	r0, #15
    b088:	bf8c      	ite	hi
    b08a:	2001      	movhi	r0, #1
    b08c:	2000      	movls	r0, #0
    b08e:	9900      	ldr	r1, [sp, #0]
    b090:	4408      	add	r0, r1
    b092:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    b096:	6061      	str	r1, [r4, #4]
    b098:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
    b09c:	f88d 0000 	strb.w	r0, [sp]
    b0a0:	f89d 0000 	ldrb.w	r0, [sp]
    b0a4:	2800      	cmp	r0, #0
    b0a6:	bf04      	itt	eq
    b0a8:	b002      	addeq	sp, #8
    b0aa:	bd70      	popeq	{r4, r5, r6, pc}
    b0ac:	2005      	movs	r0, #5
    b0ae:	f000 fbc7 	bl	b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    b0b2:	2800      	cmp	r0, #0
    b0b4:	bf1c      	itt	ne
    b0b6:	b002      	addne	sp, #8
    b0b8:	bd70      	popne	{r4, r5, r6, pc}
    b0ba:	f640 21eb 	movw	r1, #2795	; 0xaeb
    b0be:	2070      	movs	r0, #112	; 0x70
    b0c0:	f001 f94a 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b0c4:	2000126c 	.word	0x2000126c
    b0c8:	20000e6c 	.word	0x20000e6c
    b0cc:	1e847fff 	.word	0x1e847fff
    b0d0:	0f424000 	.word	0x0f424000

0000b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    b0d4:	b570      	push	{r4, r5, r6, lr}
    b0d6:	4c1c      	ldr	r4, [pc, #112]	; (b148 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x74>)
    b0d8:	2120      	movs	r1, #32
    b0da:	f884 1020 	strb.w	r1, [r4, #32]
    b0de:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    b0e2:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    b0e6:	2000      	movs	r0, #0
    b0e8:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    b0ec:	f884 1032 	strb.w	r1, [r4, #50]	; 0x32
    b0f0:	1e42      	subs	r2, r0, #1
    b0f2:	e9c4 0200 	strd	r0, r2, [r4]
    b0f6:	77a0      	strb	r0, [r4, #30]
    b0f8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    b0fc:	f884 0027 	strb.w	r0, [r4, #39]	; 0x27
    b100:	7720      	strb	r0, [r4, #28]
    b102:	7760      	strb	r0, [r4, #29]
    b104:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    b108:	62e2      	str	r2, [r4, #44]	; 0x2c
    b10a:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    b10e:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    b112:	2210      	movs	r2, #16
    b114:	7088      	strb	r0, [r1, #2]
    b116:	f801 0f04 	strb.w	r0, [r1, #4]!
    b11a:	1e52      	subs	r2, r2, #1
    b11c:	d1fa      	bne.n	b114 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x40>
    b11e:	f000 fdb3 	bl	bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>
    b122:	4d0a      	ldr	r5, [pc, #40]	; (b14c <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x78>)
    b124:	2601      	movs	r6, #1
    b126:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    b12a:	20ff      	movs	r0, #255	; 0xff
    b12c:	7028      	strb	r0, [r5, #0]
    b12e:	4808      	ldr	r0, [pc, #32]	; (b150 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    b130:	f001 f9c8 	bl	c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    b134:	7068      	strb	r0, [r5, #1]
    b136:	f001 fa33 	bl	c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    b13a:	60a8      	str	r0, [r5, #8]
    b13c:	f000 fd2e 	bl	bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    b140:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    b144:	bd70      	pop	{r4, r5, r6, pc}
    b146:	0000      	.short	0x0000
    b148:	2000126c 	.word	0x2000126c
    b14c:	200002d0 	.word	0x200002d0
    b150:	00009ac5 	.word	0x00009ac5

0000b154 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    b154:	b570      	push	{r4, r5, r6, lr}
    b156:	4605      	mov	r5, r0
    b158:	2001      	movs	r0, #1
    b15a:	fa00 f405 	lsl.w	r4, r0, r5
    b15e:	460e      	mov	r6, r1
    b160:	2a00      	cmp	r2, #0
    b162:	bf08      	it	eq
    b164:	4808      	ldreq	r0, [pc, #32]	; (b188 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    b166:	d00c      	beq.n	b182 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    b168:	2000      	movs	r0, #0
    b16a:	f000 fcfd 	bl	bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    b16e:	00e9      	lsls	r1, r5, #3
    b170:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    b174:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    b178:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    b17c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    b180:	4802      	ldr	r0, [pc, #8]	; (b18c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    b182:	6004      	str	r4, [r0, #0]
    b184:	bd70      	pop	{r4, r5, r6, pc}
    b186:	0000      	.short	0x0000
    b188:	4001f508 	.word	0x4001f508
    b18c:	4001f504 	.word	0x4001f504

0000b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>:
    b190:	b500      	push	{lr}
    b192:	b083      	sub	sp, #12
    b194:	4668      	mov	r0, sp
    b196:	f000 f999 	bl	b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>
    b19a:	9800      	ldr	r0, [sp, #0]
    b19c:	f005 f8d4 	bl	10348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    b1a0:	9a01      	ldr	r2, [sp, #4]
    b1a2:	4b03      	ldr	r3, [pc, #12]	; (b1b0 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q+0x20>)
    b1a4:	2100      	movs	r1, #0
    b1a6:	fbe2 0103 	umlal	r0, r1, r2, r3
    b1aa:	b003      	add	sp, #12
    b1ac:	bd00      	pop	{pc}
    b1ae:	0000      	.short	0x0000
    b1b0:	1e848000 	.word	0x1e848000

0000b1b4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    b1b4:	0b41      	lsrs	r1, r0, #13
    b1b6:	f248 6237 	movw	r2, #34359	; 0x8637
    b1ba:	4351      	muls	r1, r2
    b1bc:	0c0a      	lsrs	r2, r1, #16
    b1be:	4b09      	ldr	r3, [pc, #36]	; (b1e4 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    b1c0:	0251      	lsls	r1, r2, #9
    b1c2:	fb02 0203 	mla	r2, r2, r3, r0
    b1c6:	4808      	ldr	r0, [pc, #32]	; (b1e8 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    b1c8:	4350      	muls	r0, r2
    b1ca:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    b1ce:	306e      	adds	r0, #110	; 0x6e
    b1d0:	0d40      	lsrs	r0, r0, #21
    b1d2:	425b      	negs	r3, r3
    b1d4:	fb10 f303 	smulbb	r3, r0, r3
    b1d8:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    b1dc:	bf88      	it	hi
    b1de:	1c49      	addhi	r1, r1, #1
    b1e0:	4408      	add	r0, r1
    b1e2:	4770      	bx	lr
    b1e4:	ffffc2f7 	.word	0xffffc2f7
    b1e8:	00010c6f 	.word	0x00010c6f

0000b1ec <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    b1ec:	0b43      	lsrs	r3, r0, #13
    b1ee:	f248 6c37 	movw	ip, #34359	; 0x8637
    b1f2:	fb03 f30c 	mul.w	r3, r3, ip
    b1f6:	b430      	push	{r4, r5}
    b1f8:	0c1b      	lsrs	r3, r3, #16
    b1fa:	f8df c044 	ldr.w	ip, [pc, #68]	; b240 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    b1fe:	025c      	lsls	r4, r3, #9
    b200:	fb03 030c 	mla	r3, r3, ip, r0
    b204:	480f      	ldr	r0, [pc, #60]	; (b244 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    b206:	4358      	muls	r0, r3
    b208:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    b20c:	eb04 000c 	add.w	r0, r4, ip
    b210:	f643 5409 	movw	r4, #15625	; 0x3d09
    b214:	fb1c f404 	smulbb	r4, ip, r4
    b218:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    b21c:	f643 5508 	movw	r5, #15624	; 0x3d08
    b220:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    b224:	442c      	add	r4, r5
    b226:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    b22a:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    b22e:	bf84      	itt	hi
    b230:	f04f 0c00 	movhi.w	ip, #0
    b234:	1c40      	addhi	r0, r0, #1
    b236:	6008      	str	r0, [r1, #0]
    b238:	f882 c000 	strb.w	ip, [r2]
    b23c:	bc30      	pop	{r4, r5}
    b23e:	4770      	bx	lr
    b240:	ffffc2f7 	.word	0xffffc2f7
    b244:	00010c6f 	.word	0x00010c6f

0000b248 <MPSL_IRQ_RTC0_Handler>:
    b248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b24c:	4d3b      	ldr	r5, [pc, #236]	; (b33c <MPSL_IRQ_RTC0_Handler+0xf4>)
    b24e:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b252:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b340 <MPSL_IRQ_RTC0_Handler+0xf8>
    b256:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b25a:	f44f 6600 	mov.w	r6, #2048	; 0x800
    b25e:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    b262:	f04f 0400 	mov.w	r4, #0
    b266:	d019      	beq.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b268:	4836      	ldr	r0, [pc, #216]	; (b344 <MPSL_IRQ_RTC0_Handler+0xfc>)
    b26a:	6800      	ldr	r0, [r0, #0]
    b26c:	b1b0      	cbz	r0, b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b26e:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    b272:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b276:	f8d5 0540 	ldr.w	r0, [r5, #1344]	; 0x540
    b27a:	f8d8 1000 	ldr.w	r1, [r8]
    b27e:	1a40      	subs	r0, r0, r1
    b280:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b284:	2802      	cmp	r0, #2
    b286:	d302      	bcc.n	b28e <MPSL_IRQ_RTC0_Handler+0x46>
    b288:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b28c:	d906      	bls.n	b29c <MPSL_IRQ_RTC0_Handler+0x54>
    b28e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    b292:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b296:	2004      	movs	r0, #4
    b298:	f7fe fed8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b29c:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2a0:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b2a4:	d01a      	beq.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2a6:	4828      	ldr	r0, [pc, #160]	; (b348 <MPSL_IRQ_RTC0_Handler+0x100>)
    b2a8:	6800      	ldr	r0, [r0, #0]
    b2aa:	b1b8      	cbz	r0, b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ac:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
    b2b0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2b4:	4825      	ldr	r0, [pc, #148]	; (b34c <MPSL_IRQ_RTC0_Handler+0x104>)
    b2b6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2ba:	f8d8 1000 	ldr.w	r1, [r8]
    b2be:	1a40      	subs	r0, r0, r1
    b2c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b2c4:	2802      	cmp	r0, #2
    b2c6:	d302      	bcc.n	b2ce <MPSL_IRQ_RTC0_Handler+0x86>
    b2c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b2cc:	d906      	bls.n	b2dc <MPSL_IRQ_RTC0_Handler+0x94>
    b2ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b2d2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b2d6:	2005      	movs	r0, #5
    b2d8:	f7fe feb8 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b2dc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    b2e0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b2e4:	d01a      	beq.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2e6:	481a      	ldr	r0, [pc, #104]	; (b350 <MPSL_IRQ_RTC0_Handler+0x108>)
    b2e8:	6800      	ldr	r0, [r0, #0]
    b2ea:	b1b8      	cbz	r0, b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b2ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    b2f0:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b2f4:	4817      	ldr	r0, [pc, #92]	; (b354 <MPSL_IRQ_RTC0_Handler+0x10c>)
    b2f6:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    b2fa:	f8d8 1000 	ldr.w	r1, [r8]
    b2fe:	1a40      	subs	r0, r0, r1
    b300:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b304:	2802      	cmp	r0, #2
    b306:	d302      	bcc.n	b30e <MPSL_IRQ_RTC0_Handler+0xc6>
    b308:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b30c:	d906      	bls.n	b31c <MPSL_IRQ_RTC0_Handler+0xd4>
    b30e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    b312:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    b316:	2006      	movs	r0, #6
    b318:	f7fe fe98 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b31c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b320:	2800      	cmp	r0, #0
    b322:	bf08      	it	eq
    b324:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b328:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    b32c:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    b330:	4809      	ldr	r0, [pc, #36]	; (b358 <MPSL_IRQ_RTC0_Handler+0x110>)
    b332:	68c1      	ldr	r1, [r0, #12]
    b334:	1c49      	adds	r1, r1, #1
    b336:	60c1      	str	r1, [r0, #12]
    b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b33c:	4000b000 	.word	0x4000b000
    b340:	4000b504 	.word	0x4000b504
    b344:	4000b140 	.word	0x4000b140
    b348:	4000b144 	.word	0x4000b144
    b34c:	4000b004 	.word	0x4000b004
    b350:	4000b148 	.word	0x4000b148
    b354:	4000b008 	.word	0x4000b008
    b358:	200002dc 	.word	0x200002dc

0000b35c <MPSL_IRQ_TIMER0_Handler>:
    b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b360:	4d38      	ldr	r5, [pc, #224]	; (b444 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    b362:	7828      	ldrb	r0, [r5, #0]
    b364:	2804      	cmp	r0, #4
    b366:	d068      	beq.n	b43a <MPSL_IRQ_TIMER0_Handler+0xde>
    b368:	1ca8      	adds	r0, r5, #2
    b36a:	2201      	movs	r2, #1
    b36c:	7801      	ldrb	r1, [r0, #0]
    b36e:	b159      	cbz	r1, b388 <MPSL_IRQ_TIMER0_Handler+0x2c>
    b370:	2901      	cmp	r1, #1
    b372:	bf08      	it	eq
    b374:	706a      	strbeq	r2, [r5, #1]
    b376:	d002      	beq.n	b37e <MPSL_IRQ_TIMER0_Handler+0x22>
    b378:	7869      	ldrb	r1, [r5, #1]
    b37a:	2900      	cmp	r1, #0
    b37c:	d058      	beq.n	b430 <MPSL_IRQ_TIMER0_Handler+0xd4>
    b37e:	2102      	movs	r1, #2
    b380:	7001      	strb	r1, [r0, #0]
    b382:	7840      	ldrb	r0, [r0, #1]
    b384:	f000 fb12 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b388:	4c2f      	ldr	r4, [pc, #188]	; (b448 <MPSL_IRQ_TIMER0_Handler+0xec>)
    b38a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b38e:	f04f 0800 	mov.w	r8, #0
    b392:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    b396:	f44f 7780 	mov.w	r7, #256	; 0x100
    b39a:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    b39e:	d00a      	beq.n	b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a0:	482a      	ldr	r0, [pc, #168]	; (b44c <MPSL_IRQ_TIMER0_Handler+0xf0>)
    b3a2:	6800      	ldr	r0, [r0, #0]
    b3a4:	b138      	cbz	r0, b3b6 <MPSL_IRQ_TIMER0_Handler+0x5a>
    b3a6:	2003      	movs	r0, #3
    b3a8:	f000 fb00 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ac:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3b0:	2003      	movs	r0, #3
    b3b2:	f7fe fe4b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3b6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3ba:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    b3be:	d00a      	beq.n	b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c0:	4823      	ldr	r0, [pc, #140]	; (b450 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    b3c2:	6800      	ldr	r0, [r0, #0]
    b3c4:	b138      	cbz	r0, b3d6 <MPSL_IRQ_TIMER0_Handler+0x7a>
    b3c6:	2002      	movs	r0, #2
    b3c8:	f000 faf0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3cc:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3d0:	2002      	movs	r0, #2
    b3d2:	f7fe fe3b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3d6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3da:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    b3de:	d00a      	beq.n	b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e0:	481c      	ldr	r0, [pc, #112]	; (b454 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    b3e2:	6800      	ldr	r0, [r0, #0]
    b3e4:	b138      	cbz	r0, b3f6 <MPSL_IRQ_TIMER0_Handler+0x9a>
    b3e6:	2001      	movs	r0, #1
    b3e8:	f000 fae0 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b3ec:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b3f0:	2001      	movs	r0, #1
    b3f2:	f7fe fe2b 	bl	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b3f6:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b3fa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b3fe:	bf08      	it	eq
    b400:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b404:	4814      	ldr	r0, [pc, #80]	; (b458 <MPSL_IRQ_TIMER0_Handler+0xfc>)
    b406:	6800      	ldr	r0, [r0, #0]
    b408:	2800      	cmp	r0, #0
    b40a:	bf08      	it	eq
    b40c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    b410:	2000      	movs	r0, #0
    b412:	f000 facb 	bl	b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    b416:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    b41a:	2004      	movs	r0, #4
    b41c:	7028      	strb	r0, [r5, #0]
    b41e:	f8c5 8004 	str.w	r8, [r5, #4]
    b422:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b42a:	2000      	movs	r0, #0
    b42c:	f7fe be0e 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b430:	f44f 6195 	mov.w	r1, #1192	; 0x4a8
    b434:	206c      	movs	r0, #108	; 0x6c
    b436:	f000 ff8f 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b43e:	2007      	movs	r0, #7
    b440:	f7fe be04 	b.w	a04c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    b444:	200002dc 	.word	0x200002dc
    b448:	40008000 	.word	0x40008000
    b44c:	4000814c 	.word	0x4000814c
    b450:	40008148 	.word	0x40008148
    b454:	40008144 	.word	0x40008144
    b458:	40008140 	.word	0x40008140
    b45c:	2201      	movs	r2, #1
    b45e:	0211      	lsls	r1, r2, #8
    b460:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b464:	2000      	movs	r0, #0
    b466:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    b46a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    b46e:	f3bf 8f4f 	dsb	sy
    b472:	f3bf 8f6f 	isb	sy
    b476:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    b47a:	490e      	ldr	r1, [pc, #56]	; (b4b4 <MPSL_IRQ_TIMER0_Handler+0x158>)
    b47c:	f841 2f04 	str.w	r2, [r1, #4]!
    b480:	1e43      	subs	r3, r0, #1
    b482:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    b486:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    b48a:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    b48e:	4b0a      	ldr	r3, [pc, #40]	; (b4b8 <MPSL_IRQ_TIMER0_Handler+0x15c>)
    b490:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b494:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    b498:	1d1b      	adds	r3, r3, #4
    b49a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b49e:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    b4a2:	1d1b      	adds	r3, r3, #4
    b4a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b4a8:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    b4ac:	60ca      	str	r2, [r1, #12]
    b4ae:	4903      	ldr	r1, [pc, #12]	; (b4bc <MPSL_IRQ_TIMER0_Handler+0x160>)
    b4b0:	7048      	strb	r0, [r1, #1]
    b4b2:	4770      	bx	lr
    b4b4:	40008000 	.word	0x40008000
    b4b8:	40008004 	.word	0x40008004
    b4bc:	200002dc 	.word	0x200002dc

0000b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    b4c0:	4801      	ldr	r0, [pc, #4]	; (b4c8 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    b4c2:	6800      	ldr	r0, [r0, #0]
    b4c4:	4770      	bx	lr
    b4c6:	0000      	.short	0x0000
    b4c8:	4000b504 	.word	0x4000b504

0000b4cc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ>:
    b4cc:	b430      	push	{r4, r5}
    b4ce:	f3ef 8c10 	mrs	ip, PRIMASK
    b4d2:	b672      	cpsid	i
    b4d4:	2500      	movs	r5, #0
    b4d6:	4b0b      	ldr	r3, [pc, #44]	; (b504 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x38>)
    b4d8:	4a0b      	ldr	r2, [pc, #44]	; (b508 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x3c>)
    b4da:	bf00      	nop
    b4dc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    b4e0:	f8d3 4104 	ldr.w	r4, [r3, #260]	; 0x104
    b4e4:	b12c      	cbz	r4, b4f2 <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x26>
    b4e6:	68d1      	ldr	r1, [r2, #12]
    b4e8:	1c49      	adds	r1, r1, #1
    b4ea:	60d1      	str	r1, [r2, #12]
    b4ec:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    b4f0:	e7f4      	b.n	b4dc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x10>
    b4f2:	68d2      	ldr	r2, [r2, #12]
    b4f4:	f1bc 0f00 	cmp.w	ip, #0
    b4f8:	d100      	bne.n	b4fc <sym_ER2LFPTHTSYOYONJR4JS5HXOBOW2Y522PSIGIAQ+0x30>
    b4fa:	b662      	cpsie	i
    b4fc:	e9c0 1200 	strd	r1, r2, [r0]
    b500:	bc30      	pop	{r4, r5}
    b502:	4770      	bx	lr
    b504:	4000b000 	.word	0x4000b000
    b508:	200002dc 	.word	0x200002dc

0000b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    b50c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b510:	f8df 8134 	ldr.w	r8, [pc, #308]	; b648 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x13c>
    b514:	4605      	mov	r5, r0
    b516:	f1a8 0602 	sub.w	r6, r8, #2
    b51a:	f898 3000 	ldrb.w	r3, [r8]
    b51e:	68b0      	ldr	r0, [r6, #8]
    b520:	2b01      	cmp	r3, #1
    b522:	bf04      	itt	eq
    b524:	42a8      	cmpeq	r0, r5
    b526:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b52a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
    b52e:	4a47      	ldr	r2, [pc, #284]	; (b64c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x140>)
    b530:	6011      	str	r1, [r2, #0]
    b532:	4948      	ldr	r1, [pc, #288]	; (b654 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x148>)
    b534:	4a46      	ldr	r2, [pc, #280]	; (b650 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x144>)
    b536:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b53a:	f101 0c04 	add.w	ip, r1, #4
    b53e:	f04f 0400 	mov.w	r4, #0
    b542:	2b00      	cmp	r3, #0
    b544:	d055      	beq.n	b5f2 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xe6>
    b546:	4a44      	ldr	r2, [pc, #272]	; (b658 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x14c>)
    b548:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b54c:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b550:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b554:	f8d1 2148 	ldr.w	r2, [r1, #328]	; 0x148
    b558:	2701      	movs	r7, #1
    b55a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b55e:	2a00      	cmp	r2, #0
    b560:	bf01      	itttt	eq
    b562:	f8d1 2104 	ldreq.w	r2, [r1, #260]	; 0x104
    b566:	2a00      	cmpeq	r2, #0
    b568:	f44f 6200 	moveq.w	r2, #2048	; 0x800
    b56c:	f8c9 2280 	streq.w	r2, [r9, #640]	; 0x280
    b570:	f04f 0a10 	mov.w	sl, #16
    b574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b578:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b57c:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b580:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b584:	4a35      	ldr	r2, [pc, #212]	; (b65c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x150>)
    b586:	f8d2 c000 	ldr.w	ip, [r2]
    b58a:	eba5 0c0c 	sub.w	ip, r5, ip
    b58e:	f02c 4c7f 	bic.w	ip, ip, #4278190080	; 0xff000000
    b592:	f1bc 0f02 	cmp.w	ip, #2
    b596:	d337      	bcc.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b598:	f5bc 0f00 	cmp.w	ip, #8388608	; 0x800000
    b59c:	d834      	bhi.n	b608 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfc>
    b59e:	f8c1 5540 	str.w	r5, [r1, #1344]	; 0x540
    b5a2:	f44f 3c80 	mov.w	ip, #65536	; 0x10000
    b5a6:	f8c1 c344 	str.w	ip, [r1, #836]	; 0x344
    b5aa:	b12b      	cbz	r3, b5b8 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xac>
    b5ac:	6811      	ldr	r1, [r2, #0]
    b5ae:	1a41      	subs	r1, r0, r1
    b5b0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b5b4:	2902      	cmp	r1, #2
    b5b6:	d3f9      	bcc.n	b5ac <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xa0>
    b5b8:	6077      	str	r7, [r6, #4]
    b5ba:	7034      	strb	r4, [r6, #0]
    b5bc:	f7ff ff4e 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    b5c0:	4827      	ldr	r0, [pc, #156]	; (b660 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x154>)
    b5c2:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    b5c6:	f364 0101 	bfi	r1, r4, #0, #2
    b5ca:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    b5ce:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    b5d2:	2102      	movs	r1, #2
    b5d4:	f361 0201 	bfi	r2, r1, #0, #2
    b5d8:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    b5dc:	fa9a f1aa 	rbit	r1, sl
    b5e0:	fab1 f181 	clz	r1, r1
    b5e4:	2909      	cmp	r1, #9
    b5e6:	d917      	bls.n	b618 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x10c>
    b5e8:	f240 3155 	movw	r1, #853	; 0x355
    b5ec:	a01d      	add	r0, pc, #116	; (adr r0, b664 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x158>)
    b5ee:	f000 fe87 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    b5f2:	f8c1 2348 	str.w	r2, [r1, #840]	; 0x348
    b5f6:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    b5fa:	f8c1 4140 	str.w	r4, [r1, #320]	; 0x140
    b5fe:	f8cc 4540 	str.w	r4, [ip, #1344]	; 0x540
    b602:	f8c1 4144 	str.w	r4, [r1, #324]	; 0x144
    b606:	e7a5      	b.n	b554 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x48>
    b608:	2000      	movs	r0, #0
    b60a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b60e:	f44f 7127 	mov.w	r1, #668	; 0x29c
    b612:	206c      	movs	r0, #108	; 0x6c
    b614:	f000 fea0 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b618:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b61c:	60c7      	str	r7, [r0, #12]
    b61e:	6871      	ldr	r1, [r6, #4]
    b620:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b624:	f44f 7080 	mov.w	r0, #256	; 0x100
    b628:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    b62c:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    b630:	490f      	ldr	r1, [pc, #60]	; (b670 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x164>)
    b632:	05c0      	lsls	r0, r0, #23
    b634:	6008      	str	r0, [r1, #0]
    b636:	2004      	movs	r0, #4
    b638:	60b5      	str	r5, [r6, #8]
    b63a:	f888 0001 	strb.w	r0, [r8, #1]
    b63e:	f888 7000 	strb.w	r7, [r8]
    b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b646:	0000      	.short	0x0000
    b648:	200002de 	.word	0x200002de
    b64c:	4001f508 	.word	0x4001f508
    b650:	fffbfffd 	.word	0xfffbfffd
    b654:	4000b000 	.word	0x4000b000
    b658:	fffafffd 	.word	0xfffafffd
    b65c:	4000b504 	.word	0x4000b504
    b660:	40008000 	.word	0x40008000
    b664:	5f66726e 	.word	0x5f66726e
    b668:	656d6974 	.word	0x656d6974
    b66c:	00682e72 	.word	0x00682e72
    b670:	4001f504 	.word	0x4001f504

0000b674 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    b674:	b570      	push	{r4, r5, r6, lr}
    b676:	4c2a      	ldr	r4, [pc, #168]	; (b720 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xac>)
    b678:	68a1      	ldr	r1, [r4, #8]
    b67a:	4281      	cmp	r1, r0
    b67c:	bf14      	ite	ne
    b67e:	2201      	movne	r2, #1
    b680:	2200      	moveq	r2, #0
    b682:	f8df c0a0 	ldr.w	ip, [pc, #160]	; b724 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb0>
    b686:	f89c 5000 	ldrb.w	r5, [ip]
    b68a:	2d02      	cmp	r5, #2
    b68c:	d002      	beq.n	b694 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    b68e:	2a00      	cmp	r2, #0
    b690:	d034      	beq.n	b6fc <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x88>
    b692:	e002      	b.n	b69a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    b694:	2a00      	cmp	r2, #0
    b696:	bf08      	it	eq
    b698:	bd70      	popeq	{r4, r5, r6, pc}
    b69a:	7862      	ldrb	r2, [r4, #1]
    b69c:	b39a      	cbz	r2, b706 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x92>
    b69e:	4b22      	ldr	r3, [pc, #136]	; (b728 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    b6a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b6a4:	601a      	str	r2, [r3, #0]
    b6a6:	4b21      	ldr	r3, [pc, #132]	; (b72c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>)
    b6a8:	1392      	asrs	r2, r2, #14
    b6aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    b6ae:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
    b6b2:	2200      	movs	r2, #0
    b6b4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    b6b8:	4a1d      	ldr	r2, [pc, #116]	; (b730 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    b6ba:	6816      	ldr	r6, [r2, #0]
    b6bc:	1b86      	subs	r6, r0, r6
    b6be:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
    b6c2:	2e02      	cmp	r6, #2
    b6c4:	d324      	bcc.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6c6:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
    b6ca:	d821      	bhi.n	b710 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x9c>
    b6cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b6d0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    b6d4:	f8c3 6344 	str.w	r6, [r3, #836]	; 0x344
    b6d8:	b12d      	cbz	r5, b6e6 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x72>
    b6da:	6813      	ldr	r3, [r2, #0]
    b6dc:	1acb      	subs	r3, r1, r3
    b6de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b6e2:	2b02      	cmp	r3, #2
    b6e4:	d3f9      	bcc.n	b6da <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x66>
    b6e6:	4b13      	ldr	r3, [pc, #76]	; (b734 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    b6e8:	2102      	movs	r1, #2
    b6ea:	074a      	lsls	r2, r1, #29
    b6ec:	601a      	str	r2, [r3, #0]
    b6ee:	60a0      	str	r0, [r4, #8]
    b6f0:	2004      	movs	r0, #4
    b6f2:	f88c 0001 	strb.w	r0, [ip, #1]
    b6f6:	f88c 1000 	strb.w	r1, [ip]
    b6fa:	bd70      	pop	{r4, r5, r6, pc}
    b6fc:	f240 21aa 	movw	r1, #682	; 0x2aa
    b700:	206c      	movs	r0, #108	; 0x6c
    b702:	f000 fe29 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b706:	f240 21ae 	movw	r1, #686	; 0x2ae
    b70a:	206c      	movs	r0, #108	; 0x6c
    b70c:	f000 fe24 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b710:	2000      	movs	r0, #0
    b712:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    b716:	f240 21ba 	movw	r1, #698	; 0x2ba
    b71a:	206c      	movs	r0, #108	; 0x6c
    b71c:	f000 fe1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b720:	200002dc 	.word	0x200002dc
    b724:	200002de 	.word	0x200002de
    b728:	4001f508 	.word	0x4001f508
    b72c:	4000b000 	.word	0x4000b000
    b730:	4000b504 	.word	0x4000b504
    b734:	4001f504 	.word	0x4001f504

0000b738 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    b738:	4801      	ldr	r0, [pc, #4]	; (b740 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    b73a:	6880      	ldr	r0, [r0, #8]
    b73c:	4770      	bx	lr
    b73e:	0000      	.short	0x0000
    b740:	200002dc 	.word	0x200002dc

0000b744 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    b744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b748:	4836      	ldr	r0, [pc, #216]	; (b824 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    b74a:	4a35      	ldr	r2, [pc, #212]	; (b820 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xdc>)
    b74c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    b750:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b828 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>
    b754:	1d03      	adds	r3, r0, #4
    b756:	2100      	movs	r1, #0
    b758:	f89c 4000 	ldrb.w	r4, [ip]
    b75c:	b184      	cbz	r4, b780 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x3c>
    b75e:	4a33      	ldr	r2, [pc, #204]	; (b82c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    b760:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b764:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b768:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b76c:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    b770:	2301      	movs	r3, #1
    b772:	2a00      	cmp	r2, #0
    b774:	bf04      	itt	eq
    b776:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    b77a:	2800      	cmpeq	r0, #0
    b77c:	d111      	bne.n	b7a2 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5e>
    b77e:	e00a      	b.n	b796 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x52>
    b780:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    b784:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b788:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    b78c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    b790:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b794:	e7ea      	b.n	b76c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    b796:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b79a:	f44f 6000 	mov.w	r0, #2048	; 0x800
    b79e:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    b7a2:	2c02      	cmp	r4, #2
    b7a4:	d004      	beq.n	b7b0 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x6c>
    b7a6:	f240 21c6 	movw	r1, #710	; 0x2c6
    b7aa:	206c      	movs	r0, #108	; 0x6c
    b7ac:	f000 fdd4 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b7b0:	4e1f      	ldr	r6, [pc, #124]	; (b830 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    b7b2:	6830      	ldr	r0, [r6, #0]
    b7b4:	4c1f      	ldr	r4, [pc, #124]	; (b834 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    b7b6:	1cc0      	adds	r0, r0, #3
    b7b8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7bc:	68a2      	ldr	r2, [r4, #8]
    b7be:	4d1e      	ldr	r5, [pc, #120]	; (b838 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    b7c0:	4290      	cmp	r0, r2
    b7c2:	d00b      	beq.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7c4:	6837      	ldr	r7, [r6, #0]
    b7c6:	1bd7      	subs	r7, r2, r7
    b7c8:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    b7cc:	2f04      	cmp	r7, #4
    b7ce:	d305      	bcc.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d0:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
    b7d4:	d802      	bhi.n	b7dc <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x98>
    b7d6:	f7ff fe99 	bl	b50c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    b7da:	e01b      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b7dc:	6830      	ldr	r0, [r6, #0]
    b7de:	1a10      	subs	r0, r2, r0
    b7e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    b7e4:	2802      	cmp	r0, #2
    b7e6:	d313      	bcc.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    b7ec:	d810      	bhi.n	b810 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xcc>
    b7ee:	4a13      	ldr	r2, [pc, #76]	; (b83c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf8>)
    b7f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b7f4:	6010      	str	r0, [r2, #0]
    b7f6:	6063      	str	r3, [r4, #4]
    b7f8:	7021      	strb	r1, [r4, #0]
    b7fa:	606b      	str	r3, [r5, #4]
    b7fc:	60eb      	str	r3, [r5, #12]
    b7fe:	0040      	lsls	r0, r0, #1
    b800:	1f11      	subs	r1, r2, #4
    b802:	6008      	str	r0, [r1, #0]
    b804:	2004      	movs	r0, #4
    b806:	f88c 0001 	strb.w	r0, [ip, #1]
    b80a:	f88c 3000 	strb.w	r3, [ip]
    b80e:	e001      	b.n	b814 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    b810:	6063      	str	r3, [r4, #4]
    b812:	7021      	strb	r1, [r4, #0]
    b814:	6860      	ldr	r0, [r4, #4]
    b816:	f8c5 0200 	str.w	r0, [r5, #512]	; 0x200
    b81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b81e:	0000      	.short	0x0000
    b820:	fffbfffd 	.word	0xfffbfffd
    b824:	4000b000 	.word	0x4000b000
    b828:	200002de 	.word	0x200002de
    b82c:	fffafffd 	.word	0xfffafffd
    b830:	4000b504 	.word	0x4000b504
    b834:	200002dc 	.word	0x200002dc
    b838:	40008000 	.word	0x40008000
    b83c:	4001f508 	.word	0x4001f508

0000b840 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    b840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b844:	4a54      	ldr	r2, [pc, #336]	; (b998 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x158>)
    b846:	2500      	movs	r5, #0
    b848:	2401      	movs	r4, #1
    b84a:	f892 c000 	ldrb.w	ip, [r2]
    b84e:	7853      	ldrb	r3, [r2, #1]
    b850:	f44f 76a0 	mov.w	r6, #320	; 0x140
    b854:	2807      	cmp	r0, #7
    b856:	d27d      	bcs.n	b954 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    b858:	e8df f000 	tbb	[pc, r0]
    b85c:	04040404 	.word	0x04040404
    b860:	00585858 	.word	0x00585858
    b864:	4a4d      	ldr	r2, [pc, #308]	; (b99c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x15c>)
    b866:	6897      	ldr	r7, [r2, #8]
    b868:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    b86c:	bf04      	itt	eq
    b86e:	7852      	ldrbeq	r2, [r2, #1]
    b870:	2a00      	cmpeq	r2, #0
    b872:	d003      	beq.n	b87c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x3c>
    b874:	f1bc 0f02 	cmp.w	ip, #2
    b878:	d005      	beq.n	b886 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    b87a:	e026      	b.n	b8ca <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x8a>
    b87c:	f240 3156 	movw	r1, #854	; 0x356
    b880:	206c      	movs	r0, #108	; 0x6c
    b882:	f000 fd69 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b886:	1f1a      	subs	r2, r3, #4
    b888:	b2d2      	uxtb	r2, r2
    b88a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    b88e:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
    b892:	f506 4630 	add.w	r6, r6, #45056	; 0xb000
    b896:	2200      	movs	r2, #0
    b898:	f1bc 0f01 	cmp.w	ip, #1
    b89c:	d003      	beq.n	b8a6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x66>
    b89e:	f1bc 0f02 	cmp.w	ip, #2
    b8a2:	d008      	beq.n	b8b6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x76>
    b8a4:	e00e      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8a6:	2b04      	cmp	r3, #4
    b8a8:	bf24      	itt	cs
    b8aa:	6837      	ldrcs	r7, [r6, #0]
    b8ac:	2f00      	cmpcs	r7, #0
    b8ae:	bf08      	it	eq
    b8b0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
    b8b4:	e006      	b.n	b8c4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x84>
    b8b6:	2b04      	cmp	r3, #4
    b8b8:	bf24      	itt	cs
    b8ba:	6837      	ldrcs	r7, [r6, #0]
    b8bc:	2f00      	cmpcs	r7, #0
    b8be:	bf08      	it	eq
    b8c0:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
    b8c4:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
    b8c8:	d1e5      	bne.n	b896 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x56>
    b8ca:	f8df c0d4 	ldr.w	ip, [pc, #212]	; b9a0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x160>
    b8ce:	f100 0210 	add.w	r2, r0, #16
    b8d2:	fa04 f202 	lsl.w	r2, r4, r2
    b8d6:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b8da:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8de:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    b8e2:	b2db      	uxtb	r3, r3
    b8e4:	4463      	add	r3, ip
    b8e6:	601c      	str	r4, [r3, #0]
    b8e8:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b8ec:	f8d0 3540 	ldr.w	r3, [r0, #1344]	; 0x540
    b8f0:	eba1 0303 	sub.w	r3, r1, r3
    b8f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8f8:	2b03      	cmp	r3, #3
    b8fa:	bf26      	itte	cs
    b8fc:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    b900:	f8cc 2304 	strcs.w	r2, [ip, #772]	; 0x304
    b904:	f8c0 5540 	strcc.w	r5, [r0, #1344]	; 0x540
    b908:	d237      	bcs.n	b97a <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x13a>
    b90a:	e03c      	b.n	b986 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x146>
    b90c:	f1bc 0f00 	cmp.w	ip, #0
    b910:	d006      	beq.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b912:	4283      	cmp	r3, r0
    b914:	d104      	bne.n	b920 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe0>
    b916:	f240 3176 	movw	r1, #886	; 0x376
    b91a:	206c      	movs	r0, #108	; 0x6c
    b91c:	f000 fd1c 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b920:	1f02      	subs	r2, r0, #4
    b922:	b2d3      	uxtb	r3, r2
    b924:	2b03      	cmp	r3, #3
    b926:	d304      	bcc.n	b932 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xf2>
    b928:	f240 11d1 	movw	r1, #465	; 0x1d1
    b92c:	206c      	movs	r0, #108	; 0x6c
    b92e:	f000 fd13 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b932:	f8df c070 	ldr.w	ip, [pc, #112]	; b9a4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x164>
    b936:	f103 0210 	add.w	r2, r3, #16
    b93a:	fa04 f202 	lsl.w	r2, r4, r2
    b93e:	f8cc 2308 	str.w	r2, [ip, #776]	; 0x308
    b942:	f8cc 2348 	str.w	r2, [ip, #840]	; 0x348
    b946:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    b94a:	f84c 5003 	str.w	r5, [ip, r3]
    b94e:	4b16      	ldr	r3, [pc, #88]	; (b9a8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x168>)
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	e000      	b.n	b956 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    b954:	e01a      	b.n	b98c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x14c>
    b956:	1f00      	subs	r0, r0, #4
    b958:	1acb      	subs	r3, r1, r3
    b95a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b95e:	b2c0      	uxtb	r0, r0
    b960:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    b964:	2b02      	cmp	r3, #2
    b966:	d30b      	bcc.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    b96c:	d808      	bhi.n	b980 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x140>
    b96e:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b972:	f8cc 2304 	str.w	r2, [ip, #772]	; 0x304
    b976:	f8cc 2344 	str.w	r2, [ip, #836]	; 0x344
    b97a:	2001      	movs	r0, #1
    b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b980:	2100      	movs	r1, #0
    b982:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    b986:	2000      	movs	r0, #0
    b988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b98c:	f240 317a 	movw	r1, #890	; 0x37a
    b990:	206c      	movs	r0, #108	; 0x6c
    b992:	f000 fce1 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    b996:	0000      	.short	0x0000
    b998:	200002de 	.word	0x200002de
    b99c:	200002dc 	.word	0x200002dc
    b9a0:	40008000 	.word	0x40008000
    b9a4:	4000b000 	.word	0x4000b000
    b9a8:	4000b504 	.word	0x4000b504

0000b9ac <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    b9ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9b0:	2601      	movs	r6, #1
    b9b2:	2700      	movs	r7, #0
    b9b4:	f44f 78a0 	mov.w	r8, #320	; 0x140
    b9b8:	2807      	cmp	r0, #7
    b9ba:	d251      	bcs.n	ba60 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb4>
    b9bc:	e8df f000 	tbb	[pc, r0]
    b9c0:	04040404 	.word	0x04040404
    b9c4:	00191919 	.word	0x00191919
    b9c8:	f100 0110 	add.w	r1, r0, #16
    b9cc:	fa06 f201 	lsl.w	r2, r6, r1
    b9d0:	4926      	ldr	r1, [pc, #152]	; (ba6c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    b9d2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    b9d6:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    b9da:	2200      	movs	r2, #0
    b9dc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    b9e0:	eb08 0280 	add.w	r2, r8, r0, lsl #2
    b9e4:	508f      	str	r7, [r1, r2]
    b9e6:	4922      	ldr	r1, [pc, #136]	; (ba70 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    b9e8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    b9ec:	9000      	str	r0, [sp, #0]
    b9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b9f2:	4d20      	ldr	r5, [pc, #128]	; (ba74 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    b9f4:	1f01      	subs	r1, r0, #4
    b9f6:	b2cc      	uxtb	r4, r1
    b9f8:	7829      	ldrb	r1, [r5, #0]
    b9fa:	b179      	cbz	r1, ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    b9fc:	786a      	ldrb	r2, [r5, #1]
    b9fe:	4282      	cmp	r2, r0
    ba00:	d10c      	bne.n	ba1c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x70>
    ba02:	4a1d      	ldr	r2, [pc, #116]	; (ba78 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    ba04:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    ba08:	6010      	str	r0, [r2, #0]
    ba0a:	2901      	cmp	r1, #1
    ba0c:	bf08      	it	eq
    ba0e:	f7ff fd25 	bleq	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    ba12:	702f      	strb	r7, [r5, #0]
    ba14:	4919      	ldr	r1, [pc, #100]	; (ba7c <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    ba16:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    ba1a:	6088      	str	r0, [r1, #8]
    ba1c:	4918      	ldr	r1, [pc, #96]	; (ba80 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    ba1e:	f104 0010 	add.w	r0, r4, #16
    ba22:	fa06 f000 	lsl.w	r0, r6, r0
    ba26:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    ba2a:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
    ba2e:	00a0      	lsls	r0, r4, #2
    ba30:	4408      	add	r0, r1
    ba32:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    ba36:	4a13      	ldr	r2, [pc, #76]	; (ba84 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    ba38:	6812      	ldr	r2, [r2, #0]
    ba3a:	1a80      	subs	r0, r0, r2
    ba3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ba40:	2802      	cmp	r0, #2
    ba42:	d307      	bcc.n	ba54 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xa8>
    ba44:	eb01 0284 	add.w	r2, r1, r4, lsl #2
    ba48:	2000      	movs	r0, #0
    ba4a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    ba4e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
    ba52:	500f      	str	r7, [r1, r0]
    ba54:	480c      	ldr	r0, [pc, #48]	; (ba88 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xdc>)
    ba56:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    ba5a:	9000      	str	r0, [sp, #0]
    ba5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ba60:	f240 31fe 	movw	r1, #1022	; 0x3fe
    ba64:	206c      	movs	r0, #108	; 0x6c
    ba66:	f000 fc77 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    ba6a:	0000      	.short	0x0000
    ba6c:	40008000 	.word	0x40008000
    ba70:	40008140 	.word	0x40008140
    ba74:	200002de 	.word	0x200002de
    ba78:	4001f508 	.word	0x4001f508
    ba7c:	200002dc 	.word	0x200002dc
    ba80:	4000b000 	.word	0x4000b000
    ba84:	4000b504 	.word	0x4000b504
    ba88:	4000b140 	.word	0x4000b140

0000ba8c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    ba8c:	4825      	ldr	r0, [pc, #148]	; (bb24 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x98>)
    ba8e:	4a24      	ldr	r2, [pc, #144]	; (bb20 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x94>)
    ba90:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    ba94:	4924      	ldr	r1, [pc, #144]	; (bb28 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x9c>)
    ba96:	1d03      	adds	r3, r0, #4
    ba98:	f891 c000 	ldrb.w	ip, [r1]
    ba9c:	2100      	movs	r1, #0
    ba9e:	f1bc 0f00 	cmp.w	ip, #0
    baa2:	d010      	beq.n	bac6 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x3a>
    baa4:	4a21      	ldr	r2, [pc, #132]	; (bb2c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa0>)
    baa6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baaa:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    baae:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bab2:	bf00      	nop
    bab4:	f8d0 2148 	ldr.w	r2, [r0, #328]	; 0x148
    bab8:	2a00      	cmp	r2, #0
    baba:	bf04      	itt	eq
    babc:	f8d0 0104 	ldreq.w	r0, [r0, #260]	; 0x104
    bac0:	2800      	cmpeq	r0, #0
    bac2:	d111      	bne.n	bae8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x5c>
    bac4:	e00a      	b.n	badc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x50>
    bac6:	f8c0 2348 	str.w	r2, [r0, #840]	; 0x348
    baca:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    bace:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bad2:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    bad6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bada:	e7eb      	b.n	bab4 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x28>
    badc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    bae0:	f44f 6000 	mov.w	r0, #2048	; 0x800
    bae4:	f8c2 0280 	str.w	r0, [r2, #640]	; 0x280
    bae8:	4811      	ldr	r0, [pc, #68]	; (bb30 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0xa4>)
    baea:	f04f 32ff 	mov.w	r2, #4294967295
    baee:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    baf2:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    baf6:	f8c0 1140 	str.w	r1, [r0, #320]	; 0x140
    bafa:	f100 0204 	add.w	r2, r0, #4
    bafe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb02:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    bb06:	f102 0204 	add.w	r2, r2, #4
    bb0a:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb0e:	f8c0 1148 	str.w	r1, [r0, #328]	; 0x148
    bb12:	f102 0204 	add.w	r2, r2, #4
    bb16:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    bb1a:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    bb1e:	4770      	bx	lr
    bb20:	fffbfffd 	.word	0xfffbfffd
    bb24:	4000b000 	.word	0x4000b000
    bb28:	200002de 	.word	0x200002de
    bb2c:	fffafffd 	.word	0xfffafffd
    bb30:	40008000 	.word	0x40008000

0000bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>:
    bb34:	b510      	push	{r4, lr}
    bb36:	2807      	cmp	r0, #7
    bb38:	d20d      	bcs.n	bb56 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x22>
    bb3a:	e8df f000 	tbb	[pc, r0]
    bb3e:	0404      	.short	0x0404
    bb40:	06060404 	.word	0x06060404
    bb44:	0006      	.short	0x0006
    bb46:	4906      	ldr	r1, [pc, #24]	; (bb60 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x2c>)
    bb48:	e002      	b.n	bb50 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x1c>
    bb4a:	1f00      	subs	r0, r0, #4
    bb4c:	4905      	ldr	r1, [pc, #20]	; (bb64 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA+0x30>)
    bb4e:	b2c0      	uxtb	r0, r0
    bb50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb54:	bd10      	pop	{r4, pc}
    bb56:	f240 319e 	movw	r1, #926	; 0x39e
    bb5a:	206c      	movs	r0, #108	; 0x6c
    bb5c:	f000 fbfc 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb60:	40008140 	.word	0x40008140
    bb64:	4000b140 	.word	0x4000b140

0000bb68 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    bb68:	b510      	push	{r4, lr}
    bb6a:	2807      	cmp	r0, #7
    bb6c:	d20d      	bcs.n	bb8a <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    bb6e:	e8df f000 	tbb	[pc, r0]
    bb72:	0404      	.short	0x0404
    bb74:	06060404 	.word	0x06060404
    bb78:	0006      	.short	0x0006
    bb7a:	4906      	ldr	r1, [pc, #24]	; (bb94 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    bb7c:	e002      	b.n	bb84 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    bb7e:	1f00      	subs	r0, r0, #4
    bb80:	4905      	ldr	r1, [pc, #20]	; (bb98 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    bb82:	b2c0      	uxtb	r0, r0
    bb84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	f240 319e 	movw	r1, #926	; 0x39e
    bb8e:	206c      	movs	r0, #108	; 0x6c
    bb90:	f000 fbe2 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bb94:	40008140 	.word	0x40008140
    bb98:	4000b140 	.word	0x4000b140

0000bb9c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    bb9c:	b570      	push	{r4, r5, r6, lr}
    bb9e:	481f      	ldr	r0, [pc, #124]	; (bc1c <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x80>)
    bba0:	2400      	movs	r4, #0
    bba2:	2104      	movs	r1, #4
    bba4:	7004      	strb	r4, [r0, #0]
    bba6:	1e80      	subs	r0, r0, #2
    bba8:	7001      	strb	r1, [r0, #0]
    bbaa:	0589      	lsls	r1, r1, #22
    bbac:	60c4      	str	r4, [r0, #12]
    bbae:	6081      	str	r1, [r0, #8]
    bbb0:	f7ff fc54 	bl	b45c <MPSL_IRQ_TIMER0_Handler+0x100>
    bbb4:	2501      	movs	r5, #1
    bbb6:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
    bbba:	02eb      	lsls	r3, r5, #11
    bbbc:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
    bbc0:	f3bf 8f4f 	dsb	sy
    bbc4:	f3bf 8f6f 	isb	sy
    bbc8:	f8cc 3280 	str.w	r3, [ip, #640]	; 0x280
    bbcc:	4814      	ldr	r0, [pc, #80]	; (bc20 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x84>)
    bbce:	6045      	str	r5, [r0, #4]
    bbd0:	6085      	str	r5, [r0, #8]
    bbd2:	4914      	ldr	r1, [pc, #80]	; (bc24 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x88>)
    bbd4:	680a      	ldr	r2, [r1, #0]
    bbd6:	2a00      	cmp	r2, #0
    bbd8:	d1fc      	bne.n	bbd4 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x38>
    bbda:	1e51      	subs	r1, r2, #1
    bbdc:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    bbe0:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    bbe4:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    bbe8:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    bbec:	490e      	ldr	r1, [pc, #56]	; (bc28 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x8c>)
    bbee:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbf2:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    bbf6:	1d09      	adds	r1, r1, #4
    bbf8:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    bbfc:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    bc00:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
    bc04:	f8cc 3100 	str.w	r3, [ip, #256]	; 0x100
    bc08:	6005      	str	r5, [r0, #0]
    bc0a:	f44f 7182 	mov.w	r1, #260	; 0x104
    bc0e:	f8c0 1344 	str.w	r1, [r0, #836]	; 0x344
    bc12:	2102      	movs	r1, #2
    bc14:	f8c0 1304 	str.w	r1, [r0, #772]	; 0x304
    bc18:	bd70      	pop	{r4, r5, r6, pc}
    bc1a:	0000      	.short	0x0000
    bc1c:	200002de 	.word	0x200002de
    bc20:	4000b000 	.word	0x4000b000
    bc24:	4000b504 	.word	0x4000b504
    bc28:	4000b004 	.word	0x4000b004

0000bc2c <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ>:
    bc2c:	4808      	ldr	r0, [pc, #32]	; (bc50 <sym_52O7VXVVZYQGD3Z6C3FDJLGBNMQQ6XC5LJ3IFRQ+0x24>)
    bc2e:	f990 0000 	ldrsb.w	r0, [r0]
    bc32:	2800      	cmp	r0, #0
    bc34:	bfb8      	it	lt
    bc36:	4770      	bxlt	lr
    bc38:	f000 011f 	and.w	r1, r0, #31
    bc3c:	2201      	movs	r2, #1
    bc3e:	fa02 f101 	lsl.w	r1, r2, r1
    bc42:	0940      	lsrs	r0, r0, #5
    bc44:	0080      	lsls	r0, r0, #2
    bc46:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    bc4a:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    bc4e:	4770      	bx	lr
    bc50:	2000036a 	.word	0x2000036a

0000bc54 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI>:
    bc54:	4803      	ldr	r0, [pc, #12]	; (bc64 <sym_7TCBS6SSQW4V3WJBKAXLOSA2HN4KF7UYAM2QFKI+0x10>)
    bc56:	7800      	ldrb	r0, [r0, #0]
    bc58:	2803      	cmp	r0, #3
    bc5a:	bf0c      	ite	eq
    bc5c:	2001      	moveq	r0, #1
    bc5e:	2000      	movne	r0, #0
    bc60:	4770      	bx	lr
    bc62:	0000      	.short	0x0000
    bc64:	2000033c 	.word	0x2000033c

0000bc68 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII>:
    bc68:	4801      	ldr	r0, [pc, #4]	; (bc70 <sym_HUWGHJMM42MANQTSVL3EY7E3VE4XM4JTQUIQAII+0x8>)
    bc6a:	8840      	ldrh	r0, [r0, #2]
    bc6c:	4770      	bx	lr
    bc6e:	0000      	.short	0x0000
    bc70:	2000033c 	.word	0x2000033c

0000bc74 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI>:
    bc74:	4803      	ldr	r0, [pc, #12]	; (bc84 <sym_3RLTHYPNUGF2GJUCXUGLNFS6UK7UWZOBB6PWVDI+0x10>)
    bc76:	7800      	ldrb	r0, [r0, #0]
    bc78:	2802      	cmp	r0, #2
    bc7a:	bf16      	itet	ne
    bc7c:	2803      	cmpne	r0, #3
    bc7e:	2001      	moveq	r0, #1
    bc80:	2000      	movne	r0, #0
    bc82:	4770      	bx	lr
    bc84:	2000033c 	.word	0x2000033c

0000bc88 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY>:
    bc88:	4802      	ldr	r0, [pc, #8]	; (bc94 <sym_476ZEBCLN4VRBESFX6B7F6TMVQVNPVCGXRXSHHY+0xc>)
    bc8a:	2100      	movs	r1, #0
    bc8c:	7001      	strb	r1, [r0, #0]
    bc8e:	8041      	strh	r1, [r0, #2]
    bc90:	4770      	bx	lr
    bc92:	0000      	.short	0x0000
    bc94:	2000033c 	.word	0x2000033c

0000bc98 <MPSL_IRQ_CLOCK_Handler>:
    bc98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bc9c:	4c16      	ldr	r4, [pc, #88]	; (bcf8 <MPSL_IRQ_CLOCK_Handler+0x60>)
    bc9e:	7a60      	ldrb	r0, [r4, #9]
    bca0:	2800      	cmp	r0, #0
    bca2:	d027      	beq.n	bcf4 <MPSL_IRQ_CLOCK_Handler+0x5c>
    bca4:	f44f 7180 	mov.w	r1, #256	; 0x100
    bca8:	058d      	lsls	r5, r1, #22
    bcaa:	4628      	mov	r0, r5
    bcac:	f004 fb77 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcb0:	4680      	mov	r8, r0
    bcb2:	f44f 7182 	mov.w	r1, #260	; 0x104
    bcb6:	4628      	mov	r0, r5
    bcb8:	f004 fb71 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bcbc:	2600      	movs	r6, #0
    bcbe:	4607      	mov	r7, r0
    bcc0:	f1b8 0f00 	cmp.w	r8, #0
    bcc4:	d009      	beq.n	bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcc6:	2001      	movs	r0, #1
    bcc8:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bccc:	7920      	ldrb	r0, [r4, #4]
    bcce:	b120      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd0:	7126      	strb	r6, [r4, #4]
    bcd2:	69e0      	ldr	r0, [r4, #28]
    bcd4:	b108      	cbz	r0, bcda <MPSL_IRQ_CLOCK_Handler+0x42>
    bcd6:	4780      	blx	r0
    bcd8:	61e6      	str	r6, [r4, #28]
    bcda:	b137      	cbz	r7, bcea <MPSL_IRQ_CLOCK_Handler+0x52>
    bcdc:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    bce0:	2002      	movs	r0, #2
    bce2:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bce6:	f000 fa57 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    bcea:	4640      	mov	r0, r8
    bcec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    bcf0:	f000 b858 	b.w	bda4 <MPSL_IRQ_CLOCK_Handler+0x10c>
    bcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bcf8:	200002ec 	.word	0x200002ec
    bcfc:	b510      	push	{r4, lr}
    bcfe:	f004 fbf8 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    bd02:	b930      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd04:	f004 fc16 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bd08:	b918      	cbnz	r0, bd12 <MPSL_IRQ_CLOCK_Handler+0x7a>
    bd0a:	f004 fc49 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    bd0e:	2800      	cmp	r0, #0
    bd10:	d002      	beq.n	bd18 <MPSL_IRQ_CLOCK_Handler+0x80>
    bd12:	4902      	ldr	r1, [pc, #8]	; (bd1c <MPSL_IRQ_CLOCK_Handler+0x84>)
    bd14:	2002      	movs	r0, #2
    bd16:	6008      	str	r0, [r1, #0]
    bd18:	bd10      	pop	{r4, pc}
    bd1a:	0000      	.short	0x0000
    bd1c:	40000c34 	.word	0x40000c34
    bd20:	b570      	push	{r4, r5, r6, lr}
    bd22:	f000 f99b 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bd26:	f000 fa9f 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd2a:	4c09      	ldr	r4, [pc, #36]	; (bd50 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    bd2c:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bd30:	b130      	cbz	r0, bd40 <MPSL_IRQ_CLOCK_Handler+0xa8>
    bd32:	f7ff ffe3 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bd36:	2001      	movs	r0, #1
    bd38:	6128      	str	r0, [r5, #16]
    bd3a:	2004      	movs	r0, #4
    bd3c:	72a0      	strb	r0, [r4, #10]
    bd3e:	e004      	b.n	bd4a <MPSL_IRQ_CLOCK_Handler+0xb2>
    bd40:	2003      	movs	r0, #3
    bd42:	72a0      	strb	r0, [r4, #10]
    bd44:	2001      	movs	r0, #1
    bd46:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bd4a:	2000      	movs	r0, #0
    bd4c:	71e0      	strb	r0, [r4, #7]
    bd4e:	bd70      	pop	{r4, r5, r6, pc}
    bd50:	200002ec 	.word	0x200002ec
    bd54:	b570      	push	{r4, r5, r6, lr}
    bd56:	4c12      	ldr	r4, [pc, #72]	; (bda0 <MPSL_IRQ_CLOCK_Handler+0x108>)
    bd58:	79a0      	ldrb	r0, [r4, #6]
    bd5a:	b1e0      	cbz	r0, bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd5c:	79e1      	ldrb	r1, [r4, #7]
    bd5e:	1e40      	subs	r0, r0, #1
    bd60:	4281      	cmp	r1, r0
    bd62:	da18      	bge.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd64:	f000 fa80 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bd68:	4605      	mov	r5, r0
    bd6a:	f000 fb69 	bl	c440 <mpsl_temperature_get>
    bd6e:	79a1      	ldrb	r1, [r4, #6]
    bd70:	2901      	cmp	r1, #1
    bd72:	d902      	bls.n	bd7a <MPSL_IRQ_CLOCK_Handler+0xe2>
    bd74:	79e1      	ldrb	r1, [r4, #7]
    bd76:	1c49      	adds	r1, r1, #1
    bd78:	71e1      	strb	r1, [r4, #7]
    bd7a:	b10d      	cbz	r5, bd80 <MPSL_IRQ_CLOCK_Handler+0xe8>
    bd7c:	6961      	ldr	r1, [r4, #20]
    bd7e:	e000      	b.n	bd82 <MPSL_IRQ_CLOCK_Handler+0xea>
    bd80:	6921      	ldr	r1, [r4, #16]
    bd82:	1a41      	subs	r1, r0, r1
    bd84:	2902      	cmp	r1, #2
    bd86:	da02      	bge.n	bd8e <MPSL_IRQ_CLOCK_Handler+0xf6>
    bd88:	f111 0f02 	cmn.w	r1, #2
    bd8c:	dc07      	bgt.n	bd9e <MPSL_IRQ_CLOCK_Handler+0x106>
    bd8e:	b10d      	cbz	r5, bd94 <MPSL_IRQ_CLOCK_Handler+0xfc>
    bd90:	6160      	str	r0, [r4, #20]
    bd92:	e000      	b.n	bd96 <MPSL_IRQ_CLOCK_Handler+0xfe>
    bd94:	6120      	str	r0, [r4, #16]
    bd96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd9a:	f7ff bfc1 	b.w	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    bd9e:	bd70      	pop	{r4, r5, r6, pc}
    bda0:	200002ec 	.word	0x200002ec
    bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bda8:	4606      	mov	r6, r0
    bdaa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bdae:	f44f 7186 	mov.w	r1, #268	; 0x10c
    bdb2:	4628      	mov	r0, r5
    bdb4:	f004 faf3 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdb8:	4680      	mov	r8, r0
    bdba:	f44f 7188 	mov.w	r1, #272	; 0x110
    bdbe:	4628      	mov	r0, r5
    bdc0:	f004 faed 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bdc4:	4c27      	ldr	r4, [pc, #156]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    bdc6:	4682      	mov	sl, r0
    bdc8:	7827      	ldrb	r7, [r4, #0]
    bdca:	f104 0008 	add.w	r0, r4, #8
    bdce:	f004 fb5a 	bl	10486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    bdd2:	b110      	cbz	r0, bdda <MPSL_IRQ_CLOCK_Handler+0x142>
    bdd4:	f44f 71db 	mov.w	r1, #438	; 0x1b6
    bdd8:	e016      	b.n	be08 <MPSL_IRQ_CLOCK_Handler+0x170>
    bdda:	f04f 0901 	mov.w	r9, #1
    bdde:	b146      	cbz	r6, bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde0:	7aa0      	ldrb	r0, [r4, #10]
    bde2:	2803      	cmp	r0, #3
    bde4:	d105      	bne.n	bdf2 <MPSL_IRQ_CLOCK_Handler+0x15a>
    bde6:	2004      	movs	r0, #4
    bde8:	72a0      	strb	r0, [r4, #10]
    bdea:	f7ff ff87 	bl	bcfc <MPSL_IRQ_CLOCK_Handler+0x64>
    bdee:	f8c5 9010 	str.w	r9, [r5, #16]
    bdf2:	2600      	movs	r6, #0
    bdf4:	f1b8 0f00 	cmp.w	r8, #0
    bdf8:	d018      	beq.n	be2c <MPSL_IRQ_CLOCK_Handler+0x194>
    bdfa:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    bdfe:	7aa0      	ldrb	r0, [r4, #10]
    be00:	2804      	cmp	r0, #4
    be02:	d004      	beq.n	be0e <MPSL_IRQ_CLOCK_Handler+0x176>
    be04:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    be08:	206d      	movs	r0, #109	; 0x6d
    be0a:	f000 faa5 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    be0e:	f004 fb70 	bl	104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    be12:	b928      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be14:	f004 fb8e 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    be18:	b910      	cbnz	r0, be20 <MPSL_IRQ_CLOCK_Handler+0x188>
    be1a:	f004 fbc1 	bl	105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    be1e:	b108      	cbz	r0, be24 <MPSL_IRQ_CLOCK_Handler+0x18c>
    be20:	4811      	ldr	r0, [pc, #68]	; (be68 <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    be22:	6006      	str	r6, [r0, #0]
    be24:	2002      	movs	r0, #2
    be26:	72a0      	strb	r0, [r4, #10]
    be28:	f000 f8fc 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be2c:	f1ba 0f00 	cmp.w	sl, #0
    be30:	d008      	beq.n	be44 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    be32:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    be36:	7aa0      	ldrb	r0, [r4, #10]
    be38:	2802      	cmp	r0, #2
    be3a:	d101      	bne.n	be40 <MPSL_IRQ_CLOCK_Handler+0x1a8>
    be3c:	f7ff ff8a 	bl	bd54 <MPSL_IRQ_CLOCK_Handler+0xbc>
    be40:	f8c5 9014 	str.w	r9, [r5, #20]
    be44:	b13f      	cbz	r7, be56 <MPSL_IRQ_CLOCK_Handler+0x1be>
    be46:	7026      	strb	r6, [r4, #0]
    be48:	7aa0      	ldrb	r0, [r4, #10]
    be4a:	2802      	cmp	r0, #2
    be4c:	d101      	bne.n	be52 <MPSL_IRQ_CLOCK_Handler+0x1ba>
    be4e:	f7ff ff67 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    be52:	f000 f8e7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    be56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be5a:	4802      	ldr	r0, [pc, #8]	; (be64 <MPSL_IRQ_CLOCK_Handler+0x1cc>)
    be5c:	3008      	adds	r0, #8
    be5e:	f004 bb29 	b.w	104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    be62:	0000      	.short	0x0000
    be64:	200002ec 	.word	0x200002ec
    be68:	40000c34 	.word	0x40000c34
    be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be70:	4c49      	ldr	r4, [pc, #292]	; (bf98 <MPSL_IRQ_CLOCK_Handler+0x300>)
    be72:	2700      	movs	r7, #0
    be74:	4606      	mov	r6, r0
    be76:	61a7      	str	r7, [r4, #24]
    be78:	7842      	ldrb	r2, [r0, #1]
    be7a:	7881      	ldrb	r1, [r0, #2]
    be7c:	7800      	ldrb	r0, [r0, #0]
    be7e:	72e0      	strb	r0, [r4, #11]
    be80:	7162      	strb	r2, [r4, #5]
    be82:	71a1      	strb	r1, [r4, #6]
    be84:	71e7      	strb	r7, [r4, #7]
    be86:	f04f 0801 	mov.w	r8, #1
    be8a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    be8e:	2805      	cmp	r0, #5
    be90:	d225      	bcs.n	bede <MPSL_IRQ_CLOCK_Handler+0x246>
    be92:	e8df f000 	tbb	[pc, r0]
    be96:	0310      	.short	0x0310
    be98:	00222006 	.word	0x00222006
    be9c:	f8c4 8018 	str.w	r8, [r4, #24]
    bea0:	e009      	b.n	beb6 <MPSL_IRQ_CLOCK_Handler+0x21e>
    bea2:	f000 f8db 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    bea6:	2101      	movs	r1, #1
    bea8:	4628      	mov	r0, r5
    beaa:	f004 fa7d 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    beae:	2800      	cmp	r0, #0
    beb0:	d0f9      	beq.n	bea6 <MPSL_IRQ_CLOCK_Handler+0x20e>
    beb2:	2002      	movs	r0, #2
    beb4:	61a0      	str	r0, [r4, #24]
    beb6:	f004 faa3 	bl	10400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    beba:	b1c0      	cbz	r0, beee <MPSL_IRQ_CLOCK_Handler+0x256>
    bebc:	f000 f9ee 	bl	c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    bec0:	7e21      	ldrb	r1, [r4, #24]
    bec2:	f001 0103 	and.w	r1, r1, #3
    bec6:	4288      	cmp	r0, r1
    bec8:	d111      	bne.n	beee <MPSL_IRQ_CLOCK_Handler+0x256>
    beca:	79b0      	ldrb	r0, [r6, #6]
    becc:	b160      	cbz	r0, bee8 <MPSL_IRQ_CLOCK_Handler+0x250>
    bece:	2002      	movs	r0, #2
    bed0:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bed4:	e044      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bed6:	4831      	ldr	r0, [pc, #196]	; (bf9c <MPSL_IRQ_CLOCK_Handler+0x304>)
    bed8:	e7ec      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    beda:	4831      	ldr	r0, [pc, #196]	; (bfa0 <MPSL_IRQ_CLOCK_Handler+0x308>)
    bedc:	e7ea      	b.n	beb4 <MPSL_IRQ_CLOCK_Handler+0x21c>
    bede:	f240 313d 	movw	r1, #829	; 0x33d
    bee2:	206d      	movs	r0, #109	; 0x6d
    bee4:	f000 fa38 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bee8:	f000 f9ac 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    beec:	e038      	b.n	bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    beee:	f8c5 800c 	str.w	r8, [r5, #12]
    bef2:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bef6:	69a0      	ldr	r0, [r4, #24]
    bef8:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    befc:	f004 fae5 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf00:	b940      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf02:	f004 faec 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf06:	b928      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf08:	f004 fb00 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf0c:	b910      	cbnz	r0, bf14 <MPSL_IRQ_CLOCK_Handler+0x27c>
    bf0e:	f004 fb11 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf12:	b138      	cbz	r0, bf24 <MPSL_IRQ_CLOCK_Handler+0x28c>
    bf14:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    bf18:	f8d0 0244 	ldr.w	r0, [r0, #580]	; 0x244
    bf1c:	4921      	ldr	r1, [pc, #132]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf1e:	f3c0 3042 	ubfx	r0, r0, #13, #3
    bf22:	6008      	str	r0, [r1, #0]
    bf24:	f004 fad1 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    bf28:	b940      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf2a:	f004 fad8 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    bf2e:	b928      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf30:	f004 faec 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    bf34:	b910      	cbnz	r0, bf3c <MPSL_IRQ_CLOCK_Handler+0x2a4>
    bf36:	f004 fafd 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    bf3a:	b118      	cbz	r0, bf44 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    bf3c:	4919      	ldr	r1, [pc, #100]	; (bfa4 <MPSL_IRQ_CLOCK_Handler+0x30c>)
    bf3e:	3110      	adds	r1, #16
    bf40:	f8c1 8000 	str.w	r8, [r1]
    bf44:	f8c5 8008 	str.w	r8, [r5, #8]
    bf48:	2002      	movs	r0, #2
    bf4a:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    bf4e:	79b0      	ldrb	r0, [r6, #6]
    bf50:	b930      	cbnz	r0, bf60 <MPSL_IRQ_CLOCK_Handler+0x2c8>
    bf52:	f000 f829 	bl	bfa8 <MPSL_IRQ_CLOCK_Handler+0x310>
    bf56:	2002      	movs	r0, #2
    bf58:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    bf5c:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
    bf60:	79a0      	ldrb	r0, [r4, #6]
    bf62:	b170      	cbz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf64:	7830      	ldrb	r0, [r6, #0]
    bf66:	b960      	cbnz	r0, bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf68:	f000 f97e 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    bf6c:	4606      	mov	r6, r0
    bf6e:	f000 fa67 	bl	c440 <mpsl_temperature_get>
    bf72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    bf76:	b116      	cbz	r6, bf7e <MPSL_IRQ_CLOCK_Handler+0x2e6>
    bf78:	e9c4 1004 	strd	r1, r0, [r4, #16]
    bf7c:	e001      	b.n	bf82 <MPSL_IRQ_CLOCK_Handler+0x2ea>
    bf7e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    bf82:	2101      	movs	r1, #1
    bf84:	4628      	mov	r0, r5
    bf86:	f004 fa0f 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    bf8a:	b108      	cbz	r0, bf90 <MPSL_IRQ_CLOCK_Handler+0x2f8>
    bf8c:	f000 f966 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    bf90:	72a7      	strb	r7, [r4, #10]
    bf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bf96:	0000      	.short	0x0000
    bf98:	200002ec 	.word	0x200002ec
    bf9c:	00020001 	.word	0x00020001
    bfa0:	00030001 	.word	0x00030001
    bfa4:	4000053c 	.word	0x4000053c
    bfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bfac:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    bfb0:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    bfb4:	f010 0f02 	tst.w	r0, #2
    bfb8:	d011      	beq.n	bfde <MPSL_IRQ_CLOCK_Handler+0x346>
    bfba:	4c16      	ldr	r4, [pc, #88]	; (c014 <MPSL_IRQ_CLOCK_Handler+0x37c>)
    bfbc:	6820      	ldr	r0, [r4, #0]
    bfbe:	43c0      	mvns	r0, r0
    bfc0:	f340 1600 	sbfx	r6, r0, #4, #1
    bfc4:	6820      	ldr	r0, [r4, #0]
    bfc6:	f040 0010 	orr.w	r0, r0, #16
    bfca:	6020      	str	r0, [r4, #0]
    bfcc:	f44f 7782 	mov.w	r7, #260	; 0x104
    bfd0:	4639      	mov	r1, r7
    bfd2:	4628      	mov	r0, r5
    bfd4:	1c76      	adds	r6, r6, #1
    bfd6:	f004 f9e2 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bfda:	b128      	cbz	r0, bfe8 <MPSL_IRQ_CLOCK_Handler+0x350>
    bfdc:	e00a      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfde:	f44f 713e 	mov.w	r1, #760	; 0x2f8
    bfe2:	206d      	movs	r0, #109	; 0x6d
    bfe4:	f000 f9b8 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    bfe8:	f004 fae6 	bl	105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>
    bfec:	e002      	b.n	bff4 <MPSL_IRQ_CLOCK_Handler+0x35c>
    bfee:	bf00      	nop
    bff0:	f004 fae0 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    bff4:	4639      	mov	r1, r7
    bff6:	4628      	mov	r0, r5
    bff8:	f004 f9d1 	bl	1039e <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x56>
    bffc:	2800      	cmp	r0, #0
    bffe:	d0f7      	beq.n	bff0 <MPSL_IRQ_CLOCK_Handler+0x358>
    c000:	f000 f920 	bl	c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    c004:	2e00      	cmp	r6, #0
    c006:	d103      	bne.n	c010 <MPSL_IRQ_CLOCK_Handler+0x378>
    c008:	6820      	ldr	r0, [r4, #0]
    c00a:	f020 0010 	bic.w	r0, r0, #16
    c00e:	6020      	str	r0, [r4, #0]
    c010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c014:	e000ed10 	.word	0xe000ed10

0000c018 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q>:
    c018:	4801      	ldr	r0, [pc, #4]	; (c020 <sym_MGDULS4U2D5VQ5NBLZDC7UTSC6O3GJASJZPQJ2Q+0x8>)
    c01a:	89c0      	ldrh	r0, [r0, #14]
    c01c:	4770      	bx	lr
    c01e:	0000      	.short	0x0000
    c020:	200002ec 	.word	0x200002ec

0000c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    c024:	b510      	push	{r4, lr}
    c026:	f3ef 8410 	mrs	r4, PRIMASK
    c02a:	b672      	cpsid	i
    c02c:	480a      	ldr	r0, [pc, #40]	; (c058 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    c02e:	7841      	ldrb	r1, [r0, #1]
    c030:	b129      	cbz	r1, c03e <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    c032:	7841      	ldrb	r1, [r0, #1]
    c034:	1e49      	subs	r1, r1, #1
    c036:	7041      	strb	r1, [r0, #1]
    c038:	7841      	ldrb	r1, [r0, #1]
    c03a:	b129      	cbz	r1, c048 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    c03c:	e008      	b.n	c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c03e:	f240 1119 	movw	r1, #281	; 0x119
    c042:	206d      	movs	r0, #109	; 0x6d
    c044:	f000 f988 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c048:	7880      	ldrb	r0, [r0, #2]
    c04a:	b908      	cbnz	r0, c050 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    c04c:	f000 f91a 	bl	c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    c050:	2c00      	cmp	r4, #0
    c052:	d100      	bne.n	c056 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    c054:	b662      	cpsie	i
    c056:	bd10      	pop	{r4, pc}
    c058:	200002ec 	.word	0x200002ec

0000c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    c05c:	b510      	push	{r4, lr}
    c05e:	f3ef 8410 	mrs	r4, PRIMASK
    c062:	b672      	cpsid	i
    c064:	4806      	ldr	r0, [pc, #24]	; (c080 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    c066:	7841      	ldrb	r1, [r0, #1]
    c068:	1c49      	adds	r1, r1, #1
    c06a:	7041      	strb	r1, [r0, #1]
    c06c:	7840      	ldrb	r0, [r0, #1]
    c06e:	2801      	cmp	r0, #1
    c070:	d101      	bne.n	c076 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    c072:	f004 f9b0 	bl	103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    c076:	2c00      	cmp	r4, #0
    c078:	d100      	bne.n	c07c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    c07a:	b662      	cpsie	i
    c07c:	bd10      	pop	{r4, pc}
    c07e:	0000      	.short	0x0000
    c080:	200002ec 	.word	0x200002ec

0000c084 <mpsl_clock_hfclk_release>:
    c084:	4805      	ldr	r0, [pc, #20]	; (c09c <mpsl_clock_hfclk_release+0x18>)
    c086:	b510      	push	{r4, lr}
    c088:	78c1      	ldrb	r1, [r0, #3]
    c08a:	b121      	cbz	r1, c096 <mpsl_clock_hfclk_release+0x12>
    c08c:	2100      	movs	r1, #0
    c08e:	7101      	strb	r1, [r0, #4]
    c090:	70c1      	strb	r1, [r0, #3]
    c092:	f7ff ffc7 	bl	c024 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    c096:	2000      	movs	r0, #0
    c098:	bd10      	pop	{r4, pc}
    c09a:	0000      	.short	0x0000
    c09c:	200002ec 	.word	0x200002ec

0000c0a0 <mpsl_clock_hfclk_request>:
    c0a0:	b570      	push	{r4, r5, r6, lr}
    c0a2:	4c0c      	ldr	r4, [pc, #48]	; (c0d4 <mpsl_clock_hfclk_request+0x34>)
    c0a4:	78e1      	ldrb	r1, [r4, #3]
    c0a6:	b961      	cbnz	r1, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0a8:	2501      	movs	r5, #1
    c0aa:	70e5      	strb	r5, [r4, #3]
    c0ac:	61e0      	str	r0, [r4, #28]
    c0ae:	f7ff ffd5 	bl	c05c <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    c0b2:	f000 f8d9 	bl	c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    c0b6:	b130      	cbz	r0, c0c6 <mpsl_clock_hfclk_request+0x26>
    c0b8:	69e0      	ldr	r0, [r4, #28]
    c0ba:	b110      	cbz	r0, c0c2 <mpsl_clock_hfclk_request+0x22>
    c0bc:	4780      	blx	r0
    c0be:	2000      	movs	r0, #0
    c0c0:	61e0      	str	r0, [r4, #28]
    c0c2:	2000      	movs	r0, #0
    c0c4:	bd70      	pop	{r4, r5, r6, pc}
    c0c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c0ca:	7125      	strb	r5, [r4, #4]
    c0cc:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    c0d0:	e7f7      	b.n	c0c2 <mpsl_clock_hfclk_request+0x22>
    c0d2:	0000      	.short	0x0000
    c0d4:	200002ec 	.word	0x200002ec

0000c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0dc:	0005      	movs	r5, r0
    c0de:	f06f 0015 	mvn.w	r0, #21
    c0e2:	d03f      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0e4:	7829      	ldrb	r1, [r5, #0]
    c0e6:	2904      	cmp	r1, #4
    c0e8:	d83c      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0ea:	2900      	cmp	r1, #0
    c0ec:	7869      	ldrb	r1, [r5, #1]
    c0ee:	d03b      	beq.n	c168 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x90>
    c0f0:	2900      	cmp	r1, #0
    c0f2:	d137      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0f4:	78a9      	ldrb	r1, [r5, #2]
    c0f6:	2900      	cmp	r1, #0
    c0f8:	d134      	bne.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c0fa:	2000      	movs	r0, #0
    c0fc:	f004 f93e 	bl	1037c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x34>
    c100:	2000      	movs	r0, #0
    c102:	f004 f92e 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c106:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    c10a:	f04f 31ff 	mov.w	r1, #4294967295
    c10e:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    c112:	2600      	movs	r6, #0
    c114:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    c118:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    c11c:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    c120:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    c124:	4c14      	ldr	r4, [pc, #80]	; (c178 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    c126:	7066      	strb	r6, [r4, #1]
    c128:	88a8      	ldrh	r0, [r5, #4]
    c12a:	81a0      	strh	r0, [r4, #12]
    c12c:	f004 f94a 	bl	103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    c130:	2701      	movs	r7, #1
    c132:	b108      	cbz	r0, c138 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    c134:	70e7      	strb	r7, [r4, #3]
    c136:	7067      	strb	r7, [r4, #1]
    c138:	2101      	movs	r1, #1
    c13a:	4640      	mov	r0, r8
    c13c:	f004 f934 	bl	103a8 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x60>
    c140:	b108      	cbz	r0, c146 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    c142:	f000 f88b 	bl	c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    c146:	f240 50f5 	movw	r0, #1525	; 0x5f5
    c14a:	81e0      	strh	r0, [r4, #14]
    c14c:	4628      	mov	r0, r5
    c14e:	f7ff fe8d 	bl	be6c <MPSL_IRQ_CLOCK_Handler+0x1d4>
    c152:	7267      	strb	r7, [r4, #9]
    c154:	2000      	movs	r0, #0
    c156:	f004 f904 	bl	10362 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x1a>
    c15a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    c15e:	4630      	mov	r0, r6
    c160:	f8c1 7100 	str.w	r7, [r1, #256]	; 0x100
    c164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c168:	2900      	cmp	r1, #0
    c16a:	d0fb      	beq.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c16c:	2920      	cmp	r1, #32
    c16e:	d8f9      	bhi.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c170:	78a9      	ldrb	r1, [r5, #2]
    c172:	2921      	cmp	r1, #33	; 0x21
    c174:	d9c1      	bls.n	c0fa <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    c176:	e7f5      	b.n	c164 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8c>
    c178:	200002ec 	.word	0x200002ec

0000c17c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    c17c:	4801      	ldr	r0, [pc, #4]	; (c184 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    c17e:	8980      	ldrh	r0, [r0, #12]
    c180:	4770      	bx	lr
    c182:	0000      	.short	0x0000
    c184:	200002ec 	.word	0x200002ec

0000c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    c188:	4802      	ldr	r0, [pc, #8]	; (c194 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    c18a:	7a80      	ldrb	r0, [r0, #10]
    c18c:	2800      	cmp	r0, #0
    c18e:	d000      	beq.n	c192 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    c190:	2001      	movs	r0, #1
    c192:	4770      	bx	lr
    c194:	200002ec 	.word	0x200002ec

0000c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    c198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c19a:	4d1f      	ldr	r5, [pc, #124]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c19c:	7ae8      	ldrb	r0, [r5, #11]
    c19e:	2800      	cmp	r0, #0
    c1a0:	d10f      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1a2:	7e28      	ldrb	r0, [r5, #24]
    c1a4:	f000 0003 	and.w	r0, r0, #3
    c1a8:	f004 f91a 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c1ac:	2800      	cmp	r0, #0
    c1ae:	d008      	beq.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1b0:	f3ef 8110 	mrs	r1, PRIMASK
    c1b4:	b672      	cpsid	i
    c1b6:	f7ff ffe7 	bl	c188 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    c1ba:	b118      	cbz	r0, c1c4 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    c1bc:	2900      	cmp	r1, #0
    c1be:	d100      	bne.n	c1c2 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    c1c0:	b662      	cpsie	i
    c1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c1c4:	2601      	movs	r6, #1
    c1c6:	72ae      	strb	r6, [r5, #10]
    c1c8:	b901      	cbnz	r1, c1cc <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    c1ca:	b662      	cpsie	i
    c1cc:	2018      	movs	r0, #24
    c1ce:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    c1d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c1d6:	61a6      	str	r6, [r4, #24]
    c1d8:	f44f 7020 	mov.w	r0, #640	; 0x280
    c1dc:	f8ad 0000 	strh.w	r0, [sp]
    c1e0:	f8bd 0000 	ldrh.w	r0, [sp]
    c1e4:	1e41      	subs	r1, r0, #1
    c1e6:	f8ad 1000 	strh.w	r1, [sp]
    c1ea:	d2f9      	bcs.n	c1e0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    c1ec:	2700      	movs	r7, #0
    c1ee:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    c1f2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    c1f6:	4808      	ldr	r0, [pc, #32]	; (c218 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    c1f8:	3008      	adds	r0, #8
    c1fa:	f004 f957 	bl	104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    c1fe:	702f      	strb	r7, [r5, #0]
    c200:	f7ff fd8e 	bl	bd20 <MPSL_IRQ_CLOCK_Handler+0x88>
    c204:	6166      	str	r6, [r4, #20]
    c206:	7968      	ldrb	r0, [r5, #5]
    c208:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    c20c:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    c210:	2018      	movs	r0, #24
    c212:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c218:	200002ec 	.word	0x200002ec

0000c21c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c21c:	4602      	mov	r2, r0
    c21e:	b510      	push	{r4, lr}
    c220:	2000      	movs	r0, #0
    c222:	2900      	cmp	r1, #0
    c224:	d00a      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c226:	2a00      	cmp	r2, #0
    c228:	d008      	beq.n	c23c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x20>
    c22a:	fba2 0101 	umull	r0, r1, r2, r1
    c22e:	1e40      	subs	r0, r0, #1
    c230:	4a03      	ldr	r2, [pc, #12]	; (c240 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x24>)
    c232:	f141 31ff 	adc.w	r1, r1, #4294967295
    c236:	f004 f9c1 	bl	105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>
    c23a:	1c40      	adds	r0, r0, #1
    c23c:	bd10      	pop	{r4, pc}
    c23e:	0000      	.short	0x0000
    c240:	000f4240 	.word	0x000f4240

0000c244 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    c244:	b510      	push	{r4, lr}
    c246:	4c04      	ldr	r4, [pc, #16]	; (c258 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    c248:	7e20      	ldrb	r0, [r4, #24]
    c24a:	f000 0003 	and.w	r0, r0, #3
    c24e:	f004 f8c7 	bl	103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    c252:	2800      	cmp	r0, #0
    c254:	d0f8      	beq.n	c248 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    c256:	bd10      	pop	{r4, pc}
    c258:	200002ec 	.word	0x200002ec

0000c25c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    c25c:	4901      	ldr	r1, [pc, #4]	; (c264 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    c25e:	2001      	movs	r0, #1
    c260:	7008      	strb	r0, [r1, #0]
    c262:	4770      	bx	lr
    c264:	2000036b 	.word	0x2000036b

0000c268 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    c268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c26c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c270:	b918      	cbnz	r0, c27a <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    c272:	4803      	ldr	r0, [pc, #12]	; (c280 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    c274:	7800      	ldrb	r0, [r0, #0]
    c276:	2800      	cmp	r0, #0
    c278:	d000      	beq.n	c27c <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    c27a:	2001      	movs	r0, #1
    c27c:	4770      	bx	lr
    c27e:	0000      	.short	0x0000
    c280:	2000036b 	.word	0x2000036b

0000c284 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    c284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c288:	2101      	movs	r1, #1
    c28a:	6041      	str	r1, [r0, #4]
    c28c:	2100      	movs	r1, #0
    c28e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c292:	4801      	ldr	r0, [pc, #4]	; (c298 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    c294:	7001      	strb	r1, [r0, #0]
    c296:	4770      	bx	lr
    c298:	2000036b 	.word	0x2000036b

0000c29c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    c29c:	4802      	ldr	r0, [pc, #8]	; (c2a8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    c29e:	6800      	ldr	r0, [r0, #0]
    c2a0:	f000 0003 	and.w	r0, r0, #3
    c2a4:	4770      	bx	lr
    c2a6:	0000      	.short	0x0000
    c2a8:	4000041c 	.word	0x4000041c
    c2ac:	b510      	push	{r4, lr}
    c2ae:	b131      	cbz	r1, c2be <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    c2b0:	2901      	cmp	r1, #1
    c2b2:	d007      	beq.n	c2c4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    c2b4:	f240 3102 	movw	r1, #770	; 0x302
    c2b8:	a005      	add	r0, pc, #20	; (adr r0, c2d0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    c2ba:	f000 f821 	bl	c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    c2be:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    c2c2:	e001      	b.n	c2c8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    c2c4:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    c2c8:	f000 0001 	and.w	r0, r0, #1
    c2cc:	bd10      	pop	{r4, pc}
    c2ce:	0000      	.short	0x0000
    c2d0:	5f66726e 	.word	0x5f66726e
    c2d4:	636f6c63 	.word	0x636f6c63
    c2d8:	00682e6b 	.word	0x00682e6b
    c2dc:	f3bf 8f4f 	dsb	sy
    c2e0:	4805      	ldr	r0, [pc, #20]	; (c2f8 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    c2e2:	6801      	ldr	r1, [r0, #0]
    c2e4:	4a05      	ldr	r2, [pc, #20]	; (c2fc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    c2e6:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    c2ea:	4311      	orrs	r1, r2
    c2ec:	6001      	str	r1, [r0, #0]
    c2ee:	f3bf 8f4f 	dsb	sy
    c2f2:	bf00      	nop
    c2f4:	e7fd      	b.n	c2f2 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    c2f6:	0000      	.short	0x0000
    c2f8:	e000ed0c 	.word	0xe000ed0c
    c2fc:	05fa0004 	.word	0x05fa0004

0000c300 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    c300:	b672      	cpsid	i
    c302:	4a03      	ldr	r2, [pc, #12]	; (c310 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    c304:	6852      	ldr	r2, [r2, #4]
    c306:	b102      	cbz	r2, c30a <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    c308:	4790      	blx	r2
    c30a:	f7ff ffe7 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c30e:	0000      	.short	0x0000
    c310:	2000030c 	.word	0x2000030c
    c314:	4806      	ldr	r0, [pc, #24]	; (c330 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    c316:	b510      	push	{r4, lr}
    c318:	2100      	movs	r1, #0
    c31a:	6001      	str	r1, [r0, #0]
    c31c:	2101      	movs	r1, #1
    c31e:	6001      	str	r1, [r0, #0]
    c320:	4608      	mov	r0, r1
    c322:	f004 f884 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c32a:	2001      	movs	r0, #1
    c32c:	f004 b872 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c330:	40001ffc 	.word	0x40001ffc
    c334:	4807      	ldr	r0, [pc, #28]	; (c354 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    c336:	b510      	push	{r4, lr}
    c338:	2101      	movs	r1, #1
    c33a:	6041      	str	r1, [r0, #4]
    c33c:	1e89      	subs	r1, r1, #2
    c33e:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    c342:	200c      	movs	r0, #12
    c344:	f004 f873 	bl	1042e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c34c:	200c      	movs	r0, #12
    c34e:	f004 b861 	b.w	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c352:	0000      	.short	0x0000
    c354:	4000c000 	.word	0x4000c000

0000c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    c358:	b50e      	push	{r1, r2, r3, lr}
    c35a:	b672      	cpsid	i
    c35c:	4a0f      	ldr	r2, [pc, #60]	; (c39c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    c35e:	6855      	ldr	r5, [r2, #4]
    c360:	b1d5      	cbz	r5, c398 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    c362:	2200      	movs	r2, #0
    c364:	4603      	mov	r3, r0
    c366:	466e      	mov	r6, sp
    c368:	240a      	movs	r4, #10
    c36a:	e003      	b.n	c374 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    c36c:	fbb0 f0f4 	udiv	r0, r0, r4
    c370:	1c52      	adds	r2, r2, #1
    c372:	b2d2      	uxtb	r2, r2
    c374:	2800      	cmp	r0, #0
    c376:	d1f9      	bne.n	c36c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    c378:	54b0      	strb	r0, [r6, r2]
    c37a:	e009      	b.n	c390 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    c37c:	fbb3 f0f4 	udiv	r0, r3, r4
    c380:	fb04 3010 	mls	r0, r4, r0, r3
    c384:	fbb3 f3f4 	udiv	r3, r3, r4
    c388:	1e52      	subs	r2, r2, #1
    c38a:	b2d2      	uxtb	r2, r2
    c38c:	3030      	adds	r0, #48	; 0x30
    c38e:	54b0      	strb	r0, [r6, r2]
    c390:	2a00      	cmp	r2, #0
    c392:	d1f3      	bne.n	c37c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    c394:	4630      	mov	r0, r6
    c396:	47a8      	blx	r5
    c398:	f7ff ffa0 	bl	c2dc <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    c39c:	2000030c 	.word	0x2000030c

0000c3a0 <mpsl_init>:
    c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3a4:	4c18      	ldr	r4, [pc, #96]	; (c408 <mpsl_init+0x68>)
    c3a6:	4606      	mov	r6, r0
    c3a8:	4617      	mov	r7, r2
    c3aa:	7860      	ldrb	r0, [r4, #1]
    c3ac:	460d      	mov	r5, r1
    c3ae:	b118      	cbz	r0, c3b8 <mpsl_init+0x18>
    c3b0:	f04f 30ff 	mov.w	r0, #4294967295
    c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c3b8:	f7fc fbe2 	bl	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
    c3bc:	b906      	cbnz	r6, c3c0 <mpsl_init+0x20>
    c3be:	4e13      	ldr	r6, [pc, #76]	; (c40c <mpsl_init+0x6c>)
    c3c0:	6067      	str	r7, [r4, #4]
    c3c2:	7025      	strb	r5, [r4, #0]
    c3c4:	f7ff ffa6 	bl	c314 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    c3c8:	f7ff ffb4 	bl	c334 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    c3cc:	4630      	mov	r0, r6
    c3ce:	f7ff fe83 	bl	c0d8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    c3d2:	0006      	movs	r6, r0
    c3d4:	d1ee      	bne.n	c3b4 <mpsl_init+0x14>
    c3d6:	f7fe fe7d 	bl	b0d4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    c3da:	f7ff fedd 	bl	c198 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    c3de:	f003 ff98 	bl	10312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    c3e2:	4628      	mov	r0, r5
    c3e4:	f004 f816 	bl	10414 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    c3e8:	2001      	movs	r0, #1
    c3ea:	2d00      	cmp	r5, #0
    c3ec:	db09      	blt.n	c402 <mpsl_init+0x62>
    c3ee:	f005 011f 	and.w	r1, r5, #31
    c3f2:	fa00 f101 	lsl.w	r1, r0, r1
    c3f6:	096a      	lsrs	r2, r5, #5
    c3f8:	0092      	lsls	r2, r2, #2
    c3fa:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    c3fe:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    c402:	7060      	strb	r0, [r4, #1]
    c404:	4630      	mov	r0, r6
    c406:	e7d5      	b.n	c3b4 <mpsl_init+0x14>
    c408:	2000030c 	.word	0x2000030c
    c40c:	00010450 	.word	0x00010450

0000c410 <mpsl_is_initialized>:
    c410:	4801      	ldr	r0, [pc, #4]	; (c418 <mpsl_is_initialized+0x8>)
    c412:	7840      	ldrb	r0, [r0, #1]
    c414:	4770      	bx	lr
    c416:	0000      	.short	0x0000
    c418:	2000030c 	.word	0x2000030c

0000c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    c41c:	4807      	ldr	r0, [pc, #28]	; (c43c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    c41e:	f990 0000 	ldrsb.w	r0, [r0]
    c422:	2800      	cmp	r0, #0
    c424:	db09      	blt.n	c43a <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    c426:	f000 021f 	and.w	r2, r0, #31
    c42a:	2101      	movs	r1, #1
    c42c:	4091      	lsls	r1, r2
    c42e:	0940      	lsrs	r0, r0, #5
    c430:	0080      	lsls	r0, r0, #2
    c432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c436:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c43a:	4770      	bx	lr
    c43c:	2000030c 	.word	0x2000030c

0000c440 <mpsl_temperature_get>:
    c440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c444:	2601      	movs	r6, #1
    c446:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c44a:	0331      	lsls	r1, r6, #12
    c44c:	f04f 0800 	mov.w	r8, #0
    c450:	4640      	mov	r0, r8
    c452:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    c456:	f3bf 8f4f 	dsb	sy
    c45a:	f3bf 8f6f 	isb	sy
    c45e:	4c16      	ldr	r4, [pc, #88]	; (c4b8 <mpsl_temperature_get+0x78>)
    c460:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    c464:	200c      	movs	r0, #12
    c466:	f004 f801 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c46a:	4d14      	ldr	r5, [pc, #80]	; (c4bc <mpsl_temperature_get+0x7c>)
    c46c:	6828      	ldr	r0, [r5, #0]
    c46e:	43c0      	mvns	r0, r0
    c470:	f340 1700 	sbfx	r7, r0, #4, #1
    c474:	6828      	ldr	r0, [r5, #0]
    c476:	f040 0010 	orr.w	r0, r0, #16
    c47a:	6028      	str	r0, [r5, #0]
    c47c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    c480:	6026      	str	r6, [r4, #0]
    c482:	1c7f      	adds	r7, r7, #1
    c484:	e002      	b.n	c48c <mpsl_temperature_get+0x4c>
    c486:	bf00      	nop
    c488:	f004 f894 	bl	105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c48c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    c490:	2800      	cmp	r0, #0
    c492:	d0f9      	beq.n	c488 <mpsl_temperature_get+0x48>
    c494:	b91f      	cbnz	r7, c49e <mpsl_temperature_get+0x5e>
    c496:	6828      	ldr	r0, [r5, #0]
    c498:	f020 0010 	bic.w	r0, r0, #16
    c49c:	6028      	str	r0, [r5, #0]
    c49e:	4808      	ldr	r0, [pc, #32]	; (c4c0 <mpsl_temperature_get+0x80>)
    c4a0:	6805      	ldr	r5, [r0, #0]
    c4a2:	6066      	str	r6, [r4, #4]
    c4a4:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    c4a8:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    c4ac:	200c      	movs	r0, #12
    c4ae:	f003 ffdd 	bl	1046c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    c4b2:	4628      	mov	r0, r5
    c4b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c4b8:	4000c000 	.word	0x4000c000
    c4bc:	e000ed10 	.word	0xe000ed10
    c4c0:	4000c508 	.word	0x4000c508

0000c4c4 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    c4c4:	b510      	push	{r4, lr}
    c4c6:	4602      	mov	r2, r0
    c4c8:	2005      	movs	r0, #5
    c4ca:	490c      	ldr	r1, [pc, #48]	; (c4fc <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    c4cc:	e004      	b.n	c4d8 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    c4ce:	bf00      	nop
    c4d0:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    c4d4:	791b      	ldrb	r3, [r3, #4]
    c4d6:	b133      	cbz	r3, c4e6 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    c4d8:	1e40      	subs	r0, r0, #1
    c4da:	b2c0      	uxtb	r0, r0
    c4dc:	d2f8      	bcs.n	c4d0 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    c4de:	2148      	movs	r1, #72	; 0x48
    c4e0:	2069      	movs	r0, #105	; 0x69
    c4e2:	f7ff ff39 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c4e6:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    c4ea:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    c4ee:	2200      	movs	r2, #0
    c4f0:	714a      	strb	r2, [r1, #5]
    c4f2:	718a      	strb	r2, [r1, #6]
    c4f4:	2201      	movs	r2, #1
    c4f6:	710a      	strb	r2, [r1, #4]
    c4f8:	bd10      	pop	{r4, pc}
    c4fa:	0000      	.short	0x0000
    c4fc:	200012a4 	.word	0x200012a4

0000c500 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    c500:	b510      	push	{r4, lr}
    c502:	2805      	cmp	r0, #5
    c504:	d301      	bcc.n	c50a <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    c506:	2158      	movs	r1, #88	; 0x58
    c508:	e006      	b.n	c518 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    c50a:	490a      	ldr	r1, [pc, #40]	; (c534 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    c50c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    c510:	7901      	ldrb	r1, [r0, #4]
    c512:	2901      	cmp	r1, #1
    c514:	d003      	beq.n	c51e <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    c516:	2159      	movs	r1, #89	; 0x59
    c518:	2069      	movs	r0, #105	; 0x69
    c51a:	f7ff ff1d 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c51e:	7941      	ldrb	r1, [r0, #5]
    c520:	7982      	ldrb	r2, [r0, #6]
    c522:	1c49      	adds	r1, r1, #1
    c524:	b2c9      	uxtb	r1, r1
    c526:	428a      	cmp	r2, r1
    c528:	d000      	beq.n	c52c <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    c52a:	7141      	strb	r1, [r0, #5]
    c52c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c530:	f7ff bf74 	b.w	c41c <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    c534:	200012a4 	.word	0x200012a4

0000c538 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY>:
    c538:	b510      	push	{r4, lr}
    c53a:	2805      	cmp	r0, #5
    c53c:	d303      	bcc.n	c546 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0xe>
    c53e:	214f      	movs	r1, #79	; 0x4f
    c540:	2069      	movs	r0, #105	; 0x69
    c542:	f7ff ff09 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c546:	4a03      	ldr	r2, [pc, #12]	; (c554 <sym_BJJ4JJDCVJTQH3OQZK6RMMOLISQZEJEZ3BJOKJY+0x1c>)
    c548:	2100      	movs	r1, #0
    c54a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    c54e:	7101      	strb	r1, [r0, #4]
    c550:	bd10      	pop	{r4, pc}
    c552:	0000      	.short	0x0000
    c554:	200012a4 	.word	0x200012a4

0000c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    c558:	b570      	push	{r4, r5, r6, lr}
    c55a:	2505      	movs	r5, #5
    c55c:	4e0e      	ldr	r6, [pc, #56]	; (c598 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    c55e:	4c0f      	ldr	r4, [pc, #60]	; (c59c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    c560:	e016      	b.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c562:	7821      	ldrb	r1, [r4, #0]
    c564:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    c568:	7902      	ldrb	r2, [r0, #4]
    c56a:	2a01      	cmp	r2, #1
    c56c:	d108      	bne.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c56e:	7942      	ldrb	r2, [r0, #5]
    c570:	7983      	ldrb	r3, [r0, #6]
    c572:	429a      	cmp	r2, r3
    c574:	d004      	beq.n	c580 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    c576:	7942      	ldrb	r2, [r0, #5]
    c578:	7182      	strb	r2, [r0, #6]
    c57a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    c57e:	4780      	blx	r0
    c580:	7820      	ldrb	r0, [r4, #0]
    c582:	1c40      	adds	r0, r0, #1
    c584:	b2c0      	uxtb	r0, r0
    c586:	7020      	strb	r0, [r4, #0]
    c588:	2805      	cmp	r0, #5
    c58a:	d301      	bcc.n	c590 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    c58c:	2000      	movs	r0, #0
    c58e:	7020      	strb	r0, [r4, #0]
    c590:	1e6d      	subs	r5, r5, #1
    c592:	b2ed      	uxtb	r5, r5
    c594:	d2e5      	bcs.n	c562 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    c596:	bd70      	pop	{r4, r5, r6, pc}
    c598:	200012a4 	.word	0x200012a4
    c59c:	2000036c 	.word	0x2000036c

0000c5a0 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    c5a0:	b500      	push	{lr}
    c5a2:	f003 ff92 	bl	104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    c5a6:	b940      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5a8:	f003 ff99 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c5ac:	b928      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5ae:	f003 ffad 	bl	1050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c5b2:	b910      	cbnz	r0, c5ba <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    c5b4:	f003 ffbe 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5b8:	b108      	cbz	r0, c5be <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    c5ba:	4802      	ldr	r0, [pc, #8]	; (c5c4 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    c5bc:	bd00      	pop	{pc}
    c5be:	4802      	ldr	r0, [pc, #8]	; (c5c8 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    c5c0:	bd00      	pop	{pc}
    c5c2:	0000      	.short	0x0000
    c5c4:	4000050c 	.word	0x4000050c
    c5c8:	4001e700 	.word	0x4001e700
    c5cc:	b510      	push	{r4, lr}
    c5ce:	f003 ffb1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c5d2:	b330      	cbz	r0, c622 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x82>
    c5d4:	f3ef 8010 	mrs	r0, PRIMASK
    c5d8:	b1c8      	cbz	r0, c60e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x6e>
    c5da:	2100      	movs	r1, #0
    c5dc:	b672      	cpsid	i
    c5de:	4812      	ldr	r0, [pc, #72]	; (c628 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x88>)
    c5e0:	6802      	ldr	r2, [r0, #0]
    c5e2:	6803      	ldr	r3, [r0, #0]
    c5e4:	f3c2 1200 	ubfx	r2, r2, #4, #1
    c5e8:	f043 0310 	orr.w	r3, r3, #16
    c5ec:	6003      	str	r3, [r0, #0]
    c5ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c5f2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    c5f6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    c5fa:	431c      	orrs	r4, r3
    c5fc:	d000      	beq.n	c600 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x60>
    c5fe:	bf40      	sev
    c600:	bf20      	wfe
    c602:	bf00      	nop
    c604:	bf00      	nop
    c606:	bf00      	nop
    c608:	bf00      	nop
    c60a:	b112      	cbz	r2, c612 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x72>
    c60c:	e005      	b.n	c61a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x7a>
    c60e:	2101      	movs	r1, #1
    c610:	e7e4      	b.n	c5dc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x3c>
    c612:	6802      	ldr	r2, [r0, #0]
    c614:	f022 0210 	bic.w	r2, r2, #16
    c618:	6002      	str	r2, [r0, #0]
    c61a:	2900      	cmp	r1, #0
    c61c:	d000      	beq.n	c620 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x80>
    c61e:	b662      	cpsie	i
    c620:	bd10      	pop	{r4, pc}
    c622:	bf20      	wfe
    c624:	bd10      	pop	{r4, pc}
    c626:	0000      	.short	0x0000
    c628:	e000ed10 	.word	0xe000ed10

0000c62c <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q>:
    c62c:	4901      	ldr	r1, [pc, #4]	; (c634 <sym_FLYO2O6PDDEK6WCFFGJRAPCMRB5FFHTEEHI4Z2Q+0x8>)
    c62e:	2001      	movs	r0, #1
    c630:	7088      	strb	r0, [r1, #2]
    c632:	4770      	bx	lr
    c634:	20000314 	.word	0x20000314

0000c638 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    c638:	0001083b 00010873 0001085d 0001084b     ;...s...]...K...
    c648:	00010857 00010845 00010839 00010837     W...E...9...7...
    c658:	0001086f 00010863 00010851 0001083f     o...c...Q...?...
    c668:	00010831 00010829 0001082d 00010823     1...)...-...#...

0000c678 <mpsl_fem_disable>:
    c678:	4801      	ldr	r0, [pc, #4]	; (c680 <mpsl_fem_disable+0x8>)
    c67a:	6800      	ldr	r0, [r0, #0]
    c67c:	6800      	ldr	r0, [r0, #0]
    c67e:	4700      	bx	r0
    c680:	20000328 	.word	0x20000328

0000c684 <mpsl_fem_lna_configuration_clear>:
    c684:	4801      	ldr	r0, [pc, #4]	; (c68c <mpsl_fem_lna_configuration_clear+0x8>)
    c686:	6800      	ldr	r0, [r0, #0]
    c688:	6940      	ldr	r0, [r0, #20]
    c68a:	4700      	bx	r0
    c68c:	20000328 	.word	0x20000328

0000c690 <mpsl_fem_lna_configuration_set>:
    c690:	4a01      	ldr	r2, [pc, #4]	; (c698 <mpsl_fem_lna_configuration_set+0x8>)
    c692:	6812      	ldr	r2, [r2, #0]
    c694:	68d2      	ldr	r2, [r2, #12]
    c696:	4710      	bx	r2
    c698:	20000328 	.word	0x20000328

0000c69c <mpsl_fem_lna_is_configured>:
    c69c:	4901      	ldr	r1, [pc, #4]	; (c6a4 <mpsl_fem_lna_is_configured+0x8>)
    c69e:	6809      	ldr	r1, [r1, #0]
    c6a0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    c6a2:	4708      	bx	r1
    c6a4:	20000328 	.word	0x20000328

0000c6a8 <mpsl_fem_pa_configuration_clear>:
    c6a8:	4801      	ldr	r0, [pc, #4]	; (c6b0 <mpsl_fem_pa_configuration_clear+0x8>)
    c6aa:	6800      	ldr	r0, [r0, #0]
    c6ac:	6900      	ldr	r0, [r0, #16]
    c6ae:	4700      	bx	r0
    c6b0:	20000328 	.word	0x20000328

0000c6b4 <mpsl_fem_pa_configuration_set>:
    c6b4:	4a01      	ldr	r2, [pc, #4]	; (c6bc <mpsl_fem_pa_configuration_set+0x8>)
    c6b6:	6812      	ldr	r2, [r2, #0]
    c6b8:	6892      	ldr	r2, [r2, #8]
    c6ba:	4710      	bx	r2
    c6bc:	20000328 	.word	0x20000328

0000c6c0 <mpsl_fem_pa_gain_set>:
    c6c0:	4901      	ldr	r1, [pc, #4]	; (c6c8 <mpsl_fem_pa_gain_set+0x8>)
    c6c2:	6809      	ldr	r1, [r1, #0]
    c6c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
    c6c6:	4708      	bx	r1
    c6c8:	20000328 	.word	0x20000328

0000c6cc <mpsl_fem_pa_is_configured>:
    c6cc:	4901      	ldr	r1, [pc, #4]	; (c6d4 <mpsl_fem_pa_is_configured+0x8>)
    c6ce:	6809      	ldr	r1, [r1, #0]
    c6d0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    c6d2:	4708      	bx	r1
    c6d4:	20000328 	.word	0x20000328

0000c6d8 <mpsl_fem_tx_power_split>:
    c6d8:	b430      	push	{r4, r5}
    c6da:	4c03      	ldr	r4, [pc, #12]	; (c6e8 <mpsl_fem_tx_power_split+0x10>)
    c6dc:	6824      	ldr	r4, [r4, #0]
    c6de:	6864      	ldr	r4, [r4, #4]
    c6e0:	46a4      	mov	ip, r4
    c6e2:	bc30      	pop	{r4, r5}
    c6e4:	4760      	bx	ip
    c6e6:	0000      	.short	0x0000
    c6e8:	20000328 	.word	0x20000328

0000c6ec <mpsl_fem_device_config_254_apply_get>:
    c6ec:	4801      	ldr	r0, [pc, #4]	; (c6f4 <mpsl_fem_device_config_254_apply_get+0x8>)
    c6ee:	7800      	ldrb	r0, [r0, #0]
    c6f0:	4770      	bx	lr
    c6f2:	0000      	.short	0x0000
    c6f4:	2000036d 	.word	0x2000036d

0000c6f8 <__udivmoddi4>:
    c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6fc:	4686      	mov	lr, r0
    c6fe:	468c      	mov	ip, r1
    c700:	4608      	mov	r0, r1
    c702:	9e08      	ldr	r6, [sp, #32]
    c704:	4615      	mov	r5, r2
    c706:	4674      	mov	r4, lr
    c708:	4619      	mov	r1, r3
    c70a:	2b00      	cmp	r3, #0
    c70c:	f040 80c2 	bne.w	c894 <__udivmoddi4+0x19c>
    c710:	4285      	cmp	r5, r0
    c712:	fab2 f282 	clz	r2, r2
    c716:	d945      	bls.n	c7a4 <__udivmoddi4+0xac>
    c718:	b14a      	cbz	r2, c72e <__udivmoddi4+0x36>
    c71a:	f1c2 0320 	rsb	r3, r2, #32
    c71e:	fa00 fc02 	lsl.w	ip, r0, r2
    c722:	fa2e f303 	lsr.w	r3, lr, r3
    c726:	4095      	lsls	r5, r2
    c728:	ea43 0c0c 	orr.w	ip, r3, ip
    c72c:	4094      	lsls	r4, r2
    c72e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c732:	b2a8      	uxth	r0, r5
    c734:	fbbc f8fe 	udiv	r8, ip, lr
    c738:	0c23      	lsrs	r3, r4, #16
    c73a:	fb0e cc18 	mls	ip, lr, r8, ip
    c73e:	fb08 f900 	mul.w	r9, r8, r0
    c742:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    c746:	4599      	cmp	r9, r3
    c748:	d928      	bls.n	c79c <__udivmoddi4+0xa4>
    c74a:	18eb      	adds	r3, r5, r3
    c74c:	f108 37ff 	add.w	r7, r8, #4294967295
    c750:	d204      	bcs.n	c75c <__udivmoddi4+0x64>
    c752:	4599      	cmp	r9, r3
    c754:	d902      	bls.n	c75c <__udivmoddi4+0x64>
    c756:	f1a8 0702 	sub.w	r7, r8, #2
    c75a:	442b      	add	r3, r5
    c75c:	eba3 0309 	sub.w	r3, r3, r9
    c760:	b2a4      	uxth	r4, r4
    c762:	fbb3 fcfe 	udiv	ip, r3, lr
    c766:	fb0e 331c 	mls	r3, lr, ip, r3
    c76a:	fb0c f000 	mul.w	r0, ip, r0
    c76e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c772:	42a0      	cmp	r0, r4
    c774:	d914      	bls.n	c7a0 <__udivmoddi4+0xa8>
    c776:	192c      	adds	r4, r5, r4
    c778:	f10c 33ff 	add.w	r3, ip, #4294967295
    c77c:	d204      	bcs.n	c788 <__udivmoddi4+0x90>
    c77e:	42a0      	cmp	r0, r4
    c780:	d902      	bls.n	c788 <__udivmoddi4+0x90>
    c782:	f1ac 0302 	sub.w	r3, ip, #2
    c786:	442c      	add	r4, r5
    c788:	1a24      	subs	r4, r4, r0
    c78a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
    c78e:	b11e      	cbz	r6, c798 <__udivmoddi4+0xa0>
    c790:	40d4      	lsrs	r4, r2
    c792:	2300      	movs	r3, #0
    c794:	6034      	str	r4, [r6, #0]
    c796:	6073      	str	r3, [r6, #4]
    c798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c79c:	4647      	mov	r7, r8
    c79e:	e7dd      	b.n	c75c <__udivmoddi4+0x64>
    c7a0:	4663      	mov	r3, ip
    c7a2:	e7f1      	b.n	c788 <__udivmoddi4+0x90>
    c7a4:	bb92      	cbnz	r2, c80c <__udivmoddi4+0x114>
    c7a6:	1b43      	subs	r3, r0, r5
    c7a8:	2101      	movs	r1, #1
    c7aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c7ae:	b2af      	uxth	r7, r5
    c7b0:	fbb3 fcfe 	udiv	ip, r3, lr
    c7b4:	0c20      	lsrs	r0, r4, #16
    c7b6:	fb0e 331c 	mls	r3, lr, ip, r3
    c7ba:	fb0c f807 	mul.w	r8, ip, r7
    c7be:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    c7c2:	4598      	cmp	r8, r3
    c7c4:	d962      	bls.n	c88c <__udivmoddi4+0x194>
    c7c6:	18eb      	adds	r3, r5, r3
    c7c8:	f10c 30ff 	add.w	r0, ip, #4294967295
    c7cc:	d204      	bcs.n	c7d8 <__udivmoddi4+0xe0>
    c7ce:	4598      	cmp	r8, r3
    c7d0:	d902      	bls.n	c7d8 <__udivmoddi4+0xe0>
    c7d2:	f1ac 0002 	sub.w	r0, ip, #2
    c7d6:	442b      	add	r3, r5
    c7d8:	eba3 0308 	sub.w	r3, r3, r8
    c7dc:	b2a4      	uxth	r4, r4
    c7de:	fbb3 fcfe 	udiv	ip, r3, lr
    c7e2:	fb0e 331c 	mls	r3, lr, ip, r3
    c7e6:	fb0c f707 	mul.w	r7, ip, r7
    c7ea:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    c7ee:	42a7      	cmp	r7, r4
    c7f0:	d94e      	bls.n	c890 <__udivmoddi4+0x198>
    c7f2:	192c      	adds	r4, r5, r4
    c7f4:	f10c 33ff 	add.w	r3, ip, #4294967295
    c7f8:	d204      	bcs.n	c804 <__udivmoddi4+0x10c>
    c7fa:	42a7      	cmp	r7, r4
    c7fc:	d902      	bls.n	c804 <__udivmoddi4+0x10c>
    c7fe:	f1ac 0302 	sub.w	r3, ip, #2
    c802:	442c      	add	r4, r5
    c804:	1be4      	subs	r4, r4, r7
    c806:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c80a:	e7c0      	b.n	c78e <__udivmoddi4+0x96>
    c80c:	f1c2 0320 	rsb	r3, r2, #32
    c810:	fa20 f103 	lsr.w	r1, r0, r3
    c814:	4095      	lsls	r5, r2
    c816:	4090      	lsls	r0, r2
    c818:	fa2e f303 	lsr.w	r3, lr, r3
    c81c:	4303      	orrs	r3, r0
    c81e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    c822:	b2af      	uxth	r7, r5
    c824:	fbb1 fcfe 	udiv	ip, r1, lr
    c828:	fb0e 101c 	mls	r0, lr, ip, r1
    c82c:	0c19      	lsrs	r1, r3, #16
    c82e:	fb0c f807 	mul.w	r8, ip, r7
    c832:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c836:	4588      	cmp	r8, r1
    c838:	fa04 f402 	lsl.w	r4, r4, r2
    c83c:	d922      	bls.n	c884 <__udivmoddi4+0x18c>
    c83e:	1869      	adds	r1, r5, r1
    c840:	f10c 30ff 	add.w	r0, ip, #4294967295
    c844:	d204      	bcs.n	c850 <__udivmoddi4+0x158>
    c846:	4588      	cmp	r8, r1
    c848:	d902      	bls.n	c850 <__udivmoddi4+0x158>
    c84a:	f1ac 0002 	sub.w	r0, ip, #2
    c84e:	4429      	add	r1, r5
    c850:	eba1 0108 	sub.w	r1, r1, r8
    c854:	b29b      	uxth	r3, r3
    c856:	fbb1 fcfe 	udiv	ip, r1, lr
    c85a:	fb0e 111c 	mls	r1, lr, ip, r1
    c85e:	fb0c f707 	mul.w	r7, ip, r7
    c862:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    c866:	429f      	cmp	r7, r3
    c868:	d90e      	bls.n	c888 <__udivmoddi4+0x190>
    c86a:	18eb      	adds	r3, r5, r3
    c86c:	f10c 31ff 	add.w	r1, ip, #4294967295
    c870:	d204      	bcs.n	c87c <__udivmoddi4+0x184>
    c872:	429f      	cmp	r7, r3
    c874:	d902      	bls.n	c87c <__udivmoddi4+0x184>
    c876:	f1ac 0102 	sub.w	r1, ip, #2
    c87a:	442b      	add	r3, r5
    c87c:	1bdb      	subs	r3, r3, r7
    c87e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    c882:	e792      	b.n	c7aa <__udivmoddi4+0xb2>
    c884:	4660      	mov	r0, ip
    c886:	e7e3      	b.n	c850 <__udivmoddi4+0x158>
    c888:	4661      	mov	r1, ip
    c88a:	e7f7      	b.n	c87c <__udivmoddi4+0x184>
    c88c:	4660      	mov	r0, ip
    c88e:	e7a3      	b.n	c7d8 <__udivmoddi4+0xe0>
    c890:	4663      	mov	r3, ip
    c892:	e7b7      	b.n	c804 <__udivmoddi4+0x10c>
    c894:	4283      	cmp	r3, r0
    c896:	d906      	bls.n	c8a6 <__udivmoddi4+0x1ae>
    c898:	b916      	cbnz	r6, c8a0 <__udivmoddi4+0x1a8>
    c89a:	2100      	movs	r1, #0
    c89c:	4608      	mov	r0, r1
    c89e:	e77b      	b.n	c798 <__udivmoddi4+0xa0>
    c8a0:	e9c6 e000 	strd	lr, r0, [r6]
    c8a4:	e7f9      	b.n	c89a <__udivmoddi4+0x1a2>
    c8a6:	fab3 f783 	clz	r7, r3
    c8aa:	b98f      	cbnz	r7, c8d0 <__udivmoddi4+0x1d8>
    c8ac:	4283      	cmp	r3, r0
    c8ae:	d301      	bcc.n	c8b4 <__udivmoddi4+0x1bc>
    c8b0:	4572      	cmp	r2, lr
    c8b2:	d808      	bhi.n	c8c6 <__udivmoddi4+0x1ce>
    c8b4:	ebbe 0402 	subs.w	r4, lr, r2
    c8b8:	eb60 0303 	sbc.w	r3, r0, r3
    c8bc:	2001      	movs	r0, #1
    c8be:	469c      	mov	ip, r3
    c8c0:	b91e      	cbnz	r6, c8ca <__udivmoddi4+0x1d2>
    c8c2:	2100      	movs	r1, #0
    c8c4:	e768      	b.n	c798 <__udivmoddi4+0xa0>
    c8c6:	4638      	mov	r0, r7
    c8c8:	e7fa      	b.n	c8c0 <__udivmoddi4+0x1c8>
    c8ca:	e9c6 4c00 	strd	r4, ip, [r6]
    c8ce:	e7f8      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c8d0:	f1c7 0c20 	rsb	ip, r7, #32
    c8d4:	40bb      	lsls	r3, r7
    c8d6:	fa22 f40c 	lsr.w	r4, r2, ip
    c8da:	431c      	orrs	r4, r3
    c8dc:	fa2e f10c 	lsr.w	r1, lr, ip
    c8e0:	fa20 f30c 	lsr.w	r3, r0, ip
    c8e4:	40b8      	lsls	r0, r7
    c8e6:	4301      	orrs	r1, r0
    c8e8:	ea4f 4914 	mov.w	r9, r4, lsr #16
    c8ec:	fa0e f507 	lsl.w	r5, lr, r7
    c8f0:	fbb3 f8f9 	udiv	r8, r3, r9
    c8f4:	fa1f fe84 	uxth.w	lr, r4
    c8f8:	fb09 3018 	mls	r0, r9, r8, r3
    c8fc:	0c0b      	lsrs	r3, r1, #16
    c8fe:	fb08 fa0e 	mul.w	sl, r8, lr
    c902:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    c906:	459a      	cmp	sl, r3
    c908:	fa02 f207 	lsl.w	r2, r2, r7
    c90c:	d940      	bls.n	c990 <__udivmoddi4+0x298>
    c90e:	18e3      	adds	r3, r4, r3
    c910:	f108 30ff 	add.w	r0, r8, #4294967295
    c914:	d204      	bcs.n	c920 <__udivmoddi4+0x228>
    c916:	459a      	cmp	sl, r3
    c918:	d902      	bls.n	c920 <__udivmoddi4+0x228>
    c91a:	f1a8 0002 	sub.w	r0, r8, #2
    c91e:	4423      	add	r3, r4
    c920:	eba3 030a 	sub.w	r3, r3, sl
    c924:	b289      	uxth	r1, r1
    c926:	fbb3 f8f9 	udiv	r8, r3, r9
    c92a:	fb09 3318 	mls	r3, r9, r8, r3
    c92e:	fb08 fe0e 	mul.w	lr, r8, lr
    c932:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    c936:	458e      	cmp	lr, r1
    c938:	d92c      	bls.n	c994 <__udivmoddi4+0x29c>
    c93a:	1861      	adds	r1, r4, r1
    c93c:	f108 33ff 	add.w	r3, r8, #4294967295
    c940:	d204      	bcs.n	c94c <__udivmoddi4+0x254>
    c942:	458e      	cmp	lr, r1
    c944:	d902      	bls.n	c94c <__udivmoddi4+0x254>
    c946:	f1a8 0302 	sub.w	r3, r8, #2
    c94a:	4421      	add	r1, r4
    c94c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    c950:	fba0 9802 	umull	r9, r8, r0, r2
    c954:	eba1 010e 	sub.w	r1, r1, lr
    c958:	4541      	cmp	r1, r8
    c95a:	46ce      	mov	lr, r9
    c95c:	4643      	mov	r3, r8
    c95e:	d302      	bcc.n	c966 <__udivmoddi4+0x26e>
    c960:	d106      	bne.n	c970 <__udivmoddi4+0x278>
    c962:	454d      	cmp	r5, r9
    c964:	d204      	bcs.n	c970 <__udivmoddi4+0x278>
    c966:	ebb9 0e02 	subs.w	lr, r9, r2
    c96a:	eb68 0304 	sbc.w	r3, r8, r4
    c96e:	3801      	subs	r0, #1
    c970:	2e00      	cmp	r6, #0
    c972:	d0a6      	beq.n	c8c2 <__udivmoddi4+0x1ca>
    c974:	ebb5 020e 	subs.w	r2, r5, lr
    c978:	eb61 0103 	sbc.w	r1, r1, r3
    c97c:	fa01 fc0c 	lsl.w	ip, r1, ip
    c980:	fa22 f307 	lsr.w	r3, r2, r7
    c984:	ea4c 0303 	orr.w	r3, ip, r3
    c988:	40f9      	lsrs	r1, r7
    c98a:	e9c6 3100 	strd	r3, r1, [r6]
    c98e:	e798      	b.n	c8c2 <__udivmoddi4+0x1ca>
    c990:	4640      	mov	r0, r8
    c992:	e7c5      	b.n	c920 <__udivmoddi4+0x228>
    c994:	4643      	mov	r3, r8
    c996:	e7d9      	b.n	c94c <__udivmoddi4+0x254>

0000c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c998:	b50e      	push	{r1, r2, r3, lr}
    c99a:	4601      	mov	r1, r0
    c99c:	4668      	mov	r0, sp
    c99e:	f000 f804 	bl	c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c9a2:	4668      	mov	r0, sp
    c9a4:	f001 fba4 	bl	e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c9a8:	bd0e      	pop	{r1, r2, r3, pc}

0000c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9aa:	880a      	ldrh	r2, [r1, #0]
    c9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9b0:	8082      	strh	r2, [r0, #4]
    c9b2:	884a      	ldrh	r2, [r1, #2]
    c9b4:	80c2      	strh	r2, [r0, #6]
    c9b6:	784a      	ldrb	r2, [r1, #1]
    c9b8:	0993      	lsrs	r3, r2, #6
    c9ba:	2200      	movs	r2, #0
    c9bc:	7242      	strb	r2, [r0, #9]
    c9be:	784b      	ldrb	r3, [r1, #1]
    c9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c9c4:	b11b      	cbz	r3, c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c9ca:	2b02      	cmp	r3, #2
    c9cc:	d005      	beq.n	c9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c9ce:	7202      	strb	r2, [r0, #8]
    c9d0:	1d09      	adds	r1, r1, #4
    c9d2:	6001      	str	r1, [r0, #0]
    c9d4:	4770      	bx	lr
    c9d6:	2201      	movs	r2, #1
    c9d8:	e7f9      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9da:	2202      	movs	r2, #2
    c9dc:	e7f7      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c9de:	b510      	push	{r4, lr}
    c9e0:	460c      	mov	r4, r1
    c9e2:	7909      	ldrb	r1, [r1, #4]
    c9e4:	7001      	strb	r1, [r0, #0]
    c9e6:	7841      	ldrb	r1, [r0, #1]
    c9e8:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
    c9ec:	7041      	strb	r1, [r0, #1]
    c9ee:	88a2      	ldrh	r2, [r4, #4]
    c9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9f4:	4311      	orrs	r1, r2
    c9f6:	7041      	strb	r1, [r0, #1]
    c9f8:	79a2      	ldrb	r2, [r4, #6]
    c9fa:	7082      	strb	r2, [r0, #2]
    c9fc:	88e2      	ldrh	r2, [r4, #6]
    c9fe:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
    ca02:	0a12      	lsrs	r2, r2, #8
    ca04:	70c2      	strb	r2, [r0, #3]
    ca06:	7041      	strb	r1, [r0, #1]
    ca08:	7a22      	ldrb	r2, [r4, #8]
    ca0a:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca0e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    ca12:	7041      	strb	r1, [r0, #1]
    ca14:	7a62      	ldrb	r2, [r4, #9]
    ca16:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca1a:	7041      	strb	r1, [r0, #1]
    ca1c:	6821      	ldr	r1, [r4, #0]
    ca1e:	1d02      	adds	r2, r0, #4
    ca20:	4291      	cmp	r1, r2
    ca22:	d006      	beq.n	ca32 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x54>
    ca24:	88e2      	ldrh	r2, [r4, #6]
    ca26:	2afb      	cmp	r2, #251	; 0xfb
    ca28:	d300      	bcc.n	ca2c <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x4e>
    ca2a:	22fb      	movs	r2, #251	; 0xfb
    ca2c:	1d00      	adds	r0, r0, #4
    ca2e:	f003 fe1e 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca32:	79a0      	ldrb	r0, [r4, #6]
    ca34:	1d00      	adds	r0, r0, #4
    ca36:	b2c0      	uxtb	r0, r0
    ca38:	bd10      	pop	{r4, pc}

0000ca3a <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY>:
    ca3a:	b430      	push	{r4, r5}
    ca3c:	790a      	ldrb	r2, [r1, #4]
    ca3e:	7002      	strb	r2, [r0, #0]
    ca40:	7842      	ldrb	r2, [r0, #1]
    ca42:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    ca46:	7042      	strb	r2, [r0, #1]
    ca48:	888b      	ldrh	r3, [r1, #4]
    ca4a:	f3c3 2303 	ubfx	r3, r3, #8, #4
    ca4e:	431a      	orrs	r2, r3
    ca50:	7042      	strb	r2, [r0, #1]
    ca52:	798b      	ldrb	r3, [r1, #6]
    ca54:	7083      	strb	r3, [r0, #2]
    ca56:	78c3      	ldrb	r3, [r0, #3]
    ca58:	f002 02cf 	and.w	r2, r2, #207	; 0xcf
    ca5c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ca60:	70c3      	strb	r3, [r0, #3]
    ca62:	88cc      	ldrh	r4, [r1, #6]
    ca64:	f3c4 2405 	ubfx	r4, r4, #8, #6
    ca68:	4323      	orrs	r3, r4
    ca6a:	70c3      	strb	r3, [r0, #3]
    ca6c:	7042      	strb	r2, [r0, #1]
    ca6e:	7a0c      	ldrb	r4, [r1, #8]
    ca70:	f004 0403 	and.w	r4, r4, #3
    ca74:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    ca78:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    ca7c:	7042      	strb	r2, [r0, #1]
    ca7e:	7a4c      	ldrb	r4, [r1, #9]
    ca80:	ea42 1284 	orr.w	r2, r2, r4, lsl #6
    ca84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ca88:	7042      	strb	r2, [r0, #1]
    ca8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    ca8e:	70c2      	strb	r2, [r0, #3]
    ca90:	680b      	ldr	r3, [r1, #0]
    ca92:	1d02      	adds	r2, r0, #4
    ca94:	4293      	cmp	r3, r2
    ca96:	d005      	beq.n	caa4 <sym_XBPRCWTRXORTYBBILZLCEINUIX4S5BJ5RTZD2RY+0x6a>
    ca98:	88ca      	ldrh	r2, [r1, #6]
    ca9a:	bc30      	pop	{r4, r5}
    ca9c:	4619      	mov	r1, r3
    ca9e:	1d00      	adds	r0, r0, #4
    caa0:	f003 bde5 	b.w	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    caa4:	bc30      	pop	{r4, r5}
    caa6:	4770      	bx	lr

0000caa8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    caa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    caac:	4604      	mov	r4, r0
    caae:	f891 c000 	ldrb.w	ip, [r1]
    cab2:	460d      	mov	r5, r1
    cab4:	2000      	movs	r0, #0
    cab6:	270c      	movs	r7, #12
    cab8:	263e      	movs	r6, #62	; 0x3e
    caba:	2312      	movs	r3, #18
    cabc:	22ff      	movs	r2, #255	; 0xff
    cabe:	f04f 0b10 	mov.w	fp, #16
    cac2:	f04f 0905 	mov.w	r9, #5
    cac6:	f104 010d 	add.w	r1, r4, #13
    caca:	f04f 0e14 	mov.w	lr, #20
    cace:	f04f 0a11 	mov.w	sl, #17
    cad2:	f1bc 0f23 	cmp.w	ip, #35	; 0x23
    cad6:	d271      	bcs.n	cbbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    cad8:	e8df f00c 	tbb	[pc, ip]
    cadc:	2c291270 	.word	0x2c291270
    cae0:	8c70f431 	.word	0x8c70f431
    cae4:	d5c1a796 	.word	0xd5c1a796
    cae8:	f1f2f5d8 	.word	0xf1f2f5d8
    caec:	537070f0 	.word	0x537070f0
    caf0:	eeef7170 	.word	0xeeef7170
    caf4:	eaebeced 	.word	0xeaebeced
    caf8:	e6e7e8e9 	.word	0xe6e7e8e9
    cafc:	00e470e5 	.word	0x00e470e5
    cb00:	7027      	strb	r7, [r4, #0]
    cb02:	7928      	ldrb	r0, [r5, #4]
    cb04:	70a0      	strb	r0, [r4, #2]
    cb06:	7968      	ldrb	r0, [r5, #5]
    cb08:	70e0      	strb	r0, [r4, #3]
    cb0a:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cb0e:	0a00      	lsrs	r0, r0, #8
    cb10:	7120      	strb	r0, [r4, #4]
    cb12:	79e8      	ldrb	r0, [r5, #7]
    cb14:	7160      	strb	r0, [r4, #5]
    cb16:	7a28      	ldrb	r0, [r5, #8]
    cb18:	71a0      	strb	r0, [r4, #6]
    cb1a:	8928      	ldrh	r0, [r5, #8]
    cb1c:	0a00      	lsrs	r0, r0, #8
    cb1e:	71e0      	strb	r0, [r4, #7]
    cb20:	7aa8      	ldrb	r0, [r5, #10]
    cb22:	7220      	strb	r0, [r4, #8]
    cb24:	8968      	ldrh	r0, [r5, #10]
    cb26:	0a00      	lsrs	r0, r0, #8
    cb28:	7260      	strb	r0, [r4, #9]
    cb2a:	2008      	movs	r0, #8
    cb2c:	e137      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cb2e:	f884 b000 	strb.w	fp, [r4]
    cb32:	e001      	b.n	cb38 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x90>
    cb34:	201a      	movs	r0, #26
    cb36:	7020      	strb	r0, [r4, #0]
    cb38:	7928      	ldrb	r0, [r5, #4]
    cb3a:	70a0      	strb	r0, [r4, #2]
    cb3c:	e136      	b.n	cdac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x304>
    cb3e:	7026      	strb	r6, [r4, #0]
    cb40:	2002      	movs	r0, #2
    cb42:	70a0      	strb	r0, [r4, #2]
    cb44:	f815 0f04 	ldrb.w	r0, [r5, #4]!
    cb48:	70e0      	strb	r0, [r4, #3]
    cb4a:	7aa8      	ldrb	r0, [r5, #10]
    cb4c:	7120      	strb	r0, [r4, #4]
    cb4e:	7868      	ldrb	r0, [r5, #1]
    cb50:	7160      	strb	r0, [r4, #5]
    cb52:	f8d5 0002 	ldr.w	r0, [r5, #2]
    cb56:	f8c4 0006 	str.w	r0, [r4, #6]
    cb5a:	88e8      	ldrh	r0, [r5, #6]
    cb5c:	8160      	strh	r0, [r4, #10]
    cb5e:	7a28      	ldrb	r0, [r5, #8]
    cb60:	7320      	strb	r0, [r4, #12]
    cb62:	7a2e      	ldrb	r6, [r5, #8]
    cb64:	2e1f      	cmp	r6, #31
    cb66:	d300      	bcc.n	cb6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xc2>
    cb68:	261f      	movs	r6, #31
    cb6a:	4608      	mov	r0, r1
    cb6c:	4632      	mov	r2, r6
    cb6e:	f105 010b 	add.w	r1, r5, #11
    cb72:	f003 fd7c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb76:	360d      	adds	r6, #13
    cb78:	7a69      	ldrb	r1, [r5, #9]
    cb7a:	55a1      	strb	r1, [r4, r6]
    cb7c:	1e76      	subs	r6, r6, #1
    cb7e:	b2f0      	uxtb	r0, r6
    cb80:	e10b      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cb82:	7026      	strb	r6, [r4, #0]
    cb84:	200b      	movs	r0, #11
    cb86:	70a0      	strb	r0, [r4, #2]
    cb88:	7928      	ldrb	r0, [r5, #4]
    cb8a:	70e0      	strb	r0, [r4, #3]
    cb8c:	7968      	ldrb	r0, [r5, #5]
    cb8e:	7120      	strb	r0, [r4, #4]
    cb90:	79a8      	ldrb	r0, [r5, #6]
    cb92:	7160      	strb	r0, [r4, #5]
    cb94:	f8d5 0007 	ldr.w	r0, [r5, #7]
    cb98:	f8c4 0006 	str.w	r0, [r4, #6]
    cb9c:	f8b5 000b 	ldrh.w	r0, [r5, #11]
    cba0:	8160      	strh	r0, [r4, #10]
    cba2:	7b68      	ldrb	r0, [r5, #13]
    cba4:	7320      	strb	r0, [r4, #12]
    cba6:	f8d5 000e 	ldr.w	r0, [r5, #14]
    cbaa:	f8c4 000d 	str.w	r0, [r4, #13]
    cbae:	8a68      	ldrh	r0, [r5, #18]
    cbb0:	f8a4 0011 	strh.w	r0, [r4, #17]
    cbb4:	7d28      	ldrb	r0, [r5, #20]
    cbb6:	74e0      	strb	r0, [r4, #19]
    cbb8:	4618      	mov	r0, r3
    cbba:	e0f0      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbbc:	e0f1      	b.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cbbe:	2029      	movs	r0, #41	; 0x29
    cbc0:	f7f4 f8c6 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbc4:	b148      	cbz	r0, cbda <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x132>
    cbc6:	7026      	strb	r6, [r4, #0]
    cbc8:	2029      	movs	r0, #41	; 0x29
    cbca:	70a0      	strb	r0, [r4, #2]
    cbcc:	2221      	movs	r2, #33	; 0x21
    cbce:	1d29      	adds	r1, r5, #4
    cbd0:	1ce0      	adds	r0, r4, #3
    cbd2:	f003 fd4c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cbd6:	2022      	movs	r0, #34	; 0x22
    cbd8:	e0e1      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cbda:	200a      	movs	r0, #10
    cbdc:	f7f4 f8b8 	bl	d50 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    cbe0:	2800      	cmp	r0, #0
    cbe2:	4629      	mov	r1, r5
    cbe4:	4620      	mov	r0, r4
    cbe6:	d002      	beq.n	cbee <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x146>
    cbe8:	f000 f9a0 	bl	cf2c <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA+0x52>
    cbec:	e0d5      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbee:	f000 f974 	bl	ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>
    cbf2:	e0d2      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cbf4:	7026      	strb	r6, [r4, #0]
    cbf6:	f884 e002 	strb.w	lr, [r4, #2]
    cbfa:	7928      	ldrb	r0, [r5, #4]
    cbfc:	70e0      	strb	r0, [r4, #3]
    cbfe:	88a8      	ldrh	r0, [r5, #4]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	7120      	strb	r0, [r4, #4]
    cc04:	79a8      	ldrb	r0, [r5, #6]
    cc06:	e104      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc08:	223e      	movs	r2, #62	; 0x3e
    cc0a:	7022      	strb	r2, [r4, #0]
    cc0c:	2204      	movs	r2, #4
    cc0e:	70a2      	strb	r2, [r4, #2]
    cc10:	6868      	ldr	r0, [r5, #4]
    cc12:	f8c4 0003 	str.w	r0, [r4, #3]
    cc16:	68a8      	ldr	r0, [r5, #8]
    cc18:	f8c4 0007 	str.w	r0, [r4, #7]
    cc1c:	89a8      	ldrh	r0, [r5, #12]
    cc1e:	f8a4 000b 	strh.w	r0, [r4, #11]
    cc22:	7ba8      	ldrb	r0, [r5, #14]
    cc24:	7360      	strb	r0, [r4, #13]
    cc26:	200c      	movs	r0, #12
    cc28:	e0b9      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cc2a:	7026      	strb	r6, [r4, #0]
    cc2c:	2003      	movs	r0, #3
    cc2e:	70a0      	strb	r0, [r4, #2]
    cc30:	7928      	ldrb	r0, [r5, #4]
    cc32:	70e0      	strb	r0, [r4, #3]
    cc34:	79a8      	ldrb	r0, [r5, #6]
    cc36:	7120      	strb	r0, [r4, #4]
    cc38:	88e8      	ldrh	r0, [r5, #6]
    cc3a:	0a00      	lsrs	r0, r0, #8
    cc3c:	7160      	strb	r0, [r4, #5]
    cc3e:	7a28      	ldrb	r0, [r5, #8]
    cc40:	71a0      	strb	r0, [r4, #6]
    cc42:	8928      	ldrh	r0, [r5, #8]
    cc44:	0a00      	lsrs	r0, r0, #8
    cc46:	71e0      	strb	r0, [r4, #7]
    cc48:	7aa8      	ldrb	r0, [r5, #10]
    cc4a:	7220      	strb	r0, [r4, #8]
    cc4c:	8968      	ldrh	r0, [r5, #10]
    cc4e:	0a00      	lsrs	r0, r0, #8
    cc50:	7260      	strb	r0, [r4, #9]
    cc52:	7b28      	ldrb	r0, [r5, #12]
    cc54:	72a0      	strb	r0, [r4, #10]
    cc56:	89a8      	ldrh	r0, [r5, #12]
    cc58:	0a00      	lsrs	r0, r0, #8
    cc5a:	72e0      	strb	r0, [r4, #11]
    cc5c:	e116      	b.n	ce8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e4>
    cc5e:	7026      	strb	r6, [r4, #0]
    cc60:	f884 9002 	strb.w	r9, [r4, #2]
    cc64:	7928      	ldrb	r0, [r5, #4]
    cc66:	70e0      	strb	r0, [r4, #3]
    cc68:	88a8      	ldrh	r0, [r5, #4]
    cc6a:	0a00      	lsrs	r0, r0, #8
    cc6c:	7120      	strb	r0, [r4, #4]
    cc6e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    cc72:	f8c4 0005 	str.w	r0, [r4, #5]
    cc76:	f8d5 000a 	ldr.w	r0, [r5, #10]
    cc7a:	f8c4 0009 	str.w	r0, [r4, #9]
    cc7e:	89e8      	ldrh	r0, [r5, #14]
    cc80:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc84:	e127      	b.n	ced6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x42e>
    cc86:	f884 a000 	strb.w	sl, [r4]
    cc8a:	e049      	b.n	cd20 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x278>
    cc8c:	f884 9000 	strb.w	r9, [r4]
    cc90:	7928      	ldrb	r0, [r5, #4]
    cc92:	70a0      	strb	r0, [r4, #2]
    cc94:	7968      	ldrb	r0, [r5, #5]
    cc96:	70e0      	strb	r0, [r4, #3]
    cc98:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cc9c:	0a00      	lsrs	r0, r0, #8
    cc9e:	7120      	strb	r0, [r4, #4]
    cca0:	79e8      	ldrb	r0, [r5, #7]
    cca2:	e0b6      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cca4:	e102      	b.n	ceac <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x404>
    cca6:	e0d5      	b.n	ce54 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cca8:	e0b6      	b.n	ce18 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    ccaa:	e0e1      	b.n	ce70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    ccac:	e0f0      	b.n	ce90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e8>
    ccae:	e0a8      	b.n	ce02 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    ccb0:	e090      	b.n	cdd4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32c>
    ccb2:	e08c      	b.n	cdce <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    ccb4:	e077      	b.n	cda6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fe>
    ccb6:	e07b      	b.n	cdb0 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x308>
    ccb8:	e01e      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x250>
    ccba:	e01a      	b.n	ccf2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x24a>
    ccbc:	e02e      	b.n	cd1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x274>
    ccbe:	e028      	b.n	cd12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x26a>
    ccc0:	e00c      	b.n	ccdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    ccc2:	e000      	b.n	ccc6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x21e>
    ccc4:	e033      	b.n	cd2e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x286>
    ccc6:	2008      	movs	r0, #8
    ccc8:	7020      	strb	r0, [r4, #0]
    ccca:	7928      	ldrb	r0, [r5, #4]
    cccc:	70a0      	strb	r0, [r4, #2]
    ccce:	79a8      	ldrb	r0, [r5, #6]
    ccd0:	70e0      	strb	r0, [r4, #3]
    ccd2:	88e8      	ldrh	r0, [r5, #6]
    ccd4:	0a00      	lsrs	r0, r0, #8
    ccd6:	7120      	strb	r0, [r4, #4]
    ccd8:	7a28      	ldrb	r0, [r5, #8]
    ccda:	e09a      	b.n	ce12 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    ccdc:	2030      	movs	r0, #48	; 0x30
    ccde:	7020      	strb	r0, [r4, #0]
    cce0:	7928      	ldrb	r0, [r5, #4]
    cce2:	70a0      	strb	r0, [r4, #2]
    cce4:	79a8      	ldrb	r0, [r5, #6]
    cce6:	70e0      	strb	r0, [r4, #3]
    cce8:	88e8      	ldrh	r0, [r5, #6]
    ccea:	0a00      	lsrs	r0, r0, #8
    ccec:	7120      	strb	r0, [r4, #4]
    ccee:	2003      	movs	r0, #3
    ccf0:	e055      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ccf2:	7026      	strb	r6, [r4, #0]
    ccf4:	2007      	movs	r0, #7
    ccf6:	e091      	b.n	ce1c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ccf8:	7026      	strb	r6, [r4, #0]
    ccfa:	70a7      	strb	r7, [r4, #2]
    ccfc:	7928      	ldrb	r0, [r5, #4]
    ccfe:	70e0      	strb	r0, [r4, #3]
    cd00:	79a8      	ldrb	r0, [r5, #6]
    cd02:	7120      	strb	r0, [r4, #4]
    cd04:	88e8      	ldrh	r0, [r5, #6]
    cd06:	0a00      	lsrs	r0, r0, #8
    cd08:	7160      	strb	r0, [r4, #5]
    cd0a:	7a28      	ldrb	r0, [r5, #8]
    cd0c:	71a0      	strb	r0, [r4, #6]
    cd0e:	7a68      	ldrb	r0, [r5, #9]
    cd10:	e05a      	b.n	cdc8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x320>
    cd12:	1d29      	adds	r1, r5, #4
    cd14:	4620      	mov	r0, r4
    cd16:	f7f3 ffdb 	bl	cd0 <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A+0x94>
    cd1a:	e03e      	b.n	cd9a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f2>
    cd1c:	2057      	movs	r0, #87	; 0x57
    cd1e:	7020      	strb	r0, [r4, #0]
    cd20:	7928      	ldrb	r0, [r5, #4]
    cd22:	70a0      	strb	r0, [r4, #2]
    cd24:	88a8      	ldrh	r0, [r5, #4]
    cd26:	0a00      	lsrs	r0, r0, #8
    cd28:	70e0      	strb	r0, [r4, #3]
    cd2a:	2002      	movs	r0, #2
    cd2c:	e037      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cd2e:	7026      	strb	r6, [r4, #0]
    cd30:	220d      	movs	r2, #13
    cd32:	70a2      	strb	r2, [r4, #2]
    cd34:	792a      	ldrb	r2, [r5, #4]
    cd36:	70e2      	strb	r2, [r4, #3]
    cd38:	89ea      	ldrh	r2, [r5, #14]
    cd3a:	80a2      	strh	r2, [r4, #4]
    cd3c:	796a      	ldrb	r2, [r5, #5]
    cd3e:	71a2      	strb	r2, [r4, #6]
    cd40:	f8d5 2006 	ldr.w	r2, [r5, #6]
    cd44:	f8c4 2007 	str.w	r2, [r4, #7]
    cd48:	896a      	ldrh	r2, [r5, #10]
    cd4a:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd4e:	7c2a      	ldrb	r2, [r5, #16]
    cd50:	4620      	mov	r0, r4
    cd52:	7362      	strb	r2, [r4, #13]
    cd54:	1d29      	adds	r1, r5, #4
    cd56:	7c6a      	ldrb	r2, [r5, #17]
    cd58:	7382      	strb	r2, [r0, #14]
    cd5a:	7b8a      	ldrb	r2, [r1, #14]
    cd5c:	73c2      	strb	r2, [r0, #15]
    cd5e:	7e8a      	ldrb	r2, [r1, #26]
    cd60:	7402      	strb	r2, [r0, #16]
    cd62:	7a4a      	ldrb	r2, [r1, #9]
    cd64:	7442      	strb	r2, [r0, #17]
    cd66:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cd6a:	f8ad 2000 	strh.w	r2, [sp]
    cd6e:	8242      	strh	r2, [r0, #18]
    cd70:	7cca      	ldrb	r2, [r1, #19]
    cd72:	7502      	strb	r2, [r0, #20]
    cd74:	694a      	ldr	r2, [r1, #20]
    cd76:	f8c0 2015 	str.w	r2, [r0, #21]
    cd7a:	8b0a      	ldrh	r2, [r1, #24]
    cd7c:	f8a0 2019 	strh.w	r2, [r0, #25]
    cd80:	7a0a      	ldrb	r2, [r1, #8]
    cd82:	76c2      	strb	r2, [r0, #27]
    cd84:	7a0d      	ldrb	r5, [r1, #8]
    cd86:	2de5      	cmp	r5, #229	; 0xe5
    cd88:	d300      	bcc.n	cd8c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2e4>
    cd8a:	25e5      	movs	r5, #229	; 0xe5
    cd8c:	462a      	mov	r2, r5
    cd8e:	301c      	adds	r0, #28
    cd90:	311c      	adds	r1, #28
    cd92:	f003 fc6c 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd96:	351a      	adds	r5, #26
    cd98:	b2e8      	uxtb	r0, r5
    cd9a:	2800      	cmp	r0, #0
    cd9c:	d001      	beq.n	cda2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2fa>
    cd9e:	7060      	strb	r0, [r4, #1]
    cda0:	1c80      	adds	r0, r0, #2
    cda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cda6:	7026      	strb	r6, [r4, #0]
    cda8:	f884 a002 	strb.w	sl, [r4, #2]
    cdac:	2001      	movs	r0, #1
    cdae:	e7f6      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdb0:	7026      	strb	r6, [r4, #0]
    cdb2:	70a3      	strb	r3, [r4, #2]
    cdb4:	7928      	ldrb	r0, [r5, #4]
    cdb6:	70e0      	strb	r0, [r4, #3]
    cdb8:	7968      	ldrb	r0, [r5, #5]
    cdba:	7120      	strb	r0, [r4, #4]
    cdbc:	79a8      	ldrb	r0, [r5, #6]
    cdbe:	7160      	strb	r0, [r4, #5]
    cdc0:	88e8      	ldrh	r0, [r5, #6]
    cdc2:	0a00      	lsrs	r0, r0, #8
    cdc4:	71a0      	strb	r0, [r4, #6]
    cdc6:	7a28      	ldrb	r0, [r5, #8]
    cdc8:	71e0      	strb	r0, [r4, #7]
    cdca:	2006      	movs	r0, #6
    cdcc:	e7e7      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    cdce:	7026      	strb	r6, [r4, #0]
    cdd0:	2020      	movs	r0, #32
    cdd2:	e041      	b.n	ce58 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3b0>
    cdd4:	7026      	strb	r6, [r4, #0]
    cdd6:	2021      	movs	r0, #33	; 0x21
    cdd8:	70a0      	strb	r0, [r4, #2]
    cdda:	7928      	ldrb	r0, [r5, #4]
    cddc:	70e0      	strb	r0, [r4, #3]
    cdde:	7968      	ldrb	r0, [r5, #5]
    cde0:	7120      	strb	r0, [r4, #4]
    cde2:	f8b5 0005 	ldrh.w	r0, [r5, #5]
    cde6:	0a00      	lsrs	r0, r0, #8
    cde8:	7160      	strb	r0, [r4, #5]
    cdea:	79e8      	ldrb	r0, [r5, #7]
    cdec:	71a0      	strb	r0, [r4, #6]
    cdee:	7a28      	ldrb	r0, [r5, #8]
    cdf0:	71e0      	strb	r0, [r4, #7]
    cdf2:	7a68      	ldrb	r0, [r5, #9]
    cdf4:	7220      	strb	r0, [r4, #8]
    cdf6:	7aa8      	ldrb	r0, [r5, #10]
    cdf8:	7260      	strb	r0, [r4, #9]
    cdfa:	7ae8      	ldrb	r0, [r5, #11]
    cdfc:	72a0      	strb	r0, [r4, #10]
    cdfe:	2009      	movs	r0, #9
    ce00:	e7cd      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce02:	7022      	strb	r2, [r4, #0]
    ce04:	20a1      	movs	r0, #161	; 0xa1
    ce06:	70a0      	strb	r0, [r4, #2]
    ce08:	7928      	ldrb	r0, [r5, #4]
    ce0a:	70e0      	strb	r0, [r4, #3]
    ce0c:	7968      	ldrb	r0, [r5, #5]
    ce0e:	7120      	strb	r0, [r4, #4]
    ce10:	2000      	movs	r0, #0
    ce12:	7160      	strb	r0, [r4, #5]
    ce14:	2004      	movs	r0, #4
    ce16:	e7c2      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce18:	7022      	strb	r2, [r4, #0]
    ce1a:	20a2      	movs	r0, #162	; 0xa2
    ce1c:	70a0      	strb	r0, [r4, #2]
    ce1e:	7928      	ldrb	r0, [r5, #4]
    ce20:	70e0      	strb	r0, [r4, #3]
    ce22:	88a8      	ldrh	r0, [r5, #4]
    ce24:	0a00      	lsrs	r0, r0, #8
    ce26:	7120      	strb	r0, [r4, #4]
    ce28:	79a8      	ldrb	r0, [r5, #6]
    ce2a:	7160      	strb	r0, [r4, #5]
    ce2c:	88e8      	ldrh	r0, [r5, #6]
    ce2e:	0a00      	lsrs	r0, r0, #8
    ce30:	71a0      	strb	r0, [r4, #6]
    ce32:	7a28      	ldrb	r0, [r5, #8]
    ce34:	71e0      	strb	r0, [r4, #7]
    ce36:	8928      	ldrh	r0, [r5, #8]
    ce38:	0a00      	lsrs	r0, r0, #8
    ce3a:	7220      	strb	r0, [r4, #8]
    ce3c:	7aa8      	ldrb	r0, [r5, #10]
    ce3e:	7260      	strb	r0, [r4, #9]
    ce40:	8968      	ldrh	r0, [r5, #10]
    ce42:	0a00      	lsrs	r0, r0, #8
    ce44:	72a0      	strb	r0, [r4, #10]
    ce46:	7b28      	ldrb	r0, [r5, #12]
    ce48:	72e0      	strb	r0, [r4, #11]
    ce4a:	89a8      	ldrh	r0, [r5, #12]
    ce4c:	0a00      	lsrs	r0, r0, #8
    ce4e:	7320      	strb	r0, [r4, #12]
    ce50:	200b      	movs	r0, #11
    ce52:	e7a4      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce54:	7022      	strb	r2, [r4, #0]
    ce56:	20a3      	movs	r0, #163	; 0xa3
    ce58:	70a0      	strb	r0, [r4, #2]
    ce5a:	7928      	ldrb	r0, [r5, #4]
    ce5c:	70e0      	strb	r0, [r4, #3]
    ce5e:	88a8      	ldrh	r0, [r5, #4]
    ce60:	0a00      	lsrs	r0, r0, #8
    ce62:	7120      	strb	r0, [r4, #4]
    ce64:	79a8      	ldrb	r0, [r5, #6]
    ce66:	7160      	strb	r0, [r4, #5]
    ce68:	79e8      	ldrb	r0, [r5, #7]
    ce6a:	71a0      	strb	r0, [r4, #6]
    ce6c:	2005      	movs	r0, #5
    ce6e:	e796      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce70:	7026      	strb	r6, [r4, #0]
    ce72:	2013      	movs	r0, #19
    ce74:	70a0      	strb	r0, [r4, #2]
    ce76:	7928      	ldrb	r0, [r5, #4]
    ce78:	70e0      	strb	r0, [r4, #3]
    ce7a:	7968      	ldrb	r0, [r5, #5]
    ce7c:	7120      	strb	r0, [r4, #4]
    ce7e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    ce82:	f8c4 0005 	str.w	r0, [r4, #5]
    ce86:	8968      	ldrh	r0, [r5, #10]
    ce88:	f8a4 0009 	strh.w	r0, [r4, #9]
    ce8c:	200a      	movs	r0, #10
    ce8e:	e786      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ce90:	7022      	strb	r2, [r4, #0]
    ce92:	20a4      	movs	r0, #164	; 0xa4
    ce94:	70a0      	strb	r0, [r4, #2]
    ce96:	7928      	ldrb	r0, [r5, #4]
    ce98:	70e0      	strb	r0, [r4, #3]
    ce9a:	88a8      	ldrh	r0, [r5, #4]
    ce9c:	0a00      	lsrs	r0, r0, #8
    ce9e:	7120      	strb	r0, [r4, #4]
    cea0:	79a8      	ldrb	r0, [r5, #6]
    cea2:	7160      	strb	r0, [r4, #5]
    cea4:	79e8      	ldrb	r0, [r5, #7]
    cea6:	71a0      	strb	r0, [r4, #6]
    cea8:	2007      	movs	r0, #7
    ceaa:	e778      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>
    ceac:	7022      	strb	r2, [r4, #0]
    ceae:	2080      	movs	r0, #128	; 0x80
    ceb0:	70a0      	strb	r0, [r4, #2]
    ceb2:	88a9      	ldrh	r1, [r5, #4]
    ceb4:	f8a4 1003 	strh.w	r1, [r4, #3]
    ceb8:	88e9      	ldrh	r1, [r5, #6]
    ceba:	f8a4 1005 	strh.w	r1, [r4, #5]
    cebe:	7a29      	ldrb	r1, [r5, #8]
    cec0:	71e1      	strb	r1, [r4, #7]
    cec2:	8969      	ldrh	r1, [r5, #10]
    cec4:	8121      	strh	r1, [r4, #8]
    cec6:	89a9      	ldrh	r1, [r5, #12]
    cec8:	8161      	strh	r1, [r4, #10]
    ceca:	89e9      	ldrh	r1, [r5, #14]
    cecc:	81a1      	strh	r1, [r4, #12]
    cece:	7c29      	ldrb	r1, [r5, #16]
    ced0:	f001 0101 	and.w	r1, r1, #1
    ced4:	73a1      	strb	r1, [r4, #14]
    ced6:	200d      	movs	r0, #13
    ced8:	e761      	b.n	cd9e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2f6>

0000ceda <sym_RLXNORQP6Y7G7SS35EHJD4DO5NCCU4CXTFXL2EA>:
    ceda:	223e      	movs	r2, #62	; 0x3e
    cedc:	7002      	strb	r2, [r0, #0]
    cede:	2201      	movs	r2, #1
    cee0:	7082      	strb	r2, [r0, #2]
    cee2:	790a      	ldrb	r2, [r1, #4]
    cee4:	70c2      	strb	r2, [r0, #3]
    cee6:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    ceea:	7102      	strb	r2, [r0, #4]
    ceec:	880a      	ldrh	r2, [r1, #0]
    ceee:	0a12      	lsrs	r2, r2, #8
    cef0:	7142      	strb	r2, [r0, #5]
    cef2:	788a      	ldrb	r2, [r1, #2]
    cef4:	7182      	strb	r2, [r0, #6]
    cef6:	78ca      	ldrb	r2, [r1, #3]
    cef8:	71c2      	strb	r2, [r0, #7]
    cefa:	684a      	ldr	r2, [r1, #4]
    cefc:	6082      	str	r2, [r0, #8]
    cefe:	890a      	ldrh	r2, [r1, #8]
    cf00:	8182      	strh	r2, [r0, #12]
    cf02:	7d8a      	ldrb	r2, [r1, #22]
    cf04:	7382      	strb	r2, [r0, #14]
    cf06:	8aca      	ldrh	r2, [r1, #22]
    cf08:	0a12      	lsrs	r2, r2, #8
    cf0a:	73c2      	strb	r2, [r0, #15]
    cf0c:	7e0a      	ldrb	r2, [r1, #24]
    cf0e:	7402      	strb	r2, [r0, #16]
    cf10:	8b0a      	ldrh	r2, [r1, #24]
    cf12:	0a12      	lsrs	r2, r2, #8
    cf14:	7442      	strb	r2, [r0, #17]
    cf16:	7e8a      	ldrb	r2, [r1, #26]
    cf18:	7482      	strb	r2, [r0, #18]
    cf1a:	8b4a      	ldrh	r2, [r1, #26]
    cf1c:	0a12      	lsrs	r2, r2, #8
    cf1e:	74c2      	strb	r2, [r0, #19]
    cf20:	7f09      	ldrb	r1, [r1, #28]
    cf22:	7501      	strb	r1, [r0, #20]
    cf24:	2113      	movs	r1, #19
    cf26:	7041      	strb	r1, [r0, #1]
    cf28:	4608      	mov	r0, r1
    cf2a:	4770      	bx	lr
    cf2c:	223e      	movs	r2, #62	; 0x3e
    cf2e:	7002      	strb	r2, [r0, #0]
    cf30:	220a      	movs	r2, #10
    cf32:	7082      	strb	r2, [r0, #2]
    cf34:	790a      	ldrb	r2, [r1, #4]
    cf36:	70c2      	strb	r2, [r0, #3]
    cf38:	f811 2f05 	ldrb.w	r2, [r1, #5]!
    cf3c:	7102      	strb	r2, [r0, #4]
    cf3e:	880a      	ldrh	r2, [r1, #0]
    cf40:	0a12      	lsrs	r2, r2, #8
    cf42:	7142      	strb	r2, [r0, #5]
    cf44:	788a      	ldrb	r2, [r1, #2]
    cf46:	7182      	strb	r2, [r0, #6]
    cf48:	78ca      	ldrb	r2, [r1, #3]
    cf4a:	71c2      	strb	r2, [r0, #7]
    cf4c:	684a      	ldr	r2, [r1, #4]
    cf4e:	6082      	str	r2, [r0, #8]
    cf50:	890a      	ldrh	r2, [r1, #8]
    cf52:	8182      	strh	r2, [r0, #12]
    cf54:	f8d1 200a 	ldr.w	r2, [r1, #10]
    cf58:	f8c0 200e 	str.w	r2, [r0, #14]
    cf5c:	89ca      	ldrh	r2, [r1, #14]
    cf5e:	8242      	strh	r2, [r0, #18]
    cf60:	690a      	ldr	r2, [r1, #16]
    cf62:	6142      	str	r2, [r0, #20]
    cf64:	8a8a      	ldrh	r2, [r1, #20]
    cf66:	8302      	strh	r2, [r0, #24]
    cf68:	7d8a      	ldrb	r2, [r1, #22]
    cf6a:	7682      	strb	r2, [r0, #26]
    cf6c:	8aca      	ldrh	r2, [r1, #22]
    cf6e:	0a12      	lsrs	r2, r2, #8
    cf70:	76c2      	strb	r2, [r0, #27]
    cf72:	7e0a      	ldrb	r2, [r1, #24]
    cf74:	7702      	strb	r2, [r0, #28]
    cf76:	8b0a      	ldrh	r2, [r1, #24]
    cf78:	0a12      	lsrs	r2, r2, #8
    cf7a:	7742      	strb	r2, [r0, #29]
    cf7c:	7e8a      	ldrb	r2, [r1, #26]
    cf7e:	7782      	strb	r2, [r0, #30]
    cf80:	8b4a      	ldrh	r2, [r1, #26]
    cf82:	0a12      	lsrs	r2, r2, #8
    cf84:	77c2      	strb	r2, [r0, #31]
    cf86:	7f09      	ldrb	r1, [r1, #28]
    cf88:	f880 1020 	strb.w	r1, [r0, #32]
    cf8c:	211f      	movs	r1, #31
    cf8e:	7041      	strb	r1, [r0, #1]
    cf90:	4608      	mov	r0, r1
    cf92:	4770      	bx	lr
    cf94:	094a      	lsrs	r2, r1, #5
    cf96:	f001 011f 	and.w	r1, r1, #31
    cf9a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    cf9e:	40c8      	lsrs	r0, r1
    cfa0:	f000 0001 	and.w	r0, r0, #1
    cfa4:	4770      	bx	lr

0000cfa6 <sdc_hci_data_put>:
    cfa6:	b510      	push	{r4, lr}
    cfa8:	f06f 0415 	mvn.w	r4, #21
    cfac:	b120      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfae:	f7ff fcf3 	bl	c998 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cfb2:	b108      	cbz	r0, cfb8 <sdc_hci_data_put+0x12>
    cfb4:	2000      	movs	r0, #0
    cfb6:	bd10      	pop	{r4, pc}
    cfb8:	4620      	mov	r0, r4
    cfba:	bd10      	pop	{r4, pc}

0000cfbc <sdc_hci_get>:
    cfbc:	b510      	push	{r4, lr}
    cfbe:	460c      	mov	r4, r1
    cfc0:	b130      	cbz	r0, cfd0 <sdc_hci_get+0x14>
    cfc2:	b12c      	cbz	r4, cfd0 <sdc_hci_get+0x14>
    cfc4:	f7f3 fe3a 	bl	c3c <sym_MS2INTHZLDZMKZ5TZUDLWHPLKH3FLVZPA26JG6A>
    cfc8:	b128      	cbz	r0, cfd6 <sdc_hci_get+0x1a>
    cfca:	7020      	strb	r0, [r4, #0]
    cfcc:	2000      	movs	r0, #0
    cfce:	bd10      	pop	{r4, pc}
    cfd0:	f06f 0015 	mvn.w	r0, #21
    cfd4:	bd10      	pop	{r4, pc}
    cfd6:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cfda:	bd10      	pop	{r4, pc}

0000cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cfdc:	f002 bd48 	b.w	fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>:
    cfe0:	f002 bd63 	b.w	faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cfe4 <sdc_hci_cmd_cb_set_event_mask>:
    cfe4:	b510      	push	{r4, lr}
    cfe6:	f7f3 fecd 	bl	d84 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cfea:	2000      	movs	r0, #0
    cfec:	bd10      	pop	{r4, pc}

0000cfee <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cfee:	b510      	push	{r4, lr}
    cff0:	f7f3 feda 	bl	da8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cff4:	2000      	movs	r0, #0
    cff6:	bd10      	pop	{r4, pc}

0000cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cff8:	f002 bd78 	b.w	faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cffc <sdc_hci_cmd_vs_conn_event_extend>:
    cffc:	b508      	push	{r3, lr}
    cffe:	7800      	ldrb	r0, [r0, #0]
    d000:	f88d 0000 	strb.w	r0, [sp]
    d004:	4668      	mov	r0, sp
    d006:	f002 fd0f 	bl	fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    d00a:	bd08      	pop	{r3, pc}

0000d00c <sdc_hci_cmd_vs_conn_update>:
    d00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    d00e:	2100      	movs	r1, #0
    d010:	9100      	str	r1, [sp, #0]
    d012:	9101      	str	r1, [sp, #4]
    d014:	9102      	str	r1, [sp, #8]
    d016:	9103      	str	r1, [sp, #12]
    d018:	f8d0 1002 	ldr.w	r1, [r0, #2]
    d01c:	f641 524c 	movw	r2, #7500	; 0x1d4c
    d020:	4291      	cmp	r1, r2
    d022:	d304      	bcc.n	d02e <sdc_hci_cmd_vs_conn_update+0x22>
    d024:	f240 42e2 	movw	r2, #1250	; 0x4e2
    d028:	fbb1 f1f2 	udiv	r1, r1, r2
    d02c:	e005      	b.n	d03a <sdc_hci_cmd_vs_conn_update+0x2e>
    d02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d032:	fbb1 f1f2 	udiv	r1, r1, r2
    d036:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    d03a:	8802      	ldrh	r2, [r0, #0]
    d03c:	b289      	uxth	r1, r1
    d03e:	f8ad 2000 	strh.w	r2, [sp]
    d042:	f8ad 1002 	strh.w	r1, [sp, #2]
    d046:	f8ad 1004 	strh.w	r1, [sp, #4]
    d04a:	88c1      	ldrh	r1, [r0, #6]
    d04c:	f8ad 1006 	strh.w	r1, [sp, #6]
    d050:	8900      	ldrh	r0, [r0, #8]
    d052:	f8ad 0008 	strh.w	r0, [sp, #8]
    d056:	4668      	mov	r0, sp
    d058:	f002 fa99 	bl	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    d05c:	b004      	add	sp, #16
    d05e:	bd10      	pop	{r4, pc}

0000d060 <sdc_hci_cmd_vs_event_length_set>:
    d060:	f7fa b880 	b.w	7164 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000d064 <sdc_hci_cmd_vs_llpm_mode_set>:
    d064:	2001      	movs	r0, #1
    d066:	4770      	bx	lr

0000d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    d068:	7800      	ldrb	r0, [r0, #0]
    d06a:	b100      	cbz	r0, d06e <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    d06c:	2001      	movs	r0, #1
    d06e:	f002 bc0a 	b.w	f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>:
    d072:	b510      	push	{r4, lr}
    d074:	4604      	mov	r4, r0
    d076:	f7ff f9e3 	bl	c440 <mpsl_temperature_get>
    d07a:	17c1      	asrs	r1, r0, #31
    d07c:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    d080:	1080      	asrs	r0, r0, #2
    d082:	287f      	cmp	r0, #127	; 0x7f
    d084:	dd01      	ble.n	d08a <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x18>
    d086:	207f      	movs	r0, #127	; 0x7f
    d088:	e004      	b.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d08a:	f06f 017e 	mvn.w	r1, #126	; 0x7e
    d08e:	4288      	cmp	r0, r1
    d090:	da00      	bge.n	d094 <sdc_hci_cmd_vs_zephyr_read_chip_temp+0x22>
    d092:	4608      	mov	r0, r1
    d094:	7020      	strb	r0, [r4, #0]
    d096:	2000      	movs	r0, #0
    d098:	bd10      	pop	{r4, pc}

0000d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    d09a:	b570      	push	{r4, r5, r6, lr}
    d09c:	4605      	mov	r5, r0
    d09e:	2210      	movs	r2, #16
    d0a0:	2100      	movs	r1, #0
    d0a2:	f003 fb5e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0a6:	2210      	movs	r2, #16
    d0a8:	2100      	movs	r1, #0
    d0aa:	f105 0010 	add.w	r0, r5, #16
    d0ae:	f003 fb58 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0b2:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d0b6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d0ba:	1c40      	adds	r0, r0, #1
    d0bc:	d10b      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0be:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0c2:	1c40      	adds	r0, r0, #1
    d0c4:	d107      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0c6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d0ca:	1c40      	adds	r0, r0, #1
    d0cc:	d103      	bne.n	d0d6 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d0ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d0d2:	1c40      	adds	r0, r0, #1
    d0d4:	d00b      	beq.n	d0ee <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d0d6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d0da:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d0de:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d0e2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d0e6:	612a      	str	r2, [r5, #16]
    d0e8:	6168      	str	r0, [r5, #20]
    d0ea:	61a9      	str	r1, [r5, #24]
    d0ec:	61eb      	str	r3, [r5, #28]
    d0ee:	2000      	movs	r0, #0
    d0f0:	f7f4 fac4 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d0f4:	b918      	cbnz	r0, d0fe <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d0f6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d0fa:	07c0      	lsls	r0, r0, #31
    d0fc:	d118      	bne.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d0fe:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d102:	1c40      	adds	r0, r0, #1
    d104:	d10b      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d106:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d10a:	1c40      	adds	r0, r0, #1
    d10c:	d107      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d10e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d112:	1c40      	adds	r0, r0, #1
    d114:	d103      	bne.n	d11e <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d116:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d11a:	1c40      	adds	r0, r0, #1
    d11c:	d008      	beq.n	d130 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d11e:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d122:	6861      	ldr	r1, [r4, #4]
    d124:	68a2      	ldr	r2, [r4, #8]
    d126:	68e3      	ldr	r3, [r4, #12]
    d128:	6028      	str	r0, [r5, #0]
    d12a:	6069      	str	r1, [r5, #4]
    d12c:	60aa      	str	r2, [r5, #8]
    d12e:	60eb      	str	r3, [r5, #12]
    d130:	2000      	movs	r0, #0
    d132:	bd70      	pop	{r4, r5, r6, pc}

0000d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d134:	b538      	push	{r3, r4, r5, lr}
    d136:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d13a:	4604      	mov	r4, r0
    d13c:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d140:	1c40      	adds	r0, r0, #1
    d142:	d105      	bne.n	d150 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d144:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d148:	43c0      	mvns	r0, r0
    d14a:	0400      	lsls	r0, r0, #16
    d14c:	0c00      	lsrs	r0, r0, #16
    d14e:	d03e      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d150:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d154:	07c0      	lsls	r0, r0, #31
    d156:	d03a      	beq.n	d1ce <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d158:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d15c:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d160:	f8ad 1000 	strh.w	r1, [sp]
    d164:	f8c4 0001 	str.w	r0, [r4, #1]
    d168:	f8bd 0000 	ldrh.w	r0, [sp]
    d16c:	f8a4 0005 	strh.w	r0, [r4, #5]
    d170:	79a0      	ldrb	r0, [r4, #6]
    d172:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d176:	71a0      	strb	r0, [r4, #6]
    d178:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d17c:	1c40      	adds	r0, r0, #1
    d17e:	d00f      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d180:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d184:	1c40      	adds	r0, r0, #1
    d186:	d00b      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d188:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d18c:	1c40      	adds	r0, r0, #1
    d18e:	d007      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d190:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d194:	1c40      	adds	r0, r0, #1
    d196:	d003      	beq.n	d1a0 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d198:	2000      	movs	r0, #0
    d19a:	f7f4 fa6f 	bl	167c <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d19e:	b140      	cbz	r0, d1b2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d1a0:	2210      	movs	r2, #16
    d1a2:	2100      	movs	r1, #0
    d1a4:	1de0      	adds	r0, r4, #7
    d1a6:	f003 fadc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d1aa:	2001      	movs	r0, #1
    d1ac:	7020      	strb	r0, [r4, #0]
    d1ae:	2000      	movs	r0, #0
    d1b0:	bd38      	pop	{r3, r4, r5, pc}
    d1b2:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d1b6:	6869      	ldr	r1, [r5, #4]
    d1b8:	68a8      	ldr	r0, [r5, #8]
    d1ba:	68eb      	ldr	r3, [r5, #12]
    d1bc:	f8c4 2007 	str.w	r2, [r4, #7]
    d1c0:	f8c4 100b 	str.w	r1, [r4, #11]
    d1c4:	f8c4 000f 	str.w	r0, [r4, #15]
    d1c8:	f8c4 3013 	str.w	r3, [r4, #19]
    d1cc:	e7ed      	b.n	d1aa <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d1ce:	2000      	movs	r0, #0
    d1d0:	e7ec      	b.n	d1ac <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d1d2:	f002 bc18 	b.w	fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d1d6 <sdc_hci_cmd_ip_read_bd_addr>:
    d1d6:	f002 bc5c 	b.w	fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d1da <sdc_hci_cmd_ip_read_local_version_information>:
    d1da:	f7fa b815 	b.w	7208 <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>:
    d1de:	f002 b9b5 	b.w	f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>:
    d1e2:	f002 b9ca 	b.w	f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d1e6 <sdc_hci_cmd_le_conn_update>:
    d1e6:	f002 b9d2 	b.w	f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d1ea <sdc_hci_cmd_le_create_conn>:
    d1ea:	f7f9 bea1 	b.w	6f30 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d1ee <sdc_hci_cmd_le_create_conn_cancel>:
    d1ee:	f002 ba11 	b.w	f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d1f2 <sdc_hci_cmd_le_enable_encryption>:
    d1f2:	f002 bb05 	b.w	f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d1f6 <sdc_hci_cmd_le_encrypt>:
    d1f6:	f002 ba1d 	b.w	f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d1fa <sdc_hci_cmd_le_rand>:
    d1fa:	f002 ba24 	b.w	f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d1fe <sdc_hci_cmd_le_read_buffer_size>:
    d1fe:	f7f9 bef3 	b.w	6fe8 <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d202 <sdc_hci_cmd_le_read_channel_map>:
    d202:	f7f9 befb 	b.w	6ffc <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d206 <sdc_hci_cmd_le_read_filter_accept_list_size>:
    d206:	f002 ba58 	b.w	f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d20a <sdc_hci_cmd_le_read_max_data_length>:
    d20a:	f002 ba22 	b.w	f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d20e <sdc_hci_cmd_le_read_phy>:
    d20e:	f7f9 bf1d 	b.w	704c <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d212 <sdc_hci_cmd_le_read_remote_features>:
    d212:	f002 ba27 	b.w	f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d216 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d216:	f7f9 bf3f 	b.w	7098 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d21a <sdc_hci_cmd_le_read_transmit_power>:
    d21a:	f002 ba3e 	b.w	f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>:
    d21e:	f002 ba50 	b.w	f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d222 <sdc_hci_cmd_le_set_data_length>:
    d222:	f002 ba63 	b.w	f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d226 <sdc_hci_cmd_le_set_default_phy>:
    d226:	f7f9 bf41 	b.w	70ac <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d22a <sdc_hci_cmd_le_set_event_mask>:
    d22a:	b510      	push	{r4, lr}
    d22c:	f7f3 fd98 	bl	d60 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d230:	2000      	movs	r0, #0
    d232:	bd10      	pop	{r4, pc}

0000d234 <sdc_hci_cmd_le_set_host_channel_classification>:
    d234:	f7f9 bf62 	b.w	70fc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d238 <sdc_hci_cmd_le_set_phy>:
    d238:	f002 ba78 	b.w	f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d23c <sdc_hci_cmd_le_set_random_address>:
    d23c:	f002 ba8f 	b.w	f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d240 <sdc_hci_cmd_le_set_scan_enable>:
    d240:	f002 ba9b 	b.w	f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d244 <sdc_hci_cmd_le_set_scan_params>:
    d244:	f002 baaf 	b.w	f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d248 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d248:	f002 bb0c 	b.w	f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d24c <sdc_hci_cmd_lc_disconnect>:
    d24c:	f002 b933 	b.w	f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d250 <sdc_hci_cmd_lc_read_remote_version_information>:
    d250:	f7f9 bfe4 	b.w	721c <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d254:	b570      	push	{r4, r5, r6, lr}
    d256:	880b      	ldrh	r3, [r1, #0]
    d258:	7cc4      	ldrb	r4, [r0, #19]
    d25a:	f100 0518 	add.w	r5, r0, #24
    d25e:	f3c3 060e 	ubfx	r6, r3, #0, #15
    d262:	8802      	ldrh	r2, [r0, #0]
    d264:	4435      	add	r5, r6
    d266:	1d64      	adds	r4, r4, #5
    d268:	882d      	ldrh	r5, [r5, #0]
    d26a:	4422      	add	r2, r4
    d26c:	b292      	uxth	r2, r2
    d26e:	4425      	add	r5, r4
    d270:	1e54      	subs	r4, r2, #1
    d272:	442c      	add	r4, r5
    d274:	fb94 f4f2 	sdiv	r4, r4, r2
    d278:	fb02 6204 	mla	r2, r2, r4, r6
    d27c:	8840      	ldrh	r0, [r0, #2]
    d27e:	b292      	uxth	r2, r2
    d280:	4290      	cmp	r0, r2
    d282:	d903      	bls.n	d28c <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d284:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d288:	4310      	orrs	r0, r2
    d28a:	e002      	b.n	d292 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d28c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d290:	4398      	bics	r0, r3
    d292:	8008      	strh	r0, [r1, #0]
    d294:	bd70      	pop	{r4, r5, r6, pc}
    d296:	0442      	lsls	r2, r0, #17
    d298:	ebb2 4f41 	cmp.w	r2, r1, lsl #17
    d29c:	d107      	bne.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d29e:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d2a2:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d2a6:	4288      	cmp	r0, r1
    d2a8:	d001      	beq.n	d2ae <sdc_hci_cmd_lc_read_remote_version_information+0x5e>
    d2aa:	2001      	movs	r0, #1
    d2ac:	4770      	bx	lr
    d2ae:	2000      	movs	r0, #0
    d2b0:	4770      	bx	lr

0000d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d2b2:	8881      	ldrh	r1, [r0, #4]
    d2b4:	88c0      	ldrh	r0, [r0, #6]
    d2b6:	4288      	cmp	r0, r1
    d2b8:	d101      	bne.n	d2be <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d2ba:	2001      	movs	r0, #1
    d2bc:	4770      	bx	lr
    d2be:	2000      	movs	r0, #0
    d2c0:	4770      	bx	lr

0000d2c2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d2c6:	460f      	mov	r7, r1
    d2c8:	4604      	mov	r4, r0
    d2ca:	f100 0118 	add.w	r1, r0, #24
    d2ce:	8880      	ldrh	r0, [r0, #4]
    d2d0:	2600      	movs	r6, #0
    d2d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d2d6:	1845      	adds	r5, r0, r1
    d2d8:	603e      	str	r6, [r7, #0]
    d2da:	89e0      	ldrh	r0, [r4, #14]
    d2dc:	2800      	cmp	r0, #0
    d2de:	d016      	beq.n	d30e <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2e0:	8961      	ldrh	r1, [r4, #10]
    d2e2:	4408      	add	r0, r1
    d2e4:	b280      	uxth	r0, r0
    d2e6:	8160      	strh	r0, [r4, #10]
    d2e8:	8829      	ldrh	r1, [r5, #0]
    d2ea:	4288      	cmp	r0, r1
    d2ec:	d905      	bls.n	d2fa <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x38>
    d2ee:	f240 1151 	movw	r1, #337	; 0x151
    d2f2:	f04f 0014 	mov.w	r0, #20
    d2f6:	f7f3 fbb5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2fa:	d106      	bne.n	d30a <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2fc:	f104 0104 	add.w	r1, r4, #4
    d300:	4620      	mov	r0, r4
    d302:	f7ff ffa7 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d306:	8166      	strh	r6, [r4, #10]
    d308:	603d      	str	r5, [r7, #0]
    d30a:	81e6      	strh	r6, [r4, #14]
    d30c:	2001      	movs	r0, #1
    d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d316:	4604      	mov	r4, r0
    d318:	f100 0318 	add.w	r3, r0, #24
    d31c:	88c0      	ldrh	r0, [r0, #6]
    d31e:	460e      	mov	r6, r1
    d320:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d324:	8a20      	ldrh	r0, [r4, #16]
    d326:	19d9      	adds	r1, r3, r7
    d328:	b108      	cbz	r0, d32e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1c>
    d32a:	42b0      	cmp	r0, r6
    d32c:	d202      	bcs.n	d334 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x22>
    d32e:	2000      	movs	r0, #0
    d330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d334:	89a0      	ldrh	r0, [r4, #12]
    d336:	2500      	movs	r5, #0
    d338:	b140      	cbz	r0, d34c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3a>
    d33a:	f8b1 c000 	ldrh.w	ip, [r1]
    d33e:	4560      	cmp	r0, ip
    d340:	d006      	beq.n	d350 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d342:	f44f 7101 	mov.w	r1, #516	; 0x204
    d346:	2014      	movs	r0, #20
    d348:	f7f3 fb8c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34c:	800d      	strh	r5, [r1, #0]
    d34e:	e00e      	b.n	d36e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d350:	f894 c013 	ldrb.w	ip, [r4, #19]
    d354:	4418      	add	r0, r3
    d356:	f10c 0c05 	add.w	ip, ip, #5
    d35a:	44bc      	add	ip, r7
    d35c:	4460      	add	r0, ip
    d35e:	f8b4 c014 	ldrh.w	ip, [r4, #20]
    d362:	f820 cc03 	strh.w	ip, [r0, #-3]
    d366:	f894 c016 	ldrb.w	ip, [r4, #22]
    d36a:	f800 cc01 	strb.w	ip, [r0, #-1]
    d36e:	89a0      	ldrh	r0, [r4, #12]
    d370:	4430      	add	r0, r6
    d372:	81a0      	strh	r0, [r4, #12]
    d374:	8808      	ldrh	r0, [r1, #0]
    d376:	4430      	add	r0, r6
    d378:	8008      	strh	r0, [r1, #0]
    d37a:	b12a      	cbz	r2, d388 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x76>
    d37c:	1da1      	adds	r1, r4, #6
    d37e:	4620      	mov	r0, r4
    d380:	f7ff ff68 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d384:	81a5      	strh	r5, [r4, #12]
    d386:	e00a      	b.n	d39e <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x8c>
    d388:	7ce0      	ldrb	r0, [r4, #19]
    d38a:	89a1      	ldrh	r1, [r4, #12]
    d38c:	1d40      	adds	r0, r0, #5
    d38e:	4438      	add	r0, r7
    d390:	4419      	add	r1, r3
    d392:	4408      	add	r0, r1
    d394:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d398:	82a1      	strh	r1, [r4, #20]
    d39a:	7880      	ldrb	r0, [r0, #2]
    d39c:	75a0      	strb	r0, [r4, #22]
    d39e:	8225      	strh	r5, [r4, #16]
    d3a0:	2001      	movs	r0, #1
    d3a2:	e7c5      	b.n	d330 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>

0000d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d3a4:	1c80      	adds	r0, r0, #2
    d3a6:	4770      	bx	lr

0000d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3a8:	b510      	push	{r4, lr}
    d3aa:	88c2      	ldrh	r2, [r0, #6]
    d3ac:	8903      	ldrh	r3, [r0, #8]
    d3ae:	f3c2 010e 	ubfx	r1, r2, #0, #15
    d3b2:	f3c3 040e 	ubfx	r4, r3, #0, #15
    d3b6:	1a61      	subs	r1, r4, r1
    d3b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3c0:	429a      	cmp	r2, r3
    d3c2:	d101      	bne.n	d3c8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d3c4:	8842      	ldrh	r2, [r0, #2]
    d3c6:	4411      	add	r1, r2
    d3c8:	7cc2      	ldrb	r2, [r0, #19]
    d3ca:	8800      	ldrh	r0, [r0, #0]
    d3cc:	4410      	add	r0, r2
    d3ce:	1d40      	adds	r0, r0, #5
    d3d0:	b280      	uxth	r0, r0
    d3d2:	fb91 f0f0 	sdiv	r0, r1, r0
    d3d6:	b280      	uxth	r0, r0
    d3d8:	bd10      	pop	{r4, pc}

0000d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3da:	b510      	push	{r4, lr}
    d3dc:	4604      	mov	r4, r0
    d3de:	88c0      	ldrh	r0, [r0, #6]
    d3e0:	88a1      	ldrh	r1, [r4, #4]
    d3e2:	4281      	cmp	r1, r0
    d3e4:	d003      	beq.n	d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3e6:	8960      	ldrh	r0, [r4, #10]
    d3e8:	b908      	cbnz	r0, d3ee <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x14>
    d3ea:	89e0      	ldrh	r0, [r4, #14]
    d3ec:	b108      	cbz	r0, d3f2 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x18>
    d3ee:	2000      	movs	r0, #0
    d3f0:	bd10      	pop	{r4, pc}
    d3f2:	1d21      	adds	r1, r4, #4
    d3f4:	4620      	mov	r0, r4
    d3f6:	f7ff ff2d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3fa:	2000      	movs	r0, #0
    d3fc:	81e0      	strh	r0, [r4, #14]
    d3fe:	2001      	movs	r0, #1
    d400:	bd10      	pop	{r4, pc}

0000d402 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d402:	b510      	push	{r4, lr}
    d404:	4604      	mov	r4, r0
    d406:	f100 0218 	add.w	r2, r0, #24
    d40a:	88c0      	ldrh	r0, [r0, #6]
    d40c:	f3c0 000e 	ubfx	r0, r0, #0, #15
    d410:	4402      	add	r2, r0
    d412:	8820      	ldrh	r0, [r4, #0]
    d414:	2845      	cmp	r0, #69	; 0x45
    d416:	d200      	bcs.n	d41a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d418:	2045      	movs	r0, #69	; 0x45
    d41a:	4288      	cmp	r0, r1
    d41c:	d204      	bcs.n	d428 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d41e:	f44f 7182 	mov.w	r1, #260	; 0x104
    d422:	2014      	movs	r0, #20
    d424:	f7f3 fb1e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d428:	7ca0      	ldrb	r0, [r4, #18]
    d42a:	2800      	cmp	r0, #0
    d42c:	d003      	beq.n	d436 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d42e:	8810      	ldrh	r0, [r2, #0]
    d430:	4288      	cmp	r0, r1
    d432:	d201      	bcs.n	d438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d434:	2000      	movs	r0, #0
    d436:	bd10      	pop	{r4, pc}
    d438:	8011      	strh	r1, [r2, #0]
    d43a:	1da1      	adds	r1, r4, #6
    d43c:	4620      	mov	r0, r4
    d43e:	f7ff ff09 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d442:	2000      	movs	r0, #0
    d444:	74a0      	strb	r0, [r4, #18]
    d446:	2001      	movs	r0, #1
    d448:	bd10      	pop	{r4, pc}

0000d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d44a:	b510      	push	{r4, lr}
    d44c:	88c4      	ldrh	r4, [r0, #6]
    d44e:	8883      	ldrh	r3, [r0, #4]
    d450:	4601      	mov	r1, r0
    d452:	f100 0218 	add.w	r2, r0, #24
    d456:	f3c3 000e 	ubfx	r0, r3, #0, #15
    d45a:	4410      	add	r0, r2
    d45c:	42a3      	cmp	r3, r4
    d45e:	d002      	beq.n	d466 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1c>
    d460:	8949      	ldrh	r1, [r1, #10]
    d462:	2900      	cmp	r1, #0
    d464:	d000      	beq.n	d468 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x1e>
    d466:	2000      	movs	r0, #0
    d468:	bd10      	pop	{r4, pc}

0000d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d46a:	8803      	ldrh	r3, [r0, #0]
    d46c:	2b45      	cmp	r3, #69	; 0x45
    d46e:	d200      	bcs.n	d472 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d470:	2345      	movs	r3, #69	; 0x45
    d472:	8013      	strh	r3, [r2, #0]
    d474:	88c2      	ldrh	r2, [r0, #6]
    d476:	f3c2 030e 	ubfx	r3, r2, #0, #15
    d47a:	f100 0218 	add.w	r2, r0, #24
    d47e:	441a      	add	r2, r3
    d480:	600a      	str	r2, [r1, #0]
    d482:	8980      	ldrh	r0, [r0, #12]
    d484:	4770      	bx	lr

0000d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d486:	7cc0      	ldrb	r0, [r0, #19]
    d488:	1d40      	adds	r0, r0, #5
    d48a:	4408      	add	r0, r1
    d48c:	1ec0      	subs	r0, r0, #3
    d48e:	6010      	str	r0, [r2, #0]
    d490:	8808      	ldrh	r0, [r1, #0]
    d492:	4770      	bx	lr

0000d494 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d498:	460e      	mov	r6, r1
    d49a:	88c1      	ldrh	r1, [r0, #6]
    d49c:	8902      	ldrh	r2, [r0, #8]
    d49e:	4604      	mov	r4, r0
    d4a0:	f100 0818 	add.w	r8, r0, #24
    d4a4:	8800      	ldrh	r0, [r0, #0]
    d4a6:	f3c1 050e 	ubfx	r5, r1, #0, #15
    d4aa:	f3c2 070e 	ubfx	r7, r2, #0, #15
    d4ae:	2845      	cmp	r0, #69	; 0x45
    d4b0:	d200      	bcs.n	d4b4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d4b2:	2045      	movs	r0, #69	; 0x45
    d4b4:	42b0      	cmp	r0, r6
    d4b6:	d203      	bcs.n	d4c0 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d4b8:	21c6      	movs	r1, #198	; 0xc6
    d4ba:	2014      	movs	r0, #20
    d4bc:	f7f3 fad2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d4c0:	4610      	mov	r0, r2
    d4c2:	f7ff fee8 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d4c6:	b110      	cbz	r0, d4ce <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d4c8:	2000      	movs	r0, #0
    d4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4ce:	42af      	cmp	r7, r5
    d4d0:	d908      	bls.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4d2:	7ce1      	ldrb	r1, [r4, #19]
    d4d4:	1b78      	subs	r0, r7, r5
    d4d6:	1a40      	subs	r0, r0, r1
    d4d8:	1f40      	subs	r0, r0, #5
    d4da:	4286      	cmp	r6, r0
    d4dc:	dd02      	ble.n	d4e4 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d4de:	2000      	movs	r0, #0
    d4e0:	74a0      	strb	r0, [r4, #18]
    d4e2:	e7f1      	b.n	d4c8 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d4e4:	eb08 0005 	add.w	r0, r8, r5
    d4e8:	2101      	movs	r1, #1
    d4ea:	8006      	strh	r6, [r0, #0]
    d4ec:	74a1      	strb	r1, [r4, #18]
    d4ee:	e7ec      	b.n	d4ca <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d4f0 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d4f0:	b538      	push	{r3, r4, r5, lr}
    d4f2:	88c4      	ldrh	r4, [r0, #6]
    d4f4:	8881      	ldrh	r1, [r0, #4]
    d4f6:	f100 0218 	add.w	r2, r0, #24
    d4fa:	f3c1 030e 	ubfx	r3, r1, #0, #15
    d4fe:	441a      	add	r2, r3
    d500:	42a1      	cmp	r1, r4
    d502:	d010      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d504:	8943      	ldrh	r3, [r0, #10]
    d506:	89c5      	ldrh	r5, [r0, #14]
    d508:	8812      	ldrh	r2, [r2, #0]
    d50a:	442b      	add	r3, r5
    d50c:	4293      	cmp	r3, r2
    d50e:	d308      	bcc.n	d522 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d510:	f8ad 1000 	strh.w	r1, [sp]
    d514:	4669      	mov	r1, sp
    d516:	f7ff fe9d 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d51a:	f8bd 0000 	ldrh.w	r0, [sp]
    d51e:	42a0      	cmp	r0, r4
    d520:	d001      	beq.n	d526 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d522:	2001      	movs	r0, #1
    d524:	bd38      	pop	{r3, r4, r5, pc}
    d526:	2000      	movs	r0, #0
    d528:	bd38      	pop	{r3, r4, r5, pc}

0000d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d52a:	b570      	push	{r4, r5, r6, lr}
    d52c:	88c6      	ldrh	r6, [r0, #6]
    d52e:	8885      	ldrh	r5, [r0, #4]
    d530:	4603      	mov	r3, r0
    d532:	f100 0418 	add.w	r4, r0, #24
    d536:	f3c5 000e 	ubfx	r0, r5, #0, #15
    d53a:	4420      	add	r0, r4
    d53c:	42b5      	cmp	r5, r6
    d53e:	d102      	bne.n	d546 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d540:	2000      	movs	r0, #0
    d542:	81d8      	strh	r0, [r3, #14]
    d544:	bd70      	pop	{r4, r5, r6, pc}
    d546:	8804      	ldrh	r4, [r0, #0]
    d548:	895d      	ldrh	r5, [r3, #10]
    d54a:	7cde      	ldrb	r6, [r3, #19]
    d54c:	1b64      	subs	r4, r4, r5
    d54e:	4435      	add	r5, r6
    d550:	4428      	add	r0, r5
    d552:	880d      	ldrh	r5, [r1, #0]
    d554:	b2a4      	uxth	r4, r4
    d556:	1c80      	adds	r0, r0, #2
    d558:	42a5      	cmp	r5, r4
    d55a:	d900      	bls.n	d55e <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d55c:	800c      	strh	r4, [r1, #0]
    d55e:	895c      	ldrh	r4, [r3, #10]
    d560:	b124      	cbz	r4, d56c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d562:	2400      	movs	r4, #0
    d564:	7014      	strb	r4, [r2, #0]
    d566:	8809      	ldrh	r1, [r1, #0]
    d568:	81d9      	strh	r1, [r3, #14]
    d56a:	bd70      	pop	{r4, r5, r6, pc}
    d56c:	2401      	movs	r4, #1
    d56e:	e7f9      	b.n	d564 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d570 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d574:	461d      	mov	r5, r3
    d576:	4616      	mov	r6, r2
    d578:	9f06      	ldr	r7, [sp, #24]
    d57a:	460b      	mov	r3, r1
    d57c:	4604      	mov	r4, r0
    d57e:	463a      	mov	r2, r7
    d580:	4629      	mov	r1, r5
    d582:	4630      	mov	r0, r6
    d584:	f000 f839 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d588:	4283      	cmp	r3, r0
    d58a:	d201      	bcs.n	d590 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d58c:	219e      	movs	r1, #158	; 0x9e
    d58e:	e012      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d590:	07a0      	lsls	r0, r4, #30
    d592:	d001      	beq.n	d598 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x28>
    d594:	219f      	movs	r1, #159	; 0x9f
    d596:	e00e      	b.n	d5b6 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x46>
    d598:	2218      	movs	r2, #24
    d59a:	2100      	movs	r1, #0
    d59c:	4620      	mov	r0, r4
    d59e:	f003 f8e0 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d5a2:	19a8      	adds	r0, r5, r6
    d5a4:	1d40      	adds	r0, r0, #5
    d5a6:	4378      	muls	r0, r7
    d5a8:	b280      	uxth	r0, r0
    d5aa:	74e5      	strb	r5, [r4, #19]
    d5ac:	8060      	strh	r0, [r4, #2]
    d5ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d5b2:	d903      	bls.n	d5bc <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x4c>
    d5b4:	21a4      	movs	r1, #164	; 0xa4
    d5b6:	2014      	movs	r0, #20
    d5b8:	f7f3 fa54 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5bc:	8026      	strh	r6, [r4, #0]
    d5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d5c2:	b570      	push	{r4, r5, r6, lr}
    d5c4:	460b      	mov	r3, r1
    d5c6:	4604      	mov	r4, r0
    d5c8:	f100 0118 	add.w	r1, r0, #24
    d5cc:	8902      	ldrh	r2, [r0, #8]
    d5ce:	8880      	ldrh	r0, [r0, #4]
    d5d0:	f3c2 050e 	ubfx	r5, r2, #0, #15
    d5d4:	440d      	add	r5, r1
    d5d6:	4282      	cmp	r2, r0
    d5d8:	d101      	bne.n	d5de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x1c>
    d5da:	2000      	movs	r0, #0
    d5dc:	bd70      	pop	{r4, r5, r6, pc}
    d5de:	b123      	cbz	r3, d5ea <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x28>
    d5e0:	7ce2      	ldrb	r2, [r4, #19]
    d5e2:	1ca9      	adds	r1, r5, #2
    d5e4:	4618      	mov	r0, r3
    d5e6:	f003 f842 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d5ea:	882d      	ldrh	r5, [r5, #0]
    d5ec:	f104 0108 	add.w	r1, r4, #8
    d5f0:	4620      	mov	r0, r4
    d5f2:	f7ff fe2f 	bl	d254 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d5f6:	4628      	mov	r0, r5
    d5f8:	bd70      	pop	{r4, r5, r6, pc}

0000d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d5fa:	4401      	add	r1, r0
    d5fc:	1d49      	adds	r1, r1, #5
    d5fe:	4351      	muls	r1, r2
    d600:	b28a      	uxth	r2, r1
    d602:	2100      	movs	r1, #0
    d604:	2845      	cmp	r0, #69	; 0x45
    d606:	d202      	bcs.n	d60e <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x14>
    d608:	f1c0 0045 	rsb	r0, r0, #69	; 0x45
    d60c:	b281      	uxth	r1, r0
    d60e:	3218      	adds	r2, #24
    d610:	1850      	adds	r0, r2, r1
    d612:	b280      	uxth	r0, r0
    d614:	4770      	bx	lr

0000d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d61a:	4688      	mov	r8, r1
    d61c:	88c1      	ldrh	r1, [r0, #6]
    d61e:	4604      	mov	r4, r0
    d620:	8900      	ldrh	r0, [r0, #8]
    d622:	f3c1 060e 	ubfx	r6, r1, #0, #15
    d626:	f104 0518 	add.w	r5, r4, #24
    d62a:	f3c0 070e 	ubfx	r7, r0, #0, #15
    d62e:	eb05 0906 	add.w	r9, r5, r6
    d632:	f7ff fe30 	bl	d296 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d636:	2200      	movs	r2, #0
    d638:	b998      	cbnz	r0, d662 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d63a:	8820      	ldrh	r0, [r4, #0]
    d63c:	2845      	cmp	r0, #69	; 0x45
    d63e:	d200      	bcs.n	d642 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d640:	2045      	movs	r0, #69	; 0x45
    d642:	42b7      	cmp	r7, r6
    d644:	d906      	bls.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d646:	7ce3      	ldrb	r3, [r4, #19]
    d648:	1bb9      	subs	r1, r7, r6
    d64a:	1ac9      	subs	r1, r1, r3
    d64c:	1f49      	subs	r1, r1, #5
    d64e:	4281      	cmp	r1, r0
    d650:	da00      	bge.n	d654 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d652:	4608      	mov	r0, r1
    d654:	89a1      	ldrh	r1, [r4, #12]
    d656:	b111      	cbz	r1, d65e <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d658:	f8b9 3000 	ldrh.w	r3, [r9]
    d65c:	1ac0      	subs	r0, r0, r3
    d65e:	4540      	cmp	r0, r8
    d660:	da03      	bge.n	d66a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d662:	8222      	strh	r2, [r4, #16]
    d664:	2000      	movs	r0, #0
    d666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d66a:	7ce0      	ldrb	r0, [r4, #19]
    d66c:	4429      	add	r1, r5
    d66e:	1d40      	adds	r0, r0, #5
    d670:	4430      	add	r0, r6
    d672:	4408      	add	r0, r1
    d674:	f8a4 8010 	strh.w	r8, [r4, #16]
    d678:	1ec0      	subs	r0, r0, #3
    d67a:	e7f4      	b.n	d666 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d67c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d67c:	b570      	push	{r4, r5, r6, lr}
    d67e:	2300      	movs	r3, #0
    d680:	f1a1 0208 	sub.w	r2, r1, #8
    d684:	f64f 74f7 	movw	r4, #65527	; 0xfff7
    d688:	42a2      	cmp	r2, r4
    d68a:	d304      	bcc.n	d696 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d68c:	f240 11cd 	movw	r1, #461	; 0x1cd
    d690:	2015      	movs	r0, #21
    d692:	f7f3 f9e7 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d696:	6802      	ldr	r2, [r0, #0]
    d698:	b90a      	cbnz	r2, d69e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x22>
    d69a:	e01e      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d69c:	4610      	mov	r0, r2
    d69e:	6802      	ldr	r2, [r0, #0]
    d6a0:	8893      	ldrh	r3, [r2, #4]
    d6a2:	428b      	cmp	r3, r1
    d6a4:	d002      	beq.n	d6ac <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x30>
    d6a6:	6813      	ldr	r3, [r2, #0]
    d6a8:	2b00      	cmp	r3, #0
    d6aa:	d1f7      	bne.n	d69c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x20>
    d6ac:	8894      	ldrh	r4, [r2, #4]
    d6ae:	4613      	mov	r3, r2
    d6b0:	428c      	cmp	r4, r1
    d6b2:	d101      	bne.n	d6b8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x3c>
    d6b4:	6811      	ldr	r1, [r2, #0]
    d6b6:	e00d      	b.n	d6d4 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x58>
    d6b8:	f101 0508 	add.w	r5, r1, #8
    d6bc:	b2ae      	uxth	r6, r5
    d6be:	2500      	movs	r5, #0
    d6c0:	42b4      	cmp	r4, r6
    d6c2:	d309      	bcc.n	d6d8 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5c>
    d6c4:	1a64      	subs	r4, r4, r1
    d6c6:	4411      	add	r1, r2
    d6c8:	600d      	str	r5, [r1, #0]
    d6ca:	808c      	strh	r4, [r1, #4]
    d6cc:	6802      	ldr	r2, [r0, #0]
    d6ce:	6812      	ldr	r2, [r2, #0]
    d6d0:	6002      	str	r2, [r0, #0]
    d6d2:	600a      	str	r2, [r1, #0]
    d6d4:	6001      	str	r1, [r0, #0]
    d6d6:	e000      	b.n	d6da <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x5e>
    d6d8:	2300      	movs	r3, #0
    d6da:	4618      	mov	r0, r3
    d6dc:	bd70      	pop	{r4, r5, r6, pc}

0000d6de <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d6de:	b510      	push	{r4, lr}
    d6e0:	000c      	movs	r4, r1
    d6e2:	d004      	beq.n	d6ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x10>
    d6e4:	2c08      	cmp	r4, #8
    d6e6:	d207      	bcs.n	d6f8 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d6e8:	f240 1195 	movw	r1, #405	; 0x195
    d6ec:	e00a      	b.n	d704 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x26>
    d6ee:	b108      	cbz	r0, d6f4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x16>
    d6f0:	2100      	movs	r1, #0
    d6f2:	6001      	str	r1, [r0, #0]
    d6f4:	2000      	movs	r0, #0
    d6f6:	bd10      	pop	{r4, pc}
    d6f8:	b158      	cbz	r0, d712 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x34>
    d6fa:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    d6fe:	d304      	bcc.n	d70a <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x2c>
    d700:	f240 11a7 	movw	r1, #423	; 0x1a7
    d704:	2015      	movs	r0, #21
    d706:	f7f3 f9ad 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d70a:	b2a1      	uxth	r1, r4
    d70c:	6800      	ldr	r0, [r0, #0]
    d70e:	f000 f814 	bl	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d712:	1d20      	adds	r0, r4, #4
    d714:	bd10      	pop	{r4, pc}

0000d716 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d716:	2100      	movs	r1, #0
    d718:	6802      	ldr	r2, [r0, #0]
    d71a:	e003      	b.n	d724 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d71c:	8893      	ldrh	r3, [r2, #4]
    d71e:	6812      	ldr	r2, [r2, #0]
    d720:	4419      	add	r1, r3
    d722:	b289      	uxth	r1, r1
    d724:	2a00      	cmp	r2, #0
    d726:	d1f9      	bne.n	d71c <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d728:	f000 b807 	b.w	d73a <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d72c <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d72c:	2300      	movs	r3, #0
    d72e:	600b      	str	r3, [r1, #0]
    d730:	808a      	strh	r2, [r1, #4]
    d732:	6802      	ldr	r2, [r0, #0]
    d734:	600a      	str	r2, [r1, #0]
    d736:	6001      	str	r1, [r0, #0]
    d738:	4770      	bx	lr
    d73a:	2300      	movs	r3, #0
    d73c:	6043      	str	r3, [r0, #4]
    d73e:	1d02      	adds	r2, r0, #4
    d740:	8101      	strh	r1, [r0, #8]
    d742:	6002      	str	r2, [r0, #0]
    d744:	4770      	bx	lr

0000d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    d746:	b51c      	push	{r2, r3, r4, lr}
    d748:	4604      	mov	r4, r0
    d74a:	2000      	movs	r0, #0
    d74c:	9001      	str	r0, [sp, #4]
    d74e:	9000      	str	r0, [sp, #0]
    d750:	f88d 4006 	strb.w	r4, [sp, #6]
    d754:	e00a      	b.n	d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d756:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    d75a:	4621      	mov	r1, r4
    d75c:	f7f3 fbe6 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    d760:	b120      	cbz	r0, d76c <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x26>
    d762:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    d766:	2017      	movs	r0, #23
    d768:	f7f3 f97c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d76c:	4668      	mov	r0, sp
    d76e:	f7f3 fb97 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    d772:	2800      	cmp	r0, #0
    d774:	d0ef      	beq.n	d756 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x10>
    d776:	bd1c      	pop	{r2, r3, r4, pc}

0000d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d778:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d77c:	3aff      	subs	r2, #255	; 0xff
    d77e:	d000      	beq.n	d782 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d780:	b109      	cbz	r1, d786 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d782:	2000      	movs	r0, #0
    d784:	4770      	bx	lr
    d786:	f7f3 bc23 	b.w	fd0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa4>
    d78a:	b510      	push	{r4, lr}
    d78c:	4604      	mov	r4, r0
    d78e:	f7f3 fc6b 	bl	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
    d792:	42a0      	cmp	r0, r4
    d794:	d901      	bls.n	d79a <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0x22>
    d796:	2001      	movs	r0, #1
    d798:	bd10      	pop	{r4, pc}
    d79a:	2000      	movs	r0, #0
    d79c:	bd10      	pop	{r4, pc}

0000d79e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d79e:	b570      	push	{r4, r5, r6, lr}
    d7a0:	460e      	mov	r6, r1
    d7a2:	461d      	mov	r5, r3
    d7a4:	4611      	mov	r1, r2
    d7a6:	f000 f813 	bl	d7d0 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x32>
    d7aa:	4604      	mov	r4, r0
    d7ac:	4629      	mov	r1, r5
    d7ae:	4630      	mov	r0, r6
    d7b0:	f000 f804 	bl	d7bc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1e>
    d7b4:	4420      	add	r0, r4
    d7b6:	1d00      	adds	r0, r0, #4
    d7b8:	b280      	uxth	r0, r0
    d7ba:	bd70      	pop	{r4, r5, r6, pc}
    d7bc:	b510      	push	{r4, lr}
    d7be:	460a      	mov	r2, r1
    d7c0:	2109      	movs	r1, #9
    d7c2:	f7ff ff1a 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7c6:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7ca:	1cc0      	adds	r0, r0, #3
    d7cc:	4008      	ands	r0, r1
    d7ce:	bd10      	pop	{r4, pc}
    d7d0:	b510      	push	{r4, lr}
    d7d2:	460a      	mov	r2, r1
    d7d4:	210a      	movs	r1, #10
    d7d6:	f7ff ff10 	bl	d5fa <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d7da:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    d7de:	1cc0      	adds	r0, r0, #3
    d7e0:	4008      	ands	r0, r1
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	2800      	cmp	r0, #0
    d7e6:	db09      	blt.n	d7fc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5e>
    d7e8:	f000 021f 	and.w	r2, r0, #31
    d7ec:	2101      	movs	r1, #1
    d7ee:	4091      	lsls	r1, r2
    d7f0:	0940      	lsrs	r0, r0, #5
    d7f2:	0080      	lsls	r0, r0, #2
    d7f4:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d7f8:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d7fc:	4770      	bx	lr
    d7fe:	2800      	cmp	r0, #0
    d800:	db0d      	blt.n	d81e <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x80>
    d802:	f000 021f 	and.w	r2, r0, #31
    d806:	2101      	movs	r1, #1
    d808:	4091      	lsls	r1, r2
    d80a:	0940      	lsrs	r0, r0, #5
    d80c:	0080      	lsls	r0, r0, #2
    d80e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d812:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d816:	f3bf 8f4f 	dsb	sy
    d81a:	f3bf 8f6f 	isb	sy
    d81e:	4770      	bx	lr
    d820:	b510      	push	{r4, lr}
    d822:	200e      	movs	r0, #14
    d824:	f7ff ffeb 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d828:	200e      	movs	r0, #14
    d82a:	f7ff ffdb 	bl	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d82e:	200f      	movs	r0, #15
    d830:	f7ff ffe5 	bl	d7fe <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x60>
    d834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d838:	200f      	movs	r0, #15
    d83a:	f7ff bfd3 	b.w	d7e4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x46>
    d83e:	2800      	cmp	r0, #0
    d840:	db09      	blt.n	d856 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xb8>
    d842:	f000 021f 	and.w	r2, r0, #31
    d846:	2101      	movs	r1, #1
    d848:	4091      	lsls	r1, r2
    d84a:	0940      	lsrs	r0, r0, #5
    d84c:	0080      	lsls	r0, r0, #2
    d84e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d852:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d856:	4770      	bx	lr
    d858:	5840      	ldr	r0, [r0, r1]
    d85a:	2800      	cmp	r0, #0
    d85c:	d000      	beq.n	d860 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0xc2>
    d85e:	2001      	movs	r0, #1
    d860:	4770      	bx	lr

0000d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    d862:	b510      	push	{r4, lr}
    d864:	4604      	mov	r4, r0
    d866:	4620      	mov	r0, r4
    d868:	f7f3 fd70 	bl	134c <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x28>
    d86c:	2811      	cmp	r0, #17
    d86e:	d0fa      	beq.n	d866 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x4>
    d870:	bd10      	pop	{r4, pc}

0000d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d872:	b510      	push	{r4, lr}
    d874:	f7ff fff5 	bl	d862 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>
    d878:	2800      	cmp	r0, #0
    d87a:	d003      	beq.n	d884 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A+0x12>
    d87c:	21a0      	movs	r1, #160	; 0xa0
    d87e:	201d      	movs	r0, #29
    d880:	f7f3 f8f0 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d884:	bd10      	pop	{r4, pc}

0000d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d886:	f7f3 bebf 	b.w	1608 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d88a <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d88a:	f7f3 bead 	b.w	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>:
    d88e:	b510      	push	{r4, lr}
    d890:	4050      	eors	r0, r2
    d892:	780a      	ldrb	r2, [r1, #0]
    d894:	781c      	ldrb	r4, [r3, #0]
    d896:	4062      	eors	r2, r4
    d898:	4410      	add	r0, r2
    d89a:	784a      	ldrb	r2, [r1, #1]
    d89c:	785c      	ldrb	r4, [r3, #1]
    d89e:	4062      	eors	r2, r4
    d8a0:	4410      	add	r0, r2
    d8a2:	788a      	ldrb	r2, [r1, #2]
    d8a4:	789c      	ldrb	r4, [r3, #2]
    d8a6:	4062      	eors	r2, r4
    d8a8:	4410      	add	r0, r2
    d8aa:	78ca      	ldrb	r2, [r1, #3]
    d8ac:	78dc      	ldrb	r4, [r3, #3]
    d8ae:	4062      	eors	r2, r4
    d8b0:	4410      	add	r0, r2
    d8b2:	790a      	ldrb	r2, [r1, #4]
    d8b4:	791c      	ldrb	r4, [r3, #4]
    d8b6:	7949      	ldrb	r1, [r1, #5]
    d8b8:	4062      	eors	r2, r4
    d8ba:	4410      	add	r0, r2
    d8bc:	795a      	ldrb	r2, [r3, #5]
    d8be:	4051      	eors	r1, r2
    d8c0:	42c1      	cmn	r1, r0
    d8c2:	d101      	bne.n	d8c8 <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI+0x3a>
    d8c4:	2001      	movs	r0, #1
    d8c6:	bd10      	pop	{r4, pc}
    d8c8:	2000      	movs	r0, #0
    d8ca:	bd10      	pop	{r4, pc}

0000d8cc <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d8cc:	b510      	push	{r4, lr}
    d8ce:	2900      	cmp	r1, #0
    d8d0:	4604      	mov	r4, r0
    d8d2:	f04f 0106 	mov.w	r1, #6
    d8d6:	d002      	beq.n	d8de <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d8d8:	f7f3 f956 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d8dc:	e001      	b.n	d8e2 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d8de:	f7f3 f961 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d8e2:	7960      	ldrb	r0, [r4, #5]
    d8e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d8e8:	7160      	strb	r0, [r4, #5]
    d8ea:	bd10      	pop	{r4, pc}

0000d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d8ec:	4770      	bx	lr

0000d8ee <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d8ee:	b530      	push	{r4, r5, lr}
    d8f0:	460c      	mov	r4, r1
    d8f2:	4605      	mov	r5, r0
    d8f4:	b08d      	sub	sp, #52	; 0x34
    d8f6:	f04f 0103 	mov.w	r1, #3
    d8fa:	f104 0003 	add.w	r0, r4, #3
    d8fe:	b112      	cbz	r2, d906 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d900:	f7f3 f942 	bl	b88 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d904:	e001      	b.n	d90a <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d906:	f7f3 f94d 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d90a:	7960      	ldrb	r0, [r4, #5]
    d90c:	220d      	movs	r2, #13
    d90e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    d912:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d916:	7160      	strb	r0, [r4, #5]
    d918:	2100      	movs	r1, #0
    d91a:	a804      	add	r0, sp, #16
    d91c:	f002 ff21 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d920:	78e0      	ldrb	r0, [r4, #3]
    d922:	f88d 001f 	strb.w	r0, [sp, #31]
    d926:	7920      	ldrb	r0, [r4, #4]
    d928:	f88d 001e 	strb.w	r0, [sp, #30]
    d92c:	7960      	ldrb	r0, [r4, #5]
    d92e:	f88d 001d 	strb.w	r0, [sp, #29]
    d932:	2210      	movs	r2, #16
    d934:	4629      	mov	r1, r5
    d936:	4668      	mov	r0, sp
    d938:	f002 fe99 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d93c:	4668      	mov	r0, sp
    d93e:	f7ff ff98 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d942:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d946:	7020      	strb	r0, [r4, #0]
    d948:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d94c:	7060      	strb	r0, [r4, #1]
    d94e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d952:	70a0      	strb	r0, [r4, #2]
    d954:	b00d      	add	sp, #52	; 0x34
    d956:	bd30      	pop	{r4, r5, pc}

0000d958 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d958:	b530      	push	{r4, r5, lr}
    d95a:	b08d      	sub	sp, #52	; 0x34
    d95c:	460c      	mov	r4, r1
    d95e:	4605      	mov	r5, r0
    d960:	220d      	movs	r2, #13
    d962:	2100      	movs	r1, #0
    d964:	a804      	add	r0, sp, #16
    d966:	f002 fefc 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d96a:	78e0      	ldrb	r0, [r4, #3]
    d96c:	f88d 001f 	strb.w	r0, [sp, #31]
    d970:	7920      	ldrb	r0, [r4, #4]
    d972:	f88d 001e 	strb.w	r0, [sp, #30]
    d976:	7960      	ldrb	r0, [r4, #5]
    d978:	f88d 001d 	strb.w	r0, [sp, #29]
    d97c:	2210      	movs	r2, #16
    d97e:	4629      	mov	r1, r5
    d980:	4668      	mov	r0, sp
    d982:	f002 fe74 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d986:	4668      	mov	r0, sp
    d988:	f7ff ff73 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d98c:	7820      	ldrb	r0, [r4, #0]
    d98e:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d992:	4288      	cmp	r0, r1
    d994:	d10c      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d996:	7860      	ldrb	r0, [r4, #1]
    d998:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d99c:	4288      	cmp	r0, r1
    d99e:	d107      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9a0:	78a0      	ldrb	r0, [r4, #2]
    d9a2:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9a6:	4288      	cmp	r0, r1
    d9a8:	d102      	bne.n	d9b0 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9aa:	2001      	movs	r0, #1
    d9ac:	b00d      	add	sp, #52	; 0x34
    d9ae:	bd30      	pop	{r4, r5, pc}
    d9b0:	2000      	movs	r0, #0
    d9b2:	e7fb      	b.n	d9ac <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9b4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9b4:	f7f4 b98e 	b.w	1cd4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>
    d9b8:	b510      	push	{r4, lr}
    d9ba:	2801      	cmp	r0, #1
    d9bc:	d008      	beq.n	d9d0 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9be:	2802      	cmp	r0, #2
    d9c0:	d004      	beq.n	d9cc <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d9c2:	f240 4122 	movw	r1, #1058	; 0x422
    d9c6:	2006      	movs	r0, #6
    d9c8:	f7f3 f84c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9cc:	2001      	movs	r0, #1
    d9ce:	bd10      	pop	{r4, pc}
    d9d0:	2000      	movs	r0, #0
    d9d2:	bd10      	pop	{r4, pc}
    d9d4:	2900      	cmp	r1, #0
    d9d6:	d004      	beq.n	d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    d9d8:	2801      	cmp	r0, #1
    d9da:	d003      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9dc:	2901      	cmp	r1, #1
    d9de:	d001      	beq.n	d9e4 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    d9e0:	2002      	movs	r0, #2
    d9e2:	4770      	bx	lr
    d9e4:	2001      	movs	r0, #1
    d9e6:	4770      	bx	lr
    d9e8:	f7ff bd9f 	b.w	d52a <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000d9ec <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    d9ec:	2101      	movs	r1, #1
    d9ee:	f7f4 bcff 	b.w	23f0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000d9f2 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    d9f2:	b510      	push	{r4, lr}
    d9f4:	f002 fc16 	bl	10224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    d9f8:	b118      	cbz	r0, da02 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    d9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d9fe:	f7f9 bf97 	b.w	7930 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da02:	20ff      	movs	r0, #255	; 0xff
    da04:	bd10      	pop	{r4, pc}

0000da06 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da06:	b510      	push	{r4, lr}
    da08:	f7f4 fd3a 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da0c:	2810      	cmp	r0, #16
    da0e:	d003      	beq.n	da18 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da10:	f7f4 fd06 	bl	2420 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da14:	2810      	cmp	r0, #16
    da16:	d100      	bne.n	da1a <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da18:	2008      	movs	r0, #8
    da1a:	bd10      	pop	{r4, pc}

0000da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da1c:	b510      	push	{r4, lr}
    da1e:	f7f4 fd2f 	bl	2480 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da22:	2810      	cmp	r0, #16
    da24:	d003      	beq.n	da2e <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da26:	f7f4 fd89 	bl	253c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x1c0>
    da2a:	2001      	movs	r0, #1
    da2c:	bd10      	pop	{r4, pc}
    da2e:	2000      	movs	r0, #0
    da30:	bd10      	pop	{r4, pc}

0000da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da32:	b570      	push	{r4, r5, r6, lr}
    da34:	460e      	mov	r6, r1
    da36:	b08c      	sub	sp, #48	; 0x30
    da38:	4614      	mov	r4, r2
    da3a:	4601      	mov	r1, r0
    da3c:	461d      	mov	r5, r3
    da3e:	2210      	movs	r2, #16
    da40:	4668      	mov	r0, sp
    da42:	f000 f997 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da46:	2210      	movs	r2, #16
    da48:	4631      	mov	r1, r6
    da4a:	a804      	add	r0, sp, #16
    da4c:	f000 f992 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da50:	4668      	mov	r0, sp
    da52:	f7ff ff0e 	bl	d872 <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    da56:	a908      	add	r1, sp, #32
    da58:	f04f 0210 	mov.w	r2, #16
    da5c:	4628      	mov	r0, r5
    da5e:	b11c      	cbz	r4, da68 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    da60:	f000 f988 	bl	dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da64:	b00c      	add	sp, #48	; 0x30
    da66:	bd70      	pop	{r4, r5, r6, pc}
    da68:	f002 fe01 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da6c:	e7fa      	b.n	da64 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    da6e:	0781      	lsls	r1, r0, #30
    da70:	d501      	bpl.n	da76 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    da72:	2002      	movs	r0, #2
    da74:	4770      	bx	lr
    da76:	07c0      	lsls	r0, r0, #31
    da78:	d0fc      	beq.n	da74 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    da7a:	2001      	movs	r0, #1
    da7c:	4770      	bx	lr

0000da7e <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    da7e:	b570      	push	{r4, r5, r6, lr}
    da80:	4606      	mov	r6, r0
    da82:	7900      	ldrb	r0, [r0, #4]
    da84:	0940      	lsrs	r0, r0, #5
    da86:	d10e      	bne.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    da88:	2500      	movs	r5, #0
    da8a:	462c      	mov	r4, r5
    da8c:	5d30      	ldrb	r0, [r6, r4]
    da8e:	f000 fd31 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    da92:	1c64      	adds	r4, r4, #1
    da94:	4428      	add	r0, r5
    da96:	b2e4      	uxtb	r4, r4
    da98:	b2c5      	uxtb	r5, r0
    da9a:	2c05      	cmp	r4, #5
    da9c:	d3f6      	bcc.n	da8c <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    da9e:	2d01      	cmp	r5, #1
    daa0:	d901      	bls.n	daa6 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    daa2:	2001      	movs	r0, #1
    daa4:	bd70      	pop	{r4, r5, r6, pc}
    daa6:	2000      	movs	r0, #0
    daa8:	bd70      	pop	{r4, r5, r6, pc}

0000daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daaa:	b510      	push	{r4, lr}
    daac:	460c      	mov	r4, r1
    daae:	2100      	movs	r1, #0
    dab0:	f7ff fe62 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    dab4:	6060      	str	r0, [r4, #4]
    dab6:	b110      	cbz	r0, dabe <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    dab8:	2000      	movs	r0, #0
    daba:	7020      	strb	r0, [r4, #0]
    dabc:	bd10      	pop	{r4, pc}
    dabe:	2002      	movs	r0, #2
    dac0:	bd10      	pop	{r4, pc}

0000dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    dac2:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dac6:	4348      	muls	r0, r1
    dac8:	4770      	bx	lr

0000daca <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    daca:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dace:	fbb0 f0f1 	udiv	r0, r0, r1
    dad2:	b280      	uxth	r0, r0
    dad4:	4770      	bx	lr

0000dad6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    dad6:	b570      	push	{r4, r5, r6, lr}
    dad8:	4604      	mov	r4, r0
    dada:	4290      	cmp	r0, r2
    dadc:	d20b      	bcs.n	daf6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    dade:	1b10      	subs	r0, r2, r4
    dae0:	2865      	cmp	r0, #101	; 0x65
    dae2:	d200      	bcs.n	dae6 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    dae4:	2065      	movs	r0, #101	; 0x65
    dae6:	1825      	adds	r5, r4, r0
    dae8:	428d      	cmp	r5, r1
    daea:	d803      	bhi.n	daf4 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    daec:	2103      	movs	r1, #3
    daee:	f7fc f959 	bl	9da4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    daf2:	b108      	cbz	r0, daf8 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    daf4:	4620      	mov	r0, r4
    daf6:	bd70      	pop	{r4, r5, r6, pc}
    daf8:	4628      	mov	r0, r5
    dafa:	bd70      	pop	{r4, r5, r6, pc}

0000dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dafc:	b510      	push	{r4, lr}
    dafe:	f1a2 0310 	sub.w	r3, r2, #16
    db02:	290d      	cmp	r1, #13
    db04:	d258      	bcs.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db06:	e8df f001 	tbb	[pc, r1]
    db0a:	0907      	.short	0x0907
    db0c:	1d1a150e 	.word	0x1d1a150e
    db10:	5937342c 	.word	0x5937342c
    db14:	0053423b 	.word	0x0053423b
    db18:	b38a      	cbz	r2, db7e <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x82>
    db1a:	e04d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db1c:	2a06      	cmp	r2, #6
    db1e:	d049      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db20:	2a07      	cmp	r2, #7
    db22:	d047      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db24:	e048      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db26:	2a0b      	cmp	r2, #11
    db28:	d044      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2a:	2a0c      	cmp	r2, #12
    db2c:	d042      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db2e:	2a0a      	cmp	r2, #10
    db30:	d040      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db32:	e041      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db34:	2a0d      	cmp	r2, #13
    db36:	d03d      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db38:	2a0e      	cmp	r2, #14
    db3a:	d03b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db3c:	e03c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db3e:	2b0c      	cmp	r3, #12
    db40:	d938      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db42:	e039      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db44:	2a13      	cmp	r2, #19
    db46:	d035      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db48:	2a12      	cmp	r2, #18
    db4a:	d033      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db4c:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db50:	b120      	cbz	r0, db5c <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x60>
    db52:	2a13      	cmp	r2, #19
    db54:	d330      	bcc.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db56:	2a1b      	cmp	r2, #27
    db58:	d92c      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db5a:	e02d      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db5c:	2a17      	cmp	r2, #23
    db5e:	d2fa      	bcs.n	db56 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x5a>
    db60:	e02a      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db62:	2b03      	cmp	r3, #3
    db64:	d926      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db66:	f890 005e 	ldrb.w	r0, [r0, #94]	; 0x5e
    db6a:	b300      	cbz	r0, dbae <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb2>
    db6c:	2a1c      	cmp	r2, #28
    db6e:	d921      	bls.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db70:	e022      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db72:	2a04      	cmp	r2, #4
    db74:	d01e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db76:	e01f      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db78:	2a01      	cmp	r2, #1
    db7a:	d01b      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db7c:	e01c      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db7e:	e019      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db80:	2a1d      	cmp	r2, #29
    db82:	d017      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db84:	2a1e      	cmp	r2, #30
    db86:	d015      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db88:	2a1f      	cmp	r2, #31
    db8a:	d013      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db8c:	e014      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    db8e:	2a20      	cmp	r2, #32
    db90:	d010      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db92:	2a21      	cmp	r2, #33	; 0x21
    db94:	d00e      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db96:	2a22      	cmp	r2, #34	; 0x22
    db98:	d00c      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9a:	2a23      	cmp	r2, #35	; 0x23
    db9c:	d00a      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    db9e:	2a24      	cmp	r2, #36	; 0x24
    dba0:	d008      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba2:	2a25      	cmp	r2, #37	; 0x25
    dba4:	d006      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dba6:	2a26      	cmp	r2, #38	; 0x26
    dba8:	d004      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbaa:	2a2e      	cmp	r2, #46	; 0x2e
    dbac:	d002      	beq.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>
    dbae:	e003      	b.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb0:	2a28      	cmp	r2, #40	; 0x28
    dbb2:	d101      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbb4:	2001      	movs	r0, #1
    dbb6:	bd10      	pop	{r4, pc}
    dbb8:	2000      	movs	r0, #0
    dbba:	bd10      	pop	{r4, pc}
    dbbc:	2a05      	cmp	r2, #5
    dbbe:	d1fb      	bne.n	dbb8 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xbc>
    dbc0:	e7f8      	b.n	dbb4 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xb8>

0000dbc2 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dbc2:	280b      	cmp	r0, #11
    dbc4:	d019      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbc6:	280c      	cmp	r0, #12
    dbc8:	d017      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbca:	280a      	cmp	r0, #10
    dbcc:	d015      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbce:	280d      	cmp	r0, #13
    dbd0:	d013      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd2:	280e      	cmp	r0, #14
    dbd4:	d011      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbd6:	2820      	cmp	r0, #32
    dbd8:	d00f      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbda:	2821      	cmp	r0, #33	; 0x21
    dbdc:	d00d      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbde:	2822      	cmp	r0, #34	; 0x22
    dbe0:	d00b      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe2:	2823      	cmp	r0, #35	; 0x23
    dbe4:	d009      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbe6:	2824      	cmp	r0, #36	; 0x24
    dbe8:	d007      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbea:	2825      	cmp	r0, #37	; 0x25
    dbec:	d005      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbee:	2826      	cmp	r0, #38	; 0x26
    dbf0:	d003      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf2:	282e      	cmp	r0, #46	; 0x2e
    dbf4:	d001      	beq.n	dbfa <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x38>
    dbf6:	2000      	movs	r0, #0
    dbf8:	4770      	bx	lr
    dbfa:	2001      	movs	r0, #1
    dbfc:	4770      	bx	lr

0000dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dbfe:	f011 0f0c 	tst.w	r1, #12
    dc02:	d018      	beq.n	dc36 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x38>
    dc04:	074a      	lsls	r2, r1, #29
    dc06:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc0a:	2a00      	cmp	r2, #0
    dc0c:	da02      	bge.n	dc14 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc0e:	f04f 0210 	mov.w	r2, #16
    dc12:	e001      	b.n	dc18 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dc14:	f04f 0240 	mov.w	r2, #64	; 0x40
    dc18:	da01      	bge.n	dc1e <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dc1a:	f04f 0196 	mov.w	r1, #150	; 0x96
    dc1e:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dc22:	eba0 0301 	sub.w	r3, r0, r1
    dc26:	4288      	cmp	r0, r1
    dc28:	d903      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc2a:	fb93 f0f2 	sdiv	r0, r3, r2
    dc2e:	b280      	uxth	r0, r0
    dc30:	4770      	bx	lr
    dc32:	2000      	movs	r0, #0
    dc34:	4770      	bx	lr
    dc36:	2902      	cmp	r1, #2
    dc38:	d008      	beq.n	dc4c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dc3a:	2870      	cmp	r0, #112	; 0x70
    dc3c:	d9f9      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc3e:	3870      	subs	r0, #112	; 0x70
    dc40:	17c1      	asrs	r1, r0, #31
    dc42:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dc46:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    dc4a:	4770      	bx	lr
    dc4c:	283c      	cmp	r0, #60	; 0x3c
    dc4e:	d9f0      	bls.n	dc32 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc50:	383c      	subs	r0, #60	; 0x3c
    dc52:	17c1      	asrs	r1, r0, #31
    dc54:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dc58:	f3c0 008f 	ubfx	r0, r0, #2, #16
    dc5c:	4770      	bx	lr

0000dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dc5e:	6809      	ldr	r1, [r1, #0]
    dc60:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dc64:	4770      	bx	lr

0000dc66 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dc66:	2801      	cmp	r0, #1
    dc68:	d002      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6a:	2802      	cmp	r0, #2
    dc6c:	d000      	beq.n	dc70 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dc6e:	2000      	movs	r0, #0
    dc70:	4770      	bx	lr

0000dc72 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dc72:	b530      	push	{r4, r5, lr}
    dc74:	242a      	movs	r4, #42	; 0x2a
    dc76:	2523      	movs	r5, #35	; 0x23
    dc78:	2a16      	cmp	r2, #22
    dc7a:	d109      	bne.n	dc90 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dc7c:	280b      	cmp	r0, #11
    dc7e:	d00b      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc80:	280c      	cmp	r0, #12
    dc82:	d009      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc84:	280d      	cmp	r0, #13
    dc86:	d007      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc88:	280e      	cmp	r0, #14
    dc8a:	d005      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dc8c:	2820      	cmp	r0, #32
    dc8e:	d005      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dc90:	b171      	cbz	r1, dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc92:	2a16      	cmp	r2, #22
    dc94:	d10c      	bne.n	dcb0 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x3e>
    dc96:	e004      	b.n	dca2 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x30>
    dc98:	701c      	strb	r4, [r3, #0]
    dc9a:	e000      	b.n	dc9e <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2c>
    dc9c:	701d      	strb	r5, [r3, #0]
    dc9e:	2001      	movs	r0, #1
    dca0:	bd30      	pop	{r4, r5, pc}
    dca2:	7808      	ldrb	r0, [r1, #0]
    dca4:	2801      	cmp	r0, #1
    dca6:	d0f7      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dca8:	2800      	cmp	r0, #0
    dcaa:	d0f5      	beq.n	dc98 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x26>
    dcac:	2816      	cmp	r0, #22
    dcae:	d0f5      	beq.n	dc9c <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x2a>
    dcb0:	2000      	movs	r0, #0
    dcb2:	bd30      	pop	{r4, r5, pc}

0000dcb4 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dcb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dcb6:	b2cf      	uxtb	r7, r1
    dcb8:	4606      	mov	r6, r0
    dcba:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dcbe:	4621      	mov	r1, r4
    dcc0:	4638      	mov	r0, r7
    dcc2:	f000 f88f 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcc6:	b2f5      	uxtb	r5, r6
    dcc8:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dccc:	b920      	cbnz	r0, dcd8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dcce:	4631      	mov	r1, r6
    dcd0:	4628      	mov	r0, r5
    dcd2:	f000 f887 	bl	dde4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0xc>
    dcd6:	b140      	cbz	r0, dcea <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dcd8:	4027      	ands	r7, r4
    dcda:	4035      	ands	r5, r6
    dcdc:	403d      	ands	r5, r7
    dcde:	4644      	mov	r4, r8
    dce0:	f365 0407 	bfi	r4, r5, #0, #8
    dce4:	f365 240f 	bfi	r4, r5, #8, #8
    dce8:	e006      	b.n	dcf8 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dcea:	4025      	ands	r5, r4
    dcec:	4644      	mov	r4, r8
    dcee:	f365 0407 	bfi	r4, r5, #0, #8
    dcf2:	403e      	ands	r6, r7
    dcf4:	f366 240f 	bfi	r4, r6, #8, #8
    dcf8:	b2e0      	uxtb	r0, r4
    dcfa:	f7ff feb8 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dcfe:	f88d 0000 	strb.w	r0, [sp]
    dd02:	f3c4 2007 	ubfx	r0, r4, #8, #8
    dd06:	f7ff feb2 	bl	da6e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dd0a:	f88d 0001 	strb.w	r0, [sp, #1]
    dd0e:	f8bd 0000 	ldrh.w	r0, [sp]
    dd12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    dd14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd18:	4607      	mov	r7, r0
    dd1a:	460e      	mov	r6, r1
    dd1c:	e9d7 5404 	ldrd	r5, r4, [r7, #16]
    dd20:	f7fc fc6c 	bl	a5fc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    dd24:	b198      	cbz	r0, dd4e <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x3a>
    dd26:	b31e      	cbz	r6, dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    dd2c:	1b40      	subs	r0, r0, r5
    dd2e:	2300      	movs	r3, #0
    dd30:	eb61 0104 	sbc.w	r1, r1, r4
    dd34:	461a      	mov	r2, r3
    dd36:	1a1b      	subs	r3, r3, r0
    dd38:	418a      	sbcs	r2, r1
    dd3a:	da19      	bge.n	dd70 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x5c>
    dd3c:	1c42      	adds	r2, r0, #1
    dd3e:	f171 0100 	sbcs.w	r1, r1, #0
    dd42:	db07      	blt.n	dd54 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x40>
    dd44:	f240 211b 	movw	r1, #539	; 0x21b
    dd48:	2029      	movs	r0, #41	; 0x29
    dd4a:	f7f2 fe8b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd4e:	f240 2111 	movw	r1, #529	; 0x211
    dd52:	e7f9      	b.n	dd48 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>
    dd54:	4430      	add	r0, r6
    dd56:	1e40      	subs	r0, r0, #1
    dd58:	fbb0 f1f6 	udiv	r1, r0, r6
    dd5c:	fb01 f006 	mul.w	r0, r1, r6
    dd60:	1828      	adds	r0, r5, r0
    dd62:	f144 0400 	adc.w	r4, r4, #0
    dd66:	e9c7 0404 	strd	r0, r4, [r7, #16]
    dd6a:	4608      	mov	r0, r1
    dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dd70:	2000      	movs	r0, #0
    dd72:	e7fb      	b.n	dd6c <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x58>

0000dd74 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    dd74:	b530      	push	{r4, r5, lr}
    dd76:	4613      	mov	r3, r2
    dd78:	e006      	b.n	dd88 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    dd7a:	18cc      	adds	r4, r1, r3
    dd7c:	1ad5      	subs	r5, r2, r3
    dd7e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    dd82:	1e5b      	subs	r3, r3, #1
    dd84:	5544      	strb	r4, [r0, r5]
    dd86:	b2db      	uxtb	r3, r3
    dd88:	2b00      	cmp	r3, #0
    dd8a:	d1f6      	bne.n	dd7a <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    dd8c:	bd30      	pop	{r4, r5, pc}

0000dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    dd8e:	2300      	movs	r3, #0
    dd90:	6403      	str	r3, [r0, #64]	; 0x40
    dd92:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    dd96:	f240 2371 	movw	r3, #625	; 0x271
    dd9a:	435a      	muls	r2, r3
    dd9c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    dda0:	1e52      	subs	r2, r2, #1
    dda2:	fbb2 f1f1 	udiv	r1, r2, r1
    dda6:	6441      	str	r1, [r0, #68]	; 0x44
    dda8:	4770      	bx	lr

0000ddaa <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ddaa:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddae:	fbb0 f0f1 	udiv	r0, r0, r1
    ddb2:	b280      	uxth	r0, r0
    ddb4:	4770      	bx	lr

0000ddb6 <sym_MCZ5ZKWAPWEBLVDHDY2XS3XBNNW7L43ADSWQSTI>:
    ddb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ddba:	fbb0 f2f1 	udiv	r2, r0, r1
    ddbe:	fb01 0112 	mls	r1, r1, r2, r0
    ddc2:	1a40      	subs	r0, r0, r1
    ddc4:	4770      	bx	lr

0000ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    ddc6:	f240 2171 	movw	r1, #625	; 0x271
    ddca:	fb10 f001 	smulbb	r0, r0, r1
    ddce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddd2:	ea01 0040 	and.w	r0, r1, r0, lsl #1
    ddd6:	4770      	bx	lr

0000ddd8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    ddd8:	f240 41e2 	movw	r1, #1250	; 0x4e2
    dddc:	fbb0 f0f1 	udiv	r0, r0, r1
    dde0:	b2c0      	uxtb	r0, r0
    dde2:	4770      	bx	lr
    dde4:	2801      	cmp	r0, #1
    dde6:	d002      	beq.n	ddee <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x16>
    dde8:	2802      	cmp	r0, #2
    ddea:	d003      	beq.n	ddf4 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x1c>
    ddec:	e004      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddee:	2901      	cmp	r1, #1
    ddf0:	d004      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf2:	e001      	b.n	ddf8 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x20>
    ddf4:	2902      	cmp	r1, #2
    ddf6:	d001      	beq.n	ddfc <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x24>
    ddf8:	2000      	movs	r0, #0
    ddfa:	4770      	bx	lr
    ddfc:	2001      	movs	r0, #1
    ddfe:	4770      	bx	lr
    de00:	4401      	add	r1, r0
    de02:	2914      	cmp	r1, #20
    de04:	dd01      	ble.n	de0a <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x32>
    de06:	2014      	movs	r0, #20
    de08:	4770      	bx	lr
    de0a:	f06f 007e 	mvn.w	r0, #126	; 0x7e
    de0e:	4281      	cmp	r1, r0
    de10:	dbfa      	blt.n	de08 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A+0x30>
    de12:	b248      	sxtb	r0, r1
    de14:	4770      	bx	lr

0000de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    de16:	b570      	push	{r4, r5, r6, lr}
    de18:	4605      	mov	r5, r0
    de1a:	ea81 4011 	eor.w	r0, r1, r1, lsr #16
    de1e:	b286      	uxth	r6, r0
    de20:	4610      	mov	r0, r2
    de22:	7aec      	ldrb	r4, [r5, #11]
    de24:	4631      	mov	r1, r6
    de26:	f000 f863 	bl	def0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x52>
    de2a:	4070      	eors	r0, r6
    de2c:	2125      	movs	r1, #37	; 0x25
    de2e:	fbb0 f2f1 	udiv	r2, r0, r1
    de32:	fb01 0112 	mls	r1, r1, r2, r0
    de36:	eb05 02d1 	add.w	r2, r5, r1, lsr #3
    de3a:	f001 0307 	and.w	r3, r1, #7
    de3e:	7852      	ldrb	r2, [r2, #1]
    de40:	2601      	movs	r6, #1
    de42:	409e      	lsls	r6, r3
    de44:	4232      	tst	r2, r6
    de46:	d001      	beq.n	de4c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x36>
    de48:	4608      	mov	r0, r1
    de4a:	bd70      	pop	{r4, r5, r6, pc}
    de4c:	4344      	muls	r4, r0
    de4e:	0c21      	lsrs	r1, r4, #16
    de50:	4628      	mov	r0, r5
    de52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    de56:	f7f4 bc91 	b.w	277c <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0xac>

0000de5a <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    de5a:	b510      	push	{r4, lr}
    de5c:	4604      	mov	r4, r0
    de5e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    de62:	b108      	cbz	r0, de68 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    de64:	2825      	cmp	r0, #37	; 0x25
    de66:	d901      	bls.n	de6c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    de68:	2012      	movs	r0, #18
    de6a:	bd10      	pop	{r4, pc}
    de6c:	b132      	cbz	r2, de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>
    de6e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
    de72:	b128      	cbz	r0, de80 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x26>
    de74:	2801      	cmp	r0, #1
    de76:	d009      	beq.n	de8c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x32>
    de78:	201f      	movs	r0, #31
    de7a:	bd10      	pop	{r4, pc}
    de7c:	2000      	movs	r0, #0
    de7e:	bd10      	pop	{r4, pc}
    de80:	4620      	mov	r0, r4
    de82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de86:	4611      	mov	r1, r2
    de88:	f7f4 bc30 	b.w	26ec <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x1c>
    de8c:	8aa2      	ldrh	r2, [r4, #20]
    de8e:	6949      	ldr	r1, [r1, #20]
    de90:	f104 0025 	add.w	r0, r4, #37	; 0x25
    de94:	f7ff ffbf 	bl	de16 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    de98:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    de9c:	e7ee      	b.n	de7c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x22>

0000de9e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    de9e:	b570      	push	{r4, r5, r6, lr}
    dea0:	4604      	mov	r4, r0
    dea2:	1c40      	adds	r0, r0, #1
    dea4:	4288      	cmp	r0, r1
    dea6:	d004      	beq.n	deb2 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x14>
    dea8:	6808      	ldr	r0, [r1, #0]
    deaa:	f8c4 0001 	str.w	r0, [r4, #1]
    deae:	7908      	ldrb	r0, [r1, #4]
    deb0:	7160      	strb	r0, [r4, #5]
    deb2:	7960      	ldrb	r0, [r4, #5]
    deb4:	f000 001f 	and.w	r0, r0, #31
    deb8:	7160      	strb	r0, [r4, #5]
    deba:	2000      	movs	r0, #0
    debc:	72e0      	strb	r0, [r4, #11]
    debe:	4605      	mov	r5, r0
    dec0:	1966      	adds	r6, r4, r5
    dec2:	7870      	ldrb	r0, [r6, #1]
    dec4:	f000 fb16 	bl	e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>
    dec8:	71b0      	strb	r0, [r6, #6]
    deca:	7ae1      	ldrb	r1, [r4, #11]
    decc:	1c6d      	adds	r5, r5, #1
    dece:	4408      	add	r0, r1
    ded0:	b2ed      	uxtb	r5, r5
    ded2:	72e0      	strb	r0, [r4, #11]
    ded4:	2d05      	cmp	r5, #5
    ded6:	d3f3      	bcc.n	dec0 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x22>
    ded8:	bd70      	pop	{r4, r5, r6, pc}
    deda:	b2c1      	uxtb	r1, r0
    dedc:	fa91 f1a1 	rbit	r1, r1
    dee0:	0a00      	lsrs	r0, r0, #8
    dee2:	0e09      	lsrs	r1, r1, #24
    dee4:	fa90 f0a0 	rbit	r0, r0
    dee8:	0e00      	lsrs	r0, r0, #24
    deea:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    deee:	4770      	bx	lr
    def0:	b570      	push	{r4, r5, r6, lr}
    def2:	460d      	mov	r5, r1
    def4:	4048      	eors	r0, r1
    def6:	2400      	movs	r4, #0
    def8:	f7ff ffef 	bl	deda <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x3c>
    defc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    df00:	1c64      	adds	r4, r4, #1
    df02:	4428      	add	r0, r5
    df04:	b2e4      	uxtb	r4, r4
    df06:	b280      	uxth	r0, r0
    df08:	2c03      	cmp	r4, #3
    df0a:	d3f5      	bcc.n	def8 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x5a>
    df0c:	bd70      	pop	{r4, r5, r6, pc}

0000df0e <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ>:
    df0e:	7841      	ldrb	r1, [r0, #1]
    df10:	7800      	ldrb	r0, [r0, #0]
    df12:	f010 000f 	ands.w	r0, r0, #15
    df16:	d005      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df18:	2801      	cmp	r0, #1
    df1a:	d007      	beq.n	df2c <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x1e>
    df1c:	2802      	cmp	r0, #2
    df1e:	d001      	beq.n	df24 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x16>
    df20:	2806      	cmp	r0, #6
    df22:	d105      	bne.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df24:	1f89      	subs	r1, r1, #6
    df26:	291f      	cmp	r1, #31
    df28:	d904      	bls.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df2a:	e001      	b.n	df30 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x22>
    df2c:	290c      	cmp	r1, #12
    df2e:	d001      	beq.n	df34 <sym_3IXVTMQQZGUASJJL3VMH35PYBTYROF3TY6Z7RDQ+0x26>
    df30:	2000      	movs	r0, #0
    df32:	4770      	bx	lr
    df34:	2001      	movs	r0, #1
    df36:	4770      	bx	lr

0000df38 <sym_2RWLERIIOLMYS4LVQVNNIFLEQSG65A5Q5F2FPLA>:
    df38:	7800      	ldrb	r0, [r0, #0]
    df3a:	09c0      	lsrs	r0, r0, #7
    df3c:	4770      	bx	lr

0000df3e <sym_SKY6LLKHYM3MTKIUASL3OKO4LAKLVGGKKAJ3I2Y>:
    df3e:	f850 2f03 	ldr.w	r2, [r0, #3]!
    df42:	600a      	str	r2, [r1, #0]
    df44:	8880      	ldrh	r0, [r0, #4]
    df46:	8088      	strh	r0, [r1, #4]
    df48:	4770      	bx	lr

0000df4a <sym_GTN2QTPVJUP6VPTTNNKS6RR7APIHG3FG2T7SNQY>:
    df4a:	7800      	ldrb	r0, [r0, #0]
    df4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    df50:	4770      	bx	lr

0000df52 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI>:
    df52:	7801      	ldrb	r1, [r0, #0]
    df54:	f001 010f 	and.w	r1, r1, #15
    df58:	2904      	cmp	r1, #4
    df5a:	d105      	bne.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df5c:	7840      	ldrb	r0, [r0, #1]
    df5e:	1f80      	subs	r0, r0, #6
    df60:	281f      	cmp	r0, #31
    df62:	d801      	bhi.n	df68 <sym_GSWR3VMQYTBBLEEXNPYAGKUY5XX24O5ABWIFKUI+0x16>
    df64:	2001      	movs	r0, #1
    df66:	4770      	bx	lr
    df68:	2000      	movs	r0, #0
    df6a:	4770      	bx	lr

0000df6c <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA>:
    df6c:	b510      	push	{r4, lr}
    df6e:	7802      	ldrb	r2, [r0, #0]
    df70:	f001 030f 	and.w	r3, r1, #15
    df74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    df78:	431a      	orrs	r2, r3
    df7a:	7002      	strb	r2, [r0, #0]
    df7c:	2907      	cmp	r1, #7
    df7e:	d20c      	bcs.n	df9a <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2e>
    df80:	e8df f001 	tbb	[pc, r1]
    df84:	06040604 	.word	0x06040604
    df88:	00040804 	.word	0x00040804
    df8c:	2106      	movs	r1, #6
    df8e:	e002      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df90:	210c      	movs	r1, #12
    df92:	e000      	b.n	df96 <sym_TP55RLOURTPNDYOY752QBNWCGKAGCOF4JK2H3IA+0x2a>
    df94:	2122      	movs	r1, #34	; 0x22
    df96:	7041      	strb	r1, [r0, #1]
    df98:	bd10      	pop	{r4, pc}
    df9a:	21a8      	movs	r1, #168	; 0xa8
    df9c:	202a      	movs	r0, #42	; 0x2a
    df9e:	f7f2 fd61 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000dfa2 <sym_M7NFHAM4FWTXSZMPV3DTHM2V6JD26AKK4R2A6YI>:
    dfa2:	680a      	ldr	r2, [r1, #0]
    dfa4:	f840 2f09 	str.w	r2, [r0, #9]!
    dfa8:	8889      	ldrh	r1, [r1, #4]
    dfaa:	8081      	strh	r1, [r0, #4]
    dfac:	4770      	bx	lr

0000dfae <sym_NAGMMCXDNSRJLJ55T6DS4CG2FNZEN6Y562ZTFRY>:
    dfae:	7802      	ldrb	r2, [r0, #0]
    dfb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    dfb4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    dfb8:	7002      	strb	r2, [r0, #0]
    dfba:	4770      	bx	lr

0000dfbc <sym_UDZO6WOEWJ2CNEYVP45GSHBVFT4OP6GEANP3NQY>:
    dfbc:	680a      	ldr	r2, [r1, #0]
    dfbe:	f840 2f03 	str.w	r2, [r0, #3]!
    dfc2:	8889      	ldrh	r1, [r1, #4]
    dfc4:	8081      	strh	r1, [r0, #4]
    dfc6:	4770      	bx	lr

0000dfc8 <sym_YBOODJ7VBLXRRILCBQXIORIXU3GHRAYK6WULLQY>:
    dfc8:	7802      	ldrb	r2, [r0, #0]
    dfca:	2340      	movs	r3, #64	; 0x40
    dfcc:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
    dfd0:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    dfd4:	430a      	orrs	r2, r1
    dfd6:	7002      	strb	r2, [r0, #0]
    dfd8:	4770      	bx	lr

0000dfda <sym_UODFQA44OAUGQWVRPEK2IIKSCIFD37IIPLUYFSI>:
    dfda:	680a      	ldr	r2, [r1, #0]
    dfdc:	6042      	str	r2, [r0, #4]
    dfde:	7909      	ldrb	r1, [r1, #4]
    dfe0:	7201      	strb	r1, [r0, #8]
    dfe2:	4770      	bx	lr

0000dfe4 <sym_ZZDNF2NNUMTRE4Y6NUTK3CJU3EQI64HKYHSTDAI>:
    dfe4:	72c1      	strb	r1, [r0, #11]
    dfe6:	0a09      	lsrs	r1, r1, #8
    dfe8:	7301      	strb	r1, [r0, #12]
    dfea:	4770      	bx	lr

0000dfec <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI>:
    dfec:	b510      	push	{r4, lr}
    dfee:	29fb      	cmp	r1, #251	; 0xfb
    dff0:	d904      	bls.n	dffc <sym_7YTCAQN5IYKWCY5F36IVGAEEQIOP6X7YL63LRUI+0x10>
    dff2:	f240 61a9 	movw	r1, #1705	; 0x6a9
    dff6:	202a      	movs	r0, #42	; 0x2a
    dff8:	f7f2 fd34 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dffc:	7041      	strb	r1, [r0, #1]
    dffe:	bd10      	pop	{r4, pc}

0000e000 <sym_ZLXXGUFNBKYTUHSDKKKU4A6O7RMXODI4OQA6IUY>:
    e000:	8809      	ldrh	r1, [r1, #0]
    e002:	8181      	strh	r1, [r0, #12]
    e004:	4770      	bx	lr

0000e006 <sym_3LF2RG2XP7QRT5FAEZFOPL4L5RIBP3MCQ5PY7XY>:
    e006:	6809      	ldr	r1, [r1, #0]
    e008:	f8c0 1016 	str.w	r1, [r0, #22]
    e00c:	4770      	bx	lr

0000e00e <sym_NSDJKDRKPUUB5EAI3OMDTFOWZBLYJSPI3VQSNXQ>:
    e00e:	680a      	ldr	r2, [r1, #0]
    e010:	6042      	str	r2, [r0, #4]
    e012:	6849      	ldr	r1, [r1, #4]
    e014:	6081      	str	r1, [r0, #8]
    e016:	4770      	bx	lr

0000e018 <sym_LPOR4PC6XUIXDNEKJLY3JL3BKNV2UZG2OR7FAKQ>:
    e018:	680a      	ldr	r2, [r1, #0]
    e01a:	f840 2f0e 	str.w	r2, [r0, #14]!
    e01e:	6849      	ldr	r1, [r1, #4]
    e020:	6041      	str	r1, [r0, #4]
    e022:	4770      	bx	lr

0000e024 <sym_RHFWG2VAMMSM6HNQIXGIQMU7QUNXB2XIV4NQREY>:
    e024:	68c0      	ldr	r0, [r0, #12]
    e026:	6008      	str	r0, [r1, #0]
    e028:	4770      	bx	lr

0000e02a <sym_G3E5J3DBBC3WRZ26KQDVAZEPSZL4FITDNFKJBAY>:
    e02a:	6842      	ldr	r2, [r0, #4]
    e02c:	600a      	str	r2, [r1, #0]
    e02e:	6880      	ldr	r0, [r0, #8]
    e030:	6048      	str	r0, [r1, #4]
    e032:	4770      	bx	lr

0000e034 <sym_VV6G4PHP6ULWM4Y2LJJIOETDZSUFDXGJCHBQNZI>:
    e034:	7800      	ldrb	r0, [r0, #0]
    e036:	f000 0003 	and.w	r0, r0, #3
    e03a:	4770      	bx	lr

0000e03c <sym_PHCTC5YUX44NFLNJCEBJKKRAYHGUKTS4AC5GMAI>:
    e03c:	8880      	ldrh	r0, [r0, #4]
    e03e:	4770      	bx	lr

0000e040 <sym_BWPZYUAKR5BUOCM2NWAMEPWQB6GIJXBPUENADMI>:
    e040:	88c0      	ldrh	r0, [r0, #6]
    e042:	4770      	bx	lr

0000e044 <sym_QDD7GI62CPYTU4DR5RMOF6JH72V5L65ZJXU3VAA>:
    e044:	8900      	ldrh	r0, [r0, #8]
    e046:	4770      	bx	lr

0000e048 <sym_M5NXXZSYW5XYDZUQUOZMKSTD6GIS5XZ7Y4SKNVI>:
    e048:	8940      	ldrh	r0, [r0, #10]
    e04a:	4770      	bx	lr

0000e04c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY>:
    e04c:	8901      	ldrh	r1, [r0, #8]
    e04e:	291b      	cmp	r1, #27
    e050:	d30c      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e052:	8941      	ldrh	r1, [r0, #10]
    e054:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e058:	4291      	cmp	r1, r2
    e05a:	d307      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e05c:	8881      	ldrh	r1, [r0, #4]
    e05e:	291b      	cmp	r1, #27
    e060:	d304      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e062:	88c0      	ldrh	r0, [r0, #6]
    e064:	4290      	cmp	r0, r2
    e066:	d301      	bcc.n	e06c <sym_6OKNLUNCRGI263QFKGKDXFR77K4UISSZ3SA2RAY+0x20>
    e068:	2001      	movs	r0, #1
    e06a:	4770      	bx	lr
    e06c:	2000      	movs	r0, #0
    e06e:	4770      	bx	lr

0000e070 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y>:
    e070:	7901      	ldrb	r1, [r0, #4]
    e072:	0749      	lsls	r1, r1, #29
    e074:	d004      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e076:	7940      	ldrb	r0, [r0, #5]
    e078:	0740      	lsls	r0, r0, #29
    e07a:	d001      	beq.n	e080 <sym_PBCQYO46QLEABI4SERHQCHCGDP6NXKCTAYVE53Y+0x10>
    e07c:	2001      	movs	r0, #1
    e07e:	4770      	bx	lr
    e080:	2000      	movs	r0, #0
    e082:	4770      	bx	lr

0000e084 <sym_AYZTYWE6SD5T6ZDLITENLNSRAVS5VKE23BWONUA>:
    e084:	7181      	strb	r1, [r0, #6]
    e086:	0a09      	lsrs	r1, r1, #8
    e088:	71c1      	strb	r1, [r0, #7]
    e08a:	4770      	bx	lr

0000e08c <sym_SAWOREXGWRJNX5IOUMHBRACZ6DWRXOAHPPFX4TA>:
    e08c:	7101      	strb	r1, [r0, #4]
    e08e:	4770      	bx	lr

0000e090 <sym_SG4OPFPHWHCVU6FHRG2ZQ5GV7RHUGBHEKN6N55A>:
    e090:	7141      	strb	r1, [r0, #5]
    e092:	4770      	bx	lr

0000e094 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ>:
    e094:	7901      	ldrb	r1, [r0, #4]
    e096:	0749      	lsls	r1, r1, #29
    e098:	d004      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e09a:	7940      	ldrb	r0, [r0, #5]
    e09c:	0740      	lsls	r0, r0, #29
    e09e:	d001      	beq.n	e0a4 <sym_V2EAB4QFEU4UUAXJWVWPATMDA5XIHPNUG5SNJCQ+0x10>
    e0a0:	2001      	movs	r0, #1
    e0a2:	4770      	bx	lr
    e0a4:	2000      	movs	r0, #0
    e0a6:	4770      	bx	lr

0000e0a8 <sym_65MVSHFHYY3W6LGERKUEYJPJ7ENCODZZSM2L7CQ>:
    e0a8:	7900      	ldrb	r0, [r0, #4]
    e0aa:	4770      	bx	lr

0000e0ac <sym_YMBI57OSTLFK65WQKT7WKM26EFMSOHLSMFNNR4I>:
    e0ac:	7101      	strb	r1, [r0, #4]
    e0ae:	4770      	bx	lr

0000e0b0 <sym_MR2HDMT6FMX7P5HJAUSXDTOYNLKDM5AILMXKYDY>:
    e0b0:	7940      	ldrb	r0, [r0, #5]
    e0b2:	4770      	bx	lr

0000e0b4 <sym_HAHVMCZ4V2U4G5KM2JOTYBKS4GFM72EJZRT7M3A>:
    e0b4:	7141      	strb	r1, [r0, #5]
    e0b6:	4770      	bx	lr

0000e0b8 <sym_IGXXIFMDOTCDOLQAILBV5BXIU5R6AALP5I4HZGQ>:
    e0b8:	7802      	ldrb	r2, [r0, #0]
    e0ba:	f001 0103 	and.w	r1, r1, #3
    e0be:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    e0c2:	430a      	orrs	r2, r1
    e0c4:	7002      	strb	r2, [r0, #0]
    e0c6:	4770      	bx	lr

0000e0c8 <sym_XW2AJRDPRGLPOQ7S6SBIDHJSPT737QJRC7LOWOI>:
    e0c8:	7101      	strb	r1, [r0, #4]
    e0ca:	0a09      	lsrs	r1, r1, #8
    e0cc:	7141      	strb	r1, [r0, #5]
    e0ce:	4770      	bx	lr

0000e0d0 <sym_LKCMUIZAJSOHIZE54V37DJ4ULJ25HGEY7F7ST5I>:
    e0d0:	7181      	strb	r1, [r0, #6]
    e0d2:	0a09      	lsrs	r1, r1, #8
    e0d4:	71c1      	strb	r1, [r0, #7]
    e0d6:	4770      	bx	lr

0000e0d8 <sym_5NOMYYLIL22YATRZCGPQVOYH6BFSDNIEMEEMIZA>:
    e0d8:	7201      	strb	r1, [r0, #8]
    e0da:	0a09      	lsrs	r1, r1, #8
    e0dc:	7241      	strb	r1, [r0, #9]
    e0de:	4770      	bx	lr

0000e0e0 <sym_BD2MQHSWE7QNCT7DV5JGZCA5J2QIL2T6RGRVJ3Y>:
    e0e0:	7281      	strb	r1, [r0, #10]
    e0e2:	0a09      	lsrs	r1, r1, #8
    e0e4:	72c1      	strb	r1, [r0, #11]
    e0e6:	4770      	bx	lr

0000e0e8 <sym_AFBV6ZWWJ5TP5BBQPAY4D2XGGYVLQVI65FY6JPY>:
    e0e8:	7900      	ldrb	r0, [r0, #4]
    e0ea:	4770      	bx	lr

0000e0ec <sym_SKKU5JCB4JFUP2TZKW5ETVOM5GL3U2WDXVK5LJI>:
    e0ec:	7900      	ldrb	r0, [r0, #4]
    e0ee:	4770      	bx	lr

0000e0f0 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e0f0:	b510      	push	{r4, lr}
    e0f2:	7a01      	ldrb	r1, [r0, #8]
    e0f4:	b119      	cbz	r1, e0fe <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e0f6:	2901      	cmp	r1, #1
    e0f8:	d006      	beq.n	e108 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e0fa:	2000      	movs	r0, #0
    e0fc:	bd10      	pop	{r4, pc}
    e0fe:	88c2      	ldrh	r2, [r0, #6]
    e100:	6803      	ldr	r3, [r0, #0]
    e102:	8880      	ldrh	r0, [r0, #4]
    e104:	2102      	movs	r1, #2
    e106:	e003      	b.n	e110 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e108:	88c2      	ldrh	r2, [r0, #6]
    e10a:	6803      	ldr	r3, [r0, #0]
    e10c:	8880      	ldrh	r0, [r0, #4]
    e10e:	2101      	movs	r1, #1
    e110:	f7f4 fb9e 	bl	2850 <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY+0x14>
    e114:	b908      	cbnz	r0, e11a <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e116:	f7f4 fbe5 	bl	28e4 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e11a:	2001      	movs	r0, #1
    e11c:	bd10      	pop	{r4, pc}

0000e11e <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY>:
    e11e:	b508      	push	{r3, lr}
    e120:	7a03      	ldrb	r3, [r0, #8]
    e122:	f88d 3000 	strb.w	r3, [sp]
    e126:	9b00      	ldr	r3, [sp, #0]
    e128:	9300      	str	r3, [sp, #0]
    e12a:	f89d 3000 	ldrb.w	r3, [sp]
    e12e:	b123      	cbz	r3, e13a <sym_XYMSM3YEXEOTUFIX3SPRBT27O44DJZKZVLNHELY+0x1c>
    e130:	f240 3117 	movw	r1, #791	; 0x317
    e134:	2010      	movs	r0, #16
    e136:	f7f2 fc95 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    e13e:	f7f4 bd57 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>

0000e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e142:	f7f4 bd83 	b.w	2c4c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x15c>

0000e146 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY>:
    e146:	7a03      	ldrb	r3, [r0, #8]
    e148:	b082      	sub	sp, #8
    e14a:	f88d 3000 	strb.w	r3, [sp]
    e14e:	9b00      	ldr	r3, [sp, #0]
    e150:	9300      	str	r3, [sp, #0]
    e152:	f89d 3000 	ldrb.w	r3, [sp]
    e156:	2b00      	cmp	r3, #0
    e158:	d102      	bne.n	e160 <sym_MWHYECJZLQQJKLQZGDI66SVA3IIWYKXL7G5FMHY+0x1a>
    e15a:	b002      	add	sp, #8
    e15c:	f7f4 bd48 	b.w	2bf0 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x100>
    e160:	b002      	add	sp, #8
    e162:	4770      	bx	lr
    e164:	2000      	movs	r0, #0
    e166:	7048      	strb	r0, [r1, #1]
    e168:	2003      	movs	r0, #3
    e16a:	7008      	strb	r0, [r1, #0]
    e16c:	2001      	movs	r0, #1
    e16e:	7108      	strb	r0, [r1, #4]
    e170:	4770      	bx	lr

0000e172 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e172:	b510      	push	{r4, lr}
    e174:	888c      	ldrh	r4, [r1, #4]
    e176:	890a      	ldrh	r2, [r1, #8]
    e178:	884b      	ldrh	r3, [r1, #2]
    e17a:	88c9      	ldrh	r1, [r1, #6]
    e17c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e180:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e184:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e188:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e18c:	bd10      	pop	{r4, pc}

0000e18e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e18e:	b570      	push	{r4, r5, r6, lr}
    e190:	4615      	mov	r5, r2
    e192:	460c      	mov	r4, r1
    e194:	f000 f91a 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e198:	3096      	adds	r0, #150	; 0x96
    e19a:	4428      	add	r0, r5
    e19c:	42a0      	cmp	r0, r4
    e19e:	d801      	bhi.n	e1a4 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e1a0:	1a20      	subs	r0, r4, r0
    e1a2:	bd70      	pop	{r4, r5, r6, pc}
    e1a4:	2000      	movs	r0, #0
    e1a6:	bd70      	pop	{r4, r5, r6, pc}

0000e1a8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1ac:	4604      	mov	r4, r0
    e1ae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e1b0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e1b2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e1b6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e1ba:	4285      	cmp	r5, r0
    e1bc:	d300      	bcc.n	e1c0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e1be:	4605      	mov	r5, r0
    e1c0:	4620      	mov	r0, r4
    e1c2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e1c6:	f000 f89c 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e1ca:	4601      	mov	r1, r0
    e1cc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e1ce:	8761      	strh	r1, [r4, #58]	; 0x3a
    e1d0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e1d2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e1d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e1d8:	4680      	mov	r8, r0
    e1da:	42aa      	cmp	r2, r5
    e1dc:	d200      	bcs.n	e1e0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e1de:	462a      	mov	r2, r5
    e1e0:	428b      	cmp	r3, r1
    e1e2:	d200      	bcs.n	e1e6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e1e4:	460b      	mov	r3, r1
    e1e6:	8202      	strh	r2, [r0, #16]
    e1e8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e1ec:	42bd      	cmp	r5, r7
    e1ee:	d101      	bne.n	e1f4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e1f0:	42b1      	cmp	r1, r6
    e1f2:	d001      	beq.n	e1f8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e1f4:	2001      	movs	r0, #1
    e1f6:	e000      	b.n	e1fa <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e1f8:	2000      	movs	r0, #0
    e1fa:	4681      	mov	r9, r0
    e1fc:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e200:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e204:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e206:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e208:	4285      	cmp	r5, r0
    e20a:	d300      	bcc.n	e20e <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e20c:	4605      	mov	r5, r0
    e20e:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e212:	4620      	mov	r0, r4
    e214:	f000 f87d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e218:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e21c:	2902      	cmp	r1, #2
    e21e:	d108      	bne.n	e232 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e220:	42af      	cmp	r7, r5
    e222:	d200      	bcs.n	e226 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e224:	463d      	mov	r5, r7
    e226:	4286      	cmp	r6, r0
    e228:	d200      	bcs.n	e22c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e22a:	4630      	mov	r0, r6
    e22c:	2100      	movs	r1, #0
    e22e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e232:	f8a8 5008 	strh.w	r5, [r8, #8]
    e236:	f8a8 000c 	strh.w	r0, [r8, #12]
    e23a:	42bd      	cmp	r5, r7
    e23c:	d101      	bne.n	e242 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e23e:	42b0      	cmp	r0, r6
    e240:	d001      	beq.n	e246 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e242:	2001      	movs	r0, #1
    e244:	e000      	b.n	e248 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e246:	2000      	movs	r0, #0
    e248:	ea40 0009 	orr.w	r0, r0, r9
    e24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e250:	6840      	ldr	r0, [r0, #4]
    e252:	4770      	bx	lr

0000e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e258:	4616      	mov	r6, r2
    e25a:	460f      	mov	r7, r1
    e25c:	4604      	mov	r4, r0
    e25e:	f000 f8b5 	bl	e3cc <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x108>
    e262:	4605      	mov	r5, r0
    e264:	463a      	mov	r2, r7
    e266:	6921      	ldr	r1, [r4, #16]
    e268:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e26a:	f000 f845 	bl	e2f8 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x34>
    e26e:	19a9      	adds	r1, r5, r6
    e270:	4281      	cmp	r1, r0
    e272:	d300      	bcc.n	e276 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e274:	4608      	mov	r0, r1
    e276:	6320      	str	r0, [r4, #48]	; 0x30
    e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e27c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e27c:	221b      	movs	r2, #27
    e27e:	8402      	strh	r2, [r0, #32]
    e280:	8382      	strh	r2, [r0, #28]
    e282:	82c2      	strh	r2, [r0, #22]
    e284:	8282      	strh	r2, [r0, #20]
    e286:	8142      	strh	r2, [r0, #10]
    e288:	8202      	strh	r2, [r0, #16]
    e28a:	8102      	strh	r2, [r0, #8]
    e28c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e28e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e290:	8482      	strh	r2, [r0, #36]	; 0x24
    e292:	2900      	cmp	r1, #0
    e294:	d10a      	bne.n	e2ac <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e296:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e29a:	8441      	strh	r1, [r0, #34]	; 0x22
    e29c:	83c1      	strh	r1, [r0, #30]
    e29e:	8341      	strh	r1, [r0, #26]
    e2a0:	8301      	strh	r1, [r0, #24]
    e2a2:	81c1      	strh	r1, [r0, #14]
    e2a4:	8241      	strh	r1, [r0, #18]
    e2a6:	8181      	strh	r1, [r0, #12]
    e2a8:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e2aa:	8601      	strh	r1, [r0, #48]	; 0x30
    e2ac:	4770      	bx	lr

0000e2ae <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e2ae:	6800      	ldr	r0, [r0, #0]
    e2b0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e2b4:	4290      	cmp	r0, r2
    e2b6:	d903      	bls.n	e2c0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e2b8:	1a40      	subs	r0, r0, r1
    e2ba:	389c      	subs	r0, #156	; 0x9c
    e2bc:	0840      	lsrs	r0, r0, #1
    e2be:	4770      	bx	lr
    e2c0:	2000      	movs	r0, #0
    e2c2:	4770      	bx	lr

0000e2c4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e2c4:	b510      	push	{r4, lr}
    e2c6:	9c02      	ldr	r4, [sp, #8]
    e2c8:	8281      	strh	r1, [r0, #20]
    e2ca:	82c2      	strh	r2, [r0, #22]
    e2cc:	8303      	strh	r3, [r0, #24]
    e2ce:	8344      	strh	r4, [r0, #26]
    e2d0:	bd10      	pop	{r4, pc}
    e2d2:	1d00      	adds	r0, r0, #4
    e2d4:	b510      	push	{r4, lr}
    e2d6:	b280      	uxth	r0, r0
    e2d8:	2901      	cmp	r1, #1
    e2da:	d006      	beq.n	e2ea <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x26>
    e2dc:	2902      	cmp	r1, #2
    e2de:	d007      	beq.n	e2f0 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x2c>
    e2e0:	f240 2126 	movw	r1, #550	; 0x226
    e2e4:	2006      	movs	r0, #6
    e2e6:	f7f2 fbbd 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2ea:	00c0      	lsls	r0, r0, #3
    e2ec:	3050      	adds	r0, #80	; 0x50
    e2ee:	e001      	b.n	e2f4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x30>
    e2f0:	0080      	lsls	r0, r0, #2
    e2f2:	302c      	adds	r0, #44	; 0x2c
    e2f4:	b280      	uxth	r0, r0
    e2f6:	bd10      	pop	{r4, pc}
    e2f8:	4288      	cmp	r0, r1
    e2fa:	d300      	bcc.n	e2fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3a>
    e2fc:	4608      	mov	r0, r1
    e2fe:	1a80      	subs	r0, r0, r2
    e300:	4770      	bx	lr
    e302:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e306:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e30a:	4281      	cmp	r1, r0
    e30c:	d200      	bcs.n	e310 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4c>
    e30e:	4608      	mov	r0, r1
    e310:	4770      	bx	lr
    e312:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e316:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e31a:	4281      	cmp	r1, r0
    e31c:	d200      	bcs.n	e320 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x5c>
    e31e:	4608      	mov	r0, r1
    e320:	4770      	bx	lr
    e322:	b538      	push	{r3, r4, r5, lr}
    e324:	2200      	movs	r2, #0
    e326:	f1a0 0318 	sub.w	r3, r0, #24
    e32a:	2416      	movs	r4, #22
    e32c:	7202      	strb	r2, [r0, #8]
    e32e:	704a      	strb	r2, [r1, #1]
    e330:	700c      	strb	r4, [r1, #0]
    e332:	f8d3 5022 	ldr.w	r5, [r3, #34]	; 0x22
    e336:	604d      	str	r5, [r1, #4]
    e338:	f8d3 5026 	ldr.w	r5, [r3, #38]	; 0x26
    e33c:	608d      	str	r5, [r1, #8]
    e33e:	f8d3 502a 	ldr.w	r5, [r3, #42]	; 0x2a
    e342:	60cd      	str	r5, [r1, #12]
    e344:	7a05      	ldrb	r5, [r0, #8]
    e346:	f88d 5000 	strb.w	r5, [sp]
    e34a:	9d00      	ldr	r5, [sp, #0]
    e34c:	9500      	str	r5, [sp, #0]
    e34e:	f89d 5000 	ldrb.w	r5, [sp]
    e352:	2d00      	cmp	r5, #0
    e354:	d1ea      	bne.n	e32c <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x68>
    e356:	bd38      	pop	{r3, r4, r5, pc}
    e358:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35a:	b087      	sub	sp, #28
    e35c:	460d      	mov	r5, r1
    e35e:	4604      	mov	r4, r0
    e360:	f7f4 fa62 	bl	2828 <sym_56NG23UACCBJRJHKQI4X4VNMARWQXHUE4R3NK7I>
    e364:	2600      	movs	r6, #0
    e366:	b328      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e368:	f5a4 70c0 	sub.w	r0, r4, #384	; 0x180
    e36c:	7226      	strb	r6, [r4, #8]
    e36e:	8807      	ldrh	r7, [r0, #0]
    e370:	a903      	add	r1, sp, #12
    e372:	4638      	mov	r0, r7
    e374:	f001 fb39 	bl	f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    e378:	b108      	cbz	r0, e37e <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xba>
    e37a:	21fd      	movs	r1, #253	; 0xfd
    e37c:	e017      	b.n	e3ae <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xea>
    e37e:	f8ad 7000 	strh.w	r7, [sp]
    e382:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    e386:	f8ad 0002 	strh.w	r0, [sp, #2]
    e38a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    e38e:	f8ad 0004 	strh.w	r0, [sp, #4]
    e392:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    e396:	f8ad 0006 	strh.w	r0, [sp, #6]
    e39a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    e39e:	f8ad 0008 	strh.w	r0, [sp, #8]
    e3a2:	4668      	mov	r0, sp
    e3a4:	f001 fb48 	bl	fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    e3a8:	b120      	cbz	r0, e3b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xf0>
    e3aa:	f44f 7183 	mov.w	r1, #262	; 0x106
    e3ae:	202c      	movs	r0, #44	; 0x2c
    e3b0:	f7f2 fb58 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e3b4:	201f      	movs	r0, #31
    e3b6:	7028      	strb	r0, [r5, #0]
    e3b8:	706e      	strb	r6, [r5, #1]
    e3ba:	f854 0f0a 	ldr.w	r0, [r4, #10]!
    e3be:	6068      	str	r0, [r5, #4]
    e3c0:	6860      	ldr	r0, [r4, #4]
    e3c2:	60a8      	str	r0, [r5, #8]
    e3c4:	8920      	ldrh	r0, [r4, #8]
    e3c6:	81a8      	strh	r0, [r5, #12]
    e3c8:	b007      	add	sp, #28
    e3ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e3cc:	2196      	movs	r1, #150	; 0x96
    e3ce:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e3d2:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e3d6:	f000 b800 	b.w	e3da <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x116>
    e3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e3de:	460d      	mov	r5, r1
    e3e0:	4606      	mov	r6, r0
    e3e2:	4698      	mov	r8, r3
    e3e4:	4617      	mov	r7, r2
    e3e6:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e3e8:	4611      	mov	r1, r2
    e3ea:	f7ff ff72 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e3ee:	4604      	mov	r4, r0
    e3f0:	4639      	mov	r1, r7
    e3f2:	4630      	mov	r0, r6
    e3f4:	f7ff ff8d 	bl	e312 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x4e>
    e3f8:	42a0      	cmp	r0, r4
    e3fa:	d200      	bcs.n	e3fe <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x13a>
    e3fc:	4604      	mov	r4, r0
    e3fe:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e400:	4641      	mov	r1, r8
    e402:	f7ff ff66 	bl	e2d2 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0xe>
    e406:	4607      	mov	r7, r0
    e408:	4641      	mov	r1, r8
    e40a:	4630      	mov	r0, r6
    e40c:	f7ff ff79 	bl	e302 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x3e>
    e410:	42b8      	cmp	r0, r7
    e412:	d300      	bcc.n	e416 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A+0x152>
    e414:	4638      	mov	r0, r7
    e416:	4420      	add	r0, r4
    e418:	4428      	add	r0, r5
    e41a:	1d80      	adds	r0, r0, #6
    e41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e420 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e420:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e424:	2700      	movs	r7, #0
    e426:	463d      	mov	r5, r7
    e428:	2623      	movs	r6, #35	; 0x23
    e42a:	46b8      	mov	r8, r7
    e42c:	f7f4 fccc 	bl	2dc8 <sym_7LZ5OF5UTH4WGXV6IKS6GUUHKYRIWQTTIJXNBEY>
    e430:	4604      	mov	r4, r0
    e432:	f7f4 fc91 	bl	2d58 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e436:	b190      	cbz	r0, e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e438:	f8cd 8000 	str.w	r8, [sp]
    e43c:	f8cd 8004 	str.w	r8, [sp, #4]
    e440:	e003      	b.n	e44a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x2a>
    e442:	9800      	ldr	r0, [sp, #0]
    e444:	6941      	ldr	r1, [r0, #20]
    e446:	42a1      	cmp	r1, r4
    e448:	d009      	beq.n	e45e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3e>
    e44a:	4668      	mov	r0, sp
    e44c:	f7f2 fd28 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e450:	2800      	cmp	r0, #0
    e452:	d0f6      	beq.n	e442 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x22>
    e454:	4625      	mov	r5, r4
    e456:	4620      	mov	r0, r4
    e458:	f7f4 fc48 	bl	2cec <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e45c:	4607      	mov	r7, r0
    e45e:	1e76      	subs	r6, r6, #1
    e460:	d001      	beq.n	e466 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x46>
    e462:	2f00      	cmp	r7, #0
    e464:	d0e2      	beq.n	e42c <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0xc>
    e466:	b115      	cbz	r5, e46e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x4e>
    e468:	4628      	mov	r0, r5
    e46a:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e46e:	f240 1167 	movw	r1, #359	; 0x167
    e472:	200f      	movs	r0, #15
    e474:	f7f2 faf6 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e478:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e47c:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e480:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e484:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e488:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e48c:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e490:	d001      	beq.n	e496 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x76>
    e492:	2000      	movs	r0, #0
    e494:	4770      	bx	lr
    e496:	2001      	movs	r0, #1
    e498:	4770      	bx	lr
    e49a:	b510      	push	{r4, lr}
    e49c:	4604      	mov	r4, r0
    e49e:	2108      	movs	r1, #8
    e4a0:	4620      	mov	r0, r4
    e4a2:	f7f2 fb7f 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e4a6:	6820      	ldr	r0, [r4, #0]
    e4a8:	2800      	cmp	r0, #0
    e4aa:	d102      	bne.n	e4b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x92>
    e4ac:	6860      	ldr	r0, [r4, #4]
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d0f5      	beq.n	e49e <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x7e>
    e4b2:	bd10      	pop	{r4, pc}

0000e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>:
    e4b4:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    e4b8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    e4bc:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4c0:	4408      	add	r0, r1
    e4c2:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    e4c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    e4ca:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e4ce:	4408      	add	r0, r1
    e4d0:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    e4d4:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    e4d8:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    e4dc:	4408      	add	r0, r1
    e4de:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    e4e2:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    e4e6:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    e4ea:	4408      	add	r0, r1
    e4ec:	eb00 4010 	add.w	r0, r0, r0, lsr #16
    e4f0:	b2c0      	uxtb	r0, r0
    e4f2:	4770      	bx	lr

0000e4f4 <sym_KQ7WDRFWHZIBRVZJQIHMC5NBIZUJ4NGFK5AE4FQ>:
    e4f4:	f000 0155 	and.w	r1, r0, #85	; 0x55
    e4f8:	2255      	movs	r2, #85	; 0x55
    e4fa:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    e4fe:	4408      	add	r0, r1
    e500:	f000 0133 	and.w	r1, r0, #51	; 0x33
    e504:	2233      	movs	r2, #51	; 0x33
    e506:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    e50a:	4408      	add	r0, r1
    e50c:	f000 010f 	and.w	r1, r0, #15
    e510:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    e514:	4770      	bx	lr

0000e516 <sym_KX4ODCDF63RBCM4RLVD2FMITN5XCORTH2S6ZQ5A>:
    e516:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    e51a:	f7ff bfcb 	b.w	e4b4 <sym_B4SOI7ZERMZJ76YVIJFCACJN3HNVAJYEHZSLSTQ>

0000e51e <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI>:
    e51e:	b510      	push	{r4, lr}
    e520:	f1a0 0234 	sub.w	r2, r0, #52	; 0x34
    e524:	f830 4cbc 	ldrh.w	r4, [r0, #-188]
    e528:	2000      	movs	r0, #0
    e52a:	7048      	strb	r0, [r1, #1]
    e52c:	230c      	movs	r3, #12
    e52e:	700b      	strb	r3, [r1, #0]
    e530:	7108      	strb	r0, [r1, #4]
    e532:	f8a1 4005 	strh.w	r4, [r1, #5]
    e536:	f892 003d 	ldrb.w	r0, [r2, #61]	; 0x3d
    e53a:	71c8      	strb	r0, [r1, #7]
    e53c:	4620      	mov	r0, r4
    e53e:	f7f2 fe5d 	bl	11fc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e542:	f7fe feb6 	bl	d2b2 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    e546:	b140      	cbz	r0, e55a <sym_EROH2ERI6YP4PUJVAMOS4KJ2YDG74D2WAXB2TOI+0x3c>
    e548:	4620      	mov	r0, r4
    e54a:	f7ff f99c 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    e54e:	4620      	mov	r0, r4
    e550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e554:	2100      	movs	r1, #0
    e556:	f7f2 bce9 	b.w	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    e55a:	2160      	movs	r1, #96	; 0x60
    e55c:	2063      	movs	r0, #99	; 0x63
    e55e:	f7f2 fa81 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e562 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y>:
    e562:	b538      	push	{r3, r4, r5, lr}
    e564:	2200      	movs	r2, #0
    e566:	704a      	strb	r2, [r1, #1]
    e568:	2309      	movs	r3, #9
    e56a:	700b      	strb	r3, [r1, #0]
    e56c:	f1a0 0474 	sub.w	r4, r0, #116	; 0x74
    e570:	f5a0 73e3 	sub.w	r3, r0, #454	; 0x1c6
    e574:	7202      	strb	r2, [r0, #8]
    e576:	84da      	strh	r2, [r3, #38]	; 0x26
    e578:	f8d4 507e 	ldr.w	r5, [r4, #126]	; 0x7e
    e57c:	604d      	str	r5, [r1, #4]
    e57e:	f8d4 5082 	ldr.w	r5, [r4, #130]	; 0x82
    e582:	608d      	str	r5, [r1, #8]
    e584:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
    e588:	818d      	strh	r5, [r1, #12]
    e58a:	710a      	strb	r2, [r1, #4]
    e58c:	7a05      	ldrb	r5, [r0, #8]
    e58e:	f88d 5000 	strb.w	r5, [sp]
    e592:	9d00      	ldr	r5, [sp, #0]
    e594:	9500      	str	r5, [sp, #0]
    e596:	f89d 5000 	ldrb.w	r5, [sp]
    e59a:	2d00      	cmp	r5, #0
    e59c:	d1ea      	bne.n	e574 <sym_24PTBIAZ2OKSUMWBHATZCO4EQUFF3BOLAN2QX4Y+0x12>
    e59e:	bd38      	pop	{r3, r4, r5, pc}

0000e5a0 <sym_2TCPCDAUQ3FXZYG56Z6ZP7VCFNUJTBV3EZJYPGY>:
    e5a0:	2200      	movs	r2, #0
    e5a2:	704a      	strb	r2, [r1, #1]
    e5a4:	220d      	movs	r2, #13
    e5a6:	700a      	strb	r2, [r1, #0]
    e5a8:	f100 020a 	add.w	r2, r0, #10
    e5ac:	7a83      	ldrb	r3, [r0, #10]
    e5ae:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5b2:	710b      	strb	r3, [r1, #4]
    e5b4:	8800      	ldrh	r0, [r0, #0]
    e5b6:	80c8      	strh	r0, [r1, #6]
    e5b8:	7910      	ldrb	r0, [r2, #4]
    e5ba:	7208      	strb	r0, [r1, #8]
    e5bc:	4770      	bx	lr

0000e5be <sym_S6U6ANENQP6QL5TLITNXPOYFSB26Q5AFTW32CXI>:
    e5be:	2200      	movs	r2, #0
    e5c0:	704a      	strb	r2, [r1, #1]
    e5c2:	220e      	movs	r2, #14
    e5c4:	700a      	strb	r2, [r1, #0]
    e5c6:	7a82      	ldrb	r2, [r0, #10]
    e5c8:	f2a0 2012 	subw	r0, r0, #530	; 0x212
    e5cc:	710a      	strb	r2, [r1, #4]
    e5ce:	8800      	ldrh	r0, [r0, #0]
    e5d0:	80c8      	strh	r0, [r1, #6]
    e5d2:	4770      	bx	lr

0000e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>:
    e5d4:	b510      	push	{r4, lr}
    e5d6:	6844      	ldr	r4, [r0, #4]
    e5d8:	7803      	ldrb	r3, [r0, #0]
    e5da:	2100      	movs	r1, #0
    e5dc:	f894 20a5 	ldrb.w	r2, [r4, #165]	; 0xa5
    e5e0:	3488      	adds	r4, #136	; 0x88
    e5e2:	4620      	mov	r0, r4
    e5e4:	f7ff fa8a 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e5e8:	b110      	cbz	r0, e5f0 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY+0x1c>
    e5ea:	2004      	movs	r0, #4
    e5ec:	7760      	strb	r0, [r4, #29]
    e5ee:	bd10      	pop	{r4, pc}
    e5f0:	21aa      	movs	r1, #170	; 0xaa
    e5f2:	201c      	movs	r0, #28
    e5f4:	f7f2 fa36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>:
    e5f8:	b510      	push	{r4, lr}
    e5fa:	4604      	mov	r4, r0
    e5fc:	6840      	ldr	r0, [r0, #4]
    e5fe:	2300      	movs	r3, #0
    e600:	4619      	mov	r1, r3
    e602:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    e606:	3088      	adds	r0, #136	; 0x88
    e608:	f7ff fa78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e60c:	b120      	cbz	r0, e618 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY+0x20>
    e60e:	6861      	ldr	r1, [r4, #4]
    e610:	2000      	movs	r0, #0
    e612:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    e616:	bd10      	pop	{r4, pc}
    e618:	21b2      	movs	r1, #178	; 0xb2
    e61a:	201c      	movs	r0, #28
    e61c:	f7f2 fa22 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e620:	2200      	movs	r2, #0
    e622:	704a      	strb	r2, [r1, #1]
    e624:	2208      	movs	r2, #8
    e626:	700a      	strb	r2, [r1, #0]
    e628:	f850 2f09 	ldr.w	r2, [r0, #9]!
    e62c:	604a      	str	r2, [r1, #4]
    e62e:	6842      	ldr	r2, [r0, #4]
    e630:	608a      	str	r2, [r1, #8]
    e632:	8902      	ldrh	r2, [r0, #8]
    e634:	818a      	strh	r2, [r1, #12]
    e636:	7a80      	ldrb	r0, [r0, #10]
    e638:	7388      	strb	r0, [r1, #14]
    e63a:	4770      	bx	lr

0000e63c <sym_NK4HRRKGX3ST3ARVTU6HUEXLOWZFFBMCIDNT3EI>:
    e63c:	2200      	movs	r2, #0
    e63e:	704a      	strb	r2, [r1, #1]
    e640:	2210      	movs	r2, #16
    e642:	f5a0 70b0 	sub.w	r0, r0, #352	; 0x160
    e646:	700a      	strb	r2, [r1, #0]
    e648:	8800      	ldrh	r0, [r0, #0]
    e64a:	8088      	strh	r0, [r1, #4]
    e64c:	4770      	bx	lr

0000e64e <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A>:
    e64e:	b538      	push	{r3, r4, r5, lr}
    e650:	2400      	movs	r4, #0
    e652:	704c      	strb	r4, [r1, #1]
    e654:	2501      	movs	r5, #1
    e656:	700d      	strb	r5, [r1, #0]
    e658:	f1a0 0260 	sub.w	r2, r0, #96	; 0x60
    e65c:	f1a0 03e8 	sub.w	r3, r0, #232	; 0xe8
    e660:	710c      	strb	r4, [r1, #4]
    e662:	7204      	strb	r4, [r0, #8]
    e664:	881d      	ldrh	r5, [r3, #0]
    e666:	f8a1 5005 	strh.w	r5, [r1, #5]
    e66a:	f892 5069 	ldrb.w	r5, [r2, #105]	; 0x69
    e66e:	71cd      	strb	r5, [r1, #7]
    e670:	f8b2 506a 	ldrh.w	r5, [r2, #106]	; 0x6a
    e674:	810d      	strh	r5, [r1, #8]
    e676:	f8b2 506c 	ldrh.w	r5, [r2, #108]	; 0x6c
    e67a:	814d      	strh	r5, [r1, #10]
    e67c:	7a05      	ldrb	r5, [r0, #8]
    e67e:	f88d 5000 	strb.w	r5, [sp]
    e682:	9d00      	ldr	r5, [sp, #0]
    e684:	9500      	str	r5, [sp, #0]
    e686:	f89d 5000 	ldrb.w	r5, [sp]
    e68a:	2d00      	cmp	r5, #0
    e68c:	d1e9      	bne.n	e662 <sym_2UKPFKMGRDZ4VV635IPSP7DNWK4DJAJ7LOHQN6A+0x14>
    e68e:	bd38      	pop	{r3, r4, r5, pc}

0000e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>:
    e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e694:	7803      	ldrb	r3, [r0, #0]
    e696:	6840      	ldr	r0, [r0, #4]
    e698:	2501      	movs	r5, #1
    e69a:	f100 0488 	add.w	r4, r0, #136	; 0x88
    e69e:	f500 779c 	add.w	r7, r0, #312	; 0x138
    e6a2:	f890 00e7 	ldrb.w	r0, [r0, #231]	; 0xe7
    e6a6:	f04f 0600 	mov.w	r6, #0
    e6aa:	0780      	lsls	r0, r0, #30
    e6ac:	d410      	bmi.n	e6d0 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x40>
    e6ae:	7f62      	ldrb	r2, [r4, #29]
    e6b0:	2100      	movs	r1, #0
    e6b2:	4620      	mov	r0, r4
    e6b4:	f7ff fa22 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6b8:	b130      	cbz	r0, e6c8 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x38>
    e6ba:	7765      	strb	r5, [r4, #29]
    e6bc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
    e6c0:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6c8:	216e      	movs	r1, #110	; 0x6e
    e6ca:	2040      	movs	r0, #64	; 0x40
    e6cc:	f7f2 f9ca 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6d0:	2300      	movs	r3, #0
    e6d2:	7fa2      	ldrb	r2, [r4, #30]
    e6d4:	4619      	mov	r1, r3
    e6d6:	4620      	mov	r0, r4
    e6d8:	f7ff fa10 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    e6dc:	b108      	cbz	r0, e6e2 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x52>
    e6de:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c
    e6e2:	74be      	strb	r6, [r7, #18]
    e6e4:	e7ee      	b.n	e6c4 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x34>
    e6e6:	2200      	movs	r2, #0
    e6e8:	704a      	strb	r2, [r1, #1]
    e6ea:	221d      	movs	r2, #29
    e6ec:	700a      	strb	r2, [r1, #0]
    e6ee:	f8d0 000a 	ldr.w	r0, [r0, #10]
    e6f2:	6048      	str	r0, [r1, #4]
    e6f4:	4770      	bx	lr
    e6f6:	b510      	push	{r4, lr}
    e6f8:	4604      	mov	r4, r0
    e6fa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    e6fe:	e9d4 1000 	ldrd	r1, r0, [r4]
    e702:	4050      	eors	r0, r2
    e704:	ea70 0101 	orns	r1, r0, r1
    e708:	d008      	beq.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e70a:	f7fc fd41 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e70e:	e9d4 2300 	ldrd	r2, r3, [r4]
    e712:	1a80      	subs	r0, r0, r2
    e714:	4199      	sbcs	r1, r3
    e716:	d301      	bcc.n	e71c <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x8c>
    e718:	2001      	movs	r0, #1
    e71a:	bd10      	pop	{r4, pc}
    e71c:	2000      	movs	r0, #0
    e71e:	bd10      	pop	{r4, pc}
    e720:	2801      	cmp	r0, #1
    e722:	d102      	bne.n	e72a <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9a>
    e724:	7948      	ldrb	r0, [r1, #5]
    e726:	0980      	lsrs	r0, r0, #6
    e728:	d001      	beq.n	e72e <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0x9e>
    e72a:	2000      	movs	r0, #0
    e72c:	4770      	bx	lr
    e72e:	2001      	movs	r0, #1
    e730:	4770      	bx	lr
    e732:	2801      	cmp	r0, #1
    e734:	d106      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e736:	7948      	ldrb	r0, [r1, #5]
    e738:	2101      	movs	r1, #1
    e73a:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e73e:	d101      	bne.n	e744 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xb4>
    e740:	2001      	movs	r0, #1
    e742:	4770      	bx	lr
    e744:	2000      	movs	r0, #0
    e746:	4770      	bx	lr
    e748:	b118      	cbz	r0, e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74a:	2802      	cmp	r0, #2
    e74c:	d001      	beq.n	e752 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xc2>
    e74e:	2001      	movs	r0, #1
    e750:	4770      	bx	lr
    e752:	2000      	movs	r0, #0
    e754:	4770      	bx	lr
    e756:	2802      	cmp	r0, #2
    e758:	d003      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75a:	2803      	cmp	r0, #3
    e75c:	d001      	beq.n	e762 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q+0xd2>
    e75e:	2000      	movs	r0, #0
    e760:	4770      	bx	lr
    e762:	2001      	movs	r0, #1
    e764:	4770      	bx	lr

0000e766 <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e766:	f7f5 bd93 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>

0000e76a <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    e76a:	b510      	push	{r4, lr}
    e76c:	2000      	movs	r0, #0
    e76e:	f7f5 fbc9 	bl	3f04 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x92c>
    e772:	f7f4 ff4f 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e776:	f7f5 fd99 	bl	42ac <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ac>
    e77a:	2000      	movs	r0, #0
    e77c:	bd10      	pop	{r4, pc}
    e77e:	b510      	push	{r4, lr}
    e780:	f7f5 fbda 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e784:	f7f4 ff46 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e788:	f7f9 fa92 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e78c:	2005      	movs	r0, #5
    e78e:	bd10      	pop	{r4, pc}
    e790:	b510      	push	{r4, lr}
    e792:	f7f5 fbd1 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e796:	f7f9 fa8b 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e79a:	2005      	movs	r0, #5
    e79c:	bd10      	pop	{r4, pc}
    e79e:	b530      	push	{r4, r5, lr}
    e7a0:	b08b      	sub	sp, #44	; 0x2c
    e7a2:	4605      	mov	r5, r0
    e7a4:	f7f5 fbc8 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7a8:	7828      	ldrb	r0, [r5, #0]
    e7aa:	4669      	mov	r1, sp
    e7ac:	f000 040f 	and.w	r4, r0, #15
    e7b0:	4622      	mov	r2, r4
    e7b2:	4628      	mov	r0, r5
    e7b4:	f7f5 ff26 	bl	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e7b8:	2200      	movs	r2, #0
    e7ba:	4621      	mov	r1, r4
    e7bc:	4668      	mov	r0, sp
    e7be:	f7f4 ffb1 	bl	3724 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x14c>
    e7c2:	4621      	mov	r1, r4
    e7c4:	4668      	mov	r0, sp
    e7c6:	f7f5 fb37 	bl	3e38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x860>
    e7ca:	4604      	mov	r4, r0
    e7cc:	f7f4 ff22 	bl	3614 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e7d0:	b00b      	add	sp, #44	; 0x2c
    e7d2:	4620      	mov	r0, r4
    e7d4:	bd30      	pop	{r4, r5, pc}
    e7d6:	f240 31a7 	movw	r1, #935	; 0x3a7
    e7da:	2032      	movs	r0, #50	; 0x32
    e7dc:	f7f2 f942 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7e0:	b510      	push	{r4, lr}
    e7e2:	f7f5 fba9 	bl	3f38 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x960>
    e7e6:	f7f9 fa63 	bl	7cb0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e7ee:	f7f5 bd65 	b.w	42bc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2bc>
    e7f2:	f7f5 bd4d 	b.w	4290 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x290>
    e7f6:	f7fe bf0e 	b.w	d616 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    e7fa:	b570      	push	{r4, r5, r6, lr}
    e7fc:	4614      	mov	r4, r2
    e7fe:	461d      	mov	r5, r3
    e800:	4606      	mov	r6, r0
    e802:	f7fc fcc5 	bl	b190 <sym_PIDJEDDM47FHOOZQXISY5YBB3CBP5VAXWPCUL2Q>
    e806:	1900      	adds	r0, r0, r4
    e808:	4169      	adcs	r1, r5
    e80a:	e9c6 0100 	strd	r0, r1, [r6]
    e80e:	bd70      	pop	{r4, r5, r6, pc}

0000e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e810:	b510      	push	{r4, lr}
    e812:	f7f2 fd27 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e816:	f000 f944 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e81a:	4604      	mov	r4, r0
    e81c:	221c      	movs	r2, #28
    e81e:	2100      	movs	r1, #0
    e820:	3009      	adds	r0, #9
    e822:	f001 ff9e 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e826:	207f      	movs	r0, #127	; 0x7f
    e828:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e82c:	21ff      	movs	r1, #255	; 0xff
    e82e:	75e1      	strb	r1, [r4, #23]
    e830:	72a1      	strb	r1, [r4, #10]
    e832:	7721      	strb	r1, [r4, #28]
    e834:	7ce0      	ldrb	r0, [r4, #19]
    e836:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e83a:	3020      	adds	r0, #32
    e83c:	74e0      	strb	r0, [r4, #19]
    e83e:	bd10      	pop	{r4, pc}

0000e840 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    e840:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e844:	461d      	mov	r5, r3
    e846:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    e84a:	4616      	mov	r6, r2
    e84c:	4688      	mov	r8, r1
    e84e:	4681      	mov	r9, r0
    e850:	f7f2 fd08 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e854:	4604      	mov	r4, r0
    e856:	f7fe fda7 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e85a:	2801      	cmp	r0, #1
    e85c:	d066      	beq.n	e92c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xec>
    e85e:	4620      	mov	r0, r4
    e860:	f000 f91f 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e864:	4604      	mov	r4, r0
    e866:	221c      	movs	r2, #28
    e868:	2100      	movs	r1, #0
    e86a:	3009      	adds	r0, #9
    e86c:	f001 ff79 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e870:	2701      	movs	r7, #1
    e872:	7267      	strb	r7, [r4, #9]
    e874:	ea5f 0008 	movs.w	r0, r8
    e878:	d009      	beq.n	e88e <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4e>
    e87a:	2801      	cmp	r0, #1
    e87c:	d00b      	beq.n	e896 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x56>
    e87e:	2802      	cmp	r0, #2
    e880:	d02d      	beq.n	e8de <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9e>
    e882:	f1b8 0f06 	cmp.w	r8, #6
    e886:	d02c      	beq.n	e8e2 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    e888:	f240 310b 	movw	r1, #779	; 0x30b
    e88c:	e04b      	b.n	e926 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    e88e:	7ce0      	ldrb	r0, [r4, #19]
    e890:	f040 0001 	orr.w	r0, r0, #1
    e894:	e026      	b.n	e8e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa4>
    e896:	7ce0      	ldrb	r0, [r4, #19]
    e898:	f040 0005 	orr.w	r0, r0, #5
    e89c:	f040 0010 	orr.w	r0, r0, #16
    e8a0:	74e0      	strb	r0, [r4, #19]
    e8a2:	f104 030a 	add.w	r3, r4, #10
    e8a6:	1c5a      	adds	r2, r3, #1
    e8a8:	4648      	mov	r0, r9
    e8aa:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8ac:	f000 f8de 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e8b0:	f884 a012 	strb.w	sl, [r4, #18]
    e8b4:	7567      	strb	r7, [r4, #21]
    e8b6:	2000      	movs	r0, #0
    e8b8:	75a0      	strb	r0, [r4, #22]
    e8ba:	20ff      	movs	r0, #255	; 0xff
    e8bc:	75e0      	strb	r0, [r4, #23]
    e8be:	7ce1      	ldrb	r1, [r4, #19]
    e8c0:	0749      	lsls	r1, r1, #29
    e8c2:	d518      	bpl.n	e8f6 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    e8c4:	f104 001d 	add.w	r0, r4, #29
    e8c8:	1e41      	subs	r1, r0, #1
    e8ca:	2d02      	cmp	r5, #2
    e8cc:	d00d      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8ce:	2d03      	cmp	r5, #3
    e8d0:	d00b      	beq.n	e8ea <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xaa>
    e8d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
    e8d6:	6813      	ldr	r3, [r2, #0]
    e8d8:	6003      	str	r3, [r0, #0]
    e8da:	8892      	ldrh	r2, [r2, #4]
    e8dc:	e008      	b.n	e8f0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb0>
    e8de:	7ce0      	ldrb	r0, [r4, #19]
    e8e0:	e7dc      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8e2:	7ce0      	ldrb	r0, [r4, #19]
    e8e4:	f040 0002 	orr.w	r0, r0, #2
    e8e8:	e7d8      	b.n	e89c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    e8ea:	6832      	ldr	r2, [r6, #0]
    e8ec:	6002      	str	r2, [r0, #0]
    e8ee:	88b2      	ldrh	r2, [r6, #4]
    e8f0:	8082      	strh	r2, [r0, #4]
    e8f2:	700d      	strb	r5, [r1, #0]
    e8f4:	e000      	b.n	e8f8 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb8>
    e8f6:	7720      	strb	r0, [r4, #28]
    e8f8:	207f      	movs	r0, #127	; 0x7f
    e8fa:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e8fe:	f884 b024 	strb.w	fp, [r4, #36]	; 0x24
    e902:	f7f2 fca9 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e906:	4605      	mov	r5, r0
    e908:	f7f2 fcac 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e90c:	2201      	movs	r2, #1
    e90e:	4629      	mov	r1, r5
    e910:	f000 f8d0 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e914:	b128      	cbz	r0, e922 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe2>
    e916:	4620      	mov	r0, r4
    e918:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    e91c:	2100      	movs	r1, #0
    e91e:	f7f5 be69 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e922:	f240 312b 	movw	r1, #811	; 0x32b
    e926:	2033      	movs	r0, #51	; 0x33
    e928:	f7f2 f89c 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e92c:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}

0000e930 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e934:	461e      	mov	r6, r3
    e936:	4617      	mov	r7, r2
    e938:	4689      	mov	r9, r1
    e93a:	4682      	mov	sl, r0
    e93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e940:	f7f2 fc90 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e944:	4604      	mov	r4, r0
    e946:	f7fe fd2f 	bl	d3a8 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e94a:	2801      	cmp	r0, #1
    e94c:	d039      	beq.n	e9c2 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x92>
    e94e:	4620      	mov	r0, r4
    e950:	f000 f8a7 	bl	eaa2 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xdc>
    e954:	4604      	mov	r4, r0
    e956:	221c      	movs	r2, #28
    e958:	2100      	movs	r1, #0
    e95a:	3009      	adds	r0, #9
    e95c:	f001 ff01 	bl	10762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e960:	2501      	movs	r5, #1
    e962:	f104 030a 	add.w	r3, r4, #10
    e966:	7265      	strb	r5, [r4, #9]
    e968:	1c5a      	adds	r2, r3, #1
    e96a:	4649      	mov	r1, r9
    e96c:	4650      	mov	r0, sl
    e96e:	f000 f87d 	bl	ea6c <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa6>
    e972:	f884 8012 	strb.w	r8, [r4, #18]
    e976:	7ce0      	ldrb	r0, [r4, #19]
    e978:	21ff      	movs	r1, #255	; 0xff
    e97a:	f367 0000 	bfi	r0, r7, #0, #1
    e97e:	f040 001a 	orr.w	r0, r0, #26
    e982:	74e0      	strb	r0, [r4, #19]
    e984:	7565      	strb	r5, [r4, #21]
    e986:	2000      	movs	r0, #0
    e988:	75a0      	strb	r0, [r4, #22]
    e98a:	75e1      	strb	r1, [r4, #23]
    e98c:	7721      	strb	r1, [r4, #28]
    e98e:	207f      	movs	r0, #127	; 0x7f
    e990:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    e994:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    e998:	f7f2 fc5e 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e99c:	4605      	mov	r5, r0
    e99e:	f7f2 fc61 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9a2:	2201      	movs	r2, #1
    e9a4:	4629      	mov	r1, r5
    e9a6:	f000 f885 	bl	eab4 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xee>
    e9aa:	b128      	cbz	r0, e9b8 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e9ac:	4620      	mov	r0, r4
    e9ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b2:	2100      	movs	r1, #0
    e9b4:	f7f5 be1e 	b.w	45f4 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5f4>
    e9b8:	f44f 7156 	mov.w	r1, #856	; 0x358
    e9bc:	2033      	movs	r0, #51	; 0x33
    e9be:	f7f2 f851 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e9c6 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY>:
    e9c6:	f7ff bf23 	b.w	e810 <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    e9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9cc:	b08b      	sub	sp, #44	; 0x2c
    e9ce:	460f      	mov	r7, r1
    e9d0:	f7f2 fc48 	bl	1264 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e9d4:	4604      	mov	r4, r0
    e9d6:	f7fe fd38 	bl	d44a <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e9da:	0005      	movs	r5, r0
    e9dc:	d00c      	beq.n	e9f8 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x32>
    e9de:	4620      	mov	r0, r4
    e9e0:	4629      	mov	r1, r5
    e9e2:	aa0a      	add	r2, sp, #40	; 0x28
    e9e4:	f7fe fd4f 	bl	d486 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e9e8:	4606      	mov	r6, r0
    e9ea:	f7f2 fc35 	bl	1258 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e9ee:	42b0      	cmp	r0, r6
    e9f0:	d005      	beq.n	e9fe <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x38>
    e9f2:	f240 11ab 	movw	r1, #427	; 0x1ab
    e9f6:	e036      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9f8:	f240 11a1 	movw	r1, #417	; 0x1a1
    e9fc:	e033      	b.n	ea66 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xa0>
    e9fe:	4669      	mov	r1, sp
    ea00:	980a      	ldr	r0, [sp, #40]	; 0x28
    ea02:	f000 f859 	bl	eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    ea06:	1d3e      	adds	r6, r7, #4
    ea08:	4628      	mov	r0, r5
    ea0a:	f7fe fccb 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    ea0e:	4605      	mov	r5, r0
    ea10:	f100 0109 	add.w	r1, r0, #9
    ea14:	221c      	movs	r2, #28
    ea16:	4630      	mov	r0, r6
    ea18:	f001 fe29 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea1c:	7ce8      	ldrb	r0, [r5, #19]
    ea1e:	f04f 0500 	mov.w	r5, #0
    ea22:	06c1      	lsls	r1, r0, #27
    ea24:	d50d      	bpl.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea26:	0740      	lsls	r0, r0, #29
    ea28:	d40a      	bmi.n	ea40 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7a>
    ea2a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    ea2e:	f106 001c 	add.w	r0, r6, #28
    ea32:	9903      	ldr	r1, [sp, #12]
    ea34:	f001 fe1b 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ea38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ea3c:	7230      	strb	r0, [r6, #8]
    ea3e:	e000      	b.n	ea42 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x7c>
    ea40:	7235      	strb	r5, [r6, #8]
    ea42:	707d      	strb	r5, [r7, #1]
    ea44:	2005      	movs	r0, #5
    ea46:	7038      	strb	r0, [r7, #0]
    ea48:	4638      	mov	r0, r7
    ea4a:	f7f5 fd63 	bl	4514 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x514>
    ea4e:	4620      	mov	r0, r4
    ea50:	f7fe fcc3 	bl	d3da <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    ea54:	b128      	cbz	r0, ea62 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0x9c>
    ea56:	4620      	mov	r0, r4
    ea58:	2100      	movs	r1, #0
    ea5a:	f7fe fdb2 	bl	d5c2 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    ea5e:	b00b      	add	sp, #44	; 0x2c
    ea60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ea62:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
    ea66:	2033      	movs	r0, #51	; 0x33
    ea68:	f7f1 fffc 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea6c:	b510      	push	{r4, lr}
    ea6e:	461c      	mov	r4, r3
    ea70:	460b      	mov	r3, r1
    ea72:	29ff      	cmp	r1, #255	; 0xff
    ea74:	d00d      	beq.n	ea92 <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xcc>
    ea76:	4621      	mov	r1, r4
    ea78:	4618      	mov	r0, r3
    ea7a:	f7f3 fbcf 	bl	221c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    ea7e:	b120      	cbz	r0, ea8a <sym_OMWXBZW422C6DKXO7GJC4CUO6XR5IIZSWYHWWEY+0xc4>
    ea80:	7820      	ldrb	r0, [r4, #0]
    ea82:	f040 0002 	orr.w	r0, r0, #2
    ea86:	7020      	strb	r0, [r4, #0]
    ea88:	bd10      	pop	{r4, pc}
    ea8a:	21dc      	movs	r1, #220	; 0xdc
    ea8c:	2033      	movs	r0, #51	; 0x33
    ea8e:	f7f1 ffe9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ea92:	7c41      	ldrb	r1, [r0, #17]
    ea94:	7021      	strb	r1, [r4, #0]
    ea96:	6840      	ldr	r0, [r0, #4]
    ea98:	6801      	ldr	r1, [r0, #0]
    ea9a:	6011      	str	r1, [r2, #0]
    ea9c:	8880      	ldrh	r0, [r0, #4]
    ea9e:	8090      	strh	r0, [r2, #4]
    eaa0:	bd10      	pop	{r4, pc}
    eaa2:	b51c      	push	{r2, r3, r4, lr}
    eaa4:	4669      	mov	r1, sp
    eaa6:	aa01      	add	r2, sp, #4
    eaa8:	f7fe fcdf 	bl	d46a <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    eaac:	9800      	ldr	r0, [sp, #0]
    eaae:	f7fe fc79 	bl	d3a4 <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    eab2:	bd1c      	pop	{r2, r3, r4, pc}
    eab4:	f7fe bc2d 	b.w	d312 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000eab8 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    eab8:	7802      	ldrb	r2, [r0, #0]
    eaba:	f002 020f 	and.w	r2, r2, #15
    eabe:	f7f5 bda1 	b.w	4604 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>

0000eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>:
    eac2:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    eac4:	255e      	movs	r5, #94	; 0x5e
    eac6:	4668      	mov	r0, sp
    eac8:	f7fd fe00 	bl	c6cc <mpsl_fem_pa_is_configured>
    eacc:	f89d 0000 	ldrb.w	r0, [sp]
    ead0:	b108      	cbz	r0, ead6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x14>
    ead2:	2401      	movs	r4, #1
    ead4:	e000      	b.n	ead8 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x16>
    ead6:	2400      	movs	r4, #0
    ead8:	a801      	add	r0, sp, #4
    eada:	f7fd fddf 	bl	c69c <mpsl_fem_lna_is_configured>
    eade:	f89d 0004 	ldrb.w	r0, [sp, #4]
    eae2:	b100      	cbz	r0, eae6 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x24>
    eae4:	2001      	movs	r0, #1
    eae6:	4304      	orrs	r4, r0
    eae8:	d000      	beq.n	eaec <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA+0x2a>
    eaea:	2568      	movs	r5, #104	; 0x68
    eaec:	4628      	mov	r0, r5
    eaee:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>:
    eaf0:	b510      	push	{r4, lr}
    eaf2:	f7ff ffe6 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eaf6:	3069      	adds	r0, #105	; 0x69
    eaf8:	b280      	uxth	r0, r0
    eafa:	bd10      	pop	{r4, pc}
    eafc:	6980      	ldr	r0, [r0, #24]
    eafe:	2800      	cmp	r0, #0
    eb00:	d000      	beq.n	eb04 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x14>
    eb02:	2001      	movs	r0, #1
    eb04:	4770      	bx	lr
    eb06:	b510      	push	{r4, lr}
    eb08:	2802      	cmp	r0, #2
    eb0a:	d006      	beq.n	eb1a <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2a>
    eb0c:	2108      	movs	r1, #8
    eb0e:	2801      	cmp	r0, #1
    eb10:	d005      	beq.n	eb1e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x2e>
    eb12:	21f5      	movs	r1, #245	; 0xf5
    eb14:	2005      	movs	r0, #5
    eb16:	f7f1 ffa5 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eb1a:	2104      	movs	r1, #4
    eb1c:	e7f7      	b.n	eb0e <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY+0x1e>
    eb1e:	202a      	movs	r0, #42	; 0x2a
    eb20:	2228      	movs	r2, #40	; 0x28
    eb22:	fb11 2000 	smlabb	r0, r1, r0, r2
    eb26:	b280      	uxth	r0, r0
    eb28:	bd10      	pop	{r4, pc}
    eb2a:	9800      	ldr	r0, [sp, #0]
    eb2c:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
    eb30:	1810      	adds	r0, r2, r0
    eb32:	f143 0300 	adc.w	r3, r3, #0
    eb36:	1840      	adds	r0, r0, r1
    eb38:	f143 0100 	adc.w	r1, r3, #0
    eb3c:	3833      	subs	r0, #51	; 0x33
    eb3e:	f161 0100 	sbc.w	r1, r1, #0
    eb42:	f240 42e2 	movw	r2, #1250	; 0x4e2
    eb46:	1880      	adds	r0, r0, r2
    eb48:	f141 0100 	adc.w	r1, r1, #0
    eb4c:	4770      	bx	lr
    eb4e:	b510      	push	{r4, lr}
    eb50:	f7ff ffb7 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    eb54:	f500 7081 	add.w	r0, r0, #258	; 0x102
    eb58:	b280      	uxth	r0, r0
    eb5a:	bd10      	pop	{r4, pc}
    eb5c:	f7fb bb5c 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    eb60:	1a10      	subs	r0, r2, r0
    eb62:	4770      	bx	lr

0000eb64 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    eb64:	b510      	push	{r4, lr}
    eb66:	2905      	cmp	r1, #5
    eb68:	d22d      	bcs.n	ebc6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    eb6a:	e8df f001 	tbb	[pc, r1]
    eb6e:	0a05      	.short	0x0a05
    eb70:	00280e03 	.word	0x00280e03
    eb74:	2100      	movs	r1, #0
    eb76:	e000      	b.n	eb7a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    eb78:	2101      	movs	r1, #1
    eb7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eb7e:	f7f6 bbbd 	b.w	52fc <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x90>
    eb82:	2103      	movs	r1, #3
    eb84:	f880 1248 	strb.w	r1, [r0, #584]	; 0x248
    eb88:	bd10      	pop	{r4, pc}
    eb8a:	4604      	mov	r4, r0
    eb8c:	6900      	ldr	r0, [r0, #16]
    eb8e:	f8c4 0250 	str.w	r0, [r4, #592]	; 0x250
    eb92:	f8d4 026c 	ldr.w	r0, [r4, #620]	; 0x26c
    eb96:	6220      	str	r0, [r4, #32]
    eb98:	f8b4 0268 	ldrh.w	r0, [r4, #616]	; 0x268
    eb9c:	84a0      	strh	r0, [r4, #36]	; 0x24
    eb9e:	f8d4 0270 	ldr.w	r0, [r4, #624]	; 0x270
    eba2:	6120      	str	r0, [r4, #16]
    eba4:	f8b4 0274 	ldrh.w	r0, [r4, #628]	; 0x274
    eba8:	8320      	strh	r0, [r4, #24]
    ebaa:	f8b4 0276 	ldrh.w	r0, [r4, #630]	; 0x276
    ebae:	8360      	strh	r0, [r4, #26]
    ebb0:	4620      	mov	r0, r4
    ebb2:	f000 f817 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebb6:	2002      	movs	r0, #2
    ebb8:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ebbc:	bd10      	pop	{r4, pc}
    ebbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ebc2:	f000 b80f 	b.w	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ebc6:	f240 21fd 	movw	r1, #765	; 0x2fd
    ebca:	2035      	movs	r0, #53	; 0x35
    ebcc:	f7f1 ff4a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    ebd0:	b510      	push	{r4, lr}
    ebd2:	f7f6 fb63 	bl	529c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x30>
    ebd6:	2000      	movs	r0, #0
    ebd8:	bd10      	pop	{r4, pc}

0000ebda <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    ebda:	f8c0 1230 	str.w	r1, [r0, #560]	; 0x230
    ebde:	4770      	bx	lr
    ebe0:	2000      	movs	r0, #0
    ebe2:	4770      	bx	lr
    ebe4:	b570      	push	{r4, r5, r6, lr}
    ebe6:	4604      	mov	r4, r0
    ebe8:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    ebec:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    ebf0:	f7f6 fba0 	bl	5334 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0xc8>
    ebf4:	4605      	mov	r5, r0
    ebf6:	f7ff ff7b 	bl	eaf0 <sym_7VT4NWAIQ62IH4ADXESKGG65YU3B424JJI7DPEY>
    ebfa:	4601      	mov	r1, r0
    ebfc:	462a      	mov	r2, r5
    ebfe:	4620      	mov	r0, r4
    ec00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ec04:	f7ff bb26 	b.w	e254 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    ec08:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    ec0c:	469a      	mov	sl, r3
    ec0e:	4691      	mov	r9, r2
    ec10:	460c      	mov	r4, r1
    ec12:	4606      	mov	r6, r0
    ec14:	2500      	movs	r5, #0
    ec16:	f7ff ff54 	bl	eac2 <sym_OSRJ6RZ5H7CZQTXBMMKQZOO5ASQEL77UBSHM2HA>
    ec1a:	4680      	mov	r8, r0
    ec1c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    ec20:	280d      	cmp	r0, #13
    ec22:	d017      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec24:	280e      	cmp	r0, #14
    ec26:	d015      	beq.n	ec54 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7a>
    ec28:	2000      	movs	r0, #0
    ec2a:	4683      	mov	fp, r0
    ec2c:	f1ba 0f00 	cmp.w	sl, #0
    ec30:	d003      	beq.n	ec3a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x60>
    ec32:	2101      	movs	r1, #1
    ec34:	4620      	mov	r0, r4
    ec36:	f7f6 fd49 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ec3a:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ec3e:	2701      	movs	r7, #1
    ec40:	b150      	cbz	r0, ec58 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7e>
    ec42:	2801      	cmp	r0, #1
    ec44:	d01a      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec46:	2802      	cmp	r0, #2
    ec48:	d012      	beq.n	ec70 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x96>
    ec4a:	2803      	cmp	r0, #3
    ec4c:	d016      	beq.n	ec7c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa2>
    ec4e:	f240 2136 	movw	r1, #566	; 0x236
    ec52:	e08e      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec54:	2001      	movs	r0, #1
    ec56:	e7e8      	b.n	ec2a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x50>
    ec58:	f1b9 0f00 	cmp.w	r9, #0
    ec5c:	d005      	beq.n	ec6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x90>
    ec5e:	f884 7248 	strb.w	r7, [r4, #584]	; 0x248
    ec62:	4620      	mov	r0, r4
    ec64:	f7ff ffbe 	bl	ebe4 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa>
    ec68:	e009      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec6a:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
    ec6e:	e080      	b.n	ed72 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x198>
    ec70:	2003      	movs	r0, #3
    ec72:	f8d4 5250 	ldr.w	r5, [r4, #592]	; 0x250
    ec76:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ec7a:	e000      	b.n	ec7e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xa4>
    ec7c:	6925      	ldr	r5, [r4, #16]
    ec7e:	e9d4 108a 	ldrd	r1, r0, [r4, #552]	; 0x228
    ec82:	f04f 0900 	mov.w	r9, #0
    ec86:	1949      	adds	r1, r1, r5
    ec88:	eb40 0009 	adc.w	r0, r0, r9
    ec8c:	e9c4 108a 	strd	r1, r0, [r4, #552]	; 0x228
    ec90:	e9c6 1004 	strd	r1, r0, [r6, #16]
    ec94:	f886 9000 	strb.w	r9, [r6]
    ec98:	f8a6 8008 	strh.w	r8, [r6, #8]
    ec9c:	f894 00a5 	ldrb.w	r0, [r4, #165]	; 0xa5
    eca0:	280d      	cmp	r0, #13
    eca2:	d02b      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca4:	280b      	cmp	r0, #11
    eca6:	d029      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    eca8:	2825      	cmp	r0, #37	; 0x25
    ecaa:	d027      	beq.n	ecfc <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x122>
    ecac:	2000      	movs	r0, #0
    ecae:	4680      	mov	r8, r0
    ecb0:	4620      	mov	r0, r4
    ecb2:	f7f6 fbd5 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecb6:	4601      	mov	r1, r0
    ecb8:	f1a8 0001 	sub.w	r0, r8, #1
    ecbc:	4201      	tst	r1, r0
    ecbe:	d102      	bne.n	ecc6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    ecc0:	f886 900a 	strb.w	r9, [r6, #10]
    ecc4:	e005      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ecc6:	f894 0248 	ldrb.w	r0, [r4, #584]	; 0x248
    ecca:	2801      	cmp	r0, #1
    eccc:	d018      	beq.n	ed00 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x126>
    ecce:	2002      	movs	r0, #2
    ecd0:	72b0      	strb	r0, [r6, #10]
    ecd2:	72f7      	strb	r7, [r6, #11]
    ecd4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ecd8:	f7ff faba 	bl	e250 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    ecdc:	6070      	str	r0, [r6, #4]
    ecde:	ea3a 000b 	bics.w	r0, sl, fp
    ece2:	d042      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ece4:	4629      	mov	r1, r5
    ece6:	4630      	mov	r0, r6
    ece8:	f7ff f814 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ecec:	b287      	uxth	r7, r0
    ecee:	4620      	mov	r0, r4
    ecf0:	f7f6 fbb6 	bl	5460 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    ecf4:	f1b8 0f00 	cmp.w	r8, #0
    ecf8:	d004      	beq.n	ed04 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12a>
    ecfa:	e018      	b.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ecfc:	2001      	movs	r0, #1
    ecfe:	e7d6      	b.n	ecae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xd4>
    ed00:	72b7      	strb	r7, [r6, #10]
    ed02:	e7e6      	b.n	ecd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xf8>
    ed04:	42b8      	cmp	r0, r7
    ed06:	d812      	bhi.n	ed2e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x154>
    ed08:	f886 900a 	strb.w	r9, [r6, #10]
    ed0c:	e9d4 328a 	ldrd	r3, r2, [r4, #552]	; 0x228
    ed10:	4607      	mov	r7, r0
    ed12:	fb05 f107 	mul.w	r1, r5, r7
    ed16:	1859      	adds	r1, r3, r1
    ed18:	eb42 0209 	adc.w	r2, r2, r9
    ed1c:	e9c6 1204 	strd	r1, r2, [r6, #16]
    ed20:	b32d      	cbz	r5, ed6e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x194>
    ed22:	4629      	mov	r1, r5
    ed24:	4630      	mov	r0, r6
    ed26:	f7fe fff5 	bl	dd14 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    ed2a:	4438      	add	r0, r7
    ed2c:	b287      	uxth	r7, r0
    ed2e:	4639      	mov	r1, r7
    ed30:	4620      	mov	r0, r4
    ed32:	f7f6 fccb 	bl	56cc <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    ed36:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    ed3a:	e9c4 018a 	strd	r0, r1, [r4, #552]	; 0x228
    ed3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    ed40:	2800      	cmp	r0, #0
    ed42:	d012      	beq.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed44:	f8b4 009c 	ldrh.w	r0, [r4, #156]	; 0x9c
    ed48:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
    ed4c:	1a80      	subs	r0, r0, r2
    ed4e:	b201      	sxth	r1, r0
    ed50:	2900      	cmp	r1, #0
    ed52:	dd0a      	ble.n	ed6a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x190>
    ed54:	f8b4 0074 	ldrh.w	r0, [r4, #116]	; 0x74
    ed58:	4401      	add	r1, r0
    ed5a:	1e49      	subs	r1, r1, #1
    ed5c:	fb91 f1f0 	sdiv	r1, r1, r0
    ed60:	b289      	uxth	r1, r1
    ed62:	fb01 2000 	mla	r0, r1, r0, r2
    ed66:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
    ed6a:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    ed6e:	f44f 711e 	mov.w	r1, #632	; 0x278
    ed72:	2035      	movs	r0, #53	; 0x35
    ed74:	f7f1 fe76 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed78:	b510      	push	{r4, lr}
    ed7a:	4604      	mov	r4, r0
    ed7c:	2000      	movs	r0, #0
    ed7e:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
    ed82:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    ed86:	f7fb fe9b 	bl	aac0 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    ed8a:	b140      	cbz	r0, ed9e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1c4>
    ed8c:	2020      	movs	r0, #32
    ed8e:	f884 0249 	strb.w	r0, [r4, #585]	; 0x249
    ed92:	f504 700a 	add.w	r0, r4, #552	; 0x228
    ed96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed9a:	f7f8 b843 	b.w	6e24 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    ed9e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    eda2:	2035      	movs	r0, #53	; 0x35
    eda4:	f7f1 fe5e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eda8:	b510      	push	{r4, lr}
    edaa:	4613      	mov	r3, r2
    edac:	460a      	mov	r2, r1
    edae:	b086      	sub	sp, #24
    edb0:	4604      	mov	r4, r0
    edb2:	4601      	mov	r1, r0
    edb4:	4668      	mov	r0, sp
    edb6:	f7ff ff27 	bl	ec08 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    edba:	f894 0249 	ldrb.w	r0, [r4, #585]	; 0x249
    edbe:	4669      	mov	r1, sp
    edc0:	f000 f809 	bl	edd6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1fc>
    edc4:	2800      	cmp	r0, #0
    edc6:	d104      	bne.n	edd2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x1f8>
    edc8:	f240 21a6 	movw	r1, #678	; 0x2a6
    edcc:	2035      	movs	r0, #53	; 0x35
    edce:	f7f1 fe49 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edd2:	b006      	add	sp, #24
    edd4:	bd10      	pop	{r4, pc}
    edd6:	f7fb ba1f 	b.w	a218 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    edda:	0000      	.short	0x0000
    eddc:	a1e0a62c 	.word	0xa1e0a62c
    ede0:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ede4:	f001 0307 	and.w	r3, r1, #7
    ede8:	7802      	ldrb	r2, [r0, #0]
    edea:	2101      	movs	r1, #1
    edec:	4099      	lsls	r1, r3
    edee:	438a      	bics	r2, r1
    edf0:	7002      	strb	r2, [r0, #0]
    edf2:	4770      	bx	lr

0000edf4 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    edf4:	f7f2 b990 	b.w	1118 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    edf8:	2000      	movs	r0, #0
    edfa:	4770      	bx	lr

0000edfc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    edfc:	b510      	push	{r4, lr}
    edfe:	f7f7 f977 	bl	60f0 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xa24>
    ee02:	b128      	cbz	r0, ee10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    ee04:	2000      	movs	r0, #0
    ee06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee0a:	4601      	mov	r1, r0
    ee0c:	f7f7 b918 	b.w	6040 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x974>
    ee10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ee14:	f7f2 bd86 	b.w	1924 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ee18:	f890 00a6 	ldrb.w	r0, [r0, #166]	; 0xa6
    ee1c:	28fe      	cmp	r0, #254	; 0xfe
    ee1e:	d001      	beq.n	ee24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    ee20:	2001      	movs	r0, #1
    ee22:	4770      	bx	lr
    ee24:	2000      	movs	r0, #0
    ee26:	4770      	bx	lr
    ee28:	b510      	push	{r4, lr}
    ee2a:	2801      	cmp	r0, #1
    ee2c:	d006      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee2e:	2802      	cmp	r0, #2
    ee30:	d004      	beq.n	ee3c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    ee32:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    ee36:	2006      	movs	r0, #6
    ee38:	f7f1 fe14 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee3c:	bd10      	pop	{r4, pc}
    ee3e:	2801      	cmp	r0, #1
    ee40:	d002      	beq.n	ee48 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    ee42:	2802      	cmp	r0, #2
    ee44:	d105      	bne.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee46:	e002      	b.n	ee4e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    ee48:	2901      	cmp	r1, #1
    ee4a:	d004      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee4c:	e001      	b.n	ee52 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    ee4e:	2902      	cmp	r1, #2
    ee50:	d001      	beq.n	ee56 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    ee52:	2000      	movs	r0, #0
    ee54:	4770      	bx	lr
    ee56:	2001      	movs	r0, #1
    ee58:	4770      	bx	lr
    ee5a:	e9d0 1232 	ldrd	r1, r2, [r0, #200]	; 0xc8
    ee5e:	428a      	cmp	r2, r1
    ee60:	d301      	bcc.n	ee66 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    ee62:	1a51      	subs	r1, r2, r1
    ee64:	e000      	b.n	ee68 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    ee66:	2100      	movs	r1, #0
    ee68:	8b02      	ldrh	r2, [r0, #24]
    ee6a:	1d52      	adds	r2, r2, #5
    ee6c:	428a      	cmp	r2, r1
    ee6e:	d302      	bcc.n	ee76 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    ee70:	2101      	movs	r1, #1
    ee72:	f880 10d4 	strb.w	r1, [r0, #212]	; 0xd4
    ee76:	4770      	bx	lr
    ee78:	b510      	push	{r4, lr}
    ee7a:	4604      	mov	r4, r0
    ee7c:	6840      	ldr	r0, [r0, #4]
    ee7e:	2300      	movs	r3, #0
    ee80:	4619      	mov	r1, r3
    ee82:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    ee86:	3088      	adds	r0, #136	; 0x88
    ee88:	f7fe fe38 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ee8c:	b168      	cbz	r0, eeaa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xae>
    ee8e:	6861      	ldr	r1, [r4, #4]
    ee90:	2000      	movs	r0, #0
    ee92:	f8a1 00e2 	strh.w	r0, [r1, #226]	; 0xe2
    ee96:	6861      	ldr	r1, [r4, #4]
    ee98:	2001      	movs	r0, #1
    ee9a:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    ee9e:	6861      	ldr	r1, [r4, #4]
    eea0:	2002      	movs	r0, #2
    eea2:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
    eea6:	2000      	movs	r0, #0
    eea8:	bd10      	pop	{r4, pc}
    eeaa:	2001      	movs	r0, #1
    eeac:	bd10      	pop	{r4, pc}
    eeae:	b510      	push	{r4, lr}
    eeb0:	4604      	mov	r4, r0
    eeb2:	6840      	ldr	r0, [r0, #4]
    eeb4:	2300      	movs	r3, #0
    eeb6:	2109      	movs	r1, #9
    eeb8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    eebc:	3088      	adds	r0, #136	; 0x88
    eebe:	f7fe fe1d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    eec2:	2800      	cmp	r0, #0
    eec4:	d009      	beq.n	eeda <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xde>
    eec6:	6861      	ldr	r1, [r4, #4]
    eec8:	2000      	movs	r0, #0
    eeca:	f881 00d4 	strb.w	r0, [r1, #212]	; 0xd4
    eece:	6861      	ldr	r1, [r4, #4]
    eed0:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    eed4:	6861      	ldr	r1, [r4, #4]
    eed6:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    eeda:	bd10      	pop	{r4, pc}
    eedc:	6841      	ldr	r1, [r0, #4]
    eede:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    eee2:	2a10      	cmp	r2, #16
    eee4:	d001      	beq.n	eeea <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xee>
    eee6:	2002      	movs	r0, #2
    eee8:	4770      	bx	lr
    eeea:	2200      	movs	r2, #0
    eeec:	f881 20aa 	strb.w	r2, [r1, #170]	; 0xaa
    eef0:	6840      	ldr	r0, [r0, #4]
    eef2:	2113      	movs	r1, #19
    eef4:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    eef8:	4610      	mov	r0, r2
    eefa:	4770      	bx	lr
    eefc:	b510      	push	{r4, lr}
    eefe:	4604      	mov	r4, r0
    ef00:	6840      	ldr	r0, [r0, #4]
    ef02:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    ef06:	2917      	cmp	r1, #23
    ef08:	d001      	beq.n	ef0e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x112>
    ef0a:	2002      	movs	r0, #2
    ef0c:	bd10      	pop	{r4, pc}
    ef0e:	f500 7388 	add.w	r3, r0, #272	; 0x110
    ef12:	f200 2193 	addw	r1, r0, #659	; 0x293
    ef16:	2200      	movs	r2, #0
    ef18:	f200 2083 	addw	r0, r0, #643	; 0x283
    ef1c:	f7fe fd89 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ef20:	6862      	ldr	r2, [r4, #4]
    ef22:	2000      	movs	r0, #0
    ef24:	e9c2 0040 	strd	r0, r0, [r2, #256]	; 0x100
    ef28:	6861      	ldr	r1, [r4, #4]
    ef2a:	2001      	movs	r0, #1
    ef2c:	f881 00aa 	strb.w	r0, [r1, #170]	; 0xaa
    ef30:	6861      	ldr	r1, [r4, #4]
    ef32:	2019      	movs	r0, #25
    ef34:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef38:	2000      	movs	r0, #0
    ef3a:	bd10      	pop	{r4, pc}
    ef3c:	b510      	push	{r4, lr}
    ef3e:	4604      	mov	r4, r0
    ef40:	6840      	ldr	r0, [r0, #4]
    ef42:	2300      	movs	r3, #0
    ef44:	4619      	mov	r1, r3
    ef46:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef4a:	3088      	adds	r0, #136	; 0x88
    ef4c:	f7fe fdd6 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef50:	b120      	cbz	r0, ef5c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x160>
    ef52:	6861      	ldr	r1, [r4, #4]
    ef54:	200b      	movs	r0, #11
    ef56:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef5a:	bd10      	pop	{r4, pc}
    ef5c:	f240 7156 	movw	r1, #1878	; 0x756
    ef60:	2036      	movs	r0, #54	; 0x36
    ef62:	f7f1 fd7f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef66:	b510      	push	{r4, lr}
    ef68:	4604      	mov	r4, r0
    ef6a:	6840      	ldr	r0, [r0, #4]
    ef6c:	2300      	movs	r3, #0
    ef6e:	4619      	mov	r1, r3
    ef70:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef74:	3088      	adds	r0, #136	; 0x88
    ef76:	f7fe fdc1 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ef7a:	b120      	cbz	r0, ef86 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x18a>
    ef7c:	6861      	ldr	r1, [r4, #4]
    ef7e:	200d      	movs	r0, #13
    ef80:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    ef84:	bd10      	pop	{r4, pc}
    ef86:	f240 715c 	movw	r1, #1884	; 0x75c
    ef8a:	2036      	movs	r0, #54	; 0x36
    ef8c:	f7f1 fd6a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ef90:	b510      	push	{r4, lr}
    ef92:	4604      	mov	r4, r0
    ef94:	6840      	ldr	r0, [r0, #4]
    ef96:	2300      	movs	r3, #0
    ef98:	4619      	mov	r1, r3
    ef9a:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    ef9e:	3088      	adds	r0, #136	; 0x88
    efa0:	f7fe fdac 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efa4:	b918      	cbnz	r0, efae <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1b2>
    efa6:	6860      	ldr	r0, [r4, #4]
    efa8:	f890 00e6 	ldrb.w	r0, [r0, #230]	; 0xe6
    efac:	b140      	cbz	r0, efc0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c4>
    efae:	6861      	ldr	r1, [r4, #4]
    efb0:	2001      	movs	r0, #1
    efb2:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    efb6:	6861      	ldr	r1, [r4, #4]
    efb8:	2014      	movs	r0, #20
    efba:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efbe:	bd10      	pop	{r4, pc}
    efc0:	f240 7171 	movw	r1, #1905	; 0x771
    efc4:	2036      	movs	r0, #54	; 0x36
    efc6:	f7f1 fd4d 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    efca:	f7ff bb03 	b.w	e5d4 <sym_OPCORHVHZVKAWEVWCDZOHGGLXMSL2TBGHVHNDOY>
    efce:	b510      	push	{r4, lr}
    efd0:	4604      	mov	r4, r0
    efd2:	6840      	ldr	r0, [r0, #4]
    efd4:	2300      	movs	r3, #0
    efd6:	4619      	mov	r1, r3
    efd8:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    efdc:	3088      	adds	r0, #136	; 0x88
    efde:	f7fe fd8d 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    efe2:	b120      	cbz	r0, efee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1f2>
    efe4:	6861      	ldr	r1, [r4, #4]
    efe6:	201d      	movs	r0, #29
    efe8:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    efec:	bd10      	pop	{r4, pc}
    efee:	f240 7192 	movw	r1, #1938	; 0x792
    eff2:	2036      	movs	r0, #54	; 0x36
    eff4:	f7f1 fd36 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eff8:	b510      	push	{r4, lr}
    effa:	4604      	mov	r4, r0
    effc:	6840      	ldr	r0, [r0, #4]
    effe:	2300      	movs	r3, #0
    f000:	4619      	mov	r1, r3
    f002:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f006:	3088      	adds	r0, #136	; 0x88
    f008:	f7fe fd78 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f00c:	b120      	cbz	r0, f018 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x21c>
    f00e:	6861      	ldr	r1, [r4, #4]
    f010:	2000      	movs	r0, #0
    f012:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f016:	bd10      	pop	{r4, pc}
    f018:	f240 7199 	movw	r1, #1945	; 0x799
    f01c:	2036      	movs	r0, #54	; 0x36
    f01e:	f7f1 fd21 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f022:	f7ff bae9 	b.w	e5f8 <sym_FW4JPGKXKHARAAJ7L3QR6HU5OB4PHXARNGBNCMY>
    f026:	b510      	push	{r4, lr}
    f028:	4604      	mov	r4, r0
    f02a:	6840      	ldr	r0, [r0, #4]
    f02c:	2300      	movs	r3, #0
    f02e:	4619      	mov	r1, r3
    f030:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f034:	3088      	adds	r0, #136	; 0x88
    f036:	f7fe fd61 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f03a:	b120      	cbz	r0, f046 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x24a>
    f03c:	6861      	ldr	r1, [r4, #4]
    f03e:	2005      	movs	r0, #5
    f040:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f044:	bd10      	pop	{r4, pc}
    f046:	f240 7185 	movw	r1, #1925	; 0x785
    f04a:	2036      	movs	r0, #54	; 0x36
    f04c:	f7f1 fd0a 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f050:	6840      	ldr	r0, [r0, #4]
    f052:	2100      	movs	r1, #0
    f054:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f058:	4770      	bx	lr
    f05a:	b510      	push	{r4, lr}
    f05c:	4604      	mov	r4, r0
    f05e:	6840      	ldr	r0, [r0, #4]
    f060:	2300      	movs	r3, #0
    f062:	4619      	mov	r1, r3
    f064:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f068:	3088      	adds	r0, #136	; 0x88
    f06a:	f7fe fd47 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f06e:	b140      	cbz	r0, f082 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x286>
    f070:	6861      	ldr	r1, [r4, #4]
    f072:	2001      	movs	r0, #1
    f074:	f881 00e5 	strb.w	r0, [r1, #229]	; 0xe5
    f078:	6861      	ldr	r1, [r4, #4]
    f07a:	2010      	movs	r0, #16
    f07c:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f080:	bd10      	pop	{r4, pc}
    f082:	f240 7162 	movw	r1, #1890	; 0x762
    f086:	2036      	movs	r0, #54	; 0x36
    f088:	f7f1 fcec 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f08c:	b510      	push	{r4, lr}
    f08e:	6841      	ldr	r1, [r0, #4]
    f090:	f891 20a5 	ldrb.w	r2, [r1, #165]	; 0xa5
    f094:	2a13      	cmp	r2, #19
    f096:	d004      	beq.n	f0a2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2a6>
    f098:	f240 716a 	movw	r1, #1898	; 0x76a
    f09c:	2036      	movs	r0, #54	; 0x36
    f09e:	f7f1 fce1 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0a2:	2201      	movs	r2, #1
    f0a4:	f881 20e6 	strb.w	r2, [r1, #230]	; 0xe6
    f0a8:	6840      	ldr	r0, [r0, #4]
    f0aa:	2112      	movs	r1, #18
    f0ac:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f0b0:	bd10      	pop	{r4, pc}
    f0b2:	b510      	push	{r4, lr}
    f0b4:	4604      	mov	r4, r0
    f0b6:	6840      	ldr	r0, [r0, #4]
    f0b8:	2300      	movs	r3, #0
    f0ba:	4619      	mov	r1, r3
    f0bc:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f0c0:	3088      	adds	r0, #136	; 0x88
    f0c2:	f7fe fd1b 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f0c6:	b120      	cbz	r0, f0d2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2d6>
    f0c8:	6861      	ldr	r1, [r4, #4]
    f0ca:	2020      	movs	r0, #32
    f0cc:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
    f0d0:	bd10      	pop	{r4, pc}
    f0d2:	f240 71a2 	movw	r1, #1954	; 0x7a2
    f0d6:	2036      	movs	r0, #54	; 0x36
    f0d8:	f7f1 fcc4 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f0dc:	b570      	push	{r4, r5, r6, lr}
    f0de:	6841      	ldr	r1, [r0, #4]
    f0e0:	4604      	mov	r4, r0
    f0e2:	f891 0262 	ldrb.w	r0, [r1, #610]	; 0x262
    f0e6:	b910      	cbnz	r0, f0ee <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f2>
    f0e8:	f891 0263 	ldrb.w	r0, [r1, #611]	; 0x263
    f0ec:	b178      	cbz	r0, f10e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x312>
    f0ee:	2000      	movs	r0, #0
    f0f0:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
    f0f4:	2225      	movs	r2, #37	; 0x25
    f0f6:	2500      	movs	r5, #0
    f0f8:	2b22      	cmp	r3, #34	; 0x22
    f0fa:	d00a      	beq.n	f112 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x316>
    f0fc:	f891 30a5 	ldrb.w	r3, [r1, #165]	; 0xa5
    f100:	2b24      	cmp	r3, #36	; 0x24
    f102:	d01b      	beq.n	f13c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x340>
    f104:	f240 71ce 	movw	r1, #1998	; 0x7ce
    f108:	2036      	movs	r0, #54	; 0x36
    f10a:	f7f1 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f10e:	2001      	movs	r0, #1
    f110:	e7ee      	b.n	f0f0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2f4>
    f112:	b168      	cbz	r0, f130 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x334>
    f114:	f881 50a6 	strb.w	r5, [r1, #166]	; 0xa6
    f118:	6860      	ldr	r0, [r4, #4]
    f11a:	f890 0144 	ldrb.w	r0, [r0, #324]	; 0x144
    f11e:	2801      	cmp	r0, #1
    f120:	d102      	bne.n	f128 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x32c>
    f122:	2000      	movs	r0, #0
    f124:	f7f7 f9a0 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f128:	6860      	ldr	r0, [r4, #4]
    f12a:	f880 5144 	strb.w	r5, [r0, #324]	; 0x144
    f12e:	e001      	b.n	f134 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x338>
    f130:	f881 20a6 	strb.w	r2, [r1, #166]	; 0xa6
    f134:	6860      	ldr	r0, [r4, #4]
    f136:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f13a:	bd70      	pop	{r4, r5, r6, pc}
    f13c:	b128      	cbz	r0, f14a <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x34e>
    f13e:	f881 50a5 	strb.w	r5, [r1, #165]	; 0xa5
    f142:	2000      	movs	r0, #0
    f144:	f7f7 f990 	bl	6468 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xd9c>
    f148:	e001      	b.n	f14e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x352>
    f14a:	f881 20a5 	strb.w	r2, [r1, #165]	; 0xa5
    f14e:	6860      	ldr	r0, [r4, #4]
    f150:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f154:	bd70      	pop	{r4, r5, r6, pc}
    f156:	6842      	ldr	r2, [r0, #4]
    f158:	2100      	movs	r1, #0
    f15a:	f892 3130 	ldrb.w	r3, [r2, #304]	; 0x130
    f15e:	b12b      	cbz	r3, f16c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x370>
    f160:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
    f164:	6840      	ldr	r0, [r0, #4]
    f166:	f880 10e0 	strb.w	r1, [r0, #224]	; 0xe0
    f16a:	4770      	bx	lr
    f16c:	f882 10a6 	strb.w	r1, [r2, #166]	; 0xa6
    f170:	6840      	ldr	r0, [r0, #4]
    f172:	f880 10e4 	strb.w	r1, [r0, #228]	; 0xe4
    f176:	4770      	bx	lr
    f178:	b510      	push	{r4, lr}
    f17a:	6840      	ldr	r0, [r0, #4]
    f17c:	f890 10a5 	ldrb.w	r1, [r0, #165]	; 0xa5
    f180:	2919      	cmp	r1, #25
    f182:	d004      	beq.n	f18e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x392>
    f184:	f240 717a 	movw	r1, #1914	; 0x77a
    f188:	2036      	movs	r0, #54	; 0x36
    f18a:	f7f1 fc6b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f18e:	211b      	movs	r1, #27
    f190:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
    f194:	bd10      	pop	{r4, pc}
    f196:	b510      	push	{r4, lr}
    f198:	4604      	mov	r4, r0
    f19a:	6840      	ldr	r0, [r0, #4]
    f19c:	2300      	movs	r3, #0
    f19e:	2101      	movs	r1, #1
    f1a0:	f890 20a7 	ldrb.w	r2, [r0, #167]	; 0xa7
    f1a4:	3088      	adds	r0, #136	; 0x88
    f1a6:	f7fe fca9 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d10a      	bne.n	f1c4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3c8>
    f1ae:	6861      	ldr	r1, [r4, #4]
    f1b0:	2007      	movs	r0, #7
    f1b2:	f881 00a7 	strb.w	r0, [r1, #167]	; 0xa7
    f1b6:	6861      	ldr	r1, [r4, #4]
    f1b8:	2000      	movs	r0, #0
    f1ba:	f881 00e0 	strb.w	r0, [r1, #224]	; 0xe0
    f1be:	6861      	ldr	r1, [r4, #4]
    f1c0:	f881 00e4 	strb.w	r0, [r1, #228]	; 0xe4
    f1c4:	bd10      	pop	{r4, pc}
    f1c6:	b570      	push	{r4, r5, r6, lr}
    f1c8:	4604      	mov	r4, r0
    f1ca:	6840      	ldr	r0, [r0, #4]
    f1cc:	2300      	movs	r3, #0
    f1ce:	4619      	mov	r1, r3
    f1d0:	f890 20a6 	ldrb.w	r2, [r0, #166]	; 0xa6
    f1d4:	3088      	adds	r0, #136	; 0x88
    f1d6:	f7fe fc91 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1da:	2500      	movs	r5, #0
    f1dc:	b110      	cbz	r0, f1e4 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x3e8>
    f1de:	6860      	ldr	r0, [r4, #4]
    f1e0:	f880 50e4 	strb.w	r5, [r0, #228]	; 0xe4
    f1e4:	6860      	ldr	r0, [r4, #4]
    f1e6:	2300      	movs	r3, #0
    f1e8:	4619      	mov	r1, r3
    f1ea:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f1ee:	3088      	adds	r0, #136	; 0x88
    f1f0:	f7fe fc84 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f1f4:	2800      	cmp	r0, #0
    f1f6:	d002      	beq.n	f1fe <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x402>
    f1f8:	6860      	ldr	r0, [r4, #4]
    f1fa:	f880 50e0 	strb.w	r5, [r0, #224]	; 0xe0
    f1fe:	bd70      	pop	{r4, r5, r6, pc}
    f200:	f7ff ba46 	b.w	e690 <sym_XIDO6C76MBHDNIEQMWYSJKF4P7A3PGI2HBO3R5Q>
    f204:	b510      	push	{r4, lr}
    f206:	f890 10ab 	ldrb.w	r1, [r0, #171]	; 0xab
    f20a:	b941      	cbnz	r1, f21e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x422>
    f20c:	f890 20a5 	ldrb.w	r2, [r0, #165]	; 0xa5
    f210:	2300      	movs	r3, #0
    f212:	2106      	movs	r1, #6
    f214:	3088      	adds	r0, #136	; 0x88
    f216:	f7fe fc71 	bl	dafc <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    f21a:	2800      	cmp	r0, #0
    f21c:	d000      	beq.n	f220 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x424>
    f21e:	2001      	movs	r0, #1
    f220:	bd10      	pop	{r4, pc}

0000f222 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    f222:	b510      	push	{r4, lr}
    f224:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
    f228:	1ac3      	subs	r3, r0, r3
    f22a:	eb61 0104 	sbc.w	r1, r1, r4
    f22e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
    f232:	17e0      	asrs	r0, r4, #31
    f234:	1ae4      	subs	r4, r4, r3
    f236:	4188      	sbcs	r0, r1
    f238:	da05      	bge.n	f246 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x24>
    f23a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    f23e:	1a18      	subs	r0, r3, r0
    f240:	f171 0000 	sbcs.w	r0, r1, #0
    f244:	db03      	blt.n	f24e <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x2c>
    f246:	21b0      	movs	r1, #176	; 0xb0
    f248:	2037      	movs	r0, #55	; 0x37
    f24a:	f7f1 fc0b 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f24e:	2900      	cmp	r1, #0
    f250:	da00      	bge.n	f254 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x32>
    f252:	425b      	negs	r3, r3
    f254:	fbb3 f0f2 	udiv	r0, r3, r2
    f258:	fb02 3010 	mls	r0, r2, r0, r3
    f25c:	2900      	cmp	r1, #0
    f25e:	da02      	bge.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f260:	2800      	cmp	r0, #0
    f262:	d000      	beq.n	f266 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x44>
    f264:	1a10      	subs	r0, r2, r0
    f266:	bd10      	pop	{r4, pc}
    f268:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f26c:	f001 0107 	and.w	r1, r1, #7
    f270:	7800      	ldrb	r0, [r0, #0]
    f272:	40c8      	lsrs	r0, r1
    f274:	f000 0001 	and.w	r0, r0, #1
    f278:	4770      	bx	lr

0000f27a <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ>:
    f27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f27e:	6856      	ldr	r6, [r2, #4]
    f280:	460c      	mov	r4, r1
    f282:	f506 759c 	add.w	r5, r6, #312	; 0x138
    f286:	f106 0788 	add.w	r7, r6, #136	; 0x88
    f28a:	2823      	cmp	r0, #35	; 0x23
    f28c:	d008      	beq.n	f2a0 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x26>
    f28e:	2824      	cmp	r0, #36	; 0x24
    f290:	d014      	beq.n	f2bc <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x42>
    f292:	2825      	cmp	r0, #37	; 0x25
    f294:	d02a      	beq.n	f2ec <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x72>
    f296:	f44f 718d 	mov.w	r1, #282	; 0x11a
    f29a:	2078      	movs	r0, #120	; 0x78
    f29c:	f7f1 fbe2 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f2a0:	7de8      	ldrb	r0, [r5, #23]
    f2a2:	f000 f8d6 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2a6:	7de9      	ldrb	r1, [r5, #23]
    f2a8:	7121      	strb	r1, [r4, #4]
    f2aa:	7e29      	ldrb	r1, [r5, #24]
    f2ac:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2b0:	7161      	strb	r1, [r4, #5]
    f2b2:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f2b6:	71a0      	strb	r0, [r4, #6]
    f2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f2bc:	7d28      	ldrb	r0, [r5, #20]
    f2be:	f000 f8c8 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2c2:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    f2c6:	7f78      	ldrb	r0, [r7, #29]
    f2c8:	3678      	adds	r6, #120	; 0x78
    f2ca:	2828      	cmp	r0, #40	; 0x28
    f2cc:	d00c      	beq.n	f2e8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x6e>
    f2ce:	68b8      	ldr	r0, [r7, #8]
    f2d0:	f7f3 fe7e 	bl	2fd0 <sym_DEQHYPJXYJ4WT7NTOYVXPSGPFEINKR4XQZSCDJY>
    f2d4:	7831      	ldrb	r1, [r6, #0]
    f2d6:	7121      	strb	r1, [r4, #4]
    f2d8:	7d69      	ldrb	r1, [r5, #21]
    f2da:	7161      	strb	r1, [r4, #5]
    f2dc:	7871      	ldrb	r1, [r6, #1]
    f2de:	71a1      	strb	r1, [r4, #6]
    f2e0:	71e0      	strb	r0, [r4, #7]
    f2e2:	2000      	movs	r0, #0
    f2e4:	75a8      	strb	r0, [r5, #22]
    f2e6:	e7e7      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>
    f2e8:	20ff      	movs	r0, #255	; 0xff
    f2ea:	e7f3      	b.n	f2d4 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x5a>
    f2ec:	7d28      	ldrb	r0, [r5, #20]
    f2ee:	f000 f8b0 	bl	f452 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x50>
    f2f2:	eb06 0040 	add.w	r0, r6, r0, lsl #1
    f2f6:	7d29      	ldrb	r1, [r5, #20]
    f2f8:	7121      	strb	r1, [r4, #4]
    f2fa:	f810 1f78 	ldrb.w	r1, [r0, #120]!
    f2fe:	7161      	strb	r1, [r4, #5]
    f300:	7d69      	ldrb	r1, [r5, #21]
    f302:	71a1      	strb	r1, [r4, #6]
    f304:	7840      	ldrb	r0, [r0, #1]
    f306:	71e0      	strb	r0, [r4, #7]
    f308:	e7d6      	b.n	f2b8 <sym_AZ6XAECCLUET3DKKERIWSDCXWVDVHFLFKGSXVGQ+0x3e>

0000f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>:
    f30a:	b510      	push	{r4, lr}
    f30c:	2801      	cmp	r0, #1
    f30e:	d006      	beq.n	f31e <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x14>
    f310:	2802      	cmp	r0, #2
    f312:	d006      	beq.n	f322 <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y+0x18>
    f314:	f240 2162 	movw	r1, #610	; 0x262
    f318:	2078      	movs	r0, #120	; 0x78
    f31a:	f7f1 fba3 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f31e:	2000      	movs	r0, #0
    f320:	bd10      	pop	{r4, pc}
    f322:	2001      	movs	r0, #1
    f324:	bd10      	pop	{r4, pc}

0000f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>:
    f326:	207f      	movs	r0, #127	; 0x7f
    f328:	f000 b8ad 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>:
    f32c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f330:	f000 b8a9 	b.w	f486 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x84>

0000f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>:
    f334:	b510      	push	{r4, lr}
    f336:	4604      	mov	r4, r0
    f338:	f7f8 fa6e 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f33c:	1e64      	subs	r4, r4, #1
    f33e:	b2e2      	uxtb	r2, r4
    f340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f344:	f000 b86b 	b.w	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>

0000f348 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I>:
    f348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f34c:	4607      	mov	r7, r0
    f34e:	461e      	mov	r6, r3
    f350:	4690      	mov	r8, r2
    f352:	460c      	mov	r4, r1
    f354:	4608      	mov	r0, r1
    f356:	f7ff ffed 	bl	f334 <sym_QIMK4SLEK3LSPZFVZAE765G6IOUSE5EWGSEHHUY>
    f35a:	b1f8      	cbz	r0, f39c <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x54>
    f35c:	687d      	ldr	r5, [r7, #4]
    f35e:	2121      	movs	r1, #33	; 0x21
    f360:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
    f364:	3588      	adds	r5, #136	; 0x88
    f366:	f7ff ff7f 	bl	f268 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    f36a:	b1c8      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f36c:	1e64      	subs	r4, r4, #1
    f36e:	f8d5 1072 	ldr.w	r1, [r5, #114]	; 0x72
    f372:	f8d5 006e 	ldr.w	r0, [r5, #110]	; 0x6e
    f376:	b2e2      	uxtb	r2, r4
    f378:	f000 f851 	bl	f41e <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1c>
    f37c:	b180      	cbz	r0, f3a0 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x58>
    f37e:	6878      	ldr	r0, [r7, #4]
    f380:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
    f384:	f88d 1000 	strb.w	r1, [sp]
    f388:	9900      	ldr	r1, [sp, #0]
    f38a:	9100      	str	r1, [sp, #0]
    f38c:	f89d 1000 	ldrb.w	r1, [sp]
    f390:	f200 104f 	addw	r0, r0, #335	; 0x14f
    f394:	b131      	cbz	r1, f3a4 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x5c>
    f396:	203a      	movs	r0, #58	; 0x3a
    f398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f39c:	2011      	movs	r0, #17
    f39e:	e7fb      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a0:	201a      	movs	r0, #26
    f3a2:	e7f9      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>
    f3a4:	1c81      	adds	r1, r0, #2
    f3a6:	700e      	strb	r6, [r1, #0]
    f3a8:	2101      	movs	r1, #1
    f3aa:	40a1      	lsls	r1, r4
    f3ac:	7001      	strb	r1, [r0, #0]
    f3ae:	f880 8001 	strb.w	r8, [r0, #1]
    f3b2:	2000      	movs	r0, #0
    f3b4:	e7f0      	b.n	f398 <sym_LDNWAOTSHYHHXS6GC3A5HYPBDRDBY4JBJAMZW7I+0x50>

0000f3b6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY>:
    f3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3ba:	460d      	mov	r5, r1
    f3bc:	4606      	mov	r6, r0
    f3be:	f7ff ffb2 	bl	f326 <sym_LC25II2QNYO4QUC4WQAQXNPSFLYYHVIDWHXRWAA>
    f3c2:	4607      	mov	r7, r0
    f3c4:	f7ff ffb2 	bl	f32c <sym_6E7DB5DGCJDCKNJAQTLQVPITL6JXBGRB3SQGSDY>
    f3c8:	2400      	movs	r4, #0
    f3ca:	4285      	cmp	r5, r0
    f3cc:	d100      	bne.n	f3d0 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x1a>
    f3ce:	2401      	movs	r4, #1
    f3d0:	42bd      	cmp	r5, r7
    f3d2:	d101      	bne.n	f3d8 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x22>
    f3d4:	f044 0402 	orr.w	r4, r4, #2
    f3d8:	f000 f834 	bl	f444 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x42>
    f3dc:	2200      	movs	r2, #0
    f3de:	4601      	mov	r1, r0
    f3e0:	2301      	movs	r3, #1
    f3e2:	fa03 f002 	lsl.w	r0, r3, r2
    f3e6:	4208      	tst	r0, r1
    f3e8:	d005      	beq.n	f3f6 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x40>
    f3ea:	eb06 0042 	add.w	r0, r6, r2, lsl #1
    f3ee:	f880 5079 	strb.w	r5, [r0, #121]	; 0x79
    f3f2:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
    f3f6:	1c52      	adds	r2, r2, #1
    f3f8:	b2d2      	uxtb	r2, r2
    f3fa:	2a02      	cmp	r2, #2
    f3fc:	d3f1      	bcc.n	f3e2 <sym_FHGZFWEAJHQUMCWG4E5CUD67QD7B6JGXN3SSXDY+0x2c>
    f3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f402 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY>:
    f402:	b510      	push	{r4, lr}
    f404:	4604      	mov	r4, r0
    f406:	4608      	mov	r0, r1
    f408:	f7ff ff7f 	bl	f30a <sym_C4WN3DS2SEB6CNTCY4ECLTD4ZD7ETWJRO5S2S2Y>
    f40c:	2802      	cmp	r0, #2
    f40e:	d205      	bcs.n	f41c <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x1a>
    f410:	eb04 0040 	add.w	r0, r4, r0, lsl #1
    f414:	f890 0079 	ldrb.w	r0, [r0, #121]	; 0x79
    f418:	f884 006e 	strb.w	r0, [r4, #110]	; 0x6e
    f41c:	bd10      	pop	{r4, pc}
    f41e:	b510      	push	{r4, lr}
    f420:	4614      	mov	r4, r2
    f422:	4602      	mov	r2, r0
    f424:	2000      	movs	r0, #0
    f426:	4603      	mov	r3, r0
    f428:	2c02      	cmp	r4, #2
    f42a:	d205      	bcs.n	f438 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x36>
    f42c:	4610      	mov	r0, r2
    f42e:	f000 f821 	bl	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f432:	2101      	movs	r1, #1
    f434:	40a1      	lsls	r1, r4
    f436:	b2cb      	uxtb	r3, r1
    f438:	4203      	tst	r3, r0
    f43a:	d001      	beq.n	f440 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x3e>
    f43c:	2001      	movs	r0, #1
    f43e:	bd10      	pop	{r4, pc}
    f440:	2000      	movs	r0, #0
    f442:	bd10      	pop	{r4, pc}
    f444:	b510      	push	{r4, lr}
    f446:	f7f8 f9e7 	bl	7818 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f44a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f44e:	f000 b811 	b.w	f474 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x72>
    f452:	4601      	mov	r1, r0
    f454:	b510      	push	{r4, lr}
    f456:	2000      	movs	r0, #0
    f458:	2301      	movs	r3, #1
    f45a:	fa03 f200 	lsl.w	r2, r3, r0
    f45e:	420a      	tst	r2, r1
    f460:	d107      	bne.n	f472 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x70>
    f462:	1c40      	adds	r0, r0, #1
    f464:	b2c0      	uxtb	r0, r0
    f466:	2802      	cmp	r0, #2
    f468:	d3f7      	bcc.n	f45a <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x58>
    f46a:	213c      	movs	r1, #60	; 0x3c
    f46c:	2078      	movs	r0, #120	; 0x78
    f46e:	f7f1 faf9 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f472:	bd10      	pop	{r4, pc}
    f474:	0a00      	lsrs	r0, r0, #8
    f476:	2201      	movs	r2, #1
    f478:	ea40 6001 	orr.w	r0, r0, r1, lsl #24
    f47c:	07c0      	lsls	r0, r0, #31
    f47e:	d000      	beq.n	f482 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x80>
    f480:	2203      	movs	r2, #3
    f482:	4610      	mov	r0, r2
    f484:	4770      	bx	lr
    f486:	b508      	push	{r3, lr}
    f488:	2301      	movs	r3, #1
    f48a:	f640 1288 	movw	r2, #2440	; 0x988
    f48e:	4669      	mov	r1, sp
    f490:	f7fd f922 	bl	c6d8 <mpsl_fem_tx_power_split>
    f494:	bd08      	pop	{r3, pc}
    f496:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f49a:	f001 0107 	and.w	r1, r1, #7
    f49e:	7800      	ldrb	r0, [r0, #0]
    f4a0:	40c8      	lsrs	r0, r1
    f4a2:	f000 0001 	and.w	r0, r0, #1
    f4a6:	4770      	bx	lr
    f4a8:	b118      	cbz	r0, f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4aa:	2802      	cmp	r0, #2
    f4ac:	d001      	beq.n	f4b2 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xb0>
    f4ae:	2001      	movs	r0, #1
    f4b0:	4770      	bx	lr
    f4b2:	2000      	movs	r0, #0
    f4b4:	4770      	bx	lr

0000f4b6 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    f4b6:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f4b8:	7881      	ldrb	r1, [r0, #2]
    f4ba:	2500      	movs	r5, #0
    f4bc:	4604      	mov	r4, r0
    f4be:	291a      	cmp	r1, #26
    f4c0:	d024      	beq.n	f50c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    f4c2:	dc0e      	bgt.n	f4e2 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2c>
    f4c4:	2916      	cmp	r1, #22
    f4c6:	d22b      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4c8:	e8df f001 	tbb	[pc, r1]
    f4cc:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d0:	2a2a202a 	.word	0x2a2a202a
    f4d4:	2a2a2a2a 	.word	0x2a2a2a2a
    f4d8:	2a2a2a2a 	.word	0x2a2a2a2a
    f4dc:	202a2a2a 	.word	0x202a2a2a
    f4e0:	2020      	.short	0x2020
    f4e2:	292a      	cmp	r1, #42	; 0x2a
    f4e4:	d01c      	beq.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4e6:	dc0b      	bgt.n	f500 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x4a>
    f4e8:	f1a1 011e 	sub.w	r1, r1, #30
    f4ec:	290c      	cmp	r1, #12
    f4ee:	d217      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f4f0:	e8df f001 	tbb	[pc, r1]
    f4f4:	16161616 	.word	0x16161616
    f4f8:	16161616 	.word	0x16161616
    f4fc:	0c161616 	.word	0x0c161616
    f500:	393a      	subs	r1, #58	; 0x3a
    f502:	2902      	cmp	r1, #2
    f504:	d20c      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f506:	e8df f001 	tbb	[pc, r1]
    f50a:	010b      	.short	0x010b
    f50c:	8820      	ldrh	r0, [r4, #0]
    f50e:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    f512:	d205      	bcs.n	f520 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6a>
    f514:	4669      	mov	r1, sp
    f516:	f7fe fac8 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f51a:	b118      	cbz	r0, f524 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6e>
    f51c:	2002      	movs	r0, #2
    f51e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f520:	2012      	movs	r0, #18
    f522:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f524:	9901      	ldr	r1, [sp, #4]
    f526:	f891 0138 	ldrb.w	r0, [r1, #312]	; 0x138
    f52a:	f88d 0008 	strb.w	r0, [sp, #8]
    f52e:	9802      	ldr	r0, [sp, #8]
    f530:	9002      	str	r0, [sp, #8]
    f532:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f536:	f501 719c 	add.w	r1, r1, #312	; 0x138
    f53a:	b108      	cbz	r0, f540 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x8a>
    f53c:	200c      	movs	r0, #12
    f53e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f540:	78a0      	ldrb	r0, [r4, #2]
    f542:	7048      	strb	r0, [r1, #1]
    f544:	20ff      	movs	r0, #255	; 0xff
    f546:	7008      	strb	r0, [r1, #0]
    f548:	4628      	mov	r0, r5
    f54a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f54c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    f54c:	b510      	push	{r4, lr}
    f54e:	4604      	mov	r4, r0
    f550:	f000 fdac 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f554:	b108      	cbz	r0, f55a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    f556:	200c      	movs	r0, #12
    f558:	bd10      	pop	{r4, pc}
    f55a:	7820      	ldrb	r0, [r4, #0]
    f55c:	b118      	cbz	r0, f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f55e:	2801      	cmp	r0, #1
    f560:	d001      	beq.n	f566 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    f562:	2012      	movs	r0, #18
    f564:	bd10      	pop	{r4, pc}
    f566:	f7ff ff9f 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f56a:	1c61      	adds	r1, r4, #1
    f56c:	f7f2 fec2 	bl	22f4 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    f570:	b108      	cbz	r0, f576 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    f572:	2000      	movs	r0, #0
    f574:	bd10      	pop	{r4, pc}
    f576:	2007      	movs	r0, #7
    f578:	bd10      	pop	{r4, pc}

0000f57a <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    f57a:	b510      	push	{r4, lr}
    f57c:	f000 fd96 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f580:	b108      	cbz	r0, f586 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    f582:	200c      	movs	r0, #12
    f584:	bd10      	pop	{r4, pc}
    f586:	f7f2 fedd 	bl	2344 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    f58a:	2000      	movs	r0, #0
    f58c:	bd10      	pop	{r4, pc}

0000f58e <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    f58e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f592:	4605      	mov	r5, r0
    f594:	f000 fb2f 	bl	fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    f598:	2800      	cmp	r0, #0
    f59a:	d112      	bne.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f59c:	8828      	ldrh	r0, [r5, #0]
    f59e:	2100      	movs	r1, #0
    f5a0:	f7fe f8ea 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f5a4:	0004      	movs	r4, r0
    f5a6:	d00e      	beq.n	f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5a8:	f000 fd40 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f5ac:	b158      	cbz	r0, f5c6 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    f5ae:	f894 0264 	ldrb.w	r0, [r4, #612]	; 0x264
    f5b2:	f88d 0000 	strb.w	r0, [sp]
    f5b6:	9800      	ldr	r0, [sp, #0]
    f5b8:	9000      	str	r0, [sp, #0]
    f5ba:	f89d 0000 	ldrb.w	r0, [sp]
    f5be:	b120      	cbz	r0, f5ca <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x3c>
    f5c0:	203a      	movs	r0, #58	; 0x3a
    f5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f5c6:	2002      	movs	r0, #2
    f5c8:	e7fb      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5ca:	f04f 0800 	mov.w	r8, #0
    f5ce:	88a8      	ldrh	r0, [r5, #4]
    f5d0:	f7fe fa77 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f5d4:	4607      	mov	r7, r0
    f5d6:	4601      	mov	r1, r0
    f5d8:	2005      	movs	r0, #5
    f5da:	f7fe fbf4 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5de:	4606      	mov	r6, r0
    f5e0:	4639      	mov	r1, r7
    f5e2:	2008      	movs	r0, #8
    f5e4:	f7fe fbef 	bl	ddc6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    f5e8:	42b0      	cmp	r0, r6
    f5ea:	d301      	bcc.n	f5f0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x62>
    f5ec:	42be      	cmp	r6, r7
    f5ee:	d301      	bcc.n	f5f4 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x66>
    f5f0:	2012      	movs	r0, #18
    f5f2:	e7e6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    f5f4:	f8a4 6268 	strh.w	r6, [r4, #616]	; 0x268
    f5f8:	e9c4 879b 	strd	r8, r7, [r4, #620]	; 0x26c
    f5fc:	88e8      	ldrh	r0, [r5, #6]
    f5fe:	f8a4 0274 	strh.w	r0, [r4, #628]	; 0x274
    f602:	8928      	ldrh	r0, [r5, #8]
    f604:	f8a4 0276 	strh.w	r0, [r4, #630]	; 0x276
    f608:	f504 7419 	add.w	r4, r4, #612	; 0x264
    f60c:	20ff      	movs	r0, #255	; 0xff
    f60e:	7020      	strb	r0, [r4, #0]
    f610:	2000      	movs	r0, #0
    f612:	e7d6      	b.n	f5c2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>

0000f614 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    f614:	b508      	push	{r3, lr}
    f616:	f7f5 f94b 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f61a:	2805      	cmp	r0, #5
    f61c:	d001      	beq.n	f622 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xe>
    f61e:	200c      	movs	r0, #12
    f620:	bd08      	pop	{r3, pc}
    f622:	4668      	mov	r0, sp
    f624:	f7f5 f8ca 	bl	47bc <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    f628:	2800      	cmp	r0, #0
    f62a:	d1f9      	bne.n	f620 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0xc>
    f62c:	f7f3 fe90 	bl	3350 <sym_MSYMIWR3PI6HXHUAZX2P7HGFCTCK3HSW5N3BC2A>
    f630:	2000      	movs	r0, #0
    f632:	bd08      	pop	{r3, pc}

0000f634 <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    f634:	b510      	push	{r4, lr}
    f636:	460b      	mov	r3, r1
    f638:	2201      	movs	r2, #1
    f63a:	f100 0110 	add.w	r1, r0, #16
    f63e:	f7fe f9f8 	bl	da32 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    f642:	2000      	movs	r0, #0
    f644:	bd10      	pop	{r4, pc}

0000f646 <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    f646:	b510      	push	{r4, lr}
    f648:	2108      	movs	r1, #8
    f64a:	f7f1 faab 	bl	ba4 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f64e:	2000      	movs	r0, #0
    f650:	bd10      	pop	{r4, pc}

0000f652 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    f652:	21fb      	movs	r1, #251	; 0xfb
    f654:	8001      	strh	r1, [r0, #0]
    f656:	f640 0248 	movw	r2, #2120	; 0x848
    f65a:	8042      	strh	r2, [r0, #2]
    f65c:	8081      	strh	r1, [r0, #4]
    f65e:	80c2      	strh	r2, [r0, #6]
    f660:	2000      	movs	r0, #0
    f662:	4770      	bx	lr

0000f664 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    f664:	b51c      	push	{r2, r3, r4, lr}
    f666:	8800      	ldrh	r0, [r0, #0]
    f668:	4669      	mov	r1, sp
    f66a:	f7fe fa1e 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f66e:	2800      	cmp	r0, #0
    f670:	d10c      	bne.n	f68c <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x28>
    f672:	9c01      	ldr	r4, [sp, #4]
    f674:	f89d 0000 	ldrb.w	r0, [sp]
    f678:	f504 749c 	add.w	r4, r4, #312	; 0x138
    f67c:	b918      	cbnz	r0, f686 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x22>
    f67e:	9801      	ldr	r0, [sp, #4]
    f680:	f000 fcd4 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f684:	b118      	cbz	r0, f68e <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2a>
    f686:	7ce0      	ldrb	r0, [r4, #19]
    f688:	b118      	cbz	r0, f692 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x2e>
    f68a:	203a      	movs	r0, #58	; 0x3a
    f68c:	bd1c      	pop	{r2, r3, r4, pc}
    f68e:	2002      	movs	r0, #2
    f690:	bd1c      	pop	{r2, r3, r4, pc}
    f692:	2001      	movs	r0, #1
    f694:	74e0      	strb	r0, [r4, #19]
    f696:	2000      	movs	r0, #0
    f698:	bd1c      	pop	{r2, r3, r4, pc}

0000f69a <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    f69a:	b510      	push	{r4, lr}
    f69c:	4604      	mov	r4, r0
    f69e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    f6a2:	f000 fce4 	bl	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
    f6a6:	f7f2 ffdf 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6aa:	7020      	strb	r0, [r4, #0]
    f6ac:	f000 fcbb 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    f6b0:	f7f2 ffda 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    f6b4:	7060      	strb	r0, [r4, #1]
    f6b6:	2000      	movs	r0, #0
    f6b8:	bd10      	pop	{r4, pc}

0000f6ba <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    f6ba:	2108      	movs	r1, #8
    f6bc:	7001      	strb	r1, [r0, #0]
    f6be:	2000      	movs	r0, #0
    f6c0:	4770      	bx	lr

0000f6c2 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    f6c2:	b510      	push	{r4, lr}
    f6c4:	4604      	mov	r4, r0
    f6c6:	f000 fcf1 	bl	100ac <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x470>
    f6ca:	b108      	cbz	r0, f6d0 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    f6cc:	200c      	movs	r0, #12
    f6ce:	bd10      	pop	{r4, pc}
    f6d0:	7820      	ldrb	r0, [r4, #0]
    f6d2:	b108      	cbz	r0, f6d8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    f6d4:	2801      	cmp	r0, #1
    f6d6:	d107      	bne.n	f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6d8:	f7ff fee6 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f6dc:	1c61      	adds	r1, r4, #1
    f6de:	f7fe f99d 	bl	da1c <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    f6e2:	b108      	cbz	r0, f6e8 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    f6e4:	2000      	movs	r0, #0
    f6e6:	bd10      	pop	{r4, pc}
    f6e8:	2012      	movs	r0, #18
    f6ea:	bd10      	pop	{r4, pc}

0000f6ec <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    f6ec:	b50e      	push	{r1, r2, r3, lr}
    f6ee:	8882      	ldrh	r2, [r0, #4]
    f6f0:	f244 2390 	movw	r3, #17040	; 0x4290
    f6f4:	429a      	cmp	r2, r3
    f6f6:	d901      	bls.n	f6fc <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x10>
    f6f8:	2012      	movs	r0, #18
    f6fa:	bd0e      	pop	{r1, r2, r3, pc}
    f6fc:	f640 0348 	movw	r3, #2120	; 0x848
    f700:	429a      	cmp	r2, r3
    f702:	d300      	bcc.n	f706 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    f704:	461a      	mov	r2, r3
    f706:	8803      	ldrh	r3, [r0, #0]
    f708:	f8ad 3000 	strh.w	r3, [sp]
    f70c:	8843      	ldrh	r3, [r0, #2]
    f70e:	f8ad 3002 	strh.w	r3, [sp, #2]
    f712:	f8ad 2004 	strh.w	r2, [sp, #4]
    f716:	8843      	ldrh	r3, [r0, #2]
    f718:	f8ad 3006 	strh.w	r3, [sp, #6]
    f71c:	f8ad 2008 	strh.w	r2, [sp, #8]
    f720:	8800      	ldrh	r0, [r0, #0]
    f722:	8008      	strh	r0, [r1, #0]
    f724:	4668      	mov	r0, sp
    f726:	f7f7 ff57 	bl	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>
    f72a:	bd0e      	pop	{r1, r2, r3, pc}

0000f72c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f72c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f72e:	4604      	mov	r4, r0
    f730:	f10d 0007 	add.w	r0, sp, #7
    f734:	9000      	str	r0, [sp, #0]
    f736:	7922      	ldrb	r2, [r4, #4]
    f738:	78e1      	ldrb	r1, [r4, #3]
    f73a:	78a0      	ldrb	r0, [r4, #2]
    f73c:	f10d 0306 	add.w	r3, sp, #6
    f740:	f000 fc9d 	bl	1007e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x442>
    f744:	2800      	cmp	r0, #0
    f746:	d109      	bne.n	f75c <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x30>
    f748:	8820      	ldrh	r0, [r4, #0]
    f74a:	f8ad 0004 	strh.w	r0, [sp, #4]
    f74e:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f752:	f8ad 0008 	strh.w	r0, [sp, #8]
    f756:	a801      	add	r0, sp, #4
    f758:	f000 f970 	bl	fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f75c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f75e <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f75e:	b510      	push	{r4, lr}
    f760:	4604      	mov	r4, r0
    f762:	2001      	movs	r0, #1
    f764:	f000 fa97 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    f768:	b128      	cbz	r0, f776 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f76a:	4621      	mov	r1, r4
    f76c:	2001      	movs	r0, #1
    f76e:	f7f1 ff71 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f772:	2000      	movs	r0, #0
    f774:	bd10      	pop	{r4, pc}
    f776:	200c      	movs	r0, #12
    f778:	bd10      	pop	{r4, pc}

0000f77a <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f77a:	b51c      	push	{r2, r3, r4, lr}
    f77c:	7801      	ldrb	r1, [r0, #0]
    f77e:	f88d 1000 	strb.w	r1, [sp]
    f782:	7840      	ldrb	r0, [r0, #1]
    f784:	f88d 0001 	strb.w	r0, [sp, #1]
    f788:	2000      	movs	r0, #0
    f78a:	f8ad 0002 	strh.w	r0, [sp, #2]
    f78e:	f8ad 0004 	strh.w	r0, [sp, #4]
    f792:	4601      	mov	r1, r0
    f794:	4668      	mov	r0, sp
    f796:	f000 face 	bl	fd36 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xfa>
    f79a:	2800      	cmp	r0, #0
    f79c:	d102      	bne.n	f7a4 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f79e:	4668      	mov	r0, sp
    f7a0:	f000 faa8 	bl	fcf4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb8>
    f7a4:	bd1c      	pop	{r2, r3, r4, pc}

0000f7a6 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f7a6:	b500      	push	{lr}
    f7a8:	b087      	sub	sp, #28
    f7aa:	7941      	ldrb	r1, [r0, #5]
    f7ac:	f88d 1000 	strb.w	r1, [sp]
    f7b0:	7981      	ldrb	r1, [r0, #6]
    f7b2:	f88d 1001 	strb.w	r1, [sp, #1]
    f7b6:	2101      	movs	r1, #1
    f7b8:	f88d 1002 	strb.w	r1, [sp, #2]
    f7bc:	7801      	ldrb	r1, [r0, #0]
    f7be:	f88d 1003 	strb.w	r1, [sp, #3]
    f7c2:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f7c6:	f240 2271 	movw	r2, #625	; 0x271
    f7ca:	4351      	muls	r1, r2
    f7cc:	9102      	str	r1, [sp, #8]
    f7ce:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f7d2:	4350      	muls	r0, r2
    f7d4:	9004      	str	r0, [sp, #16]
    f7d6:	2007      	movs	r0, #7
    f7d8:	f88d 0018 	strb.w	r0, [sp, #24]
    f7dc:	2000      	movs	r0, #0
    f7de:	f88d 0019 	strb.w	r0, [sp, #25]
    f7e2:	9804      	ldr	r0, [sp, #16]
    f7e4:	f7f7 fdfe 	bl	73e4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x168>
    f7e8:	b140      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7ea:	9802      	ldr	r0, [sp, #8]
    f7ec:	f7f7 fdee 	bl	73cc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x150>
    f7f0:	b120      	cbz	r0, f7fc <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f7f2:	4668      	mov	r0, sp
    f7f4:	f7f7 fcc4 	bl	7180 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f7f8:	b007      	add	sp, #28
    f7fa:	bd00      	pop	{pc}
    f7fc:	2030      	movs	r0, #48	; 0x30
    f7fe:	e7fb      	b.n	f7f8 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f800 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f800:	b570      	push	{r4, r5, r6, lr}
    f802:	4605      	mov	r5, r0
    f804:	8800      	ldrh	r0, [r0, #0]
    f806:	2100      	movs	r1, #0
    f808:	f7fd ffb6 	bl	d778 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f80c:	0004      	movs	r4, r0
    f80e:	d007      	beq.n	f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f810:	f000 fc0c 	bl	1002c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3f0>
    f814:	b120      	cbz	r0, f820 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f816:	f894 0278 	ldrb.w	r0, [r4, #632]	; 0x278
    f81a:	b118      	cbz	r0, f824 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f81c:	203a      	movs	r0, #58	; 0x3a
    f81e:	bd70      	pop	{r4, r5, r6, pc}
    f820:	2002      	movs	r0, #2
    f822:	bd70      	pop	{r4, r5, r6, pc}
    f824:	2100      	movs	r1, #0
    f826:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    f82a:	f7ff fe34 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    f82e:	2801      	cmp	r0, #1
    f830:	d001      	beq.n	f836 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f832:	201a      	movs	r0, #26
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	f8d5 0002 	ldr.w	r0, [r5, #2]
    f83a:	f8c4 0279 	str.w	r0, [r4, #633]	; 0x279
    f83e:	f8d5 0006 	ldr.w	r0, [r5, #6]
    f842:	f8c4 027d 	str.w	r0, [r4, #637]	; 0x27d
    f846:	8968      	ldrh	r0, [r5, #10]
    f848:	f8a4 0281 	strh.w	r0, [r4, #641]	; 0x281
    f84c:	2210      	movs	r2, #16
    f84e:	f105 010c 	add.w	r1, r5, #12
    f852:	f204 2083 	addw	r0, r4, #643	; 0x283
    f856:	f000 ff0a 	bl	1066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f85a:	2001      	movs	r0, #1
    f85c:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
    f860:	2000      	movs	r0, #0
    f862:	bd70      	pop	{r4, r5, r6, pc}

0000f864 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f864:	b51c      	push	{r2, r3, r4, lr}
    f866:	8801      	ldrh	r1, [r0, #0]
    f868:	f8ad 1000 	strh.w	r1, [sp]
    f86c:	8841      	ldrh	r1, [r0, #2]
    f86e:	f8ad 1002 	strh.w	r1, [sp, #2]
    f872:	8801      	ldrh	r1, [r0, #0]
    f874:	f8ad 1004 	strh.w	r1, [sp, #4]
    f878:	8840      	ldrh	r0, [r0, #2]
    f87a:	f8ad 0006 	strh.w	r0, [sp, #6]
    f87e:	4668      	mov	r0, sp
    f880:	f7f7 ff2e 	bl	76e0 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x464>
    f884:	bd1c      	pop	{r2, r3, r4, pc}

0000f886 <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f886:	b510      	push	{r4, lr}
    f888:	f7f1 ff08 	bl	169c <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f88c:	2000      	movs	r0, #0
    f88e:	bd10      	pop	{r4, pc}

0000f890 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    f890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    f894:	4604      	mov	r4, r0
    f896:	7a40      	ldrb	r0, [r0, #9]
    f898:	0781      	lsls	r1, r0, #30
    f89a:	d502      	bpl.n	f8a2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x12>
    f89c:	f040 0001 	orr.w	r0, r0, #1
    f8a0:	7260      	strb	r0, [r4, #9]
    f8a2:	4620      	mov	r0, r4
    f8a4:	f000 fa67 	bl	fd76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13a>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	d103      	bne.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ac:	f000 fbd4 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    f8b0:	b118      	cbz	r0, f8ba <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a>
    f8b2:	200c      	movs	r0, #12
    f8b4:	b004      	add	sp, #16
    f8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f8ba:	f7f3 fcd7 	bl	326c <sym_TNTVRUTCX6QDICT5SCWQINK5TBPSWJENFWCYQCI>
    f8be:	b910      	cbnz	r0, f8c6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x36>
    f8c0:	f7f3 fe50 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    f8c4:	b108      	cbz	r0, f8ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3a>
    f8c6:	203a      	movs	r0, #58	; 0x3a
    f8c8:	e7f4      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8ca:	2103      	movs	r1, #3
    f8cc:	f104 0018 	add.w	r0, r4, #24
    f8d0:	f7f7 fd94 	bl	73fc <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x180>
    f8d4:	2100      	movs	r1, #0
    f8d6:	4668      	mov	r0, sp
    f8d8:	f7f1 fb02 	bl	ee0 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    f8dc:	0006      	movs	r6, r0
    f8de:	d008      	beq.n	f8f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x62>
    f8e0:	2301      	movs	r3, #1
    f8e2:	4622      	mov	r2, r4
    f8e4:	f8bd 1000 	ldrh.w	r1, [sp]
    f8e8:	f7f7 fd9c 	bl	7424 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x1a8>
    f8ec:	0005      	movs	r5, r0
    f8ee:	d002      	beq.n	f8f6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    f8f0:	e06c      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f8f2:	2009      	movs	r0, #9
    f8f4:	e7de      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>
    f8f6:	7860      	ldrb	r0, [r4, #1]
    f8f8:	f7f3 fd96 	bl	3428 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    f8fc:	78a1      	ldrb	r1, [r4, #2]
    f8fe:	7820      	ldrb	r0, [r4, #0]
    f900:	1ce2      	adds	r2, r4, #3
    f902:	f7f3 fd01 	bl	3308 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    f906:	b148      	cbz	r0, f91c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8c>
    f908:	f7f3 fc5c 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f90c:	78a1      	ldrb	r1, [r4, #2]
    f90e:	7820      	ldrb	r0, [r4, #0]
    f910:	1ce2      	adds	r2, r4, #3
    f912:	f7f3 fd37 	bl	3384 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    f916:	0005      	movs	r5, r0
    f918:	d002      	beq.n	f920 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x90>
    f91a:	e057      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f91c:	2512      	movs	r5, #18
    f91e:	e055      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f920:	4631      	mov	r1, r6
    f922:	2003      	movs	r0, #3
    f924:	f7f3 fc96 	bl	3254 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    f928:	4605      	mov	r5, r0
    f92a:	78a0      	ldrb	r0, [r4, #2]
    f92c:	f7ff fdbc 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f930:	1ce1      	adds	r1, r4, #3
    f932:	f7f3 fd51 	bl	33d8 <sym_IRV7IF6I52F3HYHZNFCDRHHNP7EOMECHNPGJUGI>
    f936:	bb1d      	cbnz	r5, f980 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf0>
    f938:	7820      	ldrb	r0, [r4, #0]
    f93a:	f04f 0800 	mov.w	r8, #0
    f93e:	2701      	movs	r7, #1
    f940:	bb20      	cbnz	r0, f98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xfc>
    f942:	f894 a002 	ldrb.w	sl, [r4, #2]
    f946:	f104 0903 	add.w	r9, r4, #3
    f94a:	f8cd 8004 	str.w	r8, [sp, #4]
    f94e:	f8cd 8008 	str.w	r8, [sp, #8]
    f952:	e016      	b.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f954:	9d01      	ldr	r5, [sp, #4]
    f956:	42ae      	cmp	r6, r5
    f958:	d013      	beq.n	f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f95a:	4650      	mov	r0, sl
    f95c:	f7ff fda4 	bl	f4a8 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0xa6>
    f960:	78aa      	ldrb	r2, [r5, #2]
    f962:	1ceb      	adds	r3, r5, #3
    f964:	4649      	mov	r1, r9
    f966:	f7fd ff92 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f96a:	b150      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f96c:	7a6a      	ldrb	r2, [r5, #9]
    f96e:	7a70      	ldrb	r0, [r6, #9]
    f970:	f105 030a 	add.w	r3, r5, #10
    f974:	f106 010a 	add.w	r1, r6, #10
    f978:	f7fd ff89 	bl	d88e <sym_4ZZLWI6QQY4KJYYVP4RVDTJJJ6MW72AL2TJDVOI>
    f97c:	b108      	cbz	r0, f982 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf2>
    f97e:	250b      	movs	r5, #11
    f980:	e024      	b.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f982:	a801      	add	r0, sp, #4
    f984:	f7f1 fa8c 	bl	ea0 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f988:	2800      	cmp	r0, #0
    f98a:	d0e3      	beq.n	f954 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xc4>
    f98c:	4638      	mov	r0, r7
    f98e:	f7f3 fc7d 	bl	328c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    f992:	0005      	movs	r5, r0
    f994:	d11a      	bne.n	f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f996:	f88d 8004 	strb.w	r8, [sp, #4]
    f99a:	7a60      	ldrb	r0, [r4, #9]
    f99c:	07c0      	lsls	r0, r0, #31
    f99e:	d005      	beq.n	f9ac <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x11c>
    f9a0:	68e0      	ldr	r0, [r4, #12]
    f9a2:	9002      	str	r0, [sp, #8]
    f9a4:	69a0      	ldr	r0, [r4, #24]
    f9a6:	9003      	str	r0, [sp, #12]
    f9a8:	f88d 7004 	strb.w	r7, [sp, #4]
    f9ac:	a801      	add	r0, sp, #4
    f9ae:	f7f4 ffd1 	bl	4954 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    f9b2:	4605      	mov	r5, r0
    f9b4:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f9b8:	f7f3 fdaa 	bl	3510 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    f9bc:	b935      	cbnz	r5, f9cc <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x13c>
    f9be:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
    f9c2:	4630      	mov	r0, r6
    f9c4:	f7f4 feb8 	bl	4738 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    f9c8:	0005      	movs	r5, r0
    f9ca:	d00c      	beq.n	f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9cc:	8830      	ldrh	r0, [r6, #0]
    f9ce:	f7fd ff5a 	bl	d886 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    f9d2:	8830      	ldrh	r0, [r6, #0]
    f9d4:	2100      	movs	r1, #0
    f9d6:	f7f1 faa9 	bl	f2c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    f9da:	b120      	cbz	r0, f9e6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x156>
    f9dc:	f241 1139 	movw	r1, #4409	; 0x1139
    f9e0:	2039      	movs	r0, #57	; 0x39
    f9e2:	f7f1 f83f 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e6:	4628      	mov	r0, r5
    f9e8:	e764      	b.n	f8b4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x24>

0000f9ea <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f9ea:	b51c      	push	{r2, r3, r4, lr}
    f9ec:	460c      	mov	r4, r1
    f9ee:	4669      	mov	r1, sp
    f9f0:	f7fe f85b 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f9f4:	2800      	cmp	r0, #0
    f9f6:	d105      	bne.n	fa04 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x1a>
    f9f8:	2101      	movs	r1, #1
    f9fa:	4622      	mov	r2, r4
    f9fc:	9801      	ldr	r0, [sp, #4]
    f9fe:	f000 fabc 	bl	ff7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33e>
    fa02:	2000      	movs	r0, #0
    fa04:	bd1c      	pop	{r2, r3, r4, pc}

0000fa06 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    fa06:	b510      	push	{r4, lr}
    fa08:	4604      	mov	r4, r0
    fa0a:	f7f7 fe9f 	bl	774c <sym_HG37ZAHWDO2P65KBJXRLV5PVSG5TCUWPMKZOZLQ>
    fa0e:	b118      	cbz	r0, fa18 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x12>
    fa10:	2000      	movs	r0, #0
    fa12:	f000 f940 	bl	fc96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x5a>
    fa16:	b128      	cbz	r0, fa24 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x1e>
    fa18:	4621      	mov	r1, r4
    fa1a:	2000      	movs	r0, #0
    fa1c:	f7f1 fe1a 	bl	1654 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    fa20:	2000      	movs	r0, #0
    fa22:	bd10      	pop	{r4, pc}
    fa24:	200c      	movs	r0, #12
    fa26:	bd10      	pop	{r4, pc}

0000fa28 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    fa28:	b510      	push	{r4, lr}
    fa2a:	7800      	ldrb	r0, [r0, #0]
    fa2c:	b100      	cbz	r0, fa30 <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ+0x8>
    fa2e:	2001      	movs	r0, #1
    fa30:	f7f5 fc16 	bl	5260 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    fa34:	2000      	movs	r0, #0
    fa36:	bd10      	pop	{r4, pc}

0000fa38 <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    fa38:	f7f7 bdce 	b.w	75d8 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x35c>

0000fa3c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    fa3c:	b510      	push	{r4, lr}
    fa3e:	4604      	mov	r4, r0
    fa40:	8880      	ldrh	r0, [r0, #4]
    fa42:	b128      	cbz	r0, fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa44:	2801      	cmp	r0, #1
    fa46:	d003      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa48:	2802      	cmp	r0, #2
    fa4a:	d001      	beq.n	fa50 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    fa4c:	2012      	movs	r0, #18
    fa4e:	bd10      	pop	{r4, pc}
    fa50:	78e0      	ldrb	r0, [r4, #3]
    fa52:	f000 f92c 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa56:	b148      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa58:	78a0      	ldrb	r0, [r4, #2]
    fa5a:	f000 f928 	bl	fcae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x72>
    fa5e:	b128      	cbz	r0, fa6c <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    fa60:	4620      	mov	r0, r4
    fa62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa66:	2101      	movs	r1, #1
    fa68:	f000 b862 	b.w	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    fa6c:	2011      	movs	r0, #17
    fa6e:	bd10      	pop	{r4, pc}

0000fa70 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    fa70:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    fa72:	460c      	mov	r4, r1
    fa74:	4605      	mov	r5, r0
    fa76:	8800      	ldrh	r0, [r0, #0]
    fa78:	4669      	mov	r1, sp
    fa7a:	f7fe f816 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fa7e:	2800      	cmp	r0, #0
    fa80:	d106      	bne.n	fa90 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    fa82:	9801      	ldr	r0, [sp, #4]
    fa84:	8829      	ldrh	r1, [r5, #0]
    fa86:	8021      	strh	r1, [r4, #0]
    fa88:	f8b0 00d0 	ldrh.w	r0, [r0, #208]	; 0xd0
    fa8c:	8060      	strh	r0, [r4, #2]
    fa8e:	2000      	movs	r0, #0
    fa90:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000fa92 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    fa92:	b510      	push	{r4, lr}
    fa94:	4604      	mov	r4, r0
    fa96:	4601      	mov	r1, r0
    fa98:	2000      	movs	r0, #0
    fa9a:	f7f1 fdc3 	bl	1624 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    fa9e:	b910      	cbnz	r0, faa6 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    faa0:	2000      	movs	r0, #0
    faa2:	6020      	str	r0, [r4, #0]
    faa4:	80a0      	strh	r0, [r4, #4]
    faa6:	2000      	movs	r0, #0
    faa8:	bd10      	pop	{r4, pc}

0000faaa <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    faaa:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    faac:	460c      	mov	r4, r1
    faae:	4605      	mov	r5, r0
    fab0:	8800      	ldrh	r0, [r0, #0]
    fab2:	4669      	mov	r1, sp
    fab4:	f7fd fff9 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fab8:	b108      	cbz	r0, fabe <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    faba:	2002      	movs	r0, #2
    fabc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fabe:	78a8      	ldrb	r0, [r5, #2]
    fac0:	b158      	cbz	r0, fada <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x30>
    fac2:	f000 fab0 	bl	10026 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3ea>
    fac6:	70a0      	strb	r0, [r4, #2]
    fac8:	8828      	ldrh	r0, [r5, #0]
    faca:	8020      	strh	r0, [r4, #0]
    facc:	f994 0002 	ldrsb.w	r0, [r4, #2]
    fad0:	f7f2 fdca 	bl	2668 <sym_MYZDSWHZMVTUGPWK7CFFVMNCPRPZBKC3UH2GTLQ>
    fad4:	70a0      	strb	r0, [r4, #2]
    fad6:	2000      	movs	r0, #0
    fad8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    fada:	9801      	ldr	r0, [sp, #4]
    fadc:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    fae0:	e7f1      	b.n	fac6 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000fae2 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    fae2:	b510      	push	{r4, lr}
    fae4:	f7f7 fe38 	bl	7758 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    fae8:	2000      	movs	r0, #0
    faea:	bd10      	pop	{r4, pc}

0000faec <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    faec:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    faf0:	4604      	mov	r4, r0
    faf2:	8840      	ldrh	r0, [r0, #2]
    faf4:	460d      	mov	r5, r1
    faf6:	b1b8      	cbz	r0, fb28 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    faf8:	8820      	ldrh	r0, [r4, #0]
    fafa:	4669      	mov	r1, sp
    fafc:	f7fd ffd5 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb00:	2800      	cmp	r0, #0
    fb02:	d10f      	bne.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    fb04:	8820      	ldrh	r0, [r4, #0]
    fb06:	8028      	strh	r0, [r5, #0]
    fb08:	9e01      	ldr	r6, [sp, #4]
    fb0a:	f106 0510 	add.w	r5, r6, #16
    fb0e:	3688      	adds	r6, #136	; 0x88
    fb10:	682f      	ldr	r7, [r5, #0]
    fb12:	8862      	ldrh	r2, [r4, #2]
    fb14:	4639      	mov	r1, r7
    fb16:	4630      	mov	r0, r6
    fb18:	f7fe f939 	bl	dd8e <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    fb1c:	6828      	ldr	r0, [r5, #0]
    fb1e:	42b8      	cmp	r0, r7
    fb20:	d1f6      	bne.n	fb10 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    fb22:	2000      	movs	r0, #0
    fb24:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    fb28:	2012      	movs	r0, #18
    fb2a:	e7fb      	b.n	fb24 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000fb2c <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    fb2c:	f000 b886 	b.w	fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    fb30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb34:	b086      	sub	sp, #24
    fb36:	4689      	mov	r9, r1
    fb38:	4607      	mov	r7, r0
    fb3a:	8800      	ldrh	r0, [r0, #0]
    fb3c:	a901      	add	r1, sp, #4
    fb3e:	f7fd ffb4 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fb42:	2800      	cmp	r0, #0
    fb44:	d136      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fb46:	9802      	ldr	r0, [sp, #8]
    fb48:	4601      	mov	r1, r0
    fb4a:	4688      	mov	r8, r1
    fb4c:	f890 119c 	ldrb.w	r1, [r0, #412]	; 0x19c
    fb50:	f500 749c 	add.w	r4, r0, #312	; 0x138
    fb54:	f88d 1000 	strb.w	r1, [sp]
    fb58:	9900      	ldr	r1, [sp, #0]
    fb5a:	9100      	str	r1, [sp, #0]
    fb5c:	f89d 1000 	ldrb.w	r1, [sp]
    fb60:	3088      	adds	r0, #136	; 0x88
    fb62:	b109      	cbz	r1, fb68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x38>
    fb64:	2601      	movs	r6, #1
    fb66:	e000      	b.n	fb6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3a>
    fb68:	2600      	movs	r6, #0
    fb6a:	7f81      	ldrb	r1, [r0, #30]
    fb6c:	2922      	cmp	r1, #34	; 0x22
    fb6e:	d100      	bne.n	fb72 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x42>
    fb70:	b13e      	cbz	r6, fb82 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x52>
    fb72:	2500      	movs	r5, #0
    fb74:	306e      	adds	r0, #110	; 0x6e
    fb76:	2108      	movs	r1, #8
    fb78:	4682      	mov	sl, r0
    fb7a:	f7ff fc8c 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb7e:	b110      	cbz	r0, fb86 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x56>
    fb80:	e007      	b.n	fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb82:	2501      	movs	r5, #1
    fb84:	e7f6      	b.n	fb74 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x44>
    fb86:	210b      	movs	r1, #11
    fb88:	4650      	mov	r0, sl
    fb8a:	f7ff fc84 	bl	f496 <sym_PHXPDBDB6JXECIC7QODRKHACLPLBH43PQGTSGRY+0x94>
    fb8e:	b900      	cbnz	r0, fb92 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x62>
    fb90:	b17d      	cbz	r5, fbb2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x82>
    fb92:	a804      	add	r0, sp, #16
    fb94:	9000      	str	r0, [sp, #0]
    fb96:	f89d 0004 	ldrb.w	r0, [sp, #4]
    fb9a:	ab03      	add	r3, sp, #12
    fb9c:	463a      	mov	r2, r7
    fb9e:	4641      	mov	r1, r8
    fba0:	f000 fa21 	bl	ffe6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3aa>
    fba4:	0005      	movs	r5, r0
    fba6:	d105      	bne.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>
    fba8:	340c      	adds	r4, #12
    fbaa:	20ff      	movs	r0, #255	; 0xff
    fbac:	7060      	strb	r0, [r4, #1]
    fbae:	b936      	cbnz	r6, fbbe <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8e>
    fbb0:	e003      	b.n	fbba <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    fbb2:	201a      	movs	r0, #26
    fbb4:	b006      	add	sp, #24
    fbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fbba:	7820      	ldrb	r0, [r4, #0]
    fbbc:	b108      	cbz	r0, fbc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x92>
    fbbe:	253a      	movs	r5, #58	; 0x3a
    fbc0:	e012      	b.n	fbe8 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xb8>
    fbc2:	f884 9000 	strb.w	r9, [r4]
    fbc6:	f89d 000c 	ldrb.w	r0, [sp, #12]
    fbca:	70a0      	strb	r0, [r4, #2]
    fbcc:	f89d 1010 	ldrb.w	r1, [sp, #16]
    fbd0:	70e1      	strb	r1, [r4, #3]
    fbd2:	f88d 0000 	strb.w	r0, [sp]
    fbd6:	f88d 1001 	strb.w	r1, [sp, #1]
    fbda:	88b8      	ldrh	r0, [r7, #4]
    fbdc:	f8ad 0002 	strh.w	r0, [sp, #2]
    fbe0:	4669      	mov	r1, sp
    fbe2:	4640      	mov	r0, r8
    fbe4:	f7fe f83b 	bl	dc5e <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    fbe8:	2000      	movs	r0, #0
    fbea:	7060      	strb	r0, [r4, #1]
    fbec:	4628      	mov	r0, r5
    fbee:	e7e1      	b.n	fbb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x84>

0000fbf0 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    fbf0:	2008      	movs	r0, #8
    fbf2:	f7f7 be05 	b.w	7800 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>

0000fbf6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    fbf6:	b510      	push	{r4, lr}
    fbf8:	4604      	mov	r4, r0
    fbfa:	2000      	movs	r0, #0
    fbfc:	8822      	ldrh	r2, [r4, #0]
    fbfe:	b086      	sub	sp, #24
    fc00:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    fc04:	39ff      	subs	r1, #255	; 0xff
    fc06:	d008      	beq.n	fc1a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    fc08:	a903      	add	r1, sp, #12
    fc0a:	4610      	mov	r0, r2
    fc0c:	f7fd ff4d 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fc10:	b110      	cbz	r0, fc18 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    fc12:	2002      	movs	r0, #2
    fc14:	b006      	add	sp, #24
    fc16:	bd10      	pop	{r4, pc}
    fc18:	9804      	ldr	r0, [sp, #16]
    fc1a:	8921      	ldrh	r1, [r4, #8]
    fc1c:	89a3      	ldrh	r3, [r4, #12]
    fc1e:	8962      	ldrh	r2, [r4, #10]
    fc20:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fc24:	88e3      	ldrh	r3, [r4, #6]
    fc26:	88a2      	ldrh	r2, [r4, #4]
    fc28:	8861      	ldrh	r1, [r4, #2]
    fc2a:	f000 f97b 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fc2e:	b108      	cbz	r0, fc34 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    fc30:	2000      	movs	r0, #0
    fc32:	e7ef      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    fc34:	2030      	movs	r0, #48	; 0x30
    fc36:	e7ed      	b.n	fc14 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>

0000fc38 <sym_7ZWRNRN6OJ5G7BJWG232R5QOQBW4NK4HJWYOG5A>:
    fc38:	f7f5 bcb4 	b.w	55a4 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000fc3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    fc3c:	b510      	push	{r4, lr}
    fc3e:	f7fd fe55 	bl	d8ec <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    fc42:	f7f2 fad1 	bl	21e8 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    fc46:	f7f7 fdfd 	bl	7844 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    fc4a:	f7fe fa7a 	bl	e142 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    fc4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fc52:	f7f7 bb8d 	b.w	7370 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0xf4>
    fc56:	f44f 71a4 	mov.w	r1, #328	; 0x148
    fc5a:	4288      	cmp	r0, r1
    fc5c:	d303      	bcc.n	fc66 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a>
    fc5e:	f640 0148 	movw	r1, #2120	; 0x848
    fc62:	4288      	cmp	r0, r1
    fc64:	d300      	bcc.n	fc68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c>
    fc66:	4608      	mov	r0, r1
    fc68:	b280      	uxth	r0, r0
    fc6a:	4770      	bx	lr
    fc6c:	07c1      	lsls	r1, r0, #31
    fc6e:	d001      	beq.n	fc74 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38>
    fc70:	2001      	movs	r0, #1
    fc72:	4770      	bx	lr
    fc74:	0780      	lsls	r0, r0, #30
    fc76:	d501      	bpl.n	fc7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40>
    fc78:	2002      	movs	r0, #2
    fc7a:	4770      	bx	lr
    fc7c:	2000      	movs	r0, #0
    fc7e:	4770      	bx	lr
    fc80:	b510      	push	{r4, lr}
    fc82:	2801      	cmp	r0, #1
    fc84:	d006      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc86:	2802      	cmp	r0, #2
    fc88:	d004      	beq.n	fc94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>
    fc8a:	f44f 7136 	mov.w	r1, #728	; 0x2d8
    fc8e:	2006      	movs	r0, #6
    fc90:	f7f0 fee8 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fc94:	bd10      	pop	{r4, pc}
    fc96:	b510      	push	{r4, lr}
    fc98:	f000 f9de 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
    fc9c:	b128      	cbz	r0, fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fc9e:	f7f3 fc93 	bl	35c8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    fca2:	2801      	cmp	r0, #1
    fca4:	d001      	beq.n	fcaa <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x6e>
    fca6:	2000      	movs	r0, #0
    fca8:	bd10      	pop	{r4, pc}
    fcaa:	2001      	movs	r0, #1
    fcac:	bd10      	pop	{r4, pc}
    fcae:	b510      	push	{r4, lr}
    fcb0:	0004      	movs	r4, r0
    fcb2:	d005      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcb4:	f7f7 fdb6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fcb8:	4384      	bics	r4, r0
    fcba:	d001      	beq.n	fcc0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x84>
    fcbc:	2000      	movs	r0, #0
    fcbe:	bd10      	pop	{r4, pc}
    fcc0:	2001      	movs	r0, #1
    fcc2:	bd10      	pop	{r4, pc}
    fcc4:	28fb      	cmp	r0, #251	; 0xfb
    fcc6:	d803      	bhi.n	fcd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x94>
    fcc8:	f640 0048 	movw	r0, #2120	; 0x848
    fccc:	4281      	cmp	r1, r0
    fcce:	d901      	bls.n	fcd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x98>
    fcd0:	2011      	movs	r0, #17
    fcd2:	4770      	bx	lr
    fcd4:	2000      	movs	r0, #0
    fcd6:	4770      	bx	lr
    fcd8:	381b      	subs	r0, #27
    fcda:	28e1      	cmp	r0, #225	; 0xe1
    fcdc:	d206      	bcs.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fcde:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    fce2:	d303      	bcc.n	fcec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    fce4:	f244 2090 	movw	r0, #17040	; 0x4290
    fce8:	4281      	cmp	r1, r0
    fcea:	d901      	bls.n	fcf0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb4>
    fcec:	2012      	movs	r0, #18
    fcee:	4770      	bx	lr
    fcf0:	2000      	movs	r0, #0
    fcf2:	4770      	bx	lr
    fcf4:	b510      	push	{r4, lr}
    fcf6:	4604      	mov	r4, r0
    fcf8:	7800      	ldrb	r0, [r0, #0]
    fcfa:	2801      	cmp	r0, #1
    fcfc:	d009      	beq.n	fd12 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd6>
    fcfe:	f7f4 fdd7 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fd02:	2805      	cmp	r0, #5
    fd04:	d003      	beq.n	fd0e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd2>
    fd06:	f7f4 fd9b 	bl	4840 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d000      	beq.n	fd10 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd4>
    fd0e:	200c      	movs	r0, #12
    fd10:	bd10      	pop	{r4, pc}
    fd12:	f7f3 fc27 	bl	3564 <sym_FLBXO3C2TGTXVEYELOG5B33ZBUVUNXUU6YZL7TY>
    fd16:	b108      	cbz	r0, fd1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe0>
    fd18:	203a      	movs	r0, #58	; 0x3a
    fd1a:	bd10      	pop	{r4, pc}
    fd1c:	f7f3 fbdc 	bl	34d8 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    fd20:	b138      	cbz	r0, fd32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf6>
    fd22:	f7f3 fa4f 	bl	31c4 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    fd26:	88a1      	ldrh	r1, [r4, #4]
    fd28:	8860      	ldrh	r0, [r4, #2]
    fd2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd2e:	f7f4 bd4d 	b.w	47cc <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    fd32:	2012      	movs	r0, #18
    fd34:	bd10      	pop	{r4, pc}
    fd36:	7802      	ldrb	r2, [r0, #0]
    fd38:	2a01      	cmp	r2, #1
    fd3a:	d001      	beq.n	fd40 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x104>
    fd3c:	b1ba      	cbz	r2, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd3e:	e018      	b.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd40:	7842      	ldrb	r2, [r0, #1]
    fd42:	b13a      	cbz	r2, fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd44:	2a01      	cmp	r2, #1
    fd46:	d005      	beq.n	fd54 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x118>
    fd48:	2a02      	cmp	r2, #2
    fd4a:	d112      	bne.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4c:	b189      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd4e:	8881      	ldrh	r1, [r0, #4]
    fd50:	b179      	cbz	r1, fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd52:	e000      	b.n	fd56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x11a>
    fd54:	b159      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd56:	8841      	ldrh	r1, [r0, #2]
    fd58:	b149      	cbz	r1, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5a:	8880      	ldrh	r0, [r0, #4]
    fd5c:	b138      	cbz	r0, fd6e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x132>
    fd5e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    fd62:	0049      	lsls	r1, r1, #1
    fd64:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    fd68:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    fd6c:	d201      	bcs.n	fd72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    fd6e:	2000      	movs	r0, #0
    fd70:	4770      	bx	lr
    fd72:	2012      	movs	r0, #18
    fd74:	4770      	bx	lr
    fd76:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    fd7a:	7a45      	ldrb	r5, [r0, #9]
    fd7c:	4604      	mov	r4, r0
    fd7e:	0768      	lsls	r0, r5, #29
    fd80:	d06c      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd82:	08e8      	lsrs	r0, r5, #3
    fd84:	d16a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd86:	2d02      	cmp	r5, #2
    fd88:	d068      	beq.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fd8a:	f7f7 fd4b 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fd8e:	ea25 0000 	bic.w	r0, r5, r0
    fd92:	0740      	lsls	r0, r0, #29
    fd94:	d102      	bne.n	fd9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x160>
    fd96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    fd9a:	b110      	cbz	r0, fda2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    fd9c:	2011      	movs	r0, #17
    fd9e:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    fda2:	2d01      	cmp	r5, #1
    fda4:	d15a      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fda6:	27ff      	movs	r7, #255	; 0xff
    fda8:	2101      	movs	r1, #1
    fdaa:	69a0      	ldr	r0, [r4, #24]
    fdac:	f7f7 fbfe 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    fdb0:	b3e8      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdb2:	46a8      	mov	r8, r5
    fdb4:	2600      	movs	r6, #0
    fdb6:	4635      	mov	r5, r6
    fdb8:	42bd      	cmp	r5, r7
    fdba:	d02f      	beq.n	fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdbc:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    fdc0:	6988      	ldr	r0, [r1, #24]
    fdc2:	68c9      	ldr	r1, [r1, #12]
    fdc4:	4288      	cmp	r0, r1
    fdc6:	d849      	bhi.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdc8:	4406      	add	r6, r0
    fdca:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    fdce:	4681      	mov	r9, r0
    fdd0:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    fdd2:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    fdd6:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    fdd8:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    fddc:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    fdde:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    fde0:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    fde2:	2000      	movs	r0, #0
    fde4:	f000 f89e 	bl	ff24 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e8>
    fde8:	b308      	cbz	r0, fe2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f2>
    fdea:	b1bd      	cbz	r5, fe1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1e0>
    fdec:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    fdf0:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    fdf4:	4281      	cmp	r1, r0
    fdf6:	d131      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fdf8:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    fdfc:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    fe00:	4281      	cmp	r1, r0
    fe02:	d12b      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe04:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    fe08:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    fe0c:	4281      	cmp	r1, r0
    fe0e:	d125      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe10:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    fe14:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    fe18:	4281      	cmp	r1, r0
    fe1a:	d11f      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe1c:	1c6d      	adds	r5, r5, #1
    fe1e:	b2ed      	uxtb	r5, r5
    fe20:	4545      	cmp	r5, r8
    fe22:	d3c9      	bcc.n	fdb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17c>
    fe24:	68e0      	ldr	r0, [r4, #12]
    fe26:	42b0      	cmp	r0, r6
    fe28:	d318      	bcc.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe2a:	7820      	ldrb	r0, [r4, #0]
    fe2c:	e000      	b.n	fe30 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f4>
    fe2e:	e003      	b.n	fe38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1fc>
    fe30:	b120      	cbz	r0, fe3c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x200>
    fe32:	2801      	cmp	r0, #1
    fe34:	d112      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe36:	e004      	b.n	fe42 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x206>
    fe38:	2030      	movs	r0, #48	; 0x30
    fe3a:	e7b0      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe3c:	78a0      	ldrb	r0, [r4, #2]
    fe3e:	2800      	cmp	r0, #0
    fe40:	d1f7      	bne.n	fe32 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1f6>
    fe42:	7860      	ldrb	r0, [r4, #1]
    fe44:	b128      	cbz	r0, fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe46:	2801      	cmp	r0, #1
    fe48:	d003      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4a:	2802      	cmp	r0, #2
    fe4c:	d001      	beq.n	fe52 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x216>
    fe4e:	2803      	cmp	r0, #3
    fe50:	d104      	bne.n	fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe52:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    fe56:	b108      	cbz	r0, fe5c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x220>
    fe58:	2807      	cmp	r0, #7
    fe5a:	d901      	bls.n	fe60 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x224>
    fe5c:	2012      	movs	r0, #18
    fe5e:	e79e      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe60:	2000      	movs	r0, #0
    fe62:	e79c      	b.n	fd9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x162>
    fe64:	b570      	push	{r4, r5, r6, lr}
    fe66:	4604      	mov	r4, r0
    fe68:	7800      	ldrb	r0, [r0, #0]
    fe6a:	2500      	movs	r5, #0
    fe6c:	2801      	cmp	r0, #1
    fe6e:	d004      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe70:	b118      	cbz	r0, fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe72:	2802      	cmp	r0, #2
    fe74:	d001      	beq.n	fe7a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x23e>
    fe76:	2803      	cmp	r0, #3
    fe78:	d139      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe7a:	7860      	ldrb	r0, [r4, #1]
    fe7c:	b128      	cbz	r0, fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe7e:	2801      	cmp	r0, #1
    fe80:	d003      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe82:	2802      	cmp	r0, #2
    fe84:	d001      	beq.n	fe8a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x24e>
    fe86:	2803      	cmp	r0, #3
    fe88:	d131      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe8a:	7e60      	ldrb	r0, [r4, #25]
    fe8c:	b948      	cbnz	r0, fea2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x266>
    fe8e:	78a0      	ldrb	r0, [r4, #2]
    fe90:	2801      	cmp	r0, #1
    fe92:	d12c      	bne.n	feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    fe94:	f7f7 fcc6 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fe98:	4601      	mov	r1, r0
    fe9a:	78a0      	ldrb	r0, [r4, #2]
    fe9c:	ea30 0101 	bics.w	r1, r0, r1
    fea0:	d001      	beq.n	fea6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x26a>
    fea2:	2011      	movs	r0, #17
    fea4:	bd70      	pop	{r4, r5, r6, pc}
    fea6:	07c0      	lsls	r0, r0, #31
    fea8:	d006      	beq.n	feb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x27c>
    feaa:	78e0      	ldrb	r0, [r4, #3]
    feac:	2301      	movs	r3, #1
    feae:	6922      	ldr	r2, [r4, #16]
    feb0:	68a1      	ldr	r1, [r4, #8]
    feb2:	f000 f820 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feb6:	4605      	mov	r5, r0
    feb8:	78a0      	ldrb	r0, [r4, #2]
    feba:	0780      	lsls	r0, r0, #30
    febc:	d506      	bpl.n	fecc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x290>
    febe:	78e0      	ldrb	r0, [r4, #3]
    fec0:	2302      	movs	r3, #2
    fec2:	6922      	ldr	r2, [r4, #16]
    fec4:	68a1      	ldr	r1, [r4, #8]
    fec6:	f000 f816 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    feca:	4305      	orrs	r5, r0
    fecc:	78a0      	ldrb	r0, [r4, #2]
    fece:	0740      	lsls	r0, r0, #29
    fed0:	d506      	bpl.n	fee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2a4>
    fed2:	78e0      	ldrb	r0, [r4, #3]
    fed4:	2304      	movs	r3, #4
    fed6:	6922      	ldr	r2, [r4, #16]
    fed8:	68a1      	ldr	r1, [r4, #8]
    feda:	f000 f80c 	bl	fef6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2ba>
    fede:	4305      	orrs	r5, r0
    fee0:	b10d      	cbz	r5, fee6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2aa>
    fee2:	4628      	mov	r0, r5
    fee4:	bd70      	pop	{r4, r5, r6, pc}
    fee6:	7e20      	ldrb	r0, [r4, #24]
    fee8:	b108      	cbz	r0, feee <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b2>
    feea:	2807      	cmp	r0, #7
    feec:	d901      	bls.n	fef2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2b6>
    feee:	2012      	movs	r0, #18
    fef0:	bd70      	pop	{r4, r5, r6, pc}
    fef2:	2000      	movs	r0, #0
    fef4:	bd70      	pop	{r4, r5, r6, pc}
    fef6:	b570      	push	{r4, r5, r6, lr}
    fef8:	4614      	mov	r4, r2
    fefa:	460d      	mov	r5, r1
    fefc:	b108      	cbz	r0, ff02 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2c6>
    fefe:	2801      	cmp	r0, #1
    ff00:	d10a      	bne.n	ff18 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2dc>
    ff02:	4619      	mov	r1, r3
    ff04:	4610      	mov	r0, r2
    ff06:	f7f7 fb51 	bl	75ac <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x330>
    ff0a:	b138      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff0c:	4628      	mov	r0, r5
    ff0e:	f7f7 fa51 	bl	73b4 <sym_PHIWMC5UC4THFNN3JWADQQGKAR6W5FGB3VIFNJQ+0x138>
    ff12:	b118      	cbz	r0, ff1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e0>
    ff14:	42ac      	cmp	r4, r5
    ff16:	d903      	bls.n	ff20 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x2e4>
    ff18:	2012      	movs	r0, #18
    ff1a:	bd70      	pop	{r4, r5, r6, pc}
    ff1c:	2030      	movs	r0, #48	; 0x30
    ff1e:	bd70      	pop	{r4, r5, r6, pc}
    ff20:	2000      	movs	r0, #0
    ff22:	bd70      	pop	{r4, r5, r6, pc}
    ff24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff28:	461d      	mov	r5, r3
    ff2a:	4610      	mov	r0, r2
    ff2c:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    ff30:	1f8b      	subs	r3, r1, #6
    ff32:	f640 427a 	movw	r2, #3194	; 0xc7a
    ff36:	9e08      	ldr	r6, [sp, #32]
    ff38:	4293      	cmp	r3, r2
    ff3a:	d81c      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff3c:	1f83      	subs	r3, r0, #6
    ff3e:	4293      	cmp	r3, r2
    ff40:	d819      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff42:	4281      	cmp	r1, r0
    ff44:	d817      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff46:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    ff4a:	d214      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff4c:	f1a4 010a 	sub.w	r1, r4, #10
    ff50:	1f12      	subs	r2, r2, #4
    ff52:	4291      	cmp	r1, r2
    ff54:	d80f      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff56:	f7fd fdb4 	bl	dac2 <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    ff5a:	1c6d      	adds	r5, r5, #1
    ff5c:	4368      	muls	r0, r5
    ff5e:	f240 2171 	movw	r1, #625	; 0x271
    ff62:	0040      	lsls	r0, r0, #1
    ff64:	434c      	muls	r4, r1
    ff66:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    ff6a:	d204      	bcs.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff6c:	42b7      	cmp	r7, r6
    ff6e:	d802      	bhi.n	ff76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x33a>
    ff70:	2001      	movs	r0, #1
    ff72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff76:	2000      	movs	r0, #0
    ff78:	e7fb      	b.n	ff72 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x336>
    ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff7e:	4606      	mov	r6, r0
    ff80:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    ff84:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    ff88:	4615      	mov	r5, r2
    ff8a:	302c      	adds	r0, #44	; 0x2c
    ff8c:	f7f5 f96e 	bl	526c <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    ff90:	4680      	mov	r8, r0
    ff92:	2102      	movs	r1, #2
    ff94:	f7fd fe33 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ff98:	4287      	cmp	r7, r0
    ff9a:	d200      	bcs.n	ff9e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x362>
    ff9c:	4638      	mov	r0, r7
    ff9e:	4607      	mov	r7, r0
    ffa0:	2102      	movs	r1, #2
    ffa2:	4640      	mov	r0, r8
    ffa4:	f7fd fe2b 	bl	dbfe <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    ffa8:	4284      	cmp	r4, r0
    ffaa:	d200      	bcs.n	ffae <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x372>
    ffac:	4620      	mov	r0, r4
    ffae:	8831      	ldrh	r1, [r6, #0]
    ffb0:	8029      	strh	r1, [r5, #0]
    ffb2:	2f1b      	cmp	r7, #27
    ffb4:	d913      	bls.n	ffde <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a2>
    ffb6:	2ffb      	cmp	r7, #251	; 0xfb
    ffb8:	d300      	bcc.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffba:	27fb      	movs	r7, #251	; 0xfb
    ffbc:	806f      	strh	r7, [r5, #2]
    ffbe:	281b      	cmp	r0, #27
    ffc0:	d90f      	bls.n	ffe2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3a6>
    ffc2:	28fb      	cmp	r0, #251	; 0xfb
    ffc4:	d300      	bcc.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffc6:	20fb      	movs	r0, #251	; 0xfb
    ffc8:	80e8      	strh	r0, [r5, #6]
    ffca:	4640      	mov	r0, r8
    ffcc:	f7ff fe43 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd0:	80a8      	strh	r0, [r5, #4]
    ffd2:	4640      	mov	r0, r8
    ffd4:	f7ff fe3f 	bl	fc56 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a>
    ffd8:	8128      	strh	r0, [r5, #8]
    ffda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ffde:	271b      	movs	r7, #27
    ffe0:	e7ec      	b.n	ffbc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x380>
    ffe2:	201b      	movs	r0, #27
    ffe4:	e7f0      	b.n	ffc8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x38c>
    ffe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffea:	7890      	ldrb	r0, [r2, #2]
    ffec:	9e06      	ldr	r6, [sp, #24]
    ffee:	461d      	mov	r5, r3
    fff0:	4614      	mov	r4, r2
    fff2:	b908      	cbnz	r0, fff8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3bc>
    fff4:	f7f7 fc16 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    fff8:	78e4      	ldrb	r4, [r4, #3]
    fffa:	4607      	mov	r7, r0
    fffc:	b914      	cbnz	r4, 10004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3c8>
    fffe:	f7f7 fc11 	bl	7824 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10002:	4604      	mov	r4, r0
   10004:	b16f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10006:	b164      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10008:	4638      	mov	r0, r7
   1000a:	f7ff fe2f 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   1000e:	4620      	mov	r0, r4
   10010:	f7ff fe2c 	bl	fc6c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x30>
   10014:	b12f      	cbz	r7, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10016:	b124      	cbz	r4, 10022 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e6>
   10018:	702f      	strb	r7, [r5, #0]
   1001a:	7034      	strb	r4, [r6, #0]
   1001c:	2000      	movs	r0, #0
   1001e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10022:	2009      	movs	r0, #9
   10024:	e7fb      	b.n	1001e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x3e2>
   10026:	207f      	movs	r0, #127	; 0x7f
   10028:	f000 b821 	b.w	1006e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x432>
   1002c:	b508      	push	{r3, lr}
   1002e:	f890 1248 	ldrb.w	r1, [r0, #584]	; 0x248
   10032:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
   10036:	f88d 0000 	strb.w	r0, [sp]
   1003a:	9800      	ldr	r0, [sp, #0]
   1003c:	9000      	str	r0, [sp, #0]
   1003e:	f89d 0000 	ldrb.w	r0, [sp]
   10042:	b100      	cbz	r0, 10046 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x40a>
   10044:	2001      	movs	r0, #1
   10046:	1e40      	subs	r0, r0, #1
   10048:	4208      	tst	r0, r1
   1004a:	d003      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   1004c:	2904      	cmp	r1, #4
   1004e:	d001      	beq.n	10054 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x418>
   10050:	2001      	movs	r0, #1
   10052:	bd08      	pop	{r3, pc}
   10054:	2000      	movs	r0, #0
   10056:	bd08      	pop	{r3, pc}
   10058:	b510      	push	{r4, lr}
   1005a:	f7f4 fc29 	bl	48b0 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   1005e:	2804      	cmp	r0, #4
   10060:	d003      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10062:	2805      	cmp	r0, #5
   10064:	d001      	beq.n	1006a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x42e>
   10066:	2000      	movs	r0, #0
   10068:	bd10      	pop	{r4, pc}
   1006a:	2001      	movs	r0, #1
   1006c:	bd10      	pop	{r4, pc}
   1006e:	b508      	push	{r3, lr}
   10070:	f640 1288 	movw	r2, #2440	; 0x988
   10074:	2300      	movs	r3, #0
   10076:	4669      	mov	r1, sp
   10078:	f7fc fb2e 	bl	c6d8 <mpsl_fem_tx_power_split>
   1007c:	bd08      	pop	{r3, pc}
   1007e:	b530      	push	{r4, r5, lr}
   10080:	f340 0400 	sbfx	r4, r0, #0, #1
   10084:	f340 0040 	sbfx	r0, r0, #1, #1
   10088:	1c40      	adds	r0, r0, #1
   1008a:	9d03      	ldr	r5, [sp, #12]
   1008c:	1c64      	adds	r4, r4, #1
   1008e:	d000      	beq.n	10092 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x456>
   10090:	b119      	cbz	r1, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10092:	b100      	cbz	r0, 10096 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45a>
   10094:	b10a      	cbz	r2, 1009a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x45e>
   10096:	b91c      	cbnz	r4, 100a0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x464>
   10098:	e001      	b.n	1009e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x462>
   1009a:	2011      	movs	r0, #17
   1009c:	bd30      	pop	{r4, r5, pc}
   1009e:	2100      	movs	r1, #0
   100a0:	7019      	strb	r1, [r3, #0]
   100a2:	b900      	cbnz	r0, 100a6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x46a>
   100a4:	2200      	movs	r2, #0
   100a6:	702a      	strb	r2, [r5, #0]
   100a8:	2000      	movs	r0, #0
   100aa:	bd30      	pop	{r4, r5, pc}
   100ac:	b510      	push	{r4, lr}
   100ae:	f7ff ffd3 	bl	10058 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x41c>
   100b2:	b120      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100b4:	f7f3 fa90 	bl	35d8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   100b8:	b108      	cbz	r0, 100be <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x482>
   100ba:	2001      	movs	r0, #1
   100bc:	bd10      	pop	{r4, pc}
   100be:	2000      	movs	r0, #0
   100c0:	bd10      	pop	{r4, pc}
   100c2:	6802      	ldr	r2, [r0, #0]
   100c4:	b912      	cbnz	r2, 100cc <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x490>
   100c6:	6001      	str	r1, [r0, #0]
   100c8:	4770      	bx	lr
   100ca:	4602      	mov	r2, r0
   100cc:	6850      	ldr	r0, [r2, #4]
   100ce:	b108      	cbz	r0, 100d4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x498>
   100d0:	428a      	cmp	r2, r1
   100d2:	d1fa      	bne.n	100ca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48e>
   100d4:	428a      	cmp	r2, r1
   100d6:	d0f7      	beq.n	100c8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x48c>
   100d8:	6051      	str	r1, [r2, #4]
   100da:	4770      	bx	lr
   100dc:	b510      	push	{r4, lr}
   100de:	4604      	mov	r4, r0
   100e0:	e002      	b.n	100e8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ac>
   100e2:	6820      	ldr	r0, [r4, #0]
   100e4:	4780      	blx	r0
   100e6:	6864      	ldr	r4, [r4, #4]
   100e8:	2c00      	cmp	r4, #0
   100ea:	d1fa      	bne.n	100e2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4a6>
   100ec:	bd10      	pop	{r4, pc}
   100ee:	b510      	push	{r4, lr}
   100f0:	2000      	movs	r0, #0
   100f2:	f7fd fb28 	bl	d746 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   100f6:	f7f1 f86d 	bl	11d4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   100fa:	f7f1 fa75 	bl	15e8 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   100fe:	f7f1 fc03 	bl	1908 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   10102:	2800      	cmp	r0, #0
   10104:	d003      	beq.n	1010e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4d2>
   10106:	21df      	movs	r1, #223	; 0xdf
   10108:	2001      	movs	r0, #1
   1010a:	f7f0 fcab 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   1010e:	bd10      	pop	{r4, pc}
   10110:	b510      	push	{r4, lr}
   10112:	f000 f80a 	bl	1012a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ee>
   10116:	f7fe fe6f 	bl	edf8 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   1011a:	2800      	cmp	r0, #0
   1011c:	d004      	beq.n	10128 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4ec>
   1011e:	f240 1161 	movw	r1, #353	; 0x161
   10122:	2001      	movs	r0, #1
   10124:	f7f0 fc9e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10128:	bd10      	pop	{r4, pc}
   1012a:	b510      	push	{r4, lr}
   1012c:	f7f4 fc08 	bl	4940 <sym_CEIRMF45E42FC47RKIFGTU36Z7XGQCJUDSF57LQ>
   10130:	b110      	cbz	r0, 10138 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x4fc>
   10132:	f240 113b 	movw	r1, #315	; 0x13b
   10136:	e004      	b.n	10142 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x506>
   10138:	f7fe fd4a 	bl	ebd0 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   1013c:	b120      	cbz	r0, 10148 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x50c>
   1013e:	f44f 719e 	mov.w	r1, #316	; 0x13c
   10142:	2001      	movs	r0, #1
   10144:	f7f0 fc8e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10148:	f7f7 f858 	bl	71fc <sym_UY577SX5HIKP7SN7G6RHWTFDXAXFXXF32S4VJUA>
   1014c:	f7f3 f98e 	bl	346c <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   10150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10154:	f7f6 beb4 	b.w	6ec0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   10158:	000b0001 	.word	0x000b0001
   1015c:	000a0002 	.word	0x000a0002
   10160:	00090005 	.word	0x00090005
   10164:	0008000a 	.word	0x0008000a
   10168:	00070014 	.word	0x00070014
   1016c:	0006001e 	.word	0x0006001e
   10170:	00050032 	.word	0x00050032
   10174:	0004004b 	.word	0x0004004b
   10178:	00030064 	.word	0x00030064
   1017c:	00020096 	.word	0x00020096
   10180:	000100fa 	.word	0x000100fa
   10184:	000001f4 	.word	0x000001f4

00010188 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA>:
   10188:	b518      	push	{r3, r4, lr}
   1018a:	2200      	movs	r2, #0
   1018c:	704a      	strb	r2, [r1, #1]
   1018e:	2317      	movs	r3, #23
   10190:	700b      	strb	r3, [r1, #0]
   10192:	7202      	strb	r2, [r0, #8]
   10194:	f8d0 400a 	ldr.w	r4, [r0, #10]
   10198:	604c      	str	r4, [r1, #4]
   1019a:	89c3      	ldrh	r3, [r0, #14]
   1019c:	810b      	strh	r3, [r1, #8]
   1019e:	7a03      	ldrb	r3, [r0, #8]
   101a0:	f88d 3000 	strb.w	r3, [sp]
   101a4:	9b00      	ldr	r3, [sp, #0]
   101a6:	9300      	str	r3, [sp, #0]
   101a8:	f89d 3000 	ldrb.w	r3, [sp]
   101ac:	2b00      	cmp	r3, #0
   101ae:	d1f0      	bne.n	10192 <sym_N4QRZBF2FIWL2SJPDNB5CJNAF73PGHUMQ7KGJGA+0xa>
   101b0:	bd18      	pop	{r3, r4, pc}

000101b2 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY>:
   101b2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   101b4:	460d      	mov	r5, r1
   101b6:	4604      	mov	r4, r0
   101b8:	f7f2 fb40 	bl	283c <sym_N2NJCIBZFHVP7II7LSOD6U4WPOYSC3U3IRJ6NLY>
   101bc:	2600      	movs	r6, #0
   101be:	b1f8      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101c0:	f5a4 70ca 	sub.w	r0, r4, #404	; 0x194
   101c4:	7226      	strb	r6, [r4, #8]
   101c6:	8800      	ldrh	r0, [r0, #0]
   101c8:	f8ad 0000 	strh.w	r0, [sp]
   101cc:	a902      	add	r1, sp, #8
   101ce:	f7fd fc6c 	bl	daaa <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101d2:	b108      	cbz	r0, 101d8 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x26>
   101d4:	2124      	movs	r1, #36	; 0x24
   101d6:	e010      	b.n	101fa <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x48>
   101d8:	9803      	ldr	r0, [sp, #12]
   101da:	f810 1f66 	ldrb.w	r1, [r0, #102]!
   101de:	f88d 1002 	strb.w	r1, [sp, #2]
   101e2:	7841      	ldrb	r1, [r0, #1]
   101e4:	f88d 1003 	strb.w	r1, [sp, #3]
   101e8:	8840      	ldrh	r0, [r0, #2]
   101ea:	f8ad 0004 	strh.w	r0, [sp, #4]
   101ee:	2102      	movs	r1, #2
   101f0:	4668      	mov	r0, sp
   101f2:	f7ff fc9d 	bl	fb30 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   101f6:	b118      	cbz	r0, 10200 <sym_7HP2F3XCOOTO7JW2SJO6PGUER2VAQ7RTRD56QUY+0x4e>
   101f8:	213a      	movs	r1, #58	; 0x3a
   101fa:	207e      	movs	r0, #126	; 0x7e
   101fc:	f7f0 fc32 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10200:	2020      	movs	r0, #32
   10202:	7028      	strb	r0, [r5, #0]
   10204:	706e      	strb	r6, [r5, #1]
   10206:	f8d4 000a 	ldr.w	r0, [r4, #10]
   1020a:	6068      	str	r0, [r5, #4]
   1020c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}

0001020e <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   1020e:	b510      	push	{r4, lr}
   10210:	f7f7 fe68 	bl	7ee4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10214:	f000 f81d 	bl	10252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10218:	f7f7 fb80 	bl	791c <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   1021c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10220:	f7f7 bc7a 	b.w	7b18 <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010224 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10224:	b510      	push	{r4, lr}
   10226:	24c8      	movs	r4, #200	; 0xc8
   10228:	1e64      	subs	r4, r4, #1
   1022a:	b2e4      	uxtb	r4, r4
   1022c:	f7f7 fb94 	bl	7958 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10230:	2802      	cmp	r0, #2
   10232:	d003      	beq.n	1023c <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10234:	2801      	cmp	r0, #1
   10236:	d000      	beq.n	1023a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10238:	2000      	movs	r0, #0
   1023a:	bd10      	pop	{r4, pc}
   1023c:	2c00      	cmp	r4, #0
   1023e:	d1f3      	bne.n	10228 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10240:	21ca      	movs	r1, #202	; 0xca
   10242:	203b      	movs	r0, #59	; 0x3b
   10244:	f7f0 fc0e 	bl	a64 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10248:	5840      	ldr	r0, [r0, r1]
   1024a:	2800      	cmp	r0, #0
   1024c:	d000      	beq.n	10250 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x2c>
   1024e:	2001      	movs	r0, #1
   10250:	4770      	bx	lr

00010252 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10252:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1025a:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   1025e:	f3bf 8f4f 	dsb	sy
   10262:	f3bf 8f6f 	isb	sy
   10266:	f7f7 bcf1 	b.w	7c4c <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>
   1026a:	2800      	cmp	r0, #0
   1026c:	db09      	blt.n	10282 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   1026e:	f000 021f 	and.w	r2, r0, #31
   10272:	2101      	movs	r1, #1
   10274:	4091      	lsls	r1, r2
   10276:	0940      	lsrs	r0, r0, #5
   10278:	0080      	lsls	r0, r0, #2
   1027a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   1027e:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10282:	4770      	bx	lr
   10284:	2800      	cmp	r0, #0
   10286:	db0d      	blt.n	102a4 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10288:	f000 021f 	and.w	r2, r0, #31
   1028c:	2101      	movs	r1, #1
   1028e:	4091      	lsls	r1, r2
   10290:	0940      	lsrs	r0, r0, #5
   10292:	0080      	lsls	r0, r0, #2
   10294:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10298:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   1029c:	f3bf 8f4f 	dsb	sy
   102a0:	f3bf 8f6f 	isb	sy
   102a4:	4770      	bx	lr
   102a6:	5840      	ldr	r0, [r0, r1]
   102a8:	2800      	cmp	r0, #0
   102aa:	d000      	beq.n	102ae <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x5c>
   102ac:	2001      	movs	r0, #1
   102ae:	4770      	bx	lr
   102b0:	5840      	ldr	r0, [r0, r1]
   102b2:	2800      	cmp	r0, #0
   102b4:	d000      	beq.n	102b8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x66>
   102b6:	2001      	movs	r0, #1
   102b8:	4770      	bx	lr

000102ba <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   102ba:	b510      	push	{r4, lr}
   102bc:	4604      	mov	r4, r0
   102be:	4608      	mov	r0, r1
   102c0:	f7f7 ff30 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102c8:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   102cc:	fbb0 f0f1 	udiv	r0, r0, r1
   102d0:	1a20      	subs	r0, r4, r0
   102d2:	1e80      	subs	r0, r0, #2
   102d4:	bd10      	pop	{r4, pc}

000102d6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   102d6:	b510      	push	{r4, lr}
   102d8:	4604      	mov	r4, r0
   102da:	4608      	mov	r0, r1
   102dc:	f7f7 ff22 	bl	8124 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   102e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   102e4:	fbb0 f0f1 	udiv	r0, r0, r1
   102e8:	1a20      	subs	r0, r4, r0
   102ea:	bd10      	pop	{r4, pc}
   102ec:	2804      	cmp	r0, #4
   102ee:	d202      	bcs.n	102f6 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x20>
   102f0:	f04f 0028 	mov.w	r0, #40	; 0x28
   102f4:	4770      	bx	lr
   102f6:	d102      	bne.n	102fe <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x28>
   102f8:	f04f 0010 	mov.w	r0, #16
   102fc:	4770      	bx	lr
   102fe:	f04f 0000 	mov.w	r0, #0
   10302:	4770      	bx	lr
   10304:	2100      	movs	r1, #0
   10306:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
   1030a:	f800 1f24 	strb.w	r1, [r0, #36]!
   1030e:	7041      	strb	r1, [r0, #1]
   10310:	4770      	bx	lr

00010312 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
   10312:	b570      	push	{r4, r5, r6, lr}
   10314:	f7f8 fcc6 	bl	8ca4 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
   10318:	4605      	mov	r5, r0
   1031a:	2400      	movs	r4, #0
   1031c:	e006      	b.n	1032c <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
   1031e:	4620      	mov	r0, r4
   10320:	f7f8 fcc6 	bl	8cb0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
   10324:	f7ff ffee 	bl	10304 <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y+0x2e>
   10328:	1c64      	adds	r4, r4, #1
   1032a:	b2e4      	uxtb	r4, r4
   1032c:	42ac      	cmp	r4, r5
   1032e:	d3f6      	bcc.n	1031e <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
   10330:	bd70      	pop	{r4, r5, r6, pc}

00010332 <sym_6TZLBWMEWRMPI4KKAUVLC2XHUBDGXEA4B4JJJYQ>:
   10332:	f7fb b8c5 	b.w	b4c0 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>

00010336 <sym_F77FUTRRLLWPYDS7BBANG2WE3C4EDMYMAPNI54A>:
   10336:	b510      	push	{r4, lr}
   10338:	2000      	movs	r0, #0
   1033a:	f7fb fbfb 	bl	bb34 <sym_DY4TH3UYBBOUULSDPZZ7Y6J5DTNRGWFEBHJXKVA>
   1033e:	6800      	ldr	r0, [r0, #0]
   10340:	2800      	cmp	r0, #0
   10342:	bf18      	it	ne
   10344:	2001      	movne	r0, #1
   10346:	bd10      	pop	{r4, pc}

00010348 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
   10348:	0a41      	lsrs	r1, r0, #9
   1034a:	f643 5209 	movw	r2, #15625	; 0x3d09
   1034e:	4351      	muls	r1, r2
   10350:	f3c0 0008 	ubfx	r0, r0, #0, #9
   10354:	fb10 f002 	smulbb	r0, r0, r2
   10358:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1035c:	eb01 2050 	add.w	r0, r1, r0, lsr #9
   10360:	4770      	bx	lr
   10362:	2800      	cmp	r0, #0
   10364:	db09      	blt.n	1037a <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x32>
   10366:	f000 021f 	and.w	r2, r0, #31
   1036a:	2101      	movs	r1, #1
   1036c:	4091      	lsls	r1, r2
   1036e:	0940      	lsrs	r0, r0, #5
   10370:	0080      	lsls	r0, r0, #2
   10372:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10376:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1037a:	4770      	bx	lr
   1037c:	2800      	cmp	r0, #0
   1037e:	db0d      	blt.n	1039c <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x54>
   10380:	f000 021f 	and.w	r2, r0, #31
   10384:	2101      	movs	r1, #1
   10386:	4091      	lsls	r1, r2
   10388:	0940      	lsrs	r0, r0, #5
   1038a:	0080      	lsls	r0, r0, #2
   1038c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10390:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10394:	f3bf 8f4f 	dsb	sy
   10398:	f3bf 8f6f 	isb	sy
   1039c:	4770      	bx	lr
   1039e:	5840      	ldr	r0, [r0, r1]
   103a0:	2800      	cmp	r0, #0
   103a2:	d000      	beq.n	103a6 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x5e>
   103a4:	2001      	movs	r0, #1
   103a6:	4770      	bx	lr
   103a8:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
   103ac:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
   103b0:	f002 0201 	and.w	r2, r2, #1
   103b4:	03c0      	lsls	r0, r0, #15
   103b6:	d503      	bpl.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103b8:	428a      	cmp	r2, r1
   103ba:	d101      	bne.n	103c0 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI+0x78>
   103bc:	2001      	movs	r0, #1
   103be:	4770      	bx	lr
   103c0:	2000      	movs	r0, #0
   103c2:	4770      	bx	lr

000103c4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
   103c4:	b510      	push	{r4, lr}
   103c6:	2101      	movs	r1, #1
   103c8:	0788      	lsls	r0, r1, #30
   103ca:	f7fb ff6f 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   103ce:	2800      	cmp	r0, #0
   103d0:	d000      	beq.n	103d4 <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
   103d2:	2001      	movs	r0, #1
   103d4:	bd10      	pop	{r4, pc}

000103d6 <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
   103d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   103da:	2101      	movs	r1, #1
   103dc:	6001      	str	r1, [r0, #0]
   103de:	4770      	bx	lr

000103e0 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
   103e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   103e4:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
   103e8:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
   103ec:	f002 0203 	and.w	r2, r2, #3
   103f0:	03c9      	lsls	r1, r1, #15
   103f2:	d503      	bpl.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f4:	4282      	cmp	r2, r0
   103f6:	d101      	bne.n	103fc <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
   103f8:	2001      	movs	r0, #1
   103fa:	4770      	bx	lr
   103fc:	2000      	movs	r0, #0
   103fe:	4770      	bx	lr

00010400 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
   10400:	b510      	push	{r4, lr}
   10402:	2100      	movs	r1, #0
   10404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   10408:	f7fb ff50 	bl	c2ac <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
   1040c:	2800      	cmp	r0, #0
   1040e:	d000      	beq.n	10412 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
   10410:	2001      	movs	r0, #1
   10412:	bd10      	pop	{r4, pc}
   10414:	2800      	cmp	r0, #0
   10416:	db09      	blt.n	1042c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
   10418:	f000 021f 	and.w	r2, r0, #31
   1041c:	2101      	movs	r1, #1
   1041e:	4091      	lsls	r1, r2
   10420:	0940      	lsrs	r0, r0, #5
   10422:	0080      	lsls	r0, r0, #2
   10424:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10428:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   1042c:	4770      	bx	lr
   1042e:	2800      	cmp	r0, #0
   10430:	db0d      	blt.n	1044e <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
   10432:	f000 021f 	and.w	r2, r0, #31
   10436:	2101      	movs	r1, #1
   10438:	4091      	lsls	r1, r2
   1043a:	0940      	lsrs	r0, r0, #5
   1043c:	0080      	lsls	r0, r0, #2
   1043e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10442:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10446:	f3bf 8f4f 	dsb	sy
   1044a:	f3bf 8f6f 	isb	sy
   1044e:	4770      	bx	lr
   10450:	00021000 	.word	0x00021000
   10454:	000000fa 	.word	0x000000fa
   10458:	cc9ef18c 	.word	0xcc9ef18c
   1045c:	a7d74134 	.word	0xa7d74134
   10460:	1459f70e 	.word	0x1459f70e
   10464:	67d72bbb 	.word	0x67d72bbb
   10468:	ebbebb7f 	.word	0xebbebb7f
   1046c:	2800      	cmp	r0, #0
   1046e:	db09      	blt.n	10484 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
   10470:	f000 021f 	and.w	r2, r0, #31
   10474:	2101      	movs	r1, #1
   10476:	4091      	lsls	r1, r2
   10478:	0940      	lsrs	r0, r0, #5
   1047a:	0080      	lsls	r0, r0, #2
   1047c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10480:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10484:	4770      	bx	lr

00010486 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
   10486:	f3ef 8110 	mrs	r1, PRIMASK
   1048a:	b672      	cpsid	i
   1048c:	7802      	ldrb	r2, [r0, #0]
   1048e:	2a01      	cmp	r2, #1
   10490:	d001      	beq.n	10496 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
   10492:	2201      	movs	r2, #1
   10494:	e000      	b.n	10498 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
   10496:	2200      	movs	r2, #0
   10498:	2301      	movs	r3, #1
   1049a:	7003      	strb	r3, [r0, #0]
   1049c:	b901      	cbnz	r1, 104a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
   1049e:	b662      	cpsie	i
   104a0:	b10a      	cbz	r2, 104a6 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
   104a2:	2000      	movs	r0, #0
   104a4:	4770      	bx	lr
   104a6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   104aa:	4770      	bx	lr

000104ac <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
   104ac:	2100      	movs	r1, #0
   104ae:	7001      	strb	r1, [r0, #0]
   104b0:	4608      	mov	r0, r1
   104b2:	4770      	bx	lr

000104b4 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
   104b4:	f3ef 8110 	mrs	r1, PRIMASK
   104b8:	b672      	cpsid	i
   104ba:	2200      	movs	r2, #0
   104bc:	7002      	strb	r2, [r0, #0]
   104be:	b901      	cbnz	r1, 104c2 <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
   104c0:	b662      	cpsie	i
   104c2:	2000      	movs	r0, #0
   104c4:	4770      	bx	lr

000104c6 <mpsl_low_priority_process>:
   104c6:	f7fc b847 	b.w	c558 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

000104ca <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
   104ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104ce:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104d2:	280f      	cmp	r0, #15
   104d4:	d001      	beq.n	104da <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
   104d6:	2000      	movs	r0, #0
   104d8:	4770      	bx	lr
   104da:	2001      	movs	r0, #1
   104dc:	4770      	bx	lr

000104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
   104de:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104e2:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   104e6:	280a      	cmp	r0, #10
   104e8:	d001      	beq.n	104ee <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
   104ea:	2000      	movs	r0, #0
   104ec:	4770      	bx	lr
   104ee:	2001      	movs	r0, #1
   104f0:	4770      	bx	lr

000104f2 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
   104f2:	b500      	push	{lr}
   104f4:	f7ff fff3 	bl	104de <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   104f8:	b120      	cbz	r0, 10504 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
   104fa:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   104fe:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   10502:	b108      	cbz	r0, 10508 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
   10504:	2000      	movs	r0, #0
   10506:	bd00      	pop	{pc}
   10508:	2001      	movs	r0, #1
   1050a:	bd00      	pop	{pc}

0001050c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
   1050c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10510:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10514:	280e      	cmp	r0, #14
   10516:	d001      	beq.n	1051c <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
   10518:	2000      	movs	r0, #0
   1051a:	4770      	bx	lr
   1051c:	2001      	movs	r0, #1
   1051e:	4770      	bx	lr

00010520 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
   10520:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10524:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10528:	2810      	cmp	r0, #16
   1052a:	d001      	beq.n	10530 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
   1052c:	2000      	movs	r0, #0
   1052e:	4770      	bx	lr
   10530:	2001      	movs	r0, #1
   10532:	4770      	bx	lr

00010534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
   10534:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10538:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   1053c:	2806      	cmp	r0, #6
   1053e:	d003      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10540:	1c40      	adds	r0, r0, #1
   10542:	d001      	beq.n	10548 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
   10544:	2000      	movs	r0, #0
   10546:	4770      	bx	lr
   10548:	2001      	movs	r0, #1
   1054a:	4770      	bx	lr

0001054c <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
   1054c:	b500      	push	{lr}
   1054e:	f7ff fff1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10552:	b148      	cbz	r0, 10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10554:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10558:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1055c:	2806      	cmp	r0, #6
   1055e:	d303      	bcc.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10560:	1c40      	adds	r0, r0, #1
   10562:	d001      	beq.n	10568 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
   10564:	2001      	movs	r0, #1
   10566:	bd00      	pop	{pc}
   10568:	2000      	movs	r0, #0
   1056a:	bd00      	pop	{pc}

0001056c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
   1056c:	b500      	push	{lr}
   1056e:	f7ff ffe1 	bl	10534 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   10572:	b138      	cbz	r0, 10584 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
   10574:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10578:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
   1057c:	2806      	cmp	r0, #6
   1057e:	d303      	bcc.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10580:	1c40      	adds	r0, r0, #1
   10582:	d001      	beq.n	10588 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
   10584:	2000      	movs	r0, #0
   10586:	bd00      	pop	{pc}
   10588:	2001      	movs	r0, #1
   1058a:	bd00      	pop	{pc}

0001058c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
   1058c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   10590:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   10594:	280d      	cmp	r0, #13
   10596:	d001      	beq.n	1059c <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
   10598:	2000      	movs	r0, #0
   1059a:	4770      	bx	lr
   1059c:	2001      	movs	r0, #1
   1059e:	4770      	bx	lr

000105a0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
   105a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
   105a4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
   105a8:	2808      	cmp	r0, #8
   105aa:	d001      	beq.n	105b0 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
   105ac:	2000      	movs	r0, #0
   105ae:	4770      	bx	lr
   105b0:	2001      	movs	r0, #1
   105b2:	4770      	bx	lr

000105b4 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
   105b4:	f7fc b80a 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105b8 <sym_PHK7RXLFFTGYQNCW3IEEUVLOAYXWQJQYEN3DT7Y>:
   105b8:	f7fc b808 	b.w	c5cc <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x2c>

000105bc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA>:
   105bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   105c0:	428a      	cmp	r2, r1
   105c2:	d803      	bhi.n	105cc <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x10>
   105c4:	2179      	movs	r1, #121	; 0x79
   105c6:	2096      	movs	r0, #150	; 0x96
   105c8:	f7fb fec6 	bl	c358 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
   105cc:	fab2 f382 	clz	r3, r2
   105d0:	b13b      	cbz	r3, 105e2 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x26>
   105d2:	4099      	lsls	r1, r3
   105d4:	f1c3 0420 	rsb	r4, r3, #32
   105d8:	fa20 f404 	lsr.w	r4, r0, r4
   105dc:	4321      	orrs	r1, r4
   105de:	4098      	lsls	r0, r3
   105e0:	409a      	lsls	r2, r3
   105e2:	0c14      	lsrs	r4, r2, #16
   105e4:	0c07      	lsrs	r7, r0, #16
   105e6:	b286      	uxth	r6, r0
   105e8:	fbb1 f0f4 	udiv	r0, r1, r4
   105ec:	fbb1 f3f4 	udiv	r3, r1, r4
   105f0:	fb04 1c10 	mls	ip, r4, r0, r1
   105f4:	b295      	uxth	r5, r2
   105f6:	fb03 f005 	mul.w	r0, r3, r5
   105fa:	eb07 4c0c 	add.w	ip, r7, ip, lsl #16
   105fe:	4560      	cmp	r0, ip
   10600:	d907      	bls.n	10612 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x56>
   10602:	eba0 000c 	sub.w	r0, r0, ip
   10606:	4290      	cmp	r0, r2
   10608:	d901      	bls.n	1060e <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x52>
   1060a:	2002      	movs	r0, #2
   1060c:	e000      	b.n	10610 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x54>
   1060e:	2001      	movs	r0, #1
   10610:	1a1b      	subs	r3, r3, r0
   10612:	0409      	lsls	r1, r1, #16
   10614:	0418      	lsls	r0, r3, #16
   10616:	19c9      	adds	r1, r1, r7
   10618:	fba3 3702 	umull	r3, r7, r3, r2
   1061c:	1acf      	subs	r7, r1, r3
   1061e:	fbb7 f1f4 	udiv	r1, r7, r4
   10622:	fbb7 f3f4 	udiv	r3, r7, r4
   10626:	fb04 7413 	mls	r4, r4, r3, r7
   1062a:	fb01 f305 	mul.w	r3, r1, r5
   1062e:	eb06 4404 	add.w	r4, r6, r4, lsl #16
   10632:	42a3      	cmp	r3, r4
   10634:	d906      	bls.n	10644 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x88>
   10636:	1b1b      	subs	r3, r3, r4
   10638:	4293      	cmp	r3, r2
   1063a:	d901      	bls.n	10640 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x84>
   1063c:	2202      	movs	r2, #2
   1063e:	e000      	b.n	10642 <sym_Y4YRJRQYBZO6PGAQYLST7K67PDXS4EJWF2FNNKA+0x86>
   10640:	2201      	movs	r2, #1
   10642:	1a89      	subs	r1, r1, r2
   10644:	4308      	orrs	r0, r1
   10646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001064a <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
   1064a:	2a00      	cmp	r2, #0
   1064c:	bf04      	itt	eq
   1064e:	2000      	moveq	r0, #0
   10650:	4770      	bxeq	lr
   10652:	1e52      	subs	r2, r2, #1
   10654:	d007      	beq.n	10666 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
   10656:	7803      	ldrb	r3, [r0, #0]
   10658:	f891 c000 	ldrb.w	ip, [r1]
   1065c:	4563      	cmp	r3, ip
   1065e:	bf04      	itt	eq
   10660:	1c40      	addeq	r0, r0, #1
   10662:	1c49      	addeq	r1, r1, #1
   10664:	d0f5      	beq.n	10652 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
   10666:	7800      	ldrb	r0, [r0, #0]
   10668:	7809      	ldrb	r1, [r1, #0]
   1066a:	1a40      	subs	r0, r0, r1
   1066c:	4770      	bx	lr

0001066e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
   1066e:	b4f0      	push	{r4, r5, r6, r7}
   10670:	ea80 0c01 	eor.w	ip, r0, r1
   10674:	4603      	mov	r3, r0
   10676:	f01c 0f03 	tst.w	ip, #3
   1067a:	d13c      	bne.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   1067c:	f013 0f03 	tst.w	r3, #3
   10680:	d00b      	beq.n	1069a <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
   10682:	2a00      	cmp	r2, #0
   10684:	bf04      	itt	eq
   10686:	bcf0      	popeq	{r4, r5, r6, r7}
   10688:	4770      	bxeq	lr
   1068a:	f811 cb01 	ldrb.w	ip, [r1], #1
   1068e:	f803 cb01 	strb.w	ip, [r3], #1
   10692:	1e52      	subs	r2, r2, #1
   10694:	f013 0f03 	tst.w	r3, #3
   10698:	d1f3      	bne.n	10682 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
   1069a:	2a03      	cmp	r2, #3
   1069c:	d94f      	bls.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   1069e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   106a2:	d24c      	bcs.n	1073e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
   106a4:	f1c2 0c00 	rsb	ip, r2, #0
   106a8:	ea4f 74ec 	mov.w	r4, ip, asr #31
   106ac:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
   106b0:	ea4f 0cac 	mov.w	ip, ip, asr #2
   106b4:	f1cc 0c00 	rsb	ip, ip, #0
   106b8:	f1bc 0f00 	cmp.w	ip, #0
   106bc:	dd1b      	ble.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   106be:	1f0d      	subs	r5, r1, #4
   106c0:	1f1c      	subs	r4, r3, #4
   106c2:	f01c 0f01 	tst.w	ip, #1
   106c6:	d003      	beq.n	106d0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
   106c8:	f855 6f04 	ldr.w	r6, [r5, #4]!
   106cc:	f844 6f04 	str.w	r6, [r4, #4]!
   106d0:	ea5f 066c 	movs.w	r6, ip, asr #1
   106d4:	d007      	beq.n	106e6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
   106d6:	686f      	ldr	r7, [r5, #4]
   106d8:	6067      	str	r7, [r4, #4]
   106da:	f855 7f08 	ldr.w	r7, [r5, #8]!
   106de:	f844 7f08 	str.w	r7, [r4, #8]!
   106e2:	1e76      	subs	r6, r6, #1
   106e4:	d1f7      	bne.n	106d6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
   106e6:	eb01 018c 	add.w	r1, r1, ip, lsl #2
   106ea:	eb03 038c 	add.w	r3, r3, ip, lsl #2
   106ee:	f1cc 0c00 	rsb	ip, ip, #0
   106f2:	eb02 028c 	add.w	r2, r2, ip, lsl #2
   106f6:	2a00      	cmp	r2, #0
   106f8:	bf04      	itt	eq
   106fa:	bcf0      	popeq	{r4, r5, r6, r7}
   106fc:	4770      	bxeq	lr
   106fe:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10702:	d226      	bcs.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   10704:	2a00      	cmp	r2, #0
   10706:	bfdc      	itt	le
   10708:	bcf0      	pople	{r4, r5, r6, r7}
   1070a:	4770      	bxle	lr
   1070c:	1e49      	subs	r1, r1, #1
   1070e:	1e5b      	subs	r3, r3, #1
   10710:	f012 0f01 	tst.w	r2, #1
   10714:	d003      	beq.n	1071e <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
   10716:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   1071a:	f803 cf01 	strb.w	ip, [r3, #1]!
   1071e:	1052      	asrs	r2, r2, #1
   10720:	bf04      	itt	eq
   10722:	bcf0      	popeq	{r4, r5, r6, r7}
   10724:	4770      	bxeq	lr
   10726:	f891 c001 	ldrb.w	ip, [r1, #1]
   1072a:	f883 c001 	strb.w	ip, [r3, #1]
   1072e:	f811 cf02 	ldrb.w	ip, [r1, #2]!
   10732:	f803 cf02 	strb.w	ip, [r3, #2]!
   10736:	1e52      	subs	r2, r2, #1
   10738:	d1f5      	bne.n	10726 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
   1073a:	bcf0      	pop	{r4, r5, r6, r7}
   1073c:	4770      	bx	lr
   1073e:	2a04      	cmp	r2, #4
   10740:	d3d9      	bcc.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10742:	f851 cb04 	ldr.w	ip, [r1], #4
   10746:	1f12      	subs	r2, r2, #4
   10748:	f843 cb04 	str.w	ip, [r3], #4
   1074c:	2a04      	cmp	r2, #4
   1074e:	d2f8      	bcs.n	10742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
   10750:	e7d1      	b.n	106f6 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
   10752:	f811 cb01 	ldrb.w	ip, [r1], #1
   10756:	f803 cb01 	strb.w	ip, [r3], #1
   1075a:	1e52      	subs	r2, r2, #1
   1075c:	d1f9      	bne.n	10752 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
   1075e:	bcf0      	pop	{r4, r5, r6, r7}
   10760:	4770      	bx	lr

00010762 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
   10762:	b470      	push	{r4, r5, r6}
   10764:	4603      	mov	r3, r0
   10766:	f001 0cff 	and.w	ip, r1, #255	; 0xff
   1076a:	f010 0f03 	tst.w	r0, #3
   1076e:	d009      	beq.n	10784 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
   10770:	2a00      	cmp	r2, #0
   10772:	bf04      	itt	eq
   10774:	bc70      	popeq	{r4, r5, r6}
   10776:	4770      	bxeq	lr
   10778:	f803 cb01 	strb.w	ip, [r3], #1
   1077c:	1e52      	subs	r2, r2, #1
   1077e:	f013 0f03 	tst.w	r3, #3
   10782:	d1f5      	bne.n	10770 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
   10784:	b2c9      	uxtb	r1, r1
   10786:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1078a:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
   1078e:	2a03      	cmp	r2, #3
   10790:	d939      	bls.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10792:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10796:	d236      	bcs.n	10806 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
   10798:	4251      	negs	r1, r2
   1079a:	17cc      	asrs	r4, r1, #31
   1079c:	eb01 7194 	add.w	r1, r1, r4, lsr #30
   107a0:	1089      	asrs	r1, r1, #2
   107a2:	424e      	negs	r6, r1
   107a4:	2e00      	cmp	r6, #0
   107a6:	dd11      	ble.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   107a8:	1f19      	subs	r1, r3, #4
   107aa:	f016 0f01 	tst.w	r6, #1
   107ae:	bf18      	it	ne
   107b0:	f841 5f04 	strne.w	r5, [r1, #4]!
   107b4:	1074      	asrs	r4, r6, #1
   107b6:	d004      	beq.n	107c2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
   107b8:	604d      	str	r5, [r1, #4]
   107ba:	f841 5f08 	str.w	r5, [r1, #8]!
   107be:	1e64      	subs	r4, r4, #1
   107c0:	d1fa      	bne.n	107b8 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
   107c2:	4271      	negs	r1, r6
   107c4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
   107c8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   107cc:	2a00      	cmp	r2, #0
   107ce:	bf04      	itt	eq
   107d0:	bc70      	popeq	{r4, r5, r6}
   107d2:	4770      	bxeq	lr
   107d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   107d8:	d21d      	bcs.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   107da:	2a00      	cmp	r2, #0
   107dc:	bfdc      	itt	le
   107de:	bc70      	pople	{r4, r5, r6}
   107e0:	4770      	bxle	lr
   107e2:	1e59      	subs	r1, r3, #1
   107e4:	f012 0f01 	tst.w	r2, #1
   107e8:	bf18      	it	ne
   107ea:	f801 cf01 	strbne.w	ip, [r1, #1]!
   107ee:	1052      	asrs	r2, r2, #1
   107f0:	bf04      	itt	eq
   107f2:	bc70      	popeq	{r4, r5, r6}
   107f4:	4770      	bxeq	lr
   107f6:	f881 c001 	strb.w	ip, [r1, #1]
   107fa:	f801 cf02 	strb.w	ip, [r1, #2]!
   107fe:	1e52      	subs	r2, r2, #1
   10800:	d1f9      	bne.n	107f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
   10802:	bc70      	pop	{r4, r5, r6}
   10804:	4770      	bx	lr
   10806:	2a04      	cmp	r2, #4
   10808:	d3e0      	bcc.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   1080a:	1f12      	subs	r2, r2, #4
   1080c:	f843 5b04 	str.w	r5, [r3], #4
   10810:	2a04      	cmp	r2, #4
   10812:	d2fa      	bcs.n	1080a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
   10814:	e7da      	b.n	107cc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
   10816:	f803 cb01 	strb.w	ip, [r3], #1
   1081a:	1e52      	subs	r2, r2, #1
   1081c:	d1fb      	bne.n	10816 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
   1081e:	bc70      	pop	{r4, r5, r6}
   10820:	4770      	bx	lr
   10822:	f04f 30ff 	mov.w	r0, #4294967295
   10826:	4770      	bx	lr
   10828:	2000      	movs	r0, #0
   1082a:	4770      	bx	lr
   1082c:	2000      	movs	r0, #0
   1082e:	4770      	bx	lr
   10830:	f04f 30ff 	mov.w	r0, #4294967295
   10834:	4770      	bx	lr
   10836:	4770      	bx	lr
   10838:	4770      	bx	lr
   1083a:	2000      	movs	r0, #0
   1083c:	4770      	bx	lr
   1083e:	2100      	movs	r1, #0
   10840:	7001      	strb	r1, [r0, #0]
   10842:	4770      	bx	lr
   10844:	f04f 30ff 	mov.w	r0, #4294967295
   10848:	4770      	bx	lr
   1084a:	f04f 30ff 	mov.w	r0, #4294967295
   1084e:	4770      	bx	lr
   10850:	2100      	movs	r1, #0
   10852:	7001      	strb	r1, [r0, #0]
   10854:	4770      	bx	lr
   10856:	f04f 30ff 	mov.w	r0, #4294967295
   1085a:	4770      	bx	lr
   1085c:	f04f 30ff 	mov.w	r0, #4294967295
   10860:	4770      	bx	lr
   10862:	7800      	ldrb	r0, [r0, #0]
   10864:	2800      	cmp	r0, #0
   10866:	d001      	beq.n	1086c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x10a>
   10868:	f06f 0015 	mvn.w	r0, #21
   1086c:	4770      	bx	lr
   1086e:	2000      	movs	r0, #0
   10870:	4770      	bx	lr
   10872:	2200      	movs	r2, #0
   10874:	f000 b802 	b.w	1087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00010878 <mpsl_fem_init>:
   10878:	f7f8 b982 	b.w	8b80 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

0001087c <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
   1087c:	b570      	push	{r4, r5, r6, lr}
   1087e:	4614      	mov	r4, r2
   10880:	460d      	mov	r5, r1
   10882:	1b00      	subs	r0, r0, r4
   10884:	f06f 017f 	mvn.w	r1, #127	; 0x7f
   10888:	4288      	cmp	r0, r1
   1088a:	da01      	bge.n	10890 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
   1088c:	4608      	mov	r0, r1
   1088e:	e002      	b.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10890:	287f      	cmp	r0, #127	; 0x7f
   10892:	dd00      	ble.n	10896 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
   10894:	207f      	movs	r0, #127	; 0x7f
   10896:	4619      	mov	r1, r3
   10898:	b240      	sxtb	r0, r0
   1089a:	f7f8 f9a5 	bl	8be8 <mpsl_tx_power_radio_supported_power_adjust>
   1089e:	7028      	strb	r0, [r5, #0]
   108a0:	706c      	strb	r4, [r5, #1]
   108a2:	2100      	movs	r1, #0
   108a4:	4420      	add	r0, r4
   108a6:	70a9      	strb	r1, [r5, #2]
   108a8:	b240      	sxtb	r0, r0
   108aa:	bd70      	pop	{r4, r5, r6, pc}
   108ac:	1702080c 	.word	0x1702080c
   108b0:	0201010d 	.word	0x0201010d
   108b4:	01010909 	.word	0x01010909
   108b8:	18090206 	.word	0x18090206
   108bc:	01010318 	.word	0x01010318
   108c0:	03030909 	.word	0x03030909
   108c4:	01020305 	.word	0x01020305
   108c8:	24020223 	.word	0x24020223
   108cc:	04041009 	.word	0x04041009
   108d0:	0b0b0505 	.word	0x0b0b0505
   108d4:	0b04      	.short	0x0b04
   108d6:	2b          	.byte	0x2b
   108d7:	25          	.byte	0x25
   108d8:	2726      	.short	0x2726
   108da:	0301      	.short	0x0301
   108dc:	0101      	.short	0x0101
   108de:	01          	.byte	0x01
   108df:	d8          	.byte	0xd8
   108e0:	f8f4f0ec 	.word	0xf8f4f0ec
   108e4:	030200fc 	.word	0x030200fc
   108e8:	07060504 	.word	0x07060504
   108ec:	00000008 	.word	0x00000008
	...
   10900:	01010100 	.word	0x01010100
   10904:	02020201 	.word	0x02020201
   10908:	03030302 	.word	0x03030302
   1090c:	04040403 	.word	0x04040403
   10910:	05050504 	.word	0x05050504
   10914:	07060605 	.word	0x07060605
   10918:	0b0a0908 	.word	0x0b0a0908
   1091c:	00000d0c 	.word	0x00000d0c
	...
   10930:	01010000 	.word	0x01010000
   10934:	02020101 	.word	0x02020101
   10938:	03030202 	.word	0x03030202
   1093c:	04040303 	.word	0x04040303
   10940:	05050404 	.word	0x05050404
   10944:	06060505 	.word	0x06060505
   10948:	00090806 	.word	0x00090806

0001094c <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   1094c:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1094e:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
   10950:	b08a      	sub	sp, #40	; 0x28
   10952:	4604      	mov	r4, r0
   10954:	460e      	mov	r6, r1
   10956:	ad07      	add	r5, sp, #28
	switch (addr->type) {
   10958:	2b03      	cmp	r3, #3
   1095a:	d820      	bhi.n	1099e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
   1095c:	e8df f003 	tbb	[pc, r3]
   10960:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   10964:	4911      	ldr	r1, [pc, #68]	; (109ac <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   10966:	4628      	mov	r0, r5
   10968:	f00d fed4 	bl	1e714 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1096c:	9505      	str	r5, [sp, #20]
   1096e:	7863      	ldrb	r3, [r4, #1]
   10970:	9304      	str	r3, [sp, #16]
   10972:	78a3      	ldrb	r3, [r4, #2]
   10974:	9303      	str	r3, [sp, #12]
   10976:	78e3      	ldrb	r3, [r4, #3]
   10978:	9302      	str	r3, [sp, #8]
   1097a:	7923      	ldrb	r3, [r4, #4]
   1097c:	9301      	str	r3, [sp, #4]
   1097e:	7963      	ldrb	r3, [r4, #5]
   10980:	9300      	str	r3, [sp, #0]
   10982:	79a3      	ldrb	r3, [r4, #6]
   10984:	4a0a      	ldr	r2, [pc, #40]	; (109b0 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
   10986:	211e      	movs	r1, #30
   10988:	4630      	mov	r0, r6
   1098a:	f00d f8ab 	bl	1dae4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1098e:	b00a      	add	sp, #40	; 0x28
   10990:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
   10992:	4908      	ldr	r1, [pc, #32]	; (109b4 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
   10994:	e7e7      	b.n	10966 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
   10996:	4908      	ldr	r1, [pc, #32]	; (109b8 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
   10998:	e7e5      	b.n	10966 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
   1099a:	4908      	ldr	r1, [pc, #32]	; (109bc <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
   1099c:	e7e3      	b.n	10966 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1099e:	4a08      	ldr	r2, [pc, #32]	; (109c0 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
   109a0:	210a      	movs	r1, #10
   109a2:	4628      	mov	r0, r5
   109a4:	f00d f89e 	bl	1dae4 <snprintk>
		break;
   109a8:	e7e0      	b.n	1096c <bt_addr_le_to_str.constprop.0.isra.0+0x20>
   109aa:	bf00      	nop
   109ac:	00021da4 	.word	0x00021da4
   109b0:	00021dc6 	.word	0x00021dc6
   109b4:	00021dab 	.word	0x00021dab
   109b8:	00021db2 	.word	0x00021db2
   109bc:	00021dbc 	.word	0x00021dbc
   109c0:	000231e8 	.word	0x000231e8

000109c4 <disconnected>:
	}

}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   109c4:	b530      	push	{r4, r5, lr}
   109c6:	b093      	sub	sp, #76	; 0x4c
	char addr[BT_ADDR_LE_STR_LEN];

	int err;

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   109c8:	ad0a      	add	r5, sp, #40	; 0x28
{
   109ca:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   109cc:	f00e f932 	bl	1ec34 <bt_conn_get_dst>
   109d0:	4629      	mov	r1, r5
   109d2:	f7ff ffbb 	bl	1094c <bt_addr_le_to_str.constprop.0.isra.0>

	LOG_INF("Disconnected: %s (reason 0x%02x)\n", addr, reason);
   109d6:	e9cd 5403 	strd	r5, r4, [sp, #12]
   109da:	4b13      	ldr	r3, [pc, #76]	; (10a28 <disconnected+0x64>)

	// i dont understand this conn "ref" business
	//https://docs.zephyrproject.org/latest/connectivity/bluetooth/api/connection_mgmt.html
	bt_conn_unref(default_conn);
   109dc:	4d13      	ldr	r5, [pc, #76]	; (10a2c <disconnected+0x68>)
	LOG_INF("Disconnected: %s (reason 0x%02x)\n", addr, reason);
   109de:	4914      	ldr	r1, [pc, #80]	; (10a30 <disconnected+0x6c>)
   109e0:	9302      	str	r3, [sp, #8]
   109e2:	2400      	movs	r4, #0
   109e4:	4623      	mov	r3, r4
   109e6:	2203      	movs	r2, #3
   109e8:	4620      	mov	r0, r4
   109ea:	e9cd 4400 	strd	r4, r4, [sp]
   109ee:	f00c fffd 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(default_conn);
   109f2:	6828      	ldr	r0, [r5, #0]
   109f4:	f00e f8f0 	bl	1ebd8 <bt_conn_unref>
	default_conn = NULL;

	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   109f8:	4b0e      	ldr	r3, [pc, #56]	; (10a34 <disconnected+0x70>)
	default_conn = NULL;
   109fa:	602c      	str	r4, [r5, #0]
	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   109fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   109fe:	ad06      	add	r5, sp, #24
   10a00:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   10a04:	490c      	ldr	r1, [pc, #48]	; (10a38 <disconnected+0x74>)
   10a06:	4628      	mov	r0, r5
   10a08:	f005 fa08 	bl	15e1c <bt_conn_le_create_auto>
	if (err) {
   10a0c:	b148      	cbz	r0, 10a22 <disconnected+0x5e>
		LOG_ERR("Failed to start automatically connecting (err %d)");
   10a0e:	4b0b      	ldr	r3, [pc, #44]	; (10a3c <disconnected+0x78>)
   10a10:	4907      	ldr	r1, [pc, #28]	; (10a30 <disconnected+0x6c>)
   10a12:	9400      	str	r4, [sp, #0]
   10a14:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10a18:	2201      	movs	r2, #1
   10a1a:	4623      	mov	r3, r4
   10a1c:	4620      	mov	r0, r4
   10a1e:	f00c ffe5 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	}
}
   10a22:	b013      	add	sp, #76	; 0x4c
   10a24:	bd30      	pop	{r4, r5, pc}
   10a26:	bf00      	nop
   10a28:	00021de9 	.word	0x00021de9
   10a2c:	200024c0 	.word	0x200024c0
   10a30:	000216f4 	.word	0x000216f4
   10a34:	00021710 	.word	0x00021710
   10a38:	200007e4 	.word	0x200007e4
   10a3c:	00021e0b 	.word	0x00021e0b

00010a40 <connected>:
{
   10a40:	b530      	push	{r4, r5, lr}
   10a42:	b093      	sub	sp, #76	; 0x4c
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10a44:	ad0a      	add	r5, sp, #40	; 0x28
{
   10a46:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
   10a48:	f00e f8f4 	bl	1ec34 <bt_conn_get_dst>
   10a4c:	4629      	mov	r1, r5
   10a4e:	f7ff ff7d 	bl	1094c <bt_addr_le_to_str.constprop.0.isra.0>
	if (err) {
   10a52:	b344      	cbz	r4, 10aa6 <connected+0x66>
		LOG_WRN("Failed to connect to %s (%u)\n", addr, err);
   10a54:	e9cd 5403 	strd	r5, r4, [sp, #12]
   10a58:	4b19      	ldr	r3, [pc, #100]	; (10ac0 <connected+0x80>)
		bt_conn_unref(default_conn);
   10a5a:	4d1a      	ldr	r5, [pc, #104]	; (10ac4 <connected+0x84>)
		LOG_WRN("Failed to connect to %s (%u)\n", addr, err);
   10a5c:	491a      	ldr	r1, [pc, #104]	; (10ac8 <connected+0x88>)
   10a5e:	9302      	str	r3, [sp, #8]
   10a60:	2400      	movs	r4, #0
   10a62:	4623      	mov	r3, r4
   10a64:	2202      	movs	r2, #2
   10a66:	4620      	mov	r0, r4
   10a68:	e9cd 4400 	strd	r4, r4, [sp]
   10a6c:	f00c ffbe 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(default_conn);
   10a70:	6828      	ldr	r0, [r5, #0]
   10a72:	f00e f8b1 	bl	1ebd8 <bt_conn_unref>
		default_conn = NULL;
   10a76:	602c      	str	r4, [r5, #0]
	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   10a78:	4b14      	ldr	r3, [pc, #80]	; (10acc <connected+0x8c>)
   10a7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10a7c:	ac06      	add	r4, sp, #24
   10a7e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10a82:	4913      	ldr	r1, [pc, #76]	; (10ad0 <connected+0x90>)
   10a84:	4620      	mov	r0, r4
   10a86:	f005 f9c9 	bl	15e1c <bt_conn_le_create_auto>
	if (err) {
   10a8a:	b2c0      	uxtb	r0, r0
   10a8c:	b148      	cbz	r0, 10aa2 <connected+0x62>
		LOG_ERR("Failed to start automatically connecting (err %d)");
   10a8e:	4b11      	ldr	r3, [pc, #68]	; (10ad4 <connected+0x94>)
   10a90:	9302      	str	r3, [sp, #8]
   10a92:	2300      	movs	r3, #0
   10a94:	e9cd 3300 	strd	r3, r3, [sp]
   10a98:	490b      	ldr	r1, [pc, #44]	; (10ac8 <connected+0x88>)
   10a9a:	2201      	movs	r2, #1
   10a9c:	4618      	mov	r0, r3
   10a9e:	f00c ffa5 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
}
   10aa2:	b013      	add	sp, #76	; 0x4c
   10aa4:	bd30      	pop	{r4, r5, pc}
		LOG_INF("Connected: %s\n", addr);
   10aa6:	4b0c      	ldr	r3, [pc, #48]	; (10ad8 <connected+0x98>)
   10aa8:	4907      	ldr	r1, [pc, #28]	; (10ac8 <connected+0x88>)
   10aaa:	9503      	str	r5, [sp, #12]
   10aac:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10ab0:	9400      	str	r4, [sp, #0]
   10ab2:	4623      	mov	r3, r4
   10ab4:	2203      	movs	r2, #3
   10ab6:	4620      	mov	r0, r4
   10ab8:	f00c ff98 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
   10abc:	e7dc      	b.n	10a78 <connected+0x38>
   10abe:	bf00      	nop
   10ac0:	00021e3d 	.word	0x00021e3d
   10ac4:	200024c0 	.word	0x200024c0
   10ac8:	000216f4 	.word	0x000216f4
   10acc:	00021710 	.word	0x00021710
   10ad0:	200007e4 	.word	0x200007e4
   10ad4:	00021e0b 	.word	0x00021e0b
   10ad8:	00021e5b 	.word	0x00021e5b

00010adc <main>:

/* --- WORK FUNCTIONS END --- */


void main(void)
{
   10adc:	b510      	push	{r4, lr}
   10ade:	b08a      	sub	sp, #40	; 0x28
	LOG_INF("Running ttpms_v2_receiver");
   10ae0:	2400      	movs	r4, #0
   10ae2:	4ba6      	ldr	r3, [pc, #664]	; (10d7c <main+0x2a0>)
   10ae4:	49a6      	ldr	r1, [pc, #664]	; (10d80 <main+0x2a4>)
   10ae6:	9302      	str	r3, [sp, #8]
   10ae8:	2203      	movs	r2, #3
   10aea:	4620      	mov	r0, r4
   10aec:	e9cd 4400 	strd	r4, r4, [sp]
   10af0:	4623      	mov	r3, r4
   10af2:	f00c ff7b 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	*/

	bt_addr_le_t addr;

	// create self BT address
	err = bt_addr_le_from_str(TTPMS_RX_BT_ID, "random", &addr);
   10af6:	49a3      	ldr	r1, [pc, #652]	; (10d84 <main+0x2a8>)
   10af8:	48a3      	ldr	r0, [pc, #652]	; (10d88 <main+0x2ac>)
   10afa:	aa04      	add	r2, sp, #16
   10afc:	f002 fc7a 	bl	133f4 <bt_addr_le_from_str>
	if (err) {
   10b00:	b150      	cbz	r0, 10b18 <main+0x3c>
		LOG_WRN("Invalid BT address (err %d)\n", err);
   10b02:	4ba2      	ldr	r3, [pc, #648]	; (10d8c <main+0x2b0>)
   10b04:	9003      	str	r0, [sp, #12]
   10b06:	e9cd 4301 	strd	r4, r3, [sp, #4]
   10b0a:	499d      	ldr	r1, [pc, #628]	; (10d80 <main+0x2a4>)
   10b0c:	9400      	str	r4, [sp, #0]
   10b0e:	4623      	mov	r3, r4
   10b10:	2202      	movs	r2, #2
   10b12:	4620      	mov	r0, r4
   10b14:	f00c ff6a 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	}

	// assign self BT address
	err = bt_id_create(&addr, NULL);
   10b18:	2100      	movs	r1, #0
   10b1a:	a804      	add	r0, sp, #16
   10b1c:	f004 f962 	bl	14de4 <bt_id_create>
	if (err < 0) {
   10b20:	2800      	cmp	r0, #0
   10b22:	da0a      	bge.n	10b3a <main+0x5e>
		LOG_WRN("Creating new BT ID failed (err %d)\n", err);
   10b24:	4b9a      	ldr	r3, [pc, #616]	; (10d90 <main+0x2b4>)
   10b26:	9302      	str	r3, [sp, #8]
   10b28:	2300      	movs	r3, #0
   10b2a:	9003      	str	r0, [sp, #12]
   10b2c:	e9cd 3300 	strd	r3, r3, [sp]
   10b30:	4993      	ldr	r1, [pc, #588]	; (10d80 <main+0x2a4>)
   10b32:	2202      	movs	r2, #2
   10b34:	4618      	mov	r0, r3
   10b36:	f00c ff59 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	}

	err = bt_enable(NULL);
   10b3a:	2000      	movs	r0, #0
   10b3c:	f004 f80c 	bl	14b58 <bt_enable>
   10b40:	4603      	mov	r3, r0
	if (err) {
   10b42:	2800      	cmp	r0, #0
   10b44:	f000 8178 	beq.w	10e38 <main+0x35c>
		LOG_WRN("Bluetooth init failed (err %d)\n", err);
   10b48:	4b92      	ldr	r3, [pc, #584]	; (10d94 <main+0x2b8>)
   10b4a:	9302      	str	r3, [sp, #8]
   10b4c:	2300      	movs	r3, #0
   10b4e:	9003      	str	r0, [sp, #12]
   10b50:	e9cd 3300 	strd	r3, r3, [sp]
   10b54:	498a      	ldr	r1, [pc, #552]	; (10d80 <main+0x2a4>)
   10b56:	2202      	movs	r2, #2
   10b58:	4618      	mov	r0, r3
   10b5a:	f00c ff47 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	} else {
		LOG_INF("Bluetooth initialized\n");
	}

	// fill address variables for the devices we want to filter for
	err = bt_addr_le_from_str(TTPMS_IFL_BT_ID, "random", &IFL_bt_addr);
   10b5e:	4a8e      	ldr	r2, [pc, #568]	; (10d98 <main+0x2bc>)
   10b60:	4988      	ldr	r1, [pc, #544]	; (10d84 <main+0x2a8>)
   10b62:	488e      	ldr	r0, [pc, #568]	; (10d9c <main+0x2c0>)
   10b64:	f002 fc46 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10b68:	b150      	cbz	r0, 10b80 <main+0xa4>
   10b6a:	4b88      	ldr	r3, [pc, #544]	; (10d8c <main+0x2b0>)
   10b6c:	9302      	str	r3, [sp, #8]
   10b6e:	2300      	movs	r3, #0
   10b70:	9003      	str	r0, [sp, #12]
   10b72:	e9cd 3300 	strd	r3, r3, [sp]
   10b76:	4982      	ldr	r1, [pc, #520]	; (10d80 <main+0x2a4>)
   10b78:	2202      	movs	r2, #2
   10b7a:	4618      	mov	r0, r3
   10b7c:	f00c ff36 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_IFR_BT_ID, "random", &IFR_bt_addr);
   10b80:	4a87      	ldr	r2, [pc, #540]	; (10da0 <main+0x2c4>)
   10b82:	4980      	ldr	r1, [pc, #512]	; (10d84 <main+0x2a8>)
   10b84:	4887      	ldr	r0, [pc, #540]	; (10da4 <main+0x2c8>)
   10b86:	f002 fc35 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10b8a:	b150      	cbz	r0, 10ba2 <main+0xc6>
   10b8c:	4b7f      	ldr	r3, [pc, #508]	; (10d8c <main+0x2b0>)
   10b8e:	9302      	str	r3, [sp, #8]
   10b90:	2300      	movs	r3, #0
   10b92:	9003      	str	r0, [sp, #12]
   10b94:	e9cd 3300 	strd	r3, r3, [sp]
   10b98:	4979      	ldr	r1, [pc, #484]	; (10d80 <main+0x2a4>)
   10b9a:	2202      	movs	r2, #2
   10b9c:	4618      	mov	r0, r3
   10b9e:	f00c ff25 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_IRL_BT_ID, "random", &IRL_bt_addr);
   10ba2:	4a81      	ldr	r2, [pc, #516]	; (10da8 <main+0x2cc>)
   10ba4:	4977      	ldr	r1, [pc, #476]	; (10d84 <main+0x2a8>)
   10ba6:	4881      	ldr	r0, [pc, #516]	; (10dac <main+0x2d0>)
   10ba8:	f002 fc24 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10bac:	b150      	cbz	r0, 10bc4 <main+0xe8>
   10bae:	4b77      	ldr	r3, [pc, #476]	; (10d8c <main+0x2b0>)
   10bb0:	9302      	str	r3, [sp, #8]
   10bb2:	2300      	movs	r3, #0
   10bb4:	9003      	str	r0, [sp, #12]
   10bb6:	e9cd 3300 	strd	r3, r3, [sp]
   10bba:	4971      	ldr	r1, [pc, #452]	; (10d80 <main+0x2a4>)
   10bbc:	2202      	movs	r2, #2
   10bbe:	4618      	mov	r0, r3
   10bc0:	f00c ff14 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_IRR_BT_ID, "random", &IRR_bt_addr);
   10bc4:	4a7a      	ldr	r2, [pc, #488]	; (10db0 <main+0x2d4>)
   10bc6:	496f      	ldr	r1, [pc, #444]	; (10d84 <main+0x2a8>)
   10bc8:	487a      	ldr	r0, [pc, #488]	; (10db4 <main+0x2d8>)
   10bca:	f002 fc13 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10bce:	b150      	cbz	r0, 10be6 <main+0x10a>
   10bd0:	4b6e      	ldr	r3, [pc, #440]	; (10d8c <main+0x2b0>)
   10bd2:	9302      	str	r3, [sp, #8]
   10bd4:	2300      	movs	r3, #0
   10bd6:	9003      	str	r0, [sp, #12]
   10bd8:	e9cd 3300 	strd	r3, r3, [sp]
   10bdc:	4968      	ldr	r1, [pc, #416]	; (10d80 <main+0x2a4>)
   10bde:	2202      	movs	r2, #2
   10be0:	4618      	mov	r0, r3
   10be2:	f00c ff03 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_EFL_BT_ID, "random", &EFL_bt_addr);
   10be6:	4a74      	ldr	r2, [pc, #464]	; (10db8 <main+0x2dc>)
   10be8:	4966      	ldr	r1, [pc, #408]	; (10d84 <main+0x2a8>)
   10bea:	4874      	ldr	r0, [pc, #464]	; (10dbc <main+0x2e0>)
   10bec:	f002 fc02 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10bf0:	b150      	cbz	r0, 10c08 <main+0x12c>
   10bf2:	4b66      	ldr	r3, [pc, #408]	; (10d8c <main+0x2b0>)
   10bf4:	9302      	str	r3, [sp, #8]
   10bf6:	2300      	movs	r3, #0
   10bf8:	9003      	str	r0, [sp, #12]
   10bfa:	e9cd 3300 	strd	r3, r3, [sp]
   10bfe:	4960      	ldr	r1, [pc, #384]	; (10d80 <main+0x2a4>)
   10c00:	2202      	movs	r2, #2
   10c02:	4618      	mov	r0, r3
   10c04:	f00c fef2 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_EFR_BT_ID, "random", &EFR_bt_addr);
   10c08:	4a6d      	ldr	r2, [pc, #436]	; (10dc0 <main+0x2e4>)
   10c0a:	495e      	ldr	r1, [pc, #376]	; (10d84 <main+0x2a8>)
   10c0c:	486d      	ldr	r0, [pc, #436]	; (10dc4 <main+0x2e8>)
   10c0e:	f002 fbf1 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10c12:	b150      	cbz	r0, 10c2a <main+0x14e>
   10c14:	4b5d      	ldr	r3, [pc, #372]	; (10d8c <main+0x2b0>)
   10c16:	9302      	str	r3, [sp, #8]
   10c18:	2300      	movs	r3, #0
   10c1a:	9003      	str	r0, [sp, #12]
   10c1c:	e9cd 3300 	strd	r3, r3, [sp]
   10c20:	4957      	ldr	r1, [pc, #348]	; (10d80 <main+0x2a4>)
   10c22:	2202      	movs	r2, #2
   10c24:	4618      	mov	r0, r3
   10c26:	f00c fee1 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_ERL_BT_ID, "random", &ERL_bt_addr);
   10c2a:	4a67      	ldr	r2, [pc, #412]	; (10dc8 <main+0x2ec>)
   10c2c:	4955      	ldr	r1, [pc, #340]	; (10d84 <main+0x2a8>)
   10c2e:	4867      	ldr	r0, [pc, #412]	; (10dcc <main+0x2f0>)
   10c30:	f002 fbe0 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10c34:	b150      	cbz	r0, 10c4c <main+0x170>
   10c36:	4b55      	ldr	r3, [pc, #340]	; (10d8c <main+0x2b0>)
   10c38:	9302      	str	r3, [sp, #8]
   10c3a:	2300      	movs	r3, #0
   10c3c:	9003      	str	r0, [sp, #12]
   10c3e:	e9cd 3300 	strd	r3, r3, [sp]
   10c42:	494f      	ldr	r1, [pc, #316]	; (10d80 <main+0x2a4>)
   10c44:	2202      	movs	r2, #2
   10c46:	4618      	mov	r0, r3
   10c48:	f00c fed0 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_addr_le_from_str(TTPMS_ERR_BT_ID, "random", &ERR_bt_addr);
   10c4c:	4a60      	ldr	r2, [pc, #384]	; (10dd0 <main+0x2f4>)
   10c4e:	494d      	ldr	r1, [pc, #308]	; (10d84 <main+0x2a8>)
   10c50:	4860      	ldr	r0, [pc, #384]	; (10dd4 <main+0x2f8>)
   10c52:	f002 fbcf 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10c56:	b150      	cbz	r0, 10c6e <main+0x192>
   10c58:	4b4c      	ldr	r3, [pc, #304]	; (10d8c <main+0x2b0>)
   10c5a:	9302      	str	r3, [sp, #8]
   10c5c:	2300      	movs	r3, #0
   10c5e:	9003      	str	r0, [sp, #12]
   10c60:	e9cd 3300 	strd	r3, r3, [sp]
   10c64:	4946      	ldr	r1, [pc, #280]	; (10d80 <main+0x2a4>)
   10c66:	2202      	movs	r2, #2
   10c68:	4618      	mov	r0, r3
   10c6a:	f00c febf 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>

	err = bt_addr_le_from_str(TTPMS_TEST_BT_ID, "random", &TEST_bt_addr);
   10c6e:	4a5a      	ldr	r2, [pc, #360]	; (10dd8 <main+0x2fc>)
   10c70:	4944      	ldr	r1, [pc, #272]	; (10d84 <main+0x2a8>)
   10c72:	485a      	ldr	r0, [pc, #360]	; (10ddc <main+0x300>)
   10c74:	f002 fbbe 	bl	133f4 <bt_addr_le_from_str>
	if (err) { LOG_WRN("Invalid BT address (err %d)\n", err); }
   10c78:	b150      	cbz	r0, 10c90 <main+0x1b4>
   10c7a:	4b44      	ldr	r3, [pc, #272]	; (10d8c <main+0x2b0>)
   10c7c:	9302      	str	r3, [sp, #8]
   10c7e:	2300      	movs	r3, #0
   10c80:	9003      	str	r0, [sp, #12]
   10c82:	e9cd 3300 	strd	r3, r3, [sp]
   10c86:	493e      	ldr	r1, [pc, #248]	; (10d80 <main+0x2a4>)
   10c88:	2202      	movs	r2, #2
   10c8a:	4618      	mov	r0, r3
   10c8c:	f00c feae 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>

	// Add address of the devices we want to filter accept list (these address variables were filled in main)
	err = bt_le_filter_accept_list_add(&IFL_bt_addr);
   10c90:	4841      	ldr	r0, [pc, #260]	; (10d98 <main+0x2bc>)
   10c92:	f003 fff9 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10c96:	b150      	cbz	r0, 10cae <main+0x1d2>
   10c98:	4b51      	ldr	r3, [pc, #324]	; (10de0 <main+0x304>)
   10c9a:	9302      	str	r3, [sp, #8]
   10c9c:	2300      	movs	r3, #0
   10c9e:	9003      	str	r0, [sp, #12]
   10ca0:	e9cd 3300 	strd	r3, r3, [sp]
   10ca4:	4936      	ldr	r1, [pc, #216]	; (10d80 <main+0x2a4>)
   10ca6:	2202      	movs	r2, #2
   10ca8:	4618      	mov	r0, r3
   10caa:	f00c fe9f 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&IFR_bt_addr);
   10cae:	483c      	ldr	r0, [pc, #240]	; (10da0 <main+0x2c4>)
   10cb0:	f003 ffea 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10cb4:	b150      	cbz	r0, 10ccc <main+0x1f0>
   10cb6:	4b4a      	ldr	r3, [pc, #296]	; (10de0 <main+0x304>)
   10cb8:	9302      	str	r3, [sp, #8]
   10cba:	2300      	movs	r3, #0
   10cbc:	9003      	str	r0, [sp, #12]
   10cbe:	e9cd 3300 	strd	r3, r3, [sp]
   10cc2:	492f      	ldr	r1, [pc, #188]	; (10d80 <main+0x2a4>)
   10cc4:	2202      	movs	r2, #2
   10cc6:	4618      	mov	r0, r3
   10cc8:	f00c fe90 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&IRL_bt_addr);
   10ccc:	4836      	ldr	r0, [pc, #216]	; (10da8 <main+0x2cc>)
   10cce:	f003 ffdb 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10cd2:	b150      	cbz	r0, 10cea <main+0x20e>
   10cd4:	4b42      	ldr	r3, [pc, #264]	; (10de0 <main+0x304>)
   10cd6:	9302      	str	r3, [sp, #8]
   10cd8:	2300      	movs	r3, #0
   10cda:	9003      	str	r0, [sp, #12]
   10cdc:	e9cd 3300 	strd	r3, r3, [sp]
   10ce0:	4927      	ldr	r1, [pc, #156]	; (10d80 <main+0x2a4>)
   10ce2:	2202      	movs	r2, #2
   10ce4:	4618      	mov	r0, r3
   10ce6:	f00c fe81 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&IRR_bt_addr);
   10cea:	4831      	ldr	r0, [pc, #196]	; (10db0 <main+0x2d4>)
   10cec:	f003 ffcc 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10cf0:	b150      	cbz	r0, 10d08 <main+0x22c>
   10cf2:	4b3b      	ldr	r3, [pc, #236]	; (10de0 <main+0x304>)
   10cf4:	9302      	str	r3, [sp, #8]
   10cf6:	2300      	movs	r3, #0
   10cf8:	9003      	str	r0, [sp, #12]
   10cfa:	e9cd 3300 	strd	r3, r3, [sp]
   10cfe:	4920      	ldr	r1, [pc, #128]	; (10d80 <main+0x2a4>)
   10d00:	2202      	movs	r2, #2
   10d02:	4618      	mov	r0, r3
   10d04:	f00c fe72 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&EFL_bt_addr);
   10d08:	482b      	ldr	r0, [pc, #172]	; (10db8 <main+0x2dc>)
   10d0a:	f003 ffbd 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10d0e:	b150      	cbz	r0, 10d26 <main+0x24a>
   10d10:	4b33      	ldr	r3, [pc, #204]	; (10de0 <main+0x304>)
   10d12:	9302      	str	r3, [sp, #8]
   10d14:	2300      	movs	r3, #0
   10d16:	9003      	str	r0, [sp, #12]
   10d18:	e9cd 3300 	strd	r3, r3, [sp]
   10d1c:	4918      	ldr	r1, [pc, #96]	; (10d80 <main+0x2a4>)
   10d1e:	2202      	movs	r2, #2
   10d20:	4618      	mov	r0, r3
   10d22:	f00c fe63 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&EFR_bt_addr);
   10d26:	4826      	ldr	r0, [pc, #152]	; (10dc0 <main+0x2e4>)
   10d28:	f003 ffae 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10d2c:	b150      	cbz	r0, 10d44 <main+0x268>
   10d2e:	4b2c      	ldr	r3, [pc, #176]	; (10de0 <main+0x304>)
   10d30:	9302      	str	r3, [sp, #8]
   10d32:	2300      	movs	r3, #0
   10d34:	9003      	str	r0, [sp, #12]
   10d36:	e9cd 3300 	strd	r3, r3, [sp]
   10d3a:	4911      	ldr	r1, [pc, #68]	; (10d80 <main+0x2a4>)
   10d3c:	2202      	movs	r2, #2
   10d3e:	4618      	mov	r0, r3
   10d40:	f00c fe54 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&ERL_bt_addr);
   10d44:	4820      	ldr	r0, [pc, #128]	; (10dc8 <main+0x2ec>)
   10d46:	f003 ff9f 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10d4a:	b150      	cbz	r0, 10d62 <main+0x286>
   10d4c:	4b24      	ldr	r3, [pc, #144]	; (10de0 <main+0x304>)
   10d4e:	9302      	str	r3, [sp, #8]
   10d50:	2300      	movs	r3, #0
   10d52:	9003      	str	r0, [sp, #12]
   10d54:	e9cd 3300 	strd	r3, r3, [sp]
   10d58:	4909      	ldr	r1, [pc, #36]	; (10d80 <main+0x2a4>)
   10d5a:	2202      	movs	r2, #2
   10d5c:	4618      	mov	r0, r3
   10d5e:	f00c fe45 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	err = bt_le_filter_accept_list_add(&ERR_bt_addr);
   10d62:	481b      	ldr	r0, [pc, #108]	; (10dd0 <main+0x2f4>)
   10d64:	f003 ff90 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10d68:	2800      	cmp	r0, #0
   10d6a:	d040      	beq.n	10dee <main+0x312>
   10d6c:	4b1c      	ldr	r3, [pc, #112]	; (10de0 <main+0x304>)
   10d6e:	9302      	str	r3, [sp, #8]
   10d70:	2300      	movs	r3, #0
   10d72:	9003      	str	r0, [sp, #12]
   10d74:	e9cd 3300 	strd	r3, r3, [sp]
   10d78:	e034      	b.n	10de4 <main+0x308>
   10d7a:	bf00      	nop
   10d7c:	00021e6a 	.word	0x00021e6a
   10d80:	000216f4 	.word	0x000216f4
   10d84:	00021dab 	.word	0x00021dab
   10d88:	00021e84 	.word	0x00021e84
   10d8c:	00021e96 	.word	0x00021e96
   10d90:	00021eb3 	.word	0x00021eb3
   10d94:	00021ed7 	.word	0x00021ed7
   10d98:	20002990 	.word	0x20002990
   10d9c:	00021f0e 	.word	0x00021f0e
   10da0:	20002989 	.word	0x20002989
   10da4:	00021f20 	.word	0x00021f20
   10da8:	20002982 	.word	0x20002982
   10dac:	00021f32 	.word	0x00021f32
   10db0:	2000297b 	.word	0x2000297b
   10db4:	00021f44 	.word	0x00021f44
   10db8:	20002974 	.word	0x20002974
   10dbc:	00021f56 	.word	0x00021f56
   10dc0:	2000296d 	.word	0x2000296d
   10dc4:	00021f68 	.word	0x00021f68
   10dc8:	20002966 	.word	0x20002966
   10dcc:	00021f7a 	.word	0x00021f7a
   10dd0:	2000295f 	.word	0x2000295f
   10dd4:	00021f8c 	.word	0x00021f8c
   10dd8:	20002958 	.word	0x20002958
   10ddc:	00021f9e 	.word	0x00021f9e
   10de0:	00021fb0 	.word	0x00021fb0
   10de4:	4919      	ldr	r1, [pc, #100]	; (10e4c <main+0x370>)
   10de6:	2202      	movs	r2, #2
   10de8:	4618      	mov	r0, r3
   10dea:	f00c fdff 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>

	err = bt_le_filter_accept_list_add(&TEST_bt_addr);
   10dee:	4818      	ldr	r0, [pc, #96]	; (10e50 <main+0x374>)
   10df0:	f003 ff4a 	bl	14c88 <bt_le_filter_accept_list_add>
	if (err) { LOG_WRN("Failed to add address to filter accept list (err %d)", err); }
   10df4:	b150      	cbz	r0, 10e0c <main+0x330>
   10df6:	4b17      	ldr	r3, [pc, #92]	; (10e54 <main+0x378>)
   10df8:	9302      	str	r3, [sp, #8]
   10dfa:	2300      	movs	r3, #0
   10dfc:	9003      	str	r0, [sp, #12]
   10dfe:	e9cd 3300 	strd	r3, r3, [sp]
   10e02:	4912      	ldr	r1, [pc, #72]	; (10e4c <main+0x370>)
   10e04:	2202      	movs	r2, #2
   10e06:	4618      	mov	r0, r3
   10e08:	f00c fdf0 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>

	err = bt_conn_le_create_auto(BT_CONN_LE_CREATE_CONN, &conn_param);
   10e0c:	4b12      	ldr	r3, [pc, #72]	; (10e58 <main+0x37c>)
   10e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   10e10:	ac06      	add	r4, sp, #24
   10e12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   10e16:	4911      	ldr	r1, [pc, #68]	; (10e5c <main+0x380>)
   10e18:	4620      	mov	r0, r4
   10e1a:	f004 ffff 	bl	15e1c <bt_conn_le_create_auto>
	if (err) {
   10e1e:	b148      	cbz	r0, 10e34 <main+0x358>
		LOG_ERR("Failed to start automatically connecting (err %d)");
   10e20:	4b0f      	ldr	r3, [pc, #60]	; (10e60 <main+0x384>)
   10e22:	9302      	str	r3, [sp, #8]
   10e24:	2300      	movs	r3, #0
   10e26:	e9cd 3300 	strd	r3, r3, [sp]
   10e2a:	4908      	ldr	r1, [pc, #32]	; (10e4c <main+0x370>)
   10e2c:	2201      	movs	r2, #1
   10e2e:	4618      	mov	r0, r3
   10e30:	f00c fddc 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
	}
   10e34:	b00a      	add	sp, #40	; 0x28
   10e36:	bd10      	pop	{r4, pc}
		LOG_INF("Bluetooth initialized\n");
   10e38:	4a0a      	ldr	r2, [pc, #40]	; (10e64 <main+0x388>)
   10e3a:	4904      	ldr	r1, [pc, #16]	; (10e4c <main+0x370>)
   10e3c:	9000      	str	r0, [sp, #0]
   10e3e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   10e42:	2203      	movs	r2, #3
   10e44:	f00c fdd2 	bl	1d9ec <z_log_msg_runtime_create.constprop.0>
   10e48:	e689      	b.n	10b5e <main+0x82>
   10e4a:	bf00      	nop
   10e4c:	000216f4 	.word	0x000216f4
   10e50:	20002958 	.word	0x20002958
   10e54:	00021fb0 	.word	0x00021fb0
   10e58:	00021710 	.word	0x00021710
   10e5c:	200007e4 	.word	0x200007e4
   10e60:	00021e0b 	.word	0x00021e0b
   10e64:	00021ef7 	.word	0x00021ef7

00010e68 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   10e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e6c:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
   10e6e:	0784      	lsls	r4, r0, #30
{
   10e70:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
   10e72:	f002 0304 	and.w	r3, r2, #4
   10e76:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   10e78:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   10e7c:	f103 0301 	add.w	r3, r3, #1
   10e80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
   10e84:	9203      	str	r2, [sp, #12]
   10e86:	4605      	mov	r5, r0
   10e88:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
   10e8a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
   10e8c:	f040 81be 	bne.w	1120c <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
   10e90:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
   10e92:	b130      	cbz	r0, 10ea2 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
   10e94:	2907      	cmp	r1, #7
   10e96:	d809      	bhi.n	10eac <cbvprintf_package+0x44>
		return -ENOSPC;
   10e98:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
   10e9c:	b011      	add	sp, #68	; 0x44
   10e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
   10ea2:	f001 0607 	and.w	r6, r1, #7
   10ea6:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
   10ea8:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
   10eac:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
   10eae:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
   10eb2:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
   10eb4:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
   10eb8:	f04f 33ff 	mov.w	r3, #4294967295
   10ebc:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
   10ebe:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
   10ec2:	464f      	mov	r7, r9
	bool parsing = false;
   10ec4:	46cb      	mov	fp, r9
	size = sizeof(char *);
   10ec6:	4653      	mov	r3, sl
			if (buf0 != NULL) {
   10ec8:	b10d      	cbz	r5, 10ece <cbvprintf_package+0x66>
				*(const char **)buf = s;
   10eca:	9a00      	ldr	r2, [sp, #0]
   10ecc:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   10ece:	9805      	ldr	r0, [sp, #20]
   10ed0:	2800      	cmp	r0, #0
   10ed2:	f300 80eb 	bgt.w	110ac <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
   10ed6:	489a      	ldr	r0, [pc, #616]	; (11140 <cbvprintf_package+0x2d8>)
   10ed8:	9a00      	ldr	r2, [sp, #0]
   10eda:	4282      	cmp	r2, r0
   10edc:	d303      	bcc.n	10ee6 <cbvprintf_package+0x7e>
   10ede:	4899      	ldr	r0, [pc, #612]	; (11144 <cbvprintf_package+0x2dc>)
   10ee0:	4282      	cmp	r2, r0
   10ee2:	f0c0 80e3 	bcc.w	110ac <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10ee6:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   10ee8:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10eec:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   10eee:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   10ef2:	f100 8106 	bmi.w	11102 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   10ef6:	2f0f      	cmp	r7, #15
   10ef8:	f200 80b4 	bhi.w	11064 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   10efc:	2d00      	cmp	r5, #0
   10efe:	f000 8108 	beq.w	11112 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
   10f02:	f107 0240 	add.w	r2, r7, #64	; 0x40
   10f06:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
   10f0a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   10f0c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   10f10:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
   10f14:	9804      	ldr	r0, [sp, #16]
   10f16:	3001      	adds	r0, #1
   10f18:	9004      	str	r0, [sp, #16]
   10f1a:	e0ea      	b.n	110f2 <cbvprintf_package+0x28a>
			switch (*fmt) {
   10f1c:	287a      	cmp	r0, #122	; 0x7a
   10f1e:	d860      	bhi.n	10fe2 <cbvprintf_package+0x17a>
   10f20:	284b      	cmp	r0, #75	; 0x4b
   10f22:	d80e      	bhi.n	10f42 <cbvprintf_package+0xda>
   10f24:	2847      	cmp	r0, #71	; 0x47
   10f26:	d85c      	bhi.n	10fe2 <cbvprintf_package+0x17a>
   10f28:	2829      	cmp	r0, #41	; 0x29
   10f2a:	d82f      	bhi.n	10f8c <cbvprintf_package+0x124>
   10f2c:	2825      	cmp	r0, #37	; 0x25
   10f2e:	d055      	beq.n	10fdc <cbvprintf_package+0x174>
   10f30:	d857      	bhi.n	10fe2 <cbvprintf_package+0x17a>
   10f32:	2820      	cmp	r0, #32
   10f34:	d07d      	beq.n	11032 <cbvprintf_package+0x1ca>
   10f36:	3823      	subs	r0, #35	; 0x23
   10f38:	f1d0 0b00 	rsbs	fp, r0, #0
   10f3c:	eb4b 0b00 	adc.w	fp, fp, r0
   10f40:	e077      	b.n	11032 <cbvprintf_package+0x1ca>
   10f42:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
   10f46:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   10f4a:	d84a      	bhi.n	10fe2 <cbvprintf_package+0x17a>
   10f4c:	e8df f00c 	tbb	[pc, ip]
   10f50:	49494971 	.word	0x49494971
   10f54:	49494949 	.word	0x49494949
   10f58:	49494949 	.word	0x49494949
   10f5c:	4949494c 	.word	0x4949494c
   10f60:	49494949 	.word	0x49494949
   10f64:	4c495a49 	.word	0x4c495a49
   10f68:	5a5a5a4c 	.word	0x5a5a5a4c
   10f6c:	496e4c71 	.word	0x496e4c71
   10f70:	4c184971 	.word	0x4c184971
   10f74:	83494918 	.word	0x83494918
   10f78:	49494c80 	.word	0x49494c80
   10f7c:	494c      	.short	0x494c
   10f7e:	80          	.byte	0x80
   10f7f:	00          	.byte	0x00
   10f80:	2000      	movs	r0, #0
   10f82:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
   10f86:	f04f 0a04 	mov.w	sl, #4
   10f8a:	e039      	b.n	11000 <cbvprintf_package+0x198>
			switch (*fmt) {
   10f8c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
   10f90:	fa5f fc8c 	uxtb.w	ip, ip
   10f94:	2201      	movs	r2, #1
   10f96:	fa02 fc0c 	lsl.w	ip, r2, ip
   10f9a:	ea1c 0f0e 	tst.w	ip, lr
   10f9e:	d148      	bne.n	11032 <cbvprintf_package+0x1ca>
   10fa0:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
   10fa4:	d12e      	bne.n	11004 <cbvprintf_package+0x19c>
   10fa6:	ea1c 0b02 	ands.w	fp, ip, r2
   10faa:	d042      	beq.n	11032 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
   10fac:	3c01      	subs	r4, #1
   10fae:	4454      	add	r4, sl
   10fb0:	f1ca 0c00 	rsb	ip, sl, #0
   10fb4:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
   10fb8:	2d00      	cmp	r5, #0
   10fba:	d061      	beq.n	11080 <cbvprintf_package+0x218>
   10fbc:	eba3 0c05 	sub.w	ip, r3, r5
   10fc0:	44a4      	add	ip, r4
   10fc2:	45b4      	cmp	ip, r6
   10fc4:	f63f af68 	bhi.w	10e98 <cbvprintf_package+0x30>
		if (is_str_arg) {
   10fc8:	2800      	cmp	r0, #0
   10fca:	d168      	bne.n	1109e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   10fcc:	2b04      	cmp	r3, #4
   10fce:	d147      	bne.n	11060 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
   10fd0:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
   10fd4:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
   10fd6:	3404      	adds	r4, #4
   10fd8:	2304      	movs	r3, #4
   10fda:	e02a      	b.n	11032 <cbvprintf_package+0x1ca>
				arg_idx--;
   10fdc:	9a01      	ldr	r2, [sp, #4]
   10fde:	3a01      	subs	r2, #1
   10fe0:	9201      	str	r2, [sp, #4]
				parsing = false;
   10fe2:	f04f 0b00 	mov.w	fp, #0
				continue;
   10fe6:	e024      	b.n	11032 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
   10fe8:	f811 0c01 	ldrb.w	r0, [r1, #-1]
   10fec:	286c      	cmp	r0, #108	; 0x6c
   10fee:	d134      	bne.n	1105a <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
   10ff0:	f811 3c02 	ldrb.w	r3, [r1, #-2]
   10ff4:	2000      	movs	r0, #0
   10ff6:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
   10ff8:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
   10ffa:	d1c4      	bne.n	10f86 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
   10ffc:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
   11000:	4653      	mov	r3, sl
   11002:	e7d3      	b.n	10fac <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
   11004:	f108 0807 	add.w	r8, r8, #7
   11008:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
   1100c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
   1100e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
   11012:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
   11016:	b135      	cbz	r5, 11026 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
   11018:	9806      	ldr	r0, [sp, #24]
   1101a:	4420      	add	r0, r4
   1101c:	42b0      	cmp	r0, r6
   1101e:	f63f af3b 	bhi.w	10e98 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
   11022:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
   11026:	3408      	adds	r4, #8
				parsing = false;
   11028:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
   1102c:	f04f 0a08 	mov.w	sl, #8
   11030:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
   11032:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   11036:	2800      	cmp	r0, #0
   11038:	d078      	beq.n	1112c <cbvprintf_package+0x2c4>
			if (!parsing) {
   1103a:	f1bb 0f00 	cmp.w	fp, #0
   1103e:	f47f af6d 	bne.w	10f1c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
   11042:	2825      	cmp	r0, #37	; 0x25
   11044:	d1f5      	bne.n	11032 <cbvprintf_package+0x1ca>
					arg_idx++;
   11046:	9b01      	ldr	r3, [sp, #4]
   11048:	3301      	adds	r3, #1
   1104a:	9301      	str	r3, [sp, #4]
					parsing = true;
   1104c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
   11050:	f04f 0a04 	mov.w	sl, #4
   11054:	e7ec      	b.n	11030 <cbvprintf_package+0x1c8>
			switch (*fmt) {
   11056:	4658      	mov	r0, fp
   11058:	e793      	b.n	10f82 <cbvprintf_package+0x11a>
   1105a:	2000      	movs	r0, #0
				parsing = false;
   1105c:	4683      	mov	fp, r0
   1105e:	e7a5      	b.n	10fac <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
   11060:	2b08      	cmp	r3, #8
   11062:	d002      	beq.n	1106a <cbvprintf_package+0x202>
					return -EINVAL;
   11064:	f06f 0015 	mvn.w	r0, #21
   11068:	e718      	b.n	10e9c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
   1106a:	f108 0807 	add.w	r8, r8, #7
   1106e:	f028 0807 	bic.w	r8, r8, #7
   11072:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
   11076:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
   1107a:	3408      	adds	r4, #8
   1107c:	2308      	movs	r3, #8
   1107e:	e7d8      	b.n	11032 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
   11080:	b968      	cbnz	r0, 1109e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
   11082:	2b04      	cmp	r3, #4
   11084:	d102      	bne.n	1108c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
   11086:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
   1108a:	e7a4      	b.n	10fd6 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
   1108c:	2b08      	cmp	r3, #8
   1108e:	d1e9      	bne.n	11064 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
   11090:	f108 0807 	add.w	r8, r8, #7
   11094:	f028 0807 	bic.w	r8, r8, #7
   11098:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
   1109c:	e7ed      	b.n	1107a <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   1109e:	9a05      	ldr	r2, [sp, #20]
   110a0:	3a01      	subs	r2, #1
   110a2:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
   110a4:	f858 2b04 	ldr.w	r2, [r8], #4
   110a8:	9200      	str	r2, [sp, #0]
   110aa:	e70d      	b.n	10ec8 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
   110ac:	9a03      	ldr	r2, [sp, #12]
   110ae:	0790      	lsls	r0, r2, #30
   110b0:	d520      	bpl.n	110f4 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
   110b2:	eba4 0e05 	sub.w	lr, r4, r5
   110b6:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   110ba:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
   110be:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   110c2:	d2cf      	bcs.n	11064 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
   110c4:	2f0f      	cmp	r7, #15
   110c6:	d8cd      	bhi.n	11064 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
   110c8:	b1f5      	cbz	r5, 11108 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
   110ca:	f107 0240 	add.w	r2, r7, #64	; 0x40
   110ce:	eb0d 0e02 	add.w	lr, sp, r2
   110d2:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
   110d4:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
   110d6:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
   110da:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
   110de:	f1bc 0f00 	cmp.w	ip, #0
   110e2:	f43f af17 	beq.w	10f14 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
   110e6:	f060 007f 	orn	r0, r0, #127	; 0x7f
   110ea:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
   110ee:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
   110f2:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
   110f4:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
   110f8:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
   110fa:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
   110fc:	f64f 7eda 	movw	lr, #65498	; 0xffda
   11100:	e797      	b.n	11032 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
   11102:	f04f 0c00 	mov.w	ip, #0
   11106:	e7da      	b.n	110be <cbvprintf_package+0x256>
				} else if (is_ro) {
   11108:	f1bc 0f00 	cmp.w	ip, #0
   1110c:	d001      	beq.n	11112 <cbvprintf_package+0x2aa>
					len += 1;
   1110e:	3601      	adds	r6, #1
   11110:	e7ef      	b.n	110f2 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
   11112:	9802      	ldr	r0, [sp, #8]
					len += 2;
   11114:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
   11116:	2800      	cmp	r0, #0
   11118:	d1eb      	bne.n	110f2 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
   1111a:	9800      	ldr	r0, [sp, #0]
   1111c:	e9cd 3106 	strd	r3, r1, [sp, #24]
   11120:	f00d fb02 	bl	1e728 <strlen>
   11124:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   11128:	4406      	add	r6, r0
   1112a:	e7e2      	b.n	110f2 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
   1112c:	1b63      	subs	r3, r4, r5
   1112e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11132:	d297      	bcs.n	11064 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
   11134:	b945      	cbnz	r5, 11148 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
   11136:	f1a6 0408 	sub.w	r4, r6, #8
   1113a:	18e0      	adds	r0, r4, r3
   1113c:	e6ae      	b.n	10e9c <cbvprintf_package+0x34>
   1113e:	bf00      	nop
   11140:	000212cc 	.word	0x000212cc
   11144:	00023c2c 	.word	0x00023c2c
	if (rws_pos_en) {
   11148:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
   1114a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
   1114c:	089b      	lsrs	r3, r3, #2
   1114e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11150:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
   11154:	b1c2      	cbz	r2, 11188 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
   11156:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
   11158:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
   1115c:	f1b9 0f00 	cmp.w	r9, #0
   11160:	d005      	beq.n	1116e <cbvprintf_package+0x306>
   11162:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
   11164:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
   11166:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
   1116a:	4297      	cmp	r7, r2
   1116c:	d10e      	bne.n	1118c <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
   1116e:	f1c5 0301 	rsb	r3, r5, #1
   11172:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
   11176:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
   1117a:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
   1117c:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
   11180:	4557      	cmp	r7, sl
   11182:	d112      	bne.n	111aa <cbvprintf_package+0x342>
	return BUF_OFFSET;
   11184:	1b60      	subs	r0, r4, r5
   11186:	e689      	b.n	10e9c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
   11188:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
   1118a:	e7e5      	b.n	11158 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
   1118c:	f810 3b01 	ldrb.w	r3, [r0], #1
   11190:	0619      	lsls	r1, r3, #24
   11192:	d508      	bpl.n	111a6 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
   11194:	eb04 0e0c 	add.w	lr, r4, ip
   11198:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
   1119a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
   1119e:	f63f ae7b 	bhi.w	10e98 <cbvprintf_package+0x30>
			*buf++ = pos;
   111a2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
   111a6:	3201      	adds	r2, #1
   111a8:	e7df      	b.n	1116a <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
   111aa:	f1b9 0f00 	cmp.w	r9, #0
   111ae:	d003      	beq.n	111b8 <cbvprintf_package+0x350>
   111b0:	f998 2000 	ldrsb.w	r2, [r8]
   111b4:	2a00      	cmp	r2, #0
   111b6:	db17      	blt.n	111e8 <cbvprintf_package+0x380>
		if (rws_pos_en) {
   111b8:	9b02      	ldr	r3, [sp, #8]
   111ba:	b1d3      	cbz	r3, 111f2 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
   111bc:	f81a 200b 	ldrb.w	r2, [sl, fp]
   111c0:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
   111c4:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
   111c6:	9b01      	ldr	r3, [sp, #4]
   111c8:	1898      	adds	r0, r3, r2
   111ca:	4420      	add	r0, r4
   111cc:	42b0      	cmp	r0, r6
   111ce:	f63f ae63 	bhi.w	10e98 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
   111d2:	f898 0000 	ldrb.w	r0, [r8]
   111d6:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
   111da:	9900      	ldr	r1, [sp, #0]
   111dc:	9203      	str	r2, [sp, #12]
   111de:	4620      	mov	r0, r4
   111e0:	f00d face 	bl	1e780 <memcpy>
		buf += size;
   111e4:	9a03      	ldr	r2, [sp, #12]
   111e6:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
   111e8:	f10a 0a01 	add.w	sl, sl, #1
   111ec:	f108 0801 	add.w	r8, r8, #1
   111f0:	e7c6      	b.n	11180 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
   111f2:	f898 2000 	ldrb.w	r2, [r8]
   111f6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   111fa:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
   111fc:	9b02      	ldr	r3, [sp, #8]
   111fe:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
   11202:	9800      	ldr	r0, [sp, #0]
   11204:	f00d fa90 	bl	1e728 <strlen>
   11208:	1c42      	adds	r2, r0, #1
   1120a:	e7dc      	b.n	111c6 <cbvprintf_package+0x35e>
		return -EFAULT;
   1120c:	f06f 000d 	mvn.w	r0, #13
   11210:	e644      	b.n	10e9c <cbvprintf_package+0x34>
   11212:	bf00      	nop

00011214 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
   11214:	4b01      	ldr	r3, [pc, #4]	; (1121c <__printk_hook_install+0x8>)
   11216:	6018      	str	r0, [r3, #0]
}
   11218:	4770      	bx	lr
   1121a:	bf00      	nop
   1121c:	20000610 	.word	0x20000610

00011220 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11220:	b530      	push	{r4, r5, lr}
   11222:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
   11224:	2500      	movs	r5, #0
   11226:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
   1122a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1122c:	9500      	str	r5, [sp, #0]
   1122e:	a903      	add	r1, sp, #12
   11230:	4805      	ldr	r0, [pc, #20]	; (11248 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
   11232:	9505      	str	r5, [sp, #20]
   11234:	f000 f918 	bl	11468 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
   11238:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
   1123c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   1123e:	bfb8      	it	lt
   11240:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11242:	b007      	add	sp, #28
   11244:	bd30      	pop	{r4, r5, pc}
   11246:	bf00      	nop
   11248:	0001daa1 	.word	0x0001daa1

0001124c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11250:	8b05      	ldrh	r5, [r0, #24]
{
   11252:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   11254:	0728      	lsls	r0, r5, #28
{
   11256:	4690      	mov	r8, r2
	if (processing) {
   11258:	d411      	bmi.n	1127e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
   1125a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1125c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11260:	f040 80cd 	bne.w	113fe <process_event+0x1b2>
			evt = process_recheck(mgr);
   11264:	4620      	mov	r0, r4
   11266:	f00c fe19 	bl	1de9c <process_recheck>
		}

		if (evt == EVT_NOP) {
   1126a:	b178      	cbz	r0, 1128c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
   1126c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1126e:	8b21      	ldrh	r1, [r4, #24]
   11270:	2804      	cmp	r0, #4
   11272:	d811      	bhi.n	11298 <process_event+0x4c>
   11274:	e8df f000 	tbb	[pc, r0]
   11278:	856d10c3 	.word	0x856d10c3
   1127c:	95          	.byte	0x95
   1127d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
   1127e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11280:	bf0c      	ite	eq
   11282:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11286:	f045 0520 	orrne.w	r5, r5, #32
   1128a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   1128c:	f388 8811 	msr	BASEPRI, r8
   11290:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   11294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11298:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1129c:	45aa      	cmp	sl, r5
   1129e:	f000 80a6 	beq.w	113ee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
   112a2:	2700      	movs	r7, #0
   112a4:	46b9      	mov	r9, r7
   112a6:	463e      	mov	r6, r7
   112a8:	68a3      	ldr	r3, [r4, #8]
   112aa:	2b00      	cmp	r3, #0
   112ac:	f000 80bd 	beq.w	1142a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   112b0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   112b4:	8321      	strh	r1, [r4, #24]
   112b6:	f388 8811 	msr	BASEPRI, r8
   112ba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   112be:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   112c0:	2900      	cmp	r1, #0
   112c2:	f000 80bb 	beq.w	1143c <process_event+0x1f0>
	return node->next;
   112c6:	680d      	ldr	r5, [r1, #0]
   112c8:	2900      	cmp	r1, #0
   112ca:	f000 80b7 	beq.w	1143c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
   112ce:	f8d1 8004 	ldr.w	r8, [r1, #4]
   112d2:	4633      	mov	r3, r6
   112d4:	4652      	mov	r2, sl
   112d6:	4620      	mov	r0, r4
   112d8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   112da:	2d00      	cmp	r5, #0
   112dc:	d076      	beq.n	113cc <process_event+0x180>
   112de:	682b      	ldr	r3, [r5, #0]
   112e0:	4629      	mov	r1, r5
   112e2:	461d      	mov	r5, r3
   112e4:	e7f0      	b.n	112c8 <process_event+0x7c>
   112e6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   112ea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   112ec:	2a01      	cmp	r2, #1
   112ee:	d81b      	bhi.n	11328 <process_event+0xdc>
	list->head = NULL;
   112f0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112f2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   112f6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   112f8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112fa:	b289      	uxth	r1, r1
	list->tail = NULL;
   112fc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11300:	d109      	bne.n	11316 <process_event+0xca>
   11302:	463b      	mov	r3, r7
   11304:	e003      	b.n	1130e <process_event+0xc2>
				mgr->refs += 1U;
   11306:	8b62      	ldrh	r2, [r4, #26]
   11308:	3201      	adds	r2, #1
   1130a:	8362      	strh	r2, [r4, #26]
	return node->next;
   1130c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1130e:	2b00      	cmp	r3, #0
   11310:	d1f9      	bne.n	11306 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11312:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   11316:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11318:	4620      	mov	r0, r4
   1131a:	f00c fdbf 	bl	1de9c <process_recheck>
   1131e:	2800      	cmp	r0, #0
   11320:	d07b      	beq.n	1141a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11322:	f041 0120 	orr.w	r1, r1, #32
   11326:	e077      	b.n	11418 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
   11328:	2b04      	cmp	r3, #4
   1132a:	d10a      	bne.n	11342 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1132c:	f021 0107 	bic.w	r1, r1, #7
   11330:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   11332:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   11334:	4620      	mov	r0, r4
   11336:	f00c fdb1 	bl	1de9c <process_recheck>
   1133a:	b110      	cbz	r0, 11342 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1133c:	f041 0120 	orr.w	r1, r1, #32
   11340:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11342:	8b21      	ldrh	r1, [r4, #24]
   11344:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11348:	45aa      	cmp	sl, r5
   1134a:	d050      	beq.n	113ee <process_event+0x1a2>
   1134c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
   1134e:	46b9      	mov	r9, r7
   11350:	e7aa      	b.n	112a8 <process_event+0x5c>
			transit = mgr->transitions->start;
   11352:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11354:	f021 0107 	bic.w	r1, r1, #7
   11358:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
   1135c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
   1135e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11362:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11364:	d12d      	bne.n	113c2 <process_event+0x176>
		    || (transit != NULL)) {
   11366:	f1b9 0f00 	cmp.w	r9, #0
   1136a:	d040      	beq.n	113ee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1136c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11370:	8321      	strh	r1, [r4, #24]
   11372:	f388 8811 	msr	BASEPRI, r8
   11376:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
   1137a:	493a      	ldr	r1, [pc, #232]	; (11464 <process_event+0x218>)
   1137c:	4620      	mov	r0, r4
   1137e:	47c8      	blx	r9
   11380:	e029      	b.n	113d6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11382:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
   11386:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11388:	f041 0104 	orr.w	r1, r1, #4
   1138c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   1138e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
   11390:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
   11394:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   11396:	d0e6      	beq.n	11366 <process_event+0x11a>
   11398:	2700      	movs	r7, #0
		res = 0;
   1139a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1139c:	f04f 0a04 	mov.w	sl, #4
   113a0:	e782      	b.n	112a8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113a2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
   113a6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113a8:	f041 0105 	orr.w	r1, r1, #5
   113ac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
   113ae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
   113b0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
   113b4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
   113b6:	d0d6      	beq.n	11366 <process_event+0x11a>
   113b8:	2700      	movs	r7, #0
		res = 0;
   113ba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113bc:	f04f 0a05 	mov.w	sl, #5
   113c0:	e772      	b.n	112a8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
   113c2:	2700      	movs	r7, #0
		res = 0;
   113c4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   113c6:	f04f 0a06 	mov.w	sl, #6
   113ca:	e76d      	b.n	112a8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   113cc:	462b      	mov	r3, r5
   113ce:	e787      	b.n	112e0 <process_event+0x94>
			if (transit != NULL) {
   113d0:	f1b9 0f00 	cmp.w	r9, #0
   113d4:	d1d1      	bne.n	1137a <process_event+0x12e>
	__asm__ volatile(
   113d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   113da:	f3ef 8811 	mrs	r8, BASEPRI
   113de:	f383 8812 	msr	BASEPRI_MAX, r3
   113e2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   113e6:	8b23      	ldrh	r3, [r4, #24]
   113e8:	f023 0308 	bic.w	r3, r3, #8
   113ec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   113ee:	8b25      	ldrh	r5, [r4, #24]
   113f0:	06ea      	lsls	r2, r5, #27
   113f2:	d52e      	bpl.n	11452 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   113f4:	f025 0310 	bic.w	r3, r5, #16
   113f8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   113fa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
   113fe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11400:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   11402:	2e00      	cmp	r6, #0
   11404:	f6bf af6f 	bge.w	112e6 <process_event+0x9a>
	list->head = NULL;
   11408:	2300      	movs	r3, #0
		*clients = mgr->clients;
   1140a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
   1140c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11410:	f021 0107 	bic.w	r1, r1, #7
   11414:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11418:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1141a:	8b21      	ldrh	r1, [r4, #24]
   1141c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11420:	45aa      	cmp	sl, r5
   11422:	f04f 0900 	mov.w	r9, #0
   11426:	f47f af3f 	bne.w	112a8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
   1142a:	2f00      	cmp	r7, #0
   1142c:	d09b      	beq.n	11366 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1142e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   11432:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
   11434:	f388 8811 	msr	BASEPRI, r8
   11438:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
   1143c:	2f00      	cmp	r7, #0
   1143e:	d0c7      	beq.n	113d0 <process_event+0x184>
	return node->next;
   11440:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
   11442:	4639      	mov	r1, r7
   11444:	4633      	mov	r3, r6
   11446:	4652      	mov	r2, sl
   11448:	4620      	mov	r0, r4
   1144a:	f00c fd53 	bl	1def4 <notify_one>
	list->head = node;
   1144e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
   11450:	e7f4      	b.n	1143c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   11452:	06ab      	lsls	r3, r5, #26
   11454:	f57f af1a 	bpl.w	1128c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   11458:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   1145c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
   1145e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
   11462:	e6ff      	b.n	11264 <process_event+0x18>
   11464:	0001df21 	.word	0x0001df21

00011468 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
   11468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1146c:	4681      	mov	r9, r0
   1146e:	b095      	sub	sp, #84	; 0x54
   11470:	468b      	mov	fp, r1
   11472:	4617      	mov	r7, r2
   11474:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11476:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11478:	7838      	ldrb	r0, [r7, #0]
   1147a:	b908      	cbnz	r0, 11480 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
   1147c:	4628      	mov	r0, r5
   1147e:	e358      	b.n	11b32 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
   11480:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
   11482:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   11484:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
   11486:	d006      	beq.n	11496 <z_cbvprintf_impl+0x2e>
			OUTC('%');
   11488:	4659      	mov	r1, fp
   1148a:	47c8      	blx	r9
   1148c:	2800      	cmp	r0, #0
   1148e:	f2c0 8350 	blt.w	11b32 <z_cbvprintf_impl+0x6ca>
   11492:	3501      	adds	r5, #1
		if (bps == NULL) {
   11494:	e1fb      	b.n	1188e <z_cbvprintf_impl+0x426>
		} state = {
   11496:	2218      	movs	r2, #24
   11498:	2100      	movs	r1, #0
   1149a:	a80e      	add	r0, sp, #56	; 0x38
   1149c:	f00d f97b 	bl	1e796 <memset>
	if (*sp == '%') {
   114a0:	787b      	ldrb	r3, [r7, #1]
   114a2:	2b25      	cmp	r3, #37	; 0x25
   114a4:	d07d      	beq.n	115a2 <z_cbvprintf_impl+0x13a>
   114a6:	2300      	movs	r3, #0
   114a8:	1c78      	adds	r0, r7, #1
   114aa:	4698      	mov	r8, r3
   114ac:	469e      	mov	lr, r3
   114ae:	469c      	mov	ip, r3
   114b0:	461e      	mov	r6, r3
   114b2:	4601      	mov	r1, r0
		switch (*sp) {
   114b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   114b8:	2a2b      	cmp	r2, #43	; 0x2b
   114ba:	f000 80a1 	beq.w	11600 <z_cbvprintf_impl+0x198>
   114be:	f200 8098 	bhi.w	115f2 <z_cbvprintf_impl+0x18a>
   114c2:	2a20      	cmp	r2, #32
   114c4:	f000 809f 	beq.w	11606 <z_cbvprintf_impl+0x19e>
   114c8:	2a23      	cmp	r2, #35	; 0x23
   114ca:	f000 809f 	beq.w	1160c <z_cbvprintf_impl+0x1a4>
   114ce:	b12b      	cbz	r3, 114dc <z_cbvprintf_impl+0x74>
   114d0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   114d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   114d8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   114dc:	f1b8 0f00 	cmp.w	r8, #0
   114e0:	d005      	beq.n	114ee <z_cbvprintf_impl+0x86>
   114e2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   114e6:	f043 0320 	orr.w	r3, r3, #32
   114ea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   114ee:	f1be 0f00 	cmp.w	lr, #0
   114f2:	d005      	beq.n	11500 <z_cbvprintf_impl+0x98>
   114f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   114f8:	f043 0310 	orr.w	r3, r3, #16
   114fc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11500:	f1bc 0f00 	cmp.w	ip, #0
   11504:	d005      	beq.n	11512 <z_cbvprintf_impl+0xaa>
   11506:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1150a:	f043 0308 	orr.w	r3, r3, #8
   1150e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   11512:	b12e      	cbz	r6, 11520 <z_cbvprintf_impl+0xb8>
   11514:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11518:	f043 0304 	orr.w	r3, r3, #4
   1151c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
   11520:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11524:	f003 0044 	and.w	r0, r3, #68	; 0x44
   11528:	2844      	cmp	r0, #68	; 0x44
   1152a:	d103      	bne.n	11534 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
   1152c:	f36f 1386 	bfc	r3, #6, #1
   11530:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
   11534:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   11538:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
   1153a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1153e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
   11542:	d17f      	bne.n	11644 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
   11544:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11548:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
   1154c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   1154e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
   11552:	781a      	ldrb	r2, [r3, #0]
   11554:	2a2e      	cmp	r2, #46	; 0x2e
   11556:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   1155a:	bf0c      	ite	eq
   1155c:	2101      	moveq	r1, #1
   1155e:	2100      	movne	r1, #0
   11560:	f361 0241 	bfi	r2, r1, #1, #1
   11564:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
   11568:	d178      	bne.n	1165c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
   1156a:	785a      	ldrb	r2, [r3, #1]
   1156c:	2a2a      	cmp	r2, #42	; 0x2a
   1156e:	d06e      	beq.n	1164e <z_cbvprintf_impl+0x1e6>
	++sp;
   11570:	3301      	adds	r3, #1
	size_t val = 0;
   11572:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11574:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11578:	4619      	mov	r1, r3
   1157a:	f811 0b01 	ldrb.w	r0, [r1], #1
   1157e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11582:	2e09      	cmp	r6, #9
   11584:	f240 8095 	bls.w	116b2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
   11588:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
   1158c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
   1158e:	f3c1 0040 	ubfx	r0, r1, #1, #1
   11592:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
   11596:	460a      	mov	r2, r1
   11598:	f360 0241 	bfi	r2, r0, #1, #1
   1159c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   115a0:	e05c      	b.n	1165c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
   115a2:	1cba      	adds	r2, r7, #2
   115a4:	9203      	str	r2, [sp, #12]
   115a6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
   115aa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   115ae:	07da      	lsls	r2, r3, #31
   115b0:	f140 812e 	bpl.w	11810 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
   115b4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   115b8:	f1b8 0f00 	cmp.w	r8, #0
   115bc:	da07      	bge.n	115ce <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
   115be:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   115c2:	f042 0204 	orr.w	r2, r2, #4
   115c6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
   115ca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   115ce:	075e      	lsls	r6, r3, #29
   115d0:	f140 8127 	bpl.w	11822 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
   115d4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
   115d8:	f1ba 0f00 	cmp.w	sl, #0
   115dc:	f280 8126 	bge.w	1182c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
   115e0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
   115e4:	f36f 0341 	bfc	r3, #1, #1
   115e8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
   115ec:	f04f 3aff 	mov.w	sl, #4294967295
   115f0:	e11c      	b.n	1182c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
   115f2:	2a2d      	cmp	r2, #45	; 0x2d
   115f4:	d00d      	beq.n	11612 <z_cbvprintf_impl+0x1aa>
   115f6:	2a30      	cmp	r2, #48	; 0x30
   115f8:	f47f af69 	bne.w	114ce <z_cbvprintf_impl+0x66>
   115fc:	2301      	movs	r3, #1
	} while (loop);
   115fe:	e758      	b.n	114b2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
   11600:	f04f 0c01 	mov.w	ip, #1
   11604:	e755      	b.n	114b2 <z_cbvprintf_impl+0x4a>
   11606:	f04f 0e01 	mov.w	lr, #1
   1160a:	e752      	b.n	114b2 <z_cbvprintf_impl+0x4a>
   1160c:	f04f 0801 	mov.w	r8, #1
   11610:	e74f      	b.n	114b2 <z_cbvprintf_impl+0x4a>
   11612:	2601      	movs	r6, #1
   11614:	e74d      	b.n	114b2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
   11616:	fb0e 6202 	mla	r2, lr, r2, r6
   1161a:	3a30      	subs	r2, #48	; 0x30
   1161c:	4603      	mov	r3, r0
   1161e:	4618      	mov	r0, r3
   11620:	f810 6b01 	ldrb.w	r6, [r0], #1
   11624:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   11628:	f1bc 0f09 	cmp.w	ip, #9
   1162c:	d9f3      	bls.n	11616 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
   1162e:	4299      	cmp	r1, r3
   11630:	d08f      	beq.n	11552 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11632:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
   11636:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
   11638:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1163a:	f362 0141 	bfi	r1, r2, #1, #1
   1163e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
   11642:	e786      	b.n	11552 <z_cbvprintf_impl+0xea>
   11644:	460b      	mov	r3, r1
	size_t val = 0;
   11646:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11648:	f04f 0e0a 	mov.w	lr, #10
   1164c:	e7e7      	b.n	1161e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
   1164e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11652:	f042 0204 	orr.w	r2, r2, #4
   11656:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
   1165a:	3302      	adds	r3, #2
	switch (*sp) {
   1165c:	781a      	ldrb	r2, [r3, #0]
   1165e:	2a6c      	cmp	r2, #108	; 0x6c
   11660:	d047      	beq.n	116f2 <z_cbvprintf_impl+0x28a>
   11662:	d82b      	bhi.n	116bc <z_cbvprintf_impl+0x254>
   11664:	2a68      	cmp	r2, #104	; 0x68
   11666:	d031      	beq.n	116cc <z_cbvprintf_impl+0x264>
   11668:	2a6a      	cmp	r2, #106	; 0x6a
   1166a:	d04b      	beq.n	11704 <z_cbvprintf_impl+0x29c>
   1166c:	2a4c      	cmp	r2, #76	; 0x4c
   1166e:	d051      	beq.n	11714 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
   11670:	461a      	mov	r2, r3
   11672:	f812 3b01 	ldrb.w	r3, [r2], #1
   11676:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
   11678:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
   1167a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
   1167e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
   11682:	f200 80be 	bhi.w	11802 <z_cbvprintf_impl+0x39a>
   11686:	2b6d      	cmp	r3, #109	; 0x6d
   11688:	d851      	bhi.n	1172e <z_cbvprintf_impl+0x2c6>
   1168a:	2b69      	cmp	r3, #105	; 0x69
   1168c:	f200 80b9 	bhi.w	11802 <z_cbvprintf_impl+0x39a>
   11690:	2b57      	cmp	r3, #87	; 0x57
   11692:	d867      	bhi.n	11764 <z_cbvprintf_impl+0x2fc>
   11694:	2b41      	cmp	r3, #65	; 0x41
   11696:	d003      	beq.n	116a0 <z_cbvprintf_impl+0x238>
   11698:	3b45      	subs	r3, #69	; 0x45
   1169a:	2b02      	cmp	r3, #2
   1169c:	f200 80b1 	bhi.w	11802 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
   116a0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   116a4:	2204      	movs	r2, #4
   116a6:	f362 0302 	bfi	r3, r2, #0, #3
   116aa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
   116ae:	2301      	movs	r3, #1
			break;
   116b0:	e073      	b.n	1179a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
   116b2:	fb0c 0202 	mla	r2, ip, r2, r0
   116b6:	3a30      	subs	r2, #48	; 0x30
   116b8:	460b      	mov	r3, r1
   116ba:	e75d      	b.n	11578 <z_cbvprintf_impl+0x110>
	switch (*sp) {
   116bc:	2a74      	cmp	r2, #116	; 0x74
   116be:	d025      	beq.n	1170c <z_cbvprintf_impl+0x2a4>
   116c0:	2a7a      	cmp	r2, #122	; 0x7a
   116c2:	d1d5      	bne.n	11670 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
   116c4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   116c8:	2106      	movs	r1, #6
   116ca:	e00c      	b.n	116e6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
   116cc:	785a      	ldrb	r2, [r3, #1]
   116ce:	2a68      	cmp	r2, #104	; 0x68
   116d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   116d4:	d106      	bne.n	116e4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
   116d6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   116d8:	f361 02c6 	bfi	r2, r1, #3, #4
   116dc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
   116e0:	3302      	adds	r3, #2
   116e2:	e7c5      	b.n	11670 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
   116e4:	2102      	movs	r1, #2
   116e6:	f361 02c6 	bfi	r2, r1, #3, #4
   116ea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
   116ee:	3301      	adds	r3, #1
   116f0:	e7be      	b.n	11670 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
   116f2:	785a      	ldrb	r2, [r3, #1]
   116f4:	2a6c      	cmp	r2, #108	; 0x6c
   116f6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   116fa:	d101      	bne.n	11700 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
   116fc:	2104      	movs	r1, #4
   116fe:	e7eb      	b.n	116d8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
   11700:	2103      	movs	r1, #3
   11702:	e7f0      	b.n	116e6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
   11704:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11708:	2105      	movs	r1, #5
   1170a:	e7ec      	b.n	116e6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
   1170c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
   11710:	2107      	movs	r1, #7
   11712:	e7e8      	b.n	116e6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
   11714:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
   11718:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
   1171c:	f022 0202 	bic.w	r2, r2, #2
   11720:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   11724:	f042 0202 	orr.w	r2, r2, #2
   11728:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
   1172c:	e7df      	b.n	116ee <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
   1172e:	3b6e      	subs	r3, #110	; 0x6e
   11730:	b2d9      	uxtb	r1, r3
   11732:	2301      	movs	r3, #1
   11734:	408b      	lsls	r3, r1
   11736:	f240 4182 	movw	r1, #1154	; 0x482
   1173a:	420b      	tst	r3, r1
   1173c:	d137      	bne.n	117ae <z_cbvprintf_impl+0x346>
   1173e:	f013 0f24 	tst.w	r3, #36	; 0x24
   11742:	d151      	bne.n	117e8 <z_cbvprintf_impl+0x380>
   11744:	07d8      	lsls	r0, r3, #31
   11746:	d55c      	bpl.n	11802 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
   11748:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   1174c:	2103      	movs	r1, #3
   1174e:	f361 0302 	bfi	r3, r1, #0, #3
   11752:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11756:	f002 0378 	and.w	r3, r2, #120	; 0x78
   1175a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
   1175e:	424b      	negs	r3, r1
   11760:	414b      	adcs	r3, r1
   11762:	e01a      	b.n	1179a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
   11764:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
   11768:	b2c9      	uxtb	r1, r1
   1176a:	2001      	movs	r0, #1
   1176c:	fa00 f101 	lsl.w	r1, r0, r1
   11770:	f411 4f62 	tst.w	r1, #57856	; 0xe200
   11774:	d194      	bne.n	116a0 <z_cbvprintf_impl+0x238>
   11776:	f640 0601 	movw	r6, #2049	; 0x801
   1177a:	4231      	tst	r1, r6
   1177c:	d11d      	bne.n	117ba <z_cbvprintf_impl+0x352>
   1177e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
   11782:	d03e      	beq.n	11802 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
   11784:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11788:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   1178c:	f002 0278 	and.w	r2, r2, #120	; 0x78
   11790:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
   11792:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
   11796:	d034      	beq.n	11802 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
   11798:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
   1179a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   1179e:	f3c2 0140 	ubfx	r1, r2, #1, #1
   117a2:	430b      	orrs	r3, r1
   117a4:	f363 0241 	bfi	r2, r3, #1, #1
   117a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
   117ac:	e6fd      	b.n	115aa <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
   117ae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   117b2:	2102      	movs	r1, #2
   117b4:	f361 0302 	bfi	r3, r1, #0, #3
   117b8:	e7e8      	b.n	1178c <z_cbvprintf_impl+0x324>
   117ba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
   117be:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
   117c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   117c4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   117c8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   117ca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
   117ce:	bf02      	ittt	eq
   117d0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
   117d4:	f041 0101 	orreq.w	r1, r1, #1
   117d8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
   117dc:	2b63      	cmp	r3, #99	; 0x63
   117de:	d1db      	bne.n	11798 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
   117e0:	1e13      	subs	r3, r2, #0
   117e2:	bf18      	it	ne
   117e4:	2301      	movne	r3, #1
   117e6:	e7d8      	b.n	1179a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
   117e8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   117ec:	2103      	movs	r1, #3
   117ee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
   117f2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   117f6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
   117fa:	bf14      	ite	ne
   117fc:	2301      	movne	r3, #1
   117fe:	2300      	moveq	r3, #0
   11800:	e7cb      	b.n	1179a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
   11802:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11806:	f043 0301 	orr.w	r3, r3, #1
   1180a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
   1180e:	e7c3      	b.n	11798 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
   11810:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
   11814:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11816:	bfb4      	ite	lt
   11818:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
   1181c:	f04f 38ff 	movge.w	r8, #4294967295
   11820:	e6d5      	b.n	115ce <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
   11822:	0798      	lsls	r0, r3, #30
   11824:	f57f aee2 	bpl.w	115ec <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
   11828:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
   1182c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
   11830:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11832:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
   11836:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
   1183a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1183e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11840:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11844:	d133      	bne.n	118ae <z_cbvprintf_impl+0x446>
			switch (length_mod) {
   11846:	1ecb      	subs	r3, r1, #3
   11848:	2b04      	cmp	r3, #4
   1184a:	d804      	bhi.n	11856 <z_cbvprintf_impl+0x3ee>
   1184c:	e8df f003 	tbb	[pc, r3]
   11850:	21464621 	.word	0x21464621
   11854:	21          	.byte	0x21
   11855:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
   11856:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
   11858:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
   1185a:	ea4f 72e3 	mov.w	r2, r3, asr #31
   1185e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   11862:	d11c      	bne.n	1189e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
   11864:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
   11868:	17da      	asrs	r2, r3, #31
   1186a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
   1186e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
   11870:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   11874:	f013 0603 	ands.w	r6, r3, #3
   11878:	d050      	beq.n	1191c <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
   1187a:	9b03      	ldr	r3, [sp, #12]
   1187c:	463a      	mov	r2, r7
   1187e:	4659      	mov	r1, fp
   11880:	4648      	mov	r0, r9
   11882:	f00c fc39 	bl	1e0f8 <outs>
   11886:	2800      	cmp	r0, #0
   11888:	f2c0 8153 	blt.w	11b32 <z_cbvprintf_impl+0x6ca>
   1188c:	4405      	add	r5, r0
			continue;
   1188e:	9f03      	ldr	r7, [sp, #12]
   11890:	e5f2      	b.n	11478 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11892:	f854 3b04 	ldr.w	r3, [r4], #4
   11896:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
   11898:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
   1189c:	e7e8      	b.n	11870 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
   1189e:	2902      	cmp	r1, #2
   118a0:	d1e5      	bne.n	1186e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
   118a2:	b21a      	sxth	r2, r3
   118a4:	f343 33c0 	sbfx	r3, r3, #15, #1
   118a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   118ac:	e7df      	b.n	1186e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
   118ae:	2b02      	cmp	r3, #2
   118b0:	d124      	bne.n	118fc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
   118b2:	1ecb      	subs	r3, r1, #3
   118b4:	2b04      	cmp	r3, #4
   118b6:	d804      	bhi.n	118c2 <z_cbvprintf_impl+0x45a>
   118b8:	e8df f003 	tbb	[pc, r3]
   118bc:	18101018 	.word	0x18101018
   118c0:	18          	.byte	0x18
   118c1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
   118c2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
   118c4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   118c8:	f04f 0200 	mov.w	r2, #0
   118cc:	d014      	beq.n	118f8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
   118ce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
   118d0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
   118d4:	d1cc      	bne.n	11870 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
   118d6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
   118d8:	930e      	str	r3, [sp, #56]	; 0x38
   118da:	e7c9      	b.n	11870 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
   118dc:	3407      	adds	r4, #7
   118de:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
   118e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   118e6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
   118ea:	e7c1      	b.n	11870 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
   118ec:	f854 3b04 	ldr.w	r3, [r4], #4
   118f0:	930e      	str	r3, [sp, #56]	; 0x38
   118f2:	2300      	movs	r3, #0
   118f4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
   118f6:	e7bb      	b.n	11870 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
   118f8:	b2db      	uxtb	r3, r3
   118fa:	e7cd      	b.n	11898 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   118fc:	2b04      	cmp	r3, #4
   118fe:	d108      	bne.n	11912 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
   11900:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
   11902:	f024 0407 	bic.w	r4, r4, #7
   11906:	e9d4 2300 	ldrd	r2, r3, [r4]
   1190a:	3408      	adds	r4, #8
   1190c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   11910:	e7ae      	b.n	11870 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11912:	2b03      	cmp	r3, #3
   11914:	d1ac      	bne.n	11870 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
   11916:	f854 3b04 	ldr.w	r3, [r4], #4
   1191a:	e7dd      	b.n	118d8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
   1191c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11920:	2878      	cmp	r0, #120	; 0x78
   11922:	d8b4      	bhi.n	1188e <z_cbvprintf_impl+0x426>
   11924:	2862      	cmp	r0, #98	; 0x62
   11926:	d81c      	bhi.n	11962 <z_cbvprintf_impl+0x4fa>
   11928:	2825      	cmp	r0, #37	; 0x25
   1192a:	f43f adad 	beq.w	11488 <z_cbvprintf_impl+0x20>
   1192e:	2858      	cmp	r0, #88	; 0x58
   11930:	d1ad      	bne.n	1188e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11932:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11936:	9300      	str	r3, [sp, #0]
   11938:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
   1193c:	ab08      	add	r3, sp, #32
   1193e:	aa10      	add	r2, sp, #64	; 0x40
   11940:	f00c fb94 	bl	1e06c <encode_uint>
			if (precision >= 0) {
   11944:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
   11948:	4607      	mov	r7, r0
			if (precision >= 0) {
   1194a:	f280 809a 	bge.w	11a82 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
   1194e:	2f00      	cmp	r7, #0
   11950:	d09d      	beq.n	1188e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11952:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11956:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
   11958:	2e00      	cmp	r6, #0
   1195a:	f000 80c1 	beq.w	11ae0 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
   1195e:	3001      	adds	r0, #1
   11960:	e0be      	b.n	11ae0 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
   11962:	3863      	subs	r0, #99	; 0x63
   11964:	2815      	cmp	r0, #21
   11966:	d892      	bhi.n	1188e <z_cbvprintf_impl+0x426>
   11968:	a201      	add	r2, pc, #4	; (adr r2, 11970 <z_cbvprintf_impl+0x508>)
   1196a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1196e:	bf00      	nop
   11970:	00011a45 	.word	0x00011a45
   11974:	00011a57 	.word	0x00011a57
   11978:	0001188f 	.word	0x0001188f
   1197c:	0001188f 	.word	0x0001188f
   11980:	0001188f 	.word	0x0001188f
   11984:	0001188f 	.word	0x0001188f
   11988:	00011a57 	.word	0x00011a57
   1198c:	0001188f 	.word	0x0001188f
   11990:	0001188f 	.word	0x0001188f
   11994:	0001188f 	.word	0x0001188f
   11998:	0001188f 	.word	0x0001188f
   1199c:	00011ae5 	.word	0x00011ae5
   119a0:	00011a7d 	.word	0x00011a7d
   119a4:	00011aa3 	.word	0x00011aa3
   119a8:	0001188f 	.word	0x0001188f
   119ac:	0001188f 	.word	0x0001188f
   119b0:	000119c9 	.word	0x000119c9
   119b4:	0001188f 	.word	0x0001188f
   119b8:	00011a7d 	.word	0x00011a7d
   119bc:	0001188f 	.word	0x0001188f
   119c0:	0001188f 	.word	0x0001188f
   119c4:	00011a7d 	.word	0x00011a7d
			if (precision >= 0) {
   119c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
   119cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
   119ce:	db35      	blt.n	11a3c <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
   119d0:	4651      	mov	r1, sl
   119d2:	4638      	mov	r0, r7
   119d4:	f00c feaf 	bl	1e736 <strnlen>
			bpe = bps + len;
   119d8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
   119dc:	2f00      	cmp	r7, #0
   119de:	f43f af56 	beq.w	1188e <z_cbvprintf_impl+0x426>
		char sign = 0;
   119e2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
   119e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   119e8:	f013 0210 	ands.w	r2, r3, #16
   119ec:	9205      	str	r2, [sp, #20]
   119ee:	f000 8093 	beq.w	11b18 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
   119f2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
   119f4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
   119f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
   119f8:	bf48      	it	mi
   119fa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
   119fc:	9204      	str	r2, [sp, #16]
   119fe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
   11a00:	bf48      	it	mi
   11a02:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
   11a04:	f1b8 0f00 	cmp.w	r8, #0
   11a08:	f340 80a0 	ble.w	11b4c <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
   11a0c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
   11a10:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
   11a14:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11a18:	0750      	lsls	r0, r2, #29
   11a1a:	9306      	str	r3, [sp, #24]
   11a1c:	f100 8096 	bmi.w	11b4c <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
   11a20:	0651      	lsls	r1, r2, #25
   11a22:	f140 8089 	bpl.w	11b38 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
   11a26:	b13e      	cbz	r6, 11a38 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
   11a28:	4659      	mov	r1, fp
   11a2a:	4630      	mov	r0, r6
   11a2c:	47c8      	blx	r9
   11a2e:	2800      	cmp	r0, #0
   11a30:	db7f      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11a32:	9b06      	ldr	r3, [sp, #24]
   11a34:	3501      	adds	r5, #1
   11a36:	461e      	mov	r6, r3
					pad = '0';
   11a38:	2230      	movs	r2, #48	; 0x30
   11a3a:	e07e      	b.n	11b3a <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
   11a3c:	4638      	mov	r0, r7
   11a3e:	f00c fe73 	bl	1e728 <strlen>
   11a42:	e7c9      	b.n	119d8 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11a46:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
   11a4a:	2600      	movs	r6, #0
			bps = buf;
   11a4c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
   11a4e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
   11a52:	2001      	movs	r0, #1
   11a54:	e7c6      	b.n	119e4 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
   11a56:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
   11a58:	bf5c      	itt	pl
   11a5a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
   11a5e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
   11a60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
   11a64:	bf48      	it	mi
   11a66:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
   11a68:	2b00      	cmp	r3, #0
   11a6a:	f6bf af62 	bge.w	11932 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
   11a6e:	4252      	negs	r2, r2
   11a70:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11a74:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
   11a78:	262d      	movs	r6, #45	; 0x2d
   11a7a:	e75a      	b.n	11932 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
   11a7c:	2600      	movs	r6, #0
   11a7e:	e758      	b.n	11932 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
   11a80:	2600      	movs	r6, #0
				conv->flag_zero = false;
   11a82:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
   11a86:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11a8a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
   11a8c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11a90:	459a      	cmp	sl, r3
				conv->flag_zero = false;
   11a92:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
   11a96:	f67f af5a 	bls.w	1194e <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
   11a9a:	ebaa 0303 	sub.w	r3, sl, r3
   11a9e:	9311      	str	r3, [sp, #68]	; 0x44
   11aa0:	e755      	b.n	1194e <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
   11aa2:	980e      	ldr	r0, [sp, #56]	; 0x38
   11aa4:	b390      	cbz	r0, 11b0c <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11aa6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11aaa:	9300      	str	r3, [sp, #0]
   11aac:	aa10      	add	r2, sp, #64	; 0x40
   11aae:	ab08      	add	r3, sp, #32
   11ab0:	2100      	movs	r1, #0
   11ab2:	f00c fadb 	bl	1e06c <encode_uint>
				conv->altform_0c = true;
   11ab6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
   11aba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11abe:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11ac2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
   11ac6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11aca:	4607      	mov	r7, r0
				conv->altform_0c = true;
   11acc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
   11ad0:	dad6      	bge.n	11a80 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
   11ad2:	2800      	cmp	r0, #0
   11ad4:	f43f aedb 	beq.w	1188e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
   11ad8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   11adc:	1a18      	subs	r0, r3, r0
		char sign = 0;
   11ade:	2600      	movs	r6, #0
   11ae0:	469a      	mov	sl, r3
   11ae2:	e77f      	b.n	119e4 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
   11ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
   11ae6:	2907      	cmp	r1, #7
   11ae8:	f63f aed1 	bhi.w	1188e <z_cbvprintf_impl+0x426>
   11aec:	e8df f001 	tbb	[pc, r1]
   11af0:	0c06040c 	.word	0x0c06040c
   11af4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
   11af8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
   11afa:	e6c8      	b.n	1188e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
   11afc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
   11afe:	e6c6      	b.n	1188e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
   11b00:	17ea      	asrs	r2, r5, #31
   11b02:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
   11b06:	e6c2      	b.n	1188e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11b08:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
   11b0a:	e6c0      	b.n	1188e <z_cbvprintf_impl+0x426>
   11b0c:	4f2e      	ldr	r7, [pc, #184]	; (11bc8 <z_cbvprintf_impl+0x760>)
		char sign = 0;
   11b0e:	4606      	mov	r6, r0
			bpe = bps + 5;
   11b10:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
   11b14:	2005      	movs	r0, #5
   11b16:	e765      	b.n	119e4 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
   11b18:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
   11b1a:	bf48      	it	mi
   11b1c:	3001      	addmi	r0, #1
   11b1e:	e769      	b.n	119f4 <z_cbvprintf_impl+0x58c>
   11b20:	9307      	str	r3, [sp, #28]
					OUTC(pad);
   11b22:	4610      	mov	r0, r2
   11b24:	9206      	str	r2, [sp, #24]
   11b26:	4659      	mov	r1, fp
   11b28:	47c8      	blx	r9
   11b2a:	2800      	cmp	r0, #0
   11b2c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   11b30:	da04      	bge.n	11b3c <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
   11b32:	b015      	add	sp, #84	; 0x54
   11b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11b38:	2220      	movs	r2, #32
					pad = '0';
   11b3a:	4643      	mov	r3, r8
				while (width-- > 0) {
   11b3c:	4619      	mov	r1, r3
   11b3e:	2900      	cmp	r1, #0
   11b40:	f103 33ff 	add.w	r3, r3, #4294967295
   11b44:	dcec      	bgt.n	11b20 <z_cbvprintf_impl+0x6b8>
   11b46:	4445      	add	r5, r8
   11b48:	1a6d      	subs	r5, r5, r1
   11b4a:	4698      	mov	r8, r3
		if (sign != 0) {
   11b4c:	b12e      	cbz	r6, 11b5a <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
   11b4e:	4659      	mov	r1, fp
   11b50:	4630      	mov	r0, r6
   11b52:	47c8      	blx	r9
   11b54:	2800      	cmp	r0, #0
   11b56:	dbec      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11b58:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11b5a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   11b5e:	06da      	lsls	r2, r3, #27
   11b60:	d401      	bmi.n	11b66 <z_cbvprintf_impl+0x6fe>
   11b62:	071b      	lsls	r3, r3, #28
   11b64:	d505      	bpl.n	11b72 <z_cbvprintf_impl+0x70a>
				OUTC('0');
   11b66:	4659      	mov	r1, fp
   11b68:	2030      	movs	r0, #48	; 0x30
   11b6a:	47c8      	blx	r9
   11b6c:	2800      	cmp	r0, #0
   11b6e:	dbe0      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11b70:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11b72:	9b05      	ldr	r3, [sp, #20]
   11b74:	b133      	cbz	r3, 11b84 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
   11b76:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   11b7a:	4659      	mov	r1, fp
   11b7c:	47c8      	blx	r9
   11b7e:	2800      	cmp	r0, #0
   11b80:	dbd7      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11b82:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11b84:	9e04      	ldr	r6, [sp, #16]
   11b86:	442e      	add	r6, r5
   11b88:	e005      	b.n	11b96 <z_cbvprintf_impl+0x72e>
				OUTC('0');
   11b8a:	4659      	mov	r1, fp
   11b8c:	2030      	movs	r0, #48	; 0x30
   11b8e:	47c8      	blx	r9
   11b90:	2800      	cmp	r0, #0
   11b92:	dbce      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11b94:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11b96:	1b73      	subs	r3, r6, r5
   11b98:	2b00      	cmp	r3, #0
   11b9a:	dcf6      	bgt.n	11b8a <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
   11b9c:	4653      	mov	r3, sl
   11b9e:	463a      	mov	r2, r7
   11ba0:	4659      	mov	r1, fp
   11ba2:	4648      	mov	r0, r9
   11ba4:	f00c faa8 	bl	1e0f8 <outs>
   11ba8:	2800      	cmp	r0, #0
   11baa:	dbc2      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11bac:	4405      	add	r5, r0
		while (width > 0) {
   11bae:	44a8      	add	r8, r5
   11bb0:	eba8 0305 	sub.w	r3, r8, r5
   11bb4:	2b00      	cmp	r3, #0
   11bb6:	f77f ae6a 	ble.w	1188e <z_cbvprintf_impl+0x426>
			OUTC(' ');
   11bba:	4659      	mov	r1, fp
   11bbc:	2020      	movs	r0, #32
   11bbe:	47c8      	blx	r9
   11bc0:	2800      	cmp	r0, #0
   11bc2:	dbb6      	blt.n	11b32 <z_cbvprintf_impl+0x6ca>
   11bc4:	3501      	adds	r5, #1
			--width;
   11bc6:	e7f3      	b.n	11bb0 <z_cbvprintf_impl+0x748>
   11bc8:	00021ffc 	.word	0x00021ffc

00011bcc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   11bcc:	f009 ba06 	b.w	1afdc <SystemInit>

00011bd0 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
   11bd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd4:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
   11bd6:	482f      	ldr	r0, [pc, #188]	; (11c94 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
   11bd8:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
   11bda:	f00c fab6 	bl	1e14a <atomic_inc>
   11bde:	4606      	mov	r6, r0
   11be0:	b970      	cbnz	r0, 11c00 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11be2:	4c2d      	ldr	r4, [pc, #180]	; (11c98 <z_log_init.isra.0+0xc8>)
   11be4:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 11c9c <z_log_init.isra.0+0xcc>
	uint32_t mask = 0;
   11be8:	4605      	mov	r5, r0
   11bea:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
   11bec:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11bf0:	4554      	cmp	r4, sl
   11bf2:	d307      	bcc.n	11c04 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
   11bf4:	f1b9 0f00 	cmp.w	r9, #0
   11bf8:	d002      	beq.n	11c00 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
   11bfa:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
   11bfe:	b9e5      	cbnz	r5, 11c3a <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
   11c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
   11c04:	7b23      	ldrb	r3, [r4, #12]
   11c06:	b173      	cbz	r3, 11c26 <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
   11c08:	6823      	ldr	r3, [r4, #0]
   11c0a:	68db      	ldr	r3, [r3, #12]
   11c0c:	b10b      	cbz	r3, 11c12 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
   11c0e:	4620      	mov	r0, r4
   11c10:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
   11c12:	6823      	ldr	r3, [r4, #0]
   11c14:	691b      	ldr	r3, [r3, #16]
   11c16:	b943      	cbnz	r3, 11c2a <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
   11c18:	6863      	ldr	r3, [r4, #4]
   11c1a:	2204      	movs	r2, #4
   11c1c:	6819      	ldr	r1, [r3, #0]
   11c1e:	4620      	mov	r0, r4
   11c20:	f000 f8c4 	bl	11dac <log_backend_enable>
			i++;
   11c24:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11c26:	3410      	adds	r4, #16
   11c28:	e7e2      	b.n	11bf0 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
   11c2a:	4620      	mov	r0, r4
   11c2c:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
   11c2e:	2800      	cmp	r0, #0
   11c30:	d0f2      	beq.n	11c18 <z_log_init.isra.0+0x48>
				mask |= BIT(i);
   11c32:	fa0b f306 	lsl.w	r3, fp, r6
   11c36:	431d      	orrs	r5, r3
   11c38:	e7f4      	b.n	11c24 <z_log_init.isra.0+0x54>
   11c3a:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
   11c3c:	fa95 f4a5 	rbit	r4, r5
   11c40:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
   11c44:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11c48:	0126      	lsls	r6, r4, #4
   11c4a:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
   11c4e:	ea6f 0b03 	mvn.w	fp, r3
   11c52:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11c56:	7b23      	ldrb	r3, [r4, #12]
   11c58:	b163      	cbz	r3, 11c74 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
   11c5a:	f858 3006 	ldr.w	r3, [r8, r6]
   11c5e:	691b      	ldr	r3, [r3, #16]
   11c60:	b993      	cbnz	r3, 11c88 <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
   11c62:	4446      	add	r6, r8
			log_backend_enable(backend,
   11c64:	2204      	movs	r2, #4
   11c66:	6873      	ldr	r3, [r6, #4]
   11c68:	4620      	mov	r0, r4
   11c6a:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
   11c6c:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
   11c70:	f000 f89c 	bl	11dac <log_backend_enable>
	while (mask_cpy) {
   11c74:	2d00      	cmp	r5, #0
   11c76:	d1e1      	bne.n	11c3c <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
   11c78:	b127      	cbz	r7, 11c84 <z_log_init.isra.0+0xb4>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   11c7a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   11c7e:	2100      	movs	r1, #0
   11c80:	f00b f89e 	bl	1cdc0 <z_impl_k_sleep>
   11c84:	464d      	mov	r5, r9
   11c86:	e7ba      	b.n	11bfe <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
   11c88:	4620      	mov	r0, r4
   11c8a:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
   11c8c:	2800      	cmp	r0, #0
   11c8e:	d1f1      	bne.n	11c74 <z_log_init.isra.0+0xa4>
   11c90:	e7e7      	b.n	11c62 <z_log_init.isra.0+0x92>
   11c92:	bf00      	nop
   11c94:	200024cc 	.word	0x200024cc
   11c98:	000216fc 	.word	0x000216fc
   11c9c:	0002170c 	.word	0x0002170c

00011ca0 <log_format_func_t_get>:
}
   11ca0:	4b01      	ldr	r3, [pc, #4]	; (11ca8 <log_format_func_t_get+0x8>)
   11ca2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11ca6:	4770      	bx	lr
   11ca8:	00021768 	.word	0x00021768

00011cac <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
   11cac:	b508      	push	{r3, lr}
   11cae:	4603      	mov	r3, r0
   11cb0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
   11cb2:	b12b      	cbz	r3, 11cc0 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
   11cb4:	4a04      	ldr	r2, [pc, #16]	; (11cc8 <log_set_timestamp_func+0x1c>)
   11cb6:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
   11cb8:	f000 fa7e 	bl	121b8 <log_output_timestamp_freq_set>
	}

	return 0;
   11cbc:	2000      	movs	r0, #0
}
   11cbe:	bd08      	pop	{r3, pc}
		return -EINVAL;
   11cc0:	f06f 0015 	mvn.w	r0, #21
   11cc4:	e7fb      	b.n	11cbe <log_set_timestamp_func+0x12>
   11cc6:	bf00      	nop
   11cc8:	20000614 	.word	0x20000614

00011ccc <log_core_init>:
	panic_mode = false;
   11ccc:	4a04      	ldr	r2, [pc, #16]	; (11ce0 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
   11cce:	4805      	ldr	r0, [pc, #20]	; (11ce4 <log_core_init+0x18>)
	panic_mode = false;
   11cd0:	2300      	movs	r3, #0
   11cd2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11cd4:	4a04      	ldr	r2, [pc, #16]	; (11ce8 <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
   11cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
   11cda:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
   11cdc:	f7ff bfe6 	b.w	11cac <log_set_timestamp_func>
   11ce0:	20002997 	.word	0x20002997
   11ce4:	0001e147 	.word	0x0001e147
   11ce8:	200024c4 	.word	0x200024c4

00011cec <z_impl_log_panic>:

void z_impl_log_panic(void)
{
   11cec:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
   11cee:	4d0b      	ldr	r5, [pc, #44]	; (11d1c <z_impl_log_panic+0x30>)
   11cf0:	7829      	ldrb	r1, [r5, #0]
   11cf2:	b941      	cbnz	r1, 11d06 <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
   11cf4:	2001      	movs	r0, #1
   11cf6:	f7ff ff6b 	bl	11bd0 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11cfa:	4c09      	ldr	r4, [pc, #36]	; (11d20 <z_impl_log_panic+0x34>)
   11cfc:	4e09      	ldr	r6, [pc, #36]	; (11d24 <z_impl_log_panic+0x38>)
   11cfe:	42b4      	cmp	r4, r6
   11d00:	d302      	bcc.n	11d08 <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
   11d02:	2301      	movs	r3, #1
   11d04:	702b      	strb	r3, [r5, #0]
}
   11d06:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11d08:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11d0a:	795b      	ldrb	r3, [r3, #5]
   11d0c:	b11b      	cbz	r3, 11d16 <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
   11d0e:	6823      	ldr	r3, [r4, #0]
   11d10:	4620      	mov	r0, r4
   11d12:	689b      	ldr	r3, [r3, #8]
   11d14:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d16:	3410      	adds	r4, #16
   11d18:	e7f1      	b.n	11cfe <z_impl_log_panic+0x12>
   11d1a:	bf00      	nop
   11d1c:	20002997 	.word	0x20002997
   11d20:	000216fc 	.word	0x000216fc
   11d24:	0002170c 	.word	0x0002170c

00011d28 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
   11d28:	b510      	push	{r4, lr}
   11d2a:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
   11d2c:	4808      	ldr	r0, [pc, #32]	; (11d50 <z_log_dropped+0x28>)
   11d2e:	f00c fa0c 	bl	1e14a <atomic_inc>
	if (buffered) {
   11d32:	b15c      	cbz	r4, 11d4c <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d34:	f3bf 8f5b 	dmb	ish
   11d38:	4b06      	ldr	r3, [pc, #24]	; (11d54 <z_log_dropped+0x2c>)
   11d3a:	e853 1f00 	ldrex	r1, [r3]
   11d3e:	3901      	subs	r1, #1
   11d40:	e843 1200 	strex	r2, r1, [r3]
   11d44:	2a00      	cmp	r2, #0
   11d46:	d1f8      	bne.n	11d3a <z_log_dropped+0x12>
   11d48:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
   11d4c:	bd10      	pop	{r4, pc}
   11d4e:	bf00      	nop
   11d50:	200024c4 	.word	0x200024c4
   11d54:	200024c8 	.word	0x200024c8

00011d58 <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
   11d58:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
   11d5a:	4b0a      	ldr	r3, [pc, #40]	; (11d84 <z_log_msg_commit+0x2c>)
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d5c:	4c0a      	ldr	r4, [pc, #40]	; (11d88 <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
   11d5e:	681b      	ldr	r3, [r3, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d60:	4e0a      	ldr	r6, [pc, #40]	; (11d8c <z_log_msg_commit+0x34>)
{
   11d62:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
   11d64:	4798      	blx	r3
   11d66:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d68:	42b4      	cmp	r4, r6
   11d6a:	d300      	bcc.n	11d6e <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
   11d6c:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
   11d6e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
   11d70:	795b      	ldrb	r3, [r3, #5]
   11d72:	b123      	cbz	r3, 11d7e <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
   11d74:	6823      	ldr	r3, [r4, #0]
   11d76:	4629      	mov	r1, r5
   11d78:	681b      	ldr	r3, [r3, #0]
   11d7a:	4620      	mov	r0, r4
   11d7c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
   11d7e:	3410      	adds	r4, #16
   11d80:	e7f2      	b.n	11d68 <z_log_msg_commit+0x10>
   11d82:	bf00      	nop
   11d84:	20000614 	.word	0x20000614
   11d88:	000216fc 	.word	0x000216fc
   11d8c:	0002170c 	.word	0x0002170c

00011d90 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   11d90:	4a04      	ldr	r2, [pc, #16]	; (11da4 <log_source_name_get+0x14>)
   11d92:	4b05      	ldr	r3, [pc, #20]	; (11da8 <log_source_name_get+0x18>)
   11d94:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
   11d96:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
   11d9a:	bf34      	ite	cc
   11d9c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
   11da0:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
   11da2:	4770      	bx	lr
   11da4:	0002161c 	.word	0x0002161c
   11da8:	000216fc 	.word	0x000216fc

00011dac <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
   11dac:	4b08      	ldr	r3, [pc, #32]	; (11dd0 <log_backend_enable+0x24>)
   11dae:	1ac3      	subs	r3, r0, r3
{
   11db0:	b410      	push	{r4}
	id += backend - log_backend_get(0);
   11db2:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
   11db4:	6844      	ldr	r4, [r0, #4]
   11db6:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
   11db8:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
   11dba:	6843      	ldr	r3, [r0, #4]
   11dbc:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
   11dbe:	6843      	ldr	r3, [r0, #4]
   11dc0:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
   11dc2:	6843      	ldr	r3, [r0, #4]
   11dc4:	2201      	movs	r2, #1
   11dc6:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
   11dc8:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
   11dca:	f00c b9e0 	b.w	1e18e <z_log_notify_backend_enabled>
   11dce:	bf00      	nop
   11dd0:	000216fc 	.word	0x000216fc

00011dd4 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
   11dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd8:	b085      	sub	sp, #20
   11dda:	af02      	add	r7, sp, #8
   11ddc:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
   11de0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   11de2:	4604      	mov	r4, r0
   11de4:	460e      	mov	r6, r1
   11de6:	4693      	mov	fp, r2
   11de8:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
   11dea:	f1ba 0f00 	cmp.w	sl, #0
   11dee:	d035      	beq.n	11e5c <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
   11df0:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
   11df4:	f8cd 9000 	str.w	r9, [sp]
   11df8:	2110      	movs	r1, #16
   11dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11dfc:	4653      	mov	r3, sl
   11dfe:	2000      	movs	r0, #0
   11e00:	f7ff f832 	bl	10e68 <cbvprintf_package>
   11e04:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
   11e06:	4a16      	ldr	r2, [pc, #88]	; (11e60 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
   11e08:	f004 0407 	and.w	r4, r4, #7
   11e0c:	f00b 0b07 	and.w	fp, fp, #7
   11e10:	00e4      	lsls	r4, r4, #3
   11e12:	ea02 2241 	and.w	r2, r2, r1, lsl #9
   11e16:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
   11e1a:	4314      	orrs	r4, r2
   11e1c:	4a11      	ldr	r2, [pc, #68]	; (11e64 <z_impl_z_log_msg_runtime_vcreate+0x90>)
   11e1e:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
   11e22:	3517      	adds	r5, #23
   11e24:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
   11e26:	f025 0507 	bic.w	r5, r5, #7
   11e2a:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
   11e2e:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
   11e30:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
   11e32:	f1ba 0f00 	cmp.w	sl, #0
   11e36:	d007      	beq.n	11e48 <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
   11e38:	f8cd 9000 	str.w	r9, [sp]
   11e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   11e3e:	4653      	mov	r3, sl
   11e40:	f105 0010 	add.w	r0, r5, #16
   11e44:	f7ff f810 	bl	10e68 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
   11e48:	4643      	mov	r3, r8
   11e4a:	4622      	mov	r2, r4
   11e4c:	4631      	mov	r1, r6
   11e4e:	4628      	mov	r0, r5
   11e50:	f00c f9a0 	bl	1e194 <z_log_msg_finalize>
	}
}
   11e54:	370c      	adds	r7, #12
   11e56:	46bd      	mov	sp, r7
   11e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
   11e5c:	4651      	mov	r1, sl
   11e5e:	e7d2      	b.n	11e06 <z_impl_z_log_msg_runtime_vcreate+0x32>
   11e60:	0007fe00 	.word	0x0007fe00
   11e64:	7ff80000 	.word	0x7ff80000

00011e68 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   11e68:	b40e      	push	{r1, r2, r3}
   11e6a:	b503      	push	{r0, r1, lr}
   11e6c:	ab03      	add	r3, sp, #12
   11e6e:	4601      	mov	r1, r0
   11e70:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11e74:	4804      	ldr	r0, [pc, #16]	; (11e88 <print_formatted+0x20>)
	va_start(args, fmt);
   11e76:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11e78:	f00c f9cf 	bl	1e21a <cbvprintf>
	va_end(args);

	return length;
}
   11e7c:	b002      	add	sp, #8
   11e7e:	f85d eb04 	ldr.w	lr, [sp], #4
   11e82:	b003      	add	sp, #12
   11e84:	4770      	bx	lr
   11e86:	bf00      	nop
   11e88:	0001e1c9 	.word	0x0001e1c9

00011e8c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   11e8c:	06ca      	lsls	r2, r1, #27
   11e8e:	d405      	bmi.n	11e9c <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   11e90:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
   11e92:	bf4c      	ite	mi
   11e94:	4902      	ldrmi	r1, [pc, #8]	; (11ea0 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
   11e96:	4903      	ldrpl	r1, [pc, #12]	; (11ea4 <newline_print+0x18>)
   11e98:	f7ff bfe6 	b.w	11e68 <print_formatted>
	}
}
   11e9c:	4770      	bx	lr
   11e9e:	bf00      	nop
   11ea0:	00022010 	.word	0x00022010
   11ea4:	0002200f 	.word	0x0002200f

00011ea8 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
   11ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eac:	b089      	sub	sp, #36	; 0x24
   11eae:	469b      	mov	fp, r3
   11eb0:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   11eb4:	9304      	str	r3, [sp, #16]
   11eb6:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
   11eba:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
   11ebc:	9b04      	ldr	r3, [sp, #16]
{
   11ebe:	9206      	str	r2, [sp, #24]
   11ec0:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
   11ec4:	4604      	mov	r4, r0
   11ec6:	460d      	mov	r5, r1
	if (!raw_string) {
   11ec8:	2b00      	cmp	r3, #0
   11eca:	f000 8087 	beq.w	11fdc <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11ece:	f006 0308 	and.w	r3, r6, #8
   11ed2:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
   11ed4:	f00c f95c 	bl	1e190 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   11ed8:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
   11edc:	4602      	mov	r2, r0
   11ede:	2800      	cmp	r0, #0
   11ee0:	d04b      	beq.n	11f7a <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
   11ee2:	4986      	ldr	r1, [pc, #536]	; (120fc <log_output_process+0x254>)
   11ee4:	4620      	mov	r0, r4
   11ee6:	f7ff ffbf 	bl	11e68 <print_formatted>
   11eea:	4680      	mov	r8, r0
	if (stamp) {
   11eec:	f1ba 0f00 	cmp.w	sl, #0
   11ef0:	d008      	beq.n	11f04 <log_output_process+0x5c>
	if (!format) {
   11ef2:	f016 0f44 	tst.w	r6, #68	; 0x44
   11ef6:	d142      	bne.n	11f7e <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
   11ef8:	4981      	ldr	r1, [pc, #516]	; (12100 <log_output_process+0x258>)
   11efa:	462a      	mov	r2, r5
   11efc:	4620      	mov	r0, r4
   11efe:	f7ff ffb3 	bl	11e68 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   11f02:	4480      	add	r8, r0
	if (color) {
   11f04:	f006 0301 	and.w	r3, r6, #1
   11f08:	b15b      	cbz	r3, 11f22 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
   11f0a:	4b7e      	ldr	r3, [pc, #504]	; (12104 <log_output_process+0x25c>)
   11f0c:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
   11f0e:	497e      	ldr	r1, [pc, #504]	; (12108 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
   11f10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
   11f14:	4b7d      	ldr	r3, [pc, #500]	; (1210c <log_output_process+0x264>)
   11f16:	4620      	mov	r0, r4
   11f18:	2a00      	cmp	r2, #0
   11f1a:	bf08      	it	eq
   11f1c:	461a      	moveq	r2, r3
   11f1e:	f7ff ffa3 	bl	11e68 <print_formatted>
	if (level_on) {
   11f22:	f006 0308 	and.w	r3, r6, #8
   11f26:	2b00      	cmp	r3, #0
   11f28:	d055      	beq.n	11fd6 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
   11f2a:	4b79      	ldr	r3, [pc, #484]	; (12110 <log_output_process+0x268>)
   11f2c:	9a04      	ldr	r2, [sp, #16]
   11f2e:	4979      	ldr	r1, [pc, #484]	; (12114 <log_output_process+0x26c>)
   11f30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   11f34:	4620      	mov	r0, r4
   11f36:	f7ff ff97 	bl	11e68 <print_formatted>
   11f3a:	4605      	mov	r5, r0
	if (domain) {
   11f3c:	9b06      	ldr	r3, [sp, #24]
   11f3e:	b12b      	cbz	r3, 11f4c <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
   11f40:	4975      	ldr	r1, [pc, #468]	; (12118 <log_output_process+0x270>)
   11f42:	461a      	mov	r2, r3
   11f44:	4620      	mov	r0, r4
   11f46:	f7ff ff8f 	bl	11e68 <print_formatted>
   11f4a:	4405      	add	r5, r0
	if (source) {
   11f4c:	f1bb 0f00 	cmp.w	fp, #0
   11f50:	d005      	beq.n	11f5e <log_output_process+0xb6>
		total += print_formatted(output,
   11f52:	4972      	ldr	r1, [pc, #456]	; (1211c <log_output_process+0x274>)
   11f54:	465a      	mov	r2, fp
   11f56:	4620      	mov	r0, r4
   11f58:	f7ff ff86 	bl	11e68 <print_formatted>
   11f5c:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
   11f5e:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
   11f60:	f1b9 0f00 	cmp.w	r9, #0
   11f64:	d149      	bne.n	11ffa <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
   11f66:	2f00      	cmp	r7, #0
   11f68:	d14f      	bne.n	1200a <log_output_process+0x162>
	if (color) {
   11f6a:	07f3      	lsls	r3, r6, #31
   11f6c:	f100 80c0 	bmi.w	120f0 <log_output_process+0x248>
	newline_print(output, flags);
   11f70:	4631      	mov	r1, r6
   11f72:	4620      	mov	r0, r4
   11f74:	f7ff ff8a 	bl	11e8c <newline_print>
}
   11f78:	e0b4      	b.n	120e4 <log_output_process+0x23c>
	uint32_t length = 0U;
   11f7a:	4680      	mov	r8, r0
   11f7c:	e7b6      	b.n	11eec <log_output_process+0x44>
	} else if (freq != 0U) {
   11f7e:	4b68      	ldr	r3, [pc, #416]	; (12120 <log_output_process+0x278>)
   11f80:	6818      	ldr	r0, [r3, #0]
   11f82:	2800      	cmp	r0, #0
   11f84:	d0bd      	beq.n	11f02 <log_output_process+0x5a>
		timestamp /= timestamp_div;
   11f86:	4b67      	ldr	r3, [pc, #412]	; (12124 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
   11f88:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
   11f8c:	681b      	ldr	r3, [r3, #0]
   11f8e:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
   11f92:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   11f96:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
   11f9a:	fb00 5513 	mls	r5, r0, r3, r5
   11f9e:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
   11fa2:	fb0e f505 	mul.w	r5, lr, r5
   11fa6:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
   11faa:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11fac:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
   11fb0:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11fb4:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
   11fb8:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11fbc:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
   11fc0:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   11fc2:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
   11fc6:	4958      	ldr	r1, [pc, #352]	; (12128 <log_output_process+0x280>)
   11fc8:	e9cd c501 	strd	ip, r5, [sp, #4]
   11fcc:	4652      	mov	r2, sl
   11fce:	4620      	mov	r0, r4
   11fd0:	f7ff ff4a 	bl	11e68 <print_formatted>
   11fd4:	e795      	b.n	11f02 <log_output_process+0x5a>
	int total = 0;
   11fd6:	f006 0508 	and.w	r5, r6, #8
   11fda:	e7af      	b.n	11f3c <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   11fdc:	f1bb 0f01 	cmp.w	fp, #1
   11fe0:	d106      	bne.n	11ff0 <log_output_process+0x148>
	if (package) {
   11fe2:	f1b9 0f00 	cmp.w	r9, #0
   11fe6:	d164      	bne.n	120b2 <log_output_process+0x20a>
	if (data_len) {
   11fe8:	2f00      	cmp	r7, #0
   11fea:	d07b      	beq.n	120e4 <log_output_process+0x23c>
		prefix_offset = 0;
   11fec:	2500      	movs	r5, #0
   11fee:	e00c      	b.n	1200a <log_output_process+0x162>
	if (package) {
   11ff0:	f1b9 0f00 	cmp.w	r9, #0
   11ff4:	d0f8      	beq.n	11fe8 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   11ff6:	484d      	ldr	r0, [pc, #308]	; (1212c <log_output_process+0x284>)
   11ff8:	e05c      	b.n	120b4 <log_output_process+0x20c>
		cb = out_func;
   11ffa:	484d      	ldr	r0, [pc, #308]	; (12130 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
   11ffc:	494d      	ldr	r1, [pc, #308]	; (12134 <log_output_process+0x28c>)
   11ffe:	464b      	mov	r3, r9
   12000:	4622      	mov	r2, r4
   12002:	f00b fd02 	bl	1da0a <cbpprintf_external>
	if (data_len) {
   12006:	2f00      	cmp	r7, #0
   12008:	d068      	beq.n	120dc <log_output_process+0x234>
		print_formatted(output, " ");
   1200a:	f8df 912c 	ldr.w	r9, [pc, #300]	; 12138 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
   1200e:	f8df a12c 	ldr.w	sl, [pc, #300]	; 1213c <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12012:	2f10      	cmp	r7, #16
	newline_print(output, flags);
   12014:	4631      	mov	r1, r6
   12016:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
   12018:	46b8      	mov	r8, r7
   1201a:	bf28      	it	cs
   1201c:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
   12020:	f7ff ff34 	bl	11e8c <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
   12024:	f04f 0b00 	mov.w	fp, #0
   12028:	455d      	cmp	r5, fp
   1202a:	dc45      	bgt.n	120b8 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
   1202c:	9b05      	ldr	r3, [sp, #20]
   1202e:	4651      	mov	r1, sl
   12030:	781a      	ldrb	r2, [r3, #0]
   12032:	4620      	mov	r0, r4
   12034:	f7ff ff18 	bl	11e68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12038:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
   1203c:	f01b 0f07 	tst.w	fp, #7
   12040:	d103      	bne.n	1204a <log_output_process+0x1a2>
			print_formatted(output, " ");
   12042:	4649      	mov	r1, r9
   12044:	4620      	mov	r0, r4
   12046:	f7ff ff0f 	bl	11e68 <print_formatted>
		if (i < length) {
   1204a:	45d8      	cmp	r8, fp
   1204c:	d93b      	bls.n	120c6 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
   1204e:	9b05      	ldr	r3, [sp, #20]
   12050:	4651      	mov	r1, sl
   12052:	f813 200b 	ldrb.w	r2, [r3, fp]
   12056:	4620      	mov	r0, r4
   12058:	f7ff ff06 	bl	11e68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1205c:	f10b 0b01 	add.w	fp, fp, #1
   12060:	f1bb 0f10 	cmp.w	fp, #16
   12064:	d1ea      	bne.n	1203c <log_output_process+0x194>
	print_formatted(output, "|");
   12066:	4936      	ldr	r1, [pc, #216]	; (12140 <log_output_process+0x298>)
   12068:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1206a:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
   1206e:	f7ff fefb 	bl	11e68 <print_formatted>
		if (i < length) {
   12072:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
   12074:	9b05      	ldr	r3, [sp, #20]
   12076:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
   12078:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
   1207c:	295f      	cmp	r1, #95	; 0x5f
   1207e:	bf28      	it	cs
   12080:	222e      	movcs	r2, #46	; 0x2e
   12082:	4930      	ldr	r1, [pc, #192]	; (12144 <log_output_process+0x29c>)
   12084:	4620      	mov	r0, r4
   12086:	f7ff feef 	bl	11e68 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1208a:	f10b 0b01 	add.w	fp, fp, #1
   1208e:	f1bb 0f10 	cmp.w	fp, #16
   12092:	d01d      	beq.n	120d0 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
   12094:	f01b 0f07 	tst.w	fp, #7
   12098:	d103      	bne.n	120a2 <log_output_process+0x1fa>
			print_formatted(output, " ");
   1209a:	4649      	mov	r1, r9
   1209c:	4620      	mov	r0, r4
   1209e:	f7ff fee3 	bl	11e68 <print_formatted>
		if (i < length) {
   120a2:	45d8      	cmp	r8, fp
   120a4:	465a      	mov	r2, fp
   120a6:	d8e5      	bhi.n	12074 <log_output_process+0x1cc>
			print_formatted(output, " ");
   120a8:	4649      	mov	r1, r9
   120aa:	4620      	mov	r0, r4
   120ac:	f7ff fedc 	bl	11e68 <print_formatted>
   120b0:	e7eb      	b.n	1208a <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
   120b2:	481f      	ldr	r0, [pc, #124]	; (12130 <log_output_process+0x288>)
		prefix_offset = 0;
   120b4:	9d04      	ldr	r5, [sp, #16]
   120b6:	e7a1      	b.n	11ffc <log_output_process+0x154>
		print_formatted(output, " ");
   120b8:	4649      	mov	r1, r9
   120ba:	4620      	mov	r0, r4
   120bc:	f7ff fed4 	bl	11e68 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   120c0:	f10b 0b01 	add.w	fp, fp, #1
   120c4:	e7b0      	b.n	12028 <log_output_process+0x180>
			print_formatted(output, "   ");
   120c6:	4920      	ldr	r1, [pc, #128]	; (12148 <log_output_process+0x2a0>)
   120c8:	4620      	mov	r0, r4
   120ca:	f7ff fecd 	bl	11e68 <print_formatted>
   120ce:	e7c5      	b.n	1205c <log_output_process+0x1b4>
		data += length;
   120d0:	9b05      	ldr	r3, [sp, #20]
	} while (len);
   120d2:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
   120d6:	4443      	add	r3, r8
   120d8:	9305      	str	r3, [sp, #20]
	} while (len);
   120da:	d19a      	bne.n	12012 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
   120dc:	9b04      	ldr	r3, [sp, #16]
   120de:	2b00      	cmp	r3, #0
   120e0:	f47f af43 	bne.w	11f6a <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
   120e4:	4620      	mov	r0, r4
}
   120e6:	b009      	add	sp, #36	; 0x24
   120e8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
   120ec:	f00c b89c 	b.w	1e228 <log_output_flush>
		print_formatted(output, "%s", log_color);
   120f0:	4a06      	ldr	r2, [pc, #24]	; (1210c <log_output_process+0x264>)
   120f2:	4905      	ldr	r1, [pc, #20]	; (12108 <log_output_process+0x260>)
   120f4:	4620      	mov	r0, r4
   120f6:	f7ff feb7 	bl	11e68 <print_formatted>
}
   120fa:	e739      	b.n	11f70 <log_output_process+0xc8>
   120fc:	00022017 	.word	0x00022017
   12100:	0002201b 	.word	0x0002201b
   12104:	00021778 	.word	0x00021778
   12108:	0002272b 	.word	0x0002272b
   1210c:	00022012 	.word	0x00022012
   12110:	0002178c 	.word	0x0002178c
   12114:	00022040 	.word	0x00022040
   12118:	00022046 	.word	0x00022046
   1211c:	0002204a 	.word	0x0002204a
   12120:	200024d4 	.word	0x200024d4
   12124:	200024d0 	.word	0x200024d0
   12128:	00022024 	.word	0x00022024
   1212c:	0001e1e5 	.word	0x0001e1e5
   12130:	0001e1c9 	.word	0x0001e1c9
   12134:	0001e21b 	.word	0x0001e21b
   12138:	00022057 	.word	0x00022057
   1213c:	0002204f 	.word	0x0002204f
   12140:	00022059 	.word	0x00022059
   12144:	0002205b 	.word	0x0002205b
   12148:	00022055 	.word	0x00022055

0001214c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
   1214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
   12150:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
   12152:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
   12154:	688e      	ldr	r6, [r1, #8]
   12156:	b086      	sub	sp, #24
   12158:	4605      	mov	r5, r0
   1215a:	460c      	mov	r4, r1
   1215c:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
   1215e:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
   12162:	b15b      	cbz	r3, 1217c <log_output_msg_process+0x30>
   12164:	4a13      	ldr	r2, [pc, #76]	; (121b4 <log_output_msg_process+0x68>)
   12166:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
   12168:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   1216c:	2900      	cmp	r1, #0
   1216e:	db1f      	blt.n	121b0 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
   12170:	7820      	ldrb	r0, [r4, #0]
   12172:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   12176:	f7ff fe0b 	bl	11d90 <log_source_name_get>
   1217a:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
   1217c:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
   1217e:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
   12180:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
   12184:	9700      	str	r7, [sp, #0]
   12186:	f3c2 2249 	ubfx	r2, r2, #9, #10
   1218a:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
   1218c:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
   12190:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   12194:	bf08      	it	eq
   12196:	2100      	moveq	r1, #0
   12198:	e9cd 0803 	strd	r0, r8, [sp, #12]
   1219c:	e9cd 1401 	strd	r1, r4, [sp, #4]
   121a0:	2200      	movs	r2, #0
   121a2:	4631      	mov	r1, r6
   121a4:	4628      	mov	r0, r5
   121a6:	f7ff fe7f 	bl	11ea8 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
   121aa:	b006      	add	sp, #24
   121ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
   121b0:	2300      	movs	r3, #0
   121b2:	e7e3      	b.n	1217c <log_output_msg_process+0x30>
   121b4:	0002161c 	.word	0x0002161c

000121b8 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   121b8:	4a07      	ldr	r2, [pc, #28]	; (121d8 <log_output_timestamp_freq_set+0x20>)
   121ba:	2100      	movs	r1, #0
   121bc:	2301      	movs	r3, #1
   121be:	4290      	cmp	r0, r2
   121c0:	d806      	bhi.n	121d0 <log_output_timestamp_freq_set+0x18>
   121c2:	4a06      	ldr	r2, [pc, #24]	; (121dc <log_output_timestamp_freq_set+0x24>)
   121c4:	b901      	cbnz	r1, 121c8 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
   121c6:	2301      	movs	r3, #1
   121c8:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   121ca:	4b05      	ldr	r3, [pc, #20]	; (121e0 <log_output_timestamp_freq_set+0x28>)
   121cc:	6018      	str	r0, [r3, #0]
}
   121ce:	4770      	bx	lr
		frequency /= 2U;
   121d0:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   121d2:	005b      	lsls	r3, r3, #1
   121d4:	2101      	movs	r1, #1
   121d6:	e7f2      	b.n	121be <log_output_timestamp_freq_set+0x6>
   121d8:	000f4240 	.word	0x000f4240
   121dc:	200024d0 	.word	0x200024d0
   121e0:	200024d4 	.word	0x200024d4

000121e4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   121e4:	4b01      	ldr	r3, [pc, #4]	; (121ec <log_backend_rtt_init+0x8>)
   121e6:	2201      	movs	r2, #1
   121e8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   121ea:	4770      	bx	lr
   121ec:	20002998 	.word	0x20002998

000121f0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
   121f0:	4b01      	ldr	r3, [pc, #4]	; (121f8 <format_set+0x8>)
	return 0;
}
   121f2:	2000      	movs	r0, #0
	log_format_current = log_type;
   121f4:	6019      	str	r1, [r3, #0]
}
   121f6:	4770      	bx	lr
   121f8:	200024ec 	.word	0x200024ec

000121fc <panic>:
	panic_mode = true;
   121fc:	4b02      	ldr	r3, [pc, #8]	; (12208 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   121fe:	4803      	ldr	r0, [pc, #12]	; (1220c <panic+0x10>)
   12200:	2201      	movs	r2, #1
   12202:	701a      	strb	r2, [r3, #0]
   12204:	f00c b810 	b.w	1e228 <log_output_flush>
   12208:	20002999 	.word	0x20002999
   1220c:	000217bc 	.word	0x000217bc

00012210 <process>:
{
   12210:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12212:	4b06      	ldr	r3, [pc, #24]	; (1222c <process+0x1c>)
   12214:	6818      	ldr	r0, [r3, #0]
{
   12216:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   12218:	f7ff fd42 	bl	11ca0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
   1221c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
   1221e:	4603      	mov	r3, r0
}
   12220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
   12224:	4802      	ldr	r0, [pc, #8]	; (12230 <process+0x20>)
   12226:	220f      	movs	r2, #15
   12228:	4718      	bx	r3
   1222a:	bf00      	nop
   1222c:	200024ec 	.word	0x200024ec
   12230:	000217bc 	.word	0x000217bc

00012234 <data_out_block_mode>:
{
   12234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12236:	4d19      	ldr	r5, [pc, #100]	; (1229c <data_out_block_mode+0x68>)
   12238:	4607      	mov	r7, r0
   1223a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   1223c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1223e:	4632      	mov	r2, r6
   12240:	4639      	mov	r1, r7
   12242:	2000      	movs	r0, #0
   12244:	f009 fce2 	bl	1bc0c <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
   12248:	b1c8      	cbz	r0, 1227e <data_out_block_mode+0x4a>
	host_present = true;
   1224a:	2301      	movs	r3, #1
   1224c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
   1224e:	4b14      	ldr	r3, [pc, #80]	; (122a0 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
   12250:	781b      	ldrb	r3, [r3, #0]
   12252:	b92b      	cbnz	r3, 12260 <data_out_block_mode+0x2c>
}
   12254:	4630      	mov	r0, r6
   12256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
   12258:	b95c      	cbnz	r4, 12272 <data_out_block_mode+0x3e>
		host_present = false;
   1225a:	702c      	strb	r4, [r5, #0]
   1225c:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12260:	2000      	movs	r0, #0
   12262:	f009 fd47 	bl	1bcf4 <SEGGER_RTT_HasDataUp>
   12266:	2800      	cmp	r0, #0
   12268:	d0f4      	beq.n	12254 <data_out_block_mode+0x20>
   1226a:	782b      	ldrb	r3, [r5, #0]
   1226c:	2b00      	cmp	r3, #0
   1226e:	d1f3      	bne.n	12258 <data_out_block_mode+0x24>
   12270:	e7f0      	b.n	12254 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
   12272:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
   12274:	f241 3088 	movw	r0, #5000	; 0x1388
   12278:	f00e fea0 	bl	20fbc <z_impl_k_busy_wait>
}
   1227c:	e7f0      	b.n	12260 <data_out_block_mode+0x2c>
		} else if (host_present) {
   1227e:	782b      	ldrb	r3, [r5, #0]
   12280:	b113      	cbz	r3, 12288 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
   12282:	3c01      	subs	r4, #1
   12284:	d104      	bne.n	12290 <data_out_block_mode+0x5c>
		host_present = false;
   12286:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   12288:	782b      	ldrb	r3, [r5, #0]
   1228a:	2b00      	cmp	r3, #0
   1228c:	d1d7      	bne.n	1223e <data_out_block_mode+0xa>
   1228e:	e7e1      	b.n	12254 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
   12290:	f241 3088 	movw	r0, #5000	; 0x1388
   12294:	f00e fe92 	bl	20fbc <z_impl_k_busy_wait>
   12298:	e7f6      	b.n	12288 <data_out_block_mode+0x54>
   1229a:	bf00      	nop
   1229c:	20002998 	.word	0x20002998
   122a0:	20002999 	.word	0x20002999

000122a4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   122a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   122a8:	4605      	mov	r5, r0
	__asm__ volatile(
   122aa:	f04f 0340 	mov.w	r3, #64	; 0x40
   122ae:	f3ef 8611 	mrs	r6, BASEPRI
   122b2:	f383 8812 	msr	BASEPRI_MAX, r3
   122b6:	f3bf 8f6f 	isb	sy
	return list->head;
   122ba:	4b0e      	ldr	r3, [pc, #56]	; (122f4 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
   122bc:	4f0e      	ldr	r7, [pc, #56]	; (122f8 <pm_state_notify+0x54>)
   122be:	681c      	ldr	r4, [r3, #0]
   122c0:	f8df 8038 	ldr.w	r8, [pc, #56]	; 122fc <pm_state_notify+0x58>
   122c4:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   122c8:	b92c      	cbnz	r4, 122d6 <pm_state_notify+0x32>
	__asm__ volatile(
   122ca:	f386 8811 	msr	BASEPRI, r6
   122ce:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   122d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
   122d6:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
   122da:	2d00      	cmp	r5, #0
   122dc:	bf18      	it	ne
   122de:	4613      	movne	r3, r2
		if (callback) {
   122e0:	b12b      	cbz	r3, 122ee <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
   122e2:	f898 2014 	ldrb.w	r2, [r8, #20]
   122e6:	fb09 f202 	mul.w	r2, r9, r2
   122ea:	5cb8      	ldrb	r0, [r7, r2]
   122ec:	4798      	blx	r3
	return node->next;
   122ee:	6824      	ldr	r4, [r4, #0]
   122f0:	e7ea      	b.n	122c8 <pm_state_notify+0x24>
   122f2:	bf00      	nop
   122f4:	20002508 	.word	0x20002508
   122f8:	200024fc 	.word	0x200024fc
   122fc:	20002908 	.word	0x20002908

00012300 <pm_system_resume>:

void pm_system_resume(void)
{
   12300:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
   12302:	4b19      	ldr	r3, [pc, #100]	; (12368 <pm_system_resume+0x68>)
   12304:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12306:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1230a:	f004 031f 	and.w	r3, r4, #31
   1230e:	2201      	movs	r2, #1
   12310:	409a      	lsls	r2, r3
   12312:	4b16      	ldr	r3, [pc, #88]	; (1236c <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   12314:	0961      	lsrs	r1, r4, #5
   12316:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1231a:	43d0      	mvns	r0, r2
   1231c:	e853 1f00 	ldrex	r1, [r3]
   12320:	ea01 0500 	and.w	r5, r1, r0
   12324:	e843 5600 	strex	r6, r5, [r3]
   12328:	2e00      	cmp	r6, #0
   1232a:	d1f7      	bne.n	1231c <pm_system_resume+0x1c>
   1232c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   12330:	420a      	tst	r2, r1
   12332:	d013      	beq.n	1235c <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
   12334:	4b0e      	ldr	r3, [pc, #56]	; (12370 <pm_system_resume+0x70>)
   12336:	4d0f      	ldr	r5, [pc, #60]	; (12374 <pm_system_resume+0x74>)
   12338:	b18b      	cbz	r3, 1235e <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
   1233a:	230c      	movs	r3, #12
   1233c:	4363      	muls	r3, r4
   1233e:	18ea      	adds	r2, r5, r3
   12340:	5ce8      	ldrb	r0, [r5, r3]
   12342:	7851      	ldrb	r1, [r2, #1]
   12344:	f00c fa3f 	bl	1e7c6 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
   12348:	2000      	movs	r0, #0
   1234a:	f7ff ffab 	bl	122a4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1234e:	230c      	movs	r3, #12
   12350:	435c      	muls	r4, r3
   12352:	192a      	adds	r2, r5, r4
   12354:	2300      	movs	r3, #0
   12356:	512b      	str	r3, [r5, r4]
   12358:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
   1235c:	bd70      	pop	{r4, r5, r6, pc}
   1235e:	f383 8811 	msr	BASEPRI, r3
   12362:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   12366:	e7ef      	b.n	12348 <pm_system_resume+0x48>
   12368:	20002908 	.word	0x20002908
   1236c:	20002510 	.word	0x20002510
   12370:	0001e7c7 	.word	0x0001e7c7
   12374:	200024fc 	.word	0x200024fc

00012378 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
   12378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
   1237c:	4b35      	ldr	r3, [pc, #212]	; (12454 <pm_system_suspend+0xdc>)
{
   1237e:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
   12380:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
   12382:	f04f 0340 	mov.w	r3, #64	; 0x40
   12386:	f3ef 8811 	mrs	r8, BASEPRI
   1238a:	f383 8812 	msr	BASEPRI_MAX, r3
   1238e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
   12392:	240c      	movs	r4, #12
   12394:	4b30      	ldr	r3, [pc, #192]	; (12458 <pm_system_suspend+0xe0>)
   12396:	4e31      	ldr	r6, [pc, #196]	; (1245c <pm_system_suspend+0xe4>)
   12398:	436c      	muls	r4, r5
   1239a:	191a      	adds	r2, r3, r4
   1239c:	5d19      	ldrb	r1, [r3, r4]
   1239e:	2900      	cmp	r1, #0
   123a0:	d04c      	beq.n	1243c <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
   123a2:	ca07      	ldmia	r2, {r0, r1, r2}
   123a4:	eb06 0c04 	add.w	ip, r6, r4
   123a8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
   123ac:	2200      	movs	r2, #0
   123ae:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
   123b0:	f388 8811 	msr	BASEPRI, r8
   123b4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
   123b8:	230c      	movs	r3, #12
   123ba:	436b      	muls	r3, r5
   123bc:	18f2      	adds	r2, r6, r3
   123be:	5cf0      	ldrb	r0, [r6, r3]
   123c0:	2800      	cmp	r0, #0
   123c2:	d039      	beq.n	12438 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
   123c4:	1c7b      	adds	r3, r7, #1
   123c6:	d010      	beq.n	123ea <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   123c8:	f8d2 c008 	ldr.w	ip, [r2, #8]
   123cc:	4c24      	ldr	r4, [pc, #144]	; (12460 <pm_system_suspend+0xe8>)
   123ce:	4a25      	ldr	r2, [pc, #148]	; (12464 <pm_system_suspend+0xec>)
   123d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   123d4:	2100      	movs	r1, #0
   123d6:	fbec 4100 	umlal	r4, r1, ip, r0
   123da:	2300      	movs	r3, #0
   123dc:	4620      	mov	r0, r4
   123de:	f7ed fe8f 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   123e2:	2101      	movs	r1, #1
   123e4:	1a38      	subs	r0, r7, r0
   123e6:	f00e fdc9 	bl	20f7c <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   123ea:	f00a fc2b 	bl	1cc44 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   123ee:	2001      	movs	r0, #1
   123f0:	f7ff ff58 	bl	122a4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   123f4:	f3bf 8f5b 	dmb	ish
   123f8:	4b1b      	ldr	r3, [pc, #108]	; (12468 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   123fa:	096a      	lsrs	r2, r5, #5
   123fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
   12400:	f005 011f 	and.w	r1, r5, #31
   12404:	2201      	movs	r2, #1
   12406:	408a      	lsls	r2, r1
   12408:	e853 0f00 	ldrex	r0, [r3]
   1240c:	4310      	orrs	r0, r2
   1240e:	e843 0100 	strex	r1, r0, [r3]
   12412:	2900      	cmp	r1, #0
   12414:	d1f8      	bne.n	12408 <pm_system_suspend+0x90>
   12416:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
   1241a:	4b14      	ldr	r3, [pc, #80]	; (1246c <pm_system_suspend+0xf4>)
   1241c:	b13b      	cbz	r3, 1242e <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
   1241e:	230c      	movs	r3, #12
   12420:	fb03 f005 	mul.w	r0, r3, r5
   12424:	1833      	adds	r3, r6, r0
   12426:	5c30      	ldrb	r0, [r6, r0]
   12428:	7859      	ldrb	r1, [r3, #1]
   1242a:	f00c f9c0 	bl	1e7ae <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
   1242e:	f7ff ff67 	bl	12300 <pm_system_resume>
	k_sched_unlock();
   12432:	f00a fc1b 	bl	1cc6c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
   12436:	2001      	movs	r0, #1
}
   12438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
   1243c:	4601      	mov	r1, r0
   1243e:	4628      	mov	r0, r5
   12440:	f000 f816 	bl	12470 <pm_policy_next_state>
		if (info != NULL) {
   12444:	2800      	cmp	r0, #0
   12446:	d0b3      	beq.n	123b0 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
   12448:	c807      	ldmia	r0, {r0, r1, r2}
   1244a:	4434      	add	r4, r6
   1244c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   12450:	e7ae      	b.n	123b0 <pm_system_suspend+0x38>
   12452:	bf00      	nop
   12454:	20002908 	.word	0x20002908
   12458:	200024f0 	.word	0x200024f0
   1245c:	200024fc 	.word	0x200024fc
   12460:	000f423f 	.word	0x000f423f
   12464:	000f4240 	.word	0x000f4240
   12468:	20002510 	.word	0x20002510
   1246c:	0001e7af 	.word	0x0001e7af

00012470 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
   12470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12474:	b085      	sub	sp, #20
   12476:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12478:	a903      	add	r1, sp, #12
   1247a:	f000 f843 	bl	12504 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   1247e:	4b1e      	ldr	r3, [pc, #120]	; (124f8 <pm_policy_next_state+0x88>)
   12480:	9d03      	ldr	r5, [sp, #12]
   12482:	f8d3 a000 	ldr.w	sl, [r3]
   12486:	f8df 8074 	ldr.w	r8, [pc, #116]	; 124fc <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   1248a:	1e43      	subs	r3, r0, #1
   1248c:	b21b      	sxth	r3, r3
   1248e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
   12492:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   12494:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   12498:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1249c:	f04f 0b00 	mov.w	fp, #0
   124a0:	b924      	cbnz	r4, 124ac <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
   124a2:	46a1      	mov	r9, r4
}
   124a4:	4648      	mov	r0, r9
   124a6:	b005      	add	sp, #20
   124a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ac:	6868      	ldr	r0, [r5, #4]
   124ae:	4a14      	ldr	r2, [pc, #80]	; (12500 <pm_policy_next_state+0x90>)
   124b0:	46c4      	mov	ip, r8
   124b2:	4659      	mov	r1, fp
   124b4:	fbe0 c107 	umlal	ip, r1, r0, r7
   124b8:	2300      	movs	r3, #0
   124ba:	4660      	mov	r0, ip
   124bc:	f7ed fe20 	bl	100 <__aeabi_uldivmod>
   124c0:	9001      	str	r0, [sp, #4]
   124c2:	68a8      	ldr	r0, [r5, #8]
   124c4:	4a0e      	ldr	r2, [pc, #56]	; (12500 <pm_policy_next_state+0x90>)
   124c6:	46c4      	mov	ip, r8
   124c8:	4659      	mov	r1, fp
   124ca:	fbe0 c107 	umlal	ip, r1, r0, r7
   124ce:	2300      	movs	r3, #0
   124d0:	4660      	mov	r0, ip
   124d2:	f7ed fe15 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   124d6:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
   124da:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
   124dc:	d001      	beq.n	124e2 <pm_policy_next_state+0x72>
   124de:	4582      	cmp	sl, r0
   124e0:	d905      	bls.n	124ee <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
   124e2:	1c73      	adds	r3, r6, #1
   124e4:	d0de      	beq.n	124a4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
   124e6:	9b01      	ldr	r3, [sp, #4]
   124e8:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
   124ea:	42b0      	cmp	r0, r6
   124ec:	d9da      	bls.n	124a4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
   124ee:	3c01      	subs	r4, #1
   124f0:	b2a4      	uxth	r4, r4
   124f2:	3d0c      	subs	r5, #12
   124f4:	e7d4      	b.n	124a0 <pm_policy_next_state+0x30>
   124f6:	bf00      	nop
   124f8:	20000618 	.word	0x20000618
   124fc:	000f423f 	.word	0x000f423f
   12500:	000f4240 	.word	0x000f4240

00012504 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
   12504:	b908      	cbnz	r0, 1250a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
   12506:	4b02      	ldr	r3, [pc, #8]	; (12510 <pm_state_cpu_get_all+0xc>)
   12508:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
   1250a:	2000      	movs	r0, #0
   1250c:	4770      	bx	lr
   1250e:	bf00      	nop
   12510:	000217cc 	.word	0x000217cc

00012514 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12514:	4904      	ldr	r1, [pc, #16]	; (12528 <sub_bytes+0x14>)
   12516:	1e43      	subs	r3, r0, #1
   12518:	300f      	adds	r0, #15
   1251a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1251e:	5c8a      	ldrb	r2, [r1, r2]
   12520:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12522:	4283      	cmp	r3, r0
   12524:	d1f9      	bne.n	1251a <sub_bytes+0x6>
	}
}
   12526:	4770      	bx	lr
   12528:	00022091 	.word	0x00022091

0001252c <tc_aes128_set_encrypt_key>:
{
   1252c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   1252e:	4e26      	ldr	r6, [pc, #152]	; (125c8 <tc_aes128_set_encrypt_key+0x9c>)
{
   12530:	4607      	mov	r7, r0
   12532:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12534:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12536:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12538:	ad01      	add	r5, sp, #4
   1253a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1253c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1253e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12540:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12544:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12548:	4638      	mov	r0, r7
   1254a:	2f00      	cmp	r7, #0
   1254c:	d038      	beq.n	125c0 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   1254e:	2c00      	cmp	r4, #0
   12550:	d038      	beq.n	125c4 <tc_aes128_set_encrypt_key+0x98>
   12552:	1f38      	subs	r0, r7, #4
   12554:	4621      	mov	r1, r4
   12556:	4602      	mov	r2, r0
   12558:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1255a:	784b      	ldrb	r3, [r1, #1]
   1255c:	780d      	ldrb	r5, [r1, #0]
   1255e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12560:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12564:	78cd      	ldrb	r5, [r1, #3]
   12566:	432b      	orrs	r3, r5
   12568:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   1256a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1256c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12570:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12572:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12576:	d1f0      	bne.n	1255a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12578:	4c14      	ldr	r4, [pc, #80]	; (125cc <tc_aes128_set_encrypt_key+0xa0>)
   1257a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   1257c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   1257e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12580:	d116      	bne.n	125b0 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12582:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12586:	5ca5      	ldrb	r5, [r4, r2]
   12588:	0e1a      	lsrs	r2, r3, #24
   1258a:	5ca2      	ldrb	r2, [r4, r2]
   1258c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12590:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12594:	b2db      	uxtb	r3, r3
   12596:	5d65      	ldrb	r5, [r4, r5]
   12598:	5ce3      	ldrb	r3, [r4, r3]
   1259a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   1259e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   125a2:	f021 0303 	bic.w	r3, r1, #3
   125a6:	3330      	adds	r3, #48	; 0x30
   125a8:	446b      	add	r3, sp
   125aa:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   125ae:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   125b0:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   125b4:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   125b6:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   125b8:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   125ba:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   125bc:	d1de      	bne.n	1257c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   125be:	2001      	movs	r0, #1
}
   125c0:	b00d      	add	sp, #52	; 0x34
   125c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   125c4:	4620      	mov	r0, r4
   125c6:	e7fb      	b.n	125c0 <tc_aes128_set_encrypt_key+0x94>
   125c8:	00021720 	.word	0x00021720
   125cc:	00022091 	.word	0x00022091

000125d0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   125d0:	4901      	ldr	r1, [pc, #4]	; (125d8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   125d2:	2210      	movs	r2, #16
	str	r2, [r1]
   125d4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   125d6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   125d8:	e000ed10 	.word	0xe000ed10

000125dc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   125dc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   125de:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   125e0:	f380 8811 	msr	BASEPRI, r0
	isb
   125e4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
   125e8:	f3bf 8f4f 	dsb	sy
   125ec:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   125ee:	b662      	cpsie	i
	isb
   125f0:	f3bf 8f6f 	isb	sy

	bx	lr
   125f4:	4770      	bx	lr
   125f6:	bf00      	nop

000125f8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   125f8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   125fa:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   125fc:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
   12600:	f3bf 8f4f 	dsb	sy
   12604:	bf20      	wfe

	msr	BASEPRI, r0
   12606:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   1260a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   1260c:	4770      	bx	lr
   1260e:	bf00      	nop

00012610 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12610:	b570      	push	{r4, r5, r6, lr}
   12612:	4606      	mov	r6, r0
   12614:	b086      	sub	sp, #24

	if (esf != NULL) {
   12616:	460d      	mov	r5, r1
   12618:	2900      	cmp	r1, #0
   1261a:	d038      	beq.n	1268e <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   1261c:	688b      	ldr	r3, [r1, #8]
   1261e:	9305      	str	r3, [sp, #20]
   12620:	684b      	ldr	r3, [r1, #4]
   12622:	9304      	str	r3, [sp, #16]
   12624:	680b      	ldr	r3, [r1, #0]
   12626:	9303      	str	r3, [sp, #12]
   12628:	2400      	movs	r4, #0
   1262a:	4b1c      	ldr	r3, [pc, #112]	; (1269c <z_arm_fatal_error+0x8c>)
   1262c:	491c      	ldr	r1, [pc, #112]	; (126a0 <z_arm_fatal_error+0x90>)
   1262e:	9302      	str	r3, [sp, #8]
   12630:	2201      	movs	r2, #1
   12632:	4623      	mov	r3, r4
   12634:	4620      	mov	r0, r4
   12636:	e9cd 4400 	strd	r4, r4, [sp]
   1263a:	f00c f82c 	bl	1e696 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   1263e:	696b      	ldr	r3, [r5, #20]
   12640:	9305      	str	r3, [sp, #20]
   12642:	692b      	ldr	r3, [r5, #16]
   12644:	9304      	str	r3, [sp, #16]
   12646:	68eb      	ldr	r3, [r5, #12]
   12648:	9303      	str	r3, [sp, #12]
   1264a:	4b16      	ldr	r3, [pc, #88]	; (126a4 <z_arm_fatal_error+0x94>)
   1264c:	4914      	ldr	r1, [pc, #80]	; (126a0 <z_arm_fatal_error+0x90>)
   1264e:	9400      	str	r4, [sp, #0]
   12650:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12654:	2201      	movs	r2, #1
   12656:	4623      	mov	r3, r4
   12658:	4620      	mov	r0, r4
   1265a:	f00c f81c 	bl	1e696 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   1265e:	69eb      	ldr	r3, [r5, #28]
   12660:	9303      	str	r3, [sp, #12]
   12662:	4b11      	ldr	r3, [pc, #68]	; (126a8 <z_arm_fatal_error+0x98>)
   12664:	490e      	ldr	r1, [pc, #56]	; (126a0 <z_arm_fatal_error+0x90>)
   12666:	9400      	str	r4, [sp, #0]
   12668:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1266c:	2201      	movs	r2, #1
   1266e:	4623      	mov	r3, r4
   12670:	4620      	mov	r0, r4
   12672:	f00c f810 	bl	1e696 <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12676:	69ab      	ldr	r3, [r5, #24]
   12678:	9303      	str	r3, [sp, #12]
   1267a:	4b0c      	ldr	r3, [pc, #48]	; (126ac <z_arm_fatal_error+0x9c>)
   1267c:	4908      	ldr	r1, [pc, #32]	; (126a0 <z_arm_fatal_error+0x90>)
   1267e:	9400      	str	r4, [sp, #0]
   12680:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12684:	2201      	movs	r2, #1
   12686:	4623      	mov	r3, r4
   12688:	4620      	mov	r0, r4
   1268a:	f00c f804 	bl	1e696 <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1268e:	4629      	mov	r1, r5
   12690:	4630      	mov	r0, r6
}
   12692:	b006      	add	sp, #24
   12694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   12698:	f009 bb46 	b.w	1bd28 <z_fatal_error>
   1269c:	00022191 	.word	0x00022191
   126a0:	000216d4 	.word	0x000216d4
   126a4:	000221c0 	.word	0x000221c0
   126a8:	000221ef 	.word	0x000221ef
   126ac:	000221fe 	.word	0x000221fe

000126b0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   126b0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   126b2:	2800      	cmp	r0, #0
   126b4:	db07      	blt.n	126c6 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126b6:	4a04      	ldr	r2, [pc, #16]	; (126c8 <arch_irq_enable+0x18>)
   126b8:	0941      	lsrs	r1, r0, #5
   126ba:	2301      	movs	r3, #1
   126bc:	f000 001f 	and.w	r0, r0, #31
   126c0:	4083      	lsls	r3, r0
   126c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
   126c6:	4770      	bx	lr
   126c8:	e000e100 	.word	0xe000e100

000126cc <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   126cc:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   126ce:	2800      	cmp	r0, #0
   126d0:	db0c      	blt.n	126ec <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   126d2:	0943      	lsrs	r3, r0, #5
   126d4:	4906      	ldr	r1, [pc, #24]	; (126f0 <arch_irq_disable+0x24>)
   126d6:	f000 001f 	and.w	r0, r0, #31
   126da:	3320      	adds	r3, #32
   126dc:	2201      	movs	r2, #1
   126de:	4082      	lsls	r2, r0
   126e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   126e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   126e8:	f3bf 8f6f 	isb	sy
}
   126ec:	4770      	bx	lr
   126ee:	bf00      	nop
   126f0:	e000e100 	.word	0xe000e100

000126f4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   126f4:	4b05      	ldr	r3, [pc, #20]	; (1270c <arch_irq_is_enabled+0x18>)
   126f6:	0942      	lsrs	r2, r0, #5
   126f8:	f000 001f 	and.w	r0, r0, #31
   126fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12700:	2301      	movs	r3, #1
   12702:	fa03 f000 	lsl.w	r0, r3, r0
}
   12706:	4010      	ands	r0, r2
   12708:	4770      	bx	lr
   1270a:	bf00      	nop
   1270c:	e000e100 	.word	0xe000e100

00012710 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12710:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   12712:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
   12714:	bf54      	ite	pl
   12716:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   12718:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1271a:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1271c:	bfac      	ite	ge
   1271e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12722:	4a07      	ldrlt	r2, [pc, #28]	; (12740 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12724:	ea4f 1341 	mov.w	r3, r1, lsl #5
   12728:	bfac      	ite	ge
   1272a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1272e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12732:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12734:	bfb4      	ite	lt
   12736:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12738:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
   1273c:	4770      	bx	lr
   1273e:	bf00      	nop
   12740:	e000ed14 	.word	0xe000ed14

00012744 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12744:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12746:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12748:	4b04      	ldr	r3, [pc, #16]	; (1275c <_arch_isr_direct_pm+0x18>)
   1274a:	699a      	ldr	r2, [r3, #24]
   1274c:	b11a      	cbz	r2, 12756 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   1274e:	2200      	movs	r2, #0
   12750:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
   12752:	f00e f93d 	bl	209d0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12756:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12758:	bd08      	pop	{r3, pc}
   1275a:	bf00      	nop
   1275c:	20002908 	.word	0x20002908

00012760 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12760:	bf30      	wfi
    b z_SysNmiOnReset
   12762:	f7ff bffd 	b.w	12760 <z_SysNmiOnReset>
   12766:	bf00      	nop

00012768 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12768:	4a0b      	ldr	r2, [pc, #44]	; (12798 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
   1276a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1276c:	4b0b      	ldr	r3, [pc, #44]	; (1279c <z_arm_prep_c+0x34>)
   1276e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12772:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12774:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12778:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1277c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12780:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12788:	f009 fb6e 	bl	1be68 <z_bss_zero>
	z_data_copy();
   1278c:	f00a fbc4 	bl	1cf18 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12790:	f000 fb96 	bl	12ec0 <z_arm_interrupt_init>
	z_cstart();
   12794:	f009 fbac 	bl	1bef0 <z_cstart>
   12798:	00000000 	.word	0x00000000
   1279c:	e000ed00 	.word	0xe000ed00

000127a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   127a0:	4a09      	ldr	r2, [pc, #36]	; (127c8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   127a2:	490a      	ldr	r1, [pc, #40]	; (127cc <arch_swap+0x2c>)
	_current->arch.basepri = key;
   127a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   127a6:	6809      	ldr	r1, [r1, #0]
   127a8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   127aa:	4909      	ldr	r1, [pc, #36]	; (127d0 <arch_swap+0x30>)
	_current->arch.basepri = key;
   127ac:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   127ae:	684b      	ldr	r3, [r1, #4]
   127b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   127b4:	604b      	str	r3, [r1, #4]
   127b6:	2300      	movs	r3, #0
   127b8:	f383 8811 	msr	BASEPRI, r3
   127bc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   127c0:	6893      	ldr	r3, [r2, #8]
}
   127c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   127c4:	4770      	bx	lr
   127c6:	bf00      	nop
   127c8:	20002908 	.word	0x20002908
   127cc:	00021c74 	.word	0x00021c74
   127d0:	e000ed00 	.word	0xe000ed00

000127d4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   127d4:	4912      	ldr	r1, [pc, #72]	; (12820 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   127d6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   127d8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   127dc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   127de:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   127e2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   127e6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   127e8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   127ec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   127f0:	4f0c      	ldr	r7, [pc, #48]	; (12824 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   127f2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   127f6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
   127f8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   127fa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   127fc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   127fe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12800:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12802:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12806:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12808:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   1280a:	f000 fbf5 	bl	12ff8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   1280e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12812:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12816:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   1281a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   1281e:	4770      	bx	lr
    ldr r1, =_kernel
   12820:	20002908 	.word	0x20002908
    ldr v4, =_SCS_ICSR
   12824:	e000ed04 	.word	0xe000ed04

00012828 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   12828:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   1282c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   1282e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12832:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12836:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12838:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   1283c:	2902      	cmp	r1, #2
    beq _oops
   1283e:	d0ff      	beq.n	12840 <_oops>

00012840 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12840:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
   12842:	f00b ff38 	bl	1e6b6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
   12846:	bd01      	pop	{r0, pc}

00012848 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12848:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   1284c:	9b00      	ldr	r3, [sp, #0]
   1284e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12852:	490a      	ldr	r1, [pc, #40]	; (1287c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12854:	9b01      	ldr	r3, [sp, #4]
   12856:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1285a:	9b02      	ldr	r3, [sp, #8]
   1285c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12860:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12868:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   1286c:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12870:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12872:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12874:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12876:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12878:	4770      	bx	lr
   1287a:	bf00      	nop
   1287c:	0001daff 	.word	0x0001daff

00012880 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12880:	4a09      	ldr	r2, [pc, #36]	; (128a8 <z_check_thread_stack_fail+0x28>)
{
   12882:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12884:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12886:	b170      	cbz	r0, 128a6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12888:	f113 0f16 	cmn.w	r3, #22
   1288c:	6e80      	ldr	r0, [r0, #104]	; 0x68
   1288e:	d005      	beq.n	1289c <z_check_thread_stack_fail+0x1c>
   12890:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
   12894:	429a      	cmp	r2, r3
   12896:	d805      	bhi.n	128a4 <z_check_thread_stack_fail+0x24>
   12898:	4283      	cmp	r3, r0
   1289a:	d203      	bcs.n	128a4 <z_check_thread_stack_fail+0x24>
		return 0;
   1289c:	4281      	cmp	r1, r0
   1289e:	bf28      	it	cs
   128a0:	2000      	movcs	r0, #0
   128a2:	4770      	bx	lr
   128a4:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
   128a6:	4770      	bx	lr
   128a8:	20002908 	.word	0x20002908

000128ac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   128ac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   128ae:	4b09      	ldr	r3, [pc, #36]	; (128d4 <arch_switch_to_main_thread+0x28>)
   128b0:	6098      	str	r0, [r3, #8]
{
   128b2:	460d      	mov	r5, r1
   128b4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   128b6:	f000 fb9f 	bl	12ff8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   128ba:	4620      	mov	r0, r4
   128bc:	f385 8809 	msr	PSP, r5
   128c0:	2100      	movs	r1, #0
   128c2:	b663      	cpsie	if
   128c4:	f381 8811 	msr	BASEPRI, r1
   128c8:	f3bf 8f6f 	isb	sy
   128cc:	2200      	movs	r2, #0
   128ce:	2300      	movs	r3, #0
   128d0:	f00b f915 	bl	1dafe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   128d4:	20002908 	.word	0x20002908

000128d8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   128d8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   128da:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   128dc:	4a0b      	ldr	r2, [pc, #44]	; (1290c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   128de:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
   128e0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   128e2:	bf1e      	ittt	ne
	movne	r1, #0
   128e4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   128e6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
   128e8:	f00e f872 	blne	209d0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   128ec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   128ee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   128f2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   128f6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   128fa:	4905      	ldr	r1, [pc, #20]	; (12910 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   128fc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   128fe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12900:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12902:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12906:	4903      	ldr	r1, [pc, #12]	; (12914 <_isr_wrapper+0x3c>)
	bx r1
   12908:	4708      	bx	r1
   1290a:	0000      	.short	0x0000
	ldr r2, =_kernel
   1290c:	20002908 	.word	0x20002908
	ldr r1, =_sw_isr_table
   12910:	0002141c 	.word	0x0002141c
	ldr r1, =z_arm_int_exit
   12914:	00012919 	.word	0x00012919

00012918 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   12918:	4b04      	ldr	r3, [pc, #16]	; (1292c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   1291a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   1291c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
   1291e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   12920:	d003      	beq.n	1292a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   12922:	4903      	ldr	r1, [pc, #12]	; (12930 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   12924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   12928:	600a      	str	r2, [r1, #0]

0001292a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   1292a:	4770      	bx	lr
	ldr r3, =_kernel
   1292c:	20002908 	.word	0x20002908
	ldr r1, =_SCS_ICSR
   12930:	e000ed04 	.word	0xe000ed04

00012934 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12934:	b5f0      	push	{r4, r5, r6, r7, lr}
   12936:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
   12938:	2400      	movs	r4, #0
   1293a:	4b3b      	ldr	r3, [pc, #236]	; (12a28 <bus_fault.constprop.0+0xf4>)
   1293c:	9302      	str	r3, [sp, #8]
   1293e:	e9cd 4400 	strd	r4, r4, [sp]
   12942:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   12944:	4607      	mov	r7, r0
   12946:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   12948:	2201      	movs	r2, #1
   1294a:	4938      	ldr	r1, [pc, #224]	; (12a2c <bus_fault.constprop.0+0xf8>)
   1294c:	4620      	mov	r0, r4
   1294e:	f00b fec1 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   12952:	4b37      	ldr	r3, [pc, #220]	; (12a30 <bus_fault.constprop.0+0xfc>)
   12954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12956:	04db      	lsls	r3, r3, #19
   12958:	d509      	bpl.n	1296e <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
   1295a:	4b36      	ldr	r3, [pc, #216]	; (12a34 <bus_fault.constprop.0+0x100>)
   1295c:	4933      	ldr	r1, [pc, #204]	; (12a2c <bus_fault.constprop.0+0xf8>)
   1295e:	9400      	str	r4, [sp, #0]
   12960:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12964:	2201      	movs	r2, #1
   12966:	4623      	mov	r3, r4
   12968:	4620      	mov	r0, r4
   1296a:	f00b feb3 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   1296e:	4b30      	ldr	r3, [pc, #192]	; (12a30 <bus_fault.constprop.0+0xfc>)
   12970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12972:	051d      	lsls	r5, r3, #20
   12974:	d509      	bpl.n	1298a <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
   12976:	4b30      	ldr	r3, [pc, #192]	; (12a38 <bus_fault.constprop.0+0x104>)
   12978:	9302      	str	r3, [sp, #8]
   1297a:	2300      	movs	r3, #0
   1297c:	e9cd 3300 	strd	r3, r3, [sp]
   12980:	492a      	ldr	r1, [pc, #168]	; (12a2c <bus_fault.constprop.0+0xf8>)
   12982:	2201      	movs	r2, #1
   12984:	4618      	mov	r0, r3
   12986:	f00b fea5 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   1298a:	4d29      	ldr	r5, [pc, #164]	; (12a30 <bus_fault.constprop.0+0xfc>)
   1298c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1298e:	059c      	lsls	r4, r3, #22
   12990:	d51e      	bpl.n	129d0 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
   12992:	2400      	movs	r4, #0
   12994:	4b29      	ldr	r3, [pc, #164]	; (12a3c <bus_fault.constprop.0+0x108>)
   12996:	9302      	str	r3, [sp, #8]
   12998:	2201      	movs	r2, #1
   1299a:	4623      	mov	r3, r4
   1299c:	4620      	mov	r0, r4
   1299e:	e9cd 4400 	strd	r4, r4, [sp]
   129a2:	4922      	ldr	r1, [pc, #136]	; (12a2c <bus_fault.constprop.0+0xf8>)
   129a4:	f00b fe96 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
   129a8:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   129aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   129ac:	0410      	lsls	r0, r2, #16
   129ae:	d50f      	bpl.n	129d0 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   129b0:	9303      	str	r3, [sp, #12]
   129b2:	4b23      	ldr	r3, [pc, #140]	; (12a40 <bus_fault.constprop.0+0x10c>)
   129b4:	491d      	ldr	r1, [pc, #116]	; (12a2c <bus_fault.constprop.0+0xf8>)
   129b6:	9400      	str	r4, [sp, #0]
   129b8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   129bc:	2201      	movs	r2, #1
   129be:	4623      	mov	r3, r4
   129c0:	4620      	mov	r0, r4
   129c2:	f00b fe87 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   129c6:	b11f      	cbz	r7, 129d0 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   129c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   129ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   129ce:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   129d0:	4b17      	ldr	r3, [pc, #92]	; (12a30 <bus_fault.constprop.0+0xfc>)
   129d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   129d4:	0559      	lsls	r1, r3, #21
   129d6:	d509      	bpl.n	129ec <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
   129d8:	4b1a      	ldr	r3, [pc, #104]	; (12a44 <bus_fault.constprop.0+0x110>)
   129da:	9302      	str	r3, [sp, #8]
   129dc:	2300      	movs	r3, #0
   129de:	e9cd 3300 	strd	r3, r3, [sp]
   129e2:	4912      	ldr	r1, [pc, #72]	; (12a2c <bus_fault.constprop.0+0xf8>)
   129e4:	2201      	movs	r2, #1
   129e6:	4618      	mov	r0, r3
   129e8:	f00b fe74 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   129ec:	4a10      	ldr	r2, [pc, #64]	; (12a30 <bus_fault.constprop.0+0xfc>)
   129ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
   129f0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
   129f4:	d012      	beq.n	12a1c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
   129f6:	4b14      	ldr	r3, [pc, #80]	; (12a48 <bus_fault.constprop.0+0x114>)
   129f8:	9302      	str	r3, [sp, #8]
   129fa:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   129fc:	e9cd 3300 	strd	r3, r3, [sp]
   12a00:	490a      	ldr	r1, [pc, #40]	; (12a2c <bus_fault.constprop.0+0xf8>)
   12a02:	2201      	movs	r2, #1
   12a04:	4618      	mov	r0, r3
   12a06:	f00b fe65 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12a0a:	4a09      	ldr	r2, [pc, #36]	; (12a30 <bus_fault.constprop.0+0xfc>)
   12a0c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
   12a0e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   12a10:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   12a14:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12a16:	7030      	strb	r0, [r6, #0]

	return reason;
}
   12a18:	b005      	add	sp, #20
   12a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   12a1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12a1e:	0492      	lsls	r2, r2, #18
   12a20:	d5f3      	bpl.n	12a0a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   12a22:	4a0a      	ldr	r2, [pc, #40]	; (12a4c <bus_fault.constprop.0+0x118>)
   12a24:	9202      	str	r2, [sp, #8]
   12a26:	e7e9      	b.n	129fc <bus_fault.constprop.0+0xc8>
   12a28:	0002222c 	.word	0x0002222c
   12a2c:	000216d4 	.word	0x000216d4
   12a30:	e000ed00 	.word	0xe000ed00
   12a34:	00022242 	.word	0x00022242
   12a38:	00022253 	.word	0x00022253
   12a3c:	00022266 	.word	0x00022266
   12a40:	0002227f 	.word	0x0002227f
   12a44:	00022294 	.word	0x00022294
   12a48:	000222af 	.word	0x000222af
   12a4c:	000222c7 	.word	0x000222c7

00012a50 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   12a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   12a52:	2400      	movs	r4, #0
   12a54:	4b33      	ldr	r3, [pc, #204]	; (12b24 <usage_fault.constprop.0+0xd4>)
   12a56:	9302      	str	r3, [sp, #8]
   12a58:	e9cd 4400 	strd	r4, r4, [sp]
   12a5c:	4623      	mov	r3, r4
   12a5e:	4932      	ldr	r1, [pc, #200]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12a60:	2201      	movs	r2, #1
   12a62:	4620      	mov	r0, r4
   12a64:	f00b fe36 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   12a68:	4b30      	ldr	r3, [pc, #192]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a6c:	019b      	lsls	r3, r3, #6
   12a6e:	d509      	bpl.n	12a84 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
   12a70:	4b2f      	ldr	r3, [pc, #188]	; (12b30 <usage_fault.constprop.0+0xe0>)
   12a72:	492d      	ldr	r1, [pc, #180]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12a74:	9400      	str	r4, [sp, #0]
   12a76:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12a7a:	2201      	movs	r2, #1
   12a7c:	4623      	mov	r3, r4
   12a7e:	4620      	mov	r0, r4
   12a80:	f00b fe28 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   12a84:	4b29      	ldr	r3, [pc, #164]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12a88:	01dc      	lsls	r4, r3, #7
   12a8a:	d509      	bpl.n	12aa0 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
   12a8c:	4b29      	ldr	r3, [pc, #164]	; (12b34 <usage_fault.constprop.0+0xe4>)
   12a8e:	9302      	str	r3, [sp, #8]
   12a90:	2300      	movs	r3, #0
   12a92:	e9cd 3300 	strd	r3, r3, [sp]
   12a96:	4924      	ldr	r1, [pc, #144]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12a98:	2201      	movs	r2, #1
   12a9a:	4618      	mov	r0, r3
   12a9c:	f00b fe1a 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   12aa0:	4b22      	ldr	r3, [pc, #136]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12aa4:	0318      	lsls	r0, r3, #12
   12aa6:	d509      	bpl.n	12abc <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
   12aa8:	4b23      	ldr	r3, [pc, #140]	; (12b38 <usage_fault.constprop.0+0xe8>)
   12aaa:	9302      	str	r3, [sp, #8]
   12aac:	2300      	movs	r3, #0
   12aae:	e9cd 3300 	strd	r3, r3, [sp]
   12ab2:	491d      	ldr	r1, [pc, #116]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12ab4:	2201      	movs	r2, #1
   12ab6:	4618      	mov	r0, r3
   12ab8:	f00b fe0c 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   12abc:	4b1b      	ldr	r3, [pc, #108]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12ac0:	0359      	lsls	r1, r3, #13
   12ac2:	d509      	bpl.n	12ad8 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   12ac4:	4b1d      	ldr	r3, [pc, #116]	; (12b3c <usage_fault.constprop.0+0xec>)
   12ac6:	9302      	str	r3, [sp, #8]
   12ac8:	2300      	movs	r3, #0
   12aca:	e9cd 3300 	strd	r3, r3, [sp]
   12ace:	4916      	ldr	r1, [pc, #88]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12ad0:	2201      	movs	r2, #1
   12ad2:	4618      	mov	r0, r3
   12ad4:	f00b fdfe 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   12ad8:	4b14      	ldr	r3, [pc, #80]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12adc:	039a      	lsls	r2, r3, #14
   12ade:	d509      	bpl.n	12af4 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   12ae0:	4b17      	ldr	r3, [pc, #92]	; (12b40 <usage_fault.constprop.0+0xf0>)
   12ae2:	9302      	str	r3, [sp, #8]
   12ae4:	2300      	movs	r3, #0
   12ae6:	e9cd 3300 	strd	r3, r3, [sp]
   12aea:	490f      	ldr	r1, [pc, #60]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12aec:	2201      	movs	r2, #1
   12aee:	4618      	mov	r0, r3
   12af0:	f00b fdf0 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   12af4:	4b0d      	ldr	r3, [pc, #52]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12af8:	03db      	lsls	r3, r3, #15
   12afa:	d509      	bpl.n	12b10 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   12afc:	4b11      	ldr	r3, [pc, #68]	; (12b44 <usage_fault.constprop.0+0xf4>)
   12afe:	9302      	str	r3, [sp, #8]
   12b00:	2300      	movs	r3, #0
   12b02:	e9cd 3300 	strd	r3, r3, [sp]
   12b06:	4908      	ldr	r1, [pc, #32]	; (12b28 <usage_fault.constprop.0+0xd8>)
   12b08:	2201      	movs	r2, #1
   12b0a:	4618      	mov	r0, r3
   12b0c:	f00b fde2 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12b10:	4a06      	ldr	r2, [pc, #24]	; (12b2c <usage_fault.constprop.0+0xdc>)
   12b12:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12b14:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   12b18:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
   12b1c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   12b1e:	6293      	str	r3, [r2, #40]	; 0x28
}
   12b20:	b004      	add	sp, #16
   12b22:	bd10      	pop	{r4, pc}
   12b24:	000222f6 	.word	0x000222f6
   12b28:	000216d4 	.word	0x000216d4
   12b2c:	e000ed00 	.word	0xe000ed00
   12b30:	0002230e 	.word	0x0002230e
   12b34:	00022321 	.word	0x00022321
   12b38:	0002233b 	.word	0x0002233b
   12b3c:	00022359 	.word	0x00022359
   12b40:	0002237e 	.word	0x0002237e
   12b44:	00022398 	.word	0x00022398

00012b48 <mem_manage_fault>:
{
   12b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b4c:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
   12b4e:	2400      	movs	r4, #0
   12b50:	4b49      	ldr	r3, [pc, #292]	; (12c78 <mem_manage_fault+0x130>)
   12b52:	9302      	str	r3, [sp, #8]
   12b54:	e9cd 4400 	strd	r4, r4, [sp]
   12b58:	4623      	mov	r3, r4
{
   12b5a:	4680      	mov	r8, r0
   12b5c:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   12b5e:	4620      	mov	r0, r4
   12b60:	4946      	ldr	r1, [pc, #280]	; (12c7c <mem_manage_fault+0x134>)
{
   12b62:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   12b64:	2201      	movs	r2, #1
   12b66:	f00b fdb5 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12b6a:	4b45      	ldr	r3, [pc, #276]	; (12c80 <mem_manage_fault+0x138>)
   12b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b6e:	06d8      	lsls	r0, r3, #27
   12b70:	d509      	bpl.n	12b86 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
   12b72:	4b44      	ldr	r3, [pc, #272]	; (12c84 <mem_manage_fault+0x13c>)
   12b74:	4941      	ldr	r1, [pc, #260]	; (12c7c <mem_manage_fault+0x134>)
   12b76:	9400      	str	r4, [sp, #0]
   12b78:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12b7c:	2201      	movs	r2, #1
   12b7e:	4623      	mov	r3, r4
   12b80:	4620      	mov	r0, r4
   12b82:	f00b fda7 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12b86:	4b3e      	ldr	r3, [pc, #248]	; (12c80 <mem_manage_fault+0x138>)
   12b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12b8a:	0719      	lsls	r1, r3, #28
   12b8c:	d509      	bpl.n	12ba2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
   12b8e:	4b3e      	ldr	r3, [pc, #248]	; (12c88 <mem_manage_fault+0x140>)
   12b90:	9302      	str	r3, [sp, #8]
   12b92:	2300      	movs	r3, #0
   12b94:	e9cd 3300 	strd	r3, r3, [sp]
   12b98:	4938      	ldr	r1, [pc, #224]	; (12c7c <mem_manage_fault+0x134>)
   12b9a:	2201      	movs	r2, #1
   12b9c:	4618      	mov	r0, r3
   12b9e:	f00b fd99 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12ba2:	4d37      	ldr	r5, [pc, #220]	; (12c80 <mem_manage_fault+0x138>)
   12ba4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ba6:	079a      	lsls	r2, r3, #30
   12ba8:	d436      	bmi.n	12c18 <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
   12baa:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12bae:	4b34      	ldr	r3, [pc, #208]	; (12c80 <mem_manage_fault+0x138>)
   12bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bb2:	07dd      	lsls	r5, r3, #31
   12bb4:	d509      	bpl.n	12bca <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
   12bb6:	4b35      	ldr	r3, [pc, #212]	; (12c8c <mem_manage_fault+0x144>)
   12bb8:	9302      	str	r3, [sp, #8]
   12bba:	2300      	movs	r3, #0
   12bbc:	e9cd 3300 	strd	r3, r3, [sp]
   12bc0:	492e      	ldr	r1, [pc, #184]	; (12c7c <mem_manage_fault+0x134>)
   12bc2:	2201      	movs	r2, #1
   12bc4:	4618      	mov	r0, r3
   12bc6:	f00b fd85 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12bca:	4b2d      	ldr	r3, [pc, #180]	; (12c80 <mem_manage_fault+0x138>)
   12bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   12bce:	069c      	lsls	r4, r3, #26
   12bd0:	d509      	bpl.n	12be6 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
   12bd2:	4b2f      	ldr	r3, [pc, #188]	; (12c90 <mem_manage_fault+0x148>)
   12bd4:	9302      	str	r3, [sp, #8]
   12bd6:	2300      	movs	r3, #0
   12bd8:	e9cd 3300 	strd	r3, r3, [sp]
   12bdc:	4927      	ldr	r1, [pc, #156]	; (12c7c <mem_manage_fault+0x134>)
   12bde:	2201      	movs	r2, #1
   12be0:	4618      	mov	r0, r3
   12be2:	f00b fd77 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12be6:	4c26      	ldr	r4, [pc, #152]	; (12c80 <mem_manage_fault+0x138>)
   12be8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12bea:	06d8      	lsls	r0, r3, #27
   12bec:	d436      	bmi.n	12c5c <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   12bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   12bf0:	0799      	lsls	r1, r3, #30
   12bf2:	d433      	bmi.n	12c5c <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12bf4:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12bf8:	4a21      	ldr	r2, [pc, #132]	; (12c80 <mem_manage_fault+0x138>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   12bfa:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
   12bfc:	bf42      	ittt	mi
   12bfe:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
   12c00:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
   12c04:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   12c06:	6a93      	ldr	r3, [r2, #40]	; 0x28
   12c08:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   12c0c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   12c0e:	2300      	movs	r3, #0
   12c10:	7033      	strb	r3, [r6, #0]
}
   12c12:	b005      	add	sp, #20
   12c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
   12c18:	2400      	movs	r4, #0
   12c1a:	4b1e      	ldr	r3, [pc, #120]	; (12c94 <mem_manage_fault+0x14c>)
   12c1c:	9302      	str	r3, [sp, #8]
   12c1e:	e9cd 4400 	strd	r4, r4, [sp]
   12c22:	4623      	mov	r3, r4
   12c24:	4915      	ldr	r1, [pc, #84]	; (12c7c <mem_manage_fault+0x134>)
   12c26:	2201      	movs	r2, #1
   12c28:	4620      	mov	r0, r4
   12c2a:	f00b fd53 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
   12c2e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   12c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12c32:	061b      	lsls	r3, r3, #24
   12c34:	d5b9      	bpl.n	12baa <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   12c36:	4b18      	ldr	r3, [pc, #96]	; (12c98 <mem_manage_fault+0x150>)
   12c38:	4910      	ldr	r1, [pc, #64]	; (12c7c <mem_manage_fault+0x134>)
   12c3a:	9703      	str	r7, [sp, #12]
   12c3c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12c40:	9400      	str	r4, [sp, #0]
   12c42:	4623      	mov	r3, r4
   12c44:	2201      	movs	r2, #1
   12c46:	4620      	mov	r0, r4
   12c48:	f00b fd44 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
   12c4c:	f1b9 0f00 	cmp.w	r9, #0
   12c50:	d0ad      	beq.n	12bae <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   12c52:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12c58:	62ab      	str	r3, [r5, #40]	; 0x28
   12c5a:	e7a8      	b.n	12bae <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   12c5c:	6863      	ldr	r3, [r4, #4]
   12c5e:	051a      	lsls	r2, r3, #20
   12c60:	d5c8      	bpl.n	12bf4 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   12c62:	4641      	mov	r1, r8
   12c64:	4638      	mov	r0, r7
   12c66:	f7ff fe0b 	bl	12880 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   12c6a:	2800      	cmp	r0, #0
   12c6c:	d0c2      	beq.n	12bf4 <mem_manage_fault+0xac>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   12c6e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   12c72:	2002      	movs	r0, #2
   12c74:	e7bf      	b.n	12bf6 <mem_manage_fault+0xae>
   12c76:	bf00      	nop
   12c78:	000223c3 	.word	0x000223c3
   12c7c:	000216d4 	.word	0x000216d4
   12c80:	e000ed00 	.word	0xe000ed00
   12c84:	000223d9 	.word	0x000223d9
   12c88:	00022253 	.word	0x00022253
   12c8c:	0002243a 	.word	0x0002243a
   12c90:	000222c7 	.word	0x000222c7
   12c94:	0002240c 	.word	0x0002240c
   12c98:	00022424 	.word	0x00022424

00012c9c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   12c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12ca0:	4b72      	ldr	r3, [pc, #456]	; (12e6c <z_arm_fault+0x1d0>)
   12ca2:	685f      	ldr	r7, [r3, #4]
{
   12ca4:	b090      	sub	sp, #64	; 0x40
   12ca6:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   12ca8:	f3c7 0408 	ubfx	r4, r7, #0, #9
   12cac:	2300      	movs	r3, #0
   12cae:	f383 8811 	msr	BASEPRI, r3
   12cb2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   12cb6:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
   12cba:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
   12cbe:	d10c      	bne.n	12cda <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   12cc0:	f002 000c 	and.w	r0, r2, #12
   12cc4:	2808      	cmp	r0, #8
   12cc6:	d119      	bne.n	12cfc <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   12cc8:	4a69      	ldr	r2, [pc, #420]	; (12e70 <z_arm_fault+0x1d4>)
   12cca:	496a      	ldr	r1, [pc, #424]	; (12e74 <z_arm_fault+0x1d8>)
   12ccc:	9300      	str	r3, [sp, #0]
   12cce:	e9cd 3201 	strd	r3, r2, [sp, #4]
   12cd2:	4618      	mov	r0, r3
   12cd4:	2201      	movs	r2, #1
   12cd6:	f00b fcfd 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
   12cda:	2600      	movs	r6, #0
		return NULL;
   12cdc:	4635      	mov	r5, r6
	*recoverable = false;
   12cde:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
   12ce2:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
   12ce4:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
   12ce8:	2b09      	cmp	r3, #9
   12cea:	f200 80a6 	bhi.w	12e3a <z_arm_fault+0x19e>
   12cee:	e8df f003 	tbb	[pc, r3]
   12cf2:	9a0b      	.short	0x9a0b
   12cf4:	a4a4969e 	.word	0xa4a4969e
   12cf8:	a2a4a4a4 	.word	0xa2a4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   12cfc:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
   12cfe:	bf46      	itte	mi
   12d00:	460d      	movmi	r5, r1
	*nested_exc = false;
   12d02:	461e      	movmi	r6, r3
			*nested_exc = true;
   12d04:	2601      	movpl	r6, #1
   12d06:	e7ea      	b.n	12cde <z_arm_fault+0x42>
	PR_FAULT_INFO("***** HARD FAULT *****");
   12d08:	4b5b      	ldr	r3, [pc, #364]	; (12e78 <z_arm_fault+0x1dc>)
   12d0a:	495a      	ldr	r1, [pc, #360]	; (12e74 <z_arm_fault+0x1d8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12d0c:	4f57      	ldr	r7, [pc, #348]	; (12e6c <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
   12d0e:	f8cd 8000 	str.w	r8, [sp]
   12d12:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12d16:	2300      	movs	r3, #0
   12d18:	2201      	movs	r2, #1
   12d1a:	4618      	mov	r0, r3
   12d1c:	f00b fcda 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
   12d20:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   12d24:	6afc      	ldr	r4, [r7, #44]	; 0x2c
   12d26:	f014 0402 	ands.w	r4, r4, #2
   12d2a:	d005      	beq.n	12d38 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
   12d2c:	4b53      	ldr	r3, [pc, #332]	; (12e7c <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
   12d2e:	f8cd 8000 	str.w	r8, [sp]
   12d32:	e9cd 8301 	strd	r8, r3, [sp, #4]
   12d36:	e006      	b.n	12d46 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   12d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d3a:	2b00      	cmp	r3, #0
   12d3c:	da0b      	bge.n	12d56 <z_arm_fault+0xba>
		PR_EXC("  Debug event");
   12d3e:	4b50      	ldr	r3, [pc, #320]	; (12e80 <z_arm_fault+0x1e4>)
   12d40:	9400      	str	r4, [sp, #0]
   12d42:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
   12d46:	2300      	movs	r3, #0
   12d48:	494a      	ldr	r1, [pc, #296]	; (12e74 <z_arm_fault+0x1d8>)
   12d4a:	2201      	movs	r2, #1
   12d4c:	4618      	mov	r0, r3
   12d4e:	f00b fcc1 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12d52:	2400      	movs	r4, #0
   12d54:	e03a      	b.n	12dcc <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   12d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   12d58:	005b      	lsls	r3, r3, #1
   12d5a:	d5fa      	bpl.n	12d52 <z_arm_fault+0xb6>
		PR_EXC("  Fault escalation (see below)");
   12d5c:	4b49      	ldr	r3, [pc, #292]	; (12e84 <z_arm_fault+0x1e8>)
   12d5e:	4945      	ldr	r1, [pc, #276]	; (12e74 <z_arm_fault+0x1d8>)
   12d60:	9400      	str	r4, [sp, #0]
   12d62:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12d66:	2201      	movs	r2, #1
   12d68:	4623      	mov	r3, r4
   12d6a:	4620      	mov	r0, r4
   12d6c:	f00b fcb2 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12d70:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
   12d72:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
   12d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   12d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12d7a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d7e:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12d82:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
   12d84:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
   12d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   12d8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
   12d8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d92:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   12d96:	f64d 7302 	movw	r3, #57090	; 0xdf02
   12d9a:	429a      	cmp	r2, r3
   12d9c:	d009      	beq.n	12db2 <z_arm_fault+0x116>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
   12d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12da0:	b2db      	uxtb	r3, r3
   12da2:	b373      	cbz	r3, 12e02 <z_arm_fault+0x166>
			reason = mem_manage_fault(esf, 1, recoverable);
   12da4:	f10d 021f 	add.w	r2, sp, #31
   12da8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   12daa:	4628      	mov	r0, r5
   12dac:	f7ff fecc 	bl	12b48 <mem_manage_fault>
   12db0:	e037      	b.n	12e22 <z_arm_fault+0x186>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   12db2:	682b      	ldr	r3, [r5, #0]
   12db4:	9303      	str	r3, [sp, #12]
   12db6:	4b34      	ldr	r3, [pc, #208]	; (12e88 <z_arm_fault+0x1ec>)
   12db8:	9400      	str	r4, [sp, #0]
   12dba:	e9cd 4301 	strd	r4, r3, [sp, #4]
   12dbe:	4620      	mov	r0, r4
   12dc0:	4623      	mov	r3, r4
   12dc2:	492c      	ldr	r1, [pc, #176]	; (12e74 <z_arm_fault+0x1d8>)
   12dc4:	2201      	movs	r2, #1
   12dc6:	f00b fc85 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
   12dca:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   12dcc:	f89d 301f 	ldrb.w	r3, [sp, #31]
   12dd0:	b9a3      	cbnz	r3, 12dfc <z_arm_fault+0x160>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   12dd2:	2220      	movs	r2, #32
   12dd4:	4629      	mov	r1, r5
   12dd6:	eb0d 0002 	add.w	r0, sp, r2
   12dda:	f00b fcd1 	bl	1e780 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   12dde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12de0:	2e00      	cmp	r6, #0
   12de2:	d03e      	beq.n	12e62 <z_arm_fault+0x1c6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   12de4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   12de8:	b922      	cbnz	r2, 12df4 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   12dea:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   12dee:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12df2:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
   12df4:	a908      	add	r1, sp, #32
   12df6:	4620      	mov	r0, r4
   12df8:	f7ff fc0a 	bl	12610 <z_arm_fatal_error>
}
   12dfc:	b010      	add	sp, #64	; 0x40
   12dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
   12e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e04:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
   12e08:	d005      	beq.n	12e16 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
   12e0a:	f10d 011f 	add.w	r1, sp, #31
   12e0e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   12e10:	f7ff fd90 	bl	12934 <bus_fault.constprop.0>
   12e14:	e005      	b.n	12e22 <z_arm_fault+0x186>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
   12e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
   12e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   12e1c:	d399      	bcc.n	12d52 <z_arm_fault+0xb6>
			reason = usage_fault(esf);
   12e1e:	f7ff fe17 	bl	12a50 <usage_fault.constprop.0>
   12e22:	4604      	mov	r4, r0
   12e24:	e7d2      	b.n	12dcc <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
   12e26:	f10d 021f 	add.w	r2, sp, #31
   12e2a:	2100      	movs	r1, #0
   12e2c:	e7bd      	b.n	12daa <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
   12e2e:	f10d 011f 	add.w	r1, sp, #31
   12e32:	2000      	movs	r0, #0
   12e34:	e7ec      	b.n	12e10 <z_arm_fault+0x174>
	PR_FAULT_INFO(
   12e36:	4b15      	ldr	r3, [pc, #84]	; (12e8c <z_arm_fault+0x1f0>)
   12e38:	e779      	b.n	12d2e <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
   12e3a:	4a15      	ldr	r2, [pc, #84]	; (12e90 <z_arm_fault+0x1f4>)
   12e3c:	4b15      	ldr	r3, [pc, #84]	; (12e94 <z_arm_fault+0x1f8>)
   12e3e:	490d      	ldr	r1, [pc, #52]	; (12e74 <z_arm_fault+0x1d8>)
   12e40:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
   12e44:	bf18      	it	ne
   12e46:	4613      	movne	r3, r2
   12e48:	3c10      	subs	r4, #16
   12e4a:	e9cd 3403 	strd	r3, r4, [sp, #12]
   12e4e:	4b12      	ldr	r3, [pc, #72]	; (12e98 <z_arm_fault+0x1fc>)
   12e50:	9302      	str	r3, [sp, #8]
   12e52:	2300      	movs	r3, #0
   12e54:	e9cd 3300 	strd	r3, r3, [sp]
   12e58:	2201      	movs	r2, #1
   12e5a:	4618      	mov	r0, r3
   12e5c:	f00b fc3a 	bl	1e6d4 <z_log_msg_runtime_create.constprop.0>
}
   12e60:	e777      	b.n	12d52 <z_arm_fault+0xb6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   12e62:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   12e66:	f023 0301 	bic.w	r3, r3, #1
   12e6a:	e7c2      	b.n	12df2 <z_arm_fault+0x156>
   12e6c:	e000ed00 	.word	0xe000ed00
   12e70:	00022487 	.word	0x00022487
   12e74:	000216d4 	.word	0x000216d4
   12e78:	000224b2 	.word	0x000224b2
   12e7c:	000224c9 	.word	0x000224c9
   12e80:	000224ea 	.word	0x000224ea
   12e84:	000224f8 	.word	0x000224f8
   12e88:	00022517 	.word	0x00022517
   12e8c:	00022533 	.word	0x00022533
   12e90:	0002246e 	.word	0x0002246e
   12e94:	00022459 	.word	0x00022459
   12e98:	00022557 	.word	0x00022557

00012e9c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   12e9c:	4a02      	ldr	r2, [pc, #8]	; (12ea8 <z_arm_fault_init+0xc>)
   12e9e:	6953      	ldr	r3, [r2, #20]
   12ea0:	f043 0310 	orr.w	r3, r3, #16
   12ea4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
   12ea6:	4770      	bx	lr
   12ea8:	e000ed00 	.word	0xe000ed00

00012eac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12eac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12eb0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12eb4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12eb6:	4672      	mov	r2, lr
	bl z_arm_fault
   12eb8:	f7ff fef0 	bl	12c9c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12ebc:	bd01      	pop	{r0, pc}
   12ebe:	bf00      	nop

00012ec0 <z_arm_interrupt_init>:
   12ec0:	4804      	ldr	r0, [pc, #16]	; (12ed4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   12ec2:	2300      	movs	r3, #0
   12ec4:	2140      	movs	r1, #64	; 0x40
   12ec6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   12ec8:	3301      	adds	r3, #1
   12eca:	2b30      	cmp	r3, #48	; 0x30
   12ecc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   12ed0:	d1f9      	bne.n	12ec6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   12ed2:	4770      	bx	lr
   12ed4:	e000e100 	.word	0xe000e100

00012ed8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   12ed8:	2000      	movs	r0, #0
    msr CONTROL, r0
   12eda:	f380 8814 	msr	CONTROL, r0
    isb
   12ede:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   12ee2:	f7fe fe73 	bl	11bcc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   12ee6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   12ee8:	490d      	ldr	r1, [pc, #52]	; (12f20 <__start+0x48>)
    str r0, [r1]
   12eea:	6008      	str	r0, [r1, #0]
    dsb
   12eec:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12ef0:	480c      	ldr	r0, [pc, #48]	; (12f24 <__start+0x4c>)
    msr msp, r0
   12ef2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   12ef6:	f000 f82b 	bl	12f50 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12efa:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   12efc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12f00:	4809      	ldr	r0, [pc, #36]	; (12f28 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12f02:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
   12f06:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12f08:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12f0c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12f10:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12f12:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12f14:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12f18:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12f1c:	f7ff fc24 	bl	12768 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
   12f20:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   12f24:	20005780 	.word	0x20005780
    ldr r0, =z_interrupt_stacks
   12f28:	200049c0 	.word	0x200049c0

00012f2c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   12f2c:	4907      	ldr	r1, [pc, #28]	; (12f4c <z_arm_clear_arm_mpu_config+0x20>)
   12f2e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
   12f32:	2300      	movs	r3, #0
	int num_regions =
   12f34:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   12f38:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   12f3a:	4293      	cmp	r3, r2
   12f3c:	db00      	blt.n	12f40 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
   12f3e:	4770      	bx	lr
  MPU->RNR = rnr;
   12f40:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
   12f44:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
   12f48:	3301      	adds	r3, #1
   12f4a:	e7f6      	b.n	12f3a <z_arm_clear_arm_mpu_config+0xe>
   12f4c:	e000ed00 	.word	0xe000ed00

00012f50 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
   12f50:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   12f52:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   12f54:	2300      	movs	r3, #0
   12f56:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   12f5a:	f7ff ffe7 	bl	12f2c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   12f5e:	4b14      	ldr	r3, [pc, #80]	; (12fb0 <z_arm_init_arch_hw_at_boot+0x60>)
   12f60:	f04f 32ff 	mov.w	r2, #4294967295
   12f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   12f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   12f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   12f70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   12f74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   12f78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   12f7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   12f80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   12f84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   12f88:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   12f8c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   12f90:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   12f94:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   12f98:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   12f9c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   12fa0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   12fa4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   12fa6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12faa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   12fae:	bd08      	pop	{r3, pc}
   12fb0:	e000e100 	.word	0xe000e100

00012fb4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   12fb4:	4b08      	ldr	r3, [pc, #32]	; (12fd8 <z_impl_k_thread_abort+0x24>)
   12fb6:	689b      	ldr	r3, [r3, #8]
   12fb8:	4283      	cmp	r3, r0
   12fba:	d10b      	bne.n	12fd4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   12fbc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   12fc0:	b143      	cbz	r3, 12fd4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12fc2:	4b06      	ldr	r3, [pc, #24]	; (12fdc <z_impl_k_thread_abort+0x28>)
   12fc4:	685a      	ldr	r2, [r3, #4]
   12fc6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
   12fca:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
   12fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   12fd2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
   12fd4:	f009 bf2e 	b.w	1ce34 <z_thread_abort>
   12fd8:	20002908 	.word	0x20002908
   12fdc:	e000ed00 	.word	0xe000ed00

00012fe0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   12fe0:	4b02      	ldr	r3, [pc, #8]	; (12fec <z_arm_configure_static_mpu_regions+0xc>)
   12fe2:	4a03      	ldr	r2, [pc, #12]	; (12ff0 <z_arm_configure_static_mpu_regions+0x10>)
   12fe4:	4803      	ldr	r0, [pc, #12]	; (12ff4 <z_arm_configure_static_mpu_regions+0x14>)
   12fe6:	2101      	movs	r1, #1
   12fe8:	f000 b886 	b.w	130f8 <arm_core_mpu_configure_static_mpu_regions>
   12fec:	20020000 	.word	0x20020000
   12ff0:	20000000 	.word	0x20000000
   12ff4:	000217cc 	.word	0x000217cc

00012ff8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   12ff8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   12ffa:	4b05      	ldr	r3, [pc, #20]	; (13010 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   12ffc:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
   12ffe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13000:	4a04      	ldr	r2, [pc, #16]	; (13014 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13002:	2140      	movs	r1, #64	; 0x40
   13004:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13008:	4618      	mov	r0, r3
   1300a:	2101      	movs	r1, #1
   1300c:	f000 b87e 	b.w	1310c <arm_core_mpu_configure_dynamic_mpu_regions>
   13010:	20002514 	.word	0x20002514
   13014:	150b0000 	.word	0x150b0000

00013018 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13018:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   1301a:	4e28      	ldr	r6, [pc, #160]	; (130bc <mpu_configure_regions+0xa4>)
   1301c:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1301e:	2500      	movs	r5, #0
   13020:	428d      	cmp	r5, r1
   13022:	da15      	bge.n	13050 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
   13024:	6844      	ldr	r4, [r0, #4]
   13026:	2c00      	cmp	r4, #0
   13028:	d045      	beq.n	130b6 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1302a:	b1d3      	cbz	r3, 13062 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1302c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13030:	ea14 0f0c 	tst.w	r4, ip
   13034:	d00f      	beq.n	13056 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   13036:	4b22      	ldr	r3, [pc, #136]	; (130c0 <mpu_configure_regions+0xa8>)
   13038:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1303a:	9302      	str	r3, [sp, #8]
   1303c:	2300      	movs	r3, #0
   1303e:	2201      	movs	r2, #1
   13040:	e9cd 3300 	strd	r3, r3, [sp]
   13044:	491f      	ldr	r1, [pc, #124]	; (130c4 <mpu_configure_regions+0xac>)
   13046:	4618      	mov	r0, r3
   13048:	f00b fb54 	bl	1e6f4 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   1304c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   13050:	4610      	mov	r0, r2
   13052:	b005      	add	sp, #20
   13054:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
   13056:	2c1f      	cmp	r4, #31
   13058:	d9ed      	bls.n	13036 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   1305a:	6807      	ldr	r7, [r0, #0]
		&&
   1305c:	ea1c 0f07 	tst.w	ip, r7
   13060:	d1e9      	bne.n	13036 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   13062:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
   13064:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13066:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   1306a:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
   1306e:	d910      	bls.n	13092 <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
   13070:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   13074:	d80f      	bhi.n	13096 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   13076:	3c01      	subs	r4, #1
   13078:	fab4 f484 	clz	r4, r4
   1307c:	f1c4 041f 	rsb	r4, r4, #31
   13080:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   13082:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   13086:	ea4c 0c04 	orr.w	ip, ip, r4
   1308a:	d906      	bls.n	1309a <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   1308c:	4b0e      	ldr	r3, [pc, #56]	; (130c8 <mpu_configure_regions+0xb0>)
   1308e:	9203      	str	r2, [sp, #12]
   13090:	e7d3      	b.n	1303a <mpu_configure_regions+0x22>
		return REGION_32B;
   13092:	2408      	movs	r4, #8
   13094:	e7f5      	b.n	13082 <mpu_configure_regions+0x6a>
		return REGION_4G;
   13096:	243e      	movs	r4, #62	; 0x3e
   13098:	e7f3      	b.n	13082 <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   1309a:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
   1309e:	4314      	orrs	r4, r2
   130a0:	f044 0410 	orr.w	r4, r4, #16
   130a4:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   130a8:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   130ac:	f04c 0401 	orr.w	r4, ip, #1
   130b0:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
   130b4:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
   130b6:	3501      	adds	r5, #1
   130b8:	300c      	adds	r0, #12
   130ba:	e7b1      	b.n	13020 <mpu_configure_regions+0x8>
   130bc:	e000ed00 	.word	0xe000ed00
   130c0:	0002256e 	.word	0x0002256e
   130c4:	000216c4 	.word	0x000216c4
   130c8:	00022591 	.word	0x00022591

000130cc <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   130cc:	4b04      	ldr	r3, [pc, #16]	; (130e0 <arm_core_mpu_enable+0x14>)
   130ce:	2205      	movs	r2, #5
   130d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   130d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   130d8:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   130dc:	4770      	bx	lr
   130de:	bf00      	nop
   130e0:	e000ed00 	.word	0xe000ed00

000130e4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   130e4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   130e8:	4b02      	ldr	r3, [pc, #8]	; (130f4 <arm_core_mpu_disable+0x10>)
   130ea:	2200      	movs	r2, #0
   130ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   130f0:	4770      	bx	lr
   130f2:	bf00      	nop
   130f4:	e000ed00 	.word	0xe000ed00

000130f8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   130f8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   130fa:	4c03      	ldr	r4, [pc, #12]	; (13108 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   130fc:	2301      	movs	r3, #1
   130fe:	7822      	ldrb	r2, [r4, #0]
   13100:	f7ff ff8a 	bl	13018 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13104:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13106:	bd10      	pop	{r4, pc}
   13108:	2000299b 	.word	0x2000299b

0001310c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
   1310c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1310e:	4a09      	ldr	r2, [pc, #36]	; (13134 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   13110:	2300      	movs	r3, #0
   13112:	7812      	ldrb	r2, [r2, #0]
   13114:	f7ff ff80 	bl	13018 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13118:	f110 0f16 	cmn.w	r0, #22
   1311c:	d003      	beq.n	13126 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
   1311e:	4b06      	ldr	r3, [pc, #24]	; (13138 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   13120:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   13122:	2807      	cmp	r0, #7
   13124:	dd00      	ble.n	13128 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13126:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13128:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   1312c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   13130:	3001      	adds	r0, #1
   13132:	e7f6      	b.n	13122 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   13134:	2000299b 	.word	0x2000299b
   13138:	e000ed00 	.word	0xe000ed00

0001313c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   1313c:	4914      	ldr	r1, [pc, #80]	; (13190 <z_arm_mpu_init+0x54>)
   1313e:	6808      	ldr	r0, [r1, #0]
   13140:	2808      	cmp	r0, #8
{
   13142:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   13144:	d821      	bhi.n	1318a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   13146:	f7ff ffcd 	bl	130e4 <arm_core_mpu_disable>
   1314a:	4c12      	ldr	r4, [pc, #72]	; (13194 <z_arm_mpu_init+0x58>)
   1314c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   1314e:	2200      	movs	r2, #0
   13150:	4290      	cmp	r0, r2
   13152:	f101 010c 	add.w	r1, r1, #12
   13156:	d105      	bne.n	13164 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   13158:	4b0f      	ldr	r3, [pc, #60]	; (13198 <z_arm_mpu_init+0x5c>)
   1315a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   1315c:	f7ff ffb6 	bl	130cc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   13160:	2000      	movs	r0, #0
}
   13162:	bd10      	pop	{r4, pc}
   13164:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13168:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   1316c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   13170:	4313      	orrs	r3, r2
   13172:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13176:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1317a:	f851 3c04 	ldr.w	r3, [r1, #-4]
   1317e:	f043 0301 	orr.w	r3, r3, #1
   13182:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   13186:	3201      	adds	r2, #1
   13188:	e7e2      	b.n	13150 <z_arm_mpu_init+0x14>
		return -1;
   1318a:	f04f 30ff 	mov.w	r0, #4294967295
   1318e:	e7e8      	b.n	13162 <z_arm_mpu_init+0x26>
   13190:	000217d8 	.word	0x000217d8
   13194:	e000ed00 	.word	0xe000ed00
   13198:	2000299b 	.word	0x2000299b

0001319c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
   1319c:	4b01      	ldr	r3, [pc, #4]	; (131a4 <__stdout_hook_install+0x8>)
   1319e:	6018      	str	r0, [r3, #0]
}
   131a0:	4770      	bx	lr
   131a2:	bf00      	nop
   131a4:	2000061c 	.word	0x2000061c

000131a8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   131a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   131ac:	f3ef 8211 	mrs	r2, BASEPRI
   131b0:	f383 8812 	msr	BASEPRI_MAX, r3
   131b4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   131b8:	4906      	ldr	r1, [pc, #24]	; (131d4 <nordicsemi_nrf52_init+0x2c>)
   131ba:	2301      	movs	r3, #1
   131bc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   131c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   131c4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   131c8:	f382 8811 	msr	BASEPRI, r2
   131cc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   131d0:	2000      	movs	r0, #0
   131d2:	4770      	bx	lr
   131d4:	4001e000 	.word	0x4001e000

000131d8 <sys_arch_reboot>:
    *p_gpregret = val;
   131d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   131dc:	b2c0      	uxtb	r0, r0
   131de:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   131e2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   131e6:	4905      	ldr	r1, [pc, #20]	; (131fc <sys_arch_reboot+0x24>)
   131e8:	4b05      	ldr	r3, [pc, #20]	; (13200 <sys_arch_reboot+0x28>)
   131ea:	68ca      	ldr	r2, [r1, #12]
   131ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   131f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   131f2:	60cb      	str	r3, [r1, #12]
   131f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   131f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   131fa:	e7fd      	b.n	131f8 <sys_arch_reboot+0x20>
   131fc:	e000ed00 	.word	0xe000ed00
   13200:	05fa0004 	.word	0x05fa0004

00013204 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13204:	b120      	cbz	r0, 13210 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13206:	4b03      	ldr	r3, [pc, #12]	; (13214 <arch_busy_wait+0x10>)
   13208:	0180      	lsls	r0, r0, #6
   1320a:	f043 0301 	orr.w	r3, r3, #1
   1320e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   13210:	4770      	bx	lr
   13212:	bf00      	nop
   13214:	00021760 	.word	0x00021760

00013218 <bt_hex>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13218:	4b0e      	ldr	r3, [pc, #56]	; (13254 <bt_hex+0x3c>)
   1321a:	2940      	cmp	r1, #64	; 0x40
{
   1321c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1321e:	bf28      	it	cs
   13220:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2] = hex[b[i] >> 4];
   13222:	4c0d      	ldr	r4, [pc, #52]	; (13258 <bt_hex+0x40>)
   13224:	1846      	adds	r6, r0, r1
   13226:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13228:	42b0      	cmp	r0, r6
   1322a:	f103 0302 	add.w	r3, r3, #2
   1322e:	d104      	bne.n	1323a <bt_hex+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   13230:	2300      	movs	r3, #0
   13232:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13236:	4807      	ldr	r0, [pc, #28]	; (13254 <bt_hex+0x3c>)
   13238:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2] = hex[b[i] >> 4];
   1323a:	7802      	ldrb	r2, [r0, #0]
   1323c:	0912      	lsrs	r2, r2, #4
   1323e:	5ca2      	ldrb	r2, [r4, r2]
   13240:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13244:	f810 2b01 	ldrb.w	r2, [r0], #1
   13248:	f002 020f 	and.w	r2, r2, #15
   1324c:	5ca2      	ldrb	r2, [r4, r2]
   1324e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   13252:	e7e9      	b.n	13228 <bt_hex+0x10>
   13254:	200029ba 	.word	0x200029ba
   13258:	000225e4 	.word	0x000225e4

0001325c <bt_addr_le_str>:

	return str;
}

const char *bt_addr_le_str(const bt_addr_le_t *addr)
{
   1325c:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
   1325e:	7803      	ldrb	r3, [r0, #0]
   13260:	b08b      	sub	sp, #44	; 0x2c
   13262:	4604      	mov	r4, r0
   13264:	ad07      	add	r5, sp, #28
   13266:	2b03      	cmp	r3, #3
   13268:	d821      	bhi.n	132ae <bt_addr_le_str+0x52>
   1326a:	e8df f003 	tbb	[pc, r3]
   1326e:	1a02      	.short	0x1a02
   13270:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
   13272:	4912      	ldr	r1, [pc, #72]	; (132bc <bt_addr_le_str+0x60>)
		strcpy(type, "random");
   13274:	4628      	mov	r0, r5
   13276:	f00b fa4d 	bl	1e714 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1327a:	9505      	str	r5, [sp, #20]
   1327c:	7863      	ldrb	r3, [r4, #1]
   1327e:	9304      	str	r3, [sp, #16]
   13280:	78a3      	ldrb	r3, [r4, #2]
   13282:	9303      	str	r3, [sp, #12]
   13284:	78e3      	ldrb	r3, [r4, #3]
   13286:	9302      	str	r3, [sp, #8]
   13288:	7923      	ldrb	r3, [r4, #4]
   1328a:	9301      	str	r3, [sp, #4]
   1328c:	7963      	ldrb	r3, [r4, #5]
   1328e:	9300      	str	r3, [sp, #0]
   13290:	79a3      	ldrb	r3, [r4, #6]
   13292:	4a0b      	ldr	r2, [pc, #44]	; (132c0 <bt_addr_le_str+0x64>)
   13294:	480b      	ldr	r0, [pc, #44]	; (132c4 <bt_addr_le_str+0x68>)
   13296:	211e      	movs	r1, #30
   13298:	f00a fc24 	bl	1dae4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   1329c:	4809      	ldr	r0, [pc, #36]	; (132c4 <bt_addr_le_str+0x68>)
   1329e:	b00b      	add	sp, #44	; 0x2c
   132a0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   132a2:	4909      	ldr	r1, [pc, #36]	; (132c8 <bt_addr_le_str+0x6c>)
   132a4:	e7e6      	b.n	13274 <bt_addr_le_str+0x18>
		strcpy(type, "public-id");
   132a6:	4909      	ldr	r1, [pc, #36]	; (132cc <bt_addr_le_str+0x70>)
   132a8:	e7e4      	b.n	13274 <bt_addr_le_str+0x18>
		strcpy(type, "random-id");
   132aa:	4909      	ldr	r1, [pc, #36]	; (132d0 <bt_addr_le_str+0x74>)
   132ac:	e7e2      	b.n	13274 <bt_addr_le_str+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   132ae:	4a09      	ldr	r2, [pc, #36]	; (132d4 <bt_addr_le_str+0x78>)
   132b0:	210a      	movs	r1, #10
   132b2:	4628      	mov	r0, r5
   132b4:	f00a fc16 	bl	1dae4 <snprintk>
		break;
   132b8:	e7df      	b.n	1327a <bt_addr_le_str+0x1e>
   132ba:	bf00      	nop
   132bc:	00021da4 	.word	0x00021da4
   132c0:	00021dc6 	.word	0x00021dc6
   132c4:	2000299c 	.word	0x2000299c
   132c8:	00021dab 	.word	0x00021dab
   132cc:	00021db2 	.word	0x00021db2
   132d0:	00021dbc 	.word	0x00021dbc
   132d4:	000231e8 	.word	0x000231e8

000132d8 <long_wq_init>:
{
	return k_work_submit_to_queue(&bt_long_wq, work);
}

static int long_wq_init(const struct device *d)
{
   132d8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(d);

	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};

	k_work_queue_init(&bt_long_wq);
   132da:	4d0a      	ldr	r5, [pc, #40]	; (13304 <long_wq_init+0x2c>)
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   132dc:	4b0a      	ldr	r3, [pc, #40]	; (13308 <long_wq_init+0x30>)
{
   132de:	b085      	sub	sp, #20
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   132e0:	2400      	movs	r4, #0
	k_work_queue_init(&bt_long_wq);
   132e2:	4628      	mov	r0, r5
	const struct k_work_queue_config cfg = {.name = "BT_LW_WQ"};
   132e4:	9302      	str	r3, [sp, #8]
   132e6:	9403      	str	r4, [sp, #12]
	k_work_queue_init(&bt_long_wq);
   132e8:	f00d fcdb 	bl	20ca2 <k_work_queue_init>

	k_work_queue_start(&bt_long_wq, bt_lw_stack_area,
   132ec:	ab02      	add	r3, sp, #8
   132ee:	9300      	str	r3, [sp, #0]
   132f0:	4628      	mov	r0, r5
   132f2:	4906      	ldr	r1, [pc, #24]	; (1330c <long_wq_init+0x34>)
   132f4:	230a      	movs	r3, #10
   132f6:	f44f 62a3 	mov.w	r2, #1304	; 0x518
   132fa:	f009 f9fd 	bl	1c6f8 <k_work_queue_start>
			   K_THREAD_STACK_SIZEOF(bt_lw_stack_area),
			   CONFIG_BT_LONG_WQ_PRIO, &cfg);

	return 0;
}
   132fe:	4620      	mov	r0, r4
   13300:	b005      	add	sp, #20
   13302:	bd30      	pop	{r4, r5, pc}
   13304:	20001820 	.word	0x20001820
   13308:	000225f5 	.word	0x000225f5
   1330c:	20002f40 	.word	0x20002f40

00013310 <bt_long_wq_schedule>:
{
   13310:	4601      	mov	r1, r0
	return k_work_schedule_for_queue(&bt_long_wq, dwork, timeout);
   13312:	4801      	ldr	r0, [pc, #4]	; (13318 <bt_long_wq_schedule+0x8>)
   13314:	f009 ba28 	b.w	1c768 <k_work_schedule_for_queue>
   13318:	20001820 	.word	0x20001820

0001331c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1331c:	b430      	push	{r4, r5}
   1331e:	4603      	mov	r3, r0
   13320:	4608      	mov	r0, r1
	switch (src->type) {
   13322:	781a      	ldrb	r2, [r3, #0]
   13324:	2a01      	cmp	r2, #1
   13326:	d013      	beq.n	13350 <uuid_to_uuid128+0x34>
   13328:	2a02      	cmp	r2, #2
   1332a:	d026      	beq.n	1337a <uuid_to_uuid128+0x5e>
   1332c:	b972      	cbnz	r2, 1334c <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1332e:	4a15      	ldr	r2, [pc, #84]	; (13384 <uuid_to_uuid128+0x68>)
   13330:	f102 0410 	add.w	r4, r2, #16
   13334:	f852 5b04 	ldr.w	r5, [r2], #4
   13338:	f841 5b04 	str.w	r5, [r1], #4
   1333c:	42a2      	cmp	r2, r4
   1333e:	d1f9      	bne.n	13334 <uuid_to_uuid128+0x18>
   13340:	7812      	ldrb	r2, [r2, #0]
   13342:	700a      	strb	r2, [r1, #0]
		sys_put_le16(BT_UUID_16(src)->val,
   13344:	885b      	ldrh	r3, [r3, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   13346:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13348:	0a1b      	lsrs	r3, r3, #8
   1334a:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   1334c:	bc30      	pop	{r4, r5}
   1334e:	4770      	bx	lr
		*dst = uuid128_base;
   13350:	4a0c      	ldr	r2, [pc, #48]	; (13384 <uuid_to_uuid128+0x68>)
   13352:	f102 0410 	add.w	r4, r2, #16
   13356:	f852 5b04 	ldr.w	r5, [r2], #4
   1335a:	f841 5b04 	str.w	r5, [r1], #4
   1335e:	42a2      	cmp	r2, r4
   13360:	d1f9      	bne.n	13356 <uuid_to_uuid128+0x3a>
   13362:	7812      	ldrb	r2, [r2, #0]
   13364:	700a      	strb	r2, [r1, #0]
		sys_put_le32(BT_UUID_32(src)->val,
   13366:	685b      	ldr	r3, [r3, #4]
	dst[0] = val;
   13368:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   1336a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   1336e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13370:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   13372:	0a1b      	lsrs	r3, r3, #8
   13374:	7382      	strb	r2, [r0, #14]
   13376:	7403      	strb	r3, [r0, #16]
}
   13378:	e7e8      	b.n	1334c <uuid_to_uuid128+0x30>
}
   1337a:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   1337c:	2211      	movs	r2, #17
   1337e:	4619      	mov	r1, r3
   13380:	f00b b9fe 	b.w	1e780 <memcpy>
   13384:	000225fe 	.word	0x000225fe

00013388 <bt_addr_from_str>:

	return 0;
}

int bt_addr_from_str(const char *str, bt_addr_t *addr)
{
   13388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1338c:	4604      	mov	r4, r0
   1338e:	460e      	mov	r6, r1
	int i, j;
	uint8_t tmp;

	if (strlen(str) != 17U) {
   13390:	f00b f9ca 	bl	1e728 <strlen>
   13394:	2811      	cmp	r0, #17
   13396:	d004      	beq.n	133a2 <bt_addr_from_str+0x1a>
		return -EINVAL;
   13398:	f06f 0015 	mvn.w	r0, #21

		addr->val[i] |= tmp;
	}

	return 0;
}
   1339c:	b002      	add	sp, #8
   1339e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   133a2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 133f0 <bt_addr_from_str+0x68>
   133a6:	1e67      	subs	r7, r4, #1
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   133a8:	2505      	movs	r5, #5
   133aa:	f1c4 0402 	rsb	r4, r4, #2
   133ae:	19e3      	adds	r3, r4, r7
   133b0:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   133b4:	2800      	cmp	r0, #0
   133b6:	d0f1      	beq.n	1339c <bt_addr_from_str+0x14>
		if (!(j % 3) && (*str != ':')) {
   133b8:	fb08 f303 	mul.w	r3, r8, r3
   133bc:	f1b3 3f55 	cmp.w	r3, #1431655765	; 0x55555555
   133c0:	d803      	bhi.n	133ca <bt_addr_from_str+0x42>
   133c2:	283a      	cmp	r0, #58	; 0x3a
   133c4:	d1e8      	bne.n	13398 <bt_addr_from_str+0x10>
			i--;
   133c6:	3d01      	subs	r5, #1
			continue;
   133c8:	e7f1      	b.n	133ae <bt_addr_from_str+0x26>
		} else if (*str == ':') {
   133ca:	283a      	cmp	r0, #58	; 0x3a
   133cc:	d0fb      	beq.n	133c6 <bt_addr_from_str+0x3e>
		addr->val[i] = addr->val[i] << 4;
   133ce:	5d73      	ldrb	r3, [r6, r5]
   133d0:	011b      	lsls	r3, r3, #4
   133d2:	5573      	strb	r3, [r6, r5]
		if (char2hex(*str, &tmp) < 0) {
   133d4:	f10d 0107 	add.w	r1, sp, #7
   133d8:	7838      	ldrb	r0, [r7, #0]
   133da:	f00a fb47 	bl	1da6c <char2hex>
   133de:	2800      	cmp	r0, #0
   133e0:	dbda      	blt.n	13398 <bt_addr_from_str+0x10>
		addr->val[i] |= tmp;
   133e2:	5d73      	ldrb	r3, [r6, r5]
   133e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   133e8:	4313      	orrs	r3, r2
   133ea:	5573      	strb	r3, [r6, r5]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   133ec:	e7df      	b.n	133ae <bt_addr_from_str+0x26>
   133ee:	bf00      	nop
   133f0:	aaaaaaab 	.word	0xaaaaaaab

000133f4 <bt_addr_le_from_str>:

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   133f4:	b538      	push	{r3, r4, r5, lr}
   133f6:	460c      	mov	r4, r1
	int err;

	err = bt_addr_from_str(str, &addr->a);
   133f8:	1c51      	adds	r1, r2, #1
{
   133fa:	4615      	mov	r5, r2
	err = bt_addr_from_str(str, &addr->a);
   133fc:	f7ff ffc4 	bl	13388 <bt_addr_from_str>
	if (err < 0) {
   13400:	2800      	cmp	r0, #0
   13402:	db07      	blt.n	13414 <bt_addr_le_from_str+0x20>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   13404:	491c      	ldr	r1, [pc, #112]	; (13478 <bt_addr_le_from_str+0x84>)
   13406:	4620      	mov	r0, r4
   13408:	f00b f99e 	bl	1e748 <strcmp>
   1340c:	b918      	cbnz	r0, 13416 <bt_addr_le_from_str+0x22>
		addr->type = BT_ADDR_LE_PUBLIC;
   1340e:	2300      	movs	r3, #0
   13410:	702b      	strb	r3, [r5, #0]
		addr->type = BT_ADDR_LE_RANDOM_ID;
	} else {
		return -EINVAL;
	}

	return 0;
   13412:	2000      	movs	r0, #0
}
   13414:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   13416:	4919      	ldr	r1, [pc, #100]	; (1347c <bt_addr_le_from_str+0x88>)
   13418:	4620      	mov	r0, r4
   1341a:	f00b f995 	bl	1e748 <strcmp>
   1341e:	2800      	cmp	r0, #0
   13420:	d0f5      	beq.n	1340e <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   13422:	4917      	ldr	r1, [pc, #92]	; (13480 <bt_addr_le_from_str+0x8c>)
   13424:	4620      	mov	r0, r4
   13426:	f00b f98f 	bl	1e748 <strcmp>
   1342a:	b908      	cbnz	r0, 13430 <bt_addr_le_from_str+0x3c>
		addr->type = BT_ADDR_LE_RANDOM;
   1342c:	2301      	movs	r3, #1
   1342e:	e7ef      	b.n	13410 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   13430:	4914      	ldr	r1, [pc, #80]	; (13484 <bt_addr_le_from_str+0x90>)
   13432:	4620      	mov	r0, r4
   13434:	f00b f988 	bl	1e748 <strcmp>
   13438:	2800      	cmp	r0, #0
   1343a:	d0f7      	beq.n	1342c <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1343c:	4912      	ldr	r1, [pc, #72]	; (13488 <bt_addr_le_from_str+0x94>)
   1343e:	4620      	mov	r0, r4
   13440:	f00b f982 	bl	1e748 <strcmp>
   13444:	b908      	cbnz	r0, 1344a <bt_addr_le_from_str+0x56>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   13446:	2302      	movs	r3, #2
   13448:	e7e2      	b.n	13410 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1344a:	4910      	ldr	r1, [pc, #64]	; (1348c <bt_addr_le_from_str+0x98>)
   1344c:	4620      	mov	r0, r4
   1344e:	f00b f97b 	bl	1e748 <strcmp>
   13452:	2800      	cmp	r0, #0
   13454:	d0f7      	beq.n	13446 <bt_addr_le_from_str+0x52>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   13456:	490e      	ldr	r1, [pc, #56]	; (13490 <bt_addr_le_from_str+0x9c>)
   13458:	4620      	mov	r0, r4
   1345a:	f00b f975 	bl	1e748 <strcmp>
   1345e:	b908      	cbnz	r0, 13464 <bt_addr_le_from_str+0x70>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   13460:	2303      	movs	r3, #3
   13462:	e7d5      	b.n	13410 <bt_addr_le_from_str+0x1c>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   13464:	490b      	ldr	r1, [pc, #44]	; (13494 <bt_addr_le_from_str+0xa0>)
   13466:	4620      	mov	r0, r4
   13468:	f00b f96e 	bl	1e748 <strcmp>
   1346c:	2800      	cmp	r0, #0
   1346e:	d0f7      	beq.n	13460 <bt_addr_le_from_str+0x6c>
		return -EINVAL;
   13470:	f06f 0015 	mvn.w	r0, #21
   13474:	e7ce      	b.n	13414 <bt_addr_le_from_str+0x20>
   13476:	bf00      	nop
   13478:	00021da4 	.word	0x00021da4
   1347c:	0002260f 	.word	0x0002260f
   13480:	00021dab 	.word	0x00021dab
   13484:	00022618 	.word	0x00022618
   13488:	00021db2 	.word	0x00021db2
   1348c:	00022621 	.word	0x00022621
   13490:	00021dbc 	.word	0x00021dbc
   13494:	0002262d 	.word	0x0002262d

00013498 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13498:	b538      	push	{r3, r4, r5, lr}
   1349a:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1349c:	4805      	ldr	r0, [pc, #20]	; (134b4 <bt_buf_get_rx+0x1c>)
   1349e:	f00c fbf5 	bl	1fc8c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   134a2:	4604      	mov	r4, r0
   134a4:	b120      	cbz	r0, 134b0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   134a6:	2100      	movs	r1, #0
   134a8:	300c      	adds	r0, #12
   134aa:	f00c fbf6 	bl	1fc9a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   134ae:	7625      	strb	r5, [r4, #24]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   134b0:	4620      	mov	r0, r4
   134b2:	bd38      	pop	{r3, r4, r5, pc}
   134b4:	200009ac 	.word	0x200009ac

000134b8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   134b8:	b510      	push	{r4, lr}
   134ba:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   134bc:	490a      	ldr	r1, [pc, #40]	; (134e8 <bt_buf_get_cmd_complete+0x30>)
{
   134be:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   134c0:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
   134c4:	b920      	cbnz	r0, 134d0 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   134c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   134ca:	2001      	movs	r0, #1
   134cc:	f7ff bfe4 	b.w	13498 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   134d0:	f00c fc16 	bl	1fd00 <net_buf_ref>
   134d4:	2301      	movs	r3, #1
		buf->len = 0U;
   134d6:	2100      	movs	r1, #0
   134d8:	7603      	strb	r3, [r0, #24]
   134da:	8201      	strh	r1, [r0, #16]
		buf = net_buf_ref(bt_dev.sent_cmd);
   134dc:	4604      	mov	r4, r0
   134de:	300c      	adds	r0, #12
   134e0:	f00c fbdb 	bl	1fc9a <net_buf_simple_reserve>
}
   134e4:	4620      	mov	r0, r4
   134e6:	bd10      	pop	{r4, pc}
   134e8:	20000370 	.word	0x20000370

000134ec <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   134ec:	b570      	push	{r4, r5, r6, lr}
   134ee:	4604      	mov	r4, r0
	switch (evt) {
   134f0:	2c0f      	cmp	r4, #15
{
   134f2:	460d      	mov	r5, r1
   134f4:	4610      	mov	r0, r2
   134f6:	4619      	mov	r1, r3
	switch (evt) {
   134f8:	d805      	bhi.n	13506 <bt_buf_get_evt+0x1a>
   134fa:	2c0d      	cmp	r4, #13
   134fc:	d90d      	bls.n	1351a <bt_buf_get_evt+0x2e>
			return buf;
		}

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   134fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   13502:	f7ff bfd9 	b.w	134b8 <bt_buf_get_cmd_complete>
	switch (evt) {
   13506:	2c13      	cmp	r4, #19
   13508:	d107      	bne.n	1351a <bt_buf_get_evt+0x2e>
	return net_buf_alloc_fixed(pool, timeout);
   1350a:	480c      	ldr	r0, [pc, #48]	; (1353c <bt_buf_get_evt+0x50>)
   1350c:	f00c fbbe 	bl	1fc8c <net_buf_alloc_fixed>
			if (buf) {
   13510:	4604      	mov	r4, r0
   13512:	b938      	cbnz	r0, 13524 <bt_buf_get_evt+0x38>
{
   13514:	2400      	movs	r4, #0
}
   13516:	4620      	mov	r0, r4
   13518:	bd70      	pop	{r4, r5, r6, pc}
   1351a:	4602      	mov	r2, r0
   1351c:	460b      	mov	r3, r1
		if (discardable) {
   1351e:	b145      	cbz	r5, 13532 <bt_buf_get_evt+0x46>
   13520:	4807      	ldr	r0, [pc, #28]	; (13540 <bt_buf_get_evt+0x54>)
   13522:	e7f3      	b.n	1350c <bt_buf_get_evt+0x20>
	net_buf_simple_reserve(&buf->b, reserve);
   13524:	2100      	movs	r1, #0
   13526:	300c      	adds	r0, #12
   13528:	f00c fbb7 	bl	1fc9a <net_buf_simple_reserve>
   1352c:	2301      	movs	r3, #1
   1352e:	7623      	strb	r3, [r4, #24]
}
   13530:	e7f1      	b.n	13516 <bt_buf_get_evt+0x2a>
}
   13532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13536:	2001      	movs	r0, #1
   13538:	f7ff bfae 	b.w	13498 <bt_buf_get_rx>
   1353c:	200009d8 	.word	0x200009d8
   13540:	20000928 	.word	0x20000928

00013544 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   13544:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   13546:	68c3      	ldr	r3, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13548:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	struct bt_conn *conn;

	LOG_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle, evt->reason);

	if (evt->status) {
   1354c:	781b      	ldrb	r3, [r3, #0]
   1354e:	b963      	cbnz	r3, 1356a <hci_disconn_complete_prio+0x26>
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   13550:	4620      	mov	r0, r4
   13552:	f002 fa47 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   13556:	4605      	mov	r5, r0
   13558:	b940      	cbnz	r0, 1356c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1355a:	4b08      	ldr	r3, [pc, #32]	; (1357c <hci_disconn_complete_prio+0x38>)
   1355c:	881a      	ldrh	r2, [r3, #0]
   1355e:	b922      	cbnz	r2, 1356a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   13560:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   13564:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   13568:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1356a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1356c:	2101      	movs	r1, #1
   1356e:	f002 fa41 	bl	159f4 <bt_conn_set_state>
	bt_conn_unref(conn);
   13572:	4628      	mov	r0, r5
}
   13574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   13578:	f00b bb2e 	b.w	1ebd8 <bt_conn_unref>
   1357c:	20002948 	.word	0x20002948

00013580 <find_pending_connect.part.0>:
	cp->phy_opts = phy_opts;

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
}

static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13580:	b508      	push	{r3, lr}
   13582:	4601      	mov	r1, r0
	/*
	 * Make lookup to check if there's a connection object in
	 * CONNECT or CONNECT_AUTO state associated with passed peer LE address.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   13584:	2206      	movs	r2, #6
   13586:	2000      	movs	r0, #0
   13588:	f002 fc24 	bl	15dd4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) && !conn) {
   1358c:	b928      	cbnz	r0, 1359a <find_pending_connect.part.0+0x1a>

		return conn;
	}

	return NULL;
}
   1358e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			conn = bt_conn_lookup_state_le(BT_ID_DEFAULT,
   13592:	4902      	ldr	r1, [pc, #8]	; (1359c <find_pending_connect.part.0+0x1c>)
   13594:	2203      	movs	r2, #3
   13596:	f002 bc1d 	b.w	15dd4 <bt_conn_lookup_state_le>
}
   1359a:	bd08      	pop	{r3, pc}
   1359c:	000225ca 	.word	0x000225ca

000135a0 <hci_data_buf_overflow>:
{
   135a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_WRN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   135a2:	68c3      	ldr	r3, [r0, #12]
   135a4:	4907      	ldr	r1, [pc, #28]	; (135c4 <hci_data_buf_overflow+0x24>)
   135a6:	781b      	ldrb	r3, [r3, #0]
   135a8:	9303      	str	r3, [sp, #12]
   135aa:	4b07      	ldr	r3, [pc, #28]	; (135c8 <hci_data_buf_overflow+0x28>)
   135ac:	9302      	str	r3, [sp, #8]
   135ae:	2300      	movs	r3, #0
   135b0:	e9cd 3300 	strd	r3, r3, [sp]
   135b4:	2202      	movs	r2, #2
   135b6:	4618      	mov	r0, r3
   135b8:	f00b f98d 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   135bc:	b005      	add	sp, #20
   135be:	f85d fb04 	ldr.w	pc, [sp], #4
   135c2:	bf00      	nop
   135c4:	00021644 	.word	0x00021644
   135c8:	00022639 	.word	0x00022639

000135cc <le_conn_update_complete>:

	bt_conn_unref(conn);
}

static void le_conn_update_complete(struct net_buf *buf)
{
   135cc:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   135ce:	68c5      	ldr	r5, [r0, #12]
	struct bt_conn *conn;
	uint16_t handle;

	handle = sys_le16_to_cpu(evt->handle);
   135d0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
   135d4:	b086      	sub	sp, #24

	LOG_DBG("status 0x%02x, handle %u", evt->status, handle);

	conn = bt_conn_lookup_handle(handle);
   135d6:	4630      	mov	r0, r6
   135d8:	f002 fa04 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   135dc:	4604      	mov	r4, r0
   135de:	b958      	cbnz	r0, 135f8 <le_conn_update_complete+0x2c>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   135e0:	4b1d      	ldr	r3, [pc, #116]	; (13658 <le_conn_update_complete+0x8c>)
   135e2:	491e      	ldr	r1, [pc, #120]	; (1365c <le_conn_update_complete+0x90>)
   135e4:	9603      	str	r6, [sp, #12]
   135e6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   135ea:	9000      	str	r0, [sp, #0]
   135ec:	4603      	mov	r3, r0
   135ee:	2201      	movs	r2, #1
   135f0:	f00b f971 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>

		notify_le_param_updated(conn);
	}

	bt_conn_unref(conn);
}
   135f4:	b006      	add	sp, #24
   135f6:	bd70      	pop	{r4, r5, r6, pc}
	if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   135f8:	782b      	ldrb	r3, [r5, #0]
   135fa:	2b1a      	cmp	r3, #26
   135fc:	d119      	bne.n	13632 <le_conn_update_complete+0x66>
   135fe:	78c3      	ldrb	r3, [r0, #3]
   13600:	2b01      	cmp	r3, #1
   13602:	d124      	bne.n	1364e <le_conn_update_complete+0x82>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13604:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13608:	3004      	adds	r0, #4
   1360a:	f00b f955 	bl	1e8b8 <atomic_or>
	    conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1360e:	0543      	lsls	r3, r0, #21
   13610:	d40f      	bmi.n	13632 <le_conn_update_complete+0x66>
		param.interval_min = conn->le.interval_min;
   13612:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   13616:	9304      	str	r3, [sp, #16]
		bt_l2cap_update_conn_param(conn, &param);
   13618:	a904      	add	r1, sp, #16
		param.latency = conn->le.pending_latency;
   1361a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1361e:	9305      	str	r3, [sp, #20]
		bt_l2cap_update_conn_param(conn, &param);
   13620:	4620      	mov	r0, r4
   13622:	f002 ff77 	bl	16514 <bt_l2cap_update_conn_param>
	bt_conn_unref(conn);
   13626:	4620      	mov	r0, r4
}
   13628:	b006      	add	sp, #24
   1362a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1362e:	f00b bad3 	b.w	1ebd8 <bt_conn_unref>
		if (!evt->status) {
   13632:	782b      	ldrb	r3, [r5, #0]
   13634:	b95b      	cbnz	r3, 1364e <le_conn_update_complete+0x82>
			conn->le.interval = sys_le16_to_cpu(evt->interval);
   13636:	f8b5 3003 	ldrh.w	r3, [r5, #3]
   1363a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
			conn->le.latency = sys_le16_to_cpu(evt->latency);
   1363e:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   13642:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13646:	f8b5 3007 	ldrh.w	r3, [r5, #7]
   1364a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
		notify_le_param_updated(conn);
   1364e:	4620      	mov	r0, r4
   13650:	f002 fb08 	bl	15c64 <notify_le_param_updated>
   13654:	e7e7      	b.n	13626 <le_conn_update_complete+0x5a>
   13656:	bf00      	nop
   13658:	00022661 	.word	0x00022661
   1365c:	00021644 	.word	0x00021644

00013660 <rx_queue_put>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_queue_put(struct net_buf *buf)
{
   13660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13662:	4601      	mov	r1, r0
	net_buf_slist_put(&bt_dev.rx_queue, buf);
   13664:	480b      	ldr	r0, [pc, #44]	; (13694 <rx_queue_put+0x34>)
   13666:	f00c fb1c 	bl	1fca2 <net_buf_slist_put>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
	const int err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
	const int err = k_work_submit_to_queue(&bt_workq, &rx_work);
   1366a:	490b      	ldr	r1, [pc, #44]	; (13698 <rx_queue_put+0x38>)
   1366c:	480b      	ldr	r0, [pc, #44]	; (1369c <rx_queue_put+0x3c>)
   1366e:	f00d fb07 	bl	20c80 <k_work_submit_to_queue>
#endif /* CONFIG_BT_RECV_WORKQ_SYS */
	if (err < 0) {
   13672:	2800      	cmp	r0, #0
   13674:	da0a      	bge.n	1368c <rx_queue_put+0x2c>
		LOG_ERR("Could not submit rx_work: %d", err);
   13676:	4b0a      	ldr	r3, [pc, #40]	; (136a0 <rx_queue_put+0x40>)
   13678:	9302      	str	r3, [sp, #8]
   1367a:	2300      	movs	r3, #0
   1367c:	9003      	str	r0, [sp, #12]
   1367e:	e9cd 3300 	strd	r3, r3, [sp]
   13682:	4908      	ldr	r1, [pc, #32]	; (136a4 <rx_queue_put+0x44>)
   13684:	2201      	movs	r2, #1
   13686:	4618      	mov	r0, r3
   13688:	f00b f925 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	}
}
   1368c:	b005      	add	sp, #20
   1368e:	f85d fb04 	ldr.w	pc, [sp], #4
   13692:	bf00      	nop
   13694:	200004a4 	.word	0x200004a4
   13698:	2000065c 	.word	0x2000065c
   1369c:	20001940 	.word	0x20001940
   136a0:	00022685 	.word	0x00022685
   136a4:	00021644 	.word	0x00021644

000136a8 <hci_hardware_error>:
{
   136a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   136aa:	2101      	movs	r1, #1
   136ac:	300c      	adds	r0, #12
   136ae:	f00c fb6c 	bl	1fd8a <net_buf_simple_pull_mem>
	LOG_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   136b2:	7803      	ldrb	r3, [r0, #0]
   136b4:	9303      	str	r3, [sp, #12]
   136b6:	4b06      	ldr	r3, [pc, #24]	; (136d0 <hci_hardware_error+0x28>)
   136b8:	9302      	str	r3, [sp, #8]
   136ba:	2300      	movs	r3, #0
   136bc:	e9cd 3300 	strd	r3, r3, [sp]
   136c0:	4904      	ldr	r1, [pc, #16]	; (136d4 <hci_hardware_error+0x2c>)
   136c2:	2201      	movs	r2, #1
   136c4:	4618      	mov	r0, r3
   136c6:	f00b f906 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   136ca:	b005      	add	sp, #20
   136cc:	f85d fb04 	ldr.w	pc, [sp], #4
   136d0:	000226a2 	.word	0x000226a2
   136d4:	00021644 	.word	0x00021644

000136d8 <le_data_len_change>:
{
   136d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   136da:	68c3      	ldr	r3, [r0, #12]
   136dc:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   136de:	4620      	mov	r0, r4
   136e0:	f002 f980 	bl	159e4 <bt_conn_lookup_handle>
   136e4:	4603      	mov	r3, r0
	if (!conn) {
   136e6:	b950      	cbnz	r0, 136fe <le_data_len_change+0x26>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   136e8:	4a07      	ldr	r2, [pc, #28]	; (13708 <le_data_len_change+0x30>)
   136ea:	4908      	ldr	r1, [pc, #32]	; (1370c <le_data_len_change+0x34>)
   136ec:	9403      	str	r4, [sp, #12]
   136ee:	e9cd 0201 	strd	r0, r2, [sp, #4]
   136f2:	9000      	str	r0, [sp, #0]
   136f4:	2201      	movs	r2, #1
   136f6:	f00b f8ee 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   136fa:	b004      	add	sp, #16
   136fc:	bd10      	pop	{r4, pc}
   136fe:	b004      	add	sp, #16
   13700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   13704:	f00b ba68 	b.w	1ebd8 <bt_conn_unref>
   13708:	00022661 	.word	0x00022661
   1370c:	00021644 	.word	0x00021644

00013710 <le_phy_update_complete>:
{
   13710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13712:	68c3      	ldr	r3, [r0, #12]
   13714:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   13718:	4620      	mov	r0, r4
   1371a:	f002 f963 	bl	159e4 <bt_conn_lookup_handle>
   1371e:	4603      	mov	r3, r0
	if (!conn) {
   13720:	b950      	cbnz	r0, 13738 <le_phy_update_complete+0x28>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   13722:	4a08      	ldr	r2, [pc, #32]	; (13744 <le_phy_update_complete+0x34>)
   13724:	4908      	ldr	r1, [pc, #32]	; (13748 <le_phy_update_complete+0x38>)
   13726:	9403      	str	r4, [sp, #12]
   13728:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1372c:	9000      	str	r0, [sp, #0]
   1372e:	2201      	movs	r2, #1
   13730:	f00b f8d1 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   13734:	b004      	add	sp, #16
   13736:	bd10      	pop	{r4, pc}
   13738:	b004      	add	sp, #16
   1373a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1373e:	f00b ba4b 	b.w	1ebd8 <bt_conn_unref>
   13742:	bf00      	nop
   13744:	00022661 	.word	0x00022661
   13748:	00021644 	.word	0x00021644

0001374c <hci_disconn_complete>:
{
   1374c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1374e:	68c5      	ldr	r5, [r0, #12]
	if (evt->status) {
   13750:	782e      	ldrb	r6, [r5, #0]
{
   13752:	b085      	sub	sp, #20
	if (evt->status) {
   13754:	b986      	cbnz	r6, 13778 <hci_disconn_complete+0x2c>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13756:	f8b5 7001 	ldrh.w	r7, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1375a:	4638      	mov	r0, r7
   1375c:	f002 f942 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   13760:	4604      	mov	r4, r0
   13762:	b958      	cbnz	r0, 1377c <hci_disconn_complete+0x30>
		LOG_ERR("Unable to look up conn with handle %u", handle);
   13764:	4b0b      	ldr	r3, [pc, #44]	; (13794 <hci_disconn_complete+0x48>)
   13766:	490c      	ldr	r1, [pc, #48]	; (13798 <hci_disconn_complete+0x4c>)
   13768:	9703      	str	r7, [sp, #12]
   1376a:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1376e:	9000      	str	r0, [sp, #0]
   13770:	4603      	mov	r3, r0
   13772:	2201      	movs	r2, #1
   13774:	f00b f8af 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   13778:	b005      	add	sp, #20
   1377a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
   1377c:	78eb      	ldrb	r3, [r5, #3]
   1377e:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   13780:	4631      	mov	r1, r6
   13782:	f002 f937 	bl	159f4 <bt_conn_set_state>
		bt_conn_unref(conn);
   13786:	4620      	mov	r0, r4
}
   13788:	b005      	add	sp, #20
   1378a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1378e:	f00b ba23 	b.w	1ebd8 <bt_conn_unref>
   13792:	bf00      	nop
   13794:	000226c4 	.word	0x000226c4
   13798:	00021644 	.word	0x00021644

0001379c <handle_event>:
{
   1379c:	b530      	push	{r4, r5, lr}
   1379e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   137a2:	4604      	mov	r4, r0
   137a4:	b087      	sub	sp, #28
   137a6:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
   137a8:	4293      	cmp	r3, r2
   137aa:	d112      	bne.n	137d2 <handle_event+0x36>
		LOG_WRN("Unhandled event 0x%02x len %u: %s", event, buf->len,
   137ac:	8a05      	ldrh	r5, [r0, #16]
   137ae:	68c0      	ldr	r0, [r0, #12]
   137b0:	4629      	mov	r1, r5
   137b2:	f7ff fd31 	bl	13218 <bt_hex>
   137b6:	4b16      	ldr	r3, [pc, #88]	; (13810 <handle_event+0x74>)
   137b8:	9302      	str	r3, [sp, #8]
   137ba:	2300      	movs	r3, #0
   137bc:	e9cd 5004 	strd	r5, r0, [sp, #16]
   137c0:	e9cd 3300 	strd	r3, r3, [sp]
   137c4:	4913      	ldr	r1, [pc, #76]	; (13814 <handle_event+0x78>)
   137c6:	9403      	str	r4, [sp, #12]
   137c8:	2202      	movs	r2, #2
   137ca:	4618      	mov	r0, r3
   137cc:	f00b f883 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   137d0:	e014      	b.n	137fc <handle_event+0x60>
		if (handler->event != event) {
   137d2:	4611      	mov	r1, r2
   137d4:	f811 5b08 	ldrb.w	r5, [r1], #8
   137d8:	42a5      	cmp	r5, r4
   137da:	d116      	bne.n	1380a <handle_event+0x6e>
		if (buf->len < handler->min_len) {
   137dc:	8a03      	ldrh	r3, [r0, #16]
   137de:	7851      	ldrb	r1, [r2, #1]
   137e0:	4299      	cmp	r1, r3
   137e2:	d90d      	bls.n	13800 <handle_event+0x64>
			LOG_ERR("Too small (%u bytes) event 0x%02x", buf->len, event);
   137e4:	e9cd 3403 	strd	r3, r4, [sp, #12]
   137e8:	4b0b      	ldr	r3, [pc, #44]	; (13818 <handle_event+0x7c>)
   137ea:	9302      	str	r3, [sp, #8]
   137ec:	2300      	movs	r3, #0
   137ee:	e9cd 3300 	strd	r3, r3, [sp]
   137f2:	4908      	ldr	r1, [pc, #32]	; (13814 <handle_event+0x78>)
   137f4:	2201      	movs	r2, #1
   137f6:	4618      	mov	r0, r3
   137f8:	f00b f86d 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   137fc:	b007      	add	sp, #28
   137fe:	bd30      	pop	{r4, r5, pc}
		handler->handler(buf);
   13800:	6853      	ldr	r3, [r2, #4]
}
   13802:	b007      	add	sp, #28
   13804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		handler->handler(buf);
   13808:	4718      	bx	r3
   1380a:	460a      	mov	r2, r1
   1380c:	e7cc      	b.n	137a8 <handle_event+0xc>
   1380e:	bf00      	nop
   13810:	0002270c 	.word	0x0002270c
   13814:	00021644 	.word	0x00021644
   13818:	000226ea 	.word	0x000226ea

0001381c <rx_work_handler>:
	}
}

#if !defined(CONFIG_BT_RECV_BLOCKING)
static void rx_work_handler(struct k_work *work)
{
   1381c:	b570      	push	{r4, r5, r6, lr}
	int err;

	struct net_buf *buf;

	LOG_DBG("Getting net_buf from queue");
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   1381e:	4853      	ldr	r0, [pc, #332]	; (1396c <rx_work_handler+0x150>)
{
   13820:	b086      	sub	sp, #24
	buf = net_buf_slist_get(&bt_dev.rx_queue);
   13822:	f00c fa54 	bl	1fcce <net_buf_slist_get>
	if (!buf) {
   13826:	4604      	mov	r4, r0
   13828:	2800      	cmp	r0, #0
   1382a:	d064      	beq.n	138f6 <rx_work_handler+0xda>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1382c:	7e03      	ldrb	r3, [r0, #24]
		return;
	}

	LOG_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf), buf->len);

	switch (bt_buf_get_type(buf)) {
   1382e:	2b01      	cmp	r3, #1
   13830:	d063      	beq.n	138fa <rx_work_handler+0xde>
   13832:	2b03      	cmp	r3, #3
   13834:	f040 8090 	bne.w	13958 <rx_work_handler+0x13c>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   13838:	8a03      	ldrh	r3, [r0, #16]
   1383a:	2b03      	cmp	r3, #3
   1383c:	d80c      	bhi.n	13858 <rx_work_handler+0x3c>
   1383e:	4a4c      	ldr	r2, [pc, #304]	; (13970 <rx_work_handler+0x154>)
   13840:	494c      	ldr	r1, [pc, #304]	; (13974 <rx_work_handler+0x158>)
   13842:	484d      	ldr	r0, [pc, #308]	; (13978 <rx_work_handler+0x15c>)
   13844:	f240 13ed 	movw	r3, #493	; 0x1ed
   13848:	f00a fc6d 	bl	1e126 <assert_print>
   1384c:	4040      	eors	r0, r0
   1384e:	f380 8811 	msr	BASEPRI, r0
   13852:	f04f 0003 	mov.w	r0, #3
   13856:	df02      	svc	2
   13858:	2104      	movs	r1, #4
   1385a:	f104 000c 	add.w	r0, r4, #12
   1385e:	f00c fa94 	bl	1fd8a <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13862:	23ff      	movs	r3, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
   13864:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   13866:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   13868:	7663      	strb	r3, [r4, #25]
	if (buf->len != len) {
   1386a:	8a23      	ldrh	r3, [r4, #16]
	acl(buf)->handle = bt_acl_handle(handle);
   1386c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   13870:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
   13872:	8360      	strh	r0, [r4, #26]
	if (buf->len != len) {
   13874:	d00f      	beq.n	13896 <rx_work_handler+0x7a>
		LOG_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   13876:	e9cd 3203 	strd	r3, r2, [sp, #12]
   1387a:	4b40      	ldr	r3, [pc, #256]	; (1397c <rx_work_handler+0x160>)
   1387c:	9302      	str	r3, [sp, #8]
   1387e:	2300      	movs	r3, #0
   13880:	e9cd 3300 	strd	r3, r3, [sp]
   13884:	493e      	ldr	r1, [pc, #248]	; (13980 <rx_work_handler+0x164>)
   13886:	2201      	movs	r2, #1
   13888:	4618      	mov	r0, r3
   1388a:	f00b f824 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	case BT_BUF_EVT:
		hci_event(buf);
		break;
	default:
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
   1388e:	4620      	mov	r0, r4
   13890:	f004 fd76 	bl	18380 <net_buf_unref>
		break;
   13894:	e01a      	b.n	138cc <rx_work_handler+0xb0>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   13896:	f002 f8a5 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   1389a:	4605      	mov	r5, r0
   1389c:	b958      	cbnz	r0, 138b6 <rx_work_handler+0x9a>
		LOG_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   1389e:	8b63      	ldrh	r3, [r4, #26]
   138a0:	9303      	str	r3, [sp, #12]
   138a2:	4b38      	ldr	r3, [pc, #224]	; (13984 <rx_work_handler+0x168>)
   138a4:	4936      	ldr	r1, [pc, #216]	; (13980 <rx_work_handler+0x164>)
   138a6:	9000      	str	r0, [sp, #0]
   138a8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   138ac:	2201      	movs	r2, #1
   138ae:	4603      	mov	r3, r0
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   138b0:	f00b f811 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
   138b4:	e7eb      	b.n	1388e <rx_work_handler+0x72>
	acl(buf)->index = bt_conn_index(conn);
   138b6:	f002 f9a7 	bl	15c08 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   138ba:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   138bc:	7660      	strb	r0, [r4, #25]
	bt_conn_recv(conn, buf, flags);
   138be:	4621      	mov	r1, r4
   138c0:	4628      	mov	r0, r5
   138c2:	f001 ff55 	bl	15770 <bt_conn_recv>
	bt_conn_unref(conn);
   138c6:	4628      	mov	r0, r5
   138c8:	f00b f986 	bl	1ebd8 <bt_conn_unref>
	return list->head;
   138cc:	4b2e      	ldr	r3, [pc, #184]	; (13988 <rx_work_handler+0x16c>)
	/* Schedule the work handler to be executed again if there are
	 * additional items in the queue. This allows for other users of the
	 * work queue to get a chance at running, which wouldn't be possible if
	 * we used a while() loop with a k_yield() statement.
	 */
	if (!sys_slist_is_empty(&bt_dev.rx_queue)) {
   138ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   138d2:	b183      	cbz	r3, 138f6 <rx_work_handler+0xda>

#if defined(CONFIG_BT_RECV_WORKQ_SYS)
		err = k_work_submit(&rx_work);
#elif defined(CONFIG_BT_RECV_WORKQ_BT)
		err = k_work_submit_to_queue(&bt_workq, &rx_work);
   138d4:	492d      	ldr	r1, [pc, #180]	; (1398c <rx_work_handler+0x170>)
   138d6:	482e      	ldr	r0, [pc, #184]	; (13990 <rx_work_handler+0x174>)
   138d8:	f00d f9d2 	bl	20c80 <k_work_submit_to_queue>
#endif
		if (err < 0) {
   138dc:	2800      	cmp	r0, #0
   138de:	da0a      	bge.n	138f6 <rx_work_handler+0xda>
			LOG_ERR("Could not submit rx_work: %d", err);
   138e0:	4b2c      	ldr	r3, [pc, #176]	; (13994 <rx_work_handler+0x178>)
   138e2:	9302      	str	r3, [sp, #8]
   138e4:	2300      	movs	r3, #0
   138e6:	9003      	str	r0, [sp, #12]
   138e8:	e9cd 3300 	strd	r3, r3, [sp]
   138ec:	4924      	ldr	r1, [pc, #144]	; (13980 <rx_work_handler+0x164>)
   138ee:	2201      	movs	r2, #1
   138f0:	4618      	mov	r0, r3
   138f2:	f00a fff0 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		}
	}
}
   138f6:	b006      	add	sp, #24
   138f8:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   138fa:	8a03      	ldrh	r3, [r0, #16]
   138fc:	2b01      	cmp	r3, #1
   138fe:	d80c      	bhi.n	1391a <rx_work_handler+0xfe>
   13900:	4a1b      	ldr	r2, [pc, #108]	; (13970 <rx_work_handler+0x154>)
   13902:	491c      	ldr	r1, [pc, #112]	; (13974 <rx_work_handler+0x158>)
   13904:	481c      	ldr	r0, [pc, #112]	; (13978 <rx_work_handler+0x15c>)
   13906:	f640 136d 	movw	r3, #2413	; 0x96d
   1390a:	f00a fc0c 	bl	1e126 <assert_print>
   1390e:	4040      	eors	r0, r0
   13910:	f380 8811 	msr	BASEPRI, r0
   13914:	f04f 0003 	mov.w	r0, #3
   13918:	df02      	svc	2
   1391a:	2102      	movs	r1, #2
   1391c:	f104 000c 	add.w	r0, r4, #12
   13920:	f00c fa33 	bl	1fd8a <net_buf_simple_pull_mem>
   13924:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   13926:	7800      	ldrb	r0, [r0, #0]
   13928:	f00a ffaa 	bl	1e880 <bt_hci_evt_get_flags>
   1392c:	0783      	lsls	r3, r0, #30
   1392e:	d40c      	bmi.n	1394a <rx_work_handler+0x12e>
   13930:	4a0f      	ldr	r2, [pc, #60]	; (13970 <rx_work_handler+0x154>)
   13932:	4919      	ldr	r1, [pc, #100]	; (13998 <rx_work_handler+0x17c>)
   13934:	4810      	ldr	r0, [pc, #64]	; (13978 <rx_work_handler+0x15c>)
   13936:	f640 1371 	movw	r3, #2417	; 0x971
   1393a:	f00a fbf4 	bl	1e126 <assert_print>
   1393e:	4040      	eors	r0, r0
   13940:	f380 8811 	msr	BASEPRI, r0
   13944:	f04f 0003 	mov.w	r0, #3
   13948:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1394a:	4a14      	ldr	r2, [pc, #80]	; (1399c <rx_work_handler+0x180>)
   1394c:	7828      	ldrb	r0, [r5, #0]
   1394e:	2304      	movs	r3, #4
   13950:	4621      	mov	r1, r4
   13952:	f7ff ff23 	bl	1379c <handle_event>
	net_buf_unref(buf);
   13956:	e79a      	b.n	1388e <rx_work_handler+0x72>
	switch (bt_buf_get_type(buf)) {
   13958:	9303      	str	r3, [sp, #12]
		LOG_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   1395a:	4b11      	ldr	r3, [pc, #68]	; (139a0 <rx_work_handler+0x184>)
   1395c:	9302      	str	r3, [sp, #8]
   1395e:	2300      	movs	r3, #0
   13960:	e9cd 3300 	strd	r3, r3, [sp]
   13964:	4906      	ldr	r1, [pc, #24]	; (13980 <rx_work_handler+0x164>)
   13966:	2201      	movs	r2, #1
   13968:	4618      	mov	r0, r3
   1396a:	e7a1      	b.n	138b0 <rx_work_handler+0x94>
   1396c:	200004a4 	.word	0x200004a4
   13970:	0002272e 	.word	0x0002272e
   13974:	00022762 	.word	0x00022762
   13978:	0002277b 	.word	0x0002277b
   1397c:	00022798 	.word	0x00022798
   13980:	00021644 	.word	0x00021644
   13984:	000227bc 	.word	0x000227bc
   13988:	20000370 	.word	0x20000370
   1398c:	2000065c 	.word	0x2000065c
   13990:	20001940 	.word	0x20001940
   13994:	00022685 	.word	0x00022685
   13998:	000227de 	.word	0x000227de
   1399c:	00021850 	.word	0x00021850
   139a0:	0002280c 	.word	0x0002280c

000139a4 <hci_le_meta_event>:
{
   139a4:	b510      	push	{r4, lr}
   139a6:	2101      	movs	r1, #1
   139a8:	4604      	mov	r4, r0
   139aa:	300c      	adds	r0, #12
   139ac:	f00c f9ed 	bl	1fd8a <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   139b0:	4621      	mov	r1, r4
   139b2:	4a03      	ldr	r2, [pc, #12]	; (139c0 <hci_le_meta_event+0x1c>)
   139b4:	7800      	ldrb	r0, [r0, #0]
}
   139b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   139ba:	2308      	movs	r3, #8
   139bc:	f7ff beee 	b.w	1379c <handle_event>
   139c0:	00021870 	.word	0x00021870

000139c4 <le_remote_feat_complete>:
{
   139c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   139c6:	68c5      	ldr	r5, [r0, #12]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   139c8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   139cc:	4630      	mov	r0, r6
   139ce:	f002 f809 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   139d2:	4604      	mov	r4, r0
   139d4:	b958      	cbnz	r0, 139ee <le_remote_feat_complete+0x2a>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   139d6:	4b0f      	ldr	r3, [pc, #60]	; (13a14 <le_remote_feat_complete+0x50>)
   139d8:	490f      	ldr	r1, [pc, #60]	; (13a18 <le_remote_feat_complete+0x54>)
   139da:	9603      	str	r6, [sp, #12]
   139dc:	e9cd 0301 	strd	r0, r3, [sp, #4]
   139e0:	9000      	str	r0, [sp, #0]
   139e2:	4603      	mov	r3, r0
   139e4:	2201      	movs	r2, #1
   139e6:	f00a ff76 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   139ea:	b004      	add	sp, #16
   139ec:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   139ee:	782b      	ldrb	r3, [r5, #0]
   139f0:	b923      	cbnz	r3, 139fc <le_remote_feat_complete+0x38>
		memcpy(conn->le.features, evt->features,
   139f2:	2208      	movs	r2, #8
   139f4:	1ce9      	adds	r1, r5, #3
   139f6:	30ac      	adds	r0, #172	; 0xac
   139f8:	f00a fec2 	bl	1e780 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   139fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   13a00:	1d20      	adds	r0, r4, #4
   13a02:	f00a ff59 	bl	1e8b8 <atomic_or>
	bt_conn_unref(conn);
   13a06:	4620      	mov	r0, r4
}
   13a08:	b004      	add	sp, #16
   13a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13a0e:	f00b b8e3 	b.w	1ebd8 <bt_conn_unref>
   13a12:	bf00      	nop
   13a14:	00022661 	.word	0x00022661
   13a18:	00021644 	.word	0x00021644

00013a1c <hci_cmd_done>:
{
   13a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a20:	4606      	mov	r6, r0
   13a22:	b088      	sub	sp, #32
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13a24:	7a90      	ldrb	r0, [r2, #10]
   13a26:	4d3f      	ldr	r5, [pc, #252]	; (13b24 <hci_cmd_done+0x108>)
{
   13a28:	460f      	mov	r7, r1
   13a2a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13a2c:	f004 fbe6 	bl	181fc <net_buf_pool_get>
   13a30:	4285      	cmp	r5, r0
   13a32:	d014      	beq.n	13a5e <hci_cmd_done+0x42>
		LOG_WRN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p", opcode,
   13a34:	7aa4      	ldrb	r4, [r4, #10]
   13a36:	4620      	mov	r0, r4
   13a38:	f004 fbe0 	bl	181fc <net_buf_pool_get>
   13a3c:	4b3a      	ldr	r3, [pc, #232]	; (13b28 <hci_cmd_done+0x10c>)
   13a3e:	9302      	str	r3, [sp, #8]
   13a40:	2300      	movs	r3, #0
   13a42:	e9cd 0505 	strd	r0, r5, [sp, #20]
   13a46:	e9cd 6403 	strd	r6, r4, [sp, #12]
   13a4a:	e9cd 3300 	strd	r3, r3, [sp]
   13a4e:	4937      	ldr	r1, [pc, #220]	; (13b2c <hci_cmd_done+0x110>)
   13a50:	2202      	movs	r2, #2
   13a52:	4618      	mov	r0, r3
   13a54:	f00a ff3f 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   13a58:	b008      	add	sp, #32
   13a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cmd(buf)->opcode != opcode) {
   13a5e:	4620      	mov	r0, r4
   13a60:	f004 fbd4 	bl	1820c <net_buf_id>
   13a64:	4d32      	ldr	r5, [pc, #200]	; (13b30 <hci_cmd_done+0x114>)
   13a66:	f04f 080c 	mov.w	r8, #12
   13a6a:	fb08 5000 	mla	r0, r8, r0, r5
   13a6e:	8843      	ldrh	r3, [r0, #2]
   13a70:	42b3      	cmp	r3, r6
   13a72:	d012      	beq.n	13a9a <hci_cmd_done+0x7e>
		LOG_WRN("OpCode 0x%04x completed instead of expected 0x%04x", opcode,
   13a74:	4620      	mov	r0, r4
   13a76:	f004 fbc9 	bl	1820c <net_buf_id>
   13a7a:	fb08 5000 	mla	r0, r8, r0, r5
   13a7e:	492b      	ldr	r1, [pc, #172]	; (13b2c <hci_cmd_done+0x110>)
   13a80:	8843      	ldrh	r3, [r0, #2]
   13a82:	e9cd 6303 	strd	r6, r3, [sp, #12]
   13a86:	4b2b      	ldr	r3, [pc, #172]	; (13b34 <hci_cmd_done+0x118>)
   13a88:	9302      	str	r3, [sp, #8]
   13a8a:	2300      	movs	r3, #0
   13a8c:	e9cd 3300 	strd	r3, r3, [sp]
   13a90:	2202      	movs	r2, #2
   13a92:	4618      	mov	r0, r3
   13a94:	f00a ff1f 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return;
   13a98:	e7de      	b.n	13a58 <hci_cmd_done+0x3c>
	if (bt_dev.sent_cmd) {
   13a9a:	4e27      	ldr	r6, [pc, #156]	; (13b38 <hci_cmd_done+0x11c>)
   13a9c:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   13aa0:	b120      	cbz	r0, 13aac <hci_cmd_done+0x90>
		net_buf_unref(bt_dev.sent_cmd);
   13aa2:	f004 fc6d 	bl	18380 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   13aa6:	2300      	movs	r3, #0
   13aa8:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   13aac:	4620      	mov	r0, r4
   13aae:	f004 fbad 	bl	1820c <net_buf_id>
   13ab2:	260c      	movs	r6, #12
   13ab4:	fb06 5000 	mla	r0, r6, r0, r5
   13ab8:	6843      	ldr	r3, [r0, #4]
   13aba:	b19b      	cbz	r3, 13ae4 <hci_cmd_done+0xc8>
   13abc:	b997      	cbnz	r7, 13ae4 <hci_cmd_done+0xc8>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13abe:	4620      	mov	r0, r4
   13ac0:	f004 fba4 	bl	1820c <net_buf_id>
   13ac4:	fb06 5000 	mla	r0, r6, r0, r5
 * @param bit Bit number (starting from 0).
 * @param val true for 1, false for 0.
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13ac8:	2101      	movs	r1, #1
   13aca:	6842      	ldr	r2, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
   13acc:	e9d2 0300 	ldrd	r0, r3, [r2]

	if (val) {
   13ad0:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13ad2:	f003 061f 	and.w	r6, r3, #31
   13ad6:	40b1      	lsls	r1, r6
	if (val) {
   13ad8:	095b      	lsrs	r3, r3, #5
   13ada:	b1e2      	cbz	r2, 13b16 <hci_cmd_done+0xfa>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13adc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13ae0:	f00a feea 	bl	1e8b8 <atomic_or>
	if (cmd(buf)->sync) {
   13ae4:	4620      	mov	r0, r4
   13ae6:	f004 fb91 	bl	1820c <net_buf_id>
   13aea:	260c      	movs	r6, #12
   13aec:	fb06 5000 	mla	r0, r6, r0, r5
   13af0:	6883      	ldr	r3, [r0, #8]
   13af2:	2b00      	cmp	r3, #0
   13af4:	d0b0      	beq.n	13a58 <hci_cmd_done+0x3c>
		cmd(buf)->status = status;
   13af6:	4620      	mov	r0, r4
   13af8:	f004 fb88 	bl	1820c <net_buf_id>
   13afc:	4370      	muls	r0, r6
   13afe:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13b00:	4620      	mov	r0, r4
   13b02:	f004 fb83 	bl	1820c <net_buf_id>
   13b06:	fb06 5500 	mla	r5, r6, r0, r5
   13b0a:	68a8      	ldr	r0, [r5, #8]
}
   13b0c:	b008      	add	sp, #32
   13b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   13b12:	f008 bc6f 	b.w	1c3f4 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13b16:	43c9      	mvns	r1, r1
   13b18:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   13b1c:	f00a feea 	bl	1e8f4 <atomic_and.isra.0>
   13b20:	e7e0      	b.n	13ae4 <hci_cmd_done+0xc8>
   13b22:	bf00      	nop
   13b24:	20000980 	.word	0x20000980
   13b28:	00022820 	.word	0x00022820
   13b2c:	00021644 	.word	0x00021644
   13b30:	20002520 	.word	0x20002520
   13b34:	00022855 	.word	0x00022855
   13b38:	20000370 	.word	0x20000370

00013b3c <hci_cmd_status>:
{
   13b3c:	b538      	push	{r3, r4, r5, lr}
   13b3e:	2104      	movs	r1, #4
   13b40:	4604      	mov	r4, r0
   13b42:	300c      	adds	r0, #12
   13b44:	f00c f921 	bl	1fd8a <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13b48:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13b4a:	7801      	ldrb	r1, [r0, #0]
   13b4c:	8840      	ldrh	r0, [r0, #2]
   13b4e:	4622      	mov	r2, r4
   13b50:	f7ff ff64 	bl	13a1c <hci_cmd_done>
	if (ncmd) {
   13b54:	b125      	cbz	r5, 13b60 <hci_cmd_status+0x24>
   13b56:	4803      	ldr	r0, [pc, #12]	; (13b64 <hci_cmd_status+0x28>)
}
   13b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13b5c:	f008 bc4a 	b.w	1c3f4 <z_impl_k_sem_give>
   13b60:	bd38      	pop	{r3, r4, r5, pc}
   13b62:	bf00      	nop
   13b64:	20000488 	.word	0x20000488

00013b68 <hci_cmd_complete>:
{
   13b68:	b538      	push	{r3, r4, r5, lr}
   13b6a:	2103      	movs	r1, #3
   13b6c:	4604      	mov	r4, r0
   13b6e:	300c      	adds	r0, #12
   13b70:	f00c f90b 	bl	1fd8a <net_buf_simple_pull_mem>
	status = buf->data[0];
   13b74:	68e3      	ldr	r3, [r4, #12]
	ncmd = evt->ncmd;
   13b76:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13b78:	7819      	ldrb	r1, [r3, #0]
   13b7a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13b7e:	4622      	mov	r2, r4
   13b80:	f7ff ff4c 	bl	13a1c <hci_cmd_done>
	if (ncmd) {
   13b84:	b125      	cbz	r5, 13b90 <hci_cmd_complete+0x28>
   13b86:	4803      	ldr	r0, [pc, #12]	; (13b94 <hci_cmd_complete+0x2c>)
}
   13b88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13b8c:	f008 bc32 	b.w	1c3f4 <z_impl_k_sem_give>
   13b90:	bd38      	pop	{r3, r4, r5, pc}
   13b92:	bf00      	nop
   13b94:	20000488 	.word	0x20000488

00013b98 <hci_num_completed_packets>:
{
   13b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
   13b9c:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13b9e:	68c7      	ldr	r7, [r0, #12]
				LOG_ERR("packets count mismatch");
   13ba0:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 13c8c <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
   13ba4:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
   13ba6:	783b      	ldrb	r3, [r7, #0]
   13ba8:	429d      	cmp	r5, r3
   13baa:	db02      	blt.n	13bb2 <hci_num_completed_packets+0x1a>
}
   13bac:	b004      	add	sp, #16
   13bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13bb2:	eb07 0385 	add.w	r3, r7, r5, lsl #2
   13bb6:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13bba:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13bbe:	4650      	mov	r0, sl
   13bc0:	f001 ff10 	bl	159e4 <bt_conn_lookup_handle>
		if (!conn) {
   13bc4:	4604      	mov	r4, r0
   13bc6:	b1d8      	cbz	r0, 13c00 <hci_num_completed_packets+0x68>
			k_work_submit(&conn->tx_complete_work);
   13bc8:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
   13bcc:	2e00      	cmp	r6, #0
   13bce:	d032      	beq.n	13c36 <hci_num_completed_packets+0x9e>
	__asm__ volatile(
   13bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
   13bd4:	f3ef 8211 	mrs	r2, BASEPRI
   13bd8:	f383 8812 	msr	BASEPRI_MAX, r3
   13bdc:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13be0:	69e3      	ldr	r3, [r4, #28]
   13be2:	b1d3      	cbz	r3, 13c1a <hci_num_completed_packets+0x82>
				conn->pending_no_cb--;
   13be4:	3b01      	subs	r3, #1
   13be6:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13be8:	f382 8811 	msr	BASEPRI, r2
   13bec:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   13bf0:	4620      	mov	r0, r4
   13bf2:	f001 fd87 	bl	15704 <bt_conn_get_pkts>
   13bf6:	3e01      	subs	r6, #1
   13bf8:	f008 fbfc 	bl	1c3f4 <z_impl_k_sem_give>
   13bfc:	b2b6      	uxth	r6, r6
   13bfe:	e7e5      	b.n	13bcc <hci_num_completed_packets+0x34>
			LOG_ERR("No connection for handle %u", handle);
   13c00:	4b23      	ldr	r3, [pc, #140]	; (13c90 <hci_num_completed_packets+0xf8>)
   13c02:	4924      	ldr	r1, [pc, #144]	; (13c94 <hci_num_completed_packets+0xfc>)
   13c04:	f8cd a00c 	str.w	sl, [sp, #12]
   13c08:	e9cd 0301 	strd	r0, r3, [sp, #4]
   13c0c:	9000      	str	r0, [sp, #0]
   13c0e:	4603      	mov	r3, r0
   13c10:	2201      	movs	r2, #1
   13c12:	f00a fe60 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
   13c16:	3501      	adds	r5, #1
   13c18:	e7c5      	b.n	13ba6 <hci_num_completed_packets+0xe>
   13c1a:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13c1c:	b97b      	cbnz	r3, 13c3e <hci_num_completed_packets+0xa6>
   13c1e:	f382 8811 	msr	BASEPRI, r2
   13c22:	f3bf 8f6f 	isb	sy
				LOG_ERR("packets count mismatch");
   13c26:	491b      	ldr	r1, [pc, #108]	; (13c94 <hci_num_completed_packets+0xfc>)
   13c28:	9300      	str	r3, [sp, #0]
   13c2a:	e9cd 3901 	strd	r3, r9, [sp, #4]
   13c2e:	2201      	movs	r2, #1
   13c30:	4618      	mov	r0, r3
   13c32:	f00a fe50 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		bt_conn_unref(conn);
   13c36:	4620      	mov	r0, r4
   13c38:	f00a ffce 	bl	1ebd8 <bt_conn_unref>
   13c3c:	e7eb      	b.n	13c16 <hci_num_completed_packets+0x7e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13c3e:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   13c40:	6819      	ldr	r1, [r3, #0]
	list->head = node;
   13c42:	6161      	str	r1, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13c44:	4283      	cmp	r3, r0
	list->tail = node;
   13c46:	bf08      	it	eq
   13c48:	61a1      	streq	r1, [r4, #24]
   13c4a:	f382 8811 	msr	BASEPRI, r2
   13c4e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   13c52:	f04f 0240 	mov.w	r2, #64	; 0x40
   13c56:	f3ef 8111 	mrs	r1, BASEPRI
   13c5a:	f382 8812 	msr	BASEPRI_MAX, r2
   13c5e:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13c62:	68da      	ldr	r2, [r3, #12]
   13c64:	61e2      	str	r2, [r4, #28]
			tx->pending_no_cb = 0U;
   13c66:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
   13c6a:	f8c3 8000 	str.w	r8, [r3]
	return list->tail;
   13c6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
Z_GENLIST_APPEND(slist, snode)
   13c70:	b94a      	cbnz	r2, 13c86 <hci_num_completed_packets+0xee>
	list->head = node;
   13c72:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   13c76:	f381 8811 	msr	BASEPRI, r1
   13c7a:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   13c7e:	4650      	mov	r0, sl
   13c80:	f008 fd34 	bl	1c6ec <k_work_submit>
   13c84:	e7b4      	b.n	13bf0 <hci_num_completed_packets+0x58>
	parent->next = child;
   13c86:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13c88:	6263      	str	r3, [r4, #36]	; 0x24
}
   13c8a:	e7f4      	b.n	13c76 <hci_num_completed_packets+0xde>
   13c8c:	000228a4 	.word	0x000228a4
   13c90:	00022888 	.word	0x00022888
   13c94:	00021644 	.word	0x00021644

00013c98 <bt_hci_cmd_state_set_init>:
{
   13c98:	b510      	push	{r4, lr}
	state->bit = bit;
   13c9a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13c9e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13ca2:	720b      	strb	r3, [r1, #8]
{
   13ca4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13ca6:	f004 fab1 	bl	1820c <net_buf_id>
   13caa:	4b03      	ldr	r3, [pc, #12]	; (13cb8 <bt_hci_cmd_state_set_init+0x20>)
   13cac:	220c      	movs	r2, #12
   13cae:	fb02 3300 	mla	r3, r2, r0, r3
   13cb2:	605c      	str	r4, [r3, #4]
}
   13cb4:	bd10      	pop	{r4, pc}
   13cb6:	bf00      	nop
   13cb8:	20002520 	.word	0x20002520

00013cbc <bt_hci_cmd_create>:
{
   13cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13cc0:	f04f 32ff 	mov.w	r2, #4294967295
   13cc4:	f04f 33ff 	mov.w	r3, #4294967295
   13cc8:	4606      	mov	r6, r0
   13cca:	4817      	ldr	r0, [pc, #92]	; (13d28 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   13ccc:	4d17      	ldr	r5, [pc, #92]	; (13d2c <bt_hci_cmd_create+0x70>)
{
   13cce:	460f      	mov	r7, r1
   13cd0:	f00b ffdc 	bl	1fc8c <net_buf_alloc_fixed>
   13cd4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13cd6:	f100 0a0c 	add.w	sl, r0, #12
   13cda:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13cdc:	f04f 0800 	mov.w	r8, #0
   13ce0:	4650      	mov	r0, sl
   13ce2:	f00b ffda 	bl	1fc9a <net_buf_simple_reserve>
   13ce6:	f884 8018 	strb.w	r8, [r4, #24]
	cmd(buf)->opcode = opcode;
   13cea:	4620      	mov	r0, r4
   13cec:	f004 fa8e 	bl	1820c <net_buf_id>
   13cf0:	f04f 090c 	mov.w	r9, #12
   13cf4:	fb09 5000 	mla	r0, r9, r0, r5
   13cf8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13cfa:	4620      	mov	r0, r4
   13cfc:	f004 fa86 	bl	1820c <net_buf_id>
   13d00:	fb09 5000 	mla	r0, r9, r0, r5
   13d04:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13d08:	4620      	mov	r0, r4
   13d0a:	f004 fa7f 	bl	1820c <net_buf_id>
   13d0e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13d12:	2103      	movs	r1, #3
   13d14:	f8c5 8004 	str.w	r8, [r5, #4]
   13d18:	4650      	mov	r0, sl
   13d1a:	f00c f817 	bl	1fd4c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
   13d1e:	8006      	strh	r6, [r0, #0]
	hdr->param_len = param_len;
   13d20:	7087      	strb	r7, [r0, #2]
}
   13d22:	4620      	mov	r0, r4
   13d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13d28:	20000980 	.word	0x20000980
   13d2c:	20002520 	.word	0x20002520

00013d30 <bt_hci_cmd_send_sync>:
{
   13d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d34:	4607      	mov	r7, r0
   13d36:	b08c      	sub	sp, #48	; 0x30
   13d38:	4615      	mov	r5, r2
	if (!buf) {
   13d3a:	460c      	mov	r4, r1
   13d3c:	b921      	cbnz	r1, 13d48 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   13d3e:	f7ff ffbd 	bl	13cbc <bt_hci_cmd_create>
		if (!buf) {
   13d42:	4604      	mov	r4, r0
   13d44:	2800      	cmp	r0, #0
   13d46:	d056      	beq.n	13df6 <bt_hci_cmd_send_sync+0xc6>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13d48:	ae06      	add	r6, sp, #24
   13d4a:	2201      	movs	r2, #1
   13d4c:	2100      	movs	r1, #0
   13d4e:	4630      	mov	r0, r6
   13d50:	f00c fee7 	bl	20b22 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13d54:	4620      	mov	r0, r4
   13d56:	f004 fa59 	bl	1820c <net_buf_id>
   13d5a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 13dfc <bt_hci_cmd_send_sync+0xcc>
   13d5e:	230c      	movs	r3, #12
   13d60:	fb03 8000 	mla	r0, r3, r0, r8
   13d64:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   13d66:	4620      	mov	r0, r4
   13d68:	f00b ffca 	bl	1fd00 <net_buf_ref>
   13d6c:	4601      	mov	r1, r0
   13d6e:	4824      	ldr	r0, [pc, #144]	; (13e00 <bt_hci_cmd_send_sync+0xd0>)
   13d70:	f00b ffc4 	bl	1fcfc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13d74:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13d78:	4630      	mov	r0, r6
   13d7a:	2300      	movs	r3, #0
   13d7c:	f008 fb60 	bl	1c440 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13d80:	4606      	mov	r6, r0
   13d82:	b180      	cbz	r0, 13da6 <bt_hci_cmd_send_sync+0x76>
   13d84:	4a1f      	ldr	r2, [pc, #124]	; (13e04 <bt_hci_cmd_send_sync+0xd4>)
   13d86:	4920      	ldr	r1, [pc, #128]	; (13e08 <bt_hci_cmd_send_sync+0xd8>)
   13d88:	4820      	ldr	r0, [pc, #128]	; (13e0c <bt_hci_cmd_send_sync+0xdc>)
   13d8a:	f240 1349 	movw	r3, #329	; 0x149
   13d8e:	f00a f9ca 	bl	1e126 <assert_print>
   13d92:	481f      	ldr	r0, [pc, #124]	; (13e10 <bt_hci_cmd_send_sync+0xe0>)
   13d94:	4631      	mov	r1, r6
   13d96:	f00a f9c6 	bl	1e126 <assert_print>
   13d9a:	4040      	eors	r0, r0
   13d9c:	f380 8811 	msr	BASEPRI, r0
   13da0:	f04f 0003 	mov.w	r0, #3
   13da4:	df02      	svc	2
	status = cmd(buf)->status;
   13da6:	4620      	mov	r0, r4
   13da8:	f004 fa30 	bl	1820c <net_buf_id>
   13dac:	230c      	movs	r3, #12
   13dae:	4358      	muls	r0, r3
   13db0:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   13db4:	b1be      	cbz	r6, 13de6 <bt_hci_cmd_send_sync+0xb6>
		LOG_WRN("opcode 0x%04x status 0x%02x", opcode, status);
   13db6:	4b17      	ldr	r3, [pc, #92]	; (13e14 <bt_hci_cmd_send_sync+0xe4>)
   13db8:	9302      	str	r3, [sp, #8]
   13dba:	2300      	movs	r3, #0
   13dbc:	4618      	mov	r0, r3
   13dbe:	e9cd 3300 	strd	r3, r3, [sp]
   13dc2:	4915      	ldr	r1, [pc, #84]	; (13e18 <bt_hci_cmd_send_sync+0xe8>)
   13dc4:	2202      	movs	r2, #2
   13dc6:	e9cd 7603 	strd	r7, r6, [sp, #12]
   13dca:	f00a fd84 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   13dce:	4620      	mov	r0, r4
   13dd0:	f004 fad6 	bl	18380 <net_buf_unref>
			return -ECONNREFUSED;
   13dd4:	2e09      	cmp	r6, #9
   13dd6:	bf14      	ite	ne
   13dd8:	f06f 0004 	mvnne.w	r0, #4
   13ddc:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
}
   13de0:	b00c      	add	sp, #48	; 0x30
   13de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   13de6:	b115      	cbz	r5, 13dee <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   13de8:	602c      	str	r4, [r5, #0]
	return 0;
   13dea:	2000      	movs	r0, #0
   13dec:	e7f8      	b.n	13de0 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   13dee:	4620      	mov	r0, r4
   13df0:	f004 fac6 	bl	18380 <net_buf_unref>
   13df4:	e7f9      	b.n	13dea <bt_hci_cmd_send_sync+0xba>
			return -ENOBUFS;
   13df6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13dfa:	e7f1      	b.n	13de0 <bt_hci_cmd_send_sync+0xb0>
   13dfc:	20002520 	.word	0x20002520
   13e00:	200004ac 	.word	0x200004ac
   13e04:	0002272e 	.word	0x0002272e
   13e08:	000228bb 	.word	0x000228bb
   13e0c:	0002277b 	.word	0x0002277b
   13e10:	000228c4 	.word	0x000228c4
   13e14:	000228e4 	.word	0x000228e4
   13e18:	00021644 	.word	0x00021644

00013e1c <hci_le_read_max_data_len>:
{
   13e1c:	b570      	push	{r4, r5, r6, lr}
   13e1e:	b086      	sub	sp, #24
   13e20:	4606      	mov	r6, r0
   13e22:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13e24:	aa05      	add	r2, sp, #20
   13e26:	2100      	movs	r1, #0
   13e28:	f242 002f 	movw	r0, #8239	; 0x202f
   13e2c:	f7ff ff80 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   13e30:	4604      	mov	r4, r0
   13e32:	b160      	cbz	r0, 13e4e <hci_le_read_max_data_len+0x32>
		LOG_ERR("Failed to read DLE max data len");
   13e34:	4b0b      	ldr	r3, [pc, #44]	; (13e64 <hci_le_read_max_data_len+0x48>)
   13e36:	9302      	str	r3, [sp, #8]
   13e38:	2300      	movs	r3, #0
   13e3a:	e9cd 3300 	strd	r3, r3, [sp]
   13e3e:	490a      	ldr	r1, [pc, #40]	; (13e68 <hci_le_read_max_data_len+0x4c>)
   13e40:	2201      	movs	r2, #1
   13e42:	4618      	mov	r0, r3
   13e44:	f00a fd47 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   13e48:	4620      	mov	r0, r4
   13e4a:	b006      	add	sp, #24
   13e4c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   13e4e:	9805      	ldr	r0, [sp, #20]
   13e50:	68c3      	ldr	r3, [r0, #12]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13e52:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13e56:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13e58:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   13e5c:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   13e5e:	f004 fa8f 	bl	18380 <net_buf_unref>
	return 0;
   13e62:	e7f1      	b.n	13e48 <hci_le_read_max_data_len+0x2c>
   13e64:	00022900 	.word	0x00022900
   13e68:	00021644 	.word	0x00021644

00013e6c <bt_hci_le_rand>:
{
   13e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13e6e:	4b14      	ldr	r3, [pc, #80]	; (13ec0 <bt_hci_le_rand+0x54>)
   13e70:	f993 3093 	ldrsb.w	r3, [r3, #147]	; 0x93
   13e74:	2b00      	cmp	r3, #0
{
   13e76:	4605      	mov	r5, r0
   13e78:	460c      	mov	r4, r1
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 7)) {
   13e7a:	da1d      	bge.n	13eb8 <bt_hci_le_rand+0x4c>
	while (len > 0) {
   13e7c:	b914      	cbnz	r4, 13e84 <bt_hci_le_rand+0x18>
	return 0;
   13e7e:	4620      	mov	r0, r4
}
   13e80:	b003      	add	sp, #12
   13e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		count = MIN(len, sizeof(rp->rand));
   13e84:	2c08      	cmp	r4, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13e86:	aa01      	add	r2, sp, #4
   13e88:	f04f 0100 	mov.w	r1, #0
   13e8c:	f242 0018 	movw	r0, #8216	; 0x2018
		count = MIN(len, sizeof(rp->rand));
   13e90:	4626      	mov	r6, r4
   13e92:	bf28      	it	cs
   13e94:	2608      	movcs	r6, #8
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_RAND, NULL, &rsp);
   13e96:	f7ff ff4b 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   13e9a:	2800      	cmp	r0, #0
   13e9c:	d1f0      	bne.n	13e80 <bt_hci_le_rand+0x14>
		rp = (void *)rsp->data;
   13e9e:	9f01      	ldr	r7, [sp, #4]
		memcpy(buffer, rp->rand, count);
   13ea0:	68f9      	ldr	r1, [r7, #12]
   13ea2:	4632      	mov	r2, r6
   13ea4:	3101      	adds	r1, #1
   13ea6:	4628      	mov	r0, r5
   13ea8:	f00a fc6a 	bl	1e780 <memcpy>
		net_buf_unref(rsp);
   13eac:	4638      	mov	r0, r7
   13eae:	f004 fa67 	bl	18380 <net_buf_unref>
		buffer = (uint8_t *)buffer + count;
   13eb2:	4435      	add	r5, r6
		len -= count;
   13eb4:	1ba4      	subs	r4, r4, r6
   13eb6:	e7e1      	b.n	13e7c <bt_hci_le_rand+0x10>
		return -ENOTSUP;
   13eb8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   13ebc:	e7e0      	b.n	13e80 <bt_hci_le_rand+0x14>
   13ebe:	bf00      	nop
   13ec0:	20000370 	.word	0x20000370

00013ec4 <bt_le_create_conn>:
{
   13ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13ec8:	4606      	mov	r6, r0
   13eca:	b087      	sub	sp, #28
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   13ecc:	3004      	adds	r0, #4
   13ece:	f00a fcea 	bl	1e8a6 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   13ed2:	f000 0801 	and.w	r8, r0, #1
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   13ed6:	f10d 010b 	add.w	r1, sp, #11
   13eda:	4640      	mov	r0, r8
   13edc:	f001 f8b4 	bl	15048 <bt_id_set_create_conn_own_addr>
	if (err) {
   13ee0:	4605      	mov	r5, r0
   13ee2:	2800      	cmp	r0, #0
   13ee4:	d143      	bne.n	13f6e <bt_le_create_conn+0xaa>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   13ee6:	2119      	movs	r1, #25
   13ee8:	f242 000d 	movw	r0, #8205	; 0x200d
   13eec:	f7ff fee6 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   13ef0:	4607      	mov	r7, r0
   13ef2:	2800      	cmp	r0, #0
   13ef4:	d04f      	beq.n	13f96 <bt_le_create_conn+0xd2>
   13ef6:	2119      	movs	r1, #25
   13ef8:	300c      	adds	r0, #12
   13efa:	f00b ff27 	bl	1fd4c <net_buf_simple_add>
	memset(cp, 0, sizeof(*cp));
   13efe:	2219      	movs	r2, #25
   13f00:	4604      	mov	r4, r0
   13f02:	4629      	mov	r1, r5
   13f04:	f00a fc47 	bl	1e796 <memset>
	cp->own_addr_type = own_addr_type;
   13f08:	f89d 300b 	ldrb.w	r3, [sp, #11]
   13f0c:	7323      	strb	r3, [r4, #12]
	if (use_filter) {
   13f0e:	f104 0905 	add.w	r9, r4, #5
   13f12:	f1b8 0f00 	cmp.w	r8, #0
   13f16:	d02e      	beq.n	13f76 <bt_le_create_conn+0xb2>
		bt_addr_le_copy(&cp->peer_addr, BT_ADDR_LE_ANY);
   13f18:	4920      	ldr	r1, [pc, #128]	; (13f9c <bt_le_create_conn+0xd8>)
   13f1a:	4648      	mov	r0, r9
   13f1c:	f00a fcc9 	bl	1e8b2 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   13f20:	2301      	movs	r3, #1
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   13f22:	4a1f      	ldr	r2, [pc, #124]	; (13fa0 <bt_le_create_conn+0xdc>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_FILTER;
   13f24:	7123      	strb	r3, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   13f26:	8993      	ldrh	r3, [r2, #12]
   13f28:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   13f2a:	89d3      	ldrh	r3, [r2, #14]
   13f2c:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   13f2e:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
   13f32:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   13f36:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
   13f3a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   13f3e:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
   13f42:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   13f46:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
   13f4a:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   13f4e:	2301      	movs	r3, #1
   13f50:	9300      	str	r3, [sp, #0]
   13f52:	230c      	movs	r3, #12
   13f54:	eb0d 0103 	add.w	r1, sp, r3
   13f58:	32cc      	adds	r2, #204	; 0xcc
   13f5a:	4638      	mov	r0, r7
   13f5c:	f7ff fe9c 	bl	13c98 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   13f60:	2200      	movs	r2, #0
   13f62:	4639      	mov	r1, r7
   13f64:	f242 000d 	movw	r0, #8205	; 0x200d
   13f68:	f7ff fee2 	bl	13d30 <bt_hci_cmd_send_sync>
   13f6c:	4605      	mov	r5, r0
}
   13f6e:	4628      	mov	r0, r5
   13f70:	b007      	add	sp, #28
   13f72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_addr_le_eq(&conn->le.resp_addr, BT_ADDR_LE_ANY)) {
   13f76:	f106 0596 	add.w	r5, r6, #150	; 0x96
	return memcmp(a, b, sizeof(*a));
   13f7a:	4908      	ldr	r1, [pc, #32]	; (13f9c <bt_le_create_conn+0xd8>)
   13f7c:	2207      	movs	r2, #7
   13f7e:	4628      	mov	r0, r5
   13f80:	f00a fbee 	bl	1e760 <memcmp>
   13f84:	b908      	cbnz	r0, 13f8a <bt_le_create_conn+0xc6>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
   13f86:	f106 0588 	add.w	r5, r6, #136	; 0x88
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   13f8a:	4629      	mov	r1, r5
   13f8c:	4648      	mov	r0, r9
   13f8e:	f00a fc90 	bl	1e8b2 <bt_addr_le_copy>
   13f92:	2300      	movs	r3, #0
   13f94:	e7c5      	b.n	13f22 <bt_le_create_conn+0x5e>
		return -ENOBUFS;
   13f96:	f06f 0568 	mvn.w	r5, #104	; 0x68
   13f9a:	e7e8      	b.n	13f6e <bt_le_create_conn+0xaa>
   13f9c:	000225d1 	.word	0x000225d1
   13fa0:	20000370 	.word	0x20000370

00013fa4 <bt_le_create_conn_cancel>:
{
   13fa4:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13fa6:	2100      	movs	r1, #0
{
   13fa8:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13faa:	f242 000e 	movw	r0, #8206	; 0x200e
   13fae:	f7ff fe85 	bl	13cbc <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   13fb2:	2500      	movs	r5, #0
   13fb4:	230c      	movs	r3, #12
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   13fb6:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
   13fb8:	eb0d 0103 	add.w	r1, sp, r3
   13fbc:	4a05      	ldr	r2, [pc, #20]	; (13fd4 <bt_le_create_conn_cancel+0x30>)
   13fbe:	9500      	str	r5, [sp, #0]
   13fc0:	f7ff fe6a 	bl	13c98 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   13fc4:	462a      	mov	r2, r5
   13fc6:	4621      	mov	r1, r4
   13fc8:	f242 000e 	movw	r0, #8206	; 0x200e
   13fcc:	f7ff feb0 	bl	13d30 <bt_hci_cmd_send_sync>
}
   13fd0:	b007      	add	sp, #28
   13fd2:	bd30      	pop	{r4, r5, pc}
   13fd4:	2000043c 	.word	0x2000043c

00013fd8 <bt_hci_le_enh_conn_complete>:
{
   13fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13fdc:	f8b0 8001 	ldrh.w	r8, [r0, #1]
		if (disconnected_handles[i] == handle) {
   13fe0:	4a9d      	ldr	r2, [pc, #628]	; (14258 <bt_hci_le_enh_conn_complete+0x280>)
	handle |= ~BT_ACL_HANDLE_MASK;
   13fe2:	ea6f 5308 	mvn.w	r3, r8, lsl #20
		if (disconnected_handles[i] == handle) {
   13fe6:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   13fe8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   13fec:	b29b      	uxth	r3, r3
   13fee:	4299      	cmp	r1, r3
   13ff0:	f04f 0700 	mov.w	r7, #0
			disconnected_handles[i] = 0;
   13ff4:	bf08      	it	eq
   13ff6:	8017      	strheq	r7, [r2, #0]
	if (evt->status) {
   13ff8:	7806      	ldrb	r6, [r0, #0]
{
   13ffa:	b08a      	sub	sp, #40	; 0x28
   13ffc:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13ffe:	fa1f f988 	uxth.w	r9, r8
			return true;
   14002:	bf08      	it	eq
   14004:	2701      	moveq	r7, #1
	if (evt->status) {
   14006:	b396      	cbz	r6, 1406e <bt_hci_le_enh_conn_complete+0x96>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14008:	2e02      	cmp	r6, #2
   1400a:	d124      	bne.n	14056 <bt_hci_le_enh_conn_complete+0x7e>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   1400c:	2000      	movs	r0, #0
   1400e:	f7ff fab7 	bl	13580 <find_pending_connect.part.0>
	if (!conn) {
   14012:	4604      	mov	r4, r0
   14014:	b970      	cbnz	r0, 14034 <bt_hci_le_enh_conn_complete+0x5c>
		LOG_ERR("No pending central connection");
   14016:	4b91      	ldr	r3, [pc, #580]	; (1425c <bt_hci_le_enh_conn_complete+0x284>)
   14018:	4991      	ldr	r1, [pc, #580]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   1401a:	9000      	str	r0, [sp, #0]
   1401c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14020:	2201      	movs	r2, #1
   14022:	4603      	mov	r3, r0
   14024:	f00a fc57 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
			bt_le_scan_update(false);
   14028:	2000      	movs	r0, #0
   1402a:	f001 f903 	bl	15234 <bt_le_scan_update>
}
   1402e:	b00a      	add	sp, #40	; 0x28
   14030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   14034:	7246      	strb	r6, [r0, #9]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14036:	3004      	adds	r0, #4
   14038:	f00a fc35 	bl	1e8a6 <atomic_get>
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1403c:	f010 0101 	ands.w	r1, r0, #1
			bt_le_create_conn(conn);
   14040:	4620      	mov	r0, r4
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   14042:	d005      	beq.n	14050 <bt_hci_le_enh_conn_complete+0x78>
			bt_le_create_conn(conn);
   14044:	f7ff ff3e 	bl	13ec4 <bt_le_create_conn>
	bt_conn_unref(conn);
   14048:	4620      	mov	r0, r4
   1404a:	f00a fdc5 	bl	1ebd8 <bt_conn_unref>
   1404e:	e7eb      	b.n	14028 <bt_hci_le_enh_conn_complete+0x50>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   14050:	f001 fcd0 	bl	159f4 <bt_conn_set_state>
   14054:	e7f8      	b.n	14048 <bt_hci_le_enh_conn_complete+0x70>
		LOG_WRN("Unexpected status 0x%02x", evt->status);
   14056:	4b83      	ldr	r3, [pc, #524]	; (14264 <bt_hci_le_enh_conn_complete+0x28c>)
   14058:	9302      	str	r3, [sp, #8]
   1405a:	2300      	movs	r3, #0
   1405c:	e9cd 3300 	strd	r3, r3, [sp]
   14060:	497f      	ldr	r1, [pc, #508]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   14062:	9603      	str	r6, [sp, #12]
   14064:	2202      	movs	r2, #2
   14066:	4618      	mov	r0, r3
   14068:	f00a fc35 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return;
   1406c:	e7df      	b.n	1402e <bt_hci_le_enh_conn_complete+0x56>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1406e:	7903      	ldrb	r3, [r0, #4]
   14070:	3b02      	subs	r3, #2
   14072:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   14074:	f100 0a04 	add.w	sl, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   14078:	d827      	bhi.n	140ca <bt_hci_le_enh_conn_complete+0xf2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1407a:	4651      	mov	r1, sl
   1407c:	a808      	add	r0, sp, #32
   1407e:	f00a fc18 	bl	1e8b2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   14082:	f89d 3020 	ldrb.w	r3, [sp, #32]
	memcpy(dst, src, sizeof(*dst));
   14086:	2206      	movs	r2, #6
   14088:	3b02      	subs	r3, #2
   1408a:	f105 0111 	add.w	r1, r5, #17
   1408e:	f10d 0019 	add.w	r0, sp, #25
   14092:	f88d 3020 	strb.w	r3, [sp, #32]
   14096:	f00a fb73 	bl	1e780 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   1409a:	2301      	movs	r3, #1
   1409c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   140a0:	78eb      	ldrb	r3, [r5, #3]
   140a2:	b32b      	cbz	r3, 140f0 <bt_hci_le_enh_conn_complete+0x118>
		LOG_ERR("No pending conn for peer %s", bt_addr_le_str(&evt->peer_addr));
   140a4:	4650      	mov	r0, sl
   140a6:	f7ff f8d9 	bl	1325c <bt_addr_le_str>
   140aa:	4b6f      	ldr	r3, [pc, #444]	; (14268 <bt_hci_le_enh_conn_complete+0x290>)
   140ac:	9302      	str	r3, [sp, #8]
   140ae:	2300      	movs	r3, #0
   140b0:	9003      	str	r0, [sp, #12]
   140b2:	e9cd 3300 	strd	r3, r3, [sp]
   140b6:	4618      	mov	r0, r3
   140b8:	4969      	ldr	r1, [pc, #420]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   140ba:	2201      	movs	r2, #1
   140bc:	f00a fc0b 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   140c0:	211f      	movs	r1, #31
   140c2:	4648      	mov	r0, r9
   140c4:	f00a fc22 	bl	1e90c <bt_hci_disconnect>
		return;
   140c8:	e7b1      	b.n	1402e <bt_hci_le_enh_conn_complete+0x56>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   140ca:	78c3      	ldrb	r3, [r0, #3]
   140cc:	2b01      	cmp	r3, #1
   140ce:	bf04      	itt	eq
   140d0:	4b66      	ldreq	r3, [pc, #408]	; (1426c <bt_hci_le_enh_conn_complete+0x294>)
   140d2:	f893 6067 	ldrbeq.w	r6, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   140d6:	4651      	mov	r1, sl
   140d8:	4630      	mov	r0, r6
   140da:	f00a fcb7 	bl	1ea4c <bt_lookup_id_addr>
   140de:	4601      	mov	r1, r0
   140e0:	a808      	add	r0, sp, #32
   140e2:	f00a fbe6 	bl	1e8b2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   140e6:	4651      	mov	r1, sl
   140e8:	a806      	add	r0, sp, #24
   140ea:	f00a fbe2 	bl	1e8b2 <bt_addr_le_copy>
   140ee:	e7d7      	b.n	140a0 <bt_hci_le_enh_conn_complete+0xc8>
   140f0:	a808      	add	r0, sp, #32
   140f2:	f7ff fa45 	bl	13580 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   140f6:	78eb      	ldrb	r3, [r5, #3]
   140f8:	4604      	mov	r4, r0
   140fa:	b923      	cbnz	r3, 14106 <bt_hci_le_enh_conn_complete+0x12e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   140fc:	485c      	ldr	r0, [pc, #368]	; (14270 <bt_hci_le_enh_conn_complete+0x298>)
   140fe:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   14102:	f00a fbf7 	bl	1e8f4 <atomic_and.isra.0>
	if (!conn) {
   14106:	2c00      	cmp	r4, #0
   14108:	d0cc      	beq.n	140a4 <bt_hci_le_enh_conn_complete+0xcc>
	conn->handle = handle;
   1410a:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1410c:	a908      	add	r1, sp, #32
	conn->handle = handle;
   1410e:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   14112:	f00a fbce 	bl	1e8b2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   14116:	f8b5 3017 	ldrh.w	r3, [r5, #23]
   1411a:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1411e:	f8b5 3019 	ldrh.w	r3, [r5, #25]
   14122:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   14126:	f8b5 301b 	ldrh.w	r3, [r5, #27]
   1412a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   1412e:	78eb      	ldrb	r3, [r5, #3]
   14130:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   14132:	2200      	movs	r2, #0
   14134:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14136:	b96b      	cbnz	r3, 14154 <bt_hci_le_enh_conn_complete+0x17c>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   14138:	a906      	add	r1, sp, #24
   1413a:	f104 0096 	add.w	r0, r4, #150	; 0x96
   1413e:	f00a fbb8 	bl	1e8b2 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   14142:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   14144:	4b49      	ldr	r3, [pc, #292]	; (1426c <bt_hci_le_enh_conn_complete+0x294>)
					&bt_dev.id_addr[conn->id]);
   14146:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1414a:	4419      	add	r1, r3
   1414c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   14150:	f00a fbaf 	bl	1e8b2 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14154:	2107      	movs	r1, #7
   14156:	4620      	mov	r0, r4
   14158:	f001 fc4c 	bl	159f4 <bt_conn_set_state>
	if (is_disconnected) {
   1415c:	b11f      	cbz	r7, 14166 <bt_hci_le_enh_conn_complete+0x18e>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1415e:	2101      	movs	r1, #1
   14160:	4620      	mov	r0, r4
   14162:	f001 fc47 	bl	159f4 <bt_conn_set_state>
	bt_conn_connected(conn);
   14166:	4620      	mov	r0, r4
   14168:	f00a fd39 	bl	1ebde <bt_conn_connected>
	if (conn->state != BT_CONN_CONNECTED) {
   1416c:	7aa3      	ldrb	r3, [r4, #10]
   1416e:	2b07      	cmp	r3, #7
   14170:	d167      	bne.n	14242 <bt_hci_le_enh_conn_complete+0x26a>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14172:	1d20      	adds	r0, r4, #4
   14174:	f00a fb97 	bl	1e8a6 <atomic_get>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14178:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   1417c:	4e3b      	ldr	r6, [pc, #236]	; (1426c <bt_hci_le_enh_conn_complete+0x294>)
   1417e:	d125      	bne.n	141cc <bt_hci_le_enh_conn_complete+0x1f4>
   14180:	78e3      	ldrb	r3, [r4, #3]
   14182:	b11b      	cbz	r3, 1418c <bt_hci_le_enh_conn_complete+0x1b4>
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   14184:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   14188:	0718      	lsls	r0, r3, #28
   1418a:	d51f      	bpl.n	141cc <bt_hci_le_enh_conn_complete+0x1f4>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   1418c:	2102      	movs	r1, #2
   1418e:	f242 0016 	movw	r0, #8214	; 0x2016
   14192:	f7ff fd93 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   14196:	4605      	mov	r5, r0
   14198:	2800      	cmp	r0, #0
   1419a:	d05a      	beq.n	14252 <bt_hci_le_enh_conn_complete+0x27a>
   1419c:	2102      	movs	r1, #2
   1419e:	300c      	adds	r0, #12
   141a0:	f00b fdd4 	bl	1fd4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   141a4:	8823      	ldrh	r3, [r4, #0]
   141a6:	8003      	strh	r3, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf, NULL);
   141a8:	2200      	movs	r2, #0
   141aa:	4629      	mov	r1, r5
   141ac:	f242 0016 	movw	r0, #8214	; 0x2016
   141b0:	f7ff fdbe 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   141b4:	b150      	cbz	r0, 141cc <bt_hci_le_enh_conn_complete+0x1f4>
			LOG_ERR("Failed read remote features (%d)", err);
   141b6:	4b2f      	ldr	r3, [pc, #188]	; (14274 <bt_hci_le_enh_conn_complete+0x29c>)
   141b8:	9302      	str	r3, [sp, #8]
   141ba:	2300      	movs	r3, #0
   141bc:	9003      	str	r0, [sp, #12]
   141be:	e9cd 3300 	strd	r3, r3, [sp]
   141c2:	4927      	ldr	r1, [pc, #156]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   141c4:	2201      	movs	r2, #1
   141c6:	4618      	mov	r0, r3
   141c8:	f00a fb85 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   141cc:	f896 30d1 	ldrb.w	r3, [r6, #209]	; 0xd1
   141d0:	07d9      	lsls	r1, r3, #31
   141d2:	d513      	bpl.n	141fc <bt_hci_le_enh_conn_complete+0x224>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   141d4:	2500      	movs	r5, #0
   141d6:	2302      	movs	r3, #2
   141d8:	9500      	str	r5, [sp, #0]
   141da:	461a      	mov	r2, r3
   141dc:	4629      	mov	r1, r5
   141de:	4620      	mov	r0, r4
   141e0:	f00a fbcd 	bl	1e97e <bt_le_set_phy>
		if (err) {
   141e4:	b150      	cbz	r0, 141fc <bt_hci_le_enh_conn_complete+0x224>
			LOG_ERR("Failed LE Set PHY (%d)", err);
   141e6:	4b24      	ldr	r3, [pc, #144]	; (14278 <bt_hci_le_enh_conn_complete+0x2a0>)
   141e8:	9003      	str	r0, [sp, #12]
   141ea:	e9cd 5301 	strd	r5, r3, [sp, #4]
   141ee:	491c      	ldr	r1, [pc, #112]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   141f0:	9500      	str	r5, [sp, #0]
   141f2:	462b      	mov	r3, r5
   141f4:	2201      	movs	r2, #1
   141f6:	4628      	mov	r0, r5
   141f8:	f00a fb6d 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   141fc:	f896 30d0 	ldrb.w	r3, [r6, #208]	; 0xd0
   14200:	069a      	lsls	r2, r3, #26
   14202:	d51e      	bpl.n	14242 <bt_hci_le_enh_conn_complete+0x26a>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   14204:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   14208:	689b      	ldr	r3, [r3, #8]
   1420a:	079b      	lsls	r3, r3, #30
   1420c:	d519      	bpl.n	14242 <bt_hci_le_enh_conn_complete+0x26a>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1420e:	f10d 0116 	add.w	r1, sp, #22
   14212:	a805      	add	r0, sp, #20
   14214:	f7ff fe02 	bl	13e1c <hci_le_read_max_data_len>
			if (!err) {
   14218:	4605      	mov	r5, r0
   1421a:	b990      	cbnz	r0, 14242 <bt_hci_le_enh_conn_complete+0x26a>
				err = bt_le_set_data_len(conn,
   1421c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   14220:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   14224:	4620      	mov	r0, r4
   14226:	f00a fb8c 	bl	1e942 <bt_le_set_data_len>
				if (err) {
   1422a:	b150      	cbz	r0, 14242 <bt_hci_le_enh_conn_complete+0x26a>
					LOG_ERR("Failed to set data len (%d)", err);
   1422c:	4b13      	ldr	r3, [pc, #76]	; (1427c <bt_hci_le_enh_conn_complete+0x2a4>)
   1422e:	9003      	str	r0, [sp, #12]
   14230:	e9cd 5301 	strd	r5, r3, [sp, #4]
   14234:	490a      	ldr	r1, [pc, #40]	; (14260 <bt_hci_le_enh_conn_complete+0x288>)
   14236:	9500      	str	r5, [sp, #0]
   14238:	462b      	mov	r3, r5
   1423a:	2201      	movs	r2, #1
   1423c:	4628      	mov	r0, r5
   1423e:	f00a fb4a 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	bt_conn_unref(conn);
   14242:	4620      	mov	r0, r4
   14244:	f00a fcc8 	bl	1ebd8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14248:	78e3      	ldrb	r3, [r4, #3]
   1424a:	2b00      	cmp	r3, #0
   1424c:	f47f aeef 	bne.w	1402e <bt_hci_le_enh_conn_complete+0x56>
   14250:	e6ea      	b.n	14028 <bt_hci_le_enh_conn_complete+0x50>
		return -ENOBUFS;
   14252:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14256:	e7ae      	b.n	141b6 <bt_hci_le_enh_conn_complete+0x1de>
   14258:	20002948 	.word	0x20002948
   1425c:	00022920 	.word	0x00022920
   14260:	00021644 	.word	0x00021644
   14264:	0002293e 	.word	0x0002293e
   14268:	00022957 	.word	0x00022957
   1426c:	20000370 	.word	0x20000370
   14270:	2000043c 	.word	0x2000043c
   14274:	00022973 	.word	0x00022973
   14278:	00022994 	.word	0x00022994
   1427c:	000229ab 	.word	0x000229ab

00014280 <le_legacy_conn_complete>:
{
   14280:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   14282:	68c1      	ldr	r1, [r0, #12]
   14284:	4c17      	ldr	r4, [pc, #92]	; (142e4 <le_legacy_conn_complete+0x64>)
	enh.status         = evt->status;
   14286:	780b      	ldrb	r3, [r1, #0]
{
   14288:	b088      	sub	sp, #32
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   1428a:	a801      	add	r0, sp, #4
	enh.status         = evt->status;
   1428c:	f88d 3000 	strb.w	r3, [sp]
	enh.handle         = evt->handle;
   14290:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   14294:	f8ad 3001 	strh.w	r3, [sp, #1]
	enh.role           = evt->role;
   14298:	78cb      	ldrb	r3, [r1, #3]
   1429a:	f88d 3003 	strb.w	r3, [sp, #3]
	enh.interval       = evt->interval;
   1429e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   142a2:	f8ad 3017 	strh.w	r3, [sp, #23]
	enh.latency        = evt->latency;
   142a6:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   142aa:	f8ad 3019 	strh.w	r3, [sp, #25]
	enh.supv_timeout   = evt->supv_timeout;
   142ae:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   142b2:	f8ad 301b 	strh.w	r3, [sp, #27]
	enh.clock_accuracy = evt->clock_accuracy;
   142b6:	7c4b      	ldrb	r3, [r1, #17]
   142b8:	f88d 301d 	strb.w	r3, [sp, #29]
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   142bc:	3104      	adds	r1, #4
   142be:	f00a faf8 	bl	1e8b2 <bt_addr_le_copy>
   142c2:	4621      	mov	r1, r4
   142c4:	2206      	movs	r2, #6
   142c6:	f10d 000b 	add.w	r0, sp, #11
   142ca:	f00a fa59 	bl	1e780 <memcpy>
   142ce:	2206      	movs	r2, #6
   142d0:	4621      	mov	r1, r4
   142d2:	f10d 0011 	add.w	r0, sp, #17
   142d6:	f00a fa53 	bl	1e780 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   142da:	4668      	mov	r0, sp
   142dc:	f7ff fe7c 	bl	13fd8 <bt_hci_le_enh_conn_complete>
}
   142e0:	b008      	add	sp, #32
   142e2:	bd10      	pop	{r4, pc}
   142e4:	000225de 	.word	0x000225de

000142e8 <bt_send>:
	return bt_dev.drv->send(buf);
   142e8:	4b02      	ldr	r3, [pc, #8]	; (142f4 <bt_send+0xc>)
   142ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
   142ee:	695b      	ldr	r3, [r3, #20]
   142f0:	4718      	bx	r3
   142f2:	bf00      	nop
   142f4:	20000370 	.word	0x20000370

000142f8 <bt_hci_cmd_send>:
{
   142f8:	b530      	push	{r4, r5, lr}
   142fa:	4605      	mov	r5, r0
   142fc:	b085      	sub	sp, #20
	if (!buf) {
   142fe:	460c      	mov	r4, r1
   14300:	b919      	cbnz	r1, 1430a <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
   14302:	f7ff fcdb 	bl	13cbc <bt_hci_cmd_create>
		if (!buf) {
   14306:	4604      	mov	r4, r0
   14308:	b1f8      	cbz	r0, 1434a <bt_hci_cmd_send+0x52>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   1430a:	f640 4335 	movw	r3, #3125	; 0xc35
   1430e:	429d      	cmp	r5, r3
   14310:	d115      	bne.n	1433e <bt_hci_cmd_send+0x46>
		err = bt_send(buf);
   14312:	4620      	mov	r0, r4
   14314:	f7ff ffe8 	bl	142e8 <bt_send>
		if (err) {
   14318:	4605      	mov	r5, r0
   1431a:	b1a0      	cbz	r0, 14346 <bt_hci_cmd_send+0x4e>
			LOG_ERR("Unable to send to driver (err %d)", err);
   1431c:	4b0c      	ldr	r3, [pc, #48]	; (14350 <bt_hci_cmd_send+0x58>)
   1431e:	9302      	str	r3, [sp, #8]
   14320:	2300      	movs	r3, #0
   14322:	9003      	str	r0, [sp, #12]
   14324:	e9cd 3300 	strd	r3, r3, [sp]
   14328:	4618      	mov	r0, r3
   1432a:	490a      	ldr	r1, [pc, #40]	; (14354 <bt_hci_cmd_send+0x5c>)
   1432c:	2201      	movs	r2, #1
   1432e:	f00a fad2 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
			net_buf_unref(buf);
   14332:	4620      	mov	r0, r4
   14334:	f004 f824 	bl	18380 <net_buf_unref>
}
   14338:	4628      	mov	r0, r5
   1433a:	b005      	add	sp, #20
   1433c:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1433e:	4806      	ldr	r0, [pc, #24]	; (14358 <bt_hci_cmd_send+0x60>)
   14340:	4621      	mov	r1, r4
   14342:	f00b fcdb 	bl	1fcfc <net_buf_put>
	return 0;
   14346:	2500      	movs	r5, #0
   14348:	e7f6      	b.n	14338 <bt_hci_cmd_send+0x40>
			return -ENOBUFS;
   1434a:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1434e:	e7f3      	b.n	14338 <bt_hci_cmd_send+0x40>
   14350:	000229c7 	.word	0x000229c7
   14354:	00021644 	.word	0x00021644
   14358:	200004ac 	.word	0x200004ac

0001435c <le_conn_param_neg_reply>:
{
   1435c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1435e:	4606      	mov	r6, r0
   14360:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14362:	f242 0021 	movw	r0, #8225	; 0x2021
   14366:	2103      	movs	r1, #3
   14368:	f7ff fca8 	bl	13cbc <bt_hci_cmd_create>
   1436c:	4604      	mov	r4, r0
	if (!buf) {
   1436e:	b950      	cbnz	r0, 14386 <le_conn_param_neg_reply+0x2a>
		LOG_ERR("Unable to allocate buffer");
   14370:	4b0c      	ldr	r3, [pc, #48]	; (143a4 <le_conn_param_neg_reply+0x48>)
   14372:	490d      	ldr	r1, [pc, #52]	; (143a8 <le_conn_param_neg_reply+0x4c>)
   14374:	9000      	str	r0, [sp, #0]
   14376:	e9cd 0301 	strd	r0, r3, [sp, #4]
   1437a:	2201      	movs	r2, #1
   1437c:	4603      	mov	r3, r0
   1437e:	f00a faaa 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
}
   14382:	b004      	add	sp, #16
   14384:	bd70      	pop	{r4, r5, r6, pc}
   14386:	2103      	movs	r1, #3
   14388:	300c      	adds	r0, #12
   1438a:	f00b fcdf 	bl	1fd4c <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1438e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   14390:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
   14392:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14394:	f242 0021 	movw	r0, #8225	; 0x2021
}
   14398:	b004      	add	sp, #16
   1439a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1439e:	f7ff bfab 	b.w	142f8 <bt_hci_cmd_send>
   143a2:	bf00      	nop
   143a4:	000229e9 	.word	0x000229e9
   143a8:	00021644 	.word	0x00021644

000143ac <le_conn_param_req>:
{
   143ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   143ae:	68c3      	ldr	r3, [r0, #12]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   143b0:	78d9      	ldrb	r1, [r3, #3]
   143b2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   143b4:	881f      	ldrh	r7, [r3, #0]
{
   143b6:	b087      	sub	sp, #28
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   143b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   143bc:	f8ad 2010 	strh.w	r2, [sp, #16]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   143c0:	7959      	ldrb	r1, [r3, #5]
   143c2:	791a      	ldrb	r2, [r3, #4]
   143c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   143c8:	f8ad 2012 	strh.w	r2, [sp, #18]
	param.latency = sys_le16_to_cpu(evt->latency);
   143cc:	799a      	ldrb	r2, [r3, #6]
   143ce:	79d9      	ldrb	r1, [r3, #7]
   143d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   143d4:	f8ad 2014 	strh.w	r2, [sp, #20]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   143d8:	7a1a      	ldrb	r2, [r3, #8]
   143da:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   143dc:	b2bd      	uxth	r5, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   143de:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   143e2:	4628      	mov	r0, r5
	param.timeout = sys_le16_to_cpu(evt->timeout);
   143e4:	f8ad 3016 	strh.w	r3, [sp, #22]
	conn = bt_conn_lookup_handle(handle);
   143e8:	f001 fafc 	bl	159e4 <bt_conn_lookup_handle>
	if (!conn) {
   143ec:	4604      	mov	r4, r0
   143ee:	b978      	cbnz	r0, 14410 <le_conn_param_req+0x64>
		LOG_ERR("Unable to lookup conn for handle %u", handle);
   143f0:	4b1f      	ldr	r3, [pc, #124]	; (14470 <le_conn_param_req+0xc4>)
   143f2:	4920      	ldr	r1, [pc, #128]	; (14474 <le_conn_param_req+0xc8>)
   143f4:	9000      	str	r0, [sp, #0]
   143f6:	e9cd 0301 	strd	r0, r3, [sp, #4]
   143fa:	9503      	str	r5, [sp, #12]
   143fc:	4603      	mov	r3, r0
   143fe:	2201      	movs	r2, #1
   14400:	f00a fa69 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   14404:	2102      	movs	r1, #2
   14406:	4628      	mov	r0, r5
   14408:	f7ff ffa8 	bl	1435c <le_conn_param_neg_reply>
}
   1440c:	b007      	add	sp, #28
   1440e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   14410:	a904      	add	r1, sp, #16
   14412:	f001 fc6f 	bl	15cf4 <le_param_req>
   14416:	b938      	cbnz	r0, 14428 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   14418:	211e      	movs	r1, #30
   1441a:	4628      	mov	r0, r5
   1441c:	f7ff ff9e 	bl	1435c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   14420:	4620      	mov	r0, r4
   14422:	f00a fbd9 	bl	1ebd8 <bt_conn_unref>
   14426:	e7f1      	b.n	1440c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   14428:	210e      	movs	r1, #14
   1442a:	f242 0020 	movw	r0, #8224	; 0x2020
   1442e:	f7ff fc45 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   14432:	4606      	mov	r6, r0
   14434:	2800      	cmp	r0, #0
   14436:	d0f3      	beq.n	14420 <le_conn_param_req+0x74>
   14438:	210e      	movs	r1, #14
   1443a:	300c      	adds	r0, #12
   1443c:	f00b fc86 	bl	1fd4c <net_buf_simple_add>
   14440:	4605      	mov	r5, r0
	(void)memset(cp, 0, sizeof(*cp));
   14442:	220e      	movs	r2, #14
   14444:	2100      	movs	r1, #0
   14446:	f00a f9a6 	bl	1e796 <memset>
	cp->handle = sys_cpu_to_le16(handle);
   1444a:	802f      	strh	r7, [r5, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1444c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14450:	806b      	strh	r3, [r5, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   14452:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   14456:	80ab      	strh	r3, [r5, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   14458:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1445c:	80eb      	strh	r3, [r5, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1445e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   14462:	812b      	strh	r3, [r5, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   14464:	4631      	mov	r1, r6
   14466:	f242 0020 	movw	r0, #8224	; 0x2020
   1446a:	f7ff ff45 	bl	142f8 <bt_hci_cmd_send>
   1446e:	e7d7      	b.n	14420 <le_conn_param_req+0x74>
   14470:	00022661 	.word	0x00022661
   14474:	00021644 	.word	0x00021644

00014478 <hci_tx_thread>:
{
   14478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
   1447c:	f8df 8148 	ldr.w	r8, [pc, #328]	; 145c8 <hci_tx_thread+0x150>
		BT_ASSERT(err == 0);
   14480:	f8df 9148 	ldr.w	r9, [pc, #328]	; 145cc <hci_tx_thread+0x154>
{
   14484:	b085      	sub	sp, #20
			ev_count += bt_conn_prepare_events(&events[1]);
   14486:	f108 0b14 	add.w	fp, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
   1448a:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1448e:	4658      	mov	r0, fp
		events[0].state = K_POLL_STATE_NOT_READY;
   14490:	f36f 3394 	bfc	r3, #14, #7
   14494:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14498:	f001 fa66 	bl	15968 <bt_conn_prepare_events>
   1449c:	1c45      	adds	r5, r0, #1
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm2 = { .val = timeout };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1449e:	484a      	ldr	r0, [pc, #296]	; (145c8 <hci_tx_thread+0x150>)
   144a0:	f04f 32ff 	mov.w	r2, #4294967295
   144a4:	f04f 33ff 	mov.w	r3, #4294967295
   144a8:	4629      	mov	r1, r5
   144aa:	f008 fe8f 	bl	1d1cc <z_impl_k_poll>
		BT_ASSERT(err == 0);
   144ae:	b160      	cbz	r0, 144ca <hci_tx_thread+0x52>
   144b0:	4947      	ldr	r1, [pc, #284]	; (145d0 <hci_tx_thread+0x158>)
   144b2:	4848      	ldr	r0, [pc, #288]	; (145d4 <hci_tx_thread+0x15c>)
   144b4:	f640 13e6 	movw	r3, #2534	; 0x9e6
   144b8:	464a      	mov	r2, r9
   144ba:	f009 fe34 	bl	1e126 <assert_print>
   144be:	4040      	eors	r0, r0
   144c0:	f380 8811 	msr	BASEPRI, r0
   144c4:	f04f 0003 	mov.w	r0, #3
   144c8:	df02      	svc	2
{
   144ca:	4e3f      	ldr	r6, [pc, #252]	; (145c8 <hci_tx_thread+0x150>)
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   144cc:	f04f 0a00 	mov.w	sl, #0
	for (; count; ev++, count--) {
   144d0:	b915      	cbnz	r5, 144d8 <hci_tx_thread+0x60>
	z_impl_k_yield();
   144d2:	f008 fbf3 	bl	1ccbc <z_impl_k_yield>
	while (1) {
   144d6:	e7d8      	b.n	1448a <hci_tx_thread+0x12>
		switch (ev->state) {
   144d8:	68f3      	ldr	r3, [r6, #12]
   144da:	f3c3 3386 	ubfx	r3, r3, #14, #7
   144de:	2b01      	cmp	r3, #1
   144e0:	d95a      	bls.n	14598 <hci_tx_thread+0x120>
   144e2:	2b04      	cmp	r3, #4
   144e4:	d162      	bne.n	145ac <hci_tx_thread+0x134>
			if (ev->tag == BT_EVENT_CMD_TX) {
   144e6:	7b33      	ldrb	r3, [r6, #12]
   144e8:	2b00      	cmp	r3, #0
   144ea:	d158      	bne.n	1459e <hci_tx_thread+0x126>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   144ec:	483a      	ldr	r0, [pc, #232]	; (145d8 <hci_tx_thread+0x160>)
   144ee:	2200      	movs	r2, #0
   144f0:	2300      	movs	r3, #0
   144f2:	f00b fbd0 	bl	1fc96 <net_buf_get>
	BT_ASSERT(buf);
   144f6:	4604      	mov	r4, r0
   144f8:	b960      	cbnz	r0, 14514 <hci_tx_thread+0x9c>
   144fa:	4938      	ldr	r1, [pc, #224]	; (145dc <hci_tx_thread+0x164>)
   144fc:	4835      	ldr	r0, [pc, #212]	; (145d4 <hci_tx_thread+0x15c>)
   144fe:	f44f 6318 	mov.w	r3, #2432	; 0x980
   14502:	464a      	mov	r2, r9
   14504:	f009 fe0f 	bl	1e126 <assert_print>
   14508:	4040      	eors	r0, r0
   1450a:	f380 8811 	msr	BASEPRI, r0
   1450e:	f04f 0003 	mov.w	r0, #3
   14512:	df02      	svc	2
	if (bt_dev.sent_cmd) {
   14514:	4f32      	ldr	r7, [pc, #200]	; (145e0 <hci_tx_thread+0x168>)
	return z_impl_k_sem_take(sem, timeout);
   14516:	4833      	ldr	r0, [pc, #204]	; (145e4 <hci_tx_thread+0x16c>)
   14518:	f04f 33ff 	mov.w	r3, #4294967295
   1451c:	f04f 32ff 	mov.w	r2, #4294967295
   14520:	f007 ff8e 	bl	1c440 <z_impl_k_sem_take>
   14524:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
   14528:	b183      	cbz	r3, 1454c <hci_tx_thread+0xd4>
		LOG_ERR("Uncleared pending sent_cmd");
   1452a:	4b2f      	ldr	r3, [pc, #188]	; (145e8 <hci_tx_thread+0x170>)
   1452c:	9302      	str	r3, [sp, #8]
   1452e:	2300      	movs	r3, #0
   14530:	4618      	mov	r0, r3
   14532:	e9cd 3300 	strd	r3, r3, [sp]
   14536:	492d      	ldr	r1, [pc, #180]	; (145ec <hci_tx_thread+0x174>)
   14538:	2201      	movs	r2, #1
   1453a:	f00a f9cc 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
   1453e:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
   14542:	f003 ff1d 	bl	18380 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14546:	2300      	movs	r3, #0
   14548:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1454c:	4620      	mov	r0, r4
   1454e:	f00b fbd7 	bl	1fd00 <net_buf_ref>
   14552:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	err = bt_send(buf);
   14556:	4620      	mov	r0, r4
   14558:	f7ff fec6 	bl	142e8 <bt_send>
	if (err) {
   1455c:	b1e0      	cbz	r0, 14598 <hci_tx_thread+0x120>
		LOG_ERR("Unable to send to driver (err %d)", err);
   1455e:	4b24      	ldr	r3, [pc, #144]	; (145f0 <hci_tx_thread+0x178>)
   14560:	9302      	str	r3, [sp, #8]
   14562:	2300      	movs	r3, #0
   14564:	9003      	str	r0, [sp, #12]
   14566:	e9cd 3300 	strd	r3, r3, [sp]
   1456a:	4920      	ldr	r1, [pc, #128]	; (145ec <hci_tx_thread+0x174>)
   1456c:	2201      	movs	r2, #1
   1456e:	4618      	mov	r0, r3
   14570:	f00a f9b1 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   14574:	481b      	ldr	r0, [pc, #108]	; (145e4 <hci_tx_thread+0x16c>)
   14576:	f007 ff3d 	bl	1c3f4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1457a:	4620      	mov	r0, r4
   1457c:	f003 fe46 	bl	1820c <net_buf_id>
   14580:	4b1c      	ldr	r3, [pc, #112]	; (145f4 <hci_tx_thread+0x17c>)
   14582:	220c      	movs	r2, #12
   14584:	fb02 3000 	mla	r0, r2, r0, r3
   14588:	211f      	movs	r1, #31
   1458a:	8840      	ldrh	r0, [r0, #2]
   1458c:	4622      	mov	r2, r4
   1458e:	f7ff fa45 	bl	13a1c <hci_cmd_done>
		net_buf_unref(buf);
   14592:	4620      	mov	r0, r4
   14594:	f003 fef4 	bl	18380 <net_buf_unref>
	for (; count; ev++, count--) {
   14598:	3614      	adds	r6, #20
   1459a:	3d01      	subs	r5, #1
   1459c:	e798      	b.n	144d0 <hci_tx_thread+0x58>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1459e:	2b01      	cmp	r3, #1
   145a0:	d1fa      	bne.n	14598 <hci_tx_thread+0x120>
					conn = CONTAINER_OF(ev->fifo,
   145a2:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
   145a4:	3838      	subs	r0, #56	; 0x38
   145a6:	f001 fda5 	bl	160f4 <bt_conn_process_tx>
   145aa:	e7f5      	b.n	14598 <hci_tx_thread+0x120>
		switch (ev->state) {
   145ac:	9303      	str	r3, [sp, #12]
			LOG_WRN("Unexpected k_poll event state %u", ev->state);
   145ae:	4b12      	ldr	r3, [pc, #72]	; (145f8 <hci_tx_thread+0x180>)
   145b0:	490e      	ldr	r1, [pc, #56]	; (145ec <hci_tx_thread+0x174>)
   145b2:	f8cd a000 	str.w	sl, [sp]
   145b6:	e9cd a301 	strd	sl, r3, [sp, #4]
   145ba:	2300      	movs	r3, #0
   145bc:	2202      	movs	r2, #2
   145be:	4618      	mov	r0, r3
   145c0:	f00a f989 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
   145c4:	e7e8      	b.n	14598 <hci_tx_thread+0x120>
   145c6:	bf00      	nop
   145c8:	20000620 	.word	0x20000620
   145cc:	0002272e 	.word	0x0002272e
   145d0:	000228bb 	.word	0x000228bb
   145d4:	0002277b 	.word	0x0002277b
   145d8:	200004ac 	.word	0x200004ac
   145dc:	00023426 	.word	0x00023426
   145e0:	20000370 	.word	0x20000370
   145e4:	20000488 	.word	0x20000488
   145e8:	00022a03 	.word	0x00022a03
   145ec:	00021644 	.word	0x00021644
   145f0:	000229c7 	.word	0x000229c7
   145f4:	20002520 	.word	0x20002520
   145f8:	00022a1e 	.word	0x00022a1e

000145fc <hci_event_prio>:
{
   145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14600:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   14602:	f100 060c 	add.w	r6, r0, #12
	state->offset = net_buf_simple_headroom(buf);
   14606:	4630      	mov	r0, r6
   14608:	f00b fbd7 	bl	1fdba <net_buf_simple_headroom>
	state->len = buf->len;
   1460c:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14610:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   14614:	4605      	mov	r5, r0
   14616:	d80c      	bhi.n	14632 <hci_event_prio+0x36>
   14618:	4a1c      	ldr	r2, [pc, #112]	; (1468c <hci_event_prio+0x90>)
   1461a:	491d      	ldr	r1, [pc, #116]	; (14690 <hci_event_prio+0x94>)
   1461c:	481d      	ldr	r0, [pc, #116]	; (14694 <hci_event_prio+0x98>)
   1461e:	f640 537b 	movw	r3, #3451	; 0xd7b
   14622:	f009 fd80 	bl	1e126 <assert_print>
   14626:	4040      	eors	r0, r0
   14628:	f380 8811 	msr	BASEPRI, r0
   1462c:	f04f 0003 	mov.w	r0, #3
   14630:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14632:	4630      	mov	r0, r6
   14634:	2102      	movs	r1, #2
   14636:	f00b fba8 	bl	1fd8a <net_buf_simple_pull_mem>
   1463a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1463c:	7800      	ldrb	r0, [r0, #0]
   1463e:	f00a f91f 	bl	1e880 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14642:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14644:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14646:	d40c      	bmi.n	14662 <hci_event_prio+0x66>
   14648:	4a10      	ldr	r2, [pc, #64]	; (1468c <hci_event_prio+0x90>)
   1464a:	4913      	ldr	r1, [pc, #76]	; (14698 <hci_event_prio+0x9c>)
   1464c:	4811      	ldr	r0, [pc, #68]	; (14694 <hci_event_prio+0x98>)
   1464e:	f640 537f 	movw	r3, #3455	; 0xd7f
   14652:	f009 fd68 	bl	1e126 <assert_print>
   14656:	4040      	eors	r0, r0
   14658:	f380 8811 	msr	BASEPRI, r0
   1465c:	f04f 0003 	mov.w	r0, #3
   14660:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14662:	2305      	movs	r3, #5
   14664:	4a0d      	ldr	r2, [pc, #52]	; (1469c <hci_event_prio+0xa0>)
   14666:	7838      	ldrb	r0, [r7, #0]
   14668:	4621      	mov	r1, r4
   1466a:	f7ff f897 	bl	1379c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1466e:	07b3      	lsls	r3, r6, #30
   14670:	d507      	bpl.n	14682 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14672:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   14674:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   14678:	fa13 f585 	uxtah	r5, r3, r5
   1467c:	60e5      	str	r5, [r4, #12]
}
   1467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14682:	4620      	mov	r0, r4
}
   14684:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14688:	f003 be7a 	b.w	18380 <net_buf_unref>
   1468c:	0002272e 	.word	0x0002272e
   14690:	00022762 	.word	0x00022762
   14694:	0002277b 	.word	0x0002277b
   14698:	00022a3f 	.word	0x00022a3f
   1469c:	00021828 	.word	0x00021828

000146a0 <bt_recv>:
{
   146a0:	b530      	push	{r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   146a2:	7e03      	ldrb	r3, [r0, #24]
	switch (bt_buf_get_type(buf)) {
   146a4:	2b01      	cmp	r3, #1
{
   146a6:	b085      	sub	sp, #20
   146a8:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   146aa:	d006      	beq.n	146ba <bt_recv+0x1a>
   146ac:	2b03      	cmp	r3, #3
   146ae:	d112      	bne.n	146d6 <bt_recv+0x36>
			rx_queue_put(buf);
   146b0:	f7fe ffd6 	bl	13660 <rx_queue_put>
		return 0;
   146b4:	2000      	movs	r0, #0
}
   146b6:	b005      	add	sp, #20
   146b8:	bd30      	pop	{r4, r5, pc}
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   146ba:	68c3      	ldr	r3, [r0, #12]
   146bc:	7818      	ldrb	r0, [r3, #0]
   146be:	f00a f8df 	bl	1e880 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   146c2:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   146c4:	4605      	mov	r5, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   146c6:	d502      	bpl.n	146ce <bt_recv+0x2e>
			hci_event_prio(buf);
   146c8:	4620      	mov	r0, r4
   146ca:	f7ff ff97 	bl	145fc <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   146ce:	07ab      	lsls	r3, r5, #30
   146d0:	d5f0      	bpl.n	146b4 <bt_recv+0x14>
			rx_queue_put(buf);
   146d2:	4620      	mov	r0, r4
   146d4:	e7ec      	b.n	146b0 <bt_recv+0x10>
	switch (bt_buf_get_type(buf)) {
   146d6:	9303      	str	r3, [sp, #12]
		LOG_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   146d8:	4b07      	ldr	r3, [pc, #28]	; (146f8 <bt_recv+0x58>)
   146da:	9302      	str	r3, [sp, #8]
   146dc:	2300      	movs	r3, #0
   146de:	4618      	mov	r0, r3
   146e0:	e9cd 3300 	strd	r3, r3, [sp]
   146e4:	4905      	ldr	r1, [pc, #20]	; (146fc <bt_recv+0x5c>)
   146e6:	2201      	movs	r2, #1
   146e8:	f00a f8f5 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   146ec:	4620      	mov	r0, r4
   146ee:	f003 fe47 	bl	18380 <net_buf_unref>
		return -EINVAL;
   146f2:	f06f 0015 	mvn.w	r0, #21
   146f6:	e7de      	b.n	146b6 <bt_recv+0x16>
   146f8:	00022a58 	.word	0x00022a58
   146fc:	00021644 	.word	0x00021644

00014700 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   14700:	4a08      	ldr	r2, [pc, #32]	; (14724 <bt_hci_driver_register+0x24>)
{
   14702:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   14704:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
   14708:	b930      	cbnz	r0, 14718 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   1470a:	68d9      	ldr	r1, [r3, #12]
   1470c:	b139      	cbz	r1, 1471e <bt_hci_driver_register+0x1e>
   1470e:	6959      	ldr	r1, [r3, #20]
   14710:	b129      	cbz	r1, 1471e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   14712:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
   14716:	4770      	bx	lr
		return -EALREADY;
   14718:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1471c:	4770      	bx	lr
		return -EINVAL;
   1471e:	f06f 0015 	mvn.w	r0, #21
}
   14722:	4770      	bx	lr
   14724:	20000370 	.word	0x20000370

00014728 <bt_finalize_init>:
{
   14728:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1472a:	4804      	ldr	r0, [pc, #16]	; (1473c <bt_finalize_init+0x14>)
   1472c:	2104      	movs	r1, #4
   1472e:	f00a f8c3 	bl	1e8b8 <atomic_or>
}
   14732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
   14736:	2000      	movs	r0, #0
   14738:	f000 bd7c 	b.w	15234 <bt_le_scan_update>
   1473c:	2000043c 	.word	0x2000043c

00014740 <bt_init>:
{
   14740:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14742:	4dba      	ldr	r5, [pc, #744]	; (14a2c <bt_init+0x2ec>)
   14744:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
   14748:	6899      	ldr	r1, [r3, #8]
   1474a:	f011 0101 	ands.w	r1, r1, #1
{
   1474e:	b087      	sub	sp, #28
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14750:	d121      	bne.n	14796 <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14752:	aa05      	add	r2, sp, #20
   14754:	f640 4003 	movw	r0, #3075	; 0xc03
   14758:	f7ff faea 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   1475c:	4604      	mov	r4, r0
   1475e:	2800      	cmp	r0, #0
   14760:	d16c      	bne.n	1483c <bt_init+0xfc>
		hci_reset_complete(rsp);
   14762:	9c05      	ldr	r4, [sp, #20]
	uint8_t status = buf->data[0];
   14764:	68e3      	ldr	r3, [r4, #12]
	if (status) {
   14766:	781b      	ldrb	r3, [r3, #0]
   14768:	b993      	cbnz	r3, 14790 <bt_init+0x50>
		bt_scan_reset();
   1476a:	f000 fd5d 	bl	15228 <bt_scan_reset>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   1476e:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   14772:	4618      	mov	r0, r3
   14774:	f00a f897 	bl	1e8a6 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14778:	f3bf 8f5b 	dmb	ish
   1477c:	f000 0009 	and.w	r0, r0, #9
   14780:	e853 2f00 	ldrex	r2, [r3]
   14784:	e843 0100 	strex	r1, r0, [r3]
   14788:	2900      	cmp	r1, #0
   1478a:	d1f9      	bne.n	14780 <bt_init+0x40>
   1478c:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   14790:	4620      	mov	r0, r4
   14792:	f003 fdf5 	bl	18380 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14796:	aa05      	add	r2, sp, #20
   14798:	2100      	movs	r1, #0
   1479a:	f241 0003 	movw	r0, #4099	; 0x1003
   1479e:	f7ff fac7 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   147a2:	4604      	mov	r4, r0
   147a4:	2800      	cmp	r0, #0
   147a6:	d149      	bne.n	1483c <bt_init+0xfc>
	read_local_features_complete(rsp);
   147a8:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   147aa:	48a1      	ldr	r0, [pc, #644]	; (14a30 <bt_init+0x2f0>)
   147ac:	68f1      	ldr	r1, [r6, #12]
   147ae:	2208      	movs	r2, #8
   147b0:	3101      	adds	r1, #1
   147b2:	f009 ffe5 	bl	1e780 <memcpy>
	net_buf_unref(rsp);
   147b6:	4630      	mov	r0, r6
   147b8:	f003 fde2 	bl	18380 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   147bc:	4621      	mov	r1, r4
   147be:	aa05      	add	r2, sp, #20
   147c0:	f241 0001 	movw	r0, #4097	; 0x1001
   147c4:	f7ff fab4 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   147c8:	4604      	mov	r4, r0
   147ca:	2800      	cmp	r0, #0
   147cc:	d136      	bne.n	1483c <bt_init+0xfc>
	read_local_ver_complete(rsp);
   147ce:	9805      	ldr	r0, [sp, #20]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   147d0:	68c3      	ldr	r3, [r0, #12]
	bt_dev.hci_version = rp->hci_version;
   147d2:	785a      	ldrb	r2, [r3, #1]
   147d4:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   147d8:	885a      	ldrh	r2, [r3, #2]
   147da:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   147de:	791a      	ldrb	r2, [r3, #4]
   147e0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   147e4:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   147e8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   147ec:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   147f0:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   147f4:	f003 fdc4 	bl	18380 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   147f8:	4621      	mov	r1, r4
   147fa:	aa05      	add	r2, sp, #20
   147fc:	f241 0002 	movw	r0, #4098	; 0x1002
   14800:	f7ff fa96 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14804:	4604      	mov	r4, r0
   14806:	b9c8      	cbnz	r0, 1483c <bt_init+0xfc>
	read_supported_commands_complete(rsp);
   14808:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.supported_commands, rp->commands,
   1480a:	488a      	ldr	r0, [pc, #552]	; (14a34 <bt_init+0x2f4>)
   1480c:	68f1      	ldr	r1, [r6, #12]
   1480e:	2240      	movs	r2, #64	; 0x40
   14810:	3101      	adds	r1, #1
   14812:	f009 ffb5 	bl	1e780 <memcpy>
	net_buf_unref(rsp);
   14816:	4630      	mov	r0, r6
   14818:	f003 fdb2 	bl	18380 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   1481c:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   14820:	065e      	lsls	r6, r3, #25
   14822:	d40e      	bmi.n	14842 <bt_init+0x102>
		LOG_ERR("Non-LE capable controller detected!");
   14824:	4b84      	ldr	r3, [pc, #528]	; (14a38 <bt_init+0x2f8>)
   14826:	9400      	str	r4, [sp, #0]
   14828:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1482c:	4620      	mov	r0, r4
   1482e:	4623      	mov	r3, r4
   14830:	4982      	ldr	r1, [pc, #520]	; (14a3c <bt_init+0x2fc>)
   14832:	2201      	movs	r2, #1
   14834:	f00a f84f 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   14838:	f06f 0412 	mvn.w	r4, #18
}
   1483c:	4620      	mov	r0, r4
   1483e:	b007      	add	sp, #28
   14840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14842:	4621      	mov	r1, r4
   14844:	aa05      	add	r2, sp, #20
   14846:	f242 0003 	movw	r0, #8195	; 0x2003
   1484a:	f7ff fa71 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   1484e:	4604      	mov	r4, r0
   14850:	2800      	cmp	r0, #0
   14852:	d1f3      	bne.n	1483c <bt_init+0xfc>
	read_le_features_complete(rsp);
   14854:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14856:	487a      	ldr	r0, [pc, #488]	; (14a40 <bt_init+0x300>)
   14858:	68f1      	ldr	r1, [r6, #12]
   1485a:	2208      	movs	r2, #8
   1485c:	3101      	adds	r1, #1
   1485e:	f009 ff8f 	bl	1e780 <memcpy>
	net_buf_unref(rsp);
   14862:	4630      	mov	r0, r6
   14864:	f003 fd8c 	bl	18380 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14868:	4621      	mov	r1, r4
   1486a:	aa05      	add	r2, sp, #20
   1486c:	f242 0002 	movw	r0, #8194	; 0x2002
   14870:	f7ff fa5e 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   14874:	4604      	mov	r4, r0
   14876:	2800      	cmp	r0, #0
   14878:	d1e0      	bne.n	1483c <bt_init+0xfc>
		le_read_buffer_size_complete(rsp);
   1487a:	9c05      	ldr	r4, [sp, #20]
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   1487c:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   1487e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14882:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   14886:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14888:	b121      	cbz	r1, 14894 <bt_init+0x154>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   1488a:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1488c:	486d      	ldr	r0, [pc, #436]	; (14a44 <bt_init+0x304>)
   1488e:	4611      	mov	r1, r2
   14890:	f00c f947 	bl	20b22 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   14894:	4620      	mov	r0, r4
   14896:	f003 fd73 	bl	18380 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   1489a:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   1489e:	f016 0620 	ands.w	r6, r6, #32
   148a2:	d118      	bne.n	148d6 <bt_init+0x196>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   148a4:	2102      	movs	r1, #2
   148a6:	f640 406d 	movw	r0, #3181	; 0xc6d
   148aa:	f7ff fa07 	bl	13cbc <bt_hci_cmd_create>
		if (!buf) {
   148ae:	4604      	mov	r4, r0
   148b0:	2800      	cmp	r0, #0
   148b2:	f000 80a9 	beq.w	14a08 <bt_init+0x2c8>
	return net_buf_simple_add(&buf->b, len);
   148b6:	2102      	movs	r1, #2
   148b8:	300c      	adds	r0, #12
   148ba:	f00b fa47 	bl	1fd4c <net_buf_simple_add>
		cp_le->le = 0x01;
   148be:	2301      	movs	r3, #1
   148c0:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   148c2:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   148c4:	4621      	mov	r1, r4
   148c6:	4632      	mov	r2, r6
   148c8:	f640 406d 	movw	r0, #3181	; 0xc6d
   148cc:	f7ff fa30 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   148d0:	4604      	mov	r4, r0
   148d2:	2800      	cmp	r0, #0
   148d4:	d1b2      	bne.n	1483c <bt_init+0xfc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   148d6:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   148da:	071c      	lsls	r4, r3, #28
   148dc:	d512      	bpl.n	14904 <bt_init+0x1c4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   148de:	aa05      	add	r2, sp, #20
   148e0:	2100      	movs	r1, #0
   148e2:	f242 001c 	movw	r0, #8220	; 0x201c
   148e6:	f7ff fa23 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   148ea:	4604      	mov	r4, r0
   148ec:	2800      	cmp	r0, #0
   148ee:	d1a5      	bne.n	1483c <bt_init+0xfc>
		le_read_supp_states_complete(rsp);
   148f0:	9805      	ldr	r0, [sp, #20]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   148f2:	68c3      	ldr	r3, [r0, #12]
   148f4:	f8d3 2001 	ldr.w	r2, [r3, #1]
   148f8:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   148fc:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   14900:	f003 fd3e 	bl	18380 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14904:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   14908:	0698      	lsls	r0, r3, #26
   1490a:	d523      	bpl.n	14954 <bt_init+0x214>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1490c:	f10d 0112 	add.w	r1, sp, #18
   14910:	a804      	add	r0, sp, #16
   14912:	f7ff fa83 	bl	13e1c <hci_le_read_max_data_len>
		if (err) {
   14916:	4604      	mov	r4, r0
   14918:	2800      	cmp	r0, #0
   1491a:	d18f      	bne.n	1483c <bt_init+0xfc>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   1491c:	2104      	movs	r1, #4
   1491e:	f242 0024 	movw	r0, #8228	; 0x2024
   14922:	f7ff f9cb 	bl	13cbc <bt_hci_cmd_create>
		if (!buf) {
   14926:	4606      	mov	r6, r0
   14928:	2800      	cmp	r0, #0
   1492a:	d06d      	beq.n	14a08 <bt_init+0x2c8>
   1492c:	2104      	movs	r1, #4
   1492e:	300c      	adds	r0, #12
   14930:	f00b fa0c 	bl	1fd4c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14934:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   14938:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   1493a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   1493e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14940:	4622      	mov	r2, r4
   14942:	4631      	mov	r1, r6
   14944:	f242 0024 	movw	r0, #8228	; 0x2024
   14948:	f7ff f9f2 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   1494c:	4604      	mov	r4, r0
   1494e:	2800      	cmp	r0, #0
   14950:	f47f af74 	bne.w	1483c <bt_init+0xfc>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14954:	2108      	movs	r1, #8
   14956:	f242 0001 	movw	r0, #8193	; 0x2001
   1495a:	f7ff f9af 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   1495e:	4604      	mov	r4, r0
   14960:	2800      	cmp	r0, #0
   14962:	d051      	beq.n	14a08 <bt_init+0x2c8>
   14964:	2108      	movs	r1, #8
   14966:	300c      	adds	r0, #12
   14968:	f00b f9f0 	bl	1fd4c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   1496c:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14970:	f012 0f02 	tst.w	r2, #2
   14974:	bf14      	ite	ne
   14976:	232f      	movne	r3, #47	; 0x2f
   14978:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   1497a:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   1497c:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14980:	bf48      	it	mi
   14982:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14986:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   1498a:	bf18      	it	ne
   1498c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   14990:	2200      	movs	r2, #0
   14992:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14994:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14998:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1499a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   1499c:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   1499e:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   149a0:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   149a2:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   149a4:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   149a6:	4621      	mov	r1, r4
   149a8:	f242 0001 	movw	r0, #8193	; 0x2001
   149ac:	f7ff f9c0 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   149b0:	4604      	mov	r4, r0
   149b2:	2800      	cmp	r0, #0
   149b4:	f47f af42 	bne.w	1483c <bt_init+0xfc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   149b8:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
   149bc:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
   149c0:	069a      	lsls	r2, r3, #26
   149c2:	d424      	bmi.n	14a0e <bt_init+0x2ce>
	if (bt_dev.le.acl_mtu) {
   149c4:	b9c9      	cbnz	r1, 149fa <bt_init+0x2ba>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   149c6:	aa05      	add	r2, sp, #20
   149c8:	f241 0005 	movw	r0, #4101	; 0x1005
   149cc:	f7ff f9b0 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   149d0:	4604      	mov	r4, r0
   149d2:	2800      	cmp	r0, #0
   149d4:	f47f af32 	bne.w	1483c <bt_init+0xfc>
	if (bt_dev.le.acl_mtu) {
   149d8:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
	read_buffer_size_complete(rsp);
   149dc:	9c05      	ldr	r4, [sp, #20]
	if (bt_dev.le.acl_mtu) {
   149de:	b94b      	cbnz	r3, 149f4 <bt_init+0x2b4>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   149e0:	68e3      	ldr	r3, [r4, #12]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   149e2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   149e6:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   149ea:	889a      	ldrh	r2, [r3, #4]
   149ec:	4815      	ldr	r0, [pc, #84]	; (14a44 <bt_init+0x304>)
   149ee:	4611      	mov	r1, r2
   149f0:	f00c f897 	bl	20b22 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   149f4:	4620      	mov	r0, r4
   149f6:	f003 fcc3 	bl	18380 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   149fa:	2108      	movs	r1, #8
   149fc:	f640 4001 	movw	r0, #3073	; 0xc01
   14a00:	f7ff f95c 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   14a04:	4604      	mov	r4, r0
   14a06:	bb08      	cbnz	r0, 14a4c <bt_init+0x30c>
		return -ENOBUFS;
   14a08:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14a0c:	e716      	b.n	1483c <bt_init+0xfc>
	else if (!bt_dev.le.acl_mtu) {
   14a0e:	2900      	cmp	r1, #0
   14a10:	d1f3      	bne.n	149fa <bt_init+0x2ba>
		LOG_ERR("ACL BR/EDR buffers not initialized");
   14a12:	4b0d      	ldr	r3, [pc, #52]	; (14a48 <bt_init+0x308>)
   14a14:	4909      	ldr	r1, [pc, #36]	; (14a3c <bt_init+0x2fc>)
   14a16:	9000      	str	r0, [sp, #0]
   14a18:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14a1c:	2201      	movs	r2, #1
   14a1e:	4603      	mov	r3, r0
   14a20:	f009 ff59 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   14a24:	f06f 0404 	mvn.w	r4, #4
   14a28:	e708      	b.n	1483c <bt_init+0xfc>
   14a2a:	bf00      	nop
   14a2c:	20000370 	.word	0x20000370
   14a30:	200003e0 	.word	0x200003e0
   14a34:	200003e8 	.word	0x200003e8
   14a38:	00022a6c 	.word	0x00022a6c
   14a3c:	00021644 	.word	0x00021644
   14a40:	20000440 	.word	0x20000440
   14a44:	20000470 	.word	0x20000470
   14a48:	00022a90 	.word	0x00022a90
   14a4c:	2108      	movs	r1, #8
   14a4e:	300c      	adds	r0, #12
   14a50:	f00b f97c 	bl	1fd4c <net_buf_simple_add>
	dst[0] = val;
   14a54:	2310      	movs	r3, #16
   14a56:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14a58:	2388      	movs	r3, #136	; 0x88
	dst[0] = val;
   14a5a:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14a5c:	7043      	strb	r3, [r0, #1]
   14a5e:	2702      	movs	r7, #2
   14a60:	2320      	movs	r3, #32
	dst[0] = val;
   14a62:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14a64:	70c7      	strb	r7, [r0, #3]
	dst[0] = val;
   14a66:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14a68:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14a6a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14a6c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14a6e:	4621      	mov	r1, r4
   14a70:	f640 4001 	movw	r0, #3073	; 0xc01
   14a74:	f7ff f95c 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14a78:	4604      	mov	r4, r0
   14a7a:	2800      	cmp	r0, #0
   14a7c:	f47f aede 	bne.w	1483c <bt_init+0xfc>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14a80:	4601      	mov	r1, r0
   14a82:	aa05      	add	r2, sp, #20
   14a84:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14a88:	f7ff f952 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14a8c:	4606      	mov	r6, r0
   14a8e:	b128      	cbz	r0, 14a9c <bt_init+0x35c>
		LOG_WRN("Vendor HCI extensions not available");
   14a90:	4b25      	ldr	r3, [pc, #148]	; (14b28 <bt_init+0x3e8>)
			LOG_WRN("Failed to read supported vendor features");
   14a92:	9400      	str	r4, [sp, #0]
   14a94:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14a98:	4623      	mov	r3, r4
   14a9a:	e00f      	b.n	14abc <bt_init+0x37c>
	net_buf_unref(rsp);
   14a9c:	9805      	ldr	r0, [sp, #20]
   14a9e:	f003 fc6f 	bl	18380 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14aa2:	aa05      	add	r2, sp, #20
   14aa4:	4631      	mov	r1, r6
   14aa6:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14aaa:	f7ff f941 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14aae:	4604      	mov	r4, r0
   14ab0:	b1c0      	cbz	r0, 14ae4 <bt_init+0x3a4>
		LOG_WRN("Failed to read supported vendor commands");
   14ab2:	4b1e      	ldr	r3, [pc, #120]	; (14b2c <bt_init+0x3ec>)
   14ab4:	9600      	str	r6, [sp, #0]
   14ab6:	e9cd 6301 	strd	r6, r3, [sp, #4]
   14aba:	4633      	mov	r3, r6
			LOG_WRN("Failed to read supported vendor features");
   14abc:	491c      	ldr	r1, [pc, #112]	; (14b30 <bt_init+0x3f0>)
   14abe:	463a      	mov	r2, r7
   14ac0:	4618      	mov	r0, r3
   14ac2:	f009 ff08 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
	err = bt_id_init();
   14ac6:	f000 fae7 	bl	15098 <bt_id_init>
	if (err) {
   14aca:	4604      	mov	r4, r0
   14acc:	2800      	cmp	r0, #0
   14ace:	f47f aeb5 	bne.w	1483c <bt_init+0xfc>
		err = bt_conn_init();
   14ad2:	f001 fb7f 	bl	161d4 <bt_conn_init>
		if (err) {
   14ad6:	4604      	mov	r4, r0
   14ad8:	2800      	cmp	r0, #0
   14ada:	f47f aeaf 	bne.w	1483c <bt_init+0xfc>
	bt_finalize_init();
   14ade:	f7ff fe23 	bl	14728 <bt_finalize_init>
	return 0;
   14ae2:	e6ab      	b.n	1483c <bt_init+0xfc>
	rp.cmds = (void *)rsp->data;
   14ae4:	9e05      	ldr	r6, [sp, #20]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14ae6:	4813      	ldr	r0, [pc, #76]	; (14b34 <bt_init+0x3f4>)
   14ae8:	68f1      	ldr	r1, [r6, #12]
   14aea:	463a      	mov	r2, r7
   14aec:	3101      	adds	r1, #1
   14aee:	f009 fe47 	bl	1e780 <memcpy>
	net_buf_unref(rsp);
   14af2:	4630      	mov	r0, r6
   14af4:	f003 fc44 	bl	18380 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14af8:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   14afc:	075b      	lsls	r3, r3, #29
   14afe:	d5e2      	bpl.n	14ac6 <bt_init+0x386>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14b00:	aa05      	add	r2, sp, #20
   14b02:	4621      	mov	r1, r4
   14b04:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14b08:	f7ff f912 	bl	13d30 <bt_hci_cmd_send_sync>
		if (err) {
   14b0c:	b108      	cbz	r0, 14b12 <bt_init+0x3d2>
			LOG_WRN("Failed to read supported vendor features");
   14b0e:	4b0a      	ldr	r3, [pc, #40]	; (14b38 <bt_init+0x3f8>)
   14b10:	e7bf      	b.n	14a92 <bt_init+0x352>
		rp.feat = (void *)rsp->data;
   14b12:	9c05      	ldr	r4, [sp, #20]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14b14:	4809      	ldr	r0, [pc, #36]	; (14b3c <bt_init+0x3fc>)
   14b16:	68e1      	ldr	r1, [r4, #12]
   14b18:	2201      	movs	r2, #1
   14b1a:	4411      	add	r1, r2
   14b1c:	f009 fe30 	bl	1e780 <memcpy>
		net_buf_unref(rsp);
   14b20:	4620      	mov	r0, r4
   14b22:	f003 fc2d 	bl	18380 <net_buf_unref>
   14b26:	e7ce      	b.n	14ac6 <bt_init+0x386>
   14b28:	00022ab3 	.word	0x00022ab3
   14b2c:	00022ad7 	.word	0x00022ad7
   14b30:	00021644 	.word	0x00021644
   14b34:	20000429 	.word	0x20000429
   14b38:	00022b00 	.word	0x00022b00
   14b3c:	20000428 	.word	0x20000428

00014b40 <init_work>:
{
   14b40:	b510      	push	{r4, lr}
	err = bt_init();
   14b42:	f7ff fdfd 	bl	14740 <bt_init>
	if (ready_cb) {
   14b46:	4b03      	ldr	r3, [pc, #12]	; (14b54 <init_work+0x14>)
   14b48:	681b      	ldr	r3, [r3, #0]
   14b4a:	b113      	cbz	r3, 14b52 <init_work+0x12>
}
   14b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14b50:	4718      	bx	r3
}
   14b52:	bd10      	pop	{r4, pc}
   14b54:	20002538 	.word	0x20002538

00014b58 <bt_enable>:
#endif /* !CONFIG_BT_RECV_BLOCKING */

int bt_enable(bt_ready_cb_t cb)
{
   14b58:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (!bt_dev.drv) {
   14b5a:	4e38      	ldr	r6, [pc, #224]	; (14c3c <bt_enable+0xe4>)
   14b5c:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
{
   14b60:	b089      	sub	sp, #36	; 0x24
   14b62:	4607      	mov	r7, r0
	if (!bt_dev.drv) {
   14b64:	b96b      	cbnz	r3, 14b82 <bt_enable+0x2a>
		LOG_ERR("No HCI driver registered");
   14b66:	4a36      	ldr	r2, [pc, #216]	; (14c40 <bt_enable+0xe8>)
   14b68:	4936      	ldr	r1, [pc, #216]	; (14c44 <bt_enable+0xec>)
   14b6a:	9300      	str	r3, [sp, #0]
   14b6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   14b70:	4618      	mov	r0, r3
   14b72:	2201      	movs	r2, #1
   14b74:	f009 feaf 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   14b78:	f06f 0512 	mvn.w	r5, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   14b7c:	4628      	mov	r0, r5
   14b7e:	b009      	add	sp, #36	; 0x24
   14b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   14b82:	f06f 0102 	mvn.w	r1, #2
   14b86:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
   14b8a:	f009 feb3 	bl	1e8f4 <atomic_and.isra.0>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14b8e:	2101      	movs	r1, #1
   14b90:	f009 fe92 	bl	1e8b8 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14b94:	ea10 0401 	ands.w	r4, r0, r1
   14b98:	d14d      	bne.n	14c36 <bt_enable+0xde>
	ready_cb = cb;
   14b9a:	4b2b      	ldr	r3, [pc, #172]	; (14c48 <bt_enable+0xf0>)
   14b9c:	601f      	str	r7, [r3, #0]
   14b9e:	460a      	mov	r2, r1
   14ba0:	f506 708c 	add.w	r0, r6, #280	; 0x118
   14ba4:	f00b ffbd 	bl	20b22 <z_impl_k_sem_init>
	z_impl_k_queue_init(queue);
   14ba8:	f506 709e 	add.w	r0, r6, #316	; 0x13c
   14bac:	f00b ff98 	bl	20ae0 <z_impl_k_queue_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14bb0:	2200      	movs	r2, #0
   14bb2:	2300      	movs	r3, #0
   14bb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14bb8:	f06f 0308 	mvn.w	r3, #8
   14bbc:	e9cd 4302 	strd	r4, r3, [sp, #8]
   14bc0:	e9cd 4400 	strd	r4, r4, [sp]
   14bc4:	4b21      	ldr	r3, [pc, #132]	; (14c4c <bt_enable+0xf4>)
   14bc6:	4922      	ldr	r1, [pc, #136]	; (14c50 <bt_enable+0xf8>)
   14bc8:	9404      	str	r4, [sp, #16]
   14bca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   14bce:	4821      	ldr	r0, [pc, #132]	; (14c54 <bt_enable+0xfc>)
   14bd0:	f007 fa82 	bl	1c0d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14bd4:	4920      	ldr	r1, [pc, #128]	; (14c58 <bt_enable+0x100>)
   14bd6:	481f      	ldr	r0, [pc, #124]	; (14c54 <bt_enable+0xfc>)
   14bd8:	f00b fef3 	bl	209c2 <z_impl_k_thread_name_set>
	k_work_queue_init(&bt_workq);
   14bdc:	481f      	ldr	r0, [pc, #124]	; (14c5c <bt_enable+0x104>)
   14bde:	f00c f860 	bl	20ca2 <k_work_queue_init>
	k_work_queue_start(&bt_workq, rx_thread_stack,
   14be2:	491f      	ldr	r1, [pc, #124]	; (14c60 <bt_enable+0x108>)
   14be4:	481d      	ldr	r0, [pc, #116]	; (14c5c <bt_enable+0x104>)
   14be6:	9400      	str	r4, [sp, #0]
   14be8:	f06f 0307 	mvn.w	r3, #7
   14bec:	f44f 6280 	mov.w	r2, #1024	; 0x400
   14bf0:	f007 fd82 	bl	1c6f8 <k_work_queue_start>
   14bf4:	491b      	ldr	r1, [pc, #108]	; (14c64 <bt_enable+0x10c>)
   14bf6:	4819      	ldr	r0, [pc, #100]	; (14c5c <bt_enable+0x104>)
   14bf8:	f00b fee3 	bl	209c2 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14bfc:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
   14c00:	68db      	ldr	r3, [r3, #12]
   14c02:	4798      	blx	r3
	if (err) {
   14c04:	4605      	mov	r5, r0
   14c06:	b158      	cbz	r0, 14c20 <bt_enable+0xc8>
		LOG_ERR("HCI driver open failed (%d)", err);
   14c08:	4b17      	ldr	r3, [pc, #92]	; (14c68 <bt_enable+0x110>)
   14c0a:	9003      	str	r0, [sp, #12]
   14c0c:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14c10:	490c      	ldr	r1, [pc, #48]	; (14c44 <bt_enable+0xec>)
   14c12:	9400      	str	r4, [sp, #0]
   14c14:	4623      	mov	r3, r4
   14c16:	2201      	movs	r2, #1
   14c18:	4620      	mov	r0, r4
   14c1a:	f009 fe5c 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>
		return err;
   14c1e:	e7ad      	b.n	14b7c <bt_enable+0x24>
	if (!cb) {
   14c20:	b927      	cbnz	r7, 14c2c <bt_enable+0xd4>
}
   14c22:	b009      	add	sp, #36	; 0x24
   14c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return bt_init();
   14c28:	f7ff bd8a 	b.w	14740 <bt_init>
	k_work_submit(&bt_dev.init);
   14c2c:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
   14c30:	f007 fd5c 	bl	1c6ec <k_work_submit>
	return 0;
   14c34:	e7a2      	b.n	14b7c <bt_enable+0x24>
		return -EALREADY;
   14c36:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14c3a:	e79f      	b.n	14b7c <bt_enable+0x24>
   14c3c:	20000370 	.word	0x20000370
   14c40:	00022b29 	.word	0x00022b29
   14c44:	00021644 	.word	0x00021644
   14c48:	20002538 	.word	0x20002538
   14c4c:	00014479 	.word	0x00014479
   14c50:	200034c0 	.word	0x200034c0
   14c54:	200018c0 	.word	0x200018c0
   14c58:	00022b42 	.word	0x00022b42
   14c5c:	20001940 	.word	0x20001940
   14c60:	20003b00 	.word	0x20003b00
   14c64:	00022b48 	.word	0x00022b48
   14c68:	00022b4e 	.word	0x00022b4e

00014c6c <bt_is_ready>:

	return 0;
}

bool bt_is_ready(void)
{
   14c6c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   14c6e:	4803      	ldr	r0, [pc, #12]	; (14c7c <bt_is_ready+0x10>)
   14c70:	f009 fe19 	bl	1e8a6 <atomic_get>
	return atomic_test_bit(bt_dev.flags, BT_DEV_READY);
}
   14c74:	f3c0 0080 	ubfx	r0, r0, #2, #1
   14c78:	bd08      	pop	{r3, pc}
   14c7a:	bf00      	nop
   14c7c:	2000043c 	.word	0x2000043c

00014c80 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14c80:	4800      	ldr	r0, [pc, #0]	; (14c84 <bt_get_name+0x4>)
   14c82:	4770      	bx	lr
   14c84:	00022b6a 	.word	0x00022b6a

00014c88 <bt_le_filter_accept_list_add>:
	}
}

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_filter_accept_list_add(const bt_addr_le_t *addr)
{
   14c88:	b530      	push	{r4, r5, lr}
   14c8a:	4605      	mov	r5, r0
   14c8c:	b085      	sub	sp, #20
   14c8e:	4817      	ldr	r0, [pc, #92]	; (14cec <bt_le_filter_accept_list_add+0x64>)
   14c90:	f009 fe09 	bl	1e8a6 <atomic_get>
	struct bt_hci_cp_le_add_dev_to_fal *cp;
	struct net_buf *buf;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   14c94:	0743      	lsls	r3, r0, #29
   14c96:	d522      	bpl.n	14cde <bt_le_filter_accept_list_add+0x56>
		return -EAGAIN;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_FAL, sizeof(*cp));
   14c98:	2107      	movs	r1, #7
   14c9a:	f242 0011 	movw	r0, #8209	; 0x2011
   14c9e:	f7ff f80d 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   14ca2:	4604      	mov	r4, r0
   14ca4:	b1f0      	cbz	r0, 14ce4 <bt_le_filter_accept_list_add+0x5c>
   14ca6:	2107      	movs	r1, #7
   14ca8:	300c      	adds	r0, #12
   14caa:	f00b f84f 	bl	1fd4c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
	bt_addr_le_copy(&cp->addr, addr);
   14cae:	4629      	mov	r1, r5
   14cb0:	f009 fdff 	bl	1e8b2 <bt_addr_le_copy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_FAL, buf, NULL);
   14cb4:	4621      	mov	r1, r4
   14cb6:	2200      	movs	r2, #0
   14cb8:	f242 0011 	movw	r0, #8209	; 0x2011
   14cbc:	f7ff f838 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14cc0:	4604      	mov	r4, r0
   14cc2:	b148      	cbz	r0, 14cd8 <bt_le_filter_accept_list_add+0x50>
		LOG_ERR("Failed to add device to filter accept list");
   14cc4:	4b0a      	ldr	r3, [pc, #40]	; (14cf0 <bt_le_filter_accept_list_add+0x68>)
   14cc6:	9302      	str	r3, [sp, #8]
   14cc8:	2300      	movs	r3, #0
   14cca:	e9cd 3300 	strd	r3, r3, [sp]
   14cce:	4909      	ldr	r1, [pc, #36]	; (14cf4 <bt_le_filter_accept_list_add+0x6c>)
   14cd0:	2201      	movs	r2, #1
   14cd2:	4618      	mov	r0, r3
   14cd4:	f009 fdff 	bl	1e8d6 <z_log_msg_runtime_create.constprop.0>

		return err;
	}

	return 0;
}
   14cd8:	4620      	mov	r0, r4
   14cda:	b005      	add	sp, #20
   14cdc:	bd30      	pop	{r4, r5, pc}
		return -EAGAIN;
   14cde:	f06f 040a 	mvn.w	r4, #10
   14ce2:	e7f9      	b.n	14cd8 <bt_le_filter_accept_list_add+0x50>
		return -ENOBUFS;
   14ce4:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14ce8:	e7f6      	b.n	14cd8 <bt_le_filter_accept_list_add+0x50>
   14cea:	bf00      	nop
   14cec:	2000043c 	.word	0x2000043c
   14cf0:	00022b79 	.word	0x00022b79
   14cf4:	00021644 	.word	0x00021644

00014cf8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14cfa:	4f0a      	ldr	r7, [pc, #40]	; (14d24 <id_find+0x2c>)
{
   14cfc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14cfe:	2500      	movs	r5, #0
   14d00:	79fb      	ldrb	r3, [r7, #7]
   14d02:	b2ec      	uxtb	r4, r5
   14d04:	42a3      	cmp	r3, r4
   14d06:	d802      	bhi.n	14d0e <id_find+0x16>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14d08:	f06f 0001 	mvn.w	r0, #1
   14d0c:	e009      	b.n	14d22 <id_find+0x2a>
		if (bt_addr_le_eq(addr, &bt_dev.id_addr[id])) {
   14d0e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
   14d12:	4439      	add	r1, r7
   14d14:	4630      	mov	r0, r6
   14d16:	f009 fe82 	bl	1ea1e <bt_addr_le_eq>
   14d1a:	3501      	adds	r5, #1
   14d1c:	2800      	cmp	r0, #0
   14d1e:	d0ef      	beq.n	14d00 <id_find+0x8>
   14d20:	4620      	mov	r0, r4
}
   14d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14d24:	20000370 	.word	0x20000370

00014d28 <set_random_address>:
{
   14d28:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14d2a:	4913      	ldr	r1, [pc, #76]	; (14d78 <set_random_address+0x50>)
   14d2c:	2206      	movs	r2, #6
   14d2e:	4605      	mov	r5, r0
   14d30:	f009 fd16 	bl	1e760 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14d34:	b1d8      	cbz	r0, 14d6e <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14d36:	2106      	movs	r1, #6
   14d38:	f242 0005 	movw	r0, #8197	; 0x2005
   14d3c:	f7fe ffbe 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   14d40:	4604      	mov	r4, r0
   14d42:	b1b0      	cbz	r0, 14d72 <set_random_address+0x4a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14d44:	2206      	movs	r2, #6
   14d46:	4629      	mov	r1, r5
   14d48:	300c      	adds	r0, #12
   14d4a:	f00b f805 	bl	1fd58 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14d4e:	2200      	movs	r2, #0
   14d50:	4621      	mov	r1, r4
   14d52:	f242 0005 	movw	r0, #8197	; 0x2005
   14d56:	f7fe ffeb 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14d5a:	b948      	cbnz	r0, 14d70 <set_random_address+0x48>
	memcpy(dst, src, sizeof(*dst));
   14d5c:	2206      	movs	r2, #6
   14d5e:	4806      	ldr	r0, [pc, #24]	; (14d78 <set_random_address+0x50>)
   14d60:	4629      	mov	r1, r5
   14d62:	f009 fd0d 	bl	1e780 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14d66:	4b05      	ldr	r3, [pc, #20]	; (14d7c <set_random_address+0x54>)
   14d68:	2201      	movs	r2, #1
   14d6a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		return 0;
   14d6e:	2000      	movs	r0, #0
}
   14d70:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14d72:	f06f 0068 	mvn.w	r0, #104	; 0x68
   14d76:	e7fb      	b.n	14d70 <set_random_address+0x48>
   14d78:	200003d1 	.word	0x200003d1
   14d7c:	20000370 	.word	0x20000370

00014d80 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   14d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14d82:	4604      	mov	r4, r0
{
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14d84:	460d      	mov	r5, r1
   14d86:	b179      	cbz	r1, 14da8 <id_create.constprop.0+0x28>
   14d88:	4914      	ldr	r1, [pc, #80]	; (14ddc <id_create.constprop.0+0x5c>)
   14d8a:	4628      	mov	r0, r5
   14d8c:	f009 fe47 	bl	1ea1e <bt_addr_le_eq>
   14d90:	b950      	cbnz	r0, 14da8 <id_create.constprop.0+0x28>
	memcpy(dst, src, sizeof(*dst));
   14d92:	4813      	ldr	r0, [pc, #76]	; (14de0 <id_create.constprop.0+0x60>)
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   14d94:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14d98:	2207      	movs	r2, #7
   14d9a:	4629      	mov	r1, r5
   14d9c:	4420      	add	r0, r4
   14d9e:	f009 fcef 	bl	1e780 <memcpy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   14da2:	2000      	movs	r0, #0
}
   14da4:	b003      	add	sp, #12
   14da6:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   14da8:	4668      	mov	r0, sp
   14daa:	f009 fd5b 	bl	1e864 <bt_addr_le_create_static>
			if (err) {
   14dae:	2800      	cmp	r0, #0
   14db0:	d1f8      	bne.n	14da4 <id_create.constprop.0+0x24>
		} while (id_find(&new_addr) >= 0);
   14db2:	4668      	mov	r0, sp
   14db4:	f7ff ffa0 	bl	14cf8 <id_find>
   14db8:	2800      	cmp	r0, #0
   14dba:	daf5      	bge.n	14da8 <id_create.constprop.0+0x28>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   14dbc:	4b08      	ldr	r3, [pc, #32]	; (14de0 <id_create.constprop.0+0x60>)
   14dbe:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   14dc2:	441c      	add	r4, r3
   14dc4:	2207      	movs	r2, #7
   14dc6:	4669      	mov	r1, sp
   14dc8:	4620      	mov	r0, r4
   14dca:	f009 fcd9 	bl	1e780 <memcpy>
		if (addr) {
   14dce:	2d00      	cmp	r5, #0
   14dd0:	d0e7      	beq.n	14da2 <id_create.constprop.0+0x22>
   14dd2:	2207      	movs	r2, #7
   14dd4:	4621      	mov	r1, r4
   14dd6:	4628      	mov	r0, r5
   14dd8:	e7e1      	b.n	14d9e <id_create.constprop.0+0x1e>
   14dda:	bf00      	nop
   14ddc:	000225d1 	.word	0x000225d1
   14de0:	20000370 	.word	0x20000370

00014de4 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   14de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14de6:	460d      	mov	r5, r1
	int new_id, err;

	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14de8:	4604      	mov	r4, r0
   14dea:	b920      	cbnz	r0, 14df6 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   14dec:	b31d      	cbz	r5, 14e36 <bt_id_create+0x52>
			return -EINVAL;
   14dee:	f06f 0015 	mvn.w	r0, #21
	} else {
		bt_dev.id_count++;
	}

	return new_id;
}
   14df2:	b004      	add	sp, #16
   14df4:	bd70      	pop	{r4, r5, r6, pc}
	if (addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY)) {
   14df6:	4922      	ldr	r1, [pc, #136]	; (14e80 <bt_id_create+0x9c>)
   14df8:	f009 fe11 	bl	1ea1e <bt_addr_le_eq>
   14dfc:	2800      	cmp	r0, #0
   14dfe:	d1f5      	bne.n	14dec <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   14e00:	7823      	ldrb	r3, [r4, #0]
   14e02:	2b01      	cmp	r3, #1
   14e04:	d104      	bne.n	14e10 <bt_id_create+0x2c>
   14e06:	79a3      	ldrb	r3, [r4, #6]
   14e08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   14e0c:	2bc0      	cmp	r3, #192	; 0xc0
   14e0e:	d00a      	beq.n	14e26 <bt_id_create+0x42>
			LOG_ERR("Only static random identity address supported");
   14e10:	4b1c      	ldr	r3, [pc, #112]	; (14e84 <bt_id_create+0xa0>)
   14e12:	9302      	str	r3, [sp, #8]
   14e14:	2300      	movs	r3, #0
   14e16:	e9cd 3300 	strd	r3, r3, [sp]
   14e1a:	491b      	ldr	r1, [pc, #108]	; (14e88 <bt_id_create+0xa4>)
   14e1c:	2201      	movs	r2, #1
   14e1e:	4618      	mov	r0, r3
   14e20:	f009 fe05 	bl	1ea2e <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   14e24:	e7e3      	b.n	14dee <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   14e26:	4620      	mov	r0, r4
   14e28:	f7ff ff66 	bl	14cf8 <id_find>
   14e2c:	2800      	cmp	r0, #0
   14e2e:	dbdd      	blt.n	14dec <bt_id_create+0x8>
			return -EALREADY;
   14e30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14e34:	e7dd      	b.n	14df2 <bt_id_create+0xe>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   14e36:	4d15      	ldr	r5, [pc, #84]	; (14e8c <bt_id_create+0xa8>)
   14e38:	79eb      	ldrb	r3, [r5, #7]
   14e3a:	2b01      	cmp	r3, #1
   14e3c:	d01c      	beq.n	14e78 <bt_id_create+0x94>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14e3e:	f3bf 8f5b 	dmb	ish
   14e42:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   14e46:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14e4a:	07db      	lsls	r3, r3, #31
   14e4c:	d50b      	bpl.n	14e66 <bt_id_create+0x82>
	new_id = bt_dev.id_count;
   14e4e:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   14e50:	4621      	mov	r1, r4
   14e52:	4630      	mov	r0, r6
   14e54:	f7ff ff94 	bl	14d80 <id_create.constprop.0>
	if (err) {
   14e58:	2800      	cmp	r0, #0
   14e5a:	d1ca      	bne.n	14df2 <bt_id_create+0xe>
		bt_dev.id_count++;
   14e5c:	79eb      	ldrb	r3, [r5, #7]
   14e5e:	3301      	adds	r3, #1
	new_id = bt_dev.id_count;
   14e60:	4630      	mov	r0, r6
		bt_dev.id_count++;
   14e62:	71eb      	strb	r3, [r5, #7]
	return new_id;
   14e64:	e7c5      	b.n	14df2 <bt_id_create+0xe>
		if (!(addr && !bt_addr_le_eq(addr, BT_ADDR_LE_ANY))) {
   14e66:	2c00      	cmp	r4, #0
   14e68:	d0c1      	beq.n	14dee <bt_id_create+0xa>
   14e6a:	4905      	ldr	r1, [pc, #20]	; (14e80 <bt_id_create+0x9c>)
   14e6c:	4620      	mov	r0, r4
   14e6e:	f009 fdd6 	bl	1ea1e <bt_addr_le_eq>
   14e72:	2800      	cmp	r0, #0
   14e74:	d0eb      	beq.n	14e4e <bt_id_create+0x6a>
   14e76:	e7ba      	b.n	14dee <bt_id_create+0xa>
		return -ENOMEM;
   14e78:	f06f 000b 	mvn.w	r0, #11
   14e7c:	e7b9      	b.n	14df2 <bt_id_create+0xe>
   14e7e:	bf00      	nop
   14e80:	000225d1 	.word	0x000225d1
   14e84:	00022bb0 	.word	0x00022bb0
   14e88:	0002164c 	.word	0x0002164c
   14e8c:	20000370 	.word	0x20000370

00014e90 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   14e90:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	CHECKIF(addr == NULL) {
   14e92:	4604      	mov	r4, r0
{
   14e94:	b086      	sub	sp, #24
	CHECKIF(addr == NULL) {
   14e96:	b958      	cbnz	r0, 14eb0 <bt_id_read_public_addr+0x20>
		LOG_WRN("Invalid input parameters");
   14e98:	4b1d      	ldr	r3, [pc, #116]	; (14f10 <bt_id_read_public_addr+0x80>)
   14e9a:	491e      	ldr	r1, [pc, #120]	; (14f14 <bt_id_read_public_addr+0x84>)
   14e9c:	9000      	str	r0, [sp, #0]
   14e9e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   14ea2:	2202      	movs	r2, #2
   14ea4:	4603      	mov	r3, r0
	}

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read public address");
   14ea6:	f009 fdc2 	bl	1ea2e <z_log_msg_runtime_create.constprop.0>
		return 0U;
   14eaa:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   14eac:	b006      	add	sp, #24
   14eae:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   14eb0:	aa05      	add	r2, sp, #20
   14eb2:	2100      	movs	r1, #0
   14eb4:	f241 0009 	movw	r0, #4105	; 0x1009
   14eb8:	f7fe ff3a 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14ebc:	4606      	mov	r6, r0
   14ebe:	b140      	cbz	r0, 14ed2 <bt_id_read_public_addr+0x42>
		LOG_WRN("Failed to read public address");
   14ec0:	4b15      	ldr	r3, [pc, #84]	; (14f18 <bt_id_read_public_addr+0x88>)
   14ec2:	9302      	str	r3, [sp, #8]
   14ec4:	2300      	movs	r3, #0
   14ec6:	e9cd 3300 	strd	r3, r3, [sp]
   14eca:	4912      	ldr	r1, [pc, #72]	; (14f14 <bt_id_read_public_addr+0x84>)
   14ecc:	2202      	movs	r2, #2
   14ece:	4618      	mov	r0, r3
   14ed0:	e7e9      	b.n	14ea6 <bt_id_read_public_addr+0x16>
	rp = (void *)rsp->data;
   14ed2:	9b05      	ldr	r3, [sp, #20]
	return memcmp(a, b, sizeof(*a));
   14ed4:	4911      	ldr	r1, [pc, #68]	; (14f1c <bt_id_read_public_addr+0x8c>)
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14ed6:	68dd      	ldr	r5, [r3, #12]
   14ed8:	3501      	adds	r5, #1
   14eda:	2206      	movs	r2, #6
   14edc:	4628      	mov	r0, r5
   14ede:	f009 fc3f 	bl	1e760 <memcmp>
   14ee2:	b918      	cbnz	r0, 14eec <bt_id_read_public_addr+0x5c>
		net_buf_unref(rsp);
   14ee4:	9805      	ldr	r0, [sp, #20]
   14ee6:	f003 fa4b 	bl	18380 <net_buf_unref>
		return 0U;
   14eea:	e7de      	b.n	14eaa <bt_id_read_public_addr+0x1a>
   14eec:	490c      	ldr	r1, [pc, #48]	; (14f20 <bt_id_read_public_addr+0x90>)
   14eee:	2206      	movs	r2, #6
   14ef0:	4628      	mov	r0, r5
   14ef2:	f009 fc35 	bl	1e760 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   14ef6:	2800      	cmp	r0, #0
   14ef8:	d0f4      	beq.n	14ee4 <bt_id_read_public_addr+0x54>
	memcpy(dst, src, sizeof(*dst));
   14efa:	2206      	movs	r2, #6
   14efc:	4629      	mov	r1, r5
   14efe:	1c60      	adds	r0, r4, #1
   14f00:	f009 fc3e 	bl	1e780 <memcpy>
	net_buf_unref(rsp);
   14f04:	9805      	ldr	r0, [sp, #20]
	addr->type = BT_ADDR_LE_PUBLIC;
   14f06:	7026      	strb	r6, [r4, #0]
	net_buf_unref(rsp);
   14f08:	f003 fa3a 	bl	18380 <net_buf_unref>
	return 1U;
   14f0c:	2001      	movs	r0, #1
   14f0e:	e7cd      	b.n	14eac <bt_id_read_public_addr+0x1c>
   14f10:	00022bde 	.word	0x00022bde
   14f14:	0002164c 	.word	0x0002164c
   14f18:	00022bf7 	.word	0x00022bf7
   14f1c:	000225de 	.word	0x000225de
   14f20:	000225d8 	.word	0x000225d8

00014f24 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   14f24:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   14f26:	4668      	mov	r0, sp
   14f28:	f7ff ffb2 	bl	14e90 <bt_id_read_public_addr>
   14f2c:	4b04      	ldr	r3, [pc, #16]	; (14f40 <bt_setup_public_id_addr+0x1c>)
   14f2e:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   14f30:	b118      	cbz	r0, 14f3a <bt_setup_public_id_addr+0x16>
		if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
			atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
		}
	}

	return id_create(BT_ID_DEFAULT, &addr, irk);
   14f32:	4669      	mov	r1, sp
   14f34:	2000      	movs	r0, #0
   14f36:	f7ff ff23 	bl	14d80 <id_create.constprop.0>
}
   14f3a:	b003      	add	sp, #12
   14f3c:	f85d fb04 	ldr.w	pc, [sp], #4
   14f40:	20000370 	.word	0x20000370

00014f44 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   14f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14f48:	4b23      	ldr	r3, [pc, #140]	; (14fd8 <bt_read_static_addr+0x94>)
   14f4a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
   14f4e:	f013 0301 	ands.w	r3, r3, #1
{
   14f52:	b086      	sub	sp, #24
   14f54:	4607      	mov	r7, r0
   14f56:	4688      	mov	r8, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   14f58:	d10d      	bne.n	14f76 <bt_read_static_addr+0x32>
		LOG_WRN("Read Static Addresses command not available");
   14f5a:	4a20      	ldr	r2, [pc, #128]	; (14fdc <bt_read_static_addr+0x98>)
   14f5c:	9202      	str	r2, [sp, #8]
		return 0;
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
	if (err) {
		LOG_WRN("Failed to read static addresses");
   14f5e:	e9cd 3300 	strd	r3, r3, [sp]
   14f62:	491f      	ldr	r1, [pc, #124]	; (14fe0 <bt_read_static_addr+0x9c>)
   14f64:	2202      	movs	r2, #2
   14f66:	4618      	mov	r0, r3
   14f68:	f009 fd61 	bl	1ea2e <z_log_msg_runtime_create.constprop.0>
		return 0;
   14f6c:	2400      	movs	r4, #0
	if (!cnt) {
		LOG_WRN("No static addresses stored in controller");
	}

	return cnt;
}
   14f6e:	4620      	mov	r0, r4
   14f70:	b006      	add	sp, #24
   14f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   14f76:	aa05      	add	r2, sp, #20
   14f78:	2100      	movs	r1, #0
   14f7a:	f64f 4009 	movw	r0, #64521	; 0xfc09
   14f7e:	f7fe fed7 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   14f82:	4605      	mov	r5, r0
   14f84:	b118      	cbz	r0, 14f8e <bt_read_static_addr+0x4a>
		LOG_WRN("Failed to read static addresses");
   14f86:	4b17      	ldr	r3, [pc, #92]	; (14fe4 <bt_read_static_addr+0xa0>)
   14f88:	9302      	str	r3, [sp, #8]
   14f8a:	2300      	movs	r3, #0
   14f8c:	e7e7      	b.n	14f5e <bt_read_static_addr+0x1a>
	rp = (void *)rsp->data;
   14f8e:	9b05      	ldr	r3, [sp, #20]
   14f90:	68de      	ldr	r6, [r3, #12]
	cnt = MIN(rp->num_addrs, size);
   14f92:	7874      	ldrb	r4, [r6, #1]
   14f94:	4544      	cmp	r4, r8
   14f96:	bf28      	it	cs
   14f98:	4644      	movcs	r4, r8
	for (i = 0; i < cnt; i++) {
   14f9a:	3602      	adds	r6, #2
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14f9c:	f04f 0816 	mov.w	r8, #22
	for (i = 0; i < cnt; i++) {
   14fa0:	42ac      	cmp	r4, r5
   14fa2:	dc0f      	bgt.n	14fc4 <bt_read_static_addr+0x80>
	net_buf_unref(rsp);
   14fa4:	9805      	ldr	r0, [sp, #20]
   14fa6:	f003 f9eb 	bl	18380 <net_buf_unref>
	if (!cnt) {
   14faa:	2c00      	cmp	r4, #0
   14fac:	d1df      	bne.n	14f6e <bt_read_static_addr+0x2a>
		LOG_WRN("No static addresses stored in controller");
   14fae:	4b0e      	ldr	r3, [pc, #56]	; (14fe8 <bt_read_static_addr+0xa4>)
   14fb0:	490b      	ldr	r1, [pc, #44]	; (14fe0 <bt_read_static_addr+0x9c>)
   14fb2:	9400      	str	r4, [sp, #0]
   14fb4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   14fb8:	2202      	movs	r2, #2
   14fba:	4623      	mov	r3, r4
   14fbc:	4620      	mov	r0, r4
   14fbe:	f009 fd36 	bl	1ea2e <z_log_msg_runtime_create.constprop.0>
   14fc2:	e7d4      	b.n	14f6e <bt_read_static_addr+0x2a>
		memcpy(&addrs[i], &rp->a[i], sizeof(struct bt_hci_vs_static_addr));
   14fc4:	4631      	mov	r1, r6
   14fc6:	fb08 7005 	mla	r0, r8, r5, r7
   14fca:	2216      	movs	r2, #22
   14fcc:	f009 fbd8 	bl	1e780 <memcpy>
	for (i = 0; i < cnt; i++) {
   14fd0:	3501      	adds	r5, #1
   14fd2:	3616      	adds	r6, #22
   14fd4:	e7e4      	b.n	14fa0 <bt_read_static_addr+0x5c>
   14fd6:	bf00      	nop
   14fd8:	20000370 	.word	0x20000370
   14fdc:	00022c15 	.word	0x00022c15
   14fe0:	0002164c 	.word	0x0002164c
   14fe4:	00022c41 	.word	0x00022c41
   14fe8:	00022c61 	.word	0x00022c61

00014fec <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   14fec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   14fee:	4e15      	ldr	r6, [pc, #84]	; (15044 <bt_setup_random_id_addr+0x58>)
   14ff0:	79f4      	ldrb	r4, [r6, #7]
{
   14ff2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   14ff4:	b92c      	cbnz	r4, 15002 <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   14ff6:	2101      	movs	r1, #1
   14ff8:	a802      	add	r0, sp, #8
   14ffa:	f7ff ffa3 	bl	14f44 <bt_read_static_addr>
   14ffe:	71f0      	strb	r0, [r6, #7]

		if (bt_dev.id_count) {
   15000:	b9c8      	cbnz	r0, 15036 <bt_setup_random_id_addr+0x4a>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   15002:	2100      	movs	r1, #0
   15004:	4608      	mov	r0, r1
}
   15006:	b009      	add	sp, #36	; 0x24
   15008:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   1500c:	f7ff beea 	b.w	14de4 <bt_id_create>
   15010:	ab02      	add	r3, sp, #8
   15012:	fb07 3105 	mla	r1, r7, r5, r3
   15016:	2206      	movs	r2, #6
   15018:	f10d 0001 	add.w	r0, sp, #1
   1501c:	f009 fbb0 	bl	1e780 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   15020:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   15022:	4669      	mov	r1, sp
   15024:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
   15026:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1502a:	f7ff fea9 	bl	14d80 <id_create.constprop.0>
				if (err) {
   1502e:	3401      	adds	r4, #1
   15030:	b110      	cbz	r0, 15038 <bt_setup_random_id_addr+0x4c>
}
   15032:	b009      	add	sp, #36	; 0x24
   15034:	bdf0      	pop	{r4, r5, r6, r7, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   15036:	2716      	movs	r7, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   15038:	79f3      	ldrb	r3, [r6, #7]
   1503a:	b2e5      	uxtb	r5, r4
   1503c:	42ab      	cmp	r3, r5
   1503e:	d8e7      	bhi.n	15010 <bt_setup_random_id_addr+0x24>
			return 0;
   15040:	2000      	movs	r0, #0
   15042:	e7f6      	b.n	15032 <bt_setup_random_id_addr+0x46>
   15044:	20000370 	.word	0x20000370

00015048 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   15048:	b538      	push	{r3, r4, r5, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   1504a:	460c      	mov	r4, r1
   1504c:	b169      	cbz	r1, 1506a <bt_id_set_create_conn_own_addr+0x22>

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1504e:	4d08      	ldr	r5, [pc, #32]	; (15070 <bt_id_set_create_conn_own_addr+0x28>)
   15050:	782b      	ldrb	r3, [r5, #0]
   15052:	2b01      	cmp	r3, #1
   15054:	d003      	beq.n	1505e <bt_id_set_create_conn_own_addr+0x16>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   15056:	782b      	ldrb	r3, [r5, #0]
   15058:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1505a:	2000      	movs	r0, #0
}
   1505c:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   1505e:	1c68      	adds	r0, r5, #1
   15060:	f7ff fe62 	bl	14d28 <set_random_address>
			if (err) {
   15064:	2800      	cmp	r0, #0
   15066:	d0f6      	beq.n	15056 <bt_id_set_create_conn_own_addr+0xe>
   15068:	e7f8      	b.n	1505c <bt_id_set_create_conn_own_addr+0x14>
		return -EINVAL;
   1506a:	f06f 0015 	mvn.w	r0, #21
   1506e:	e7f5      	b.n	1505c <bt_id_set_create_conn_own_addr+0x14>
   15070:	20000370 	.word	0x20000370

00015074 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   15074:	b510      	push	{r4, lr}
	int err;

	CHECKIF(own_addr_type == NULL) {
   15076:	460c      	mov	r4, r1
   15078:	b149      	cbz	r1, 1508e <bt_id_set_scan_own_addr+0x1a>
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1507a:	4b06      	ldr	r3, [pc, #24]	; (15094 <bt_id_set_scan_own_addr+0x20>)
   1507c:	781b      	ldrb	r3, [r3, #0]
   1507e:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   15080:	2000      	movs	r0, #0
   15082:	f009 fce8 	bl	1ea56 <bt_id_set_private_addr>
			if (err) {
   15086:	b908      	cbnz	r0, 1508c <bt_id_set_scan_own_addr+0x18>

				LOG_WRN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   15088:	2301      	movs	r3, #1
   1508a:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1508c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1508e:	f06f 0015 	mvn.w	r0, #21
   15092:	e7fb      	b.n	1508c <bt_id_set_scan_own_addr+0x18>
   15094:	20000370 	.word	0x20000370

00015098 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15098:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1509a:	4e13      	ldr	r6, [pc, #76]	; (150e8 <bt_id_init+0x50>)
   1509c:	79f5      	ldrb	r5, [r6, #7]
   1509e:	b11d      	cbz	r5, 150a8 <bt_id_init+0x10>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   150a0:	2400      	movs	r4, #0
}
   150a2:	4620      	mov	r0, r4
   150a4:	b004      	add	sp, #16
   150a6:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_setup_public_id_addr();
   150a8:	f7ff ff3c 	bl	14f24 <bt_setup_public_id_addr>
		if (err) {
   150ac:	4604      	mov	r4, r0
   150ae:	b150      	cbz	r0, 150c6 <bt_id_init+0x2e>
			LOG_ERR("Unable to set identity address");
   150b0:	4b0e      	ldr	r3, [pc, #56]	; (150ec <bt_id_init+0x54>)
			LOG_ERR("Unable to set random address");
   150b2:	490f      	ldr	r1, [pc, #60]	; (150f0 <bt_id_init+0x58>)
   150b4:	9500      	str	r5, [sp, #0]
   150b6:	e9cd 5301 	strd	r5, r3, [sp, #4]
   150ba:	2201      	movs	r2, #1
   150bc:	462b      	mov	r3, r5
   150be:	4628      	mov	r0, r5
   150c0:	f009 fcb5 	bl	1ea2e <z_log_msg_runtime_create.constprop.0>
			return err;
   150c4:	e7ed      	b.n	150a2 <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   150c6:	79f5      	ldrb	r5, [r6, #7]
   150c8:	2d00      	cmp	r5, #0
   150ca:	d1e9      	bne.n	150a0 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   150cc:	f7ff ff8e 	bl	14fec <bt_setup_random_id_addr>
		if (err) {
   150d0:	4604      	mov	r4, r0
   150d2:	2800      	cmp	r0, #0
   150d4:	d1ec      	bne.n	150b0 <bt_id_init+0x18>
		err = set_random_address(&bt_dev.id_addr[0].a);
   150d6:	1c70      	adds	r0, r6, #1
   150d8:	f7ff fe26 	bl	14d28 <set_random_address>
		if (err) {
   150dc:	4604      	mov	r4, r0
   150de:	2800      	cmp	r0, #0
   150e0:	d0de      	beq.n	150a0 <bt_id_init+0x8>
			LOG_ERR("Unable to set random address");
   150e2:	4b04      	ldr	r3, [pc, #16]	; (150f4 <bt_id_init+0x5c>)
   150e4:	e7e5      	b.n	150b2 <bt_id_init+0x1a>
   150e6:	bf00      	nop
   150e8:	20000370 	.word	0x20000370
   150ec:	00022c8a 	.word	0x00022c8a
   150f0:	0002164c 	.word	0x0002164c
   150f4:	00022ca9 	.word	0x00022ca9

000150f8 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   150f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   150fa:	ab0b      	add	r3, sp, #44	; 0x2c
   150fc:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
   150fe:	9303      	str	r3, [sp, #12]
   15100:	4b05      	ldr	r3, [pc, #20]	; (15118 <z_log_msg_runtime_create.constprop.0+0x20>)
   15102:	9302      	str	r3, [sp, #8]
   15104:	2300      	movs	r3, #0
   15106:	e9cd 3300 	strd	r3, r3, [sp]
   1510a:	2201      	movs	r2, #1
   1510c:	4618      	mov	r0, r3
   1510e:	f7fc fe61 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   15112:	b007      	add	sp, #28
   15114:	f85d fb04 	ldr.w	pc, [sp], #4
   15118:	00022ccc 	.word	0x00022ccc

0001511c <atomic_get.constprop.0>:
   1511c:	4b03      	ldr	r3, [pc, #12]	; (1512c <atomic_get.constprop.0+0x10>)
   1511e:	f3bf 8f5b 	dmb	ish
   15122:	6818      	ldr	r0, [r3, #0]
   15124:	f3bf 8f5b 	dmb	ish
}
   15128:	4770      	bx	lr
   1512a:	bf00      	nop
   1512c:	2000043c 	.word	0x2000043c

00015130 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   15130:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15132:	2102      	movs	r1, #2
{
   15134:	b087      	sub	sp, #28
   15136:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   15138:	f242 000c 	movw	r0, #8204	; 0x200c
   1513c:	f7fe fdbe 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   15140:	4605      	mov	r5, r0
   15142:	b300      	cbz	r0, 15186 <bt_le_scan_set_enable_legacy+0x56>
	return net_buf_simple_add(&buf->b, len);
   15144:	2102      	movs	r1, #2
   15146:	300c      	adds	r0, #12
   15148:	f00a fe00 	bl	1fd4c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1514c:	2c01      	cmp	r4, #1
   1514e:	4602      	mov	r2, r0
   15150:	d117      	bne.n	15182 <bt_le_scan_set_enable_legacy+0x52>
   15152:	f7ff ffe3 	bl	1511c <atomic_get.constprop.0>
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15156:	f3c0 2040 	ubfx	r0, r0, #9, #1
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1515a:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   1515c:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1515e:	425c      	negs	r4, r3
   15160:	415c      	adcs	r4, r3
		cp->filter_dup = atomic_test_bit(bt_dev.flags,
   15162:	7050      	strb	r0, [r2, #1]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   15164:	a903      	add	r1, sp, #12
   15166:	4a09      	ldr	r2, [pc, #36]	; (1518c <bt_le_scan_set_enable_legacy+0x5c>)
   15168:	9400      	str	r4, [sp, #0]
   1516a:	4628      	mov	r0, r5
   1516c:	2306      	movs	r3, #6
   1516e:	f7fe fd93 	bl	13c98 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   15172:	2200      	movs	r2, #0
   15174:	4629      	mov	r1, r5
   15176:	f242 000c 	movw	r0, #8204	; 0x200c
   1517a:	f7fe fdd9 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1517e:	b007      	add	sp, #28
   15180:	bd30      	pop	{r4, r5, pc}
   15182:	2000      	movs	r0, #0
   15184:	e7e9      	b.n	1515a <bt_le_scan_set_enable_legacy+0x2a>
		return -ENOBUFS;
   15186:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1518a:	e7f8      	b.n	1517e <bt_le_scan_set_enable_legacy+0x4e>
   1518c:	2000043c 	.word	0x2000043c

00015190 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   15190:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15192:	4605      	mov	r5, r0
   15194:	4614      	mov	r4, r2
   15196:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
   15198:	2207      	movs	r2, #7
   1519a:	2100      	movs	r1, #0
   1519c:	4668      	mov	r0, sp
   1519e:	f009 fafa 	bl	1e796 <memset>

	/* for the rest parameters apply default values according to
	 *  spec 4.2, vol2, part E, 7.8.10
	 */
	set_param.interval = sys_cpu_to_le16(interval);
	set_param.window = sys_cpu_to_le16(window);
   151a2:	f8ad 4003 	strh.w	r4, [sp, #3]
	set_param.scan_type = scan_type;
   151a6:	f88d 5000 	strb.w	r5, [sp]
	set_param.interval = sys_cpu_to_le16(interval);
   151aa:	f8ad 6001 	strh.w	r6, [sp, #1]
   151ae:	f7ff ffb5 	bl	1511c <atomic_get.constprop.0>
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   151b2:	1e6b      	subs	r3, r5, #1
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   151b4:	f3c0 2080 	ubfx	r0, r0, #10, #1
   151b8:	f88d 0006 	strb.w	r0, [sp, #6]
   151bc:	4258      	negs	r0, r3
   151be:	f10d 0105 	add.w	r1, sp, #5
   151c2:	4158      	adcs	r0, r3
   151c4:	f7ff ff56 	bl	15074 <bt_id_set_scan_own_addr>
	if (err) {
   151c8:	4604      	mov	r4, r0
   151ca:	b9f8      	cbnz	r0, 1520c <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   151cc:	2107      	movs	r1, #7
   151ce:	f242 000b 	movw	r0, #8203	; 0x200b
   151d2:	f7fe fd73 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   151d6:	4606      	mov	r6, r0
   151d8:	b308      	cbz	r0, 1521e <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   151da:	2207      	movs	r2, #7
   151dc:	4669      	mov	r1, sp
   151de:	300c      	adds	r0, #12
   151e0:	f00a fdba 	bl	1fd58 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   151e4:	4622      	mov	r2, r4
   151e6:	4631      	mov	r1, r6
   151e8:	f242 000b 	movw	r0, #8203	; 0x200b
   151ec:	f7fe fda0 	bl	13d30 <bt_hci_cmd_send_sync>
	if (err) {
   151f0:	4604      	mov	r4, r0
   151f2:	b958      	cbnz	r0, 1520c <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   151f4:	2001      	movs	r0, #1
   151f6:	f7ff ff9b 	bl	15130 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   151fa:	4604      	mov	r4, r0
   151fc:	b930      	cbnz	r0, 1520c <start_le_scan_legacy+0x7c>
	if (val) {
   151fe:	2d01      	cmp	r5, #1
   15200:	d107      	bne.n	15212 <start_le_scan_legacy+0x82>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15202:	4808      	ldr	r0, [pc, #32]	; (15224 <start_le_scan_legacy+0x94>)
   15204:	f44f 7180 	mov.w	r1, #256	; 0x100
   15208:	f009 fc3d 	bl	1ea86 <atomic_or>
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1520c:	4620      	mov	r0, r4
   1520e:	b002      	add	sp, #8
   15210:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15212:	f46f 7180 	mvn.w	r1, #256	; 0x100
   15216:	4803      	ldr	r0, [pc, #12]	; (15224 <start_le_scan_legacy+0x94>)
   15218:	f009 fc44 	bl	1eaa4 <atomic_and>
   1521c:	e7f6      	b.n	1520c <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   1521e:	f06f 0468 	mvn.w	r4, #104	; 0x68
   15222:	e7f3      	b.n	1520c <start_le_scan_legacy+0x7c>
   15224:	2000043c 	.word	0x2000043c

00015228 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   15228:	4b01      	ldr	r3, [pc, #4]	; (15230 <bt_scan_reset+0x8>)
   1522a:	2200      	movs	r2, #0
   1522c:	601a      	str	r2, [r3, #0]
}
   1522e:	4770      	bx	lr
   15230:	20002544 	.word	0x20002544

00015234 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   15234:	b570      	push	{r4, r5, r6, lr}
   15236:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15238:	f7ff ff70 	bl	1511c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1523c:	0601      	lsls	r1, r0, #24
   1523e:	f3c0 12c0 	ubfx	r2, r0, #7, #1
   15242:	d42d      	bmi.n	152a0 <bt_le_scan_update+0x6c>
   15244:	f7ff ff6a 	bl	1511c <atomic_get.constprop.0>
		return 0;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15248:	0643      	lsls	r3, r0, #25
   1524a:	d421      	bmi.n	15290 <bt_le_scan_update+0x5c>

	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		struct bt_conn *conn;

		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1524c:	2100      	movs	r1, #0
   1524e:	2206      	movs	r2, #6
   15250:	4608      	mov	r0, r1
   15252:	f000 fdbf 	bl	15dd4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING);
		if (conn) {
   15256:	4604      	mov	r4, r0
   15258:	bb00      	cbnz	r0, 1529c <bt_le_scan_update+0x68>
			bt_conn_unref(conn);
			return 0;
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1525a:	2202      	movs	r2, #2
   1525c:	4601      	mov	r1, r0
   1525e:	f000 fdb9 	bl	15dd4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECTING_SCAN);
		if (conn) {
   15262:	4605      	mov	r5, r0
   15264:	b1e0      	cbz	r0, 152a0 <bt_le_scan_update+0x6c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   15266:	f44f 7100 	mov.w	r1, #512	; 0x200
   1526a:	480e      	ldr	r0, [pc, #56]	; (152a4 <bt_le_scan_update+0x70>)
   1526c:	f009 fc0b 	bl	1ea86 <atomic_or>
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   15270:	4628      	mov	r0, r5
   15272:	f009 fcb1 	bl	1ebd8 <bt_conn_unref>
		window = BT_GAP_SCAN_FAST_WINDOW;
   15276:	2e00      	cmp	r6, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   15278:	4620      	mov	r0, r4
   1527a:	bf08      	it	eq
   1527c:	2212      	moveq	r2, #18
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1527e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   15282:	bf16      	itet	ne
   15284:	2230      	movne	r2, #48	; 0x30
   15286:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   1528a:	2160      	movne	r1, #96	; 0x60
   1528c:	f7ff bf80 	b.w	15190 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   15290:	4610      	mov	r0, r2
   15292:	f7ff ff4d 	bl	15130 <bt_le_scan_set_enable_legacy>
		if (err) {
   15296:	2800      	cmp	r0, #0
   15298:	d0d8      	beq.n	1524c <bt_le_scan_update+0x18>
}
   1529a:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_unref(conn);
   1529c:	f009 fc9c 	bl	1ebd8 <bt_conn_unref>
		return 0;
   152a0:	2000      	movs	r0, #0
   152a2:	e7fa      	b.n	1529a <bt_le_scan_update+0x66>
   152a4:	2000043c 	.word	0x2000043c

000152a8 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   152a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   152ac:	f100 060c 	add.w	r6, r0, #12
   152b0:	b08f      	sub	sp, #60	; 0x3c
   152b2:	4604      	mov	r4, r0
   152b4:	4630      	mov	r0, r6
   152b6:	f00a fd70 	bl	1fd9a <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   152ba:	f8df a1e0 	ldr.w	sl, [pc, #480]	; 1549c <bt_hci_le_adv_report+0x1f4>
   152be:	9004      	str	r0, [sp, #16]
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	LOG_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   152c0:	9b04      	ldr	r3, [sp, #16]
   152c2:	b163      	cbz	r3, 152de <bt_hci_le_adv_report+0x36>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   152c4:	8a23      	ldrh	r3, [r4, #16]
   152c6:	2b08      	cmp	r3, #8
   152c8:	d80c      	bhi.n	152e4 <bt_hci_le_adv_report+0x3c>
			LOG_ERR("Unexpected end of buffer");
   152ca:	4b75      	ldr	r3, [pc, #468]	; (154a0 <bt_hci_le_adv_report+0x1f8>)
   152cc:	9302      	str	r3, [sp, #8]
   152ce:	2300      	movs	r3, #0
   152d0:	e9cd 3300 	strd	r3, r3, [sp]
   152d4:	4973      	ldr	r1, [pc, #460]	; (154a4 <bt_hci_le_adv_report+0x1fc>)
   152d6:	2201      	movs	r2, #1
   152d8:	4618      	mov	r0, r3
   152da:	f7ff ff0d 	bl	150f8 <z_log_msg_runtime_create.constprop.0>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   152de:	b00f      	add	sp, #60	; 0x3c
   152e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   152e4:	2109      	movs	r1, #9
   152e6:	4630      	mov	r0, r6
   152e8:	f00a fd4f 	bl	1fd8a <net_buf_simple_pull_mem>
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   152ec:	2301      	movs	r3, #1
   152ee:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   152f2:	237f      	movs	r3, #127	; 0x7f
   152f4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
		adv_info.rssi = evt->data[evt->length];
   152f8:	7a03      	ldrb	r3, [r0, #8]
   152fa:	4403      	add	r3, r0
   152fc:	4605      	mov	r5, r0
   152fe:	7a5b      	ldrb	r3, [r3, #9]
   15300:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
		adv_info.sid = BT_GAP_SID_INVALID;
   15304:	23ff      	movs	r3, #255	; 0xff
   15306:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
		adv_info.interval = 0U;
   1530a:	2300      	movs	r3, #0
   1530c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		adv_info.adv_type = evt->evt_type;
   15310:	7802      	ldrb	r2, [r0, #0]
   15312:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	switch (evt_type) {
   15316:	2a04      	cmp	r2, #4
   15318:	bf9c      	itt	ls
   1531a:	4b63      	ldrls	r3, [pc, #396]	; (154a8 <bt_hci_le_adv_report+0x200>)
   1531c:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1531e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   15322:	1c43      	adds	r3, r0, #1
   15324:	9306      	str	r3, [sp, #24]
   15326:	7a03      	ldrb	r3, [r0, #8]
   15328:	9305      	str	r3, [sp, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1532a:	f7ff fef7 	bl	1511c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1532e:	0607      	lsls	r7, r0, #24
   15330:	d50d      	bpl.n	1534e <bt_hci_le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   15332:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   15336:	0758      	lsls	r0, r3, #29
   15338:	d509      	bpl.n	1534e <bt_hci_le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1533a:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
   1533c:	4630      	mov	r0, r6
   1533e:	3101      	adds	r1, #1
   15340:	f00a fd1b 	bl	1fd7a <net_buf_simple_pull>
   15344:	9b04      	ldr	r3, [sp, #16]
   15346:	3b01      	subs	r3, #1
   15348:	b2db      	uxtb	r3, r3
   1534a:	9304      	str	r3, [sp, #16]
   1534c:	e7b8      	b.n	152c0 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1534e:	786b      	ldrb	r3, [r5, #1]
   15350:	1e9a      	subs	r2, r3, #2
   15352:	2a01      	cmp	r2, #1
   15354:	f10d 0820 	add.w	r8, sp, #32
   15358:	d850      	bhi.n	153fc <bt_hci_le_adv_report+0x154>
	memcpy(dst, src, sizeof(*dst));
   1535a:	2207      	movs	r2, #7
   1535c:	1c69      	adds	r1, r5, #1
   1535e:	4640      	mov	r0, r8
   15360:	f009 fa0e 	bl	1e780 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   15364:	f89d 3020 	ldrb.w	r3, [sp, #32]
   15368:	3b02      	subs	r3, #2
   1536a:	f88d 3020 	strb.w	r3, [sp, #32]
	if (scan_dev_found_cb) {
   1536e:	f8da 3000 	ldr.w	r3, [sl]
   15372:	b1b3      	cbz	r3, 153a2 <bt_hci_le_adv_report+0xfa>
	state->offset = net_buf_simple_headroom(buf);
   15374:	4630      	mov	r0, r6
   15376:	f00a fd20 	bl	1fdba <net_buf_simple_headroom>
		buf->len = len;
   1537a:	9b05      	ldr	r3, [sp, #20]
	state->len = buf->len;
   1537c:	f8b4 b010 	ldrh.w	fp, [r4, #16]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   15380:	f8da 7000 	ldr.w	r7, [sl]
		buf->len = len;
   15384:	8223      	strh	r3, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
   15386:	4681      	mov	r9, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   15388:	4633      	mov	r3, r6
   1538a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1538e:	f99d 102d 	ldrsb.w	r1, [sp, #45]	; 0x2d
   15392:	4640      	mov	r0, r8
   15394:	47b8      	blx	r7
	buf->data = buf->__buf + state->offset;
   15396:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   15398:	f8a4 b010 	strh.w	fp, [r4, #16]
	buf->data = buf->__buf + state->offset;
   1539c:	fa13 f389 	uxtah	r3, r3, r9
   153a0:	60e3      	str	r3, [r4, #12]
	return list->head;
   153a2:	4b42      	ldr	r3, [pc, #264]	; (154ac <bt_hci_le_adv_report+0x204>)
	info->addr = &id_addr;
   153a4:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   153a8:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   153aa:	2a00      	cmp	r2, #0
   153ac:	d037      	beq.n	1541e <bt_hci_le_adv_report+0x176>
	return node->next;
   153ae:	6813      	ldr	r3, [r2, #0]
   153b0:	b103      	cbz	r3, 153b4 <bt_hci_le_adv_report+0x10c>
   153b2:	3b08      	subs	r3, #8
		if (listener->recv) {
   153b4:	f852 1c08 	ldr.w	r1, [r2, #-8]
   153b8:	b1b9      	cbz	r1, 153ea <bt_hci_le_adv_report+0x142>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   153ba:	461f      	mov	r7, r3
   153bc:	f1a2 0308 	sub.w	r3, r2, #8
	state->offset = net_buf_simple_headroom(buf);
   153c0:	4630      	mov	r0, r6
   153c2:	9307      	str	r3, [sp, #28]
   153c4:	f00a fcf9 	bl	1fdba <net_buf_simple_headroom>
			buf->len = len;
   153c8:	9b05      	ldr	r3, [sp, #20]
	state->len = buf->len;
   153ca:	f8b4 b010 	ldrh.w	fp, [r4, #16]
   153ce:	8223      	strh	r3, [r4, #16]
			listener->recv(info, buf);
   153d0:	9b07      	ldr	r3, [sp, #28]
	state->offset = net_buf_simple_headroom(buf);
   153d2:	4681      	mov	r9, r0
   153d4:	681b      	ldr	r3, [r3, #0]
   153d6:	4631      	mov	r1, r6
   153d8:	a80a      	add	r0, sp, #40	; 0x28
   153da:	4798      	blx	r3
	buf->data = buf->__buf + state->offset;
   153dc:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   153de:	f8a4 b010 	strh.w	fp, [r4, #16]
	buf->data = buf->__buf + state->offset;
   153e2:	fa13 f389 	uxtah	r3, r3, r9
   153e6:	60e3      	str	r3, [r4, #12]
}
   153e8:	463b      	mov	r3, r7
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   153ea:	b1c3      	cbz	r3, 1541e <bt_hci_le_adv_report+0x176>
   153ec:	689f      	ldr	r7, [r3, #8]
   153ee:	681a      	ldr	r2, [r3, #0]
   153f0:	b19f      	cbz	r7, 1541a <bt_hci_le_adv_report+0x172>
   153f2:	3f08      	subs	r7, #8
		if (listener->recv) {
   153f4:	2a00      	cmp	r2, #0
   153f6:	d1e3      	bne.n	153c0 <bt_hci_le_adv_report+0x118>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   153f8:	463b      	mov	r3, r7
   153fa:	e7f7      	b.n	153ec <bt_hci_le_adv_report+0x144>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   153fc:	2bff      	cmp	r3, #255	; 0xff
   153fe:	d105      	bne.n	1540c <bt_hci_le_adv_report+0x164>
   15400:	492b      	ldr	r1, [pc, #172]	; (154b0 <bt_hci_le_adv_report+0x208>)
   15402:	2207      	movs	r2, #7
   15404:	4640      	mov	r0, r8
   15406:	f009 f9bb 	bl	1e780 <memcpy>
}
   1540a:	e7b0      	b.n	1536e <bt_hci_le_adv_report+0xc6>
		bt_addr_le_copy(&id_addr,
   1540c:	1c69      	adds	r1, r5, #1
   1540e:	2000      	movs	r0, #0
   15410:	f009 fb1c 	bl	1ea4c <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   15414:	2207      	movs	r2, #7
   15416:	4601      	mov	r1, r0
   15418:	e7f4      	b.n	15404 <bt_hci_le_adv_report+0x15c>
		if (listener->recv) {
   1541a:	2a00      	cmp	r2, #0
   1541c:	d1d0      	bne.n	153c0 <bt_hci_le_adv_report+0x118>
	info->addr = NULL;
   1541e:	2300      	movs	r3, #0
	check_pending_conn(&id_addr, addr, info->adv_props);
   15420:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	info->addr = NULL;
   15424:	930a      	str	r3, [sp, #40]	; 0x28
   15426:	f7ff fe79 	bl	1511c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1542a:	0601      	lsls	r1, r0, #24
   1542c:	f3c0 17c0 	ubfx	r7, r0, #7, #1
   15430:	d483      	bmi.n	1533a <bt_hci_le_adv_report+0x92>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   15432:	07d2      	lsls	r2, r2, #31
   15434:	d581      	bpl.n	1533a <bt_hci_le_adv_report+0x92>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   15436:	4641      	mov	r1, r8
   15438:	2202      	movs	r2, #2
   1543a:	4638      	mov	r0, r7
   1543c:	f000 fcca 	bl	15dd4 <bt_conn_lookup_state_le>
	if (!conn) {
   15440:	4680      	mov	r8, r0
   15442:	2800      	cmp	r0, #0
   15444:	f43f af79 	beq.w	1533a <bt_hci_le_adv_report+0x92>
   15448:	f7ff fe68 	bl	1511c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1544c:	0643      	lsls	r3, r0, #25
   1544e:	d411      	bmi.n	15474 <bt_hci_le_adv_report+0x1cc>
   15450:	9906      	ldr	r1, [sp, #24]
   15452:	2207      	movs	r2, #7
   15454:	f108 0096 	add.w	r0, r8, #150	; 0x96
   15458:	f009 f992 	bl	1e780 <memcpy>
	if (bt_le_create_conn(conn)) {
   1545c:	4640      	mov	r0, r8
   1545e:	f7fe fd31 	bl	13ec4 <bt_le_create_conn>
   15462:	b960      	cbnz	r0, 1547e <bt_hci_le_adv_report+0x1d6>
	bt_conn_set_state(conn, BT_CONN_CONNECTING);
   15464:	4640      	mov	r0, r8
   15466:	2106      	movs	r1, #6
   15468:	f000 fac4 	bl	159f4 <bt_conn_set_state>
	bt_conn_unref(conn);
   1546c:	4640      	mov	r0, r8
   1546e:	f009 fbb3 	bl	1ebd8 <bt_conn_unref>
	return;
   15472:	e762      	b.n	1533a <bt_hci_le_adv_report+0x92>
	return bt_le_scan_set_enable_legacy(enable);
   15474:	4638      	mov	r0, r7
   15476:	f7ff fe5b 	bl	15130 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1547a:	2800      	cmp	r0, #0
   1547c:	d0e8      	beq.n	15450 <bt_hci_le_adv_report+0x1a8>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1547e:	231f      	movs	r3, #31
   15480:	f888 3009 	strb.w	r3, [r8, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15484:	2100      	movs	r1, #0
   15486:	4640      	mov	r0, r8
   15488:	f000 fab4 	bl	159f4 <bt_conn_set_state>
	bt_conn_unref(conn);
   1548c:	4640      	mov	r0, r8
   1548e:	f009 fba3 	bl	1ebd8 <bt_conn_unref>
	bt_le_scan_update(false);
   15492:	2000      	movs	r0, #0
   15494:	f7ff fece 	bl	15234 <bt_le_scan_update>
   15498:	e74f      	b.n	1533a <bt_hci_le_adv_report+0x92>
   1549a:	bf00      	nop
   1549c:	20002544 	.word	0x20002544
   154a0:	00022ccc 	.word	0x00022ccc
   154a4:	0002165c 	.word	0x0002165c
   154a8:	00022ce5 	.word	0x00022ce5
   154ac:	2000253c 	.word	0x2000253c
   154b0:	000225d1 	.word	0x000225d1

000154b4 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
   154b4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   154b6:	4b0b      	ldr	r3, [pc, #44]	; (154e4 <notify_connected+0x30>)
   154b8:	681d      	ldr	r5, [r3, #0]
{
   154ba:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   154bc:	b925      	cbnz	r5, 154c8 <notify_connected+0x14>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154be:	4d0a      	ldr	r5, [pc, #40]	; (154e8 <notify_connected+0x34>)
   154c0:	4e0a      	ldr	r6, [pc, #40]	; (154ec <notify_connected+0x38>)
   154c2:	42b5      	cmp	r5, r6
   154c4:	d307      	bcc.n	154d6 <notify_connected+0x22>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}
}
   154c6:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->connected) {
   154c8:	682b      	ldr	r3, [r5, #0]
   154ca:	b113      	cbz	r3, 154d2 <notify_connected+0x1e>
			cb->connected(conn, conn->err);
   154cc:	7a61      	ldrb	r1, [r4, #9]
   154ce:	4620      	mov	r0, r4
   154d0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   154d2:	692d      	ldr	r5, [r5, #16]
   154d4:	e7f2      	b.n	154bc <notify_connected+0x8>
		if (cb->connected) {
   154d6:	682b      	ldr	r3, [r5, #0]
   154d8:	b113      	cbz	r3, 154e0 <notify_connected+0x2c>
			cb->connected(conn, conn->err);
   154da:	7a61      	ldrb	r1, [r4, #9]
   154dc:	4620      	mov	r0, r4
   154de:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   154e0:	3514      	adds	r5, #20
   154e2:	e7ee      	b.n	154c2 <notify_connected+0xe>
   154e4:	20002578 	.word	0x20002578
   154e8:	000215f8 	.word	0x000215f8
   154ec:	0002160c 	.word	0x0002160c

000154f0 <create_param_setup>:

	return true;
}

static void create_param_setup(const struct bt_conn_le_create_param *param)
{
   154f0:	b530      	push	{r4, r5, lr}
	bt_dev.create_param = *param;
   154f2:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   154f4:	4c09      	ldr	r4, [pc, #36]	; (1551c <create_param_setup+0x2c>)
   154f6:	f104 0508 	add.w	r5, r4, #8
   154fa:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

	bt_dev.create_param.timeout =
		(bt_dev.create_param.timeout != 0) ?
   154fe:	8aa3      	ldrh	r3, [r4, #20]
	bt_dev.create_param.timeout =
   15500:	2b00      	cmp	r3, #0
   15502:	bf08      	it	eq
   15504:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   15508:	82a3      	strh	r3, [r4, #20]
		bt_dev.create_param.timeout :
		(MSEC_PER_SEC / 10) * CONFIG_BT_CREATE_CONN_TIMEOUT;

	bt_dev.create_param.interval_coded =
		(bt_dev.create_param.interval_coded != 0) ?
   1550a:	8a23      	ldrh	r3, [r4, #16]
	bt_dev.create_param.interval_coded =
   1550c:	b903      	cbnz	r3, 15510 <create_param_setup+0x20>
   1550e:	89a3      	ldrh	r3, [r4, #12]
   15510:	8223      	strh	r3, [r4, #16]
		bt_dev.create_param.interval_coded :
		bt_dev.create_param.interval;

	bt_dev.create_param.window_coded =
		(bt_dev.create_param.window_coded != 0) ?
   15512:	8a63      	ldrh	r3, [r4, #18]
	bt_dev.create_param.window_coded =
   15514:	b903      	cbnz	r3, 15518 <create_param_setup+0x28>
   15516:	89e3      	ldrh	r3, [r4, #14]
   15518:	8263      	strh	r3, [r4, #18]
		bt_dev.create_param.window_coded :
		bt_dev.create_param.window;
}
   1551a:	bd30      	pop	{r4, r5, pc}
   1551c:	20000370 	.word	0x20000370

00015520 <tx_notify>:
{
   15520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	k_fifo_put(&free_tx, tx);
   15524:	4f15      	ldr	r7, [pc, #84]	; (1557c <tx_notify+0x5c>)
{
   15526:	4604      	mov	r4, r0
	tx->cb = NULL;
   15528:	f04f 0800 	mov.w	r8, #0
	__asm__ volatile(
   1552c:	f04f 0240 	mov.w	r2, #64	; 0x40
   15530:	f3ef 8311 	mrs	r3, BASEPRI
   15534:	f382 8812 	msr	BASEPRI_MAX, r2
   15538:	f3bf 8f6f 	isb	sy
	return list->head;
   1553c:	6a21      	ldr	r1, [r4, #32]
		if (!sys_slist_is_empty(&conn->tx_complete)) {
   1553e:	b929      	cbnz	r1, 1554c <tx_notify+0x2c>
	__asm__ volatile(
   15540:	f383 8811 	msr	BASEPRI, r3
   15544:	f3bf 8f6f 	isb	sy
}
   15548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1554c:	6a60      	ldr	r0, [r4, #36]	; 0x24
	return node->next;
   1554e:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   15550:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15552:	4281      	cmp	r1, r0
	list->tail = node;
   15554:	bf08      	it	eq
   15556:	6262      	streq	r2, [r4, #36]	; 0x24
   15558:	f383 8811 	msr	BASEPRI, r3
   1555c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   15560:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->pending_no_cb = 0U;
   15564:	f8c1 800c 	str.w	r8, [r1, #12]
	tx->user_data = NULL;
   15568:	e9c1 8801 	strd	r8, r8, [r1, #4]
	k_fifo_put(&free_tx, tx);
   1556c:	4638      	mov	r0, r7
   1556e:	f00b fac3 	bl	20af8 <k_queue_append>
		cb(conn, user_data, 0);
   15572:	2200      	movs	r2, #0
   15574:	4631      	mov	r1, r6
   15576:	4620      	mov	r0, r4
   15578:	47a8      	blx	r5
	while (1) {
   1557a:	e7d7      	b.n	1552c <tx_notify+0xc>
   1557c:	200008e4 	.word	0x200008e4

00015580 <conn_tx_destroy>:
{
   15580:	b570      	push	{r4, r5, r6, lr}
	void *user_data = tx->user_data;
   15582:	e9d1 5601 	ldrd	r5, r6, [r1, #4]
	tx->cb = NULL;
   15586:	2200      	movs	r2, #0
	tx->user_data = NULL;
   15588:	e9c1 2201 	strd	r2, r2, [r1, #4]
{
   1558c:	4604      	mov	r4, r0
	tx->pending_no_cb = 0U;
   1558e:	60ca      	str	r2, [r1, #12]
	k_fifo_put(&free_tx, tx);
   15590:	4805      	ldr	r0, [pc, #20]	; (155a8 <conn_tx_destroy+0x28>)
   15592:	f00b fab1 	bl	20af8 <k_queue_append>
	cb(conn, user_data, -ESHUTDOWN);
   15596:	4631      	mov	r1, r6
   15598:	4620      	mov	r0, r4
   1559a:	462b      	mov	r3, r5
   1559c:	f06f 026d 	mvn.w	r2, #109	; 0x6d
}
   155a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	cb(conn, user_data, -ESHUTDOWN);
   155a4:	4718      	bx	r3
   155a6:	bf00      	nop
   155a8:	200008e4 	.word	0x200008e4

000155ac <send_frag>:
{
   155ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155b0:	4604      	mov	r4, r0
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   155b2:	698d      	ldr	r5, [r1, #24]
{
   155b4:	b085      	sub	sp, #20
   155b6:	460f      	mov	r7, r1
   155b8:	4616      	mov	r6, r2
   155ba:	4698      	mov	r8, r3
	return z_impl_k_sem_take(sem, timeout);
   155bc:	f04f 33ff 	mov.w	r3, #4294967295
   155c0:	484d      	ldr	r0, [pc, #308]	; (156f8 <send_frag+0x14c>)
   155c2:	f04f 32ff 	mov.w	r2, #4294967295
   155c6:	f006 ff3b 	bl	1c440 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   155ca:	7aa3      	ldrb	r3, [r4, #10]
   155cc:	2b07      	cmp	r3, #7
   155ce:	f040 8087 	bne.w	156e0 <send_frag+0x134>
	__asm__ volatile(
   155d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   155d6:	f3ef 8211 	mrs	r2, BASEPRI
   155da:	f383 8812 	msr	BASEPRI_MAX, r3
   155de:	f3bf 8f6f 	isb	sy
	if (tx) {
   155e2:	2d00      	cmp	r5, #0
   155e4:	d053      	beq.n	1568e <send_frag+0xe2>
	parent->next = child;
   155e6:	2300      	movs	r3, #0
   155e8:	602b      	str	r3, [r5, #0]
	return list->tail;
   155ea:	69a3      	ldr	r3, [r4, #24]
Z_GENLIST_APPEND(slist, snode)
   155ec:	2b00      	cmp	r3, #0
   155ee:	d14b      	bne.n	15688 <send_frag+0xdc>
	list->head = node;
   155f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   155f4:	f382 8811 	msr	BASEPRI, r2
   155f8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   155fc:	2104      	movs	r1, #4
   155fe:	f107 000c 	add.w	r0, r7, #12
   15602:	f00a fbb2 	bl	1fd6a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   15606:	8823      	ldrh	r3, [r4, #0]
   15608:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
   1560c:	ea43 3606 	orr.w	r6, r3, r6, lsl #12
   15610:	8006      	strh	r6, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15612:	8a3b      	ldrh	r3, [r7, #16]
   15614:	3b04      	subs	r3, #4
   15616:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15618:	2302      	movs	r3, #2
   1561a:	763b      	strb	r3, [r7, #24]
	return bt_send(buf);
   1561c:	4638      	mov	r0, r7
   1561e:	f7fe fe63 	bl	142e8 <bt_send>
	if (err) {
   15622:	2800      	cmp	r0, #0
   15624:	d066      	beq.n	156f4 <send_frag+0x148>
		LOG_ERR("Unable to send to driver (err %d)", err);
   15626:	2600      	movs	r6, #0
   15628:	4b34      	ldr	r3, [pc, #208]	; (156fc <send_frag+0x150>)
   1562a:	9003      	str	r0, [sp, #12]
   1562c:	9302      	str	r3, [sp, #8]
   1562e:	e9cd 6600 	strd	r6, r6, [sp]
   15632:	4933      	ldr	r1, [pc, #204]	; (15700 <send_frag+0x154>)
   15634:	4633      	mov	r3, r6
   15636:	2201      	movs	r2, #1
   15638:	4630      	mov	r0, r6
   1563a:	f009 fa48 	bl	1eace <z_log_msg_runtime_create.constprop.0>
	__asm__ volatile(
   1563e:	f04f 0240 	mov.w	r2, #64	; 0x40
   15642:	f3ef 8311 	mrs	r3, BASEPRI
   15646:	f382 8812 	msr	BASEPRI_MAX, r2
   1564a:	f3bf 8f6f 	isb	sy
		if (tx) {
   1564e:	2d00      	cmp	r5, #0
   15650:	d033      	beq.n	156ba <send_frag+0x10e>
	return list->head;
   15652:	6962      	ldr	r2, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15654:	b152      	cbz	r2, 1566c <send_frag+0xc0>
   15656:	4295      	cmp	r5, r2
   15658:	d12c      	bne.n	156b4 <send_frag+0x108>
	return node->next;
   1565a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_REMOVE(slist, snode)
   1565c:	bb26      	cbnz	r6, 156a8 <send_frag+0xfc>
   1565e:	69a1      	ldr	r1, [r4, #24]
	list->head = node;
   15660:	6162      	str	r2, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   15662:	428d      	cmp	r5, r1
   15664:	d100      	bne.n	15668 <send_frag+0xbc>
	list->tail = node;
   15666:	61a2      	str	r2, [r4, #24]
	parent->next = child;
   15668:	2200      	movs	r2, #0
   1566a:	602a      	str	r2, [r5, #0]
	__asm__ volatile(
   1566c:	f383 8811 	msr	BASEPRI, r3
   15670:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   15674:	4820      	ldr	r0, [pc, #128]	; (156f8 <send_frag+0x14c>)
   15676:	f006 febd 	bl	1c3f4 <z_impl_k_sem_give>
		tx_data(buf)->tx = NULL;
   1567a:	2300      	movs	r3, #0
   1567c:	61bb      	str	r3, [r7, #24]
		conn_tx_destroy(conn, tx);
   1567e:	4629      	mov	r1, r5
   15680:	4620      	mov	r0, r4
   15682:	f7ff ff7d 	bl	15580 <conn_tx_destroy>
   15686:	e024      	b.n	156d2 <send_frag+0x126>
   15688:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1568a:	61a5      	str	r5, [r4, #24]
}
   1568c:	e7b2      	b.n	155f4 <send_frag+0x48>
	return list->tail;
   1568e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   15690:	b133      	cbz	r3, 156a0 <send_frag+0xf4>
			pending_no_cb = &tail_tx->pending_no_cb;
   15692:	f103 090c 	add.w	r9, r3, #12
   15696:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15698:	3301      	adds	r3, #1
   1569a:	f8c9 3000 	str.w	r3, [r9]
   1569e:	e7a9      	b.n	155f4 <send_frag+0x48>
			pending_no_cb = &conn->pending_no_cb;
   156a0:	69e3      	ldr	r3, [r4, #28]
   156a2:	f104 091c 	add.w	r9, r4, #28
   156a6:	e7f7      	b.n	15698 <send_frag+0xec>
	parent->next = child;
   156a8:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   156aa:	69a2      	ldr	r2, [r4, #24]
   156ac:	4295      	cmp	r5, r2
	list->tail = node;
   156ae:	bf08      	it	eq
   156b0:	61a6      	streq	r6, [r4, #24]
}
   156b2:	e7d9      	b.n	15668 <send_frag+0xbc>
	return node->next;
   156b4:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   156b6:	6812      	ldr	r2, [r2, #0]
   156b8:	e7cc      	b.n	15654 <send_frag+0xa8>
			(*pending_no_cb)--;
   156ba:	f8d9 2000 	ldr.w	r2, [r9]
   156be:	3a01      	subs	r2, #1
   156c0:	f8c9 2000 	str.w	r2, [r9]
   156c4:	f383 8811 	msr	BASEPRI, r3
   156c8:	f3bf 8f6f 	isb	sy
   156cc:	480a      	ldr	r0, [pc, #40]	; (156f8 <send_frag+0x14c>)
   156ce:	f006 fe91 	bl	1c3f4 <z_impl_k_sem_give>
	if (always_consume) {
   156d2:	f1b8 0f00 	cmp.w	r8, #0
   156d6:	d109      	bne.n	156ec <send_frag+0x140>
	return false;
   156d8:	2000      	movs	r0, #0
}
   156da:	b005      	add	sp, #20
   156dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   156e0:	4805      	ldr	r0, [pc, #20]	; (156f8 <send_frag+0x14c>)
   156e2:	f006 fe87 	bl	1c3f4 <z_impl_k_sem_give>
	if (tx) {
   156e6:	2d00      	cmp	r5, #0
   156e8:	d1c7      	bne.n	1567a <send_frag+0xce>
   156ea:	e7f2      	b.n	156d2 <send_frag+0x126>
		net_buf_unref(buf);
   156ec:	4638      	mov	r0, r7
   156ee:	f002 fe47 	bl	18380 <net_buf_unref>
   156f2:	e7f1      	b.n	156d8 <send_frag+0x12c>
	return true;
   156f4:	2001      	movs	r0, #1
   156f6:	e7f0      	b.n	156da <send_frag+0x12e>
   156f8:	20000470 	.word	0x20000470
   156fc:	000229c7 	.word	0x000229c7
   15700:	00021634 	.word	0x00021634

00015704 <bt_conn_get_pkts>:
}
   15704:	4800      	ldr	r0, [pc, #0]	; (15708 <bt_conn_get_pkts+0x4>)
   15706:	4770      	bx	lr
   15708:	20000470 	.word	0x20000470

0001570c <bt_conn_new>:
{
   1570c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   1570e:	2200      	movs	r2, #0
   15710:	4604      	mov	r4, r0
   15712:	428a      	cmp	r2, r1
   15714:	d102      	bne.n	1571c <bt_conn_new+0x10>
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   15716:	2400      	movs	r4, #0
}
   15718:	4620      	mov	r0, r4
   1571a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1571c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   15720:	2001      	movs	r0, #1
   15722:	f3bf 8f5b 	dmb	ish
   15726:	e853 5f00 	ldrex	r5, [r3]
   1572a:	2d00      	cmp	r5, #0
   1572c:	d104      	bne.n	15738 <bt_conn_new+0x2c>
   1572e:	e843 0c00 	strex	ip, r0, [r3]
   15732:	f1bc 0f00 	cmp.w	ip, #0
   15736:	d1f6      	bne.n	15726 <bt_conn_new+0x1a>
   15738:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1573c:	d002      	beq.n	15744 <bt_conn_new+0x38>
   1573e:	34c0      	adds	r4, #192	; 0xc0
	for (i = 0; i < size; i++) {
   15740:	4402      	add	r2, r0
   15742:	e7e6      	b.n	15712 <bt_conn_new+0x6>
	if (!conn) {
   15744:	2c00      	cmp	r4, #0
   15746:	d0e6      	beq.n	15716 <bt_conn_new+0xa>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   15748:	22b8      	movs	r2, #184	; 0xb8
   1574a:	2100      	movs	r1, #0
   1574c:	4620      	mov	r0, r4
   1574e:	f009 f822 	bl	1e796 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15752:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15756:	4904      	ldr	r1, [pc, #16]	; (15768 <bt_conn_new+0x5c>)
   15758:	f00b faa9 	bl	20cae <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1575c:	4903      	ldr	r1, [pc, #12]	; (1576c <bt_conn_new+0x60>)
   1575e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15762:	f00b fa60 	bl	20c26 <k_work_init>
	return conn;
   15766:	e7d7      	b.n	15718 <bt_conn_new+0xc>
   15768:	00015f81 	.word	0x00015f81
   1576c:	0001eb05 	.word	0x0001eb05

00015770 <bt_conn_recv>:
{
   15770:	b5f0      	push	{r4, r5, r6, r7, lr}
   15772:	4616      	mov	r6, r2
   15774:	b087      	sub	sp, #28
   15776:	4604      	mov	r4, r0
   15778:	460d      	mov	r5, r1
	tx_notify(conn);
   1577a:	f7ff fed1 	bl	15520 <tx_notify>
	switch (flags) {
   1577e:	2e01      	cmp	r6, #1
   15780:	d02e      	beq.n	157e0 <bt_conn_recv+0x70>
   15782:	2e02      	cmp	r6, #2
   15784:	d165      	bne.n	15852 <bt_conn_recv+0xe2>
		if (conn->rx) {
   15786:	6923      	ldr	r3, [r4, #16]
   15788:	b163      	cbz	r3, 157a4 <bt_conn_recv+0x34>
			LOG_ERR("Unexpected first L2CAP frame");
   1578a:	4b3d      	ldr	r3, [pc, #244]	; (15880 <bt_conn_recv+0x110>)
   1578c:	9302      	str	r3, [sp, #8]
   1578e:	2300      	movs	r3, #0
   15790:	4618      	mov	r0, r3
   15792:	e9cd 3300 	strd	r3, r3, [sp]
   15796:	493b      	ldr	r1, [pc, #236]	; (15884 <bt_conn_recv+0x114>)
   15798:	2201      	movs	r2, #1
   1579a:	f009 f998 	bl	1eace <z_log_msg_runtime_create.constprop.0>
			bt_conn_reset_rx_state(conn);
   1579e:	4620      	mov	r0, r4
   157a0:	f009 f9b3 	bl	1eb0a <bt_conn_reset_rx_state>
		conn->rx = buf;
   157a4:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   157a6:	6921      	ldr	r1, [r4, #16]
   157a8:	8a0a      	ldrh	r2, [r1, #16]
   157aa:	2a01      	cmp	r2, #1
   157ac:	d966      	bls.n	1587c <bt_conn_recv+0x10c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   157ae:	68cb      	ldr	r3, [r1, #12]
   157b0:	881b      	ldrh	r3, [r3, #0]
   157b2:	3304      	adds	r3, #4
   157b4:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   157b6:	429a      	cmp	r2, r3
   157b8:	d360      	bcc.n	1587c <bt_conn_recv+0x10c>
	if (conn->rx->len > acl_total_len) {
   157ba:	d956      	bls.n	1586a <bt_conn_recv+0xfa>
		LOG_ERR("ACL len mismatch (%u > %u)", conn->rx->len, acl_total_len);
   157bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
   157c0:	4b31      	ldr	r3, [pc, #196]	; (15888 <bt_conn_recv+0x118>)
   157c2:	9302      	str	r3, [sp, #8]
   157c4:	2300      	movs	r3, #0
   157c6:	4618      	mov	r0, r3
   157c8:	e9cd 3300 	strd	r3, r3, [sp]
   157cc:	492d      	ldr	r1, [pc, #180]	; (15884 <bt_conn_recv+0x114>)
   157ce:	2201      	movs	r2, #1
   157d0:	f009 f97d 	bl	1eace <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   157d4:	4620      	mov	r0, r4
}
   157d6:	b007      	add	sp, #28
   157d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_reset_rx_state(conn);
   157dc:	f009 b995 	b.w	1eb0a <bt_conn_reset_rx_state>
		if (!conn->rx) {
   157e0:	6923      	ldr	r3, [r4, #16]
   157e2:	b963      	cbnz	r3, 157fe <bt_conn_recv+0x8e>
			LOG_ERR("Unexpected L2CAP continuation");
   157e4:	4a29      	ldr	r2, [pc, #164]	; (1588c <bt_conn_recv+0x11c>)
   157e6:	4927      	ldr	r1, [pc, #156]	; (15884 <bt_conn_recv+0x114>)
   157e8:	9300      	str	r3, [sp, #0]
   157ea:	e9cd 3201 	strd	r3, r2, [sp, #4]
   157ee:	4618      	mov	r0, r3
   157f0:	4632      	mov	r2, r6
   157f2:	f009 f96c 	bl	1eace <z_log_msg_runtime_create.constprop.0>
		bt_conn_reset_rx_state(conn);
   157f6:	4620      	mov	r0, r4
   157f8:	f009 f987 	bl	1eb0a <bt_conn_reset_rx_state>
		net_buf_unref(buf);
   157fc:	e001      	b.n	15802 <bt_conn_recv+0x92>
		if (!buf->len) {
   157fe:	8a2f      	ldrh	r7, [r5, #16]
   15800:	b92f      	cbnz	r7, 1580e <bt_conn_recv+0x9e>
			net_buf_unref(buf);
   15802:	4628      	mov	r0, r5
}
   15804:	b007      	add	sp, #28
   15806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			net_buf_unref(buf);
   1580a:	f002 bdb9 	b.w	18380 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1580e:	f103 000c 	add.w	r0, r3, #12
   15812:	f00a fad6 	bl	1fdc2 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   15816:	4287      	cmp	r7, r0
   15818:	d911      	bls.n	1583e <bt_conn_recv+0xce>
			LOG_ERR("Not enough buffer space for L2CAP data");
   1581a:	2700      	movs	r7, #0
   1581c:	4b1c      	ldr	r3, [pc, #112]	; (15890 <bt_conn_recv+0x120>)
   1581e:	4919      	ldr	r1, [pc, #100]	; (15884 <bt_conn_recv+0x114>)
   15820:	9302      	str	r3, [sp, #8]
   15822:	4632      	mov	r2, r6
   15824:	463b      	mov	r3, r7
   15826:	4638      	mov	r0, r7
   15828:	e9cd 7700 	strd	r7, r7, [sp]
   1582c:	f009 f94f 	bl	1eace <z_log_msg_runtime_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
   15830:	6921      	ldr	r1, [r4, #16]
   15832:	463a      	mov	r2, r7
   15834:	4620      	mov	r0, r4
   15836:	f000 fe35 	bl	164a4 <bt_l2cap_recv>
			conn->rx = NULL;
   1583a:	6127      	str	r7, [r4, #16]
   1583c:	e7e1      	b.n	15802 <bt_conn_recv+0x92>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1583e:	6920      	ldr	r0, [r4, #16]
   15840:	8a2a      	ldrh	r2, [r5, #16]
   15842:	68e9      	ldr	r1, [r5, #12]
   15844:	300c      	adds	r0, #12
   15846:	f00a fa87 	bl	1fd58 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1584a:	4628      	mov	r0, r5
   1584c:	f002 fd98 	bl	18380 <net_buf_unref>
		break;
   15850:	e7a9      	b.n	157a6 <bt_conn_recv+0x36>
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   15852:	4b10      	ldr	r3, [pc, #64]	; (15894 <bt_conn_recv+0x124>)
   15854:	9302      	str	r3, [sp, #8]
   15856:	2300      	movs	r3, #0
   15858:	e9cd 3300 	strd	r3, r3, [sp]
   1585c:	4909      	ldr	r1, [pc, #36]	; (15884 <bt_conn_recv+0x114>)
	switch (flags) {
   1585e:	9603      	str	r6, [sp, #12]
		LOG_ERR("Unexpected ACL flags (0x%02x)", flags);
   15860:	2201      	movs	r2, #1
   15862:	4618      	mov	r0, r3
   15864:	f009 f933 	bl	1eace <z_log_msg_runtime_create.constprop.0>
   15868:	e7c5      	b.n	157f6 <bt_conn_recv+0x86>
	conn->rx = NULL;
   1586a:	2300      	movs	r3, #0
	bt_l2cap_recv(conn, buf, true);
   1586c:	2201      	movs	r2, #1
   1586e:	4620      	mov	r0, r4
	conn->rx = NULL;
   15870:	6123      	str	r3, [r4, #16]
}
   15872:	b007      	add	sp, #28
   15874:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_l2cap_recv(conn, buf, true);
   15878:	f000 be14 	b.w	164a4 <bt_l2cap_recv>
}
   1587c:	b007      	add	sp, #28
   1587e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15880:	00022cf2 	.word	0x00022cf2
   15884:	00021634 	.word	0x00021634
   15888:	00022d72 	.word	0x00022d72
   1588c:	00022d0f 	.word	0x00022d0f
   15890:	00022d2d 	.word	0x00022d2d
   15894:	00022d54 	.word	0x00022d54

00015898 <bt_conn_send_cb>:
{
   15898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1589c:	4699      	mov	r9, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1589e:	7a83      	ldrb	r3, [r0, #10]
   158a0:	2b07      	cmp	r3, #7
{
   158a2:	b085      	sub	sp, #20
   158a4:	4606      	mov	r6, r0
   158a6:	4688      	mov	r8, r1
   158a8:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   158aa:	d00c      	beq.n	158c6 <bt_conn_send_cb+0x2e>
		LOG_ERR("not connected!");
   158ac:	4b28      	ldr	r3, [pc, #160]	; (15950 <bt_conn_send_cb+0xb8>)
   158ae:	9302      	str	r3, [sp, #8]
   158b0:	2300      	movs	r3, #0
   158b2:	e9cd 3300 	strd	r3, r3, [sp]
   158b6:	4927      	ldr	r1, [pc, #156]	; (15954 <bt_conn_send_cb+0xbc>)
   158b8:	2201      	movs	r2, #1
   158ba:	4618      	mov	r0, r3
   158bc:	f009 f907 	bl	1eace <z_log_msg_runtime_create.constprop.0>
		return -ENOTCONN;
   158c0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   158c4:	e01c      	b.n	15900 <bt_conn_send_cb+0x68>
	if (cb) {
   158c6:	2a00      	cmp	r2, #0
   158c8:	d040      	beq.n	1594c <bt_conn_send_cb+0xb4>
	return z_impl_z_current_get();
   158ca:	f007 faad 	bl	1ce28 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   158ce:	4b22      	ldr	r3, [pc, #136]	; (15958 <bt_conn_send_cb+0xc0>)
   158d0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   158d2:	4822      	ldr	r0, [pc, #136]	; (1595c <bt_conn_send_cb+0xc4>)
   158d4:	bf07      	ittee	eq
   158d6:	2200      	moveq	r2, #0
   158d8:	2300      	moveq	r3, #0
   158da:	f04f 32ff 	movne.w	r2, #4294967295
   158de:	f04f 33ff 	movne.w	r3, #4294967295
   158e2:	f006 fd53 	bl	1c38c <z_impl_k_queue_get>
   158e6:	4604      	mov	r4, r0
		if (!tx) {
   158e8:	b968      	cbnz	r0, 15906 <bt_conn_send_cb+0x6e>
			LOG_ERR("Unable to allocate TX context");
   158ea:	4b1d      	ldr	r3, [pc, #116]	; (15960 <bt_conn_send_cb+0xc8>)
   158ec:	9000      	str	r0, [sp, #0]
   158ee:	e9cd 0301 	strd	r0, r3, [sp, #4]
   158f2:	4918      	ldr	r1, [pc, #96]	; (15954 <bt_conn_send_cb+0xbc>)
   158f4:	4603      	mov	r3, r0
   158f6:	2201      	movs	r2, #1
   158f8:	f009 f8e9 	bl	1eace <z_log_msg_runtime_create.constprop.0>
			return -ENOBUFS;
   158fc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15900:	b005      	add	sp, #20
   15902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15906:	7ab3      	ldrb	r3, [r6, #10]
   15908:	2b07      	cmp	r3, #7
   1590a:	f04f 0500 	mov.w	r5, #0
   1590e:	d011      	beq.n	15934 <bt_conn_send_cb+0x9c>
			LOG_WRN("Disconnected while allocating context");
   15910:	4b14      	ldr	r3, [pc, #80]	; (15964 <bt_conn_send_cb+0xcc>)
   15912:	4910      	ldr	r1, [pc, #64]	; (15954 <bt_conn_send_cb+0xbc>)
   15914:	9500      	str	r5, [sp, #0]
   15916:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1591a:	4628      	mov	r0, r5
   1591c:	462b      	mov	r3, r5
   1591e:	2202      	movs	r2, #2
   15920:	f009 f8d5 	bl	1eace <z_log_msg_runtime_create.constprop.0>
	tx->user_data = NULL;
   15924:	e9c4 5501 	strd	r5, r5, [r4, #4]
	k_fifo_put(&free_tx, tx);
   15928:	480c      	ldr	r0, [pc, #48]	; (1595c <bt_conn_send_cb+0xc4>)
	tx->pending_no_cb = 0U;
   1592a:	60e5      	str	r5, [r4, #12]
	k_fifo_put(&free_tx, tx);
   1592c:	4621      	mov	r1, r4
   1592e:	f00b f8e3 	bl	20af8 <k_queue_append>
}
   15932:	e7c5      	b.n	158c0 <bt_conn_send_cb+0x28>
		tx->user_data = user_data;
   15934:	e9c0 7901 	strd	r7, r9, [r0, #4]
		tx->pending_no_cb = 0U;
   15938:	60c5      	str	r5, [r0, #12]
	net_buf_put(&conn->tx_queue, buf);
   1593a:	f106 0038 	add.w	r0, r6, #56	; 0x38
		tx_data(buf)->tx = tx;
   1593e:	f8c8 4018 	str.w	r4, [r8, #24]
	net_buf_put(&conn->tx_queue, buf);
   15942:	4641      	mov	r1, r8
   15944:	f00a f9da 	bl	1fcfc <net_buf_put>
	return 0;
   15948:	2000      	movs	r0, #0
   1594a:	e7d9      	b.n	15900 <bt_conn_send_cb+0x68>
   1594c:	4614      	mov	r4, r2
   1594e:	e7f4      	b.n	1593a <bt_conn_send_cb+0xa2>
   15950:	00022d8d 	.word	0x00022d8d
   15954:	00021634 	.word	0x00021634
   15958:	20002418 	.word	0x20002418
   1595c:	200008e4 	.word	0x200008e4
   15960:	00022d9c 	.word	0x00022d9c
   15964:	00022dba 	.word	0x00022dba

00015968 <bt_conn_prepare_events>:
{
   15968:	b570      	push	{r4, r5, r6, lr}
   1596a:	4604      	mov	r4, r0
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_POLL_SIGNAL_INIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_poll_signal_init(sig);
   1596c:	4819      	ldr	r0, [pc, #100]	; (159d4 <bt_conn_prepare_events+0x6c>)
   1596e:	f00b fc99 	bl	212a4 <z_impl_k_poll_signal_init>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15972:	4620      	mov	r0, r4
   15974:	4b17      	ldr	r3, [pc, #92]	; (159d4 <bt_conn_prepare_events+0x6c>)
   15976:	2200      	movs	r2, #0
   15978:	2101      	movs	r1, #1
   1597a:	f00b fc76 	bl	2126a <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1597e:	4816      	ldr	r0, [pc, #88]	; (159d8 <bt_conn_prepare_events+0x70>)
		if (!conn_prepare_events(conn, &events[ev_count])) {
   15980:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   15984:	f009 f89d 	bl	1eac2 <atomic_get>
   15988:	b908      	cbnz	r0, 1598e <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1598a:	2001      	movs	r0, #1
}
   1598c:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1598e:	4813      	ldr	r0, [pc, #76]	; (159dc <bt_conn_prepare_events+0x74>)
   15990:	7a83      	ldrb	r3, [r0, #10]
   15992:	b98b      	cbnz	r3, 159b8 <bt_conn_prepare_events+0x50>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15994:	f3bf 8f5b 	dmb	ish
   15998:	1d03      	adds	r3, r0, #4
   1599a:	e853 2f00 	ldrex	r2, [r3]
   1599e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   159a2:	e843 1600 	strex	r6, r1, [r3]
   159a6:	2e00      	cmp	r6, #0
   159a8:	d1f7      	bne.n	1599a <bt_conn_prepare_events+0x32>
   159aa:	f3bf 8f5b 	dmb	ish
   159ae:	0653      	lsls	r3, r2, #25
   159b0:	d502      	bpl.n	159b8 <bt_conn_prepare_events+0x50>
		conn_cleanup(conn);
   159b2:	f009 f8b3 	bl	1eb1c <conn_cleanup>
		return -ENOTCONN;
   159b6:	e7e8      	b.n	1598a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   159b8:	7a83      	ldrb	r3, [r0, #10]
   159ba:	2b07      	cmp	r3, #7
   159bc:	d1e5      	bne.n	1598a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   159be:	4b08      	ldr	r3, [pc, #32]	; (159e0 <bt_conn_prepare_events+0x78>)
   159c0:	4628      	mov	r0, r5
   159c2:	2200      	movs	r2, #0
   159c4:	2104      	movs	r1, #4
   159c6:	f00b fc50 	bl	2126a <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   159ca:	2301      	movs	r3, #1
   159cc:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   159d0:	2002      	movs	r0, #2
	return ev_count;
   159d2:	e7db      	b.n	1598c <bt_conn_prepare_events+0x24>
   159d4:	2000066c 	.word	0x2000066c
   159d8:	20001a98 	.word	0x20001a98
   159dc:	200019e0 	.word	0x200019e0
   159e0:	20001a18 	.word	0x20001a18

000159e4 <bt_conn_lookup_handle>:
{
   159e4:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   159e6:	2101      	movs	r1, #1
   159e8:	4801      	ldr	r0, [pc, #4]	; (159f0 <bt_conn_lookup_handle+0xc>)
   159ea:	f009 b8d5 	b.w	1eb98 <conn_lookup_handle>
   159ee:	bf00      	nop
   159f0:	200019e0 	.word	0x200019e0

000159f4 <bt_conn_set_state>:
{
   159f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state == state) {
   159f6:	7a85      	ldrb	r5, [r0, #10]
   159f8:	428d      	cmp	r5, r1
{
   159fa:	4604      	mov	r4, r0
   159fc:	460e      	mov	r6, r1
	if (conn->state == state) {
   159fe:	d111      	bne.n	15a24 <bt_conn_set_state+0x30>
	switch (state) {
   15a00:	2d08      	cmp	r5, #8
   15a02:	bf96      	itet	ls
   15a04:	4b77      	ldrls	r3, [pc, #476]	; (15be4 <bt_conn_set_state+0x1f0>)
	if (conn->state == state) {
   15a06:	4b78      	ldrhi	r3, [pc, #480]	; (15be8 <bt_conn_set_state+0x1f4>)
   15a08:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
		LOG_WRN("no transition %s", state2str(state));
   15a0c:	9303      	str	r3, [sp, #12]
   15a0e:	4b77      	ldr	r3, [pc, #476]	; (15bec <bt_conn_set_state+0x1f8>)
		LOG_WRN("no valid (%u) state was set", state);
   15a10:	9302      	str	r3, [sp, #8]
   15a12:	2300      	movs	r3, #0
   15a14:	e9cd 3300 	strd	r3, r3, [sp]
   15a18:	4975      	ldr	r1, [pc, #468]	; (15bf0 <bt_conn_set_state+0x1fc>)
   15a1a:	2202      	movs	r2, #2
   15a1c:	4618      	mov	r0, r3
   15a1e:	f009 f856 	bl	1eace <z_log_msg_runtime_create.constprop.0>
   15a22:	e041      	b.n	15aa8 <bt_conn_set_state+0xb4>
	conn->state = state;
   15a24:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15a26:	b165      	cbz	r5, 15a42 <bt_conn_set_state+0x4e>
   15a28:	2d06      	cmp	r5, #6
   15a2a:	d010      	beq.n	15a4e <bt_conn_set_state+0x5a>
	switch (conn->state) {
   15a2c:	7aa3      	ldrb	r3, [r4, #10]
   15a2e:	2b08      	cmp	r3, #8
   15a30:	f200 80d4 	bhi.w	15bdc <bt_conn_set_state+0x1e8>
   15a34:	e8df f003 	tbb	[pc, r3]
   15a38:	3838123a 	.word	0x3838123a
   15a3c:	2a8b3838 	.word	0x2a8b3838
   15a40:	38          	.byte	0x38
   15a41:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   15a42:	7883      	ldrb	r3, [r0, #2]
   15a44:	2b08      	cmp	r3, #8
   15a46:	d0f1      	beq.n	15a2c <bt_conn_set_state+0x38>
			bt_conn_ref(conn);
   15a48:	f009 f88b 	bl	1eb62 <bt_conn_ref>
   15a4c:	e7ee      	b.n	15a2c <bt_conn_set_state+0x38>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15a4e:	7883      	ldrb	r3, [r0, #2]
   15a50:	2b01      	cmp	r3, #1
   15a52:	d1eb      	bne.n	15a2c <bt_conn_set_state+0x38>
			k_work_cancel_delayable(&conn->deferred_work);
   15a54:	3058      	adds	r0, #88	; 0x58
   15a56:	f00b f938 	bl	20cca <k_work_cancel_delayable>
   15a5a:	e7e7      	b.n	15a2c <bt_conn_set_state+0x38>
	z_impl_k_sem_give(sem);
   15a5c:	4d65      	ldr	r5, [pc, #404]	; (15bf4 <bt_conn_set_state+0x200>)
		tx->pending_no_cb = 0U;
   15a5e:	2600      	movs	r6, #0
	__asm__ volatile(
   15a60:	f04f 0240 	mov.w	r2, #64	; 0x40
   15a64:	f3ef 8311 	mrs	r3, BASEPRI
   15a68:	f382 8812 	msr	BASEPRI_MAX, r2
   15a6c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15a70:	69e2      	ldr	r2, [r4, #28]
   15a72:	2a00      	cmp	r2, #0
   15a74:	f000 808e 	beq.w	15b94 <bt_conn_set_state+0x1a0>
			conn->pending_no_cb--;
   15a78:	3a01      	subs	r2, #1
   15a7a:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   15a7c:	f383 8811 	msr	BASEPRI, r3
   15a80:	f3bf 8f6f 	isb	sy
   15a84:	4628      	mov	r0, r5
   15a86:	f006 fcb5 	bl	1c3f4 <z_impl_k_sem_give>
}
   15a8a:	e7e9      	b.n	15a60 <bt_conn_set_state+0x6c>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15a8c:	78a3      	ldrb	r3, [r4, #2]
   15a8e:	2b04      	cmp	r3, #4
   15a90:	d00a      	beq.n	15aa8 <bt_conn_set_state+0xb4>
	z_impl_k_queue_init(queue);
   15a92:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15a96:	f00b f823 	bl	20ae0 <z_impl_k_queue_init>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15a9a:	4857      	ldr	r0, [pc, #348]	; (15bf8 <bt_conn_set_state+0x204>)
   15a9c:	2100      	movs	r1, #0
   15a9e:	f007 fbf1 	bl	1d284 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15aa2:	2300      	movs	r3, #0
	list->tail = NULL;
   15aa4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
}
   15aa8:	b004      	add	sp, #16
   15aaa:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   15aac:	78a3      	ldrb	r3, [r4, #2]
   15aae:	2b04      	cmp	r3, #4
   15ab0:	d106      	bne.n	15ac0 <bt_conn_set_state+0xcc>
	old = atomic_dec(&conn->ref);
   15ab2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
}
   15ab6:	b004      	add	sp, #16
   15ab8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	old = atomic_dec(&conn->ref);
   15abc:	f009 b816 	b.w	1eaec <atomic_dec.isra.0>
		switch (old_state) {
   15ac0:	2d08      	cmp	r5, #8
   15ac2:	d8f1      	bhi.n	15aa8 <bt_conn_set_state+0xb4>
   15ac4:	a301      	add	r3, pc, #4	; (adr r3, 15acc <bt_conn_set_state+0xd8>)
   15ac6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
   15aca:	bf00      	nop
   15acc:	00015b49 	.word	0x00015b49
   15ad0:	00015af1 	.word	0x00015af1
   15ad4:	00015b3b 	.word	0x00015b3b
   15ad8:	00015ab3 	.word	0x00015ab3
   15adc:	00015ab3 	.word	0x00015ab3
   15ae0:	00015b3b 	.word	0x00015b3b
   15ae4:	00015b3b 	.word	0x00015b3b
   15ae8:	00015aa9 	.word	0x00015aa9
   15aec:	00015b49 	.word	0x00015b49
			tx_notify(conn);
   15af0:	4620      	mov	r0, r4
   15af2:	f7ff fd15 	bl	15520 <tx_notify>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15af6:	78a3      	ldrb	r3, [r4, #2]
   15af8:	2b01      	cmp	r3, #1
   15afa:	d10a      	bne.n	15b12 <bt_conn_set_state+0x11e>
			    (k_work_delayable_busy_get(&conn->deferred_work) &
   15afc:	f104 0558 	add.w	r5, r4, #88	; 0x58
   15b00:	4628      	mov	r0, r5
   15b02:	f00b f8e0 	bl	20cc6 <k_work_delayable_busy_get>
			if ((conn->type == BT_CONN_TYPE_LE) &&
   15b06:	f010 0f0c 	tst.w	r0, #12
   15b0a:	d002      	beq.n	15b12 <bt_conn_set_state+0x11e>
				k_work_cancel_delayable(&conn->deferred_work);
   15b0c:	4628      	mov	r0, r5
   15b0e:	f00b f8dc 	bl	20cca <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15b12:	f3bf 8f5b 	dmb	ish
   15b16:	3404      	adds	r4, #4
   15b18:	e854 3f00 	ldrex	r3, [r4]
   15b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15b20:	e844 3200 	strex	r2, r3, [r4]
   15b24:	2a00      	cmp	r2, #0
   15b26:	d1f7      	bne.n	15b18 <bt_conn_set_state+0x124>
   15b28:	f3bf 8f5b 	dmb	ish
   15b2c:	4832      	ldr	r0, [pc, #200]	; (15bf8 <bt_conn_set_state+0x204>)
   15b2e:	2100      	movs	r1, #0
}
   15b30:	b004      	add	sp, #16
   15b32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15b36:	f007 bba5 	b.w	1d284 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   15b3a:	7a63      	ldrb	r3, [r4, #9]
   15b3c:	2b00      	cmp	r3, #0
   15b3e:	d0b8      	beq.n	15ab2 <bt_conn_set_state+0xbe>
				notify_connected(conn);
   15b40:	4620      	mov	r0, r4
   15b42:	f7ff fcb7 	bl	154b4 <notify_connected>
   15b46:	e7b4      	b.n	15ab2 <bt_conn_set_state+0xbe>
			LOG_WRN("Invalid (%u) old state", state);
   15b48:	4b2c      	ldr	r3, [pc, #176]	; (15bfc <bt_conn_set_state+0x208>)
   15b4a:	9603      	str	r6, [sp, #12]
   15b4c:	e760      	b.n	15a10 <bt_conn_set_state+0x1c>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15b4e:	78a3      	ldrb	r3, [r4, #2]
   15b50:	2b01      	cmp	r3, #1
   15b52:	d1a9      	bne.n	15aa8 <bt_conn_set_state+0xb4>
					K_MSEC(10 * bt_dev.create_param.timeout));
   15b54:	4b2a      	ldr	r3, [pc, #168]	; (15c00 <bt_conn_set_state+0x20c>)
   15b56:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
   15b58:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
   15b5a:	b1c8      	cbz	r0, 15b90 <bt_conn_set_state+0x19c>
   15b5c:	230a      	movs	r3, #10
   15b5e:	4358      	muls	r0, r3
   15b60:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
   15b62:	03c9      	lsls	r1, r1, #15
   15b64:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   15b68:	f240 33e7 	movw	r3, #999	; 0x3e7
   15b6c:	03c0      	lsls	r0, r0, #15
   15b6e:	18c0      	adds	r0, r0, r3
   15b70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15b74:	f04f 0300 	mov.w	r3, #0
   15b78:	f141 0100 	adc.w	r1, r1, #0
   15b7c:	f7ea fac0 	bl	100 <__aeabi_uldivmod>
   15b80:	4602      	mov	r2, r0
   15b82:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   15b84:	4620      	mov	r0, r4
}
   15b86:	b004      	add	sp, #16
   15b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15b8c:	f006 be16 	b.w	1c7bc <k_work_schedule>
					K_MSEC(10 * bt_dev.create_param.timeout));
   15b90:	4601      	mov	r1, r0
   15b92:	e7e6      	b.n	15b62 <bt_conn_set_state+0x16e>
	return list->head;
   15b94:	6961      	ldr	r1, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15b96:	b921      	cbnz	r1, 15ba2 <bt_conn_set_state+0x1ae>
   15b98:	f383 8811 	msr	BASEPRI, r3
   15b9c:	f3bf 8f6f 	isb	sy
		if (!node) {
   15ba0:	e782      	b.n	15aa8 <bt_conn_set_state+0xb4>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ba2:	69a0      	ldr	r0, [r4, #24]
	return node->next;
   15ba4:	680a      	ldr	r2, [r1, #0]
	list->head = node;
   15ba6:	6162      	str	r2, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15ba8:	4281      	cmp	r1, r0
	list->tail = node;
   15baa:	bf08      	it	eq
   15bac:	61a2      	streq	r2, [r4, #24]
   15bae:	f383 8811 	msr	BASEPRI, r3
   15bb2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   15bb6:	f04f 0240 	mov.w	r2, #64	; 0x40
   15bba:	f3ef 8311 	mrs	r3, BASEPRI
   15bbe:	f382 8812 	msr	BASEPRI_MAX, r2
   15bc2:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15bc6:	68ca      	ldr	r2, [r1, #12]
   15bc8:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15bca:	60ce      	str	r6, [r1, #12]
	__asm__ volatile(
   15bcc:	f383 8811 	msr	BASEPRI, r3
   15bd0:	f3bf 8f6f 	isb	sy
		conn_tx_destroy(conn, tx);
   15bd4:	4620      	mov	r0, r4
   15bd6:	f7ff fcd3 	bl	15580 <conn_tx_destroy>
   15bda:	e753      	b.n	15a84 <bt_conn_set_state+0x90>
		LOG_WRN("no valid (%u) state was set", state);
   15bdc:	4b09      	ldr	r3, [pc, #36]	; (15c04 <bt_conn_set_state+0x210>)
   15bde:	9603      	str	r6, [sp, #12]
   15be0:	e716      	b.n	15a10 <bt_conn_set_state+0x1c>
   15be2:	bf00      	nop
   15be4:	000218c0 	.word	0x000218c0
   15be8:	00022de0 	.word	0x00022de0
   15bec:	00022dea 	.word	0x00022dea
   15bf0:	00021634 	.word	0x00021634
   15bf4:	20000470 	.word	0x20000470
   15bf8:	2000066c 	.word	0x2000066c
   15bfc:	00022dfb 	.word	0x00022dfb
   15c00:	20000370 	.word	0x20000370
   15c04:	00022e12 	.word	0x00022e12

00015c08 <bt_conn_index>:
		index = conn - acl_conns;
   15c08:	4b03      	ldr	r3, [pc, #12]	; (15c18 <bt_conn_index+0x10>)
   15c0a:	1ac0      	subs	r0, r0, r3
   15c0c:	4b03      	ldr	r3, [pc, #12]	; (15c1c <bt_conn_index+0x14>)
   15c0e:	1180      	asrs	r0, r0, #6
   15c10:	4358      	muls	r0, r3
}
   15c12:	b2c0      	uxtb	r0, r0
   15c14:	4770      	bx	lr
   15c16:	bf00      	nop
   15c18:	200019e0 	.word	0x200019e0
   15c1c:	aaaaaaab 	.word	0xaaaaaaab

00015c20 <bt_conn_create_pdu_timeout>:
{
   15c20:	b530      	push	{r4, r5, lr}
   15c22:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   15c24:	490c      	ldr	r1, [pc, #48]	; (15c58 <bt_conn_create_pdu_timeout+0x38>)
   15c26:	b085      	sub	sp, #20
   15c28:	2800      	cmp	r0, #0
   15c2a:	bf08      	it	eq
   15c2c:	4608      	moveq	r0, r1
   15c2e:	f00a f82d 	bl	1fc8c <net_buf_alloc_fixed>
	if (!buf) {
   15c32:	4604      	mov	r4, r0
   15c34:	b958      	cbnz	r0, 15c4e <bt_conn_create_pdu_timeout+0x2e>
		LOG_WRN("Unable to allocate buffer within timeout");
   15c36:	4b09      	ldr	r3, [pc, #36]	; (15c5c <bt_conn_create_pdu_timeout+0x3c>)
   15c38:	4909      	ldr	r1, [pc, #36]	; (15c60 <bt_conn_create_pdu_timeout+0x40>)
   15c3a:	9000      	str	r0, [sp, #0]
   15c3c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   15c40:	2202      	movs	r2, #2
   15c42:	4603      	mov	r3, r0
   15c44:	f008 ff43 	bl	1eace <z_log_msg_runtime_create.constprop.0>
}
   15c48:	4620      	mov	r0, r4
   15c4a:	b005      	add	sp, #20
   15c4c:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   15c4e:	1d29      	adds	r1, r5, #4
   15c50:	300c      	adds	r0, #12
   15c52:	f00a f822 	bl	1fc9a <net_buf_simple_reserve>
	return buf;
   15c56:	e7f7      	b.n	15c48 <bt_conn_create_pdu_timeout+0x28>
   15c58:	200008fc 	.word	0x200008fc
   15c5c:	00022e2e 	.word	0x00022e2e
   15c60:	00021634 	.word	0x00021634

00015c64 <notify_le_param_updated>:
{
   15c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15c66:	1d03      	adds	r3, r0, #4
{
   15c68:	4604      	mov	r4, r0
   15c6a:	4618      	mov	r0, r3
   15c6c:	f008 ff29 	bl	1eac2 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15c70:	0582      	lsls	r2, r0, #22
   15c72:	d519      	bpl.n	15ca8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   15c74:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   15c78:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
   15c7c:	4291      	cmp	r1, r2
   15c7e:	d813      	bhi.n	15ca8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
   15c80:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
   15c84:	4291      	cmp	r1, r2
   15c86:	d30f      	bcc.n	15ca8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
   15c88:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
   15c8c:	4291      	cmp	r1, r2
   15c8e:	d10b      	bne.n	15ca8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15c90:	f3bf 8f5b 	dmb	ish
   15c94:	e853 1f00 	ldrex	r1, [r3]
   15c98:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   15c9c:	e843 1200 	strex	r2, r1, [r3]
   15ca0:	2a00      	cmp	r2, #0
   15ca2:	d1f7      	bne.n	15c94 <notify_le_param_updated+0x30>
   15ca4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   15ca8:	4b0f      	ldr	r3, [pc, #60]	; (15ce8 <notify_le_param_updated+0x84>)
   15caa:	681d      	ldr	r5, [r3, #0]
   15cac:	b925      	cbnz	r5, 15cb8 <notify_le_param_updated+0x54>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15cae:	4d0f      	ldr	r5, [pc, #60]	; (15cec <notify_le_param_updated+0x88>)
   15cb0:	4f0f      	ldr	r7, [pc, #60]	; (15cf0 <notify_le_param_updated+0x8c>)
   15cb2:	42bd      	cmp	r5, r7
   15cb4:	d30c      	bcc.n	15cd0 <notify_le_param_updated+0x6c>
}
   15cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
   15cb8:	68ee      	ldr	r6, [r5, #12]
   15cba:	b13e      	cbz	r6, 15ccc <notify_le_param_updated+0x68>
			cb->le_param_updated(conn, conn->le.interval,
   15cbc:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15cc0:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15cc4:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15cc8:	4620      	mov	r0, r4
   15cca:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15ccc:	692d      	ldr	r5, [r5, #16]
   15cce:	e7ed      	b.n	15cac <notify_le_param_updated+0x48>
		if (cb->le_param_updated) {
   15cd0:	68ee      	ldr	r6, [r5, #12]
   15cd2:	b13e      	cbz	r6, 15ce4 <notify_le_param_updated+0x80>
			cb->le_param_updated(conn, conn->le.interval,
   15cd4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15cd8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15cdc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15ce0:	4620      	mov	r0, r4
   15ce2:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15ce4:	3514      	adds	r5, #20
   15ce6:	e7e4      	b.n	15cb2 <notify_le_param_updated+0x4e>
   15ce8:	20002578 	.word	0x20002578
   15cec:	000215f8 	.word	0x000215f8
   15cf0:	0002160c 	.word	0x0002160c

00015cf4 <le_param_req>:
{
   15cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15cf8:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   15cfa:	4608      	mov	r0, r1
{
   15cfc:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   15cfe:	f008 fe69 	bl	1e9d4 <bt_le_conn_params_valid>
   15d02:	4605      	mov	r5, r0
   15d04:	b918      	cbnz	r0, 15d0e <le_param_req+0x1a>
		return false;
   15d06:	2500      	movs	r5, #0
}
   15d08:	4628      	mov	r0, r5
   15d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15d0e:	4b13      	ldr	r3, [pc, #76]	; (15d5c <le_param_req+0x68>)
   15d10:	681e      	ldr	r6, [r3, #0]
   15d12:	b946      	cbnz	r6, 15d26 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d14:	4e12      	ldr	r6, [pc, #72]	; (15d60 <le_param_req+0x6c>)
   15d16:	f8df 804c 	ldr.w	r8, [pc, #76]	; 15d64 <le_param_req+0x70>
   15d1a:	4546      	cmp	r6, r8
   15d1c:	d2f4      	bcs.n	15d08 <le_param_req+0x14>
		if (!cb->le_param_req) {
   15d1e:	68b3      	ldr	r3, [r6, #8]
   15d20:	b983      	cbnz	r3, 15d44 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15d22:	3614      	adds	r6, #20
   15d24:	e7f9      	b.n	15d1a <le_param_req+0x26>
		if (!cb->le_param_req) {
   15d26:	68b3      	ldr	r3, [r6, #8]
   15d28:	b90b      	cbnz	r3, 15d2e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
   15d2a:	6936      	ldr	r6, [r6, #16]
   15d2c:	e7f1      	b.n	15d12 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   15d2e:	4621      	mov	r1, r4
   15d30:	4638      	mov	r0, r7
   15d32:	4798      	blx	r3
   15d34:	2800      	cmp	r0, #0
   15d36:	d0e6      	beq.n	15d06 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15d38:	4620      	mov	r0, r4
   15d3a:	f008 fe4b 	bl	1e9d4 <bt_le_conn_params_valid>
   15d3e:	2800      	cmp	r0, #0
   15d40:	d1f3      	bne.n	15d2a <le_param_req+0x36>
   15d42:	e7e0      	b.n	15d06 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   15d44:	4621      	mov	r1, r4
   15d46:	4638      	mov	r0, r7
   15d48:	4798      	blx	r3
   15d4a:	2800      	cmp	r0, #0
   15d4c:	d0db      	beq.n	15d06 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   15d4e:	4620      	mov	r0, r4
   15d50:	f008 fe40 	bl	1e9d4 <bt_le_conn_params_valid>
   15d54:	2800      	cmp	r0, #0
   15d56:	d1e4      	bne.n	15d22 <le_param_req+0x2e>
   15d58:	e7d5      	b.n	15d06 <le_param_req+0x12>
   15d5a:	bf00      	nop
   15d5c:	20002578 	.word	0x20002578
   15d60:	000215f8 	.word	0x000215f8
   15d64:	0002160c 	.word	0x0002160c

00015d68 <bt_conn_add_le>:
{
   15d68:	b570      	push	{r4, r5, r6, lr}
   15d6a:	4606      	mov	r6, r0
   15d6c:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15d6e:	4809      	ldr	r0, [pc, #36]	; (15d94 <bt_conn_add_le+0x2c>)
   15d70:	2101      	movs	r1, #1
   15d72:	f7ff fccb 	bl	1570c <bt_conn_new>
	if (!conn) {
   15d76:	4604      	mov	r4, r0
   15d78:	b150      	cbz	r0, 15d90 <bt_conn_add_le+0x28>
	conn->id = id;
   15d7a:	7206      	strb	r6, [r0, #8]
   15d7c:	2207      	movs	r2, #7
   15d7e:	4629      	mov	r1, r5
   15d80:	3088      	adds	r0, #136	; 0x88
   15d82:	f008 fcfd 	bl	1e780 <memcpy>
	conn->type = BT_CONN_TYPE_LE;
   15d86:	2301      	movs	r3, #1
   15d88:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15d8a:	4b03      	ldr	r3, [pc, #12]	; (15d98 <bt_conn_add_le+0x30>)
   15d8c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
}
   15d90:	4620      	mov	r0, r4
   15d92:	bd70      	pop	{r4, r5, r6, pc}
   15d94:	200019e0 	.word	0x200019e0
   15d98:	00280018 	.word	0x00280018

00015d9c <bt_conn_lookup_addr_le>:
{
   15d9c:	b570      	push	{r4, r5, r6, lr}
   15d9e:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15da0:	480b      	ldr	r0, [pc, #44]	; (15dd0 <bt_conn_lookup_addr_le+0x34>)
{
   15da2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15da4:	f008 fedd 	bl	1eb62 <bt_conn_ref>
   15da8:	4604      	mov	r4, r0
		if (!conn) {
   15daa:	b130      	cbz	r0, 15dba <bt_conn_lookup_addr_le+0x1e>
		if (conn->type != BT_CONN_TYPE_LE) {
   15dac:	7883      	ldrb	r3, [r0, #2]
   15dae:	2b01      	cmp	r3, #1
   15db0:	d005      	beq.n	15dbe <bt_conn_lookup_addr_le+0x22>
	old = atomic_dec(&conn->ref);
   15db2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   15db6:	f008 fe99 	bl	1eaec <atomic_dec.isra.0>
	return NULL;
   15dba:	2400      	movs	r4, #0
   15dbc:	e005      	b.n	15dca <bt_conn_lookup_addr_le+0x2e>
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15dbe:	4632      	mov	r2, r6
   15dc0:	4629      	mov	r1, r5
   15dc2:	f008 ff17 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   15dc6:	2800      	cmp	r0, #0
   15dc8:	d0f3      	beq.n	15db2 <bt_conn_lookup_addr_le+0x16>
}
   15dca:	4620      	mov	r0, r4
   15dcc:	bd70      	pop	{r4, r5, r6, pc}
   15dce:	bf00      	nop
   15dd0:	200019e0 	.word	0x200019e0

00015dd4 <bt_conn_lookup_state_le>:
{
   15dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15dd6:	4605      	mov	r5, r0
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15dd8:	480f      	ldr	r0, [pc, #60]	; (15e18 <bt_conn_lookup_state_le+0x44>)
{
   15dda:	460e      	mov	r6, r1
   15ddc:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15dde:	f008 fec0 	bl	1eb62 <bt_conn_ref>
		if (!conn) {
   15de2:	4604      	mov	r4, r0
   15de4:	b130      	cbz	r0, 15df4 <bt_conn_lookup_state_le+0x20>
		if (conn->type != BT_CONN_TYPE_LE) {
   15de6:	7883      	ldrb	r3, [r0, #2]
   15de8:	2b01      	cmp	r3, #1
   15dea:	d005      	beq.n	15df8 <bt_conn_lookup_state_le+0x24>
	old = atomic_dec(&conn->ref);
   15dec:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   15df0:	f008 fe7c 	bl	1eaec <atomic_dec.isra.0>
	return NULL;
   15df4:	2400      	movs	r4, #0
   15df6:	e00c      	b.n	15e12 <bt_conn_lookup_state_le+0x3e>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   15df8:	b12e      	cbz	r6, 15e06 <bt_conn_lookup_state_le+0x32>
   15dfa:	4632      	mov	r2, r6
   15dfc:	4629      	mov	r1, r5
   15dfe:	f008 fef9 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   15e02:	2800      	cmp	r0, #0
   15e04:	d0f2      	beq.n	15dec <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   15e06:	7aa3      	ldrb	r3, [r4, #10]
   15e08:	42bb      	cmp	r3, r7
   15e0a:	d1ef      	bne.n	15dec <bt_conn_lookup_state_le+0x18>
   15e0c:	7a23      	ldrb	r3, [r4, #8]
   15e0e:	42ab      	cmp	r3, r5
   15e10:	d1ec      	bne.n	15dec <bt_conn_lookup_state_le+0x18>
}
   15e12:	4620      	mov	r0, r4
   15e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15e16:	bf00      	nop
   15e18:	200019e0 	.word	0x200019e0

00015e1c <bt_conn_le_create_auto>:

#if defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_conn_le_create_auto(const struct bt_conn_le_create_param *create_param,
			   const struct bt_le_conn_param *param)
{
   15e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e1e:	4607      	mov	r7, r0
   15e20:	b085      	sub	sp, #20
   15e22:	4839      	ldr	r0, [pc, #228]	; (15f08 <bt_conn_le_create_auto+0xec>)
   15e24:	f008 fe4d 	bl	1eac2 <atomic_get>
   15e28:	460d      	mov	r5, r1
	struct bt_conn *conn;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15e2a:	0741      	lsls	r1, r0, #29
   15e2c:	d565      	bpl.n	15efa <bt_conn_le_create_auto+0xde>
		return -EAGAIN;
	}

	if (!bt_le_conn_params_valid(param)) {
   15e2e:	4628      	mov	r0, r5
   15e30:	f008 fdd0 	bl	1e9d4 <bt_le_conn_params_valid>
   15e34:	b920      	cbnz	r0, 15e40 <bt_conn_le_create_auto+0x24>
		return -EINVAL;
   15e36:	f06f 0515 	mvn.w	r5, #21
	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
	return 0;
}
   15e3a:	4628      	mov	r0, r5
   15e3c:	b005      	add	sp, #20
   15e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE,
   15e40:	4932      	ldr	r1, [pc, #200]	; (15f0c <bt_conn_le_create_auto+0xf0>)
   15e42:	2203      	movs	r2, #3
   15e44:	2000      	movs	r0, #0
   15e46:	f7ff ffc5 	bl	15dd4 <bt_conn_lookup_state_le>
	if (conn) {
   15e4a:	b128      	cbz	r0, 15e58 <bt_conn_le_create_auto+0x3c>
	old = atomic_dec(&conn->ref);
   15e4c:	30b8      	adds	r0, #184	; 0xb8
   15e4e:	f008 fe4d 	bl	1eaec <atomic_dec.isra.0>
		return -EALREADY;
   15e52:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15e56:	e7f0      	b.n	15e3a <bt_conn_le_create_auto+0x1e>
   15e58:	482b      	ldr	r0, [pc, #172]	; (15f08 <bt_conn_le_create_auto+0xec>)
   15e5a:	f008 fe32 	bl	1eac2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   15e5e:	0642      	lsls	r2, r0, #25
   15e60:	d4e9      	bmi.n	15e36 <bt_conn_le_create_auto+0x1a>
   15e62:	4829      	ldr	r0, [pc, #164]	; (15f08 <bt_conn_le_create_auto+0xec>)
   15e64:	f008 fe2d 	bl	1eac2 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   15e68:	04c3      	lsls	r3, r0, #19
   15e6a:	f3c0 3600 	ubfx	r6, r0, #12, #1
   15e6e:	d4e2      	bmi.n	15e36 <bt_conn_le_create_auto+0x1a>
	if (!bt_id_scan_random_addr_check()) {
   15e70:	f008 fe07 	bl	1ea82 <bt_id_scan_random_addr_check>
   15e74:	2800      	cmp	r0, #0
   15e76:	d0de      	beq.n	15e36 <bt_conn_le_create_auto+0x1a>
	conn = bt_conn_add_le(BT_ID_DEFAULT, BT_ADDR_LE_NONE);
   15e78:	4924      	ldr	r1, [pc, #144]	; (15f0c <bt_conn_le_create_auto+0xf0>)
   15e7a:	4630      	mov	r0, r6
   15e7c:	f7ff ff74 	bl	15d68 <bt_conn_add_le>
	if (!conn) {
   15e80:	4604      	mov	r4, r0
   15e82:	2800      	cmp	r0, #0
   15e84:	d03c      	beq.n	15f00 <bt_conn_le_create_auto+0xe4>
	conn->le.interval_min = param->interval_min;
   15e86:	882b      	ldrh	r3, [r5, #0]
   15e88:	f8a0 30a0 	strh.w	r3, [r0, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
   15e8c:	886b      	ldrh	r3, [r5, #2]
   15e8e:	f8a0 30a2 	strh.w	r3, [r0, #162]	; 0xa2
	conn->le.latency = param->latency;
   15e92:	88ab      	ldrh	r3, [r5, #4]
   15e94:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
	conn->le.timeout = param->timeout;
   15e98:	88eb      	ldrh	r3, [r5, #6]
   15e9a:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
	create_param_setup(create_param);
   15e9e:	4638      	mov	r0, r7
   15ea0:	f7ff fb26 	bl	154f0 <create_param_setup>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15ea4:	f3bf 8f5b 	dmb	ish
   15ea8:	1d23      	adds	r3, r4, #4
   15eaa:	e853 1f00 	ldrex	r1, [r3]
   15eae:	f041 0101 	orr.w	r1, r1, #1
   15eb2:	e843 1200 	strex	r2, r1, [r3]
   15eb6:	2a00      	cmp	r2, #0
   15eb8:	d1f7      	bne.n	15eaa <bt_conn_le_create_auto+0x8e>
   15eba:	f3bf 8f5b 	dmb	ish
	bt_conn_set_state(conn, BT_CONN_CONNECTING_AUTO);
   15ebe:	2103      	movs	r1, #3
   15ec0:	4620      	mov	r0, r4
   15ec2:	f7ff fd97 	bl	159f4 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   15ec6:	4620      	mov	r0, r4
   15ec8:	f7fd fffc 	bl	13ec4 <bt_le_create_conn>
	old = atomic_dec(&conn->ref);
   15ecc:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
	if (err) {
   15ed0:	4605      	mov	r5, r0
   15ed2:	b170      	cbz	r0, 15ef2 <bt_conn_le_create_auto+0xd6>
		LOG_ERR("Failed to start filtered scan");
   15ed4:	4b0e      	ldr	r3, [pc, #56]	; (15f10 <bt_conn_le_create_auto+0xf4>)
   15ed6:	490f      	ldr	r1, [pc, #60]	; (15f14 <bt_conn_le_create_auto+0xf8>)
   15ed8:	9600      	str	r6, [sp, #0]
   15eda:	e9cd 6301 	strd	r6, r3, [sp, #4]
   15ede:	4630      	mov	r0, r6
   15ee0:	4633      	mov	r3, r6
   15ee2:	2201      	movs	r2, #1
   15ee4:	f008 fdf3 	bl	1eace <z_log_msg_runtime_create.constprop.0>
		conn->err = 0;
   15ee8:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15eea:	4631      	mov	r1, r6
   15eec:	4620      	mov	r0, r4
   15eee:	f7ff fd81 	bl	159f4 <bt_conn_set_state>
	old = atomic_dec(&conn->ref);
   15ef2:	4638      	mov	r0, r7
   15ef4:	f008 fdfa 	bl	1eaec <atomic_dec.isra.0>
	return 0;
   15ef8:	e79f      	b.n	15e3a <bt_conn_le_create_auto+0x1e>
		return -EAGAIN;
   15efa:	f06f 050a 	mvn.w	r5, #10
   15efe:	e79c      	b.n	15e3a <bt_conn_le_create_auto+0x1e>
		return -ENOMEM;
   15f00:	f06f 050b 	mvn.w	r5, #11
   15f04:	e799      	b.n	15e3a <bt_conn_le_create_auto+0x1e>
   15f06:	bf00      	nop
   15f08:	2000043c 	.word	0x2000043c
   15f0c:	000225ca 	.word	0x000225ca
   15f10:	00022e57 	.word	0x00022e57
   15f14:	00021634 	.word	0x00021634

00015f18 <send_conn_le_param_update>:
{
   15f18:	b538      	push	{r3, r4, r5, lr}
   15f1a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   15f1c:	4608      	mov	r0, r1
{
   15f1e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15f20:	f008 fd58 	bl	1e9d4 <bt_le_conn_params_valid>
   15f24:	b338      	cbz	r0, 15f76 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f26:	4b15      	ldr	r3, [pc, #84]	; (15f7c <send_conn_le_param_update+0x64>)
   15f28:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   15f2c:	0799      	lsls	r1, r3, #30
   15f2e:	d407      	bmi.n	15f40 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   15f30:	78e3      	ldrb	r3, [r4, #3]
   15f32:	b173      	cbz	r3, 15f52 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   15f34:	4629      	mov	r1, r5
   15f36:	4620      	mov	r0, r4
}
   15f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   15f3c:	f000 baea 	b.w	16514 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   15f40:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   15f44:	079a      	lsls	r2, r3, #30
   15f46:	d5f3      	bpl.n	15f30 <send_conn_le_param_update+0x18>
   15f48:	1d20      	adds	r0, r4, #4
   15f4a:	f008 fdba 	bl	1eac2 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   15f4e:	0543      	lsls	r3, r0, #21
   15f50:	d4ee      	bmi.n	15f30 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   15f52:	4629      	mov	r1, r5
   15f54:	4620      	mov	r0, r4
   15f56:	f008 fe6f 	bl	1ec38 <bt_conn_le_conn_update>
		if (rc == 0) {
   15f5a:	b958      	cbnz	r0, 15f74 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   15f5c:	882b      	ldrh	r3, [r5, #0]
   15f5e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
   15f62:	886b      	ldrh	r3, [r5, #2]
   15f64:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
   15f68:	88ab      	ldrh	r3, [r5, #4]
   15f6a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   15f6e:	88eb      	ldrh	r3, [r5, #6]
   15f70:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   15f74:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   15f76:	f06f 0015 	mvn.w	r0, #21
   15f7a:	e7fb      	b.n	15f74 <send_conn_le_param_update+0x5c>
   15f7c:	20000370 	.word	0x20000370

00015f80 <deferred_work>:
{
   15f80:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   15f82:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   15f86:	b087      	sub	sp, #28
   15f88:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
   15f8a:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   15f8e:	bb03      	cbnz	r3, 15fd2 <deferred_work+0x52>
		bt_l2cap_disconnected(conn);
   15f90:	4630      	mov	r0, r6
   15f92:	f008 fe9f 	bl	1ecd4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   15f96:	4b34      	ldr	r3, [pc, #208]	; (16068 <deferred_work+0xe8>)
   15f98:	681d      	ldr	r5, [r3, #0]
   15f9a:	b955      	cbnz	r5, 15fb2 <deferred_work+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15f9c:	4d33      	ldr	r5, [pc, #204]	; (1606c <deferred_work+0xec>)
   15f9e:	4f34      	ldr	r7, [pc, #208]	; (16070 <deferred_work+0xf0>)
   15fa0:	42bd      	cmp	r5, r7
   15fa2:	d30e      	bcc.n	15fc2 <deferred_work+0x42>
	old = atomic_dec(&conn->ref);
   15fa4:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   15fa8:	b007      	add	sp, #28
   15faa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	old = atomic_dec(&conn->ref);
   15fae:	f008 bd9d 	b.w	1eaec <atomic_dec.isra.0>
		if (cb->disconnected) {
   15fb2:	686b      	ldr	r3, [r5, #4]
   15fb4:	b11b      	cbz	r3, 15fbe <deferred_work+0x3e>
			cb->disconnected(conn, conn->err);
   15fb6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15fba:	4630      	mov	r0, r6
   15fbc:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   15fbe:	692d      	ldr	r5, [r5, #16]
   15fc0:	e7eb      	b.n	15f9a <deferred_work+0x1a>
		if (cb->disconnected) {
   15fc2:	686b      	ldr	r3, [r5, #4]
   15fc4:	b11b      	cbz	r3, 15fce <deferred_work+0x4e>
			cb->disconnected(conn, conn->err);
   15fc6:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   15fca:	4630      	mov	r0, r6
   15fcc:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   15fce:	3514      	adds	r5, #20
   15fd0:	e7e6      	b.n	15fa0 <deferred_work+0x20>
	if (conn->type != BT_CONN_TYPE_LE) {
   15fd2:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   15fd6:	2b01      	cmp	r3, #1
   15fd8:	d138      	bne.n	1604c <deferred_work+0xcc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   15fda:	f810 3c55 	ldrb.w	r3, [r0, #-85]
   15fde:	b923      	cbnz	r3, 15fea <deferred_work+0x6a>
}
   15fe0:	b007      	add	sp, #28
   15fe2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
   15fe6:	f7fd bfdd 	b.w	13fa4 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
   15fea:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15fee:	f3bf 8f5b 	dmb	ish
   15ff2:	e855 3f00 	ldrex	r3, [r5]
   15ff6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   15ffa:	e845 2100 	strex	r1, r2, [r5]
   15ffe:	2900      	cmp	r1, #0
   16000:	d1f7      	bne.n	15ff2 <deferred_work+0x72>
   16002:	f3bf 8f5b 	dmb	ish
   16006:	059b      	lsls	r3, r3, #22
   16008:	d514      	bpl.n	16034 <deferred_work+0xb4>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1600a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1600c:	9304      	str	r3, [sp, #16]
		err = send_conn_le_param_update(conn, param);
   1600e:	a904      	add	r1, sp, #16
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16010:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16012:	9305      	str	r3, [sp, #20]
		err = send_conn_le_param_update(conn, param);
   16014:	4630      	mov	r0, r6
   16016:	f7ff ff7f 	bl	15f18 <send_conn_le_param_update>
		if (!err) {
   1601a:	b9c8      	cbnz	r0, 16050 <deferred_work+0xd0>
   1601c:	f3bf 8f5b 	dmb	ish
   16020:	e855 3f00 	ldrex	r3, [r5]
   16024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   16028:	e845 3200 	strex	r2, r3, [r5]
   1602c:	2a00      	cmp	r2, #0
   1602e:	d1f7      	bne.n	16020 <deferred_work+0xa0>
   16030:	f3bf 8f5b 	dmb	ish
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16034:	f3bf 8f5b 	dmb	ish
   16038:	e855 3f00 	ldrex	r3, [r5]
   1603c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   16040:	e845 3200 	strex	r2, r3, [r5]
   16044:	2a00      	cmp	r2, #0
   16046:	d1f7      	bne.n	16038 <deferred_work+0xb8>
   16048:	f3bf 8f5b 	dmb	ish
}
   1604c:	b007      	add	sp, #28
   1604e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LOG_WRN("Send LE param update failed (err %d)", err);
   16050:	4b08      	ldr	r3, [pc, #32]	; (16074 <deferred_work+0xf4>)
   16052:	9302      	str	r3, [sp, #8]
   16054:	2300      	movs	r3, #0
   16056:	9003      	str	r0, [sp, #12]
   16058:	e9cd 3300 	strd	r3, r3, [sp]
   1605c:	4906      	ldr	r1, [pc, #24]	; (16078 <deferred_work+0xf8>)
   1605e:	2202      	movs	r2, #2
   16060:	4618      	mov	r0, r3
   16062:	f008 fd34 	bl	1eace <z_log_msg_runtime_create.constprop.0>
   16066:	e7e5      	b.n	16034 <deferred_work+0xb4>
   16068:	20002578 	.word	0x20002578
   1606c:	000215f8 	.word	0x000215f8
   16070:	0002160c 	.word	0x0002160c
   16074:	00022e75 	.word	0x00022e75
   16078:	00021634 	.word	0x00021634

0001607c <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1607c:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1607e:	4801      	ldr	r0, [pc, #4]	; (16084 <bt_conn_create_frag_timeout+0x8>)
   16080:	f7ff bdce 	b.w	15c20 <bt_conn_create_pdu_timeout>
   16084:	20000954 	.word	0x20000954

00016088 <create_frag>:
{
   16088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1608c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1608e:	f04f 33ff 	mov.w	r3, #4294967295
   16092:	f04f 32ff 	mov.w	r2, #4294967295
   16096:	2000      	movs	r0, #0
{
   16098:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1609a:	f7ff ffef 	bl	1607c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1609e:	7ab3      	ldrb	r3, [r6, #10]
   160a0:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   160a2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   160a4:	f04f 0600 	mov.w	r6, #0
   160a8:	d005      	beq.n	160b6 <create_frag+0x2e>
		net_buf_unref(frag);
   160aa:	f002 f969 	bl	18380 <net_buf_unref>
		return NULL;
   160ae:	4635      	mov	r5, r6
}
   160b0:	4628      	mov	r0, r5
   160b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   160b6:	6186      	str	r6, [r0, #24]
	return net_buf_simple_tailroom(&buf->b);
   160b8:	f100 070c 	add.w	r7, r0, #12
	return bt_dev.le.acl_mtu;
   160bc:	4e0c      	ldr	r6, [pc, #48]	; (160f0 <create_frag+0x68>)
   160be:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   160c0:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   160c4:	f009 fe7d 	bl	1fdc2 <net_buf_simple_tailroom>
   160c8:	4580      	cmp	r8, r0
   160ca:	d20c      	bcs.n	160e6 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   160cc:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   160d0:	f854 1f0c 	ldr.w	r1, [r4, #12]!
   160d4:	4632      	mov	r2, r6
   160d6:	4638      	mov	r0, r7
   160d8:	f009 fe3e 	bl	1fd58 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   160dc:	4631      	mov	r1, r6
   160de:	4620      	mov	r0, r4
   160e0:	f009 fe4b 	bl	1fd7a <net_buf_simple_pull>
   160e4:	e7e4      	b.n	160b0 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   160e6:	4638      	mov	r0, r7
   160e8:	f009 fe6b 	bl	1fdc2 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   160ec:	b286      	uxth	r6, r0
   160ee:	e7ef      	b.n	160d0 <create_frag+0x48>
   160f0:	20000370 	.word	0x20000370

000160f4 <bt_conn_process_tx>:
{
   160f4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   160f6:	7a83      	ldrb	r3, [r0, #10]
{
   160f8:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   160fa:	b993      	cbnz	r3, 16122 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   160fc:	f3bf 8f5b 	dmb	ish
   16100:	1d03      	adds	r3, r0, #4
   16102:	e853 2f00 	ldrex	r2, [r3]
   16106:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1610a:	e843 1500 	strex	r5, r1, [r3]
   1610e:	2d00      	cmp	r5, #0
   16110:	d1f7      	bne.n	16102 <bt_conn_process_tx+0xe>
   16112:	f3bf 8f5b 	dmb	ish
   16116:	0653      	lsls	r3, r2, #25
   16118:	d503      	bpl.n	16122 <bt_conn_process_tx+0x2e>
}
   1611a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1611e:	f008 bcfd 	b.w	1eb1c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   16122:	2200      	movs	r2, #0
   16124:	2300      	movs	r3, #0
   16126:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1612a:	f009 fdb4 	bl	1fc96 <net_buf_get>
	BT_ASSERT(buf);
   1612e:	4605      	mov	r5, r0
   16130:	b960      	cbnz	r0, 1614c <bt_conn_process_tx+0x58>
   16132:	4a24      	ldr	r2, [pc, #144]	; (161c4 <bt_conn_process_tx+0xd0>)
   16134:	4924      	ldr	r1, [pc, #144]	; (161c8 <bt_conn_process_tx+0xd4>)
   16136:	4825      	ldr	r0, [pc, #148]	; (161cc <bt_conn_process_tx+0xd8>)
   16138:	f240 331a 	movw	r3, #794	; 0x31a
   1613c:	f007 fff3 	bl	1e126 <assert_print>
   16140:	4040      	eors	r0, r0
   16142:	f380 8811 	msr	BASEPRI, r0
   16146:	f04f 0003 	mov.w	r0, #3
   1614a:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1614c:	4e20      	ldr	r6, [pc, #128]	; (161d0 <bt_conn_process_tx+0xdc>)
	if (buf->len <= conn_mtu(conn)) {
   1614e:	8a2a      	ldrh	r2, [r5, #16]
   16150:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16154:	429a      	cmp	r2, r3
   16156:	d807      	bhi.n	16168 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   16158:	2300      	movs	r3, #0
   1615a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1615c:	4629      	mov	r1, r5
   1615e:	4620      	mov	r0, r4
   16160:	f7ff fa24 	bl	155ac <send_frag>
	if (!send_buf(conn, buf)) {
   16164:	b968      	cbnz	r0, 16182 <bt_conn_process_tx+0x8e>
   16166:	e005      	b.n	16174 <bt_conn_process_tx+0x80>
	frag = create_frag(conn, buf);
   16168:	4629      	mov	r1, r5
   1616a:	4620      	mov	r0, r4
   1616c:	f7ff ff8c 	bl	16088 <create_frag>
	if (!frag) {
   16170:	4601      	mov	r1, r0
   16172:	b938      	cbnz	r0, 16184 <bt_conn_process_tx+0x90>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   16174:	69ae      	ldr	r6, [r5, #24]
		tx_data(buf)->tx = NULL;
   16176:	2300      	movs	r3, #0
   16178:	61ab      	str	r3, [r5, #24]
		net_buf_unref(buf);
   1617a:	4628      	mov	r0, r5
   1617c:	f002 f900 	bl	18380 <net_buf_unref>
		if (tx) {
   16180:	b9ce      	cbnz	r6, 161b6 <bt_conn_process_tx+0xc2>
}
   16182:	bd70      	pop	{r4, r5, r6, pc}
	if (!send_frag(conn, frag, FRAG_START, true)) {
   16184:	2301      	movs	r3, #1
   16186:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   16188:	4620      	mov	r0, r4
   1618a:	f7ff fa0f 	bl	155ac <send_frag>
   1618e:	2800      	cmp	r0, #0
   16190:	d0f0      	beq.n	16174 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   16192:	8a2a      	ldrh	r2, [r5, #16]
   16194:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
   16198:	429a      	cmp	r2, r3
   1619a:	d802      	bhi.n	161a2 <bt_conn_process_tx+0xae>
	return send_frag(conn, buf, FRAG_END, false);
   1619c:	2300      	movs	r3, #0
   1619e:	2203      	movs	r2, #3
   161a0:	e7dc      	b.n	1615c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   161a2:	4629      	mov	r1, r5
   161a4:	4620      	mov	r0, r4
   161a6:	f7ff ff6f 	bl	16088 <create_frag>
		if (!frag) {
   161aa:	4601      	mov	r1, r0
   161ac:	2800      	cmp	r0, #0
   161ae:	d0e1      	beq.n	16174 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   161b0:	2301      	movs	r3, #1
   161b2:	461a      	mov	r2, r3
   161b4:	e7e8      	b.n	16188 <bt_conn_process_tx+0x94>
			conn_tx_destroy(conn, tx);
   161b6:	4631      	mov	r1, r6
   161b8:	4620      	mov	r0, r4
}
   161ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			conn_tx_destroy(conn, tx);
   161be:	f7ff b9df 	b.w	15580 <conn_tx_destroy>
   161c2:	bf00      	nop
   161c4:	00022e9a 	.word	0x00022e9a
   161c8:	00023426 	.word	0x00023426
   161cc:	0002277b 	.word	0x0002277b
   161d0:	20000370 	.word	0x20000370

000161d4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   161d4:	b510      	push	{r4, lr}
	z_impl_k_queue_init(queue);
   161d6:	4810      	ldr	r0, [pc, #64]	; (16218 <bt_conn_init+0x44>)
   161d8:	f00a fc82 	bl	20ae0 <z_impl_k_queue_init>
	int err, i;

	k_fifo_init(&free_tx);
	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   161dc:	490f      	ldr	r1, [pc, #60]	; (1621c <bt_conn_init+0x48>)
   161de:	480e      	ldr	r0, [pc, #56]	; (16218 <bt_conn_init+0x44>)
   161e0:	f00a fc8a 	bl	20af8 <k_queue_append>
   161e4:	490e      	ldr	r1, [pc, #56]	; (16220 <bt_conn_init+0x4c>)
   161e6:	480c      	ldr	r0, [pc, #48]	; (16218 <bt_conn_init+0x44>)
   161e8:	f00a fc86 	bl	20af8 <k_queue_append>
   161ec:	490d      	ldr	r1, [pc, #52]	; (16224 <bt_conn_init+0x50>)
   161ee:	480a      	ldr	r0, [pc, #40]	; (16218 <bt_conn_init+0x44>)
   161f0:	f00a fc82 	bl	20af8 <k_queue_append>
	}

	bt_att_init();
   161f4:	f001 f89a 	bl	1732c <bt_att_init>

	err = bt_smp_init();
   161f8:	f009 fd45 	bl	1fc86 <bt_smp_init>
	if (err) {
   161fc:	4604      	mov	r4, r0
   161fe:	b940      	cbnz	r0, 16212 <bt_conn_init+0x3e>
		return err;
	}

	bt_l2cap_init();
   16200:	f008 fdc4 	bl	1ed8c <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16204:	4808      	ldr	r0, [pc, #32]	; (16228 <bt_conn_init+0x54>)
   16206:	f008 fcac 	bl	1eb62 <bt_conn_ref>

			if (!conn) {
   1620a:	b110      	cbz	r0, 16212 <bt_conn_init+0x3e>
	old = atomic_dec(&conn->ref);
   1620c:	30b8      	adds	r0, #184	; 0xb8
   1620e:	f008 fc6d 	bl	1eaec <atomic_dec.isra.0>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   16212:	4620      	mov	r0, r4
   16214:	bd10      	pop	{r4, pc}
   16216:	bf00      	nop
   16218:	200008e4 	.word	0x200008e4
   1621c:	20002548 	.word	0x20002548
   16220:	20002558 	.word	0x20002558
   16224:	20002568 	.word	0x20002568
   16228:	200019e0 	.word	0x200019e0

0001622c <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1622c:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
   1622e:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   16230:	b085      	sub	sp, #20
   16232:	4605      	mov	r5, r0
   16234:	460f      	mov	r7, r1
   16236:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   16238:	2104      	movs	r1, #4
   1623a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1623e:	2000      	movs	r0, #0
   16240:	f7ff fcee 	bl	15c20 <bt_conn_create_pdu_timeout>
	if (!buf) {
   16244:	4604      	mov	r4, r0
   16246:	b960      	cbnz	r0, 16262 <l2cap_create_le_sig_pdu.constprop.0+0x36>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", code);
   16248:	4b0a      	ldr	r3, [pc, #40]	; (16274 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
   1624a:	490b      	ldr	r1, [pc, #44]	; (16278 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   1624c:	9503      	str	r5, [sp, #12]
   1624e:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16252:	9000      	str	r0, [sp, #0]
   16254:	4603      	mov	r3, r0
   16256:	2201      	movs	r2, #1
   16258:	f008 fd17 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
}
   1625c:	4620      	mov	r0, r4
   1625e:	b005      	add	sp, #20
   16260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   16262:	2104      	movs	r1, #4
   16264:	300c      	adds	r0, #12
   16266:	f009 fd71 	bl	1fd4c <net_buf_simple_add>
	hdr->code = code;
   1626a:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1626c:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1626e:	8046      	strh	r6, [r0, #2]
	return buf;
   16270:	e7f4      	b.n	1625c <l2cap_create_le_sig_pdu.constprop.0+0x30>
   16272:	bf00      	nop
   16274:	00022f43 	.word	0x00022f43
   16278:	00021654 	.word	0x00021654

0001627c <l2cap_accept>:
	(void)k_work_cancel_delayable(&le_chan->rtx_work);
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   1627c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1627e:	4c0b      	ldr	r4, [pc, #44]	; (162ac <l2cap_accept+0x30>)
   16280:	6822      	ldr	r2, [r4, #0]
   16282:	2300      	movs	r3, #0
   16284:	b92a      	cbnz	r2, 16292 <l2cap_accept+0x16>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   16286:	4b0a      	ldr	r3, [pc, #40]	; (162b0 <l2cap_accept+0x34>)
   16288:	6063      	str	r3, [r4, #4]
		*chan = &l2cap->chan.chan;

		return 0;
   1628a:	4610      	mov	r0, r2
		*chan = &l2cap->chan.chan;
   1628c:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1628e:	b004      	add	sp, #16
   16290:	bd10      	pop	{r4, pc}
	LOG_ERR("No available L2CAP context for conn %p", conn);
   16292:	4a08      	ldr	r2, [pc, #32]	; (162b4 <l2cap_accept+0x38>)
   16294:	9003      	str	r0, [sp, #12]
   16296:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1629a:	4618      	mov	r0, r3
   1629c:	4906      	ldr	r1, [pc, #24]	; (162b8 <l2cap_accept+0x3c>)
   1629e:	9300      	str	r3, [sp, #0]
   162a0:	2201      	movs	r2, #1
   162a2:	f008 fcf2 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
   162a6:	f06f 000b 	mvn.w	r0, #11
   162aa:	e7f0      	b.n	1628e <l2cap_accept+0x12>
   162ac:	2000257c 	.word	0x2000257c
   162b0:	00021904 	.word	0x00021904
   162b4:	00022f6b 	.word	0x00022f6b
   162b8:	00021654 	.word	0x00021654

000162bc <bt_l2cap_connected>:
{
   162bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   162be:	4d24      	ldr	r5, [pc, #144]	; (16350 <bt_l2cap_connected+0x94>)
   162c0:	4f24      	ldr	r7, [pc, #144]	; (16354 <bt_l2cap_connected+0x98>)
{
   162c2:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   162c4:	2600      	movs	r6, #0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   162c6:	42bd      	cmp	r5, r7
   162c8:	d301      	bcc.n	162ce <bt_l2cap_connected+0x12>
}
   162ca:	b003      	add	sp, #12
   162cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (fchan->accept(conn, &chan) < 0) {
   162ce:	686b      	ldr	r3, [r5, #4]
   162d0:	a901      	add	r1, sp, #4
   162d2:	4620      	mov	r0, r4
   162d4:	4798      	blx	r3
   162d6:	2800      	cmp	r0, #0
   162d8:	db34      	blt.n	16344 <bt_l2cap_connected+0x88>
		le_chan = BT_L2CAP_LE_CHAN(chan);
   162da:	9b01      	ldr	r3, [sp, #4]
		le_chan->rx.cid = fchan->cid;
   162dc:	882a      	ldrh	r2, [r5, #0]
   162de:	829a      	strh	r2, [r3, #20]
		le_chan->tx.cid = fchan->cid;
   162e0:	849a      	strh	r2, [r3, #36]	; 0x24
   162e2:	f103 0210 	add.w	r2, r3, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   162e6:	68a8      	ldr	r0, [r5, #8]
   162e8:	f3bf 8f5b 	dmb	ish
   162ec:	e852 1f00 	ldrex	r1, [r2]
   162f0:	e842 6c00 	strex	ip, r6, [r2]
   162f4:	f1bc 0f00 	cmp.w	ip, #0
   162f8:	d1f8      	bne.n	162ec <bt_l2cap_connected+0x30>
   162fa:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   162fe:	609e      	str	r6, [r3, #8]
	return list->tail;
   16300:	6d61      	ldr	r1, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   16302:	f103 0208 	add.w	r2, r3, #8
Z_GENLIST_APPEND(slist, snode)
   16306:	b9f9      	cbnz	r1, 16348 <bt_l2cap_connected+0x8c>
	list->head = node;
   16308:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
	chan->conn = conn;
   1630c:	601c      	str	r4, [r3, #0]
	chan->destroy = destroy;
   1630e:	60d8      	str	r0, [r3, #12]
		if (chan->ops->connected) {
   16310:	9801      	ldr	r0, [sp, #4]
   16312:	6843      	ldr	r3, [r0, #4]
   16314:	681b      	ldr	r3, [r3, #0]
   16316:	b103      	cbz	r3, 1631a <bt_l2cap_connected+0x5e>
			chan->ops->connected(chan);
   16318:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1631a:	9b01      	ldr	r3, [sp, #4]
   1631c:	f3bf 8f5b 	dmb	ish
   16320:	3310      	adds	r3, #16
   16322:	e853 1f00 	ldrex	r1, [r3]
   16326:	f041 0101 	orr.w	r1, r1, #1
   1632a:	e843 1200 	strex	r2, r1, [r3]
   1632e:	2a00      	cmp	r2, #0
   16330:	d1f7      	bne.n	16322 <bt_l2cap_connected+0x66>
   16332:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   16336:	9801      	ldr	r0, [sp, #4]
   16338:	6843      	ldr	r3, [r0, #4]
   1633a:	69db      	ldr	r3, [r3, #28]
   1633c:	b113      	cbz	r3, 16344 <bt_l2cap_connected+0x88>
			chan->ops->status(chan, chan->status);
   1633e:	f100 0110 	add.w	r1, r0, #16
   16342:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16344:	350c      	adds	r5, #12
   16346:	e7be      	b.n	162c6 <bt_l2cap_connected+0xa>
	parent->next = child;
   16348:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1634a:	6562      	str	r2, [r4, #84]	; 0x54
}
   1634c:	e7de      	b.n	1630c <bt_l2cap_connected+0x50>
   1634e:	bf00      	nop
   16350:	000215d4 	.word	0x000215d4
   16354:	000215f8 	.word	0x000215f8

00016358 <l2cap_recv>:
{
   16358:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1635a:	8a0b      	ldrh	r3, [r1, #16]
   1635c:	2b03      	cmp	r3, #3
{
   1635e:	b089      	sub	sp, #36	; 0x24
   16360:	4606      	mov	r6, r0
   16362:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16364:	d805      	bhi.n	16372 <l2cap_recv+0x1a>
		LOG_ERR("Too small L2CAP signaling PDU");
   16366:	4b47      	ldr	r3, [pc, #284]	; (16484 <l2cap_recv+0x12c>)
		LOG_ERR("Too small LE conn param rsp");
   16368:	9302      	str	r3, [sp, #8]
   1636a:	2300      	movs	r3, #0
   1636c:	e9cd 3300 	strd	r3, r3, [sp]
   16370:	e01f      	b.n	163b2 <l2cap_recv+0x5a>
	return net_buf_simple_pull_mem(&buf->b, len);
   16372:	2104      	movs	r1, #4
   16374:	f105 000c 	add.w	r0, r5, #12
   16378:	f009 fd07 	bl	1fd8a <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1637c:	8a2b      	ldrh	r3, [r5, #16]
   1637e:	4604      	mov	r4, r0
	len = sys_le16_to_cpu(hdr->len);
   16380:	8840      	ldrh	r0, [r0, #2]
	if (buf->len != len) {
   16382:	4298      	cmp	r0, r3
   16384:	d00e      	beq.n	163a4 <l2cap_recv+0x4c>
		LOG_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   16386:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1638a:	4b3f      	ldr	r3, [pc, #252]	; (16488 <l2cap_recv+0x130>)
   1638c:	9302      	str	r3, [sp, #8]
   1638e:	2300      	movs	r3, #0
   16390:	e9cd 3300 	strd	r3, r3, [sp]
   16394:	493d      	ldr	r1, [pc, #244]	; (1648c <l2cap_recv+0x134>)
   16396:	2201      	movs	r2, #1
   16398:	4618      	mov	r0, r3
   1639a:	f008 fc76 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
}
   1639e:	2000      	movs	r0, #0
   163a0:	b009      	add	sp, #36	; 0x24
   163a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   163a4:	7861      	ldrb	r1, [r4, #1]
   163a6:	b951      	cbnz	r1, 163be <l2cap_recv+0x66>
		LOG_ERR("Invalid ident value in L2CAP PDU");
   163a8:	4b39      	ldr	r3, [pc, #228]	; (16490 <l2cap_recv+0x138>)
   163aa:	9100      	str	r1, [sp, #0]
   163ac:	e9cd 1301 	strd	r1, r3, [sp, #4]
   163b0:	460b      	mov	r3, r1
   163b2:	2201      	movs	r2, #1
   163b4:	4935      	ldr	r1, [pc, #212]	; (1648c <l2cap_recv+0x134>)
   163b6:	4618      	mov	r0, r3
   163b8:	f008 fc67 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
		return 0;
   163bc:	e7ef      	b.n	1639e <l2cap_recv+0x46>
	switch (hdr->code) {
   163be:	7823      	ldrb	r3, [r4, #0]
   163c0:	2b12      	cmp	r3, #18
   163c2:	d015      	beq.n	163f0 <l2cap_recv+0x98>
   163c4:	2b13      	cmp	r3, #19
   163c6:	d00f      	beq.n	163e8 <l2cap_recv+0x90>
   163c8:	2b01      	cmp	r3, #1
   163ca:	d0e8      	beq.n	1639e <l2cap_recv+0x46>
   163cc:	9303      	str	r3, [sp, #12]
		LOG_WRN("Rejecting unknown L2CAP PDU code 0x%02x", hdr->code);
   163ce:	4b31      	ldr	r3, [pc, #196]	; (16494 <l2cap_recv+0x13c>)
   163d0:	9302      	str	r3, [sp, #8]
   163d2:	2300      	movs	r3, #0
   163d4:	492d      	ldr	r1, [pc, #180]	; (1648c <l2cap_recv+0x134>)
   163d6:	4618      	mov	r0, r3
   163d8:	e9cd 3300 	strd	r3, r3, [sp]
   163dc:	2202      	movs	r2, #2
   163de:	f008 fc54 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
   163e2:	7861      	ldrb	r1, [r4, #1]
   163e4:	6830      	ldr	r0, [r6, #0]
   163e6:	e016      	b.n	16416 <l2cap_recv+0xbe>
	if (buf->len < sizeof(*rsp)) {
   163e8:	2801      	cmp	r0, #1
   163ea:	d8d8      	bhi.n	1639e <l2cap_recv+0x46>
		LOG_ERR("Too small LE conn param rsp");
   163ec:	4b2a      	ldr	r3, [pc, #168]	; (16498 <l2cap_recv+0x140>)
   163ee:	e7bb      	b.n	16368 <l2cap_recv+0x10>
	if (buf->len < sizeof(*req)) {
   163f0:	2807      	cmp	r0, #7
   163f2:	6834      	ldr	r4, [r6, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   163f4:	68ea      	ldr	r2, [r5, #12]
	if (buf->len < sizeof(*req)) {
   163f6:	d801      	bhi.n	163fc <l2cap_recv+0xa4>
		LOG_ERR("Too small LE conn update param req");
   163f8:	4b28      	ldr	r3, [pc, #160]	; (1649c <l2cap_recv+0x144>)
   163fa:	e7b5      	b.n	16368 <l2cap_recv+0x10>
	if (conn->state != BT_CONN_CONNECTED) {
   163fc:	7aa3      	ldrb	r3, [r4, #10]
   163fe:	2b07      	cmp	r3, #7
   16400:	d006      	beq.n	16410 <l2cap_recv+0xb8>
		LOG_WRN("Not connected");
   16402:	4b27      	ldr	r3, [pc, #156]	; (164a0 <l2cap_recv+0x148>)
   16404:	9302      	str	r3, [sp, #8]
   16406:	2300      	movs	r3, #0
   16408:	e9cd 3300 	strd	r3, r3, [sp]
   1640c:	2202      	movs	r2, #2
   1640e:	e7d1      	b.n	163b4 <l2cap_recv+0x5c>
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   16410:	78e7      	ldrb	r7, [r4, #3]
   16412:	b11f      	cbz	r7, 1641c <l2cap_recv+0xc4>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   16414:	4620      	mov	r0, r4
		l2cap_send_reject(chan->conn, hdr->ident,
   16416:	f008 fc91 	bl	1ed3c <l2cap_send_reject.constprop.0>
		break;
   1641a:	e7c0      	b.n	1639e <l2cap_recv+0x46>
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1641c:	8813      	ldrh	r3, [r2, #0]
   1641e:	f8ad 3018 	strh.w	r3, [sp, #24]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   16422:	8853      	ldrh	r3, [r2, #2]
   16424:	f8ad 301a 	strh.w	r3, [sp, #26]
	param.latency = sys_le16_to_cpu(req->latency);
   16428:	8893      	ldrh	r3, [r2, #4]
   1642a:	f8ad 301c 	strh.w	r3, [sp, #28]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1642e:	88d3      	ldrh	r3, [r2, #6]
   16430:	f8ad 301e 	strh.w	r3, [sp, #30]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   16434:	2202      	movs	r2, #2
   16436:	2013      	movs	r0, #19
   16438:	f7ff fef8 	bl	1622c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1643c:	4605      	mov	r5, r0
   1643e:	2800      	cmp	r0, #0
   16440:	d0ad      	beq.n	1639e <l2cap_recv+0x46>
	accepted = le_param_req(conn, &param);
   16442:	a906      	add	r1, sp, #24
   16444:	4620      	mov	r0, r4
   16446:	f7ff fc55 	bl	15cf4 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1644a:	2102      	movs	r1, #2
   1644c:	4606      	mov	r6, r0
   1644e:	f105 000c 	add.w	r0, r5, #12
   16452:	f009 fc7b 	bl	1fd4c <net_buf_simple_add>
	if (accepted) {
   16456:	f086 0301 	eor.w	r3, r6, #1
   1645a:	b2db      	uxtb	r3, r3
   1645c:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1645e:	462a      	mov	r2, r5
   16460:	9700      	str	r7, [sp, #0]
   16462:	463b      	mov	r3, r7
   16464:	2105      	movs	r1, #5
   16466:	4620      	mov	r0, r4
   16468:	f008 fc4f 	bl	1ed0a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1646c:	b110      	cbz	r0, 16474 <l2cap_recv+0x11c>
		net_buf_unref(buf);
   1646e:	4628      	mov	r0, r5
   16470:	f001 ff86 	bl	18380 <net_buf_unref>
	if (accepted) {
   16474:	2e00      	cmp	r6, #0
   16476:	d092      	beq.n	1639e <l2cap_recv+0x46>
		bt_conn_le_conn_update(conn, &param);
   16478:	a906      	add	r1, sp, #24
   1647a:	4620      	mov	r0, r4
   1647c:	f008 fbdc 	bl	1ec38 <bt_conn_le_conn_update>
   16480:	e78d      	b.n	1639e <l2cap_recv+0x46>
   16482:	bf00      	nop
   16484:	00022f92 	.word	0x00022f92
   16488:	00022fb0 	.word	0x00022fb0
   1648c:	00021654 	.word	0x00021654
   16490:	00022fd1 	.word	0x00022fd1
   16494:	0002303f 	.word	0x0002303f
   16498:	00022ff2 	.word	0x00022ff2
   1649c:	0002300e 	.word	0x0002300e
   164a0:	00023031 	.word	0x00023031

000164a4 <bt_l2cap_recv>:
{
   164a4:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   164a6:	8a0b      	ldrh	r3, [r1, #16]
   164a8:	2b03      	cmp	r3, #3
{
   164aa:	b085      	sub	sp, #20
   164ac:	4605      	mov	r5, r0
   164ae:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   164b0:	d80f      	bhi.n	164d2 <bt_l2cap_recv+0x2e>
		LOG_ERR("Too small L2CAP PDU received");
   164b2:	4b15      	ldr	r3, [pc, #84]	; (16508 <bt_l2cap_recv+0x64>)
   164b4:	9302      	str	r3, [sp, #8]
   164b6:	2300      	movs	r3, #0
   164b8:	e9cd 3300 	strd	r3, r3, [sp]
   164bc:	4913      	ldr	r1, [pc, #76]	; (1650c <bt_l2cap_recv+0x68>)
   164be:	2201      	movs	r2, #1
   164c0:	4618      	mov	r0, r3
   164c2:	f008 fbe2 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
	net_buf_unref(buf);
   164c6:	4620      	mov	r0, r4
}
   164c8:	b005      	add	sp, #20
   164ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
   164ce:	f001 bf57 	b.w	18380 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   164d2:	2104      	movs	r1, #4
   164d4:	f104 000c 	add.w	r0, r4, #12
   164d8:	f009 fc57 	bl	1fd8a <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   164dc:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   164de:	4628      	mov	r0, r5
   164e0:	f008 fc4a 	bl	1ed78 <bt_l2cap_le_lookup_rx_cid>
   164e4:	4603      	mov	r3, r0
	if (!chan) {
   164e6:	b948      	cbnz	r0, 164fc <bt_l2cap_recv+0x58>
		LOG_WRN("Ignoring data for unknown channel ID 0x%04x", cid);
   164e8:	4a09      	ldr	r2, [pc, #36]	; (16510 <bt_l2cap_recv+0x6c>)
   164ea:	9103      	str	r1, [sp, #12]
   164ec:	e9cd 0201 	strd	r0, r2, [sp, #4]
   164f0:	4906      	ldr	r1, [pc, #24]	; (1650c <bt_l2cap_recv+0x68>)
   164f2:	9000      	str	r0, [sp, #0]
   164f4:	2202      	movs	r2, #2
   164f6:	f008 fbc8 	bl	1ec8a <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   164fa:	e7e4      	b.n	164c6 <bt_l2cap_recv+0x22>
	chan->ops->recv(chan, buf);
   164fc:	6843      	ldr	r3, [r0, #4]
   164fe:	4621      	mov	r1, r4
   16500:	695b      	ldr	r3, [r3, #20]
   16502:	4798      	blx	r3
   16504:	e7df      	b.n	164c6 <bt_l2cap_recv+0x22>
   16506:	bf00      	nop
   16508:	00023067 	.word	0x00023067
   1650c:	00021654 	.word	0x00021654
   16510:	00023084 	.word	0x00023084

00016514 <bt_l2cap_update_conn_param>:
{
   16514:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   16516:	4b17      	ldr	r3, [pc, #92]	; (16574 <bt_l2cap_update_conn_param+0x60>)
{
   16518:	460e      	mov	r6, r1
	ident++;
   1651a:	7819      	ldrb	r1, [r3, #0]
   1651c:	3101      	adds	r1, #1
   1651e:	b2c9      	uxtb	r1, r1
   16520:	2901      	cmp	r1, #1
   16522:	bf38      	it	cc
   16524:	2101      	movcc	r1, #1
{
   16526:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   16528:	2208      	movs	r2, #8
   1652a:	2012      	movs	r0, #18
	ident++;
   1652c:	7019      	strb	r1, [r3, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1652e:	f7ff fe7d 	bl	1622c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   16532:	4604      	mov	r4, r0
   16534:	b1d0      	cbz	r0, 1656c <bt_l2cap_update_conn_param+0x58>
	return net_buf_simple_add(&buf->b, len);
   16536:	2108      	movs	r1, #8
   16538:	300c      	adds	r0, #12
   1653a:	f009 fc07 	bl	1fd4c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1653e:	8833      	ldrh	r3, [r6, #0]
   16540:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   16542:	8873      	ldrh	r3, [r6, #2]
   16544:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   16546:	88b3      	ldrh	r3, [r6, #4]
   16548:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1654a:	88f3      	ldrh	r3, [r6, #6]
   1654c:	80c3      	strh	r3, [r0, #6]
   1654e:	2300      	movs	r3, #0
   16550:	4628      	mov	r0, r5
   16552:	9300      	str	r3, [sp, #0]
   16554:	4622      	mov	r2, r4
   16556:	2105      	movs	r1, #5
   16558:	f008 fbd7 	bl	1ed0a <bt_l2cap_send_cb>
	if (err) {
   1655c:	4605      	mov	r5, r0
   1655e:	b110      	cbz	r0, 16566 <bt_l2cap_update_conn_param+0x52>
		net_buf_unref(buf);
   16560:	4620      	mov	r0, r4
   16562:	f001 ff0d 	bl	18380 <net_buf_unref>
}
   16566:	4628      	mov	r0, r5
   16568:	b002      	add	sp, #8
   1656a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1656c:	f06f 050b 	mvn.w	r5, #11
   16570:	e7f9      	b.n	16566 <bt_l2cap_update_conn_param+0x52>
   16572:	bf00      	nop
   16574:	20002a3b 	.word	0x20002a3b

00016578 <att_op_get_type>:
#endif /* CONFIG_BT_GATT_CLIENT */
};

static att_type_t att_op_get_type(uint8_t op)
{
	switch (op) {
   16578:	2823      	cmp	r0, #35	; 0x23
   1657a:	d81f      	bhi.n	165bc <att_op_get_type+0x44>
   1657c:	281a      	cmp	r0, #26
   1657e:	d804      	bhi.n	1658a <att_op_get_type+0x12>
   16580:	1e43      	subs	r3, r0, #1
   16582:	2b18      	cmp	r3, #24
   16584:	d90e      	bls.n	165a4 <att_op_get_type+0x2c>

	if (op & ATT_CMD_MASK) {
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
   16586:	2006      	movs	r0, #6
   16588:	4770      	bx	lr
	switch (op) {
   1658a:	f1a0 031b 	sub.w	r3, r0, #27
   1658e:	2b08      	cmp	r3, #8
   16590:	d81e      	bhi.n	165d0 <att_op_get_type+0x58>
   16592:	e8df f003 	tbb	[pc, r3]
   16596:	1d05      	.short	0x1d05
   16598:	191d231b 	.word	0x191d231b
   1659c:	1d25      	.short	0x1d25
   1659e:	05          	.byte	0x05
   1659f:	00          	.byte	0x00
		return ATT_NOTIFICATION;
   165a0:	2003      	movs	r0, #3
   165a2:	4770      	bx	lr
	switch (op) {
   165a4:	4a0f      	ldr	r2, [pc, #60]	; (165e4 <att_op_get_type+0x6c>)
   165a6:	2301      	movs	r3, #1
   165a8:	4083      	lsls	r3, r0
   165aa:	401a      	ands	r2, r3
   165ac:	b9c2      	cbnz	r2, 165e0 <att_op_get_type+0x68>
   165ae:	4a0e      	ldr	r2, [pc, #56]	; (165e8 <att_op_get_type+0x70>)
   165b0:	401a      	ands	r2, r3
	return ATT_UNKNOWN;
   165b2:	2a00      	cmp	r2, #0
   165b4:	bf14      	ite	ne
   165b6:	2001      	movne	r0, #1
   165b8:	2006      	moveq	r0, #6
   165ba:	4770      	bx	lr
	switch (op) {
   165bc:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   165c0:	2b52      	cmp	r3, #82	; 0x52
   165c2:	d105      	bne.n	165d0 <att_op_get_type+0x58>
		return ATT_COMMAND;
   165c4:	2000      	movs	r0, #0
}
   165c6:	4770      	bx	lr
		return ATT_REQUEST;
   165c8:	2001      	movs	r0, #1
   165ca:	4770      	bx	lr
		return ATT_INDICATION;
   165cc:	2005      	movs	r0, #5
   165ce:	4770      	bx	lr
		return ATT_COMMAND;
   165d0:	f010 0f40 	tst.w	r0, #64	; 0x40
   165d4:	bf0c      	ite	eq
   165d6:	2006      	moveq	r0, #6
   165d8:	2000      	movne	r0, #0
   165da:	4770      	bx	lr
	switch (op) {
   165dc:	2004      	movs	r0, #4
   165de:	4770      	bx	lr
		return ATT_RESPONSE;
   165e0:	2002      	movs	r0, #2
   165e2:	4770      	bx	lr
   165e4:	028aaaaa 	.word	0x028aaaaa
   165e8:	01455554 	.word	0x01455554

000165ec <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   165ec:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   165ee:	3804      	subs	r0, #4
   165f0:	9001      	str	r0, [sp, #4]

	LOG_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   165f2:	a901      	add	r1, sp, #4
   165f4:	4802      	ldr	r0, [pc, #8]	; (16600 <bt_att_released+0x14>)
   165f6:	f00a f9b5 	bl	20964 <k_mem_slab_free>
}
   165fa:	b003      	add	sp, #12
   165fc:	f85d fb04 	ldr.w	pc, [sp], #4
   16600:	2000086c 	.word	0x2000086c

00016604 <tx_meta_data_free>:
{
   16604:	b510      	push	{r4, lr}
	(void)memset(data, 0, sizeof(*data));
   16606:	2100      	movs	r1, #0
{
   16608:	4604      	mov	r4, r0
	(void)memset(data, 0, sizeof(*data));
   1660a:	2214      	movs	r2, #20
   1660c:	f008 f8c3 	bl	1e796 <memset>
	k_fifo_put(&free_att_tx_meta_data, data);
   16610:	4621      	mov	r1, r4
   16612:	4802      	ldr	r0, [pc, #8]	; (1661c <tx_meta_data_free+0x18>)
}
   16614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_fifo_put(&free_att_tx_meta_data, data);
   16618:	f00a ba6e 	b.w	20af8 <k_queue_append>
   1661c:	200008cc 	.word	0x200008cc

00016620 <find_type_cb>:
{
   16620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16624:	b093      	sub	sp, #76	; 0x4c
	struct bt_att_chan *chan = data->chan;
   16626:	f8d2 9000 	ldr.w	r9, [r2]
{
   1662a:	4607      	mov	r7, r0
   1662c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1662e:	2500      	movs	r5, #0
   16630:	f642 0301 	movw	r3, #10241	; 0x2801
   16634:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   16636:	f8d9 8004 	ldr.w	r8, [r9, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1663a:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   1663e:	a90d      	add	r1, sp, #52	; 0x34
{
   16640:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16642:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   16646:	f008 f8c4 	bl	1e7d2 <bt_uuid_cmp>
   1664a:	2800      	cmp	r0, #0
   1664c:	d067      	beq.n	1671e <find_type_cb+0xfe>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1664e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16652:	6838      	ldr	r0, [r7, #0]
   16654:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
   16658:	a90d      	add	r1, sp, #52	; 0x34
   1665a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
   1665e:	f008 f8b8 	bl	1e7d2 <bt_uuid_cmp>
   16662:	b138      	cbz	r0, 16674 <find_type_cb+0x54>
		if (data->group &&
   16664:	68a3      	ldr	r3, [r4, #8]
   16666:	b11b      	cbz	r3, 16670 <find_type_cb+0x50>
   16668:	885a      	ldrh	r2, [r3, #2]
   1666a:	42b2      	cmp	r2, r6
   1666c:	d200      	bcs.n	16670 <find_type_cb+0x50>
	data->group->end_handle = sys_cpu_to_le16(handle);
   1666e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16670:	2001      	movs	r0, #1
   16672:	e009      	b.n	16688 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   16674:	6861      	ldr	r1, [r4, #4]
   16676:	4608      	mov	r0, r1
   16678:	f008 fb93 	bl	1eda2 <net_buf_frags_len>
   1667c:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   16680:	1a1b      	subs	r3, r3, r0
   16682:	2b03      	cmp	r3, #3
   16684:	d803      	bhi.n	1668e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   16686:	2000      	movs	r0, #0
}
   16688:	b013      	add	sp, #76	; 0x4c
   1668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1668e:	4608      	mov	r0, r1
   16690:	f009 fb3a 	bl	1fd08 <net_buf_frag_last>
   16694:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   16696:	6860      	ldr	r0, [r4, #4]
   16698:	f008 fb83 	bl	1eda2 <net_buf_frags_len>
   1669c:	f8b9 a02a 	ldrh.w	sl, [r9, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   166a0:	f105 0b0c 	add.w	fp, r5, #12
   166a4:	ebaa 0a00 	sub.w	sl, sl, r0
   166a8:	4658      	mov	r0, fp
   166aa:	f009 fb8a 	bl	1fdc2 <net_buf_simple_tailroom>
   166ae:	4582      	cmp	sl, r0
   166b0:	d238      	bcs.n	16724 <find_type_cb+0x104>
   166b2:	6860      	ldr	r0, [r4, #4]
   166b4:	f008 fb75 	bl	1eda2 <net_buf_frags_len>
   166b8:	f8b9 302a 	ldrh.w	r3, [r9, #42]	; 0x2a
   166bc:	1a18      	subs	r0, r3, r0
	if (!len) {
   166be:	b970      	cbnz	r0, 166de <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   166c0:	6863      	ldr	r3, [r4, #4]
   166c2:	7a98      	ldrb	r0, [r3, #10]
   166c4:	f001 fd9a 	bl	181fc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   166c8:	2200      	movs	r2, #0
   166ca:	2300      	movs	r3, #0
   166cc:	f009 fade 	bl	1fc8c <net_buf_alloc_fixed>
		if (!frag) {
   166d0:	4605      	mov	r5, r0
   166d2:	2800      	cmp	r0, #0
   166d4:	d0d7      	beq.n	16686 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   166d6:	4601      	mov	r1, r0
   166d8:	6860      	ldr	r0, [r4, #4]
   166da:	f009 fb26 	bl	1fd2a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   166de:	2300      	movs	r3, #0
   166e0:	9300      	str	r3, [sp, #0]
   166e2:	2310      	movs	r3, #16
   166e4:	f8d7 9004 	ldr.w	r9, [r7, #4]
   166e8:	4639      	mov	r1, r7
   166ea:	eb0d 0203 	add.w	r2, sp, r3
   166ee:	4640      	mov	r0, r8
   166f0:	47c8      	blx	r9
	if (read < 0) {
   166f2:	1e07      	subs	r7, r0, #0
   166f4:	db13      	blt.n	1671e <find_type_cb+0xfe>
	if (read != data->value_len) {
   166f6:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   166f8:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   166fa:	42ba      	cmp	r2, r7
   166fc:	d031      	beq.n	16762 <find_type_cb+0x142>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   166fe:	4601      	mov	r1, r0
   16700:	a80d      	add	r0, sp, #52	; 0x34
   16702:	f008 f894 	bl	1e82e <bt_uuid_create>
   16706:	4603      	mov	r3, r0
   16708:	b980      	cbnz	r0, 1672c <find_type_cb+0x10c>
			LOG_WRN("Unable to create UUID: size %u", data->value_len);
   1670a:	7c22      	ldrb	r2, [r4, #16]
   1670c:	9203      	str	r2, [sp, #12]
   1670e:	4a17      	ldr	r2, [pc, #92]	; (1676c <find_type_cb+0x14c>)
			LOG_WRN("Unable to create UUID: size %d", read);
   16710:	4917      	ldr	r1, [pc, #92]	; (16770 <find_type_cb+0x150>)
   16712:	9300      	str	r3, [sp, #0]
   16714:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16718:	2202      	movs	r2, #2
   1671a:	f008 fc30 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
	data->group = NULL;
   1671e:	2300      	movs	r3, #0
   16720:	60a3      	str	r3, [r4, #8]
	return BT_GATT_ITER_CONTINUE;
   16722:	e7a5      	b.n	16670 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   16724:	4658      	mov	r0, fp
   16726:	f009 fb4c 	bl	1fdc2 <net_buf_simple_tailroom>
   1672a:	e7c8      	b.n	166be <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1672c:	b2fa      	uxtb	r2, r7
   1672e:	a904      	add	r1, sp, #16
   16730:	a808      	add	r0, sp, #32
   16732:	f008 f87c 	bl	1e82e <bt_uuid_create>
   16736:	4603      	mov	r3, r0
   16738:	b910      	cbnz	r0, 16740 <find_type_cb+0x120>
			LOG_WRN("Unable to create UUID: size %d", read);
   1673a:	4a0e      	ldr	r2, [pc, #56]	; (16774 <find_type_cb+0x154>)
   1673c:	9703      	str	r7, [sp, #12]
   1673e:	e7e7      	b.n	16710 <find_type_cb+0xf0>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   16740:	a908      	add	r1, sp, #32
   16742:	a80d      	add	r0, sp, #52	; 0x34
   16744:	f008 f845 	bl	1e7d2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   16748:	2800      	cmp	r0, #0
   1674a:	d1e8      	bne.n	1671e <find_type_cb+0xfe>
	data->err = 0x00;
   1674c:	2300      	movs	r3, #0
   1674e:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   16750:	2104      	movs	r1, #4
   16752:	f105 000c 	add.w	r0, r5, #12
   16756:	f009 faf9 	bl	1fd4c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1675a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1675c:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1675e:	68a3      	ldr	r3, [r4, #8]
   16760:	e785      	b.n	1666e <find_type_cb+0x4e>
	} else if (memcmp(data->value, uuid, read)) {
   16762:	a904      	add	r1, sp, #16
   16764:	f007 fffc 	bl	1e760 <memcmp>
   16768:	e7ee      	b.n	16748 <find_type_cb+0x128>
   1676a:	bf00      	nop
   1676c:	000230c0 	.word	0x000230c0
   16770:	0002162c 	.word	0x0002162c
   16774:	000230df 	.word	0x000230df

00016778 <chan_send>:
{
   16778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1677c:	4606      	mov	r6, r0
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1677e:	f8d1 9018 	ldr.w	r9, [r1, #24]
	hdr = (void *)buf->data;
   16782:	68cb      	ldr	r3, [r1, #12]
{
   16784:	b085      	sub	sp, #20
   16786:	460c      	mov	r4, r1
	if (!atomic_test_bit(chan->flags, ATT_CONNECTED)) {
   16788:	3090      	adds	r0, #144	; 0x90
   1678a:	2102      	movs	r1, #2
   1678c:	f008 fb23 	bl	1edd6 <atomic_test_bit>
   16790:	2800      	cmp	r0, #0
   16792:	d043      	beq.n	1681c <chan_send+0xa4>
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16794:	781b      	ldrb	r3, [r3, #0]
   16796:	2bd2      	cmp	r3, #210	; 0xd2
   16798:	d11a      	bne.n	167d0 <chan_send+0x58>
		err = bt_smp_sign(chan->att->conn, buf);
   1679a:	6833      	ldr	r3, [r6, #0]
   1679c:	4621      	mov	r1, r4
   1679e:	6818      	ldr	r0, [r3, #0]
   167a0:	f009 fa6e 	bl	1fc80 <bt_smp_sign>
		if (err) {
   167a4:	4605      	mov	r5, r0
   167a6:	b198      	cbz	r0, 167d0 <chan_send+0x58>
			LOG_ERR("Error signing data");
   167a8:	4b1e      	ldr	r3, [pc, #120]	; (16824 <chan_send+0xac>)
   167aa:	9302      	str	r3, [sp, #8]
   167ac:	2300      	movs	r3, #0
   167ae:	4618      	mov	r0, r3
   167b0:	e9cd 3300 	strd	r3, r3, [sp]
   167b4:	491c      	ldr	r1, [pc, #112]	; (16828 <chan_send+0xb0>)
   167b6:	2201      	movs	r2, #1
   167b8:	f008 fbe1 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
			tx_meta_data_free(bt_att_tx_meta_data(buf));
   167bc:	69a0      	ldr	r0, [r4, #24]
   167be:	f7ff ff21 	bl	16604 <tx_meta_data_free>
			net_buf_unref(buf);
   167c2:	4620      	mov	r0, r4
   167c4:	f001 fddc 	bl	18380 <net_buf_unref>
}
   167c8:	4628      	mov	r0, r5
   167ca:	b005      	add	sp, #20
   167cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   167d0:	f104 000c 	add.w	r0, r4, #12
   167d4:	f009 faf1 	bl	1fdba <net_buf_simple_headroom>
	state->len = buf->len;
   167d8:	f8b4 8010 	ldrh.w	r8, [r4, #16]
	data->att_chan = chan;
   167dc:	f8c9 6000 	str.w	r6, [r9]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   167e0:	6833      	ldr	r3, [r6, #0]
   167e2:	681d      	ldr	r5, [r3, #0]
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   167e4:	68e3      	ldr	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   167e6:	4607      	mov	r7, r0
   167e8:	7818      	ldrb	r0, [r3, #0]
   167ea:	f7ff fec5 	bl	16578 <att_op_get_type>
	switch (op_type) {
   167ee:	2805      	cmp	r0, #5
   167f0:	bf96      	itet	ls
   167f2:	4b0e      	ldrls	r3, [pc, #56]	; (1682c <chan_send+0xb4>)
	const att_type_t op_type = att_op_get_type(buf->data[0]);
   167f4:	4b0e      	ldrhi	r3, [pc, #56]	; (16830 <chan_send+0xb8>)
   167f6:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   167fa:	f8cd 9000 	str.w	r9, [sp]
   167fe:	4628      	mov	r0, r5
   16800:	4622      	mov	r2, r4
   16802:	2104      	movs	r1, #4
   16804:	f008 fa81 	bl	1ed0a <bt_l2cap_send_cb>
	if (err) {
   16808:	4605      	mov	r5, r0
   1680a:	2800      	cmp	r0, #0
   1680c:	d0dc      	beq.n	167c8 <chan_send+0x50>
	buf->data = buf->__buf + state->offset;
   1680e:	6963      	ldr	r3, [r4, #20]
	buf->len = state->len;
   16810:	f8a4 8010 	strh.w	r8, [r4, #16]
	buf->data = buf->__buf + state->offset;
   16814:	fa13 f787 	uxtah	r7, r3, r7
   16818:	60e7      	str	r7, [r4, #12]
}
   1681a:	e7d5      	b.n	167c8 <chan_send+0x50>
		return -EINVAL;
   1681c:	f06f 0515 	mvn.w	r5, #21
   16820:	e7d2      	b.n	167c8 <chan_send+0x50>
   16822:	bf00      	nop
   16824:	000230fe 	.word	0x000230fe
   16828:	0002162c 	.word	0x0002162c
   1682c:	0002192c 	.word	0x0002192c
   16830:	0001f38b 	.word	0x0001f38b

00016834 <att_get>:
{
   16834:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   16836:	7a83      	ldrb	r3, [r0, #10]
   16838:	2b07      	cmp	r3, #7
   1683a:	d00d      	beq.n	16858 <att_get+0x24>
		LOG_WRN("Not connected");
   1683c:	4b0e      	ldr	r3, [pc, #56]	; (16878 <att_get+0x44>)
   1683e:	9302      	str	r3, [sp, #8]
   16840:	2300      	movs	r3, #0
   16842:	e9cd 3300 	strd	r3, r3, [sp]
   16846:	490d      	ldr	r1, [pc, #52]	; (1687c <att_get+0x48>)
   16848:	2202      	movs	r2, #2
   1684a:	4618      	mov	r0, r3
		LOG_ERR("Unable to find ATT channel");
   1684c:	f008 fb97 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16850:	2000      	movs	r0, #0
}
   16852:	b005      	add	sp, #20
   16854:	f85d fb04 	ldr.w	pc, [sp], #4
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16858:	2104      	movs	r1, #4
   1685a:	f008 fa8d 	bl	1ed78 <bt_l2cap_le_lookup_rx_cid>
   1685e:	4603      	mov	r3, r0
	if (!chan) {
   16860:	b930      	cbnz	r0, 16870 <att_get+0x3c>
		LOG_ERR("Unable to find ATT channel");
   16862:	4a07      	ldr	r2, [pc, #28]	; (16880 <att_get+0x4c>)
   16864:	4905      	ldr	r1, [pc, #20]	; (1687c <att_get+0x48>)
   16866:	9000      	str	r0, [sp, #0]
   16868:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1686c:	2201      	movs	r2, #1
   1686e:	e7ed      	b.n	1684c <att_get+0x18>
	return att_chan->att;
   16870:	f850 0c04 	ldr.w	r0, [r0, #-4]
   16874:	e7ed      	b.n	16852 <att_get+0x1e>
   16876:	bf00      	nop
   16878:	00023031 	.word	0x00023031
   1687c:	0002162c 	.word	0x0002162c
   16880:	00023111 	.word	0x00023111

00016884 <bt_att_connected>:
{
   16884:	b510      	push	{r4, lr}
   16886:	f100 038c 	add.w	r3, r0, #140	; 0x8c
   1688a:	4604      	mov	r4, r0
   1688c:	f3bf 8f5b 	dmb	ish
   16890:	e853 1f00 	ldrex	r1, [r3]
   16894:	f041 0104 	orr.w	r1, r1, #4
   16898:	e843 1200 	strex	r2, r1, [r3]
   1689c:	2a00      	cmp	r2, #0
   1689e:	d1f7      	bne.n	16890 <bt_att_connected+0xc>
   168a0:	f3bf 8f5b 	dmb	ish
		le_chan->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   168a4:	2317      	movs	r3, #23
   168a6:	84e3      	strh	r3, [r4, #38]	; 0x26
		le_chan->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   168a8:	82e3      	strh	r3, [r4, #22]
	att_chan_mtu_updated(att_chan);
   168aa:	1f20      	subs	r0, r4, #4
   168ac:	f008 fb24 	bl	1eef8 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   168b0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
   168b4:	4903      	ldr	r1, [pc, #12]	; (168c4 <bt_att_connected+0x40>)
   168b6:	f00a f9fa 	bl	20cae <k_work_init_delayable>
	bt_gatt_connected(le_chan->chan.conn);
   168ba:	6820      	ldr	r0, [r4, #0]
}
   168bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_gatt_connected(le_chan->chan.conn);
   168c0:	f001 bc22 	b.w	18108 <bt_gatt_connected>
   168c4:	0001752d 	.word	0x0001752d

000168c8 <read_group_cb>:
{
   168c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   168cc:	4605      	mov	r5, r0
   168ce:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   168d0:	f04f 0800 	mov.w	r8, #0
   168d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   168d8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   168da:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   168dc:	f88d 8008 	strb.w	r8, [sp, #8]
   168e0:	a902      	add	r1, sp, #8
{
   168e2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   168e4:	f8ad 300a 	strh.w	r3, [sp, #10]
   168e8:	f007 ff73 	bl	1e7d2 <bt_uuid_cmp>
   168ec:	b1a0      	cbz	r0, 16918 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   168ee:	f642 0301 	movw	r3, #10241	; 0x2801
   168f2:	6828      	ldr	r0, [r5, #0]
   168f4:	f88d 800c 	strb.w	r8, [sp, #12]
   168f8:	a903      	add	r1, sp, #12
   168fa:	f8ad 300e 	strh.w	r3, [sp, #14]
   168fe:	f007 ff68 	bl	1e7d2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   16902:	b148      	cbz	r0, 16918 <read_group_cb+0x50>
		if (data->group &&
   16904:	6923      	ldr	r3, [r4, #16]
   16906:	b11b      	cbz	r3, 16910 <read_group_cb+0x48>
   16908:	885a      	ldrh	r2, [r3, #2]
   1690a:	42b2      	cmp	r2, r6
   1690c:	d200      	bcs.n	16910 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1690e:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   16910:	2001      	movs	r0, #1
}
   16912:	b004      	add	sp, #16
   16914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16918:	6861      	ldr	r1, [r4, #4]
   1691a:	6828      	ldr	r0, [r5, #0]
   1691c:	f007 ff59 	bl	1e7d2 <bt_uuid_cmp>
   16920:	b110      	cbz	r0, 16928 <read_group_cb+0x60>
		data->group = NULL;
   16922:	2300      	movs	r3, #0
   16924:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16926:	e7f3      	b.n	16910 <read_group_cb+0x48>
	if (data->rsp->len &&
   16928:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1692a:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   1692c:	781a      	ldrb	r2, [r3, #0]
   1692e:	b132      	cbz	r2, 1693e <read_group_cb+0x76>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   16932:	8a01      	ldrh	r1, [r0, #16]
   16934:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16936:	4293      	cmp	r3, r2
   16938:	da01      	bge.n	1693e <read_group_cb+0x76>
		return BT_GATT_ITER_STOP;
   1693a:	2000      	movs	r0, #0
   1693c:	e7e9      	b.n	16912 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1693e:	2104      	movs	r1, #4
   16940:	300c      	adds	r0, #12
   16942:	f009 fa03 	bl	1fd4c <net_buf_simple_add>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16946:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16948:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1694a:	6923      	ldr	r3, [r4, #16]
   1694c:	805e      	strh	r6, [r3, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1694e:	4b08      	ldr	r3, [pc, #32]	; (16970 <read_group_cb+0xa8>)
   16950:	9300      	str	r3, [sp, #0]
   16952:	9401      	str	r4, [sp, #4]
   16954:	68a2      	ldr	r2, [r4, #8]
   16956:	2300      	movs	r3, #0
   16958:	4629      	mov	r1, r5
   1695a:	4638      	mov	r0, r7
   1695c:	f008 fb5f 	bl	1f01e <att_chan_read>
	if (read < 0) {
   16960:	2800      	cmp	r0, #0
   16962:	dbea      	blt.n	1693a <read_group_cb+0x72>
	if (!data->group) {
   16964:	6920      	ldr	r0, [r4, #16]
   16966:	3800      	subs	r0, #0
   16968:	bf18      	it	ne
   1696a:	2001      	movne	r0, #1
   1696c:	e7d1      	b.n	16912 <read_group_cb+0x4a>
   1696e:	bf00      	nop
   16970:	0001ef5f 	.word	0x0001ef5f

00016974 <read_type_cb>:
{
   16974:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16978:	6817      	ldr	r7, [r2, #0]
{
   1697a:	4605      	mov	r5, r0
   1697c:	4688      	mov	r8, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1697e:	6800      	ldr	r0, [r0, #0]
   16980:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16982:	687e      	ldr	r6, [r7, #4]
{
   16984:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16986:	f007 ff24 	bl	1e7d2 <bt_uuid_cmp>
   1698a:	4681      	mov	r9, r0
   1698c:	2800      	cmp	r0, #0
   1698e:	d13c      	bne.n	16a0a <read_type_cb+0x96>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16990:	4630      	mov	r0, r6
   16992:	2295      	movs	r2, #149	; 0x95
   16994:	4629      	mov	r1, r5
   16996:	f009 f859 	bl	1fa4c <bt_gatt_check_perm>
   1699a:	4606      	mov	r6, r0
   1699c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1699e:	b140      	cbz	r0, 169b2 <read_type_cb+0x3e>
		if (data->rsp->len) {
   169a0:	68e3      	ldr	r3, [r4, #12]
   169a2:	781b      	ldrb	r3, [r3, #0]
   169a4:	b10b      	cbz	r3, 169aa <read_type_cb+0x36>
			data->err = 0x00;
   169a6:	f884 9014 	strb.w	r9, [r4, #20]
		return BT_GATT_ITER_STOP;
   169aa:	2000      	movs	r0, #0
}
   169ac:	b003      	add	sp, #12
   169ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   169b2:	68a0      	ldr	r0, [r4, #8]
   169b4:	f009 f9a8 	bl	1fd08 <net_buf_frag_last>
   169b8:	2102      	movs	r1, #2
   169ba:	300c      	adds	r0, #12
   169bc:	f009 f9c6 	bl	1fd4c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   169c0:	4b13      	ldr	r3, [pc, #76]	; (16a10 <read_type_cb+0x9c>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   169c2:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(handle);
   169c4:	f8a0 8000 	strh.w	r8, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   169c8:	9300      	str	r3, [sp, #0]
   169ca:	9401      	str	r4, [sp, #4]
   169cc:	68a2      	ldr	r2, [r4, #8]
   169ce:	4633      	mov	r3, r6
   169d0:	4629      	mov	r1, r5
   169d2:	4638      	mov	r0, r7
   169d4:	f008 fb23 	bl	1f01e <att_chan_read>
	if (read < 0) {
   169d8:	2800      	cmp	r0, #0
   169da:	da07      	bge.n	169ec <read_type_cb+0x78>
	if (err < 0 && err >= -0xff) {
   169dc:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   169e0:	bf26      	itte	cs
   169e2:	4240      	negcs	r0, r0
   169e4:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   169e6:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   169e8:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   169ea:	e7de      	b.n	169aa <read_type_cb+0x36>
	if (!data->item) {
   169ec:	6923      	ldr	r3, [r4, #16]
   169ee:	2b00      	cmp	r3, #0
   169f0:	d0db      	beq.n	169aa <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   169f2:	68a0      	ldr	r0, [r4, #8]
   169f4:	f008 f9d5 	bl	1eda2 <net_buf_frags_len>
   169f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   169fa:	1a18      	subs	r0, r3, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   169fc:	68e3      	ldr	r3, [r4, #12]
   169fe:	781b      	ldrb	r3, [r3, #0]
   16a00:	4298      	cmp	r0, r3
   16a02:	bf94      	ite	ls
   16a04:	2000      	movls	r0, #0
   16a06:	2001      	movhi	r0, #1
   16a08:	e7d0      	b.n	169ac <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16a0a:	2001      	movs	r0, #1
   16a0c:	e7ce      	b.n	169ac <read_type_cb+0x38>
   16a0e:	bf00      	nop
   16a10:	0001edb3 	.word	0x0001edb3

00016a14 <bt_att_accept>:

}
#endif /* CONFIG_BT_EATT */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   16a14:	b5f0      	push	{r4, r5, r6, r7, lr}
   16a16:	b087      	sub	sp, #28
   16a18:	4604      	mov	r4, r0
   16a1a:	460f      	mov	r7, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	LOG_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   16a1c:	4834      	ldr	r0, [pc, #208]	; (16af0 <bt_att_accept+0xdc>)
   16a1e:	2200      	movs	r2, #0
   16a20:	2300      	movs	r3, #0
   16a22:	a904      	add	r1, sp, #16
   16a24:	f005 faf8 	bl	1c018 <k_mem_slab_alloc>
   16a28:	4605      	mov	r5, r0
   16a2a:	b178      	cbz	r0, 16a4c <bt_att_accept+0x38>
		LOG_ERR("No available ATT context for conn %p", conn);
   16a2c:	4b31      	ldr	r3, [pc, #196]	; (16af4 <bt_att_accept+0xe0>)
   16a2e:	9302      	str	r3, [sp, #8]
   16a30:	2300      	movs	r3, #0
   16a32:	e9cd 3300 	strd	r3, r3, [sp]
   16a36:	9403      	str	r4, [sp, #12]
   16a38:	2201      	movs	r2, #1
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16a3a:	492f      	ldr	r1, [pc, #188]	; (16af8 <bt_att_accept+0xe4>)
   16a3c:	4618      	mov	r0, r3
   16a3e:	f008 fa9e 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   16a42:	f06f 060b 	mvn.w	r6, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   16a46:	4630      	mov	r0, r6
   16a48:	b007      	add	sp, #28
   16a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return z_impl_z_current_get();
   16a4c:	f006 f9ec 	bl	1ce28 <z_impl_z_current_get>
	att_handle_rsp_thread = k_current_get();
   16a50:	4b2a      	ldr	r3, [pc, #168]	; (16afc <bt_att_accept+0xe8>)
	(void)memset(att, 0, sizeof(*att));
   16a52:	222c      	movs	r2, #44	; 0x2c
	att_handle_rsp_thread = k_current_get();
   16a54:	6018      	str	r0, [r3, #0]
	(void)memset(att, 0, sizeof(*att));
   16a56:	4629      	mov	r1, r5
   16a58:	9804      	ldr	r0, [sp, #16]
   16a5a:	f007 fe9c 	bl	1e796 <memset>
	att->conn = conn;
   16a5e:	9b04      	ldr	r3, [sp, #16]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16a60:	4827      	ldr	r0, [pc, #156]	; (16b00 <bt_att_accept+0xec>)
	att->conn = conn;
   16a62:	601c      	str	r4, [r3, #0]
	sys_slist_init(&att->reqs);
   16a64:	9c04      	ldr	r4, [sp, #16]
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16a66:	9505      	str	r5, [sp, #20]
	list->tail = NULL;
   16a68:	e9c4 5501 	strd	r5, r5, [r4, #4]
   16a6c:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16a70:	2200      	movs	r2, #0
   16a72:	2300      	movs	r3, #0
   16a74:	a905      	add	r1, sp, #20
   16a76:	f005 facf 	bl	1c018 <k_mem_slab_alloc>
   16a7a:	4606      	mov	r6, r0
   16a7c:	b140      	cbz	r0, 16a90 <bt_att_accept+0x7c>
		LOG_WRN("No available ATT channel for conn %p", att->conn);
   16a7e:	6823      	ldr	r3, [r4, #0]
   16a80:	9303      	str	r3, [sp, #12]
   16a82:	4b20      	ldr	r3, [pc, #128]	; (16b04 <bt_att_accept+0xf0>)
   16a84:	9500      	str	r5, [sp, #0]
   16a86:	e9cd 5301 	strd	r5, r3, [sp, #4]
   16a8a:	2202      	movs	r2, #2
   16a8c:	462b      	mov	r3, r5
   16a8e:	e7d4      	b.n	16a3a <bt_att_accept+0x26>
	(void)memset(chan, 0, sizeof(*chan));
   16a90:	4601      	mov	r1, r0
   16a92:	22e8      	movs	r2, #232	; 0xe8
   16a94:	9805      	ldr	r0, [sp, #20]
   16a96:	f007 fe7e 	bl	1e796 <memset>
	chan->chan.chan.ops = &ops;
   16a9a:	9805      	ldr	r0, [sp, #20]
   16a9c:	4b1a      	ldr	r3, [pc, #104]	; (16b08 <bt_att_accept+0xf4>)
   16a9e:	6083      	str	r3, [r0, #8]
	z_impl_k_queue_init(queue);
   16aa0:	3098      	adds	r0, #152	; 0x98
   16aa2:	f00a f81d 	bl	20ae0 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16aa6:	9b05      	ldr	r3, [sp, #20]
   16aa8:	f3bf 8f5b 	dmb	ish
   16aac:	3390      	adds	r3, #144	; 0x90
   16aae:	e853 2f00 	ldrex	r2, [r3]
   16ab2:	e843 6100 	strex	r1, r6, [r3]
   16ab6:	2900      	cmp	r1, #0
   16ab8:	d1f9      	bne.n	16aae <bt_att_accept+0x9a>
   16aba:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   16abe:	9b05      	ldr	r3, [sp, #20]
   16ac0:	601c      	str	r4, [r3, #0]
	if (sys_slist_is_empty(&att->chans)) {
   16ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
	att_chan_attach(att, chan);
   16ac4:	9d05      	ldr	r5, [sp, #20]
	if (sys_slist_is_empty(&att->chans)) {
   16ac6:	b91b      	cbnz	r3, 16ad0 <bt_att_accept+0xbc>
   16ac8:	f104 000c 	add.w	r0, r4, #12
   16acc:	f00a f808 	bl	20ae0 <z_impl_k_queue_init>
	return list->head;
   16ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
	parent->next = child;
   16ad2:	f8c5 20e0 	str.w	r2, [r5, #224]	; 0xe0
Z_GENLIST_PREPEND(slist, snode)
   16ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16ad8:	f105 03e0 	add.w	r3, r5, #224	; 0xe0
	list->head = node;
   16adc:	6263      	str	r3, [r4, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16ade:	b902      	cbnz	r2, 16ae2 <bt_att_accept+0xce>
	list->tail = node;
   16ae0:	62a3      	str	r3, [r4, #40]	; 0x28
	return chan;
   16ae2:	9b05      	ldr	r3, [sp, #20]
	if (!chan) {
   16ae4:	2b00      	cmp	r3, #0
   16ae6:	d0ac      	beq.n	16a42 <bt_att_accept+0x2e>
	*ch = &chan->chan.chan;
   16ae8:	3304      	adds	r3, #4
   16aea:	603b      	str	r3, [r7, #0]
	return 0;
   16aec:	e7ab      	b.n	16a46 <bt_att_accept+0x32>
   16aee:	bf00      	nop
   16af0:	20000850 	.word	0x20000850
   16af4:	0002312c 	.word	0x0002312c
   16af8:	0002162c 	.word	0x0002162c
   16afc:	20002644 	.word	0x20002644
   16b00:	2000086c 	.word	0x2000086c
   16b04:	00023151 	.word	0x00023151
   16b08:	2000067c 	.word	0x2000067c

00016b0c <bt_att_chan_create_pdu>:
{
   16b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16b0e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
   16b10:	3201      	adds	r2, #1
   16b12:	429a      	cmp	r2, r3
{
   16b14:	b087      	sub	sp, #28
   16b16:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16b18:	d90f      	bls.n	16b3a <bt_att_chan_create_pdu+0x2e>
		LOG_WRN("ATT MTU exceeded, max %u, wanted %zu", chan->chan.tx.mtu,
   16b1a:	e9cd 3203 	strd	r3, r2, [sp, #12]
   16b1e:	4b25      	ldr	r3, [pc, #148]	; (16bb4 <bt_att_chan_create_pdu+0xa8>)
   16b20:	9302      	str	r3, [sp, #8]
   16b22:	2300      	movs	r3, #0
   16b24:	e9cd 3300 	strd	r3, r3, [sp]
   16b28:	4923      	ldr	r1, [pc, #140]	; (16bb8 <bt_att_chan_create_pdu+0xac>)
   16b2a:	2202      	movs	r2, #2
   16b2c:	4618      	mov	r0, r3
   16b2e:	f008 fa26 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16b32:	2400      	movs	r4, #0
}
   16b34:	4620      	mov	r0, r4
   16b36:	b007      	add	sp, #28
   16b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (att_op_get_type(op)) {
   16b3a:	4608      	mov	r0, r1
   16b3c:	f7ff fd1c 	bl	16578 <att_op_get_type>
   16b40:	2802      	cmp	r0, #2
   16b42:	d018      	beq.n	16b76 <bt_att_chan_create_pdu+0x6a>
   16b44:	2804      	cmp	r0, #4
   16b46:	d016      	beq.n	16b76 <bt_att_chan_create_pdu+0x6a>
		timeout = K_FOREVER;
   16b48:	f04f 36ff 	mov.w	r6, #4294967295
   16b4c:	f04f 37ff 	mov.w	r7, #4294967295
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   16b50:	2100      	movs	r1, #0
   16b52:	4632      	mov	r2, r6
   16b54:	463b      	mov	r3, r7
   16b56:	4608      	mov	r0, r1
   16b58:	f008 f8d4 	bl	1ed04 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   16b5c:	4604      	mov	r4, r0
   16b5e:	b970      	cbnz	r0, 16b7e <bt_att_chan_create_pdu+0x72>
		LOG_ERR("Unable to allocate buffer for op 0x%02x", op);
   16b60:	4b16      	ldr	r3, [pc, #88]	; (16bbc <bt_att_chan_create_pdu+0xb0>)
   16b62:	4915      	ldr	r1, [pc, #84]	; (16bb8 <bt_att_chan_create_pdu+0xac>)
   16b64:	9503      	str	r5, [sp, #12]
   16b66:	e9cd 0301 	strd	r0, r3, [sp, #4]
   16b6a:	9000      	str	r0, [sp, #0]
   16b6c:	4603      	mov	r3, r0
   16b6e:	2201      	movs	r2, #1
   16b70:	f008 fa05 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		return NULL;
   16b74:	e7dd      	b.n	16b32 <bt_att_chan_create_pdu+0x26>
	switch (att_op_get_type(op)) {
   16b76:	f44f 2670 	mov.w	r6, #983040	; 0xf0000
   16b7a:	2700      	movs	r7, #0
   16b7c:	e7e8      	b.n	16b50 <bt_att_chan_create_pdu+0x44>
	return z_impl_k_queue_get(queue, timeout);
   16b7e:	4810      	ldr	r0, [pc, #64]	; (16bc0 <bt_att_chan_create_pdu+0xb4>)
   16b80:	463b      	mov	r3, r7
   16b82:	4632      	mov	r2, r6
   16b84:	f005 fc02 	bl	1c38c <z_impl_k_queue_get>
   16b88:	4603      	mov	r3, r0
	if (!data) {
   16b8a:	b958      	cbnz	r0, 16ba4 <bt_att_chan_create_pdu+0x98>
		LOG_WRN("Unable to allocate ATT TX meta");
   16b8c:	4a0d      	ldr	r2, [pc, #52]	; (16bc4 <bt_att_chan_create_pdu+0xb8>)
   16b8e:	9000      	str	r0, [sp, #0]
   16b90:	e9cd 0201 	strd	r0, r2, [sp, #4]
   16b94:	4908      	ldr	r1, [pc, #32]	; (16bb8 <bt_att_chan_create_pdu+0xac>)
   16b96:	2202      	movs	r2, #2
   16b98:	f008 f9f1 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		net_buf_unref(buf);
   16b9c:	4620      	mov	r0, r4
   16b9e:	f001 fbef 	bl	18380 <net_buf_unref>
		return NULL;
   16ba2:	e7c6      	b.n	16b32 <bt_att_chan_create_pdu+0x26>
	bt_att_tx_meta_data(buf) = data;
   16ba4:	61a0      	str	r0, [r4, #24]
   16ba6:	2101      	movs	r1, #1
   16ba8:	f104 000c 	add.w	r0, r4, #12
   16bac:	f009 f8ce 	bl	1fd4c <net_buf_simple_add>
	hdr->code = op;
   16bb0:	7005      	strb	r5, [r0, #0]
	return buf;
   16bb2:	e7bf      	b.n	16b34 <bt_att_chan_create_pdu+0x28>
   16bb4:	00023176 	.word	0x00023176
   16bb8:	0002162c 	.word	0x0002162c
   16bbc:	00022f43 	.word	0x00022f43
   16bc0:	200008cc 	.word	0x200008cc
   16bc4:	0002319b 	.word	0x0002319b

00016bc8 <bt_att_recv>:
{
   16bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (buf->len < sizeof(*hdr)) {
   16bcc:	8a0b      	ldrh	r3, [r1, #16]
{
   16bce:	b086      	sub	sp, #24
   16bd0:	4607      	mov	r7, r0
   16bd2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   16bd4:	b963      	cbnz	r3, 16bf0 <bt_att_recv+0x28>
		LOG_ERR("Too small ATT PDU received");
   16bd6:	4a42      	ldr	r2, [pc, #264]	; (16ce0 <bt_att_recv+0x118>)
   16bd8:	9300      	str	r3, [sp, #0]
   16bda:	e9cd 3201 	strd	r3, r2, [sp, #4]
   16bde:	2201      	movs	r2, #1
			LOG_WRN("Ignoring unexpected request");
   16be0:	4940      	ldr	r1, [pc, #256]	; (16ce4 <bt_att_recv+0x11c>)
   16be2:	4618      	mov	r0, r3
   16be4:	f008 f9cb 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
}
   16be8:	2000      	movs	r0, #0
   16bea:	b006      	add	sp, #24
   16bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16bf0:	2101      	movs	r1, #1
   16bf2:	f105 000c 	add.w	r0, r5, #12
   16bf6:	f009 f8c8 	bl	1fd8a <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16bfa:	f857 3c04 	ldr.w	r3, [r7, #-4]
   16bfe:	4604      	mov	r4, r0
   16c00:	2b00      	cmp	r3, #0
   16c02:	d0f1      	beq.n	16be8 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   16c04:	7802      	ldrb	r2, [r0, #0]
   16c06:	4e38      	ldr	r6, [pc, #224]	; (16ce8 <bt_att_recv+0x120>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16c08:	f1a7 0804 	sub.w	r8, r7, #4
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16c0c:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16c0e:	f816 0033 	ldrb.w	r0, [r6, r3, lsl #3]
   16c12:	4290      	cmp	r0, r2
   16c14:	ea4f 0ac3 	mov.w	sl, r3, lsl #3
   16c18:	eb06 01c3 	add.w	r1, r6, r3, lsl #3
   16c1c:	d111      	bne.n	16c42 <bt_att_recv+0x7a>
		if (handler->type == ATT_REQUEST &&
   16c1e:	f891 9002 	ldrb.w	r9, [r1, #2]
   16c22:	f1b9 0f01 	cmp.w	r9, #1
   16c26:	d12b      	bne.n	16c80 <bt_att_recv+0xb8>
		    atomic_test_and_set_bit(att_chan->flags, ATT_PENDING_RSP)) {
   16c28:	2100      	movs	r1, #0
   16c2a:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   16c2e:	f008 fa9c 	bl	1f16a <atomic_test_and_set_bit>
		if (handler->type == ATT_REQUEST &&
   16c32:	b380      	cbz	r0, 16c96 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected request");
   16c34:	4b2d      	ldr	r3, [pc, #180]	; (16cec <bt_att_recv+0x124>)
   16c36:	9302      	str	r3, [sp, #8]
   16c38:	2300      	movs	r3, #0
   16c3a:	e9cd 3300 	strd	r3, r3, [sp]
   16c3e:	2202      	movs	r2, #2
   16c40:	e7ce      	b.n	16be0 <bt_att_recv+0x18>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16c42:	3301      	adds	r3, #1
   16c44:	2b0e      	cmp	r3, #14
   16c46:	d1e2      	bne.n	16c0e <bt_att_recv+0x46>
		LOG_WRN("Unhandled ATT code 0x%02x", hdr->code);
   16c48:	2500      	movs	r5, #0
   16c4a:	4b29      	ldr	r3, [pc, #164]	; (16cf0 <bt_att_recv+0x128>)
   16c4c:	4925      	ldr	r1, [pc, #148]	; (16ce4 <bt_att_recv+0x11c>)
   16c4e:	9203      	str	r2, [sp, #12]
   16c50:	9302      	str	r3, [sp, #8]
   16c52:	4628      	mov	r0, r5
   16c54:	e9cd 5500 	strd	r5, r5, [sp]
   16c58:	462b      	mov	r3, r5
   16c5a:	2202      	movs	r2, #2
   16c5c:	f008 f98f 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   16c60:	7821      	ldrb	r1, [r4, #0]
   16c62:	4608      	mov	r0, r1
   16c64:	f7ff fc88 	bl	16578 <att_op_get_type>
   16c68:	2800      	cmp	r0, #0
   16c6a:	d0bd      	beq.n	16be8 <bt_att_recv+0x20>
   16c6c:	2805      	cmp	r0, #5
   16c6e:	d0bb      	beq.n	16be8 <bt_att_recv+0x20>
	if (!req) {
   16c70:	2900      	cmp	r1, #0
   16c72:	d0b9      	beq.n	16be8 <bt_att_recv+0x20>
   16c74:	2306      	movs	r3, #6
   16c76:	2200      	movs	r2, #0
   16c78:	4640      	mov	r0, r8
   16c7a:	f008 fbf4 	bl	1f466 <send_err_rsp.part.0>
   16c7e:	e7b3      	b.n	16be8 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   16c80:	f1b9 0f05 	cmp.w	r9, #5
   16c84:	d107      	bne.n	16c96 <bt_att_recv+0xce>
			   atomic_test_and_set_bit(att_chan->flags,
   16c86:	2101      	movs	r1, #1
   16c88:	f107 008c 	add.w	r0, r7, #140	; 0x8c
   16c8c:	f008 fa6d 	bl	1f16a <atomic_test_and_set_bit>
		} else if (handler->type == ATT_INDICATION &&
   16c90:	b108      	cbz	r0, 16c96 <bt_att_recv+0xce>
			LOG_WRN("Ignoring unexpected indication");
   16c92:	4b18      	ldr	r3, [pc, #96]	; (16cf4 <bt_att_recv+0x12c>)
   16c94:	e7cf      	b.n	16c36 <bt_att_recv+0x6e>
	if (buf->len < handler->expect_len) {
   16c96:	4456      	add	r6, sl
   16c98:	8a2b      	ldrh	r3, [r5, #16]
   16c9a:	7872      	ldrb	r2, [r6, #1]
   16c9c:	429a      	cmp	r2, r3
   16c9e:	d911      	bls.n	16cc4 <bt_att_recv+0xfc>
		LOG_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16ca0:	7822      	ldrb	r2, [r4, #0]
   16ca2:	4910      	ldr	r1, [pc, #64]	; (16ce4 <bt_att_recv+0x11c>)
   16ca4:	e9cd 3203 	strd	r3, r2, [sp, #12]
   16ca8:	4b13      	ldr	r3, [pc, #76]	; (16cf8 <bt_att_recv+0x130>)
   16caa:	9302      	str	r3, [sp, #8]
   16cac:	2300      	movs	r3, #0
   16cae:	e9cd 3300 	strd	r3, r3, [sp]
   16cb2:	2201      	movs	r2, #1
   16cb4:	4618      	mov	r0, r3
   16cb6:	f008 f962 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
   16cba:	f1b9 0f01 	cmp.w	r9, #1
   16cbe:	d193      	bne.n	16be8 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   16cc0:	2304      	movs	r3, #4
   16cc2:	e009      	b.n	16cd8 <bt_att_recv+0x110>
		err = handler->func(att_chan, buf);
   16cc4:	6873      	ldr	r3, [r6, #4]
   16cc6:	4629      	mov	r1, r5
   16cc8:	4640      	mov	r0, r8
   16cca:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16ccc:	f1b9 0f01 	cmp.w	r9, #1
		err = handler->func(att_chan, buf);
   16cd0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16cd2:	d189      	bne.n	16be8 <bt_att_recv+0x20>
   16cd4:	2800      	cmp	r0, #0
   16cd6:	d087      	beq.n	16be8 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16cd8:	7821      	ldrb	r1, [r4, #0]
	if (!req) {
   16cda:	2900      	cmp	r1, #0
   16cdc:	d084      	beq.n	16be8 <bt_att_recv+0x20>
   16cde:	e7ca      	b.n	16c76 <bt_att_recv+0xae>
   16ce0:	000231ba 	.word	0x000231ba
   16ce4:	0002162c 	.word	0x0002162c
   16ce8:	00021944 	.word	0x00021944
   16cec:	000231ef 	.word	0x000231ef
   16cf0:	000231d5 	.word	0x000231d5
   16cf4:	0002320b 	.word	0x0002320b
   16cf8:	0002322a 	.word	0x0002322a

00016cfc <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   16cfe:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16d00:	6803      	ldr	r3, [r0, #0]
   16d02:	460d      	mov	r5, r1
   16d04:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16d06:	b087      	sub	sp, #28
   16d08:	4604      	mov	r4, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16d0a:	bf18      	it	ne
   16d0c:	2101      	movne	r1, #1
   16d0e:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16d10:	4617      	mov	r7, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16d12:	f008 ff48 	bl	1fba6 <bt_gatt_change_aware>
   16d16:	b948      	cbnz	r0, 16d2c <att_write_rsp.constprop.0+0x30>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16d18:	2105      	movs	r1, #5
   16d1a:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16d1e:	f008 fa24 	bl	1f16a <atomic_test_and_set_bit>
   16d22:	2800      	cmp	r0, #0
   16d24:	d048      	beq.n	16db8 <att_write_rsp.constprop.0+0xbc>
			return 0;
   16d26:	2000      	movs	r0, #0
}
   16d28:	b007      	add	sp, #28
   16d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!handle) {
   16d2c:	2e00      	cmp	r6, #0
   16d2e:	d045      	beq.n	16dbc <att_write_rsp.constprop.0+0xc0>
	(void)memset(&data, 0, sizeof(data));
   16d30:	2218      	movs	r2, #24
   16d32:	2100      	movs	r1, #0
   16d34:	4668      	mov	r0, sp
   16d36:	f007 fd2e 	bl	1e796 <memset>
	if (rsp) {
   16d3a:	bb67      	cbnz	r7, 16d96 <att_write_rsp.constprop.0+0x9a>
	data.conn = chan->att->conn;
   16d3c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16d3e:	4a20      	ldr	r2, [pc, #128]	; (16dc0 <att_write_rsp.constprop.0+0xc4>)
	data.conn = chan->att->conn;
   16d40:	681b      	ldr	r3, [r3, #0]
   16d42:	9300      	str	r3, [sp, #0]
	data.offset = offset;
   16d44:	2300      	movs	r3, #0
   16d46:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
   16d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   16d4c:	9303      	str	r3, [sp, #12]
	data.len = len;
   16d4e:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   16d52:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16d56:	2301      	movs	r3, #1
   16d58:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16d5c:	4631      	mov	r1, r6
   16d5e:	466b      	mov	r3, sp
   16d60:	4630      	mov	r0, r6
	data.req = req;
   16d62:	f88d 5008 	strb.w	r5, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16d66:	f008 f870 	bl	1ee4a <bt_gatt_foreach_attr>
	if (data.err) {
   16d6a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16d6e:	b1e3      	cbz	r3, 16daa <att_write_rsp.constprop.0+0xae>
		if (rsp) {
   16d70:	2f00      	cmp	r7, #0
   16d72:	d0d8      	beq.n	16d26 <att_write_rsp.constprop.0+0x2a>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16d74:	9b01      	ldr	r3, [sp, #4]
   16d76:	6998      	ldr	r0, [r3, #24]
   16d78:	f7ff fc44 	bl	16604 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16d7c:	9801      	ldr	r0, [sp, #4]
   16d7e:	f001 faff 	bl	18380 <net_buf_unref>
			send_err_rsp(chan, req, handle, data.err);
   16d82:	f89d 3014 	ldrb.w	r3, [sp, #20]
	if (!req) {
   16d86:	2d00      	cmp	r5, #0
   16d88:	d0cd      	beq.n	16d26 <att_write_rsp.constprop.0+0x2a>
   16d8a:	4632      	mov	r2, r6
   16d8c:	4629      	mov	r1, r5
   16d8e:	4620      	mov	r0, r4
   16d90:	f008 fb69 	bl	1f466 <send_err_rsp.part.0>
   16d94:	e7c7      	b.n	16d26 <att_write_rsp.constprop.0+0x2a>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16d96:	2200      	movs	r2, #0
   16d98:	4639      	mov	r1, r7
   16d9a:	4620      	mov	r0, r4
   16d9c:	f7ff feb6 	bl	16b0c <bt_att_chan_create_pdu>
   16da0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   16da2:	2800      	cmp	r0, #0
   16da4:	d1ca      	bne.n	16d3c <att_write_rsp.constprop.0+0x40>
			return BT_ATT_ERR_UNLIKELY;
   16da6:	200e      	movs	r0, #14
   16da8:	e7be      	b.n	16d28 <att_write_rsp.constprop.0+0x2c>
	if (data.buf) {
   16daa:	9901      	ldr	r1, [sp, #4]
   16dac:	2900      	cmp	r1, #0
   16dae:	d0ba      	beq.n	16d26 <att_write_rsp.constprop.0+0x2a>
		bt_att_chan_send_rsp(chan, data.buf);
   16db0:	4620      	mov	r0, r4
   16db2:	f008 f926 	bl	1f002 <bt_att_chan_send_rsp>
   16db6:	e7b6      	b.n	16d26 <att_write_rsp.constprop.0+0x2a>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16db8:	2012      	movs	r0, #18
   16dba:	e7b5      	b.n	16d28 <att_write_rsp.constprop.0+0x2c>
		return BT_ATT_ERR_INVALID_HANDLE;
   16dbc:	2001      	movs	r0, #1
   16dbe:	e7b3      	b.n	16d28 <att_write_rsp.constprop.0+0x2c>
   16dc0:	0001ede9 	.word	0x0001ede9

00016dc4 <bt_att_create_pdu>:
{
   16dc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   16dc6:	460e      	mov	r6, r1
   16dc8:	4615      	mov	r5, r2
	att = att_get(conn);
   16dca:	f7ff fd33 	bl	16834 <att_get>
	if (!att) {
   16dce:	b1c0      	cbz	r0, 16e02 <bt_att_create_pdu+0x3e>
	return list->head;
   16dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16dd2:	4618      	mov	r0, r3
   16dd4:	b11b      	cbz	r3, 16dde <bt_att_create_pdu+0x1a>
	return node->next;
   16dd6:	f850 39e0 	ldr.w	r3, [r0], #-224
   16dda:	b103      	cbz	r3, 16dde <bt_att_create_pdu+0x1a>
   16ddc:	3be0      	subs	r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16dde:	1c6c      	adds	r4, r5, #1
   16de0:	4622      	mov	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16de2:	b118      	cbz	r0, 16dec <bt_att_create_pdu+0x28>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16de4:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16de6:	42a1      	cmp	r1, r4
   16de8:	d217      	bcs.n	16e1a <bt_att_create_pdu+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16dea:	b96b      	cbnz	r3, 16e08 <bt_att_create_pdu+0x44>
	LOG_WRN("No ATT channel for MTU %zu", len + sizeof(op));
   16dec:	4b0f      	ldr	r3, [pc, #60]	; (16e2c <bt_att_create_pdu+0x68>)
   16dee:	9302      	str	r3, [sp, #8]
   16df0:	2300      	movs	r3, #0
   16df2:	e9cd 3300 	strd	r3, r3, [sp]
   16df6:	490e      	ldr	r1, [pc, #56]	; (16e30 <bt_att_create_pdu+0x6c>)
   16df8:	9403      	str	r4, [sp, #12]
   16dfa:	2202      	movs	r2, #2
   16dfc:	4618      	mov	r0, r3
   16dfe:	f008 f8be 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
}
   16e02:	2000      	movs	r0, #0
   16e04:	b004      	add	sp, #16
   16e06:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e08:	4618      	mov	r0, r3
   16e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   16e0e:	b15b      	cbz	r3, 16e28 <bt_att_create_pdu+0x64>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16e10:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
   16e12:	428a      	cmp	r2, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16e14:	f1a3 03e0 	sub.w	r3, r3, #224	; 0xe0
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16e18:	d8f6      	bhi.n	16e08 <bt_att_create_pdu+0x44>
		return bt_att_chan_create_pdu(chan, op, len);
   16e1a:	462a      	mov	r2, r5
   16e1c:	4631      	mov	r1, r6
}
   16e1e:	b004      	add	sp, #16
   16e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   16e24:	f7ff be72 	b.w	16b0c <bt_att_chan_create_pdu>
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16e28:	4614      	mov	r4, r2
   16e2a:	e7db      	b.n	16de4 <bt_att_create_pdu+0x20>
   16e2c:	00023249 	.word	0x00023249
   16e30:	0002162c 	.word	0x0002162c

00016e34 <att_read_group_req>:
{
   16e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16e38:	8a0e      	ldrh	r6, [r1, #16]
   16e3a:	3e04      	subs	r6, #4
   16e3c:	b2f6      	uxtb	r6, r6
	if (uuid_len != 2 && uuid_len != 16) {
   16e3e:	2e02      	cmp	r6, #2
{
   16e40:	4604      	mov	r4, r0
   16e42:	b08c      	sub	sp, #48	; 0x30
   16e44:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16e46:	d001      	beq.n	16e4c <att_read_group_req+0x18>
   16e48:	2e10      	cmp	r6, #16
   16e4a:	d16a      	bne.n	16f22 <att_read_group_req+0xee>
   16e4c:	2104      	movs	r1, #4
   16e4e:	300c      	adds	r0, #12
   16e50:	f008 ff9b 	bl	1fd8a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16e54:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16e58:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16e5a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16e5c:	1d01      	adds	r1, r0, #4
   16e5e:	4632      	mov	r2, r6
   16e60:	4640      	mov	r0, r8
   16e62:	f007 fce4 	bl	1e82e <bt_uuid_create>
   16e66:	2800      	cmp	r0, #0
   16e68:	d05d      	beq.n	16f26 <att_read_group_req+0xf2>
	if (!start || !end) {
   16e6a:	2d00      	cmp	r5, #0
   16e6c:	d03a      	beq.n	16ee4 <att_read_group_req+0xb0>
   16e6e:	2600      	movs	r6, #0
   16e70:	2f00      	cmp	r7, #0
   16e72:	d036      	beq.n	16ee2 <att_read_group_req+0xae>
	if (start > end) {
   16e74:	42bd      	cmp	r5, r7
   16e76:	d835      	bhi.n	16ee4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16e78:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16e7c:	a901      	add	r1, sp, #4
   16e7e:	4640      	mov	r0, r8
   16e80:	f88d 6004 	strb.w	r6, [sp, #4]
   16e84:	f8ad 3006 	strh.w	r3, [sp, #6]
   16e88:	f007 fca3 	bl	1e7d2 <bt_uuid_cmp>
   16e8c:	bb70      	cbnz	r0, 16eec <att_read_group_req+0xb8>
	struct bt_conn *conn = chan->chan.chan.conn;
   16e8e:	6866      	ldr	r6, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   16e90:	2214      	movs	r2, #20
   16e92:	2100      	movs	r1, #0
   16e94:	a807      	add	r0, sp, #28
   16e96:	f007 fc7e 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16e9a:	2201      	movs	r2, #1
   16e9c:	2111      	movs	r1, #17
   16e9e:	4630      	mov	r0, r6
   16ea0:	f7ff ff90 	bl	16dc4 <bt_att_create_pdu>
   16ea4:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16ea6:	2800      	cmp	r0, #0
   16ea8:	d03d      	beq.n	16f26 <att_read_group_req+0xf2>
	return net_buf_simple_add(&buf->b, len);
   16eaa:	2101      	movs	r1, #1
   16eac:	300c      	adds	r0, #12
	data.uuid = uuid;
   16eae:	e9cd 4807 	strd	r4, r8, [sp, #28]
   16eb2:	f008 ff4b 	bl	1fd4c <net_buf_simple_add>
	data.rsp->len = 0U;
   16eb6:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16eb8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16eba:	4a1c      	ldr	r2, [pc, #112]	; (16f2c <att_read_group_req+0xf8>)
	data.rsp->len = 0U;
   16ebc:	7003      	strb	r3, [r0, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16ebe:	4639      	mov	r1, r7
	data.group = NULL;
   16ec0:	930b      	str	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16ec2:	4628      	mov	r0, r5
   16ec4:	ab07      	add	r3, sp, #28
   16ec6:	f007 ffc0 	bl	1ee4a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   16eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16ecc:	781b      	ldrb	r3, [r3, #0]
   16ece:	bb1b      	cbnz	r3, 16f18 <att_read_group_req+0xe4>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16ed2:	6998      	ldr	r0, [r3, #24]
   16ed4:	f7ff fb96 	bl	16604 <tx_meta_data_free>
		net_buf_unref(data.buf);
   16ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
   16eda:	f001 fa51 	bl	18380 <net_buf_unref>
	if (!req) {
   16ede:	230a      	movs	r3, #10
   16ee0:	e001      	b.n	16ee6 <att_read_group_req+0xb2>
			*err = 0U;
   16ee2:	463d      	mov	r5, r7
	if (!req) {
   16ee4:	2301      	movs	r3, #1
   16ee6:	462a      	mov	r2, r5
   16ee8:	2110      	movs	r1, #16
   16eea:	e00e      	b.n	16f0a <att_read_group_req+0xd6>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   16eec:	f642 0301 	movw	r3, #10241	; 0x2801
   16ef0:	a907      	add	r1, sp, #28
   16ef2:	4640      	mov	r0, r8
   16ef4:	f88d 601c 	strb.w	r6, [sp, #28]
   16ef8:	f8ad 301e 	strh.w	r3, [sp, #30]
   16efc:	f007 fc69 	bl	1e7d2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16f00:	2800      	cmp	r0, #0
   16f02:	d0c4      	beq.n	16e8e <att_read_group_req+0x5a>
	if (!req) {
   16f04:	2310      	movs	r3, #16
   16f06:	462a      	mov	r2, r5
   16f08:	4619      	mov	r1, r3
   16f0a:	4620      	mov	r0, r4
   16f0c:	f008 faab 	bl	1f466 <send_err_rsp.part.0>
		return 0;
   16f10:	2000      	movs	r0, #0
}
   16f12:	b00c      	add	sp, #48	; 0x30
   16f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf);
   16f18:	9909      	ldr	r1, [sp, #36]	; 0x24
   16f1a:	4620      	mov	r0, r4
   16f1c:	f008 f871 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   16f20:	e7f6      	b.n	16f10 <att_read_group_req+0xdc>
		return BT_ATT_ERR_INVALID_PDU;
   16f22:	2004      	movs	r0, #4
   16f24:	e7f5      	b.n	16f12 <att_read_group_req+0xde>
		return BT_ATT_ERR_UNLIKELY;
   16f26:	200e      	movs	r0, #14
   16f28:	e7f3      	b.n	16f12 <att_read_group_req+0xde>
   16f2a:	bf00      	nop
   16f2c:	000168c9 	.word	0x000168c9

00016f30 <att_read_mult_vl_req>:
{
   16f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16f34:	6846      	ldr	r6, [r0, #4]
{
   16f36:	b085      	sub	sp, #20
   16f38:	4604      	mov	r4, r0
   16f3a:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16f3c:	4630      	mov	r0, r6
   16f3e:	2101      	movs	r1, #1
   16f40:	f008 fe31 	bl	1fba6 <bt_gatt_change_aware>
   16f44:	b950      	cbnz	r0, 16f5c <att_read_mult_vl_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16f46:	2105      	movs	r1, #5
   16f48:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16f4c:	f008 f90d 	bl	1f16a <atomic_test_and_set_bit>
   16f50:	2800      	cmp	r0, #0
   16f52:	d13b      	bne.n	16fcc <att_read_mult_vl_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16f54:	2012      	movs	r0, #18
}
   16f56:	b005      	add	sp, #20
   16f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   16f5c:	2210      	movs	r2, #16
   16f5e:	2100      	movs	r1, #0
   16f60:	4668      	mov	r0, sp
   16f62:	f007 fc18 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_VL_RSP, 0);
   16f66:	2200      	movs	r2, #0
   16f68:	2121      	movs	r1, #33	; 0x21
   16f6a:	4630      	mov	r0, r6
   16f6c:	f7ff ff2a 	bl	16dc4 <bt_att_create_pdu>
   16f70:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   16f72:	b368      	cbz	r0, 16fd0 <att_read_mult_vl_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16f74:	f8df 905c 	ldr.w	r9, [pc, #92]	; 16fd4 <att_read_mult_vl_req+0xa4>
	data.chan = chan;
   16f78:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   16f7a:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16f7e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   16f82:	8a2b      	ldrh	r3, [r5, #16]
   16f84:	2b01      	cmp	r3, #1
   16f86:	d804      	bhi.n	16f92 <att_read_mult_vl_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   16f88:	9902      	ldr	r1, [sp, #8]
   16f8a:	4620      	mov	r0, r4
   16f8c:	f008 f839 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   16f90:	e01c      	b.n	16fcc <att_read_mult_vl_req+0x9c>
   16f92:	4638      	mov	r0, r7
   16f94:	f008 ff09 	bl	1fdaa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16f98:	466b      	mov	r3, sp
   16f9a:	464a      	mov	r2, r9
   16f9c:	4601      	mov	r1, r0
   16f9e:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   16fa0:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_vl_cb, &data);
   16fa4:	f007 ff51 	bl	1ee4a <bt_gatt_foreach_attr>
		if (data.err) {
   16fa8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16fac:	2b00      	cmp	r3, #0
   16fae:	d0e8      	beq.n	16f82 <att_read_mult_vl_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   16fb0:	9b02      	ldr	r3, [sp, #8]
   16fb2:	6998      	ldr	r0, [r3, #24]
   16fb4:	f7ff fb26 	bl	16604 <tx_meta_data_free>
			net_buf_unref(data.buf);
   16fb8:	9802      	ldr	r0, [sp, #8]
   16fba:	f001 f9e1 	bl	18380 <net_buf_unref>
	if (!req) {
   16fbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
   16fc2:	4632      	mov	r2, r6
   16fc4:	2120      	movs	r1, #32
   16fc6:	4620      	mov	r0, r4
   16fc8:	f008 fa4d 	bl	1f466 <send_err_rsp.part.0>
			return 0;
   16fcc:	2000      	movs	r0, #0
   16fce:	e7c2      	b.n	16f56 <att_read_mult_vl_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   16fd0:	200e      	movs	r0, #14
   16fd2:	e7c0      	b.n	16f56 <att_read_mult_vl_req+0x26>
   16fd4:	0001f1db 	.word	0x0001f1db

00016fd8 <att_read_mult_req>:
{
   16fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   16fdc:	6846      	ldr	r6, [r0, #4]
{
   16fde:	b085      	sub	sp, #20
   16fe0:	4604      	mov	r4, r0
   16fe2:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   16fe4:	4630      	mov	r0, r6
   16fe6:	2101      	movs	r1, #1
   16fe8:	f008 fddd 	bl	1fba6 <bt_gatt_change_aware>
   16fec:	b950      	cbnz	r0, 17004 <att_read_mult_req+0x2c>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   16fee:	2105      	movs	r1, #5
   16ff0:	f104 0090 	add.w	r0, r4, #144	; 0x90
   16ff4:	f008 f8b9 	bl	1f16a <atomic_test_and_set_bit>
   16ff8:	2800      	cmp	r0, #0
   16ffa:	d13b      	bne.n	17074 <att_read_mult_req+0x9c>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16ffc:	2012      	movs	r0, #18
}
   16ffe:	b005      	add	sp, #20
   17000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	(void)memset(&data, 0, sizeof(data));
   17004:	2210      	movs	r2, #16
   17006:	2100      	movs	r1, #0
   17008:	4668      	mov	r0, sp
   1700a:	f007 fbc4 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1700e:	2200      	movs	r2, #0
   17010:	210f      	movs	r1, #15
   17012:	4630      	mov	r0, r6
   17014:	f7ff fed6 	bl	16dc4 <bt_att_create_pdu>
   17018:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1701a:	b368      	cbz	r0, 17078 <att_read_mult_req+0xa0>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1701c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1707c <att_read_mult_req+0xa4>
	data.chan = chan;
   17020:	9400      	str	r4, [sp, #0]
   17022:	f105 070c 	add.w	r7, r5, #12
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17026:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1702a:	8a2b      	ldrh	r3, [r5, #16]
   1702c:	2b01      	cmp	r3, #1
   1702e:	d804      	bhi.n	1703a <att_read_mult_req+0x62>
	bt_att_chan_send_rsp(chan, data.buf);
   17030:	9902      	ldr	r1, [sp, #8]
   17032:	4620      	mov	r0, r4
   17034:	f007 ffe5 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   17038:	e01c      	b.n	17074 <att_read_mult_req+0x9c>
   1703a:	4638      	mov	r0, r7
   1703c:	f008 feb5 	bl	1fdaa <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17040:	466b      	mov	r3, sp
   17042:	464a      	mov	r2, r9
   17044:	4601      	mov	r1, r0
   17046:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   17048:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1704c:	f007 fefd 	bl	1ee4a <bt_gatt_foreach_attr>
		if (data.err) {
   17050:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17054:	2b00      	cmp	r3, #0
   17056:	d0e8      	beq.n	1702a <att_read_mult_req+0x52>
			tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   17058:	9b02      	ldr	r3, [sp, #8]
   1705a:	6998      	ldr	r0, [r3, #24]
   1705c:	f7ff fad2 	bl	16604 <tx_meta_data_free>
			net_buf_unref(data.buf);
   17060:	9802      	ldr	r0, [sp, #8]
   17062:	f001 f98d 	bl	18380 <net_buf_unref>
	if (!req) {
   17066:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1706a:	4632      	mov	r2, r6
   1706c:	210e      	movs	r1, #14
   1706e:	4620      	mov	r0, r4
   17070:	f008 f9f9 	bl	1f466 <send_err_rsp.part.0>
			return 0;
   17074:	2000      	movs	r0, #0
   17076:	e7c2      	b.n	16ffe <att_read_mult_req+0x26>
		return BT_ATT_ERR_UNLIKELY;
   17078:	200e      	movs	r0, #14
   1707a:	e7c0      	b.n	16ffe <att_read_mult_req+0x26>
   1707c:	0001f195 	.word	0x0001f195

00017080 <att_read_rsp>:
{
   17080:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17084:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
   17088:	4604      	mov	r4, r0
   1708a:	460e      	mov	r6, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1708c:	4640      	mov	r0, r8
   1708e:	2101      	movs	r1, #1
{
   17090:	4617      	mov	r7, r2
   17092:	461d      	mov	r5, r3
	if (!bt_gatt_change_aware(conn, true)) {
   17094:	f008 fd87 	bl	1fba6 <bt_gatt_change_aware>
   17098:	b948      	cbnz	r0, 170ae <att_read_rsp+0x2e>
		if (!atomic_test_and_set_bit(chan->flags, ATT_OUT_OF_SYNC_SENT)) {
   1709a:	2105      	movs	r1, #5
   1709c:	f104 0090 	add.w	r0, r4, #144	; 0x90
   170a0:	f008 f863 	bl	1f16a <atomic_test_and_set_bit>
   170a4:	bb78      	cbnz	r0, 17106 <att_read_rsp+0x86>
			return BT_ATT_ERR_DB_OUT_OF_SYNC;
   170a6:	2012      	movs	r0, #18
}
   170a8:	b004      	add	sp, #16
   170aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!handle) {
   170ae:	b38d      	cbz	r5, 17114 <att_read_rsp+0x94>
	(void)memset(&data, 0, sizeof(data));
   170b0:	2210      	movs	r2, #16
   170b2:	2100      	movs	r1, #0
   170b4:	4668      	mov	r0, sp
   170b6:	f007 fb6e 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   170ba:	2200      	movs	r2, #0
   170bc:	4639      	mov	r1, r7
   170be:	4640      	mov	r0, r8
   170c0:	f7ff fe80 	bl	16dc4 <bt_att_create_pdu>
   170c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   170c6:	b338      	cbz	r0, 17118 <att_read_rsp+0x98>
	data.offset = offset;
   170c8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   170cc:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   170d0:	2301      	movs	r3, #1
   170d2:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   170d6:	4a11      	ldr	r2, [pc, #68]	; (1711c <att_read_rsp+0x9c>)
	data.chan = chan;
   170d8:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   170da:	466b      	mov	r3, sp
   170dc:	4629      	mov	r1, r5
   170de:	4628      	mov	r0, r5
   170e0:	f007 feb3 	bl	1ee4a <bt_gatt_foreach_attr>
	if (data.err) {
   170e4:	f89d 300c 	ldrb.w	r3, [sp, #12]
   170e8:	b17b      	cbz	r3, 1710a <att_read_rsp+0x8a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   170ea:	9b02      	ldr	r3, [sp, #8]
   170ec:	6998      	ldr	r0, [r3, #24]
   170ee:	f7ff fa89 	bl	16604 <tx_meta_data_free>
		net_buf_unref(data.buf);
   170f2:	9802      	ldr	r0, [sp, #8]
   170f4:	f001 f944 	bl	18380 <net_buf_unref>
	if (!req) {
   170f8:	f89d 300c 	ldrb.w	r3, [sp, #12]
   170fc:	462a      	mov	r2, r5
   170fe:	4631      	mov	r1, r6
   17100:	4620      	mov	r0, r4
   17102:	f008 f9b0 	bl	1f466 <send_err_rsp.part.0>
			return 0;
   17106:	2000      	movs	r0, #0
   17108:	e7ce      	b.n	170a8 <att_read_rsp+0x28>
	bt_att_chan_send_rsp(chan, data.buf);
   1710a:	9902      	ldr	r1, [sp, #8]
   1710c:	4620      	mov	r0, r4
   1710e:	f007 ff78 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   17112:	e7f8      	b.n	17106 <att_read_rsp+0x86>
		return BT_ATT_ERR_INVALID_HANDLE;
   17114:	2001      	movs	r0, #1
   17116:	e7c7      	b.n	170a8 <att_read_rsp+0x28>
		return BT_ATT_ERR_UNLIKELY;
   17118:	200e      	movs	r0, #14
   1711a:	e7c5      	b.n	170a8 <att_read_rsp+0x28>
   1711c:	0001f195 	.word	0x0001f195

00017120 <att_read_type_req>:
{
   17120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   17124:	8a0d      	ldrh	r5, [r1, #16]
   17126:	3d04      	subs	r5, #4
   17128:	b2ed      	uxtb	r5, r5
	if (uuid_len != 2 && uuid_len != 16) {
   1712a:	2d02      	cmp	r5, #2
{
   1712c:	4604      	mov	r4, r0
   1712e:	b08c      	sub	sp, #48	; 0x30
   17130:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   17132:	d001      	beq.n	17138 <att_read_type_req+0x18>
   17134:	2d10      	cmp	r5, #16
   17136:	d150      	bne.n	171da <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   17138:	2104      	movs	r1, #4
   1713a:	300c      	adds	r0, #12
   1713c:	f008 fe25 	bl	1fd8a <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17140:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   17144:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   17146:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   17148:	1d01      	adds	r1, r0, #4
   1714a:	462a      	mov	r2, r5
   1714c:	4640      	mov	r0, r8
   1714e:	f007 fb6e 	bl	1e82e <bt_uuid_create>
   17152:	b188      	cbz	r0, 17178 <att_read_type_req+0x58>
	if (!start || !end) {
   17154:	b19e      	cbz	r6, 1717e <att_read_type_req+0x5e>
   17156:	b18f      	cbz	r7, 1717c <att_read_type_req+0x5c>
	if (start > end) {
   17158:	42be      	cmp	r6, r7
   1715a:	d810      	bhi.n	1717e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1715c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1715e:	6865      	ldr	r5, [r4, #4]
	(void)memset(&data, 0, sizeof(data));
   17160:	2100      	movs	r1, #0
   17162:	eb0d 0002 	add.w	r0, sp, r2
   17166:	f007 fb16 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1716a:	2201      	movs	r2, #1
   1716c:	2109      	movs	r1, #9
   1716e:	4628      	mov	r0, r5
   17170:	f7ff fe28 	bl	16dc4 <bt_att_create_pdu>
   17174:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   17176:	b960      	cbnz	r0, 17192 <att_read_type_req+0x72>
		return BT_ATT_ERR_UNLIKELY;
   17178:	200e      	movs	r0, #14
   1717a:	e007      	b.n	1718c <att_read_type_req+0x6c>
			*err = 0U;
   1717c:	463e      	mov	r6, r7
	if (!req) {
   1717e:	2301      	movs	r3, #1
   17180:	4632      	mov	r2, r6
   17182:	2108      	movs	r1, #8
   17184:	4620      	mov	r0, r4
   17186:	f008 f96e 	bl	1f466 <send_err_rsp.part.0>
		return 0;
   1718a:	2000      	movs	r0, #0
}
   1718c:	b00c      	add	sp, #48	; 0x30
   1718e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   17192:	2101      	movs	r1, #1
   17194:	300c      	adds	r0, #12
	data.uuid = uuid;
   17196:	e9cd 4806 	strd	r4, r8, [sp, #24]
   1719a:	f008 fdd7 	bl	1fd4c <net_buf_simple_add>
	data.rsp->len = 0U;
   1719e:	2300      	movs	r3, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   171a0:	9009      	str	r0, [sp, #36]	; 0x24
	data.rsp->len = 0U;
   171a2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   171a4:	230a      	movs	r3, #10
   171a6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   171aa:	4a0d      	ldr	r2, [pc, #52]	; (171e0 <att_read_type_req+0xc0>)
   171ac:	ab06      	add	r3, sp, #24
   171ae:	4639      	mov	r1, r7
   171b0:	4630      	mov	r0, r6
   171b2:	f007 fe4a 	bl	1ee4a <bt_gatt_foreach_attr>
	if (data.err) {
   171b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   171ba:	b14b      	cbz	r3, 171d0 <att_read_type_req+0xb0>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   171bc:	9b08      	ldr	r3, [sp, #32]
   171be:	6998      	ldr	r0, [r3, #24]
   171c0:	f7ff fa20 	bl	16604 <tx_meta_data_free>
		net_buf_unref(data.buf);
   171c4:	9808      	ldr	r0, [sp, #32]
   171c6:	f001 f8db 	bl	18380 <net_buf_unref>
	if (!req) {
   171ca:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   171ce:	e7d7      	b.n	17180 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf);
   171d0:	9908      	ldr	r1, [sp, #32]
   171d2:	4620      	mov	r0, r4
   171d4:	f007 ff15 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   171d8:	e7d7      	b.n	1718a <att_read_type_req+0x6a>
		return BT_ATT_ERR_INVALID_PDU;
   171da:	2004      	movs	r0, #4
   171dc:	e7d6      	b.n	1718c <att_read_type_req+0x6c>
   171de:	bf00      	nop
   171e0:	00016975 	.word	0x00016975

000171e4 <att_find_type_req>:
{
   171e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   171e8:	460f      	mov	r7, r1
   171ea:	b086      	sub	sp, #24
   171ec:	4604      	mov	r4, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   171ee:	2106      	movs	r1, #6
   171f0:	f107 000c 	add.w	r0, r7, #12
   171f4:	f008 fdc9 	bl	1fd8a <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   171f8:	8805      	ldrh	r5, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   171fa:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	type = sys_le16_to_cpu(req->type);
   171fe:	8882      	ldrh	r2, [r0, #4]
	value = buf->data;
   17200:	f8d7 900c 	ldr.w	r9, [r7, #12]
	if (!start || !end) {
   17204:	b1c5      	cbz	r5, 17238 <att_find_type_req+0x54>
   17206:	2300      	movs	r3, #0
   17208:	f1b8 0f00 	cmp.w	r8, #0
   1720c:	d013      	beq.n	17236 <att_find_type_req+0x52>
	if (start > end) {
   1720e:	4545      	cmp	r5, r8
   17210:	d812      	bhi.n	17238 <att_find_type_req+0x54>
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17212:	f88d 3000 	strb.w	r3, [sp]
   17216:	f88d 3004 	strb.w	r3, [sp, #4]
   1721a:	a901      	add	r1, sp, #4
   1721c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   17220:	4668      	mov	r0, sp
   17222:	f8ad 2002 	strh.w	r2, [sp, #2]
   17226:	f8ad 3006 	strh.w	r3, [sp, #6]
   1722a:	f007 fad2 	bl	1e7d2 <bt_uuid_cmp>
   1722e:	4606      	mov	r6, r0
   17230:	b160      	cbz	r0, 1724c <att_find_type_req+0x68>
	if (!req) {
   17232:	230a      	movs	r3, #10
   17234:	e001      	b.n	1723a <att_find_type_req+0x56>
			*err = 0U;
   17236:	4645      	mov	r5, r8
	if (!req) {
   17238:	2301      	movs	r3, #1
   1723a:	462a      	mov	r2, r5
   1723c:	2106      	movs	r1, #6
   1723e:	4620      	mov	r0, r4
   17240:	f008 f911 	bl	1f466 <send_err_rsp.part.0>
		return 0;
   17244:	2000      	movs	r0, #0
}
   17246:	b006      	add	sp, #24
   17248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct bt_conn *conn = chan->chan.chan.conn;
   1724c:	f8d4 a004 	ldr.w	sl, [r4, #4]
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17250:	7c3f      	ldrb	r7, [r7, #16]
	(void)memset(&data, 0, sizeof(data));
   17252:	4601      	mov	r1, r0
   17254:	2214      	movs	r2, #20
   17256:	a801      	add	r0, sp, #4
   17258:	f007 fa9d 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1725c:	4632      	mov	r2, r6
   1725e:	2107      	movs	r1, #7
   17260:	4650      	mov	r0, sl
   17262:	f7ff fdaf 	bl	16dc4 <bt_att_create_pdu>
   17266:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17268:	b1f8      	cbz	r0, 172aa <att_find_type_req+0xc6>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1726a:	230a      	movs	r3, #10
   1726c:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17270:	4a0f      	ldr	r2, [pc, #60]	; (172b0 <att_find_type_req+0xcc>)
	data.chan = chan;
   17272:	9401      	str	r4, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17274:	ab01      	add	r3, sp, #4
   17276:	4641      	mov	r1, r8
   17278:	4628      	mov	r0, r5
	data.value = value;
   1727a:	e9cd 6903 	strd	r6, r9, [sp, #12]
	data.value_len = value_len;
   1727e:	f88d 7014 	strb.w	r7, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   17282:	f007 fde2 	bl	1ee4a <bt_gatt_foreach_attr>
	if (data.err) {
   17286:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1728a:	b14b      	cbz	r3, 172a0 <att_find_type_req+0xbc>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1728c:	9b02      	ldr	r3, [sp, #8]
   1728e:	6998      	ldr	r0, [r3, #24]
   17290:	f7ff f9b8 	bl	16604 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17294:	9802      	ldr	r0, [sp, #8]
   17296:	f001 f873 	bl	18380 <net_buf_unref>
	if (!req) {
   1729a:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1729e:	e7cc      	b.n	1723a <att_find_type_req+0x56>
	bt_att_chan_send_rsp(chan, data.buf);
   172a0:	9902      	ldr	r1, [sp, #8]
   172a2:	4620      	mov	r0, r4
   172a4:	f007 fead 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   172a8:	e7cc      	b.n	17244 <att_find_type_req+0x60>
		return BT_ATT_ERR_UNLIKELY;
   172aa:	200e      	movs	r0, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   172ac:	e7cb      	b.n	17246 <att_find_type_req+0x62>
   172ae:	bf00      	nop
   172b0:	00016621 	.word	0x00016621

000172b4 <att_find_info_req>:
{
   172b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   172b6:	68cb      	ldr	r3, [r1, #12]
	start_handle = sys_le16_to_cpu(req->start_handle);
   172b8:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   172ba:	885e      	ldrh	r6, [r3, #2]
{
   172bc:	b085      	sub	sp, #20
   172be:	4604      	mov	r4, r0
	if (!start || !end) {
   172c0:	b195      	cbz	r5, 172e8 <att_find_info_req+0x34>
   172c2:	b186      	cbz	r6, 172e6 <att_find_info_req+0x32>
	if (start > end) {
   172c4:	42ae      	cmp	r6, r5
   172c6:	d30f      	bcc.n	172e8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   172c8:	6847      	ldr	r7, [r0, #4]
	(void)memset(&data, 0, sizeof(data));
   172ca:	2210      	movs	r2, #16
   172cc:	2100      	movs	r1, #0
   172ce:	4668      	mov	r0, sp
   172d0:	f007 fa61 	bl	1e796 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   172d4:	2200      	movs	r2, #0
   172d6:	2105      	movs	r1, #5
   172d8:	4638      	mov	r0, r7
   172da:	f7ff fd73 	bl	16dc4 <bt_att_create_pdu>
   172de:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   172e0:	b958      	cbnz	r0, 172fa <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   172e2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   172e4:	e007      	b.n	172f6 <att_find_info_req+0x42>
			*err = 0U;
   172e6:	4635      	mov	r5, r6
	if (!req) {
   172e8:	2301      	movs	r3, #1
   172ea:	462a      	mov	r2, r5
   172ec:	2104      	movs	r1, #4
   172ee:	4620      	mov	r0, r4
   172f0:	f008 f8b9 	bl	1f466 <send_err_rsp.part.0>
		return 0;
   172f4:	2000      	movs	r0, #0
}
   172f6:	b005      	add	sp, #20
   172f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   172fa:	466b      	mov	r3, sp
   172fc:	4a0a      	ldr	r2, [pc, #40]	; (17328 <att_find_info_req+0x74>)
	data.chan = chan;
   172fe:	9400      	str	r4, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17300:	4631      	mov	r1, r6
   17302:	4628      	mov	r0, r5
   17304:	f007 fda1 	bl	1ee4a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   17308:	9b02      	ldr	r3, [sp, #8]
   1730a:	b943      	cbnz	r3, 1731e <att_find_info_req+0x6a>
		tx_meta_data_free(bt_att_tx_meta_data(data.buf));
   1730c:	9b01      	ldr	r3, [sp, #4]
   1730e:	6998      	ldr	r0, [r3, #24]
   17310:	f7ff f978 	bl	16604 <tx_meta_data_free>
		net_buf_unref(data.buf);
   17314:	9801      	ldr	r0, [sp, #4]
   17316:	f001 f833 	bl	18380 <net_buf_unref>
	if (!req) {
   1731a:	230a      	movs	r3, #10
   1731c:	e7e5      	b.n	172ea <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf);
   1731e:	9901      	ldr	r1, [sp, #4]
   17320:	4620      	mov	r0, r4
   17322:	f007 fe6e 	bl	1f002 <bt_att_chan_send_rsp>
	return 0;
   17326:	e7e5      	b.n	172f4 <att_find_info_req+0x40>
   17328:	0001ee61 	.word	0x0001ee61

0001732c <bt_att_init>:
	bt_l2cap_register_ecred_cb(&cb);
#endif /* CONFIG_BT_EATT */
}

void bt_att_init(void)
{
   1732c:	b538      	push	{r3, r4, r5, lr}
	z_impl_k_queue_init(queue);
   1732e:	4c0b      	ldr	r4, [pc, #44]	; (1735c <bt_att_init+0x30>)
	k_fifo_init(&free_att_tx_meta_data);
	for (size_t i = 0; i < ARRAY_SIZE(tx_meta_data); i++) {
		k_fifo_put(&free_att_tx_meta_data, &tx_meta_data[i]);
   17330:	4d0b      	ldr	r5, [pc, #44]	; (17360 <bt_att_init+0x34>)
   17332:	4620      	mov	r0, r4
   17334:	f009 fbd4 	bl	20ae0 <z_impl_k_queue_init>
   17338:	4629      	mov	r1, r5
   1733a:	4620      	mov	r0, r4
   1733c:	f009 fbdc 	bl	20af8 <k_queue_append>
   17340:	f105 0114 	add.w	r1, r5, #20
   17344:	4620      	mov	r0, r4
   17346:	f009 fbd7 	bl	20af8 <k_queue_append>
   1734a:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1734e:	4620      	mov	r0, r4
   17350:	f009 fbd2 	bl	20af8 <k_queue_append>
	bt_gatt_init();

	if (IS_ENABLED(CONFIG_BT_EATT)) {
		bt_eatt_init();
	}
}
   17354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_init();
   17358:	f000 bac2 	b.w	178e0 <bt_gatt_init>
   1735c:	200008cc 	.word	0x200008cc
   17360:	20002608 	.word	0x20002608

00017364 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   17364:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
   17366:	2300      	movs	r3, #0
{
   17368:	4605      	mov	r5, r0
   1736a:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
   1736c:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
   1736e:	f005 fd5b 	bl	1ce28 <z_impl_z_current_get>

	if (k_current_get() == att_handle_rsp_thread) {
   17372:	4b0b      	ldr	r3, [pc, #44]	; (173a0 <bt_att_req_alloc+0x3c>)
   17374:	681b      	ldr	r3, [r3, #0]
   17376:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
   17378:	bf04      	itt	eq
   1737a:	2500      	moveq	r5, #0
   1737c:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1737e:	a901      	add	r1, sp, #4
   17380:	4808      	ldr	r0, [pc, #32]	; (173a4 <bt_att_req_alloc+0x40>)
   17382:	462a      	mov	r2, r5
   17384:	4623      	mov	r3, r4
   17386:	f004 fe47 	bl	1c018 <k_mem_slab_alloc>
   1738a:	4601      	mov	r1, r0
   1738c:	b930      	cbnz	r0, 1739c <bt_att_req_alloc+0x38>
		return NULL;
	}

	LOG_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   1738e:	9801      	ldr	r0, [sp, #4]
   17390:	2210      	movs	r2, #16
   17392:	f007 fa00 	bl	1e796 <memset>

	return req;
   17396:	9801      	ldr	r0, [sp, #4]
}
   17398:	b003      	add	sp, #12
   1739a:	bd30      	pop	{r4, r5, pc}
		return NULL;
   1739c:	2000      	movs	r0, #0
   1739e:	e7fb      	b.n	17398 <bt_att_req_alloc+0x34>
   173a0:	20002644 	.word	0x20002644
   173a4:	20000888 	.word	0x20000888

000173a8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   173a8:	b507      	push	{r0, r1, r2, lr}
	LOG_DBG("req %p", req);

	if (req->buf) {
   173aa:	6883      	ldr	r3, [r0, #8]
{
   173ac:	9001      	str	r0, [sp, #4]
	if (req->buf) {
   173ae:	b14b      	cbz	r3, 173c4 <bt_att_req_free+0x1c>
		tx_meta_data_free(bt_att_tx_meta_data(req->buf));
   173b0:	6998      	ldr	r0, [r3, #24]
   173b2:	f7ff f927 	bl	16604 <tx_meta_data_free>
		net_buf_unref(req->buf);
   173b6:	9b01      	ldr	r3, [sp, #4]
   173b8:	6898      	ldr	r0, [r3, #8]
   173ba:	f000 ffe1 	bl	18380 <net_buf_unref>
		req->buf = NULL;
   173be:	9b01      	ldr	r3, [sp, #4]
   173c0:	2200      	movs	r2, #0
   173c2:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   173c4:	4803      	ldr	r0, [pc, #12]	; (173d4 <bt_att_req_free+0x2c>)
   173c6:	a901      	add	r1, sp, #4
   173c8:	f009 facc 	bl	20964 <k_mem_slab_free>
}
   173cc:	b003      	add	sp, #12
   173ce:	f85d fb04 	ldr.w	pc, [sp], #4
   173d2:	bf00      	nop
   173d4:	20000888 	.word	0x20000888

000173d8 <att_handle_rsp>:
{
   173d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   173dc:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   173de:	30b0      	adds	r0, #176	; 0xb0
{
   173e0:	461d      	mov	r5, r3
   173e2:	460e      	mov	r6, r1
   173e4:	4617      	mov	r7, r2
	k_work_cancel_delayable(&chan->timeout_work);
   173e6:	f009 fc70 	bl	20cca <k_work_cancel_delayable>
	if (!chan->req) {
   173ea:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   173ee:	b97b      	cbnz	r3, 17410 <att_handle_rsp+0x38>
		LOG_WRN("No pending ATT request");
   173f0:	4a19      	ldr	r2, [pc, #100]	; (17458 <att_handle_rsp+0x80>)
   173f2:	491a      	ldr	r1, [pc, #104]	; (1745c <att_handle_rsp+0x84>)
   173f4:	9300      	str	r3, [sp, #0]
   173f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   173fa:	4618      	mov	r0, r3
   173fc:	2202      	movs	r2, #2
   173fe:	f007 fdbe 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
	att_req_send_process(chan->att);
   17402:	6820      	ldr	r0, [r4, #0]
   17404:	f007 ff55 	bl	1f2b2 <att_req_send_process>
}
   17408:	2000      	movs	r0, #0
   1740a:	b004      	add	sp, #16
   1740c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->req == &cancel) {
   17410:	4a13      	ldr	r2, [pc, #76]	; (17460 <att_handle_rsp+0x88>)
   17412:	4293      	cmp	r3, r2
   17414:	f04f 0800 	mov.w	r8, #0
   17418:	d102      	bne.n	17420 <att_handle_rsp+0x48>
		chan->req = NULL;
   1741a:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
   1741e:	e7f0      	b.n	17402 <att_handle_rsp+0x2a>
	func = chan->req->func;
   17420:	f8d3 9004 	ldr.w	r9, [r3, #4]
	chan->req->func = NULL;
   17424:	f8c3 8004 	str.w	r8, [r3, #4]
	params = chan->req->user_data;
   17428:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
   1742c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
	bt_att_req_free(chan->req);
   17430:	f7ff ffba 	bl	173a8 <bt_att_req_free>
	att_req_send_process(chan->att);
   17434:	6820      	ldr	r0, [r4, #0]
	chan->req = NULL;
   17436:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
	att_req_send_process(chan->att);
   1743a:	f007 ff3a 	bl	1f2b2 <att_req_send_process>
	if (func) {
   1743e:	f1b9 0f00 	cmp.w	r9, #0
   17442:	d0e1      	beq.n	17408 <att_handle_rsp+0x30>
		func(chan->att->conn, err, pdu, len, params);
   17444:	6820      	ldr	r0, [r4, #0]
   17446:	f8cd a000 	str.w	sl, [sp]
   1744a:	6800      	ldr	r0, [r0, #0]
   1744c:	463b      	mov	r3, r7
   1744e:	4632      	mov	r2, r6
   17450:	4629      	mov	r1, r5
   17452:	47c8      	blx	r9
   17454:	e7d8      	b.n	17408 <att_handle_rsp+0x30>
   17456:	bf00      	nop
   17458:	00023264 	.word	0x00023264
   1745c:	0002162c 	.word	0x0002162c
   17460:	20002648 	.word	0x20002648

00017464 <bt_att_disconnected>:
{
   17464:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_att *att = att_chan->att;
   17468:	f850 6c04 	ldr.w	r6, [r0, #-4]
{
   1746c:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1746e:	2e00      	cmp	r6, #0
   17470:	d056      	beq.n	17520 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   17472:	f100 01dc 	add.w	r1, r0, #220	; 0xdc
   17476:	f106 0024 	add.w	r0, r6, #36	; 0x24
   1747a:	f007 fe5b 	bl	1f134 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1747e:	1f27      	subs	r7, r4, #4
   17480:	f104 0894 	add.w	r8, r4, #148	; 0x94
   17484:	2200      	movs	r2, #0
   17486:	2300      	movs	r3, #0
   17488:	4640      	mov	r0, r8
   1748a:	f008 fc04 	bl	1fc96 <net_buf_get>
   1748e:	4605      	mov	r5, r0
   17490:	bb28      	cbnz	r0, 174de <bt_att_disconnected+0x7a>
	if (chan->req) {
   17492:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17496:	b12b      	cbz	r3, 174a4 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   17498:	4602      	mov	r2, r0
   1749a:	4601      	mov	r1, r0
   1749c:	230e      	movs	r3, #14
   1749e:	4638      	mov	r0, r7
   174a0:	f7ff ff9a 	bl	173d8 <att_handle_rsp>
	chan->att = NULL;
   174a4:	2300      	movs	r3, #0
   174a6:	f844 3c04 	str.w	r3, [r4, #-4]
	if (!sys_slist_is_empty(&att->chans)) {
   174aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
   174ac:	2b00      	cmp	r3, #0
   174ae:	d137      	bne.n	17520 <bt_att_disconnected+0xbc>
	att_reset(att);
   174b0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   174b2:	9803      	ldr	r0, [sp, #12]
   174b4:	2200      	movs	r2, #0
   174b6:	2300      	movs	r3, #0
   174b8:	300c      	adds	r0, #12
   174ba:	f008 fbec 	bl	1fc96 <net_buf_get>
   174be:	4605      	mov	r5, r0
   174c0:	b9a0      	cbnz	r0, 174ec <bt_att_disconnected+0x88>
	while (!sys_slist_is_empty(&att->reqs)) {
   174c2:	9803      	ldr	r0, [sp, #12]
	return list->head;
   174c4:	6845      	ldr	r5, [r0, #4]
   174c6:	b9c5      	cbnz	r5, 174fa <bt_att_disconnected+0x96>
	att->conn = NULL;
   174c8:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
   174ca:	a903      	add	r1, sp, #12
   174cc:	4816      	ldr	r0, [pc, #88]	; (17528 <bt_att_disconnected+0xc4>)
   174ce:	f009 fa49 	bl	20964 <k_mem_slab_free>
	bt_gatt_disconnected(le_chan->chan.conn);
   174d2:	6820      	ldr	r0, [r4, #0]
}
   174d4:	b004      	add	sp, #16
   174d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_gatt_disconnected(le_chan->chan.conn);
   174da:	f000 be39 	b.w	18150 <bt_gatt_disconnected>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   174de:	69a8      	ldr	r0, [r5, #24]
   174e0:	f7ff f890 	bl	16604 <tx_meta_data_free>
		net_buf_unref(buf);
   174e4:	4628      	mov	r0, r5
   174e6:	f000 ff4b 	bl	18380 <net_buf_unref>
   174ea:	e7cb      	b.n	17484 <bt_att_disconnected+0x20>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   174ec:	69a8      	ldr	r0, [r5, #24]
   174ee:	f7ff f889 	bl	16604 <tx_meta_data_free>
		net_buf_unref(buf);
   174f2:	4628      	mov	r0, r5
   174f4:	f000 ff44 	bl	18380 <net_buf_unref>
   174f8:	e7db      	b.n	174b2 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   174fa:	6882      	ldr	r2, [r0, #8]
	return node->next;
   174fc:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   174fe:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17500:	4295      	cmp	r5, r2
	list->tail = node;
   17502:	bf08      	it	eq
   17504:	6083      	streq	r3, [r0, #8]
		if (req->func) {
   17506:	686e      	ldr	r6, [r5, #4]
   17508:	b136      	cbz	r6, 17518 <bt_att_disconnected+0xb4>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1750a:	68eb      	ldr	r3, [r5, #12]
   1750c:	9300      	str	r3, [sp, #0]
   1750e:	2300      	movs	r3, #0
   17510:	6800      	ldr	r0, [r0, #0]
   17512:	461a      	mov	r2, r3
   17514:	210e      	movs	r1, #14
   17516:	47b0      	blx	r6
		bt_att_req_free(req);
   17518:	4628      	mov	r0, r5
   1751a:	f7ff ff45 	bl	173a8 <bt_att_req_free>
   1751e:	e7d0      	b.n	174c2 <bt_att_disconnected+0x5e>
}
   17520:	b004      	add	sp, #16
   17522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17526:	bf00      	nop
   17528:	20000850 	.word	0x20000850

0001752c <att_timeout>:
{
   1752c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_ERR("ATT Timeout");
   1752e:	4b09      	ldr	r3, [pc, #36]	; (17554 <att_timeout+0x28>)
   17530:	9302      	str	r3, [sp, #8]
   17532:	2300      	movs	r3, #0
{
   17534:	4604      	mov	r4, r0
	LOG_ERR("ATT Timeout");
   17536:	e9cd 3300 	strd	r3, r3, [sp]
   1753a:	4618      	mov	r0, r3
   1753c:	4906      	ldr	r1, [pc, #24]	; (17558 <att_timeout+0x2c>)
   1753e:	2201      	movs	r2, #1
   17540:	f007 fd1d 	bl	1ef7e <z_log_msg_runtime_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
   17544:	f1a4 00ac 	sub.w	r0, r4, #172	; 0xac
}
   17548:	b004      	add	sp, #16
   1754a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1754e:	f7ff bf89 	b.w	17464 <bt_att_disconnected>
   17552:	bf00      	nop
   17554:	0002327b 	.word	0x0002327b
   17558:	0002162c 	.word	0x0002162c

0001755c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1755c:	b508      	push	{r3, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1755e:	b930      	cbnz	r0, 1756e <find_cf_cfg+0x12>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   17560:	4907      	ldr	r1, [pc, #28]	; (17580 <find_cf_cfg+0x24>)
   17562:	4808      	ldr	r0, [pc, #32]	; (17584 <find_cf_cfg+0x28>)
   17564:	f008 f904 	bl	1f770 <bt_addr_le_eq>
   17568:	b138      	cbz	r0, 1757a <find_cf_cfg+0x1e>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1756a:	4807      	ldr	r0, [pc, #28]	; (17588 <find_cf_cfg+0x2c>)
			return cfg;
		}
	}

	return NULL;
}
   1756c:	bd08      	pop	{r3, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1756e:	4a05      	ldr	r2, [pc, #20]	; (17584 <find_cf_cfg+0x28>)
   17570:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   17574:	f007 fb3e 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   17578:	e7f6      	b.n	17568 <find_cf_cfg+0xc>
	return NULL;
   1757a:	2000      	movs	r0, #0
   1757c:	e7f6      	b.n	1756c <find_cf_cfg+0x10>
   1757e:	bf00      	nop
   17580:	000225d1 	.word	0x000225d1
   17584:	20002671 	.word	0x20002671
   17588:	20002670 	.word	0x20002670

0001758c <find_sc_cfg>:
{
   1758c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1758e:	4c06      	ldr	r4, [pc, #24]	; (175a8 <find_sc_cfg+0x1c>)
   17590:	7823      	ldrb	r3, [r4, #0]
   17592:	4283      	cmp	r3, r0
   17594:	d103      	bne.n	1759e <find_sc_cfg+0x12>
		    bt_addr_le_eq(&sc_cfg[i].peer, addr)) {
   17596:	1c60      	adds	r0, r4, #1
   17598:	f008 f8ea 	bl	1f770 <bt_addr_le_eq>
		if (id == sc_cfg[i].id &&
   1759c:	b908      	cbnz	r0, 175a2 <find_sc_cfg+0x16>
	return NULL;
   1759e:	2000      	movs	r0, #0
}
   175a0:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   175a2:	4620      	mov	r0, r4
   175a4:	e7fc      	b.n	175a0 <find_sc_cfg+0x14>
   175a6:	bf00      	nop
   175a8:	2000294a 	.word	0x2000294a

000175ac <find_ccc_cfg>:
	return next;
}

static struct bt_gatt_ccc_cfg *find_ccc_cfg(const struct bt_conn *conn,
					    struct _bt_gatt_ccc *ccc)
{
   175ac:	b510      	push	{r4, lr}
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];

		if (conn) {
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
						    &cfg->peer)) {
   175ae:	1c4a      	adds	r2, r1, #1
{
   175b0:	460c      	mov	r4, r1
		if (conn) {
   175b2:	b138      	cbz	r0, 175c4 <find_ccc_cfg+0x18>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   175b4:	7809      	ldrb	r1, [r1, #0]
   175b6:	f007 fb1d 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   175ba:	b108      	cbz	r0, 175c0 <find_ccc_cfg+0x14>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   175bc:	4620      	mov	r0, r4
			return cfg;
		}
	}

	return NULL;
}
   175be:	bd10      	pop	{r4, pc}
	return NULL;
   175c0:	2000      	movs	r0, #0
   175c2:	e7fc      	b.n	175be <find_ccc_cfg+0x12>
		} else if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   175c4:	4902      	ldr	r1, [pc, #8]	; (175d0 <find_ccc_cfg+0x24>)
   175c6:	4610      	mov	r0, r2
   175c8:	f008 f8d2 	bl	1f770 <bt_addr_le_eq>
   175cc:	e7f5      	b.n	175ba <find_ccc_cfg+0xe>
   175ce:	bf00      	nop
   175d0:	000225d1 	.word	0x000225d1

000175d4 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   175d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   175d8:	b085      	sub	sp, #20
   175da:	461e      	mov	r6, r3
   175dc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	struct _bt_gatt_ccc *ccc = attr->user_data;
   175e0:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   175e4:	4681      	mov	r9, r0
   175e6:	460f      	mov	r7, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
   175e8:	2b00      	cmp	r3, #0
   175ea:	d14a      	bne.n	17682 <bt_gatt_attr_write_ccc+0xae>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   175ec:	1e73      	subs	r3, r6, #1
   175ee:	2b01      	cmp	r3, #1
   175f0:	d84a      	bhi.n	17688 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
   175f2:	2e01      	cmp	r6, #1
		value = *(uint8_t *)buf;
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   175f4:	4641      	mov	r1, r8
		value = *(uint8_t *)buf;
   175f6:	7815      	ldrb	r5, [r2, #0]
   175f8:	bf18      	it	ne
   175fa:	8815      	ldrhne	r5, [r2, #0]
	cfg = find_ccc_cfg(conn, ccc);
   175fc:	f7ff ffd6 	bl	175ac <find_ccc_cfg>
	if (!cfg) {
   17600:	4604      	mov	r4, r0
   17602:	b9e8      	cbnz	r0, 17640 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behaviorally the same as no written CCC.
		 */
		if (!value) {
   17604:	b91d      	cbnz	r5, 1760e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   17606:	4630      	mov	r0, r6
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   17608:	b005      	add	sp, #20
   1760a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1760e:	4641      	mov	r1, r8
   17610:	f7ff ffcc 	bl	175ac <find_ccc_cfg>
		if (!cfg) {
   17614:	4604      	mov	r4, r0
   17616:	b958      	cbnz	r0, 17630 <bt_gatt_attr_write_ccc+0x5c>
			LOG_WRN("No space to store CCC cfg");
   17618:	4b1d      	ldr	r3, [pc, #116]	; (17690 <bt_gatt_attr_write_ccc+0xbc>)
   1761a:	9000      	str	r0, [sp, #0]
   1761c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17620:	491c      	ldr	r1, [pc, #112]	; (17694 <bt_gatt_attr_write_ccc+0xc0>)
   17622:	4603      	mov	r3, r0
   17624:	2202      	movs	r2, #2
   17626:	f008 f8ae 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1762a:	f06f 0010 	mvn.w	r0, #16
   1762e:	e7eb      	b.n	17608 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17630:	f109 0188 	add.w	r1, r9, #136	; 0x88
   17634:	3001      	adds	r0, #1
   17636:	f008 f8a3 	bl	1f780 <bt_addr_le_copy>
		cfg->id = conn->id;
   1763a:	f899 3008 	ldrb.w	r3, [r9, #8]
   1763e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   17640:	f8d8 3010 	ldr.w	r3, [r8, #16]
   17644:	b98b      	cbnz	r3, 1766a <bt_gatt_attr_write_ccc+0x96>
	cfg->value = value;
   17646:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   17648:	f8b8 300a 	ldrh.w	r3, [r8, #10]
   1764c:	42ab      	cmp	r3, r5
   1764e:	d003      	beq.n	17658 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   17650:	4641      	mov	r1, r8
   17652:	4638      	mov	r0, r7
   17654:	f008 f818 	bl	1f688 <gatt_ccc_changed>
	if (!value) {
   17658:	2d00      	cmp	r5, #0
   1765a:	d1d4      	bne.n	17606 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1765c:	490e      	ldr	r1, [pc, #56]	; (17698 <bt_gatt_attr_write_ccc+0xc4>)
   1765e:	1c60      	adds	r0, r4, #1
   17660:	f008 f88e 	bl	1f780 <bt_addr_le_copy>
	cfg->id = 0U;
   17664:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   17666:	8125      	strh	r5, [r4, #8]
}
   17668:	e7cd      	b.n	17606 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1766a:	462a      	mov	r2, r5
   1766c:	4639      	mov	r1, r7
   1766e:	4648      	mov	r0, r9
   17670:	4798      	blx	r3
		if (write < 0) {
   17672:	2800      	cmp	r0, #0
   17674:	dbc8      	blt.n	17608 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   17676:	3801      	subs	r0, #1
   17678:	2801      	cmp	r0, #1
   1767a:	d9e4      	bls.n	17646 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1767c:	f06f 000d 	mvn.w	r0, #13
   17680:	e7c2      	b.n	17608 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17682:	f06f 0006 	mvn.w	r0, #6
   17686:	e7bf      	b.n	17608 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   17688:	f06f 000c 	mvn.w	r0, #12
   1768c:	e7bc      	b.n	17608 <bt_gatt_attr_write_ccc+0x34>
   1768e:	bf00      	nop
   17690:	0002328e 	.word	0x0002328e
   17694:	0002163c 	.word	0x0002163c
   17698:	000225d1 	.word	0x000225d1

0001769c <clear_cf_cfg>:
{
   1769c:	b510      	push	{r4, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1769e:	490c      	ldr	r1, [pc, #48]	; (176d0 <clear_cf_cfg+0x34>)
{
   176a0:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   176a2:	3001      	adds	r0, #1
   176a4:	f008 f86c 	bl	1f780 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   176a8:	f104 0008 	add.w	r0, r4, #8
   176ac:	2201      	movs	r2, #1
   176ae:	2100      	movs	r1, #0
   176b0:	f007 f871 	bl	1e796 <memset>
   176b4:	f3bf 8f5b 	dmb	ish
   176b8:	340c      	adds	r4, #12
   176ba:	2300      	movs	r3, #0
   176bc:	e854 2f00 	ldrex	r2, [r4]
   176c0:	e844 3100 	strex	r1, r3, [r4]
   176c4:	2900      	cmp	r1, #0
   176c6:	d1f9      	bne.n	176bc <clear_cf_cfg+0x20>
   176c8:	f3bf 8f5b 	dmb	ish
}
   176cc:	bd10      	pop	{r4, pc}
   176ce:	bf00      	nop
   176d0:	000225d1 	.word	0x000225d1

000176d4 <sc_save>:
{
   176d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   176d8:	4680      	mov	r8, r0
   176da:	460f      	mov	r7, r1
   176dc:	4616      	mov	r6, r2
   176de:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   176e0:	f7ff ff54 	bl	1758c <find_sc_cfg>
	if (!cfg) {
   176e4:	4604      	mov	r4, r0
   176e6:	b9a8      	cbnz	r0, 17714 <sc_save+0x40>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   176e8:	4911      	ldr	r1, [pc, #68]	; (17730 <sc_save+0x5c>)
   176ea:	f7ff ff4f 	bl	1758c <find_sc_cfg>
		if (!cfg) {
   176ee:	4604      	mov	r4, r0
   176f0:	b958      	cbnz	r0, 1770a <sc_save+0x36>
			LOG_ERR("unable to save SC: no cfg left");
   176f2:	4b10      	ldr	r3, [pc, #64]	; (17734 <sc_save+0x60>)
   176f4:	4910      	ldr	r1, [pc, #64]	; (17738 <sc_save+0x64>)
   176f6:	9000      	str	r0, [sp, #0]
   176f8:	e9cd 0301 	strd	r0, r3, [sp, #4]
   176fc:	2201      	movs	r2, #1
   176fe:	4603      	mov	r3, r0
   17700:	f008 f841 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
}
   17704:	b004      	add	sp, #16
   17706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1770a:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1770e:	4639      	mov	r1, r7
   17710:	f008 f836 	bl	1f780 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17714:	8922      	ldrh	r2, [r4, #8]
   17716:	8963      	ldrh	r3, [r4, #10]
   17718:	b91a      	cbnz	r2, 17722 <sc_save+0x4e>
   1771a:	b92b      	cbnz	r3, 17728 <sc_save+0x54>
		cfg->data.start = start;
   1771c:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1771e:	8165      	strh	r5, [r4, #10]
   17720:	e7f0      	b.n	17704 <sc_save+0x30>
	if (new_start >= *start && new_end <= *end) {
   17722:	42b2      	cmp	r2, r6
		*start = new_start;
   17724:	bf88      	it	hi
   17726:	8126      	strhhi	r6, [r4, #8]
	if (new_start >= *start && new_end <= *end) {
   17728:	42ab      	cmp	r3, r5
   1772a:	d2eb      	bcs.n	17704 <sc_save+0x30>
   1772c:	e7f7      	b.n	1771e <sc_save+0x4a>
   1772e:	bf00      	nop
   17730:	000225d1 	.word	0x000225d1
   17734:	000232a8 	.word	0x000232a8
   17738:	0002163c 	.word	0x0002163c

0001773c <cf_write>:
{
   1773c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   17740:	461f      	mov	r7, r3
   17742:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	if (offset > sizeof(cfg->data)) {
   17746:	2b01      	cmp	r3, #1
{
   17748:	4606      	mov	r6, r0
   1774a:	4690      	mov	r8, r2
	if (offset > sizeof(cfg->data)) {
   1774c:	d83b      	bhi.n	177c6 <cf_write+0x8a>
	if (offset + len > sizeof(cfg->data)) {
   1774e:	443b      	add	r3, r7
   17750:	2b01      	cmp	r3, #1
   17752:	463d      	mov	r5, r7
   17754:	dc3a      	bgt.n	177cc <cf_write+0x90>
	cfg = find_cf_cfg(conn);
   17756:	f7ff ff01 	bl	1755c <find_cf_cfg>
	if (!cfg) {
   1775a:	4604      	mov	r4, r0
   1775c:	b990      	cbnz	r0, 17784 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
   1775e:	f7ff fefd 	bl	1755c <find_cf_cfg>
	if (!cfg) {
   17762:	4604      	mov	r4, r0
   17764:	b970      	cbnz	r0, 17784 <cf_write+0x48>
		LOG_WRN("No space to store Client Supported Features");
   17766:	4b1c      	ldr	r3, [pc, #112]	; (177d8 <cf_write+0x9c>)
   17768:	491c      	ldr	r1, [pc, #112]	; (177dc <cf_write+0xa0>)
   1776a:	9000      	str	r0, [sp, #0]
   1776c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17770:	2202      	movs	r2, #2
   17772:	4603      	mov	r3, r0
   17774:	f008 f807 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   17778:	f06f 0510 	mvn.w	r5, #16
}
   1777c:	4628      	mov	r0, r5
   1777e:	b004      	add	sp, #16
   17780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17784:	b197      	cbz	r7, 177ac <cf_write+0x70>
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17786:	7a21      	ldrb	r1, [r4, #8]
		    !(value[i / 8] & BIT(i % 8))) {
   17788:	f898 2000 	ldrb.w	r2, [r8]
   1778c:	2300      	movs	r3, #0
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1778e:	fa21 f003 	lsr.w	r0, r1, r3
   17792:	07c7      	lsls	r7, r0, #31
   17794:	d503      	bpl.n	1779e <cf_write+0x62>
		    !(value[i / 8] & BIT(i % 8))) {
   17796:	fa22 f003 	lsr.w	r0, r2, r3
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1779a:	07c0      	lsls	r0, r0, #31
   1779c:	d519      	bpl.n	177d2 <cf_write+0x96>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1779e:	3301      	adds	r3, #1
   177a0:	2b03      	cmp	r3, #3
   177a2:	d1f4      	bne.n	1778e <cf_write+0x52>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   177a4:	f002 0207 	and.w	r2, r2, #7
   177a8:	4311      	orrs	r1, r2
   177aa:	7221      	strb	r1, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   177ac:	f106 0188 	add.w	r1, r6, #136	; 0x88
   177b0:	1c60      	adds	r0, r4, #1
   177b2:	f007 ffe5 	bl	1f780 <bt_addr_le_copy>
	cfg->id = conn->id;
   177b6:	4620      	mov	r0, r4
   177b8:	7a33      	ldrb	r3, [r6, #8]
   177ba:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   177be:	2100      	movs	r1, #0
   177c0:	f007 fff0 	bl	1f7a4 <atomic_set_bit>
	return len;
   177c4:	e7da      	b.n	1777c <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   177c6:	f06f 0506 	mvn.w	r5, #6
   177ca:	e7d7      	b.n	1777c <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   177cc:	f06f 050c 	mvn.w	r5, #12
   177d0:	e7d4      	b.n	1777c <cf_write+0x40>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   177d2:	f06f 0512 	mvn.w	r5, #18
   177d6:	e7d1      	b.n	1777c <cf_write+0x40>
   177d8:	000232c7 	.word	0x000232c7
   177dc:	0002163c 	.word	0x0002163c

000177e0 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   177e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   177e4:	4b23      	ldr	r3, [pc, #140]	; (17874 <disconnected_cb+0x94>)
{
   177e6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   177e8:	6882      	ldr	r2, [r0, #8]
   177ea:	429a      	cmp	r2, r3
{
   177ec:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   177ee:	d102      	bne.n	177f6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   177f0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   177f2:	8963      	ldrh	r3, [r4, #10]
   177f4:	bb33      	cbnz	r3, 17844 <disconnected_cb+0x64>

		LOG_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   177f6:	2001      	movs	r0, #1
   177f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				bt_conn_unref(tmp);
   177fc:	f007 f9ec 	bl	1ebd8 <bt_conn_unref>
		if (ccc->cfg_changed) {
   17800:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17802:	2100      	movs	r1, #0
   17804:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17806:	2b00      	cmp	r3, #0
   17808:	d0f5      	beq.n	177f6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1780a:	4638      	mov	r0, r7
   1780c:	4798      	blx	r3
   1780e:	e7f2      	b.n	177f6 <disconnected_cb+0x16>
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   17810:	f105 0888 	add.w	r8, r5, #136	; 0x88
   17814:	7a28      	ldrb	r0, [r5, #8]
   17816:	4641      	mov	r1, r8
   17818:	f007 f8ff 	bl	1ea1a <bt_addr_le_is_bonded>
   1781c:	b968      	cbnz	r0, 1783a <disconnected_cb+0x5a>
				if (ccc == &sc_ccc) {
   1781e:	4b16      	ldr	r3, [pc, #88]	; (17878 <disconnected_cb+0x98>)
   17820:	429c      	cmp	r4, r3
   17822:	d102      	bne.n	1782a <disconnected_cb+0x4a>
					sc_clear(conn);
   17824:	4628      	mov	r0, r5
   17826:	f007 ffeb 	bl	1f800 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1782a:	4914      	ldr	r1, [pc, #80]	; (1787c <disconnected_cb+0x9c>)
   1782c:	4630      	mov	r0, r6
   1782e:	f007 ffa7 	bl	1f780 <bt_addr_le_copy>
	cfg->id = 0U;
   17832:	2300      	movs	r3, #0
   17834:	7023      	strb	r3, [r4, #0]
	cfg->value = 0U;
   17836:	8123      	strh	r3, [r4, #8]
}
   17838:	e7e2      	b.n	17800 <disconnected_cb+0x20>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1783a:	4641      	mov	r1, r8
   1783c:	4630      	mov	r0, r6
   1783e:	f007 ff9f 	bl	1f780 <bt_addr_le_copy>
   17842:	e7dd      	b.n	17800 <disconnected_cb+0x20>
		if (!cfg->value) {
   17844:	8923      	ldrh	r3, [r4, #8]
   17846:	2b00      	cmp	r3, #0
   17848:	d0da      	beq.n	17800 <disconnected_cb+0x20>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1784a:	4626      	mov	r6, r4
   1784c:	4628      	mov	r0, r5
   1784e:	f816 1b01 	ldrb.w	r1, [r6], #1
   17852:	4632      	mov	r2, r6
   17854:	f007 f9ce 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   17858:	2800      	cmp	r0, #0
   1785a:	d1d9      	bne.n	17810 <disconnected_cb+0x30>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1785c:	7820      	ldrb	r0, [r4, #0]
   1785e:	4631      	mov	r1, r6
   17860:	f7fe fa9c 	bl	15d9c <bt_conn_lookup_addr_le>
			if (tmp) {
   17864:	2800      	cmp	r0, #0
   17866:	d0cb      	beq.n	17800 <disconnected_cb+0x20>
				if (tmp->state == BT_CONN_CONNECTED) {
   17868:	7a83      	ldrb	r3, [r0, #10]
   1786a:	2b07      	cmp	r3, #7
   1786c:	d1c6      	bne.n	177fc <disconnected_cb+0x1c>
				bt_conn_unref(tmp);
   1786e:	f007 f9b3 	bl	1ebd8 <bt_conn_unref>
	if (!value_used) {
   17872:	e7c0      	b.n	177f6 <disconnected_cb+0x16>
   17874:	000175d5 	.word	0x000175d5
   17878:	200006bc 	.word	0x200006bc
   1787c:	000225d1 	.word	0x000225d1

00017880 <sc_indicate_rsp>:
{
   17880:	b510      	push	{r4, lr}
   17882:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17884:	4815      	ldr	r0, [pc, #84]	; (178dc <sc_indicate_rsp+0x5c>)
   17886:	f3bf 8f5b 	dmb	ish
   1788a:	e850 3f00 	ldrex	r3, [r0]
   1788e:	f023 0302 	bic.w	r3, r3, #2
   17892:	e840 3200 	strex	r2, r3, [r0]
   17896:	2a00      	cmp	r2, #0
   17898:	d1f7      	bne.n	1788a <sc_indicate_rsp+0xa>
   1789a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1789e:	f3bf 8f5b 	dmb	ish
   178a2:	6803      	ldr	r3, [r0, #0]
   178a4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   178a8:	07da      	lsls	r2, r3, #31
   178aa:	d504      	bpl.n	178b6 <sc_indicate_rsp+0x36>
	k_work_reschedule(&gatt_sc.work, timeout);
   178ac:	2200      	movs	r2, #0
   178ae:	2300      	movs	r3, #0
   178b0:	3830      	subs	r0, #48	; 0x30
   178b2:	f004 ffb7 	bl	1c824 <k_work_reschedule>
	if (bt_att_fixed_chan_only(conn)) {
   178b6:	4620      	mov	r0, r4
   178b8:	f007 feb5 	bl	1f626 <bt_att_fixed_chan_only>
   178bc:	b160      	cbz	r0, 178d8 <sc_indicate_rsp+0x58>
		cfg = find_cf_cfg(conn);
   178be:	4620      	mov	r0, r4
   178c0:	f7ff fe4c 	bl	1755c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   178c4:	b140      	cbz	r0, 178d8 <sc_indicate_rsp+0x58>
   178c6:	7a03      	ldrb	r3, [r0, #8]
   178c8:	07db      	lsls	r3, r3, #31
   178ca:	d505      	bpl.n	178d8 <sc_indicate_rsp+0x58>
}
   178cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   178d0:	2100      	movs	r1, #0
   178d2:	300c      	adds	r0, #12
   178d4:	f007 bf66 	b.w	1f7a4 <atomic_set_bit>
}
   178d8:	bd10      	pop	{r4, pc}
   178da:	bf00      	nop
   178dc:	20001b58 	.word	0x20001b58

000178e0 <bt_gatt_init>:
{
   178e0:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   178e2:	4b20      	ldr	r3, [pc, #128]	; (17964 <bt_gatt_init+0x84>)
   178e4:	f3bf 8f5b 	dmb	ish
   178e8:	2201      	movs	r2, #1
   178ea:	e853 1f00 	ldrex	r1, [r3]
   178ee:	2900      	cmp	r1, #0
   178f0:	d103      	bne.n	178fa <bt_gatt_init+0x1a>
   178f2:	e843 2000 	strex	r0, r2, [r3]
   178f6:	2800      	cmp	r0, #0
   178f8:	d1f7      	bne.n	178ea <bt_gatt_init+0xa>
   178fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   178fe:	d130      	bne.n	17962 <bt_gatt_init+0x82>
   17900:	f3bf 8f5b 	dmb	ish
   17904:	4b18      	ldr	r3, [pc, #96]	; (17968 <bt_gatt_init+0x88>)
   17906:	e853 1f00 	ldrex	r1, [r3]
   1790a:	2900      	cmp	r1, #0
   1790c:	d103      	bne.n	17916 <bt_gatt_init+0x36>
   1790e:	e843 2000 	strex	r0, r2, [r3]
   17912:	2800      	cmp	r0, #0
   17914:	d1f7      	bne.n	17906 <bt_gatt_init+0x26>
   17916:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1791a:	d108      	bne.n	1792e <bt_gatt_init+0x4e>
   1791c:	4913      	ldr	r1, [pc, #76]	; (1796c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1791e:	4a14      	ldr	r2, [pc, #80]	; (17970 <bt_gatt_init+0x90>)
   17920:	880b      	ldrh	r3, [r1, #0]
   17922:	4c14      	ldr	r4, [pc, #80]	; (17974 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
   17924:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   17926:	42a2      	cmp	r2, r4
   17928:	d315      	bcc.n	17956 <bt_gatt_init+0x76>
   1792a:	b100      	cbz	r0, 1792e <bt_gatt_init+0x4e>
   1792c:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
   1792e:	4b12      	ldr	r3, [pc, #72]	; (17978 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   17930:	4912      	ldr	r1, [pc, #72]	; (1797c <bt_gatt_init+0x9c>)
   17932:	4813      	ldr	r0, [pc, #76]	; (17980 <bt_gatt_init+0xa0>)
   17934:	2200      	movs	r2, #0
	list->tail = NULL;
   17936:	e9c3 2200 	strd	r2, r2, [r3]
   1793a:	f009 f9b8 	bl	20cae <k_work_init_delayable>
		bt_long_wq_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1793e:	4810      	ldr	r0, [pc, #64]	; (17980 <bt_gatt_init+0xa0>)
   17940:	f44f 72a4 	mov.w	r2, #328	; 0x148
   17944:	2300      	movs	r3, #0
   17946:	f7fb fce3 	bl	13310 <bt_long_wq_schedule>
}
   1794a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1794e:	490d      	ldr	r1, [pc, #52]	; (17984 <bt_gatt_init+0xa4>)
   17950:	480d      	ldr	r0, [pc, #52]	; (17988 <bt_gatt_init+0xa8>)
   17952:	f009 b9ac 	b.w	20cae <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   17956:	6850      	ldr	r0, [r2, #4]
   17958:	4403      	add	r3, r0
   1795a:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1795c:	3208      	adds	r2, #8
   1795e:	2001      	movs	r0, #1
   17960:	e7e1      	b.n	17926 <bt_gatt_init+0x46>
}
   17962:	bd10      	pop	{r4, pc}
   17964:	20002684 	.word	0x20002684
   17968:	20002680 	.word	0x20002680
   1796c:	20002956 	.word	0x20002956
   17970:	0002160c 	.word	0x0002160c
   17974:	0002161c 	.word	0x0002161c
   17978:	20002688 	.word	0x20002688
   1797c:	0001fa49 	.word	0x0001fa49
   17980:	20001ab0 	.word	0x20001ab0
   17984:	00017dd1 	.word	0x00017dd1
   17988:	20001b28 	.word	0x20001b28

0001798c <bt_gatt_attr_get_handle>:
{
   1798c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   17990:	4603      	mov	r3, r0
   17992:	b148      	cbz	r0, 179a8 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   17994:	8a00      	ldrh	r0, [r0, #16]
   17996:	b938      	cbnz	r0, 179a8 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17998:	4912      	ldr	r1, [pc, #72]	; (179e4 <bt_gatt_attr_get_handle+0x58>)
   1799a:	f8df e04c 	ldr.w	lr, [pc, #76]	; 179e8 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1799e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   179a0:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179a4:	4571      	cmp	r1, lr
   179a6:	d301      	bcc.n	179ac <bt_gatt_attr_get_handle+0x20>
}
   179a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   179ac:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   179b0:	42bb      	cmp	r3, r7
   179b2:	d304      	bcc.n	179be <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   179b4:	fb0c 7206 	mla	r2, ip, r6, r7
   179b8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   179ba:	4293      	cmp	r3, r2
   179bc:	d90e      	bls.n	179dc <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   179be:	4434      	add	r4, r6
   179c0:	b2a2      	uxth	r2, r4
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179c2:	3108      	adds	r1, #8
   179c4:	4614      	mov	r4, r2
   179c6:	e7ed      	b.n	179a4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   179c8:	fb0c 7805 	mla	r8, ip, r5, r7
   179cc:	4543      	cmp	r3, r8
   179ce:	d007      	beq.n	179e0 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   179d0:	3501      	adds	r5, #1
   179d2:	1962      	adds	r2, r4, r5
   179d4:	42b5      	cmp	r5, r6
   179d6:	b292      	uxth	r2, r2
   179d8:	d1f6      	bne.n	179c8 <bt_gatt_attr_get_handle+0x3c>
   179da:	e7f2      	b.n	179c2 <bt_gatt_attr_get_handle+0x36>
   179dc:	2500      	movs	r5, #0
   179de:	e7f8      	b.n	179d2 <bt_gatt_attr_get_handle+0x46>
   179e0:	4610      	mov	r0, r2
   179e2:	e7e1      	b.n	179a8 <bt_gatt_attr_get_handle+0x1c>
   179e4:	0002160c 	.word	0x0002160c
   179e8:	0002161c 	.word	0x0002161c

000179ec <bt_gatt_foreach_attr_type>:
{
   179ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179f0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   179f4:	9100      	str	r1, [sp, #0]
   179f6:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   179f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   179fc:	2d00      	cmp	r5, #0
   179fe:	bf08      	it	eq
   17a00:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   17a02:	4b24      	ldr	r3, [pc, #144]	; (17a94 <bt_gatt_foreach_attr_type+0xa8>)
   17a04:	881b      	ldrh	r3, [r3, #0]
   17a06:	4283      	cmp	r3, r0
{
   17a08:	4607      	mov	r7, r0
   17a0a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   17a0c:	d23c      	bcs.n	17a88 <bt_gatt_foreach_attr_type+0x9c>
}
   17a0e:	b003      	add	sp, #12
   17a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   17a14:	6873      	ldr	r3, [r6, #4]
   17a16:	4423      	add	r3, r4
   17a18:	42bb      	cmp	r3, r7
   17a1a:	d232      	bcs.n	17a82 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   17a1c:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a1e:	3608      	adds	r6, #8
   17a20:	4b1d      	ldr	r3, [pc, #116]	; (17a98 <bt_gatt_foreach_attr_type+0xac>)
   17a22:	429e      	cmp	r6, r3
   17a24:	d3f6      	bcc.n	17a14 <bt_gatt_foreach_attr_type+0x28>
   17a26:	e7f2      	b.n	17a0e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a28:	5889      	ldr	r1, [r1, r2]
   17a2a:	9301      	str	r3, [sp, #4]
   17a2c:	4640      	mov	r0, r8
   17a2e:	f006 fed0 	bl	1e7d2 <bt_uuid_cmp>
   17a32:	9b01      	ldr	r3, [sp, #4]
   17a34:	b190      	cbz	r0, 17a5c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a36:	3401      	adds	r4, #1
   17a38:	f10a 0a01 	add.w	sl, sl, #1
   17a3c:	b2a4      	uxth	r4, r4
   17a3e:	6873      	ldr	r3, [r6, #4]
   17a40:	4553      	cmp	r3, sl
   17a42:	d9ec      	bls.n	17a1e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   17a44:	9b00      	ldr	r3, [sp, #0]
   17a46:	429c      	cmp	r4, r3
   17a48:	d8e1      	bhi.n	17a0e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   17a4a:	42bc      	cmp	r4, r7
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a4c:	6831      	ldr	r1, [r6, #0]
	if (handle < start_handle) {
   17a4e:	d3f2      	bcc.n	17a36 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a50:	fb0b f20a 	mul.w	r2, fp, sl
   17a54:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   17a56:	f1b8 0f00 	cmp.w	r8, #0
   17a5a:	d1e5      	bne.n	17a28 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   17a5c:	f1b9 0f00 	cmp.w	r9, #0
   17a60:	d10b      	bne.n	17a7a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   17a62:	3d01      	subs	r5, #1
   17a64:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17a66:	4618      	mov	r0, r3
   17a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a6c:	4621      	mov	r1, r4
   17a6e:	4798      	blx	r3
	if (!*num_matches) {
   17a70:	2d00      	cmp	r5, #0
   17a72:	d0cc      	beq.n	17a0e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a74:	2800      	cmp	r0, #0
   17a76:	d1de      	bne.n	17a36 <bt_gatt_foreach_attr_type+0x4a>
   17a78:	e7c9      	b.n	17a0e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17a7a:	68da      	ldr	r2, [r3, #12]
   17a7c:	4591      	cmp	r9, r2
   17a7e:	d1da      	bne.n	17a36 <bt_gatt_foreach_attr_type+0x4a>
   17a80:	e7ef      	b.n	17a62 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a82:	f04f 0a00 	mov.w	sl, #0
   17a86:	e7da      	b.n	17a3e <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a88:	4e04      	ldr	r6, [pc, #16]	; (17a9c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   17a8a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a8c:	f04f 0b14 	mov.w	fp, #20
   17a90:	e7c6      	b.n	17a20 <bt_gatt_foreach_attr_type+0x34>
   17a92:	bf00      	nop
   17a94:	20002956 	.word	0x20002956
   17a98:	0002161c 	.word	0x0002161c
   17a9c:	0002160c 	.word	0x0002160c

00017aa0 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   17aa0:	b510      	push	{r4, lr}
   17aa2:	b0cc      	sub	sp, #304	; 0x130
	uint8_t key[16] = {};
   17aa4:	2300      	movs	r3, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17aa6:	aa20      	add	r2, sp, #128	; 0x80
   17aa8:	a904      	add	r1, sp, #16
   17aaa:	a808      	add	r0, sp, #32
	uint8_t key[16] = {};
   17aac:	e9cd 3304 	strd	r3, r3, [sp, #16]
   17ab0:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17ab4:	f006 fd25 	bl	1e502 <tc_cmac_setup>
   17ab8:	4603      	mov	r3, r0
   17aba:	b948      	cbnz	r0, 17ad0 <db_hash_gen.constprop.0+0x30>
		LOG_ERR("Unable to setup AES CMAC");
   17abc:	4a19      	ldr	r2, [pc, #100]	; (17b24 <db_hash_gen.constprop.0+0x84>)
		LOG_ERR("Unable to calculate hash");
   17abe:	491a      	ldr	r1, [pc, #104]	; (17b28 <db_hash_gen.constprop.0+0x88>)
   17ac0:	9300      	str	r3, [sp, #0]
   17ac2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   17ac6:	2201      	movs	r2, #1
   17ac8:	f007 fe5d 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
}
   17acc:	b04c      	add	sp, #304	; 0x130
   17ace:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17ad0:	ab08      	add	r3, sp, #32
   17ad2:	4a16      	ldr	r2, [pc, #88]	; (17b2c <db_hash_gen.constprop.0+0x8c>)
   17ad4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17ad8:	2001      	movs	r0, #1
   17ada:	f007 ffaa 	bl	1fa32 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17ade:	4814      	ldr	r0, [pc, #80]	; (17b30 <db_hash_gen.constprop.0+0x90>)
   17ae0:	a908      	add	r1, sp, #32
   17ae2:	f006 fda3 	bl	1e62c <tc_cmac_final>
   17ae6:	4603      	mov	r3, r0
   17ae8:	b908      	cbnz	r0, 17aee <db_hash_gen.constprop.0+0x4e>
		LOG_ERR("Unable to calculate hash");
   17aea:	4a12      	ldr	r2, [pc, #72]	; (17b34 <db_hash_gen.constprop.0+0x94>)
   17aec:	e7e7      	b.n	17abe <db_hash_gen.constprop.0+0x1e>
   17aee:	4b10      	ldr	r3, [pc, #64]	; (17b30 <db_hash_gen.constprop.0+0x90>)
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17af0:	2208      	movs	r2, #8
   17af2:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
   17af6:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17af8:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   17afc:	f803 4b01 	strb.w	r4, [r3], #1
	for (i = 0; i < (length/2); i++) {
   17b00:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17b02:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
   17b04:	d1f7      	bne.n	17af6 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17b06:	f3bf 8f5b 	dmb	ish
   17b0a:	4b0b      	ldr	r3, [pc, #44]	; (17b38 <db_hash_gen.constprop.0+0x98>)
   17b0c:	e853 1f00 	ldrex	r1, [r3]
   17b10:	f041 0104 	orr.w	r1, r1, #4
   17b14:	e843 1200 	strex	r2, r1, [r3]
   17b18:	2a00      	cmp	r2, #0
   17b1a:	d1f7      	bne.n	17b0c <db_hash_gen.constprop.0+0x6c>
   17b1c:	f3bf 8f5b 	dmb	ish
   17b20:	e7d4      	b.n	17acc <db_hash_gen.constprop.0+0x2c>
   17b22:	bf00      	nop
   17b24:	000232f3 	.word	0x000232f3
   17b28:	0002163c 	.word	0x0002163c
   17b2c:	0001f6cb 	.word	0x0001f6cb
   17b30:	20001aa0 	.word	0x20001aa0
   17b34:	0002330c 	.word	0x0002330c
   17b38:	20001b58 	.word	0x20001b58

00017b3c <db_hash_read>:
{
   17b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b3e:	491d      	ldr	r1, [pc, #116]	; (17bb4 <db_hash_read+0x78>)
{
   17b40:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17b44:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b46:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   17b4a:	461f      	mov	r7, r3
   17b4c:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   17b4e:	f009 f8d0 	bl	20cf2 <k_work_cancel_delayable_sync>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b52:	f3bf 8f5b 	dmb	ish
   17b56:	4b18      	ldr	r3, [pc, #96]	; (17bb8 <db_hash_read+0x7c>)
   17b58:	681b      	ldr	r3, [r3, #0]
   17b5a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   17b5e:	0759      	lsls	r1, r3, #29
   17b60:	d401      	bmi.n	17b66 <db_hash_read+0x2a>
		db_hash_gen(true);
   17b62:	f7ff ff9d 	bl	17aa0 <db_hash_gen.constprop.0>
	cfg = find_cf_cfg(conn);
   17b66:	4620      	mov	r0, r4
   17b68:	f7ff fcf8 	bl	1755c <find_cf_cfg>
	if (cfg &&
   17b6c:	4601      	mov	r1, r0
   17b6e:	b170      	cbz	r0, 17b8e <db_hash_read+0x52>
   17b70:	7a03      	ldrb	r3, [r0, #8]
   17b72:	07da      	lsls	r2, r3, #31
   17b74:	d50b      	bpl.n	17b8e <db_hash_read+0x52>
   17b76:	f3bf 8f5b 	dmb	ish
   17b7a:	68cb      	ldr	r3, [r1, #12]
   17b7c:	f3bf 8f5b 	dmb	ish
	    CF_ROBUST_CACHING(cfg) &&
   17b80:	07db      	lsls	r3, r3, #31
	    !atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   17b82:	f100 000c 	add.w	r0, r0, #12
	    CF_ROBUST_CACHING(cfg) &&
   17b86:	d402      	bmi.n	17b8e <db_hash_read+0x52>
		atomic_set_bit(cfg->flags, CF_DB_HASH_READ);
   17b88:	2101      	movs	r1, #1
   17b8a:	f007 fe0b 	bl	1f7a4 <atomic_set_bit>
	if (offset > value_len) {
   17b8e:	2e10      	cmp	r6, #16
   17b90:	d80c      	bhi.n	17bac <db_hash_read+0x70>
	len = MIN(buf_len, value_len - offset);
   17b92:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   17b96:	4909      	ldr	r1, [pc, #36]	; (17bbc <db_hash_read+0x80>)
	len = MIN(buf_len, value_len - offset);
   17b98:	42bc      	cmp	r4, r7
   17b9a:	bfa8      	it	ge
   17b9c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   17b9e:	4622      	mov	r2, r4
   17ba0:	4431      	add	r1, r6
   17ba2:	4628      	mov	r0, r5
   17ba4:	f006 fdec 	bl	1e780 <memcpy>
}
   17ba8:	4620      	mov	r0, r4
   17baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17bac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   17bb0:	e7fa      	b.n	17ba8 <db_hash_read+0x6c>
   17bb2:	bf00      	nop
   17bb4:	20001ae0 	.word	0x20001ae0
   17bb8:	20001b58 	.word	0x20001b58
   17bbc:	20001aa0 	.word	0x20001aa0

00017bc0 <bt_gatt_attr_next>:
{
   17bc0:	b507      	push	{r0, r1, r2, lr}
	struct bt_gatt_attr *next = NULL;
   17bc2:	2300      	movs	r3, #0
   17bc4:	9301      	str	r3, [sp, #4]
	uint16_t handle = bt_gatt_attr_get_handle(attr);
   17bc6:	f7ff fee1 	bl	1798c <bt_gatt_attr_get_handle>
	bt_gatt_foreach_attr(handle + 1, handle + 1, find_next, &next);
   17bca:	1c41      	adds	r1, r0, #1
   17bcc:	b289      	uxth	r1, r1
   17bce:	4608      	mov	r0, r1
   17bd0:	4a03      	ldr	r2, [pc, #12]	; (17be0 <bt_gatt_attr_next+0x20>)
   17bd2:	ab01      	add	r3, sp, #4
   17bd4:	f007 ff2d 	bl	1fa32 <bt_gatt_foreach_attr>
}
   17bd8:	9801      	ldr	r0, [sp, #4]
   17bda:	b003      	add	sp, #12
   17bdc:	f85d fb04 	ldr.w	pc, [sp], #4
   17be0:	0001f683 	.word	0x0001f683

00017be4 <gatt_indicate>:
{
   17be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   17be8:	4615      	mov	r5, r2
   17bea:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17bec:	2294      	movs	r2, #148	; 0x94
   17bee:	6869      	ldr	r1, [r5, #4]
{
   17bf0:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17bf2:	f007 ff2b 	bl	1fa4c <bt_gatt_check_perm>
   17bf6:	4680      	mov	r8, r0
   17bf8:	b178      	cbz	r0, 17c1a <gatt_indicate+0x36>
		LOG_WRN("Link is not encrypted");
   17bfa:	4b33      	ldr	r3, [pc, #204]	; (17cc8 <gatt_indicate+0xe4>)
   17bfc:	9302      	str	r3, [sp, #8]
   17bfe:	2300      	movs	r3, #0
   17c00:	e9cd 3300 	strd	r3, r3, [sp]
   17c04:	4931      	ldr	r1, [pc, #196]	; (17ccc <gatt_indicate+0xe8>)
   17c06:	2202      	movs	r2, #2
   17c08:	4618      	mov	r0, r3
   17c0a:	f007 fdbc 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   17c0e:	f04f 35ff 	mov.w	r5, #4294967295
}
   17c12:	4628      	mov	r0, r5
   17c14:	b004      	add	sp, #16
   17c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_INDICATE)) {
   17c1a:	6869      	ldr	r1, [r5, #4]
   17c1c:	2202      	movs	r2, #2
   17c1e:	4638      	mov	r0, r7
   17c20:	f007 ff3d 	bl	1fa9e <bt_gatt_is_subscribed>
   17c24:	4603      	mov	r3, r0
   17c26:	b950      	cbnz	r0, 17c3e <gatt_indicate+0x5a>
			LOG_WRN("Device is not subscribed to characteristic");
   17c28:	4a29      	ldr	r2, [pc, #164]	; (17cd0 <gatt_indicate+0xec>)
   17c2a:	4928      	ldr	r1, [pc, #160]	; (17ccc <gatt_indicate+0xe8>)
   17c2c:	9000      	str	r0, [sp, #0]
   17c2e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17c32:	2202      	movs	r2, #2
   17c34:	f007 fda7 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   17c38:	f06f 0515 	mvn.w	r5, #21
   17c3c:	e7e9      	b.n	17c12 <gatt_indicate+0x2e>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17c3e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17c42:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17c44:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17c46:	f7ff fb8d 	bl	17364 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17c4a:	3602      	adds	r6, #2
	if (!req) {
   17c4c:	4604      	mov	r4, r0
   17c4e:	b1a8      	cbz	r0, 17c7c <gatt_indicate+0x98>
	req->func = func;
   17c50:	4b20      	ldr	r3, [pc, #128]	; (17cd4 <gatt_indicate+0xf0>)
   17c52:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17c54:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17c56:	4632      	mov	r2, r6
   17c58:	211d      	movs	r1, #29
   17c5a:	4638      	mov	r0, r7
   17c5c:	f7ff f8b2 	bl	16dc4 <bt_att_create_pdu>
	if (!buf) {
   17c60:	4606      	mov	r6, r0
   17c62:	b970      	cbnz	r0, 17c82 <gatt_indicate+0x9e>
		LOG_WRN("No buffer available to send indication");
   17c64:	4b1c      	ldr	r3, [pc, #112]	; (17cd8 <gatt_indicate+0xf4>)
   17c66:	9000      	str	r0, [sp, #0]
   17c68:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17c6c:	4917      	ldr	r1, [pc, #92]	; (17ccc <gatt_indicate+0xe8>)
   17c6e:	4603      	mov	r3, r0
   17c70:	2202      	movs	r2, #2
   17c72:	f007 fd88 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
		bt_att_req_free(req);
   17c76:	4620      	mov	r0, r4
   17c78:	f7ff fb96 	bl	173a8 <bt_att_req_free>
		return -ENOMEM;
   17c7c:	f06f 050b 	mvn.w	r5, #11
   17c80:	e7c7      	b.n	17c12 <gatt_indicate+0x2e>
	bt_att_set_tx_meta_data(buf, NULL, NULL, BT_ATT_CHAN_OPT(params));
   17c82:	2301      	movs	r3, #1
   17c84:	4642      	mov	r2, r8
   17c86:	4641      	mov	r1, r8
	return net_buf_simple_add(&buf->b, len);
   17c88:	f106 0a0c 	add.w	sl, r6, #12
   17c8c:	f007 fcf2 	bl	1f674 <bt_att_set_tx_meta_data>
   17c90:	2102      	movs	r1, #2
   17c92:	4650      	mov	r0, sl
   17c94:	f008 f85a 	bl	1fd4c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17c98:	4680      	mov	r8, r0
   17c9a:	4650      	mov	r0, sl
   17c9c:	f828 9b02 	strh.w	r9, [r8], #2
   17ca0:	8aa9      	ldrh	r1, [r5, #20]
   17ca2:	f008 f853 	bl	1fd4c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17ca6:	8aaa      	ldrh	r2, [r5, #20]
   17ca8:	6929      	ldr	r1, [r5, #16]
   17caa:	4640      	mov	r0, r8
   17cac:	f006 fd68 	bl	1e780 <memcpy>
	req->buf = buf;
   17cb0:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   17cb2:	4621      	mov	r1, r4
   17cb4:	4638      	mov	r0, r7
   17cb6:	f007 fca1 	bl	1f5fc <bt_att_req_send>
	if (err) {
   17cba:	4605      	mov	r5, r0
   17cbc:	2800      	cmp	r0, #0
   17cbe:	d0a8      	beq.n	17c12 <gatt_indicate+0x2e>
		bt_att_req_free(req);
   17cc0:	4620      	mov	r0, r4
   17cc2:	f7ff fb71 	bl	173a8 <bt_att_req_free>
   17cc6:	e7a4      	b.n	17c12 <gatt_indicate+0x2e>
   17cc8:	00023325 	.word	0x00023325
   17ccc:	0002163c 	.word	0x0002163c
   17cd0:	0002333b 	.word	0x0002333b
   17cd4:	0001f69d 	.word	0x0001f69d
   17cd8:	00023366 	.word	0x00023366

00017cdc <bt_gatt_indicate>:
{
   17cdc:	b530      	push	{r4, r5, lr}
   17cde:	4b39      	ldr	r3, [pc, #228]	; (17dc4 <bt_gatt_indicate+0xe8>)
   17ce0:	f3bf 8f5b 	dmb	ish
   17ce4:	681b      	ldr	r3, [r3, #0]
   17ce6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17cea:	075a      	lsls	r2, r3, #29
{
   17cec:	b08b      	sub	sp, #44	; 0x2c
   17cee:	4604      	mov	r4, r0
   17cf0:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17cf2:	d561      	bpl.n	17db8 <bt_gatt_indicate+0xdc>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17cf4:	b110      	cbz	r0, 17cfc <bt_gatt_indicate+0x20>
   17cf6:	7a83      	ldrb	r3, [r0, #10]
   17cf8:	2b07      	cmp	r3, #7
   17cfa:	d160      	bne.n	17dbe <bt_gatt_indicate+0xe2>
	data.attr = params->attr;
   17cfc:	6868      	ldr	r0, [r5, #4]
   17cfe:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17d00:	f7ff fe44 	bl	1798c <bt_gatt_attr_get_handle>
	if (params->uuid) {
   17d04:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17d06:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   17d0a:	b33a      	cbz	r2, 17d5c <bt_gatt_indicate+0x80>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d0c:	a905      	add	r1, sp, #20
   17d0e:	9102      	str	r1, [sp, #8]
   17d10:	492d      	ldr	r1, [pc, #180]	; (17dc8 <bt_gatt_indicate+0xec>)
   17d12:	9101      	str	r1, [sp, #4]
   17d14:	2101      	movs	r1, #1
	found->attr = NULL;
   17d16:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d18:	9100      	str	r1, [sp, #0]
   17d1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17d1e:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17d20:	f7ff fe64 	bl	179ec <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   17d24:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17d26:	b91b      	cbnz	r3, 17d30 <bt_gatt_indicate+0x54>
			return -ENOENT;
   17d28:	f06f 0001 	mvn.w	r0, #1
}
   17d2c:	b00b      	add	sp, #44	; 0x2c
   17d2e:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   17d30:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17d32:	9b05      	ldr	r3, [sp, #20]
   17d34:	6818      	ldr	r0, [r3, #0]
   17d36:	2300      	movs	r3, #0
   17d38:	f88d 3010 	strb.w	r3, [sp, #16]
   17d3c:	a904      	add	r1, sp, #16
   17d3e:	f642 0303 	movw	r3, #10243	; 0x2803
   17d42:	f8ad 3012 	strh.w	r3, [sp, #18]
   17d46:	f006 fd44 	bl	1e7d2 <bt_uuid_cmp>
   17d4a:	b970      	cbnz	r0, 17d6a <bt_gatt_indicate+0x8e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17d4c:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17d4e:	68c3      	ldr	r3, [r0, #12]
   17d50:	799b      	ldrb	r3, [r3, #6]
   17d52:	069b      	lsls	r3, r3, #26
   17d54:	d405      	bmi.n	17d62 <bt_gatt_indicate+0x86>
			return -EINVAL;
   17d56:	f06f 0015 	mvn.w	r0, #21
   17d5a:	e7e7      	b.n	17d2c <bt_gatt_indicate+0x50>
		if (!data.handle) {
   17d5c:	2800      	cmp	r0, #0
   17d5e:	d1e8      	bne.n	17d32 <bt_gatt_indicate+0x56>
   17d60:	e7e2      	b.n	17d28 <bt_gatt_indicate+0x4c>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17d62:	f007 fe18 	bl	1f996 <bt_gatt_attr_value_handle>
   17d66:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
   17d6a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17d6e:	b13c      	cbz	r4, 17d80 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   17d70:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17d72:	4601      	mov	r1, r0
		params->_ref = 1;
   17d74:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   17d76:	462a      	mov	r2, r5
   17d78:	4620      	mov	r0, r4
   17d7a:	f7ff ff33 	bl	17be4 <gatt_indicate>
   17d7e:	e7d5      	b.n	17d2c <bt_gatt_indicate+0x50>
	data.err = -ENOTCONN;
   17d80:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17d84:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17d86:	2302      	movs	r3, #2
   17d88:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17d8c:	f642 1302 	movw	r3, #10498	; 0x2902
   17d90:	f8ad 3012 	strh.w	r3, [sp, #18]
   17d94:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   17d96:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17d98:	9302      	str	r3, [sp, #8]
   17d9a:	4b0c      	ldr	r3, [pc, #48]	; (17dcc <bt_gatt_indicate+0xf0>)
   17d9c:	9301      	str	r3, [sp, #4]
   17d9e:	2301      	movs	r3, #1
   17da0:	9300      	str	r3, [sp, #0]
   17da2:	aa04      	add	r2, sp, #16
   17da4:	4623      	mov	r3, r4
   17da6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   17daa:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17dac:	f88d 4010 	strb.w	r4, [sp, #16]
   17db0:	f7ff fe1c 	bl	179ec <bt_gatt_foreach_attr_type>
	return data.err;
   17db4:	9807      	ldr	r0, [sp, #28]
   17db6:	e7b9      	b.n	17d2c <bt_gatt_indicate+0x50>
		return -EAGAIN;
   17db8:	f06f 000a 	mvn.w	r0, #10
   17dbc:	e7b6      	b.n	17d2c <bt_gatt_indicate+0x50>
		return -ENOTCONN;
   17dbe:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17dc2:	e7b3      	b.n	17d2c <bt_gatt_indicate+0x50>
   17dc4:	2000043c 	.word	0x2000043c
   17dc8:	0001f6c3 	.word	0x0001f6c3
   17dcc:	00017ff1 	.word	0x00017ff1

00017dd0 <sc_process>:
{
   17dd0:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17dd2:	f850 2c08 	ldr.w	r2, [r0, #-8]
   17dd6:	9201      	str	r2, [sp, #4]
{
   17dd8:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17dda:	f1a0 0120 	sub.w	r1, r0, #32
   17dde:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17de2:	f3bf 8f5b 	dmb	ish
   17de6:	e854 2f00 	ldrex	r2, [r4]
   17dea:	f022 0201 	bic.w	r2, r2, #1
   17dee:	e844 2000 	strex	r0, r2, [r4]
   17df2:	2800      	cmp	r0, #0
   17df4:	d1f7      	bne.n	17de6 <sc_process+0x16>
   17df6:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17dfa:	4a0d      	ldr	r2, [pc, #52]	; (17e30 <sc_process+0x60>)
   17dfc:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17e00:	4a0c      	ldr	r2, [pc, #48]	; (17e34 <sc_process+0x64>)
   17e02:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17e06:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   17e08:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   17e0a:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17e0e:	2204      	movs	r2, #4
	sc->start = 0U;
   17e10:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17e14:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   17e18:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17e1c:	f7ff ff5e 	bl	17cdc <bt_gatt_indicate>
   17e20:	b918      	cbnz	r0, 17e2a <sc_process+0x5a>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17e22:	2101      	movs	r1, #1
   17e24:	4620      	mov	r0, r4
   17e26:	f007 fcbd 	bl	1f7a4 <atomic_set_bit>
}
   17e2a:	b002      	add	sp, #8
   17e2c:	bd10      	pop	{r4, pc}
   17e2e:	bf00      	nop
   17e30:	000219dc 	.word	0x000219dc
   17e34:	00017881 	.word	0x00017881

00017e38 <update_ccc>:
{
   17e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e3a:	4b31      	ldr	r3, [pc, #196]	; (17f00 <update_ccc+0xc8>)
	struct bt_conn *conn = data->conn;
   17e3c:	6816      	ldr	r6, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e3e:	6882      	ldr	r2, [r0, #8]
   17e40:	429a      	cmp	r2, r3
{
   17e42:	b087      	sub	sp, #28
   17e44:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17e46:	d11c      	bne.n	17e82 <update_ccc+0x4a>
	ccc = attr->user_data;
   17e48:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
   17e4a:	893b      	ldrh	r3, [r7, #8]
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   17e4c:	2500      	movs	r5, #0
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17e4e:	1c7a      	adds	r2, r7, #1
		if (!cfg->value ||
   17e50:	b1bb      	cbz	r3, 17e82 <update_ccc+0x4a>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17e52:	7839      	ldrb	r1, [r7, #0]
   17e54:	4630      	mov	r0, r6
   17e56:	f006 fecd 	bl	1ebf4 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17e5a:	b190      	cbz	r0, 17e82 <update_ccc+0x4a>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17e5c:	f44f 7295 	mov.w	r2, #298	; 0x12a
   17e60:	4621      	mov	r1, r4
   17e62:	4630      	mov	r0, r6
   17e64:	f007 fdf2 	bl	1fa4c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17e68:	2803      	cmp	r0, #3
   17e6a:	d10d      	bne.n	17e88 <update_ccc+0x50>
				LOG_WRN("CCC %p not writable", attr);
   17e6c:	4b25      	ldr	r3, [pc, #148]	; (17f04 <update_ccc+0xcc>)
   17e6e:	4926      	ldr	r1, [pc, #152]	; (17f08 <update_ccc+0xd0>)
   17e70:	9403      	str	r4, [sp, #12]
   17e72:	e9cd 5301 	strd	r5, r3, [sp, #4]
   17e76:	9500      	str	r5, [sp, #0]
   17e78:	462b      	mov	r3, r5
   17e7a:	2202      	movs	r2, #2
   17e7c:	4628      	mov	r0, r5
   17e7e:	f007 fc82 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
}
   17e82:	2001      	movs	r0, #1
   17e84:	b007      	add	sp, #28
   17e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gatt_ccc_changed(attr, ccc);
   17e88:	4639      	mov	r1, r7
   17e8a:	4620      	mov	r0, r4
   17e8c:	f007 fbfc 	bl	1f688 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17e90:	4b1e      	ldr	r3, [pc, #120]	; (17f0c <update_ccc+0xd4>)
   17e92:	429f      	cmp	r7, r3
   17e94:	d1f5      	bne.n	17e82 <update_ccc+0x4a>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17e96:	7a30      	ldrb	r0, [r6, #8]
   17e98:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17e9c:	f7ff fb76 	bl	1758c <find_sc_cfg>
	if (!cfg) {
   17ea0:	2800      	cmp	r0, #0
   17ea2:	d0ee      	beq.n	17e82 <update_ccc+0x4a>
	if (!(cfg->data.start || cfg->data.end)) {
   17ea4:	8902      	ldrh	r2, [r0, #8]
   17ea6:	8943      	ldrh	r3, [r0, #10]
   17ea8:	ea52 0103 	orrs.w	r1, r2, r3
   17eac:	d0e9      	beq.n	17e82 <update_ccc+0x4a>
	index = bt_conn_index(conn);
   17eae:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   17eb0:	f8ad 2014 	strh.w	r2, [sp, #20]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   17eb4:	f8ad 3016 	strh.w	r3, [sp, #22]
	index = bt_conn_index(conn);
   17eb8:	f7fd fea6 	bl	15c08 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17ebc:	4914      	ldr	r1, [pc, #80]	; (17f10 <update_ccc+0xd8>)
   17ebe:	4a15      	ldr	r2, [pc, #84]	; (17f14 <update_ccc+0xdc>)
   17ec0:	2318      	movs	r3, #24
   17ec2:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ec6:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   17ec8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   17eca:	4a13      	ldr	r2, [pc, #76]	; (17f18 <update_ccc+0xe0>)
   17ecc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   17ece:	aa05      	add	r2, sp, #20
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ed0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   17ed4:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   17ed6:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ed8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   17edc:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   17ede:	4630      	mov	r0, r6
   17ee0:	f7ff fefc 	bl	17cdc <bt_gatt_indicate>
   17ee4:	2800      	cmp	r0, #0
   17ee6:	d0cc      	beq.n	17e82 <update_ccc+0x4a>
		LOG_ERR("SC restore indication failed");
   17ee8:	4b0c      	ldr	r3, [pc, #48]	; (17f1c <update_ccc+0xe4>)
   17eea:	4907      	ldr	r1, [pc, #28]	; (17f08 <update_ccc+0xd0>)
   17eec:	9500      	str	r5, [sp, #0]
   17eee:	e9cd 5301 	strd	r5, r3, [sp, #4]
   17ef2:	2201      	movs	r2, #1
   17ef4:	462b      	mov	r3, r5
   17ef6:	4628      	mov	r0, r5
   17ef8:	f007 fc45 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
   17efc:	e7c1      	b.n	17e82 <update_ccc+0x4a>
   17efe:	bf00      	nop
   17f00:	000175d5 	.word	0x000175d5
   17f04:	0002338d 	.word	0x0002338d
   17f08:	0002163c 	.word	0x0002163c
   17f0c:	200006bc 	.word	0x200006bc
   17f10:	20002658 	.word	0x20002658
   17f14:	000219dc 	.word	0x000219dc
   17f18:	0001f7c1 	.word	0x0001f7c1
   17f1c:	000233a1 	.word	0x000233a1

00017f20 <gatt_notify>:
{
   17f20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17f24:	4614      	mov	r4, r2
   17f26:	b085      	sub	sp, #20
   17f28:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f2a:	2294      	movs	r2, #148	; 0x94
   17f2c:	6861      	ldr	r1, [r4, #4]
{
   17f2e:	4606      	mov	r6, r0
	if (bt_gatt_check_perm(conn, params->attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   17f30:	f007 fd8c 	bl	1fa4c <bt_gatt_check_perm>
   17f34:	b170      	cbz	r0, 17f54 <gatt_notify+0x34>
		LOG_WRN("Link is not encrypted");
   17f36:	4b2a      	ldr	r3, [pc, #168]	; (17fe0 <gatt_notify+0xc0>)
   17f38:	9302      	str	r3, [sp, #8]
   17f3a:	2300      	movs	r3, #0
   17f3c:	4618      	mov	r0, r3
   17f3e:	e9cd 3300 	strd	r3, r3, [sp]
   17f42:	4928      	ldr	r1, [pc, #160]	; (17fe4 <gatt_notify+0xc4>)
   17f44:	2202      	movs	r2, #2
   17f46:	f007 fc1e 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
		return -EPERM;
   17f4a:	f04f 30ff 	mov.w	r0, #4294967295
}
   17f4e:	b005      	add	sp, #20
   17f50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!bt_gatt_is_subscribed(conn, params->attr, BT_GATT_CCC_NOTIFY)) {
   17f54:	6861      	ldr	r1, [r4, #4]
   17f56:	2201      	movs	r2, #1
   17f58:	4630      	mov	r0, r6
   17f5a:	f007 fda0 	bl	1fa9e <bt_gatt_is_subscribed>
   17f5e:	4603      	mov	r3, r0
   17f60:	b950      	cbnz	r0, 17f78 <gatt_notify+0x58>
			LOG_WRN("Device is not subscribed to characteristic");
   17f62:	4a21      	ldr	r2, [pc, #132]	; (17fe8 <gatt_notify+0xc8>)
   17f64:	9000      	str	r0, [sp, #0]
   17f66:	e9cd 0201 	strd	r0, r2, [sp, #4]
   17f6a:	491e      	ldr	r1, [pc, #120]	; (17fe4 <gatt_notify+0xc4>)
   17f6c:	2202      	movs	r2, #2
   17f6e:	f007 fc0a 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
   17f72:	f06f 0015 	mvn.w	r0, #21
   17f76:	e7ea      	b.n	17f4e <gatt_notify+0x2e>
				sizeof(*nfy) + params->len);
   17f78:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17f7a:	211b      	movs	r1, #27
   17f7c:	3202      	adds	r2, #2
   17f7e:	4630      	mov	r0, r6
   17f80:	f7fe ff20 	bl	16dc4 <bt_att_create_pdu>
	if (!buf) {
   17f84:	4605      	mov	r5, r0
   17f86:	b958      	cbnz	r0, 17fa0 <gatt_notify+0x80>
		LOG_WRN("No buffer available to send notification");
   17f88:	4b18      	ldr	r3, [pc, #96]	; (17fec <gatt_notify+0xcc>)
   17f8a:	9000      	str	r0, [sp, #0]
   17f8c:	e9cd 0301 	strd	r0, r3, [sp, #4]
   17f90:	4914      	ldr	r1, [pc, #80]	; (17fe4 <gatt_notify+0xc4>)
   17f92:	4603      	mov	r3, r0
   17f94:	2202      	movs	r2, #2
   17f96:	f007 fbf6 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
		return -ENOMEM;
   17f9a:	f06f 000b 	mvn.w	r0, #11
   17f9e:	e7d6      	b.n	17f4e <gatt_notify+0x2e>
   17fa0:	f100 090c 	add.w	r9, r0, #12
   17fa4:	2102      	movs	r1, #2
   17fa6:	4648      	mov	r0, r9
   17fa8:	f007 fed0 	bl	1fd4c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17fac:	4607      	mov	r7, r0
   17fae:	4648      	mov	r0, r9
   17fb0:	f827 8b02 	strh.w	r8, [r7], #2
   17fb4:	89a1      	ldrh	r1, [r4, #12]
   17fb6:	f007 fec9 	bl	1fd4c <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   17fba:	89a2      	ldrh	r2, [r4, #12]
   17fbc:	68a1      	ldr	r1, [r4, #8]
   17fbe:	4638      	mov	r0, r7
   17fc0:	f006 fbde 	bl	1e780 <memcpy>
	bt_att_set_tx_meta_data(buf, params->func, params->user_data, BT_ATT_CHAN_OPT(params));
   17fc4:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   17fc8:	4628      	mov	r0, r5
   17fca:	2301      	movs	r3, #1
   17fcc:	f007 fb52 	bl	1f674 <bt_att_set_tx_meta_data>
	return bt_att_send(conn, buf);
   17fd0:	4629      	mov	r1, r5
   17fd2:	4630      	mov	r0, r6
}
   17fd4:	b005      	add	sp, #20
   17fd6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf);
   17fda:	f007 bad1 	b.w	1f580 <bt_att_send>
   17fde:	bf00      	nop
   17fe0:	00023325 	.word	0x00023325
   17fe4:	0002163c 	.word	0x0002163c
   17fe8:	0002333b 	.word	0x0002333b
   17fec:	000233be 	.word	0x000233be

00017ff0 <notify_cb>:
{
   17ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ff2:	4b3f      	ldr	r3, [pc, #252]	; (180f0 <notify_cb+0x100>)
{
   17ff4:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ff6:	6882      	ldr	r2, [r0, #8]
   17ff8:	429a      	cmp	r2, r3
{
   17ffa:	b085      	sub	sp, #20
   17ffc:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ffe:	d003      	beq.n	18008 <notify_cb+0x18>
		return BT_GATT_ITER_CONTINUE;
   18000:	2701      	movs	r7, #1
}
   18002:	4638      	mov	r0, r7
   18004:	b005      	add	sp, #20
   18006:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ccc = attr->user_data;
   18008:	68c6      	ldr	r6, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1800a:	4b3a      	ldr	r3, [pc, #232]	; (180f4 <notify_cb+0x104>)
   1800c:	429e      	cmp	r6, r3
   1800e:	d056      	beq.n	180be <notify_cb+0xce>
		if (cfg->value != data->type) {
   18010:	8932      	ldrh	r2, [r6, #8]
   18012:	89ab      	ldrh	r3, [r5, #12]
   18014:	429a      	cmp	r2, r3
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   18016:	f106 0101 	add.w	r1, r6, #1
		if (cfg->value != data->type) {
   1801a:	d1f1      	bne.n	18000 <notify_cb+0x10>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1801c:	7830      	ldrb	r0, [r6, #0]
   1801e:	f7fd febd 	bl	15d9c <bt_conn_lookup_addr_le>
		if (!conn) {
   18022:	4604      	mov	r4, r0
   18024:	2800      	cmp	r0, #0
   18026:	d0eb      	beq.n	18000 <notify_cb+0x10>
		if (conn->state != BT_CONN_CONNECTED) {
   18028:	7a83      	ldrb	r3, [r0, #10]
   1802a:	2b07      	cmp	r3, #7
   1802c:	d005      	beq.n	1803a <notify_cb+0x4a>
			bt_conn_unref(conn);
   1802e:	f006 fdd3 	bl	1ebd8 <bt_conn_unref>
			continue;
   18032:	e7e5      	b.n	18000 <notify_cb+0x10>
			bt_conn_unref(conn);
   18034:	f006 fdd0 	bl	1ebd8 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   18038:	e7ea      	b.n	18010 <notify_cb+0x20>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1803a:	6973      	ldr	r3, [r6, #20]
   1803c:	b123      	cbz	r3, 18048 <notify_cb+0x58>
   1803e:	4639      	mov	r1, r7
   18040:	4798      	blx	r3
   18042:	b908      	cbnz	r0, 18048 <notify_cb+0x58>
			bt_conn_unref(conn);
   18044:	4620      	mov	r0, r4
   18046:	e7f2      	b.n	1802e <notify_cb+0x3e>
		if (bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_ENCRYPT_MASK)) {
   18048:	4639      	mov	r1, r7
   1804a:	2294      	movs	r2, #148	; 0x94
   1804c:	4620      	mov	r0, r4
   1804e:	f007 fcfd 	bl	1fa4c <bt_gatt_check_perm>
   18052:	4607      	mov	r7, r0
   18054:	b150      	cbz	r0, 1806c <notify_cb+0x7c>
			LOG_WRN("Link is not encrypted");
   18056:	4b28      	ldr	r3, [pc, #160]	; (180f8 <notify_cb+0x108>)
   18058:	9302      	str	r3, [sp, #8]
   1805a:	2300      	movs	r3, #0
   1805c:	e9cd 3300 	strd	r3, r3, [sp]
   18060:	4926      	ldr	r1, [pc, #152]	; (180fc <notify_cb+0x10c>)
   18062:	2202      	movs	r2, #2
   18064:	4618      	mov	r0, r3
   18066:	f007 fb8e 	bl	1f786 <z_log_msg_runtime_create.constprop.0>
   1806a:	e7eb      	b.n	18044 <notify_cb+0x54>
		if ((data->type == BT_GATT_CCC_INDICATE) &&
   1806c:	89ab      	ldrh	r3, [r5, #12]
   1806e:	2b02      	cmp	r3, #2
   18070:	d114      	bne.n	1809c <notify_cb+0xac>
   18072:	8933      	ldrh	r3, [r6, #8]
   18074:	079a      	lsls	r2, r3, #30
   18076:	d405      	bmi.n	18084 <notify_cb+0x94>
		bt_conn_unref(conn);
   18078:	4620      	mov	r0, r4
   1807a:	f006 fdad 	bl	1ebd8 <bt_conn_unref>
		data->err = 0;
   1807e:	2300      	movs	r3, #0
   18080:	60ab      	str	r3, [r5, #8]
   18082:	e7bd      	b.n	18000 <notify_cb+0x10>
			err = gatt_indicate(conn, data->handle, data->ind_params);
   18084:	692a      	ldr	r2, [r5, #16]
   18086:	88a9      	ldrh	r1, [r5, #4]
   18088:	4620      	mov	r0, r4
   1808a:	f7ff fdab 	bl	17be4 <gatt_indicate>
			if (err == 0) {
   1808e:	4606      	mov	r6, r0
   18090:	b978      	cbnz	r0, 180b2 <notify_cb+0xc2>
				data->ind_params->_ref++;
   18092:	692a      	ldr	r2, [r5, #16]
   18094:	7d93      	ldrb	r3, [r2, #22]
   18096:	3301      	adds	r3, #1
   18098:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1809a:	e7ed      	b.n	18078 <notify_cb+0x88>
		} else if ((data->type == BT_GATT_CCC_NOTIFY) &&
   1809c:	2b01      	cmp	r3, #1
   1809e:	d1eb      	bne.n	18078 <notify_cb+0x88>
   180a0:	8933      	ldrh	r3, [r6, #8]
   180a2:	07db      	lsls	r3, r3, #31
   180a4:	d5e8      	bpl.n	18078 <notify_cb+0x88>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   180a6:	692a      	ldr	r2, [r5, #16]
   180a8:	88a9      	ldrh	r1, [r5, #4]
   180aa:	4620      	mov	r0, r4
   180ac:	f7ff ff38 	bl	17f20 <gatt_notify>
   180b0:	4606      	mov	r6, r0
		bt_conn_unref(conn);
   180b2:	4620      	mov	r0, r4
   180b4:	f006 fd90 	bl	1ebd8 <bt_conn_unref>
		if (err < 0) {
   180b8:	2e00      	cmp	r6, #0
   180ba:	dba2      	blt.n	18002 <notify_cb+0x12>
   180bc:	e7df      	b.n	1807e <notify_cb+0x8e>
			if (bt_addr_le_eq(&cfg->peer, BT_ADDR_LE_ANY)) {
   180be:	4c10      	ldr	r4, [pc, #64]	; (18100 <notify_cb+0x110>)
   180c0:	4910      	ldr	r1, [pc, #64]	; (18104 <notify_cb+0x114>)
   180c2:	4620      	mov	r0, r4
   180c4:	f007 fb54 	bl	1f770 <bt_addr_le_eq>
   180c8:	2800      	cmp	r0, #0
   180ca:	d1a1      	bne.n	18010 <notify_cb+0x20>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   180cc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   180d0:	2207      	movs	r2, #7
   180d2:	4621      	mov	r1, r4
   180d4:	f7fd fe7e 	bl	15dd4 <bt_conn_lookup_state_le>
			if (!conn) {
   180d8:	2800      	cmp	r0, #0
   180da:	d1ab      	bne.n	18034 <notify_cb+0x44>
				sc = (struct sc_data *)data->ind_params->data;
   180dc:	692b      	ldr	r3, [r5, #16]
				sc_save(cfg->id, &cfg->peer,
   180de:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
   180e2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   180e4:	4621      	mov	r1, r4
   180e6:	8853      	ldrh	r3, [r2, #2]
   180e8:	8812      	ldrh	r2, [r2, #0]
   180ea:	f7ff faf3 	bl	176d4 <sc_save>
				continue;
   180ee:	e78f      	b.n	18010 <notify_cb+0x20>
   180f0:	000175d5 	.word	0x000175d5
   180f4:	200006bc 	.word	0x200006bc
   180f8:	00023325 	.word	0x00023325
   180fc:	0002163c 	.word	0x0002163c
   18100:	2000294b 	.word	0x2000294b
   18104:	000225d1 	.word	0x000225d1

00018108 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18108:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1810a:	4a06      	ldr	r2, [pc, #24]	; (18124 <bt_gatt_connected+0x1c>)
	data.conn = conn;
   1810c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1810e:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   18110:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18112:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   18116:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1811a:	f007 fc8a 	bl	1fa32 <bt_gatt_foreach_attr>
	if (err) {
		LOG_WRN("MTU Exchange failed (err %d)", err);
	}
#endif /* CONFIG_BT_GATT_AUTO_UPDATE_MTU */
#endif /* CONFIG_BT_GATT_CLIENT */
}
   1811e:	b003      	add	sp, #12
   18120:	f85d fb04 	ldr.w	pc, [sp], #4
   18124:	00017e39 	.word	0x00017e39

00018128 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
   18128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
   1812a:	4b08      	ldr	r3, [pc, #32]	; (1814c <bt_gatt_att_max_mtu_changed+0x24>)
   1812c:	681c      	ldr	r4, [r3, #0]
   1812e:	4605      	mov	r5, r0
   18130:	460e      	mov	r6, r1
   18132:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   18134:	b14c      	cbz	r4, 1814a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
   18136:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1813a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
   1813c:	b11b      	cbz	r3, 18146 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
   1813e:	463a      	mov	r2, r7
   18140:	4631      	mov	r1, r6
   18142:	4628      	mov	r0, r5
   18144:	4798      	blx	r3
	return node->next;
   18146:	6864      	ldr	r4, [r4, #4]
   18148:	e7f4      	b.n	18134 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
   1814a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1814c:	20002688 	.word	0x20002688

00018150 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18150:	b570      	push	{r4, r5, r6, lr}
	LOG_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18152:	4603      	mov	r3, r0
   18154:	4a0f      	ldr	r2, [pc, #60]	; (18194 <bt_gatt_disconnected+0x44>)
{
   18156:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18158:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1815c:	2001      	movs	r0, #1
   1815e:	f007 fc68 	bl	1fa32 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18162:	4620      	mov	r0, r4
   18164:	f7ff f9fa 	bl	1755c <find_cf_cfg>
	if (!cfg) {
   18168:	4605      	mov	r5, r0
   1816a:	b188      	cbz	r0, 18190 <bt_gatt_disconnected+0x40>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1816c:	f104 0688 	add.w	r6, r4, #136	; 0x88
   18170:	7a20      	ldrb	r0, [r4, #8]
   18172:	4631      	mov	r1, r6
   18174:	f006 fc51 	bl	1ea1a <bt_addr_le_is_bonded>
   18178:	b920      	cbnz	r0, 18184 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1817a:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1817c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   18180:	f7ff ba8c 	b.w	1769c <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18184:	4631      	mov	r1, r6
   18186:	1c68      	adds	r0, r5, #1
}
   18188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1818c:	f007 baf8 	b.w	1f780 <bt_addr_le_copy>
}
   18190:	bd70      	pop	{r4, r5, r6, pc}
   18192:	bf00      	nop
   18194:	000177e1 	.word	0x000177e1

00018198 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   18198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1819a:	ab0b      	add	r3, sp, #44	; 0x2c
   1819c:	9305      	str	r3, [sp, #20]
   1819e:	9303      	str	r3, [sp, #12]
   181a0:	4b05      	ldr	r3, [pc, #20]	; (181b8 <z_log_msg_runtime_create.constprop.0+0x20>)
   181a2:	9302      	str	r3, [sp, #8]
   181a4:	2300      	movs	r3, #0
   181a6:	e9cd 3300 	strd	r3, r3, [sp]
   181aa:	2201      	movs	r2, #1
   181ac:	4618      	mov	r0, r3
   181ae:	f7f9 fe11 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   181b2:	b007      	add	sp, #28
   181b4:	f85d fb04 	ldr.w	pc, [sp], #4
   181b8:	000233f6 	.word	0x000233f6

000181bc <bt_smp_accept>:

	return 0;
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
   181bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	LOG_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   181be:	4c0b      	ldr	r4, [pc, #44]	; (181ec <bt_smp_accept+0x30>)
   181c0:	6822      	ldr	r2, [r4, #0]
   181c2:	2300      	movs	r3, #0
   181c4:	b92a      	cbnz	r2, 181d2 <bt_smp_accept+0x16>
			continue;
		}

		smp->chan.ops = &ops;
   181c6:	4b0a      	ldr	r3, [pc, #40]	; (181f0 <bt_smp_accept+0x34>)
   181c8:	6063      	str	r3, [r4, #4]

		*chan = &smp->chan;

		return 0;
   181ca:	4610      	mov	r0, r2
		*chan = &smp->chan;
   181cc:	600c      	str	r4, [r1, #0]
	}

	LOG_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   181ce:	b004      	add	sp, #16
   181d0:	bd10      	pop	{r4, pc}
	LOG_ERR("No available SMP context for conn %p", conn);
   181d2:	4a08      	ldr	r2, [pc, #32]	; (181f4 <bt_smp_accept+0x38>)
   181d4:	9003      	str	r0, [sp, #12]
   181d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
   181da:	4618      	mov	r0, r3
   181dc:	4906      	ldr	r1, [pc, #24]	; (181f8 <bt_smp_accept+0x3c>)
   181de:	9300      	str	r3, [sp, #0]
   181e0:	2201      	movs	r2, #1
   181e2:	f7ff ffd9 	bl	18198 <z_log_msg_runtime_create.constprop.0>
   181e6:	f06f 000b 	mvn.w	r0, #11
   181ea:	e7f0      	b.n	181ce <bt_smp_accept+0x12>
   181ec:	20002690 	.word	0x20002690
   181f0:	00021ab8 	.word	0x00021ab8
   181f4:	000233f6 	.word	0x000233f6
   181f8:	0002167c 	.word	0x0002167c

000181fc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   181fc:	4b02      	ldr	r3, [pc, #8]	; (18208 <net_buf_pool_get+0xc>)
   181fe:	222c      	movs	r2, #44	; 0x2c
   18200:	fb02 3000 	mla	r0, r2, r0, r3
   18204:	4770      	bx	lr
   18206:	bf00      	nop
   18208:	200008fc 	.word	0x200008fc

0001820c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1820c:	7a82      	ldrb	r2, [r0, #10]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1820e:	4b06      	ldr	r3, [pc, #24]	; (18228 <net_buf_id+0x1c>)
   18210:	212c      	movs	r1, #44	; 0x2c
   18212:	fb01 3302 	mla	r3, r1, r2, r3
   18216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18218:	7f1b      	ldrb	r3, [r3, #28]
   1821a:	331b      	adds	r3, #27
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1821c:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1821e:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   18222:	fbb0 f0f3 	udiv	r0, r0, r3
   18226:	4770      	bx	lr
   18228:	200008fc 	.word	0x200008fc

0001822c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1822c:	b538      	push	{r3, r4, r5, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1822e:	4b0a      	ldr	r3, [pc, #40]	; (18258 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18230:	7a82      	ldrb	r2, [r0, #10]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18232:	242c      	movs	r4, #44	; 0x2c
   18234:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   18238:	680c      	ldr	r4, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1823a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1823c:	685b      	ldr	r3, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1823e:	681a      	ldr	r2, [r3, #0]
   18240:	4294      	cmp	r4, r2
   18242:	bf94      	ite	ls
   18244:	600c      	strls	r4, [r1, #0]
   18246:	600a      	strhi	r2, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18248:	e9d3 5400 	ldrd	r5, r4, [r3]
   1824c:	f7ff ffde 	bl	1820c <net_buf_id>
}
   18250:	fb05 4000 	mla	r0, r5, r0, r4
   18254:	bd38      	pop	{r3, r4, r5, pc}
   18256:	bf00      	nop
   18258:	200008fc 	.word	0x200008fc

0001825c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1825c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18260:	4605      	mov	r5, r0
   18262:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18264:	4610      	mov	r0, r2
   18266:	4619      	mov	r1, r3
{
   18268:	4691      	mov	r9, r2
   1826a:	4698      	mov	r8, r3
   1826c:	4617      	mov	r7, r2
   1826e:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18270:	f008 fea8 	bl	20fc4 <sys_clock_timeout_end_calc>
   18274:	4682      	mov	sl, r0
   18276:	468b      	mov	fp, r1
	__asm__ volatile(
   18278:	f04f 0340 	mov.w	r3, #64	; 0x40
   1827c:	f3ef 8111 	mrs	r1, BASEPRI
   18280:	f383 8812 	msr	BASEPRI_MAX, r3
   18284:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   18288:	8b6b      	ldrh	r3, [r5, #26]
   1828a:	2b00      	cmp	r3, #0
   1828c:	d058      	beq.n	18340 <net_buf_alloc_len+0xe4>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1828e:	8b2a      	ldrh	r2, [r5, #24]
   18290:	429a      	cmp	r2, r3
   18292:	d93c      	bls.n	1830e <net_buf_alloc_len+0xb2>
   18294:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   18296:	2200      	movs	r2, #0
   18298:	2300      	movs	r3, #0
   1829a:	4628      	mov	r0, r5
   1829c:	f004 f876 	bl	1c38c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   182a0:	9900      	ldr	r1, [sp, #0]
   182a2:	4604      	mov	r4, r0
   182a4:	2800      	cmp	r0, #0
   182a6:	d032      	beq.n	1830e <net_buf_alloc_len+0xb2>
	__asm__ volatile(
   182a8:	f381 8811 	msr	BASEPRI, r1
   182ac:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   182b0:	9b01      	ldr	r3, [sp, #4]
   182b2:	2b00      	cmp	r3, #0
   182b4:	d055      	beq.n	18362 <net_buf_alloc_len+0x106>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   182b6:	ea58 0309 	orrs.w	r3, r8, r9
   182ba:	d00f      	beq.n	182dc <net_buf_alloc_len+0x80>
   182bc:	f1b8 3fff 	cmp.w	r8, #4294967295
   182c0:	bf08      	it	eq
   182c2:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   182c6:	d009      	beq.n	182dc <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   182c8:	f004 ff66 	bl	1d198 <sys_clock_tick_get>
   182cc:	ebba 0700 	subs.w	r7, sl, r0
   182d0:	eb6b 0601 	sbc.w	r6, fp, r1

			if (remaining <= 0) {
   182d4:	2e00      	cmp	r6, #0
   182d6:	bfbc      	itt	lt
   182d8:	2700      	movlt	r7, #0
   182da:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   182dc:	7aa3      	ldrb	r3, [r4, #10]
	return pool->alloc->cb->alloc(buf, size, timeout);
   182de:	4d26      	ldr	r5, [pc, #152]	; (18378 <net_buf_alloc_len+0x11c>)
   182e0:	f04f 082c 	mov.w	r8, #44	; 0x2c
   182e4:	fb08 5303 	mla	r3, r8, r3, r5
   182e8:	463a      	mov	r2, r7
   182ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   182ec:	681b      	ldr	r3, [r3, #0]
   182ee:	a901      	add	r1, sp, #4
   182f0:	f8d3 9000 	ldr.w	r9, [r3]
   182f4:	4620      	mov	r0, r4
   182f6:	4633      	mov	r3, r6
   182f8:	47c8      	blx	r9
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   182fa:	6160      	str	r0, [r4, #20]
		if (!buf->__buf) {
   182fc:	2800      	cmp	r0, #0
   182fe:	d131      	bne.n	18364 <net_buf_alloc_len+0x108>
	k_lifo_put(&pool->free, buf);
   18300:	7aa0      	ldrb	r0, [r4, #10]
   18302:	4621      	mov	r1, r4
   18304:	fb00 5008 	mla	r0, r0, r8, r5
   18308:	f008 fc01 	bl	20b0e <k_queue_prepend>
}
   1830c:	e024      	b.n	18358 <net_buf_alloc_len+0xfc>
		uninit_count = pool->uninit_count--;
   1830e:	8b68      	ldrh	r0, [r5, #26]
   18310:	1e43      	subs	r3, r0, #1
   18312:	836b      	strh	r3, [r5, #26]
   18314:	f381 8811 	msr	BASEPRI, r1
   18318:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1831c:	7f2b      	ldrb	r3, [r5, #28]
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1831e:	8b2a      	ldrh	r2, [r5, #24]
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   18320:	6aac      	ldr	r4, [r5, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   18322:	331b      	adds	r3, #27
   18324:	f023 0303 	bic.w	r3, r3, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   18328:	1a12      	subs	r2, r2, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1832a:	fb02 4403 	mla	r4, r2, r3, r4
	return pool - _net_buf_pool_list;
   1832e:	4b12      	ldr	r3, [pc, #72]	; (18378 <net_buf_alloc_len+0x11c>)
   18330:	4a12      	ldr	r2, [pc, #72]	; (1837c <net_buf_alloc_len+0x120>)
   18332:	1aeb      	subs	r3, r5, r3
   18334:	109b      	asrs	r3, r3, #2
   18336:	4353      	muls	r3, r2
	buf->pool_id = pool_id(pool);
   18338:	72a3      	strb	r3, [r4, #10]
	buf->user_data_size = pool->user_data_size;
   1833a:	7f2b      	ldrb	r3, [r5, #28]
   1833c:	72e3      	strb	r3, [r4, #11]
		goto success;
   1833e:	e7b7      	b.n	182b0 <net_buf_alloc_len+0x54>
   18340:	f381 8811 	msr	BASEPRI, r1
   18344:	f3bf 8f6f 	isb	sy
   18348:	464a      	mov	r2, r9
   1834a:	4643      	mov	r3, r8
   1834c:	4628      	mov	r0, r5
   1834e:	f004 f81d 	bl	1c38c <z_impl_k_queue_get>
	if (!buf) {
   18352:	4604      	mov	r4, r0
   18354:	2800      	cmp	r0, #0
   18356:	d1ab      	bne.n	182b0 <net_buf_alloc_len+0x54>
		return NULL;
   18358:	2400      	movs	r4, #0
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1835a:	4620      	mov	r0, r4
   1835c:	b003      	add	sp, #12
   1835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   18362:	6163      	str	r3, [r4, #20]
	buf->frags = NULL;
   18364:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18366:	2201      	movs	r2, #1
	buf->frags = NULL;
   18368:	6063      	str	r3, [r4, #4]
	buf->ref   = 1U;
   1836a:	8122      	strh	r2, [r4, #8]
	buf->len  = 0U;
   1836c:	8223      	strh	r3, [r4, #16]
	buf->size  = size;
   1836e:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18370:	6963      	ldr	r3, [r4, #20]
   18372:	8262      	strh	r2, [r4, #18]
   18374:	60e3      	str	r3, [r4, #12]
	return buf;
   18376:	e7f0      	b.n	1835a <net_buf_alloc_len+0xfe>
   18378:	200008fc 	.word	0x200008fc
   1837c:	ba2e8ba3 	.word	0xba2e8ba3

00018380 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18384:	4d16      	ldr	r5, [pc, #88]	; (183e0 <net_buf_unref+0x60>)
   18386:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   18388:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1838a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1838c:	b90c      	cbnz	r4, 18392 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18392:	7a23      	ldrb	r3, [r4, #8]
		struct net_buf *frags = buf->frags;
   18394:	f8d4 8004 	ldr.w	r8, [r4, #4]
		if (--buf->ref > 0) {
   18398:	3b01      	subs	r3, #1
   1839a:	b2db      	uxtb	r3, r3
   1839c:	7223      	strb	r3, [r4, #8]
   1839e:	2b00      	cmp	r3, #0
   183a0:	d1f5      	bne.n	1838e <net_buf_unref+0xe>
		if (buf->__buf) {
   183a2:	6961      	ldr	r1, [r4, #20]
   183a4:	b159      	cbz	r1, 183be <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   183a6:	7a63      	ldrb	r3, [r4, #9]
   183a8:	07db      	lsls	r3, r3, #31
   183aa:	d407      	bmi.n	183bc <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   183ac:	7aa3      	ldrb	r3, [r4, #10]
	pool->alloc->cb->unref(buf, data);
   183ae:	fb07 5303 	mla	r3, r7, r3, r5
   183b2:	4620      	mov	r0, r4
   183b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   183b6:	681b      	ldr	r3, [r3, #0]
   183b8:	689b      	ldr	r3, [r3, #8]
   183ba:	4798      	blx	r3
			buf->__buf = NULL;
   183bc:	6166      	str	r6, [r4, #20]
		pool = net_buf_pool_get(buf->pool_id);
   183be:	7aa0      	ldrb	r0, [r4, #10]
		buf->data = NULL;
   183c0:	60e6      	str	r6, [r4, #12]
		if (pool->destroy) {
   183c2:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   183c6:	6066      	str	r6, [r4, #4]
		if (pool->destroy) {
   183c8:	6a1b      	ldr	r3, [r3, #32]
   183ca:	b11b      	cbz	r3, 183d4 <net_buf_unref+0x54>
			pool->destroy(buf);
   183cc:	4620      	mov	r0, r4
   183ce:	4798      	blx	r3
{
   183d0:	4644      	mov	r4, r8
   183d2:	e7db      	b.n	1838c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   183d4:	4621      	mov	r1, r4
   183d6:	fb00 5007 	mla	r0, r0, r7, r5
   183da:	f008 fb98 	bl	20b0e <k_queue_prepend>
}
   183de:	e7f7      	b.n	183d0 <net_buf_unref+0x50>
   183e0:	200008fc 	.word	0x200008fc

000183e4 <xoshiro128_initialize>:
{
	return (x << k) | (x >> (32 - k));
}

static int xoshiro128_initialize(const struct device *dev)
{
   183e4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
   183e6:	4804      	ldr	r0, [pc, #16]	; (183f8 <xoshiro128_initialize+0x14>)
   183e8:	f008 fa15 	bl	20816 <z_device_is_ready>
	if (!device_is_ready(entropy_driver)) {
		return -ENODEV;
	}
	return 0;
   183ec:	2800      	cmp	r0, #0
}
   183ee:	bf0c      	ite	eq
   183f0:	f06f 0012 	mvneq.w	r0, #18
   183f4:	2000      	movne	r0, #0
   183f6:	bd08      	pop	{r3, pc}
   183f8:	000213bc 	.word	0x000213bc

000183fc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   183fc:	4b08      	ldr	r3, [pc, #32]	; (18420 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   183fe:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   18400:	1ac3      	subs	r3, r0, r3
{
   18402:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18404:	4907      	ldr	r1, [pc, #28]	; (18424 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   18406:	109b      	asrs	r3, r3, #2
{
   18408:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1840a:	4359      	muls	r1, r3
   1840c:	4806      	ldr	r0, [pc, #24]	; (18428 <onoff_stop+0x2c>)
   1840e:	2240      	movs	r2, #64	; 0x40
   18410:	f007 fcfb 	bl	1fe0a <stop>
	notify(mgr, res);
   18414:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   18416:	4601      	mov	r1, r0
	notify(mgr, res);
   18418:	4620      	mov	r0, r4
}
   1841a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1841e:	4718      	bx	r3
   18420:	20002730 	.word	0x20002730
   18424:	b6db6db7 	.word	0xb6db6db7
   18428:	00021374 	.word	0x00021374

0001842c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1842c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1842e:	4c0c      	ldr	r4, [pc, #48]	; (18460 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18430:	4a0c      	ldr	r2, [pc, #48]	; (18464 <onoff_start+0x38>)
   18432:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   18434:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18436:	9300      	str	r3, [sp, #0]
{
   18438:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1843a:	460b      	mov	r3, r1
   1843c:	490a      	ldr	r1, [pc, #40]	; (18468 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1843e:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18440:	4361      	muls	r1, r4
{
   18442:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   18444:	4809      	ldr	r0, [pc, #36]	; (1846c <onoff_start+0x40>)
   18446:	f007 fd0c 	bl	1fe62 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1844a:	1e01      	subs	r1, r0, #0
   1844c:	da05      	bge.n	1845a <onoff_start+0x2e>
		notify(mgr, err);
   1844e:	4630      	mov	r0, r6
   18450:	462b      	mov	r3, r5
	}
}
   18452:	b002      	add	sp, #8
   18454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   18458:	4718      	bx	r3
}
   1845a:	b002      	add	sp, #8
   1845c:	bd70      	pop	{r4, r5, r6, pc}
   1845e:	bf00      	nop
   18460:	20002730 	.word	0x20002730
   18464:	0001fecd 	.word	0x0001fecd
   18468:	b6db6db7 	.word	0xb6db6db7
   1846c:	00021374 	.word	0x00021374

00018470 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18470:	2200      	movs	r2, #0
{
   18472:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18474:	2101      	movs	r1, #1
{
   18476:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   18478:	4610      	mov	r0, r2
   1847a:	f7fa f949 	bl	12710 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1847e:	480f      	ldr	r0, [pc, #60]	; (184bc <clk_init+0x4c>)
   18480:	f002 fd9c 	bl	1afbc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   18484:	4b0e      	ldr	r3, [pc, #56]	; (184c0 <clk_init+0x50>)
   18486:	4298      	cmp	r0, r3
   18488:	d115      	bne.n	184b6 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1848a:	f008 f8b7 	bl	205fc <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1848e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   18490:	490c      	ldr	r1, [pc, #48]	; (184c4 <clk_init+0x54>)
   18492:	4630      	mov	r0, r6
   18494:	f005 fd52 	bl	1df3c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   18498:	2800      	cmp	r0, #0
   1849a:	db0b      	blt.n	184b4 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1849c:	2501      	movs	r5, #1
   1849e:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
   184a0:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   184a2:	4908      	ldr	r1, [pc, #32]	; (184c4 <clk_init+0x54>)
   184a4:	f104 001c 	add.w	r0, r4, #28
   184a8:	f005 fd48 	bl	1df3c <onoff_manager_init>
		if (err < 0) {
   184ac:	2800      	cmp	r0, #0
   184ae:	db01      	blt.n	184b4 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   184b0:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   184b2:	2000      	movs	r0, #0
}
   184b4:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   184b6:	f06f 0004 	mvn.w	r0, #4
   184ba:	e7fb      	b.n	184b4 <clk_init+0x44>
   184bc:	000184fd 	.word	0x000184fd
   184c0:	0bad0000 	.word	0x0bad0000
   184c4:	00021aec 	.word	0x00021aec

000184c8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   184c8:	b570      	push	{r4, r5, r6, lr}
   184ca:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   184cc:	230c      	movs	r3, #12
   184ce:	4809      	ldr	r0, [pc, #36]	; (184f4 <clkstarted_handle.constprop.0+0x2c>)
   184d0:	434b      	muls	r3, r1
   184d2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   184d4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   184d8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   184da:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   184dc:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   184de:	4418      	add	r0, r3
   184e0:	f007 fc80 	bl	1fde4 <set_on_state>
	if (callback) {
   184e4:	b12d      	cbz	r5, 184f2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   184e6:	4632      	mov	r2, r6
   184e8:	462b      	mov	r3, r5
   184ea:	4803      	ldr	r0, [pc, #12]	; (184f8 <clkstarted_handle.constprop.0+0x30>)
}
   184ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   184f0:	4718      	bx	r3
}
   184f2:	bd70      	pop	{r4, r5, r6, pc}
   184f4:	20002730 	.word	0x20002730
   184f8:	00021374 	.word	0x00021374

000184fc <clock_event_handler>:
	switch (event) {
   184fc:	b110      	cbz	r0, 18504 <clock_event_handler+0x8>
   184fe:	2801      	cmp	r0, #1
   18500:	d004      	beq.n	1850c <clock_event_handler+0x10>
   18502:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   18504:	4b03      	ldr	r3, [pc, #12]	; (18514 <clock_event_handler+0x18>)
   18506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18508:	075b      	lsls	r3, r3, #29
   1850a:	d101      	bne.n	18510 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1850c:	f7ff bfdc 	b.w	184c8 <clkstarted_handle.constprop.0>
}
   18510:	4770      	bx	lr
   18512:	bf00      	nop
   18514:	20002730 	.word	0x20002730

00018518 <generic_hfclk_start>:
{
   18518:	b508      	push	{r3, lr}
	__asm__ volatile(
   1851a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1851e:	f3ef 8111 	mrs	r1, BASEPRI
   18522:	f383 8812 	msr	BASEPRI_MAX, r3
   18526:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1852a:	4a12      	ldr	r2, [pc, #72]	; (18574 <generic_hfclk_start+0x5c>)
   1852c:	6813      	ldr	r3, [r2, #0]
   1852e:	f043 0002 	orr.w	r0, r3, #2
   18532:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   18534:	07da      	lsls	r2, r3, #31
   18536:	d408      	bmi.n	1854a <generic_hfclk_start+0x32>
	__asm__ volatile(
   18538:	f381 8811 	msr	BASEPRI, r1
   1853c:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   18540:	2001      	movs	r0, #1
}
   18542:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   18546:	f002 bd29 	b.w	1af9c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1854a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1854e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   18552:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   18556:	07d3      	lsls	r3, r2, #31
   18558:	d5ee      	bpl.n	18538 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
   1855a:	4807      	ldr	r0, [pc, #28]	; (18578 <generic_hfclk_start+0x60>)
   1855c:	f007 fc42 	bl	1fde4 <set_on_state>
   18560:	f381 8811 	msr	BASEPRI, r1
   18564:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
   18568:	2000      	movs	r0, #0
}
   1856a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1856e:	f7ff bfab 	b.w	184c8 <clkstarted_handle.constprop.0>
   18572:	bf00      	nop
   18574:	20002780 	.word	0x20002780
   18578:	20002770 	.word	0x20002770

0001857c <api_blocking_start>:
{
   1857c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1857e:	2200      	movs	r2, #0
   18580:	2301      	movs	r3, #1
   18582:	e9cd 2302 	strd	r2, r3, [sp, #8]
   18586:	ab04      	add	r3, sp, #16
   18588:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1858c:	4a09      	ldr	r2, [pc, #36]	; (185b4 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1858e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18592:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   18594:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   18598:	f007 fc91 	bl	1febe <api_start>
	if (err < 0) {
   1859c:	2800      	cmp	r0, #0
   1859e:	db05      	blt.n	185ac <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   185a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   185a4:	2300      	movs	r3, #0
   185a6:	4668      	mov	r0, sp
   185a8:	f003 ff4a 	bl	1c440 <z_impl_k_sem_take>
}
   185ac:	b007      	add	sp, #28
   185ae:	f85d fb04 	ldr.w	pc, [sp], #4
   185b2:	bf00      	nop
   185b4:	0001feeb 	.word	0x0001feeb

000185b8 <generic_hfclk_stop>:
{
   185b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   185ba:	f04f 0340 	mov.w	r3, #64	; 0x40
   185be:	f3ef 8411 	mrs	r4, BASEPRI
   185c2:	f383 8812 	msr	BASEPRI_MAX, r3
   185c6:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
   185ca:	4a07      	ldr	r2, [pc, #28]	; (185e8 <generic_hfclk_stop+0x30>)
   185cc:	6813      	ldr	r3, [r2, #0]
   185ce:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
   185d2:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
   185d4:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
   185d6:	d402      	bmi.n	185de <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   185d8:	2001      	movs	r0, #1
   185da:	f008 f80a 	bl	205f2 <nrfx_clock_stop>
	__asm__ volatile(
   185de:	f384 8811 	msr	BASEPRI, r4
   185e2:	f3bf 8f6f 	isb	sy
}
   185e6:	bd10      	pop	{r4, pc}
   185e8:	20002780 	.word	0x20002780

000185ec <z_nrf_clock_control_lf_on>:
{
   185ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   185f0:	4938      	ldr	r1, [pc, #224]	; (186d4 <z_nrf_clock_control_lf_on+0xe8>)
   185f2:	f3bf 8f5b 	dmb	ish
   185f6:	4607      	mov	r7, r0
   185f8:	2201      	movs	r2, #1
   185fa:	e851 3f00 	ldrex	r3, [r1]
   185fe:	e841 2000 	strex	r0, r2, [r1]
   18602:	2800      	cmp	r0, #0
   18604:	d1f9      	bne.n	185fa <z_nrf_clock_control_lf_on+0xe>
   18606:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   1860a:	b933      	cbnz	r3, 1861a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   1860c:	4932      	ldr	r1, [pc, #200]	; (186d8 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
   1860e:	4833      	ldr	r0, [pc, #204]	; (186dc <z_nrf_clock_control_lf_on+0xf0>)
   18610:	604b      	str	r3, [r1, #4]
   18612:	60cb      	str	r3, [r1, #12]
   18614:	608a      	str	r2, [r1, #8]
   18616:	f005 fca4 	bl	1df62 <onoff_request>
	switch (start_mode) {
   1861a:	1e7b      	subs	r3, r7, #1
   1861c:	2b01      	cmp	r3, #1
   1861e:	d82b      	bhi.n	18678 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   18620:	2f01      	cmp	r7, #1
   18622:	d107      	bne.n	18634 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   18624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18628:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   1862c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   18630:	2b01      	cmp	r3, #1
   18632:	d021      	beq.n	18678 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   18634:	f008 f9bf 	bl	209b6 <k_is_in_isr>
   18638:	4605      	mov	r5, r0
   1863a:	b9f8      	cbnz	r0, 1867c <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   1863c:	4b28      	ldr	r3, [pc, #160]	; (186e0 <z_nrf_clock_control_lf_on+0xf4>)
   1863e:	781b      	ldrb	r3, [r3, #0]
   18640:	b1e3      	cbz	r3, 1867c <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
   18642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18646:	2202      	movs	r2, #2
   18648:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   1864c:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1864e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 186e4 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18652:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   18656:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1865a:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
   1865e:	03d2      	lsls	r2, r2, #15
   18660:	d516      	bpl.n	18690 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18662:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   18666:	2b01      	cmp	r3, #1
   18668:	d001      	beq.n	1866e <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   1866a:	2f01      	cmp	r7, #1
   1866c:	d110      	bne.n	18690 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
   1866e:	b35d      	cbz	r5, 186c8 <z_nrf_clock_control_lf_on+0xdc>
   18670:	f386 8811 	msr	BASEPRI, r6
   18674:	f3bf 8f6f 	isb	sy
}
   18678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1867c:	f04f 0340 	mov.w	r3, #64	; 0x40
   18680:	f3ef 8611 	mrs	r6, BASEPRI
   18684:	f383 8812 	msr	BASEPRI_MAX, r3
   18688:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1868c:	2501      	movs	r5, #1
   1868e:	e7de      	b.n	1864e <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   18690:	b1ad      	cbz	r5, 186be <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   18692:	4630      	mov	r0, r6
   18694:	f7f9 ffb0 	bl	125f8 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   18698:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   1869c:	2b00      	cmp	r3, #0
   1869e:	d1da      	bne.n	18656 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   186a0:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   186a4:	2a00      	cmp	r2, #0
   186a6:	d0d6      	beq.n	18656 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   186a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   186ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   186b0:	2301      	movs	r3, #1
   186b2:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
   186b6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   186ba:	60a3      	str	r3, [r4, #8]
}
   186bc:	e7cb      	b.n	18656 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
   186be:	2100      	movs	r1, #0
   186c0:	2021      	movs	r0, #33	; 0x21
   186c2:	f004 fb7d 	bl	1cdc0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   186c6:	e7e7      	b.n	18698 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
   186c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   186cc:	2202      	movs	r2, #2
   186ce:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   186d2:	e7d1      	b.n	18678 <z_nrf_clock_control_lf_on+0x8c>
   186d4:	2000272c 	.word	0x2000272c
   186d8:	2000271c 	.word	0x2000271c
   186dc:	2000274c 	.word	0x2000274c
   186e0:	20002f3a 	.word	0x20002f3a
   186e4:	e000e100 	.word	0xe000e100

000186e8 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   186e8:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
   186ea:	4c04      	ldr	r4, [pc, #16]	; (186fc <rtt_console_init+0x14>)
   186ec:	4620      	mov	r0, r4
   186ee:	f7f8 fd91 	bl	11214 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
   186f2:	4620      	mov	r0, r4
   186f4:	f7fa fd52 	bl	1319c <__stdout_hook_install>

	return 0;
}
   186f8:	2000      	movs	r0, #0
   186fa:	bd10      	pop	{r4, pc}
   186fc:	00018701 	.word	0x00018701

00018700 <rtt_console_out>:
{
   18700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18702:	4e13      	ldr	r6, [pc, #76]	; (18750 <rtt_console_out+0x50>)
	char c = (char)character;
   18704:	f88d 0007 	strb.w	r0, [sp, #7]
{
   18708:	4604      	mov	r4, r0
	char c = (char)character;
   1870a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
   1870c:	f003 fafc 	bl	1bd08 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   18710:	2201      	movs	r2, #1
   18712:	f10d 0107 	add.w	r1, sp, #7
   18716:	2000      	movs	r0, #0
   18718:	f003 fac0 	bl	1bc9c <SEGGER_RTT_WriteNoLock>
   1871c:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
   1871e:	f003 fafd 	bl	1bd1c <zephyr_rtt_mutex_unlock>
		if (cnt) {
   18722:	b127      	cbz	r7, 1872e <rtt_console_out+0x2e>
			host_present = true;
   18724:	2301      	movs	r3, #1
   18726:	7033      	strb	r3, [r6, #0]
}
   18728:	4620      	mov	r0, r4
   1872a:	b003      	add	sp, #12
   1872c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
   1872e:	7833      	ldrb	r3, [r6, #0]
   18730:	2b00      	cmp	r3, #0
   18732:	d0f9      	beq.n	18728 <rtt_console_out+0x28>
			if (max_cnt) {
   18734:	3d01      	subs	r5, #1
   18736:	d008      	beq.n	1874a <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   18738:	f008 f93d 	bl	209b6 <k_is_in_isr>
   1873c:	2800      	cmp	r0, #0
   1873e:	d1e5      	bne.n	1870c <rtt_console_out+0xc>
   18740:	2100      	movs	r1, #0
   18742:	2042      	movs	r0, #66	; 0x42
   18744:	f004 fb3c 	bl	1cdc0 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
   18748:	e7e0      	b.n	1870c <rtt_console_out+0xc>
				host_present = false;
   1874a:	7035      	strb	r5, [r6, #0]
   1874c:	e7ec      	b.n	18728 <rtt_console_out+0x28>
   1874e:	bf00      	nop
   18750:	20002a3c 	.word	0x20002a3c

00018754 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   18754:	b530      	push	{r4, r5, lr}
	return port->config;
   18756:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18758:	7b05      	ldrb	r5, [r0, #12]
   1875a:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
   1875e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
   18762:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18764:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   18768:	d105      	bne.n	18776 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   1876a:	4620      	mov	r0, r4
   1876c:	f002 ff62 	bl	1b634 <nrfx_gpiote_trigger_disable>

		return 0;
   18770:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
   18772:	b005      	add	sp, #20
   18774:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
   18776:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
   18778:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
   1877c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   18780:	d114      	bne.n	187ac <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   18782:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
   18786:	bf0c      	ite	eq
   18788:	2304      	moveq	r3, #4
   1878a:	2305      	movne	r3, #5
   1878c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   18790:	2300      	movs	r3, #0
   18792:	4619      	mov	r1, r3
   18794:	aa02      	add	r2, sp, #8
   18796:	4620      	mov	r0, r4
   18798:	f002 fd8a 	bl	1b2b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   1879c:	4b1f      	ldr	r3, [pc, #124]	; (1881c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1879e:	4298      	cmp	r0, r3
   187a0:	d139      	bne.n	18816 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   187a2:	2101      	movs	r1, #1
   187a4:	4620      	mov	r0, r4
   187a6:	f002 fefd 	bl	1b5a4 <nrfx_gpiote_trigger_enable>
	return 0;
   187aa:	e7e1      	b.n	18770 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   187ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
   187b0:	d026      	beq.n	18800 <gpio_nrfx_pin_interrupt_configure+0xac>
   187b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
   187b6:	bf14      	ite	ne
   187b8:	2301      	movne	r3, #1
   187ba:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
   187bc:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   187c0:	6883      	ldr	r3, [r0, #8]
   187c2:	40cb      	lsrs	r3, r1
   187c4:	07d9      	lsls	r1, r3, #31
   187c6:	d4e3      	bmi.n	18790 <gpio_nrfx_pin_interrupt_configure+0x3c>
   187c8:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
   187cc:	d1e0      	bne.n	18790 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   187ce:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
   187d0:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   187d2:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
   187d6:	4a12      	ldr	r2, [pc, #72]	; (18820 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   187d8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   187dc:	bf18      	it	ne
   187de:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   187e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   187e6:	07db      	lsls	r3, r3, #31
   187e8:	d4d2      	bmi.n	18790 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   187ea:	f10d 0507 	add.w	r5, sp, #7
   187ee:	4629      	mov	r1, r5
   187f0:	4620      	mov	r0, r4
   187f2:	f002 fe83 	bl	1b4fc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   187f6:	4b0b      	ldr	r3, [pc, #44]	; (18824 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   187f8:	4298      	cmp	r0, r3
   187fa:	d003      	beq.n	18804 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
   187fc:	9503      	str	r5, [sp, #12]
   187fe:	e7c7      	b.n	18790 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   18800:	2303      	movs	r3, #3
   18802:	e7db      	b.n	187bc <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
   18804:	4628      	mov	r0, r5
   18806:	f002 fec7 	bl	1b598 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   1880a:	4b04      	ldr	r3, [pc, #16]	; (1881c <gpio_nrfx_pin_interrupt_configure+0xc8>)
   1880c:	4298      	cmp	r0, r3
   1880e:	d0f5      	beq.n	187fc <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
   18810:	f06f 000b 	mvn.w	r0, #11
   18814:	e7ad      	b.n	18772 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
   18816:	f06f 0015 	mvn.w	r0, #21
   1881a:	e7aa      	b.n	18772 <gpio_nrfx_pin_interrupt_configure+0x1e>
   1881c:	0bad0000 	.word	0x0bad0000
   18820:	50000300 	.word	0x50000300
   18824:	0bad0004 	.word	0x0bad0004

00018828 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18828:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   1882a:	f002 fea5 	bl	1b578 <nrfx_gpiote_is_init>
   1882e:	4604      	mov	r4, r0
   18830:	b968      	cbnz	r0, 1884e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   18832:	f002 fe79 	bl	1b528 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   18836:	4b08      	ldr	r3, [pc, #32]	; (18858 <gpio_nrfx_init+0x30>)
   18838:	4298      	cmp	r0, r3
   1883a:	d10a      	bne.n	18852 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   1883c:	4807      	ldr	r0, [pc, #28]	; (1885c <gpio_nrfx_init+0x34>)
   1883e:	4621      	mov	r1, r4
   18840:	f002 fe56 	bl	1b4f0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18844:	4622      	mov	r2, r4
   18846:	2105      	movs	r1, #5
   18848:	2006      	movs	r0, #6
   1884a:	f7f9 ff61 	bl	12710 <z_arm_irq_priority_set>
		return 0;
   1884e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   18850:	bd10      	pop	{r4, pc}
		return -EIO;
   18852:	f06f 0004 	mvn.w	r0, #4
   18856:	e7fb      	b.n	18850 <gpio_nrfx_init+0x28>
   18858:	0bad0000 	.word	0x0bad0000
   1885c:	00018861 	.word	0x00018861

00018860 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18860:	0942      	lsrs	r2, r0, #5
{
   18862:	b570      	push	{r4, r5, r6, lr}
   18864:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   18866:	d002      	beq.n	1886e <nrfx_gpio_handler+0xe>
   18868:	2a01      	cmp	r2, #1
   1886a:	d017      	beq.n	1889c <nrfx_gpio_handler+0x3c>
}
   1886c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1886e:	4e0d      	ldr	r6, [pc, #52]	; (188a4 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
   18870:	6932      	ldr	r2, [r6, #16]
   18872:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18874:	2900      	cmp	r1, #0
   18876:	d0f9      	beq.n	1886c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   18878:	f003 031f 	and.w	r3, r3, #31
   1887c:	2501      	movs	r5, #1
   1887e:	680c      	ldr	r4, [r1, #0]
   18880:	409d      	lsls	r5, r3
   18882:	2900      	cmp	r1, #0
   18884:	d0f2      	beq.n	1886c <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
   18886:	688a      	ldr	r2, [r1, #8]
   18888:	402a      	ands	r2, r5
   1888a:	d002      	beq.n	18892 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1888c:	684b      	ldr	r3, [r1, #4]
   1888e:	4630      	mov	r0, r6
   18890:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18892:	b12c      	cbz	r4, 188a0 <nrfx_gpio_handler+0x40>
   18894:	6823      	ldr	r3, [r4, #0]
   18896:	4621      	mov	r1, r4
   18898:	461c      	mov	r4, r3
   1889a:	e7f2      	b.n	18882 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   1889c:	4e02      	ldr	r6, [pc, #8]	; (188a8 <nrfx_gpio_handler+0x48>)
   1889e:	e7e7      	b.n	18870 <nrfx_gpio_handler+0x10>
   188a0:	4623      	mov	r3, r4
   188a2:	e7f8      	b.n	18896 <nrfx_gpio_handler+0x36>
   188a4:	000213a4 	.word	0x000213a4
   188a8:	0002138c 	.word	0x0002138c

000188ac <gpio_nrfx_pin_configure>:
{
   188ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
   188b0:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   188b2:	7b3b      	ldrb	r3, [r7, #12]
   188b4:	f001 051f 	and.w	r5, r1, #31
   188b8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
   188bc:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   188be:	4628      	mov	r0, r5
   188c0:	f10d 0103 	add.w	r1, sp, #3
{
   188c4:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   188c6:	f002 fe19 	bl	1b4fc <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   188ca:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
   188ce:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
   188d0:	d10b      	bne.n	188ea <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
   188d2:	4628      	mov	r0, r5
   188d4:	f002 fed6 	bl	1b684 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
   188d8:	4b3d      	ldr	r3, [pc, #244]	; (189d0 <gpio_nrfx_pin_configure+0x124>)
   188da:	4598      	cmp	r8, r3
   188dc:	d103      	bne.n	188e6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
   188de:	f89d 0003 	ldrb.w	r0, [sp, #3]
   188e2:	f002 fe53 	bl	1b58c <nrfx_gpiote_channel_free>
		return 0;
   188e6:	2000      	movs	r0, #0
   188e8:	e00c      	b.n	18904 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
   188ea:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   188ec:	4619      	mov	r1, r3
   188ee:	aa02      	add	r2, sp, #8
   188f0:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
   188f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   188f6:	f002 fcdb 	bl	1b2b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   188fa:	4b35      	ldr	r3, [pc, #212]	; (189d0 <gpio_nrfx_pin_configure+0x124>)
   188fc:	4298      	cmp	r0, r3
   188fe:	d004      	beq.n	1890a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
   18900:	f06f 0015 	mvn.w	r0, #21
}
   18904:	b004      	add	sp, #16
   18906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
   1890a:	4580      	cmp	r8, r0
   1890c:	d103      	bne.n	18916 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
   1890e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   18912:	f002 fe3b 	bl	1b58c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   18916:	03a3      	lsls	r3, r4, #14
   18918:	d54b      	bpl.n	189b2 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1891a:	f240 3306 	movw	r3, #774	; 0x306
   1891e:	4023      	ands	r3, r4
   18920:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
   18924:	d019      	beq.n	1895a <gpio_nrfx_pin_configure+0xae>
   18926:	d80c      	bhi.n	18942 <gpio_nrfx_pin_configure+0x96>
   18928:	2b06      	cmp	r3, #6
   1892a:	d017      	beq.n	1895c <gpio_nrfx_pin_configure+0xb0>
   1892c:	d804      	bhi.n	18938 <gpio_nrfx_pin_configure+0x8c>
   1892e:	b1ab      	cbz	r3, 1895c <gpio_nrfx_pin_configure+0xb0>
   18930:	2b02      	cmp	r3, #2
   18932:	d1e5      	bne.n	18900 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
   18934:	2304      	movs	r3, #4
   18936:	e011      	b.n	1895c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   1893c:	d1e0      	bne.n	18900 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
   1893e:	2301      	movs	r3, #1
   18940:	e00c      	b.n	1895c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   18942:	f240 2202 	movw	r2, #514	; 0x202
   18946:	4293      	cmp	r3, r2
   18948:	d027      	beq.n	1899a <gpio_nrfx_pin_configure+0xee>
   1894a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
   1894e:	d026      	beq.n	1899e <gpio_nrfx_pin_configure+0xf2>
   18950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   18954:	d1d4      	bne.n	18900 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
   18956:	2302      	movs	r3, #2
   18958:	e000      	b.n	1895c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
   1895a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
   1895c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   18960:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
   18964:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
   18968:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   1896a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
   1896e:	bf54      	ite	pl
   18970:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   18974:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   18976:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
   18978:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   1897c:	d511      	bpl.n	189a2 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   1897e:	687a      	ldr	r2, [r7, #4]
   18980:	2301      	movs	r3, #1
   18982:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
   18984:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   18988:	2200      	movs	r2, #0
   1898a:	a901      	add	r1, sp, #4
   1898c:	4628      	mov	r0, r5
   1898e:	f002 fd3d 	bl	1b40c <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   18992:	4b0f      	ldr	r3, [pc, #60]	; (189d0 <gpio_nrfx_pin_configure+0x124>)
   18994:	4298      	cmp	r0, r3
   18996:	d0a6      	beq.n	188e6 <gpio_nrfx_pin_configure+0x3a>
   18998:	e7b2      	b.n	18900 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
   1899a:	2305      	movs	r3, #5
   1899c:	e7de      	b.n	1895c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
   1899e:	2303      	movs	r3, #3
   189a0:	e7dc      	b.n	1895c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   189a2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   189a4:	bf41      	itttt	mi
   189a6:	2301      	movmi	r3, #1
   189a8:	687a      	ldrmi	r2, [r7, #4]
   189aa:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
   189ac:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
   189b0:	e7ea      	b.n	18988 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
   189b2:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   189b4:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
   189b8:	bf54      	ite	pl
   189ba:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   189be:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   189c0:	461a      	mov	r2, r3
   189c2:	a901      	add	r1, sp, #4
   189c4:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   189c6:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   189ca:	f002 fc71 	bl	1b2b0 <nrfx_gpiote_input_configure>
   189ce:	e7e0      	b.n	18992 <gpio_nrfx_pin_configure+0xe6>
   189d0:	0bad0000 	.word	0x0bad0000

000189d4 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
   189d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
   189d8:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   189da:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
   189dc:	6a26      	ldr	r6, [r4, #32]
{
   189de:	b088      	sub	sp, #32
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
   189e0:	aa07      	add	r2, sp, #28
   189e2:	2100      	movs	r1, #0
   189e4:	4630      	mov	r0, r6
   189e6:	f007 fd35 	bl	20454 <pinctrl_lookup_state>
	if (ret < 0) {
   189ea:	2800      	cmp	r0, #0
   189ec:	db2a      	blt.n	18a44 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
   189ee:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
   189f0:	6832      	ldr	r2, [r6, #0]
   189f2:	7919      	ldrb	r1, [r3, #4]
   189f4:	6818      	ldr	r0, [r3, #0]
   189f6:	f001 fb03 	bl	1a000 <pinctrl_configure_pins>
	if (err < 0) {
   189fa:	2800      	cmp	r0, #0
   189fc:	db22      	blt.n	18a44 <spi_nrfx_init+0x70>
		return err;
	}
#endif

	dev_config->irq_connect();
   189fe:	69e3      	ldr	r3, [r4, #28]
   18a00:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   18a02:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18a04:	2601      	movs	r6, #1
   18a06:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
   18a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   18a0e:	429c      	cmp	r4, r3
   18a10:	d304      	bcc.n	18a1c <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
   18a12:	4628      	mov	r0, r5
   18a14:	f007 fb1f 	bl	20056 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
   18a18:	2000      	movs	r0, #0

	return 0;
   18a1a:	e013      	b.n	18a44 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
   18a1c:	6820      	ldr	r0, [r4, #0]
   18a1e:	f007 fefa 	bl	20816 <z_device_is_ready>
   18a22:	4603      	mov	r3, r0
   18a24:	b988      	cbnz	r0, 18a4a <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
   18a26:	7922      	ldrb	r2, [r4, #4]
   18a28:	9204      	str	r2, [sp, #16]
   18a2a:	6822      	ldr	r2, [r4, #0]
   18a2c:	4918      	ldr	r1, [pc, #96]	; (18a90 <spi_nrfx_init+0xbc>)
   18a2e:	6812      	ldr	r2, [r2, #0]
   18a30:	9203      	str	r2, [sp, #12]
   18a32:	4a18      	ldr	r2, [pc, #96]	; (18a94 <spi_nrfx_init+0xc0>)
   18a34:	9000      	str	r0, [sp, #0]
   18a36:	e9cd 0201 	strd	r0, r2, [sp, #4]
   18a3a:	2201      	movs	r2, #1
   18a3c:	f007 fac5 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   18a40:	f06f 0012 	mvn.w	r0, #18
}
   18a44:	b008      	add	sp, #32
   18a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
   18a4a:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
   18a4c:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
   18a4e:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
   18a50:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   18a54:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18a58:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   18a5c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
   18a5e:	bf54      	ite	pl
   18a60:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   18a64:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   18a68:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18a6c:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18a70:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18a72:	bf4c      	ite	mi
   18a74:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18a78:	ea27 070e 	bicpl.w	r7, r7, lr
   18a7c:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
   18a80:	f8d8 3000 	ldr.w	r3, [r8]
   18a84:	4798      	blx	r3
		if (ret < 0) {
   18a86:	2800      	cmp	r0, #0
   18a88:	dbdc      	blt.n	18a44 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
   18a8a:	3408      	adds	r4, #8
   18a8c:	e7bb      	b.n	18a06 <spi_nrfx_init+0x32>
   18a8e:	bf00      	nop
   18a90:	000216ec 	.word	0x000216ec
   18a94:	0002346f 	.word	0x0002346f

00018a98 <transfer_next_chunk>:
{
   18a98:	b530      	push	{r4, r5, lr}
   18a9a:	4603      	mov	r3, r0
   18a9c:	b085      	sub	sp, #20
	struct spi_nrfx_data *dev_data = dev->data;
   18a9e:	691d      	ldr	r5, [r3, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   18aa0:	6840      	ldr	r0, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   18aa2:	6daa      	ldr	r2, [r5, #88]	; 0x58
		return ctx->rx_len;
   18aa4:	6e2b      	ldr	r3, [r5, #96]	; 0x60
	if (!ctx->tx_len) {
   18aa6:	bb2a      	cbnz	r2, 18af4 <transfer_next_chunk+0x5c>
	if (chunk_len > 0) {
   18aa8:	b38b      	cbz	r3, 18b0e <transfer_next_chunk+0x76>
		xfer.p_tx_buffer = ctx->tx_buf;
   18aaa:	6d69      	ldr	r1, [r5, #84]	; 0x54
		dev_data->chunk_len = chunk_len;
   18aac:	66ab      	str	r3, [r5, #104]	; 0x68
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18aae:	4614      	mov	r4, r2
		xfer.p_tx_buffer = ctx->tx_buf;
   18ab0:	461a      	mov	r2, r3
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18ab2:	e9cd 1400 	strd	r1, r4, [sp]
		xfer.p_rx_buffer = ctx->rx_buf;
   18ab6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   18ab8:	9102      	str	r1, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   18aba:	b331      	cbz	r1, 18b0a <transfer_next_chunk+0x72>
   18abc:	2b00      	cmp	r3, #0
   18abe:	bf18      	it	ne
   18ac0:	4613      	movne	r3, r2
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   18ac2:	2200      	movs	r2, #0
   18ac4:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18ac6:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
   18ac8:	f002 ffd2 	bl	1ba70 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   18acc:	4b11      	ldr	r3, [pc, #68]	; (18b14 <transfer_next_chunk+0x7c>)
   18ace:	4298      	cmp	r0, r3
   18ad0:	d00e      	beq.n	18af0 <transfer_next_chunk+0x58>
		error = -EIO;
   18ad2:	f06f 0404 	mvn.w	r4, #4
	_spi_context_cs_control(ctx, on, false);
   18ad6:	2200      	movs	r2, #0
   18ad8:	4611      	mov	r1, r2
   18ada:	4628      	mov	r0, r5
   18adc:	f007 fa99 	bl	20012 <_spi_context_cs_control>
	ctx->sync_status = status;
   18ae0:	642c      	str	r4, [r5, #64]	; 0x40
	z_impl_k_sem_give(sem);
   18ae2:	f105 0028 	add.w	r0, r5, #40	; 0x28
   18ae6:	f003 fc85 	bl	1c3f4 <z_impl_k_sem_give>
	dev_data->busy = false;
   18aea:	2300      	movs	r3, #0
   18aec:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
}
   18af0:	b005      	add	sp, #20
   18af2:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   18af4:	6d69      	ldr	r1, [r5, #84]	; 0x54
   18af6:	b113      	cbz	r3, 18afe <transfer_next_chunk+0x66>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   18af8:	429a      	cmp	r2, r3
   18afa:	bf28      	it	cs
   18afc:	461a      	movcs	r2, r3
		return ctx->tx_len;
   18afe:	2900      	cmp	r1, #0
		dev_data->chunk_len = chunk_len;
   18b00:	66aa      	str	r2, [r5, #104]	; 0x68
   18b02:	bf14      	ite	ne
   18b04:	4614      	movne	r4, r2
   18b06:	2400      	moveq	r4, #0
   18b08:	e7d3      	b.n	18ab2 <transfer_next_chunk+0x1a>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18b0a:	460b      	mov	r3, r1
   18b0c:	e7d9      	b.n	18ac2 <transfer_next_chunk+0x2a>
	int error = 0;
   18b0e:	461c      	mov	r4, r3
   18b10:	e7e1      	b.n	18ad6 <transfer_next_chunk+0x3e>
   18b12:	bf00      	nop
   18b14:	0bad0000 	.word	0x0bad0000

00018b18 <event_handler>:
{
   18b18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18b1a:	7803      	ldrb	r3, [r0, #0]
{
   18b1c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18b1e:	2b00      	cmp	r3, #0
   18b20:	d154      	bne.n	18bcc <event_handler+0xb4>
	if (!ctx->tx_len) {
   18b22:	6da2      	ldr	r2, [r4, #88]	; 0x58
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   18b24:	6e89      	ldr	r1, [r1, #104]	; 0x68
   18b26:	b152      	cbz	r2, 18b3e <event_handler+0x26>
	if (len > ctx->tx_len) {
   18b28:	4291      	cmp	r1, r2
   18b2a:	d91d      	bls.n	18b68 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
   18b2c:	4a28      	ldr	r2, [pc, #160]	; (18bd0 <event_handler+0xb8>)
   18b2e:	4929      	ldr	r1, [pc, #164]	; (18bd4 <event_handler+0xbc>)
   18b30:	9300      	str	r3, [sp, #0]
   18b32:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18b36:	4618      	mov	r0, r3
   18b38:	2201      	movs	r2, #1
   18b3a:	f007 fa46 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
   18b3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   18b40:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   18b42:	b15b      	cbz	r3, 18b5c <event_handler+0x44>
	if (len > ctx->rx_len) {
   18b44:	429a      	cmp	r2, r3
   18b46:	d928      	bls.n	18b9a <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
   18b48:	4b21      	ldr	r3, [pc, #132]	; (18bd0 <event_handler+0xb8>)
   18b4a:	9302      	str	r3, [sp, #8]
   18b4c:	2300      	movs	r3, #0
   18b4e:	e9cd 3300 	strd	r3, r3, [sp]
   18b52:	4920      	ldr	r1, [pc, #128]	; (18bd4 <event_handler+0xbc>)
   18b54:	2201      	movs	r2, #1
   18b56:	4618      	mov	r0, r3
   18b58:	f007 fa37 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
   18b5c:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
   18b5e:	b004      	add	sp, #16
   18b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   18b64:	f7ff bf98 	b.w	18a98 <transfer_next_chunk>
	ctx->tx_len -= len;
   18b68:	1a52      	subs	r2, r2, r1
   18b6a:	65a2      	str	r2, [r4, #88]	; 0x58
	if (!ctx->tx_len) {
   18b6c:	b97a      	cbnz	r2, 18b8e <event_handler+0x76>
		++ctx->current_tx;
   18b6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18b70:	3308      	adds	r3, #8
   18b72:	6463      	str	r3, [r4, #68]	; 0x44
		--ctx->tx_count;
   18b74:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18b76:	3b01      	subs	r3, #1
   18b78:	64a3      	str	r3, [r4, #72]	; 0x48
			spi_context_get_next_buf(&ctx->current_tx,
   18b7a:	f104 0258 	add.w	r2, r4, #88	; 0x58
   18b7e:	f104 0148 	add.w	r1, r4, #72	; 0x48
   18b82:	f104 0044 	add.w	r0, r4, #68	; 0x44
   18b86:	f007 fa0d 	bl	1ffa4 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
   18b8a:	6560      	str	r0, [r4, #84]	; 0x54
   18b8c:	e7d7      	b.n	18b3e <event_handler+0x26>
	} else if (ctx->tx_buf) {
   18b8e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18b90:	2b00      	cmp	r3, #0
   18b92:	d0d4      	beq.n	18b3e <event_handler+0x26>
		ctx->tx_buf += dfs * len;
   18b94:	440b      	add	r3, r1
   18b96:	6563      	str	r3, [r4, #84]	; 0x54
   18b98:	e7d1      	b.n	18b3e <event_handler+0x26>
	ctx->rx_len -= len;
   18b9a:	1a9b      	subs	r3, r3, r2
   18b9c:	6623      	str	r3, [r4, #96]	; 0x60
	if (!ctx->rx_len) {
   18b9e:	b97b      	cbnz	r3, 18bc0 <event_handler+0xa8>
		++ctx->current_rx;
   18ba0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   18ba2:	3308      	adds	r3, #8
   18ba4:	64e3      	str	r3, [r4, #76]	; 0x4c
		--ctx->rx_count;
   18ba6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18ba8:	3b01      	subs	r3, #1
   18baa:	6523      	str	r3, [r4, #80]	; 0x50
			spi_context_get_next_buf(&ctx->current_rx,
   18bac:	f104 0260 	add.w	r2, r4, #96	; 0x60
   18bb0:	f104 0150 	add.w	r1, r4, #80	; 0x50
   18bb4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   18bb8:	f007 f9f4 	bl	1ffa4 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
   18bbc:	65e0      	str	r0, [r4, #92]	; 0x5c
   18bbe:	e7cd      	b.n	18b5c <event_handler+0x44>
	} else if (ctx->rx_buf) {
   18bc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   18bc2:	2b00      	cmp	r3, #0
   18bc4:	d0ca      	beq.n	18b5c <event_handler+0x44>
		ctx->rx_buf += dfs * len;
   18bc6:	4413      	add	r3, r2
   18bc8:	65e3      	str	r3, [r4, #92]	; 0x5c
   18bca:	e7c7      	b.n	18b5c <event_handler+0x44>
}
   18bcc:	b004      	add	sp, #16
   18bce:	bd10      	pop	{r4, pc}
   18bd0:	00023493 	.word	0x00023493
   18bd4:	000216ec 	.word	0x000216ec

00018bd8 <spi_nrfx_transceive>:
{
   18bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bdc:	4699      	mov	r9, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18bde:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   18be0:	6904      	ldr	r4, [r0, #16]
{
   18be2:	460f      	mov	r7, r1
   18be4:	0499      	lsls	r1, r3, #18
   18be6:	b08d      	sub	sp, #52	; 0x34
   18be8:	4680      	mov	r8, r0
   18bea:	4692      	mov	sl, r2
   18bec:	d434      	bmi.n	18c58 <spi_nrfx_transceive+0x80>
	return z_impl_k_sem_take(sem, timeout);
   18bee:	f04f 32ff 	mov.w	r2, #4294967295
   18bf2:	f04f 33ff 	mov.w	r3, #4294967295
   18bf6:	f104 0010 	add.w	r0, r4, #16
   18bfa:	f003 fc21 	bl	1c440 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   18bfe:	6067      	str	r7, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
   18c00:	f8d8 b010 	ldr.w	fp, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
   18c04:	f8d8 3004 	ldr.w	r3, [r8, #4]
   18c08:	9304      	str	r3, [sp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
   18c0a:	f89b 306d 	ldrb.w	r3, [fp, #109]	; 0x6d
   18c0e:	9305      	str	r3, [sp, #20]
   18c10:	b123      	cbz	r3, 18c1c <spi_nrfx_transceive+0x44>
   18c12:	f8db 3000 	ldr.w	r3, [fp]
   18c16:	429f      	cmp	r7, r3
   18c18:	f000 80bd 	beq.w	18d96 <spi_nrfx_transceive+0x1be>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
   18c1c:	88be      	ldrh	r6, [r7, #4]
   18c1e:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
   18c22:	d020      	beq.n	18c66 <spi_nrfx_transceive+0x8e>
		LOG_ERR("Half-duplex not supported");
   18c24:	4b92      	ldr	r3, [pc, #584]	; (18e70 <spi_nrfx_transceive+0x298>)
   18c26:	9302      	str	r3, [sp, #8]
   18c28:	2300      	movs	r3, #0
   18c2a:	e9cd 3300 	strd	r3, r3, [sp]
   18c2e:	4991      	ldr	r1, [pc, #580]	; (18e74 <spi_nrfx_transceive+0x29c>)
   18c30:	2201      	movs	r2, #1
   18c32:	4618      	mov	r0, r3
   18c34:	f007 f9c9 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   18c38:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   18c3c:	6823      	ldr	r3, [r4, #0]
   18c3e:	889b      	ldrh	r3, [r3, #4]
   18c40:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
   18c44:	d104      	bne.n	18c50 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
   18c46:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   18c48:	f104 0010 	add.w	r0, r4, #16
   18c4c:	f003 fbd2 	bl	1c3f4 <z_impl_k_sem_give>
}
   18c50:	4628      	mov	r0, r5
   18c52:	b00d      	add	sp, #52	; 0x34
   18c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18c58:	69a3      	ldr	r3, [r4, #24]
   18c5a:	2b00      	cmp	r3, #0
   18c5c:	d1c7      	bne.n	18bee <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
   18c5e:	6863      	ldr	r3, [r4, #4]
   18c60:	429f      	cmp	r7, r3
   18c62:	d1c4      	bne.n	18bee <spi_nrfx_transceive+0x16>
   18c64:	e7cc      	b.n	18c00 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   18c66:	f016 0201 	ands.w	r2, r6, #1
   18c6a:	d00e      	beq.n	18c8a <spi_nrfx_transceive+0xb2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
   18c6c:	f8d8 2000 	ldr.w	r2, [r8]
   18c70:	9203      	str	r2, [sp, #12]
   18c72:	4a81      	ldr	r2, [pc, #516]	; (18e78 <spi_nrfx_transceive+0x2a0>)
   18c74:	497f      	ldr	r1, [pc, #508]	; (18e74 <spi_nrfx_transceive+0x29c>)
   18c76:	9300      	str	r3, [sp, #0]
   18c78:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18c7c:	4618      	mov	r0, r3
   18c7e:	2201      	movs	r2, #1
   18c80:	f007 f9a3 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   18c84:	f06f 0515 	mvn.w	r5, #21
   18c88:	e7d8      	b.n	18c3c <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   18c8a:	f016 0308 	ands.w	r3, r6, #8
   18c8e:	d00a      	beq.n	18ca6 <spi_nrfx_transceive+0xce>
		LOG_ERR("Loopback mode is not supported");
   18c90:	4b7a      	ldr	r3, [pc, #488]	; (18e7c <spi_nrfx_transceive+0x2a4>)
   18c92:	9200      	str	r2, [sp, #0]
   18c94:	e9cd 2301 	strd	r2, r3, [sp, #4]
   18c98:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
   18c9a:	4976      	ldr	r1, [pc, #472]	; (18e74 <spi_nrfx_transceive+0x29c>)
   18c9c:	2201      	movs	r2, #1
   18c9e:	4618      	mov	r0, r3
   18ca0:	f007 f993 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
   18ca4:	e7ee      	b.n	18c84 <spi_nrfx_transceive+0xac>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   18ca6:	f3c6 1245 	ubfx	r2, r6, #5, #6
   18caa:	2a08      	cmp	r2, #8
   18cac:	d004      	beq.n	18cb8 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Word sizes other than 8 bits are not supported");
   18cae:	4a74      	ldr	r2, [pc, #464]	; (18e80 <spi_nrfx_transceive+0x2a8>)
   18cb0:	9300      	str	r3, [sp, #0]
   18cb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
   18cb6:	e7f0      	b.n	18c9a <spi_nrfx_transceive+0xc2>
	if (spi_cfg->frequency < 125000) {
   18cb8:	683d      	ldr	r5, [r7, #0]
   18cba:	4a72      	ldr	r2, [pc, #456]	; (18e84 <spi_nrfx_transceive+0x2ac>)
   18cbc:	4295      	cmp	r5, r2
   18cbe:	d801      	bhi.n	18cc4 <spi_nrfx_transceive+0xec>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   18cc0:	4a71      	ldr	r2, [pc, #452]	; (18e88 <spi_nrfx_transceive+0x2b0>)
   18cc2:	e7f5      	b.n	18cb0 <spi_nrfx_transceive+0xd8>
	config = dev_config->def_config;
   18cc4:	9b04      	ldr	r3, [sp, #16]
   18cc6:	f103 0e08 	add.w	lr, r3, #8
   18cca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   18cce:	f10d 0c1c 	add.w	ip, sp, #28
   18cd2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   18cd6:	f8de 3000 	ldr.w	r3, [lr]
   18cda:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
   18cde:	4b6b      	ldr	r3, [pc, #428]	; (18e8c <spi_nrfx_transceive+0x2b4>)
   18ce0:	429d      	cmp	r5, r3
   18ce2:	d940      	bls.n	18d66 <spi_nrfx_transceive+0x18e>
	} else if (frequency < 500000) {
   18ce4:	4b6a      	ldr	r3, [pc, #424]	; (18e90 <spi_nrfx_transceive+0x2b8>)
   18ce6:	429d      	cmp	r5, r3
   18ce8:	d940      	bls.n	18d6c <spi_nrfx_transceive+0x194>
	} else if (frequency < 1000000) {
   18cea:	4b6a      	ldr	r3, [pc, #424]	; (18e94 <spi_nrfx_transceive+0x2bc>)
   18cec:	429d      	cmp	r5, r3
   18cee:	d940      	bls.n	18d72 <spi_nrfx_transceive+0x19a>
	} else if (frequency < 2000000) {
   18cf0:	4b69      	ldr	r3, [pc, #420]	; (18e98 <spi_nrfx_transceive+0x2c0>)
   18cf2:	429d      	cmp	r5, r3
   18cf4:	d940      	bls.n	18d78 <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 4000000) {
   18cf6:	4b69      	ldr	r3, [pc, #420]	; (18e9c <spi_nrfx_transceive+0x2c4>)
   18cf8:	429d      	cmp	r5, r3
   18cfa:	d940      	bls.n	18d7e <spi_nrfx_transceive+0x1a6>
		return NRF_SPI_FREQ_4M;
   18cfc:	4b68      	ldr	r3, [pc, #416]	; (18ea0 <spi_nrfx_transceive+0x2c8>)
   18cfe:	429d      	cmp	r5, r3
   18d00:	bf2c      	ite	cs
   18d02:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
   18d06:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   18d0a:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
   18d0c:	9509      	str	r5, [sp, #36]	; 0x24
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   18d0e:	f006 0304 	and.w	r3, r6, #4
   18d12:	d537      	bpl.n	18d84 <spi_nrfx_transceive+0x1ac>
			return NRF_SPI_MODE_2;
   18d14:	2b00      	cmp	r3, #0
   18d16:	bf14      	ite	ne
   18d18:	2303      	movne	r3, #3
   18d1a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
   18d1c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	if (dev_data->initialized) {
   18d20:	9b05      	ldr	r3, [sp, #20]
	if (operation & SPI_TRANSFER_LSB) {
   18d22:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
   18d26:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
	if (dev_data->initialized) {
   18d2a:	b12b      	cbz	r3, 18d38 <spi_nrfx_transceive+0x160>
		nrfx_spi_uninit(&dev_config->spi);
   18d2c:	9804      	ldr	r0, [sp, #16]
   18d2e:	f002 fe67 	bl	1ba00 <nrfx_spi_uninit>
		dev_data->initialized = false;
   18d32:	2300      	movs	r3, #0
   18d34:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
	result = nrfx_spi_init(&dev_config->spi, &config,
   18d38:	465b      	mov	r3, fp
   18d3a:	4a5a      	ldr	r2, [pc, #360]	; (18ea4 <spi_nrfx_transceive+0x2cc>)
   18d3c:	9804      	ldr	r0, [sp, #16]
   18d3e:	a907      	add	r1, sp, #28
   18d40:	f002 fdb0 	bl	1b8a4 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   18d44:	4b58      	ldr	r3, [pc, #352]	; (18ea8 <spi_nrfx_transceive+0x2d0>)
   18d46:	4298      	cmp	r0, r3
   18d48:	d020      	beq.n	18d8c <spi_nrfx_transceive+0x1b4>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
   18d4a:	4b58      	ldr	r3, [pc, #352]	; (18eac <spi_nrfx_transceive+0x2d4>)
   18d4c:	9302      	str	r3, [sp, #8]
   18d4e:	2300      	movs	r3, #0
   18d50:	9003      	str	r0, [sp, #12]
   18d52:	e9cd 3300 	strd	r3, r3, [sp]
   18d56:	4947      	ldr	r1, [pc, #284]	; (18e74 <spi_nrfx_transceive+0x29c>)
   18d58:	2201      	movs	r2, #1
   18d5a:	4618      	mov	r0, r3
   18d5c:	f007 f935 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   18d60:	f06f 0504 	mvn.w	r5, #4
   18d64:	e76a      	b.n	18c3c <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
   18d66:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   18d6a:	e7ce      	b.n	18d0a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_250K;
   18d6c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   18d70:	e7cb      	b.n	18d0a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_500K;
   18d72:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
   18d76:	e7c8      	b.n	18d0a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_1M;
   18d78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   18d7c:	e7c5      	b.n	18d0a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_2M;
   18d7e:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
   18d82:	e7c2      	b.n	18d0a <spi_nrfx_transceive+0x132>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
   18d84:	3b00      	subs	r3, #0
   18d86:	bf18      	it	ne
   18d88:	2301      	movne	r3, #1
   18d8a:	e7c7      	b.n	18d1c <spi_nrfx_transceive+0x144>
	dev_data->initialized = true;
   18d8c:	2301      	movs	r3, #1
   18d8e:	f88b 306d 	strb.w	r3, [fp, #109]	; 0x6d
	ctx->config = spi_cfg;
   18d92:	f8cb 7000 	str.w	r7, [fp]
		dev_data->busy = true;
   18d96:	2301      	movs	r3, #1
   18d98:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   18d9c:	f1ba 0f00 	cmp.w	sl, #0
   18da0:	d154      	bne.n	18e4c <spi_nrfx_transceive+0x274>
   18da2:	f8c4 a044 	str.w	sl, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   18da6:	2300      	movs	r3, #0
   18da8:	64a3      	str	r3, [r4, #72]	; 0x48
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
   18daa:	f104 0258 	add.w	r2, r4, #88	; 0x58
   18dae:	f104 0148 	add.w	r1, r4, #72	; 0x48
   18db2:	f104 0044 	add.w	r0, r4, #68	; 0x44
   18db6:	f007 f8f5 	bl	1ffa4 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
   18dba:	6560      	str	r0, [r4, #84]	; 0x54
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   18dbc:	f1b9 0f00 	cmp.w	r9, #0
   18dc0:	d14c      	bne.n	18e5c <spi_nrfx_transceive+0x284>
   18dc2:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   18dc6:	2300      	movs	r3, #0
   18dc8:	6523      	str	r3, [r4, #80]	; 0x50
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
   18dca:	f104 0260 	add.w	r2, r4, #96	; 0x60
   18dce:	f104 0150 	add.w	r1, r4, #80	; 0x50
   18dd2:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   18dd6:	f007 f8e5 	bl	1ffa4 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
   18dda:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
   18ddc:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
   18dde:	65e0      	str	r0, [r4, #92]	; 0x5c
	_spi_context_cs_control(ctx, on, false);
   18de0:	2101      	movs	r1, #1
   18de2:	4620      	mov	r0, r4
	ctx->sync_status = 0;
   18de4:	6426      	str	r6, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
   18de6:	f007 f914 	bl	20012 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   18dea:	4640      	mov	r0, r8
   18dec:	f7ff fe54 	bl	18a98 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18df0:	6e25      	ldr	r5, [r4, #96]	; 0x60
   18df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
			     ctx->config->frequency;
   18df4:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18df6:	429d      	cmp	r5, r3
   18df8:	bf38      	it	cc
   18dfa:	461d      	movcc	r5, r3
   18dfc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
   18e00:	435d      	muls	r5, r3
			     ctx->config->frequency;
   18e02:	f857 3b28 	ldr.w	r3, [r7], #40
   18e06:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
   18e0a:	681b      	ldr	r3, [r3, #0]
   18e0c:	fbb5 f5f3 	udiv	r5, r5, r3
   18e10:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
   18e12:	35c8      	adds	r5, #200	; 0xc8
   18e14:	f240 30e7 	movw	r0, #999	; 0x3e7
   18e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18e1c:	2300      	movs	r3, #0
   18e1e:	fbe5 010c 	umlal	r0, r1, r5, ip
   18e22:	f7e7 f96d 	bl	100 <__aeabi_uldivmod>
   18e26:	4602      	mov	r2, r0
   18e28:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   18e2a:	4638      	mov	r0, r7
   18e2c:	f003 fb08 	bl	1c440 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
   18e30:	b1e0      	cbz	r0, 18e6c <spi_nrfx_transceive+0x294>
		LOG_ERR("Timeout waiting for transfer complete");
   18e32:	4b1f      	ldr	r3, [pc, #124]	; (18eb0 <spi_nrfx_transceive+0x2d8>)
   18e34:	490f      	ldr	r1, [pc, #60]	; (18e74 <spi_nrfx_transceive+0x29c>)
   18e36:	9600      	str	r6, [sp, #0]
   18e38:	e9cd 6301 	strd	r6, r3, [sp, #4]
   18e3c:	2201      	movs	r2, #1
   18e3e:	4633      	mov	r3, r6
   18e40:	4630      	mov	r0, r6
   18e42:	f007 f8c2 	bl	1ffca <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
   18e46:	f06f 0573 	mvn.w	r5, #115	; 0x73
   18e4a:	e6f7      	b.n	18c3c <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
   18e4c:	f8da 3000 	ldr.w	r3, [sl]
   18e50:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
   18e52:	2b00      	cmp	r3, #0
   18e54:	d0a7      	beq.n	18da6 <spi_nrfx_transceive+0x1ce>
   18e56:	f8da 3004 	ldr.w	r3, [sl, #4]
   18e5a:	e7a5      	b.n	18da8 <spi_nrfx_transceive+0x1d0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
   18e5c:	f8d9 3000 	ldr.w	r3, [r9]
   18e60:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
   18e62:	2b00      	cmp	r3, #0
   18e64:	d0af      	beq.n	18dc6 <spi_nrfx_transceive+0x1ee>
   18e66:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18e6a:	e7ad      	b.n	18dc8 <spi_nrfx_transceive+0x1f0>
	status = ctx->sync_status;
   18e6c:	6c25      	ldr	r5, [r4, #64]	; 0x40
	return status;
   18e6e:	e6e5      	b.n	18c3c <spi_nrfx_transceive+0x64>
   18e70:	000234b1 	.word	0x000234b1
   18e74:	000216ec 	.word	0x000216ec
   18e78:	000234cb 	.word	0x000234cb
   18e7c:	000234ed 	.word	0x000234ed
   18e80:	0002350c 	.word	0x0002350c
   18e84:	0001e847 	.word	0x0001e847
   18e88:	0002353b 	.word	0x0002353b
   18e8c:	0003d08f 	.word	0x0003d08f
   18e90:	0007a11f 	.word	0x0007a11f
   18e94:	000f423f 	.word	0x000f423f
   18e98:	001e847f 	.word	0x001e847f
   18e9c:	003d08ff 	.word	0x003d08ff
   18ea0:	007a1200 	.word	0x007a1200
   18ea4:	00018b19 	.word	0x00018b19
   18ea8:	0bad0000 	.word	0x0bad0000
   18eac:	0002356c 	.word	0x0002356c
   18eb0:	00023593 	.word	0x00023593

00018eb4 <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
   18eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18eb8:	4689      	mov	r9, r1
   18eba:	b087      	sub	sp, #28
   18ebc:	4690      	mov	r8, r2
   18ebe:	469a      	mov	sl, r3
 */
__syscall const struct can_timing *can_get_timing_min(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_min(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   18ec0:	6883      	ldr	r3, [r0, #8]
   18ec2:	9301      	str	r3, [sp, #4]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
   18ec4:	4b53      	ldr	r3, [pc, #332]	; (19014 <z_impl_can_calc_timing+0x160>)
 */
__syscall const struct can_timing *can_get_timing_max(const struct device *dev);

static inline const struct can_timing *z_impl_can_get_timing_max(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
   18ec6:	6887      	ldr	r7, [r0, #8]
   18ec8:	429a      	cmp	r2, r3
   18eca:	f200 809f 	bhi.w	1900c <z_impl_can_calc_timing+0x158>
	return api->get_core_clock(dev, rate);
   18ece:	6883      	ldr	r3, [r0, #8]
   18ed0:	a905      	add	r1, sp, #20
   18ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18ed4:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   18ed6:	2800      	cmp	r0, #0
   18ed8:	f040 8093 	bne.w	19002 <z_impl_can_calc_timing+0x14e>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   18edc:	9b05      	ldr	r3, [sp, #20]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   18ede:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   18ee2:	9300      	str	r3, [sp, #0]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
   18ee4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   18ee8:	441c      	add	r4, r3
   18eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
   18eee:	441c      	add	r4, r3
   18ef0:	3401      	adds	r4, #1
	if (bitrate == 0 || sp >= 1000) {
   18ef2:	f1b8 0f00 	cmp.w	r8, #0
   18ef6:	f000 8089 	beq.w	1900c <z_impl_can_calc_timing+0x158>
   18efa:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
   18efe:	f080 8085 	bcs.w	1900c <z_impl_can_calc_timing+0x158>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
   18f02:	9b00      	ldr	r3, [sp, #0]
   18f04:	fb04 f408 	mul.w	r4, r4, r8
   18f08:	fbb3 f4f4 	udiv	r4, r3, r4
   18f0c:	2c01      	cmp	r4, #1
   18f0e:	bf38      	it	cc
   18f10:	2401      	movcc	r4, #1
   18f12:	fb04 f108 	mul.w	r1, r4, r8
	uint16_t sp_err_min = UINT16_MAX;
   18f16:	f64f 70ff 	movw	r0, #65535	; 0xffff
	     prescaler <= max->prescaler; ++prescaler) {
   18f1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
   18f1e:	429c      	cmp	r4, r3
   18f20:	dd06      	ble.n	18f30 <z_impl_can_calc_timing+0x7c>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
   18f22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18f26:	4298      	cmp	r0, r3
   18f28:	d16b      	bne.n	19002 <z_impl_can_calc_timing+0x14e>
   18f2a:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
   18f2e:	e068      	b.n	19002 <z_impl_can_calc_timing+0x14e>
		if (core_clock % (prescaler * bitrate)) {
   18f30:	9b00      	ldr	r3, [sp, #0]
   18f32:	fbb3 fef1 	udiv	lr, r3, r1
   18f36:	fb01 331e 	mls	r3, r1, lr, r3
   18f3a:	bb83      	cbnz	r3, 18f9e <z_impl_can_calc_timing+0xea>
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   18f3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
   18f40:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
   18f44:	9302      	str	r3, [sp, #8]
   18f46:	441d      	add	r5, r3
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   18f48:	9b01      	ldr	r3, [sp, #4]
   18f4a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   18f4c:	9303      	str	r3, [sp, #12]
   18f4e:	9b01      	ldr	r3, [sp, #4]
	ts2 = ts - (ts * sp) / 1000;
   18f50:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   18f54:	fb0a fc0e 	mul.w	ip, sl, lr
   18f58:	fbbc fcf6 	udiv	ip, ip, r6
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   18f5c:	9e01      	ldr	r6, [sp, #4]
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   18f5e:	8eda      	ldrh	r2, [r3, #54]	; 0x36
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   18f60:	f8b6 b03a 	ldrh.w	fp, [r6, #58]	; 0x3a
	ts2 = ts - (ts * sp) / 1000;
   18f64:	fa1f f38e 	uxth.w	r3, lr
   18f68:	eba3 0c0c 	sub.w	ip, r3, ip
   18f6c:	fa1f fc8c 	uxth.w	ip, ip
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   18f70:	45dc      	cmp	ip, fp
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
   18f72:	b2ad      	uxth	r5, r5
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
   18f74:	d916      	bls.n	18fa4 <z_impl_can_calc_timing+0xf0>
   18f76:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
   18f7a:	4566      	cmp	r6, ip
   18f7c:	bf28      	it	cs
   18f7e:	4666      	movcs	r6, ip
	ts1 = ts - CAN_SYNC_SEG - ts2;
   18f80:	f103 3cff 	add.w	ip, r3, #4294967295
   18f84:	ebac 0c06 	sub.w	ip, ip, r6
   18f88:	fa1f fc8c 	uxth.w	ip, ip
	if (ts1 > ts1_max) {
   18f8c:	4565      	cmp	r5, ip
   18f8e:	d20b      	bcs.n	18fa8 <z_impl_can_calc_timing+0xf4>
		ts2 = ts - CAN_SYNC_SEG - ts1;
   18f90:	1b5e      	subs	r6, r3, r5
   18f92:	3e01      	subs	r6, #1
		if (ts2 > max->phase_seg2) {
   18f94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
		ts2 = ts - CAN_SYNC_SEG - ts1;
   18f98:	b2b6      	uxth	r6, r6
		if (ts2 > max->phase_seg2) {
   18f9a:	42b3      	cmp	r3, r6
   18f9c:	d20d      	bcs.n	18fba <z_impl_can_calc_timing+0x106>
	     prescaler <= max->prescaler; ++prescaler) {
   18f9e:	3401      	adds	r4, #1
   18fa0:	4441      	add	r1, r8
   18fa2:	e7ba      	b.n	18f1a <z_impl_can_calc_timing+0x66>
   18fa4:	465e      	mov	r6, fp
   18fa6:	e7eb      	b.n	18f80 <z_impl_can_calc_timing+0xcc>
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
   18fa8:	9d03      	ldr	r5, [sp, #12]
   18faa:	4415      	add	r5, r2
   18fac:	b2ad      	uxth	r5, r5
	} else if (ts1 < ts1_min) {
   18fae:	4565      	cmp	r5, ip
   18fb0:	d92a      	bls.n	19008 <z_impl_can_calc_timing+0x154>
		ts2 = ts - ts1;
   18fb2:	1b5b      	subs	r3, r3, r5
   18fb4:	b29e      	uxth	r6, r3
		if (ts2 < min->phase_seg2) {
   18fb6:	45b3      	cmp	fp, r6
   18fb8:	d8f1      	bhi.n	18f9e <z_impl_can_calc_timing+0xea>
	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
   18fba:	ebb2 0f55 	cmp.w	r2, r5, lsr #1
   18fbe:	ea4f 0355 	mov.w	r3, r5, lsr #1
   18fc2:	d203      	bcs.n	18fcc <z_impl_can_calc_timing+0x118>
   18fc4:	9a02      	ldr	r2, [sp, #8]
   18fc6:	429a      	cmp	r2, r3
   18fc8:	bf28      	it	cs
   18fca:	461a      	movcs	r2, r3
	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
   18fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   18fd0:	fb05 3303 	mla	r3, r5, r3, r3
   18fd4:	fbb3 f3fe 	udiv	r3, r3, lr
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
   18fd8:	459a      	cmp	sl, r3
   18fda:	bf34      	ite	cc
   18fdc:	eba3 030a 	subcc.w	r3, r3, sl
   18fe0:	ebaa 0303 	subcs.w	r3, sl, r3
		if (sp_err < sp_err_min) {
   18fe4:	4298      	cmp	r0, r3
   18fe6:	d9da      	bls.n	18f9e <z_impl_can_calc_timing+0xea>
	res->phase_seg1 = ts1 - res->prop_seg;
   18fe8:	1aad      	subs	r5, r5, r2
			sp_err_min = sp_err;
   18fea:	b298      	uxth	r0, r3
			res->prop_seg = tmp_res.prop_seg;
   18fec:	f8a9 2002 	strh.w	r2, [r9, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
   18ff0:	f8a9 5004 	strh.w	r5, [r9, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
   18ff4:	f8a9 6006 	strh.w	r6, [r9, #6]
			res->prescaler = (uint16_t)prescaler;
   18ff8:	f8a9 4008 	strh.w	r4, [r9, #8]
			if (sp_err == 0) {
   18ffc:	2b00      	cmp	r3, #0
   18ffe:	d1ce      	bne.n	18f9e <z_impl_can_calc_timing+0xea>
			sp_err_min = sp_err;
   19000:	4618      	mov	r0, r3
}
   19002:	b007      	add	sp, #28
   19004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19008:	4665      	mov	r5, ip
   1900a:	e7d6      	b.n	18fba <z_impl_can_calc_timing+0x106>
		return -EINVAL;
   1900c:	f06f 0015 	mvn.w	r0, #21
   19010:	e7f7      	b.n	19002 <z_impl_can_calc_timing+0x14e>
   19012:	bf00      	nop
   19014:	000f4240 	.word	0x000f4240

00019018 <mcp2515_set_mode>:

	return 0;
}

static int mcp2515_set_mode(const struct device *dev, can_mode_t mode)
{
   19018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct mcp2515_data *dev_data = dev->data;
   1901a:	6902      	ldr	r2, [r0, #16]

	if (dev_data->started) {
   1901c:	f892 3142 	ldrb.w	r3, [r2, #322]	; 0x142
   19020:	b9db      	cbnz	r3, 1905a <mcp2515_set_mode+0x42>
		return -EBUSY;
	}

	switch (mode) {
   19022:	2901      	cmp	r1, #1
   19024:	d008      	beq.n	19038 <mcp2515_set_mode+0x20>
   19026:	2902      	cmp	r1, #2
   19028:	d008      	beq.n	1903c <mcp2515_set_mode+0x24>
   1902a:	b949      	cbnz	r1, 19040 <mcp2515_set_mode+0x28>
	case CAN_MODE_NORMAL:
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
   1902c:	f882 1141 	strb.w	r1, [r2, #321]	; 0x141
	default:
		LOG_ERR("Unsupported CAN Mode %u", mode);
		return -ENOTSUP;
	}

	return 0;
   19030:	2000      	movs	r0, #0
}
   19032:	b005      	add	sp, #20
   19034:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (mode) {
   19038:	2102      	movs	r1, #2
   1903a:	e7f7      	b.n	1902c <mcp2515_set_mode+0x14>
   1903c:	2103      	movs	r1, #3
   1903e:	e7f5      	b.n	1902c <mcp2515_set_mode+0x14>
		LOG_ERR("Unsupported CAN Mode %u", mode);
   19040:	4a07      	ldr	r2, [pc, #28]	; (19060 <mcp2515_set_mode+0x48>)
   19042:	9103      	str	r1, [sp, #12]
   19044:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19048:	4618      	mov	r0, r3
   1904a:	4906      	ldr	r1, [pc, #24]	; (19064 <mcp2515_set_mode+0x4c>)
   1904c:	9300      	str	r3, [sp, #0]
   1904e:	2201      	movs	r2, #1
   19050:	f007 f858 	bl	20104 <z_log_msg_runtime_create.constprop.0>
   19054:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19058:	e7eb      	b.n	19032 <mcp2515_set_mode+0x1a>
		return -EBUSY;
   1905a:	f06f 000f 	mvn.w	r0, #15
   1905e:	e7e8      	b.n	19032 <mcp2515_set_mode+0x1a>
   19060:	000235de 	.word	0x000235de
   19064:	0002168c 	.word	0x0002168c

00019068 <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
   19068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1906a:	b087      	sub	sp, #28
	struct mcp2515_data *dev_data = dev->data;
   1906c:	6907      	ldr	r7, [r0, #16]
{
   1906e:	4606      	mov	r6, r0
   19070:	460c      	mov	r4, r1
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   19072:	6840      	ldr	r0, [r0, #4]
{
   19074:	4615      	mov	r5, r2
	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
   19076:	2301      	movs	r3, #1
   19078:	f10d 0213 	add.w	r2, sp, #19
   1907c:	212d      	movs	r1, #45	; 0x2d
   1907e:	f007 f982 	bl	20386 <mcp2515_cmd_read_reg.isra.0>
	if (ret < 0) {
   19082:	2800      	cmp	r0, #0
   19084:	da0d      	bge.n	190a2 <mcp2515_get_state+0x3a>
		LOG_ERR("Failed to read error register [%d]", ret);
   19086:	4b1d      	ldr	r3, [pc, #116]	; (190fc <mcp2515_get_state+0x94>)
   19088:	9003      	str	r0, [sp, #12]

	if (err_cnt != NULL) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
					   sizeof(err_cnt_buf));
		if (ret < 0) {
			LOG_ERR("Failed to read error counters [%d]", ret);
   1908a:	9302      	str	r3, [sp, #8]
   1908c:	2300      	movs	r3, #0
   1908e:	4618      	mov	r0, r3
   19090:	e9cd 3300 	strd	r3, r3, [sp]
   19094:	491a      	ldr	r1, [pc, #104]	; (19100 <mcp2515_get_state+0x98>)
   19096:	2201      	movs	r2, #1
   19098:	f007 f834 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   1909c:	f06f 0004 	mvn.w	r0, #4
   190a0:	e007      	b.n	190b2 <mcp2515_get_state+0x4a>
	if (state != NULL) {
   190a2:	b124      	cbz	r4, 190ae <mcp2515_get_state+0x46>
		if (!dev_data->started) {
   190a4:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
   190a8:	b92b      	cbnz	r3, 190b6 <mcp2515_get_state+0x4e>
			*state = CAN_STATE_STOPPED;
   190aa:	2304      	movs	r3, #4
			*state = CAN_STATE_ERROR_ACTIVE;
   190ac:	7023      	strb	r3, [r4, #0]
	if (err_cnt != NULL) {
   190ae:	b995      	cbnz	r5, 190d6 <mcp2515_get_state+0x6e>

		err_cnt->tx_err_cnt = err_cnt_buf[0];
		err_cnt->rx_err_cnt = err_cnt_buf[1];
	}

	return 0;
   190b0:	2000      	movs	r0, #0
}
   190b2:	b007      	add	sp, #28
   190b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (eflg & MCP2515_EFLG_TXBO) {
   190b6:	f89d 3013 	ldrb.w	r3, [sp, #19]
   190ba:	069a      	lsls	r2, r3, #26
   190bc:	d501      	bpl.n	190c2 <mcp2515_get_state+0x5a>
			*state = CAN_STATE_BUS_OFF;
   190be:	2303      	movs	r3, #3
   190c0:	e7f4      	b.n	190ac <mcp2515_get_state+0x44>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
   190c2:	f013 0f18 	tst.w	r3, #24
   190c6:	d001      	beq.n	190cc <mcp2515_get_state+0x64>
			*state = CAN_STATE_ERROR_PASSIVE;
   190c8:	2302      	movs	r3, #2
   190ca:	e7ef      	b.n	190ac <mcp2515_get_state+0x44>
		} else if (eflg & MCP2515_EFLG_EWARN) {
   190cc:	f013 0301 	ands.w	r3, r3, #1
			*state = CAN_STATE_ERROR_WARNING;
   190d0:	bf18      	it	ne
   190d2:	2301      	movne	r3, #1
   190d4:	e7ea      	b.n	190ac <mcp2515_get_state+0x44>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
   190d6:	6870      	ldr	r0, [r6, #4]
   190d8:	2302      	movs	r3, #2
   190da:	aa05      	add	r2, sp, #20
   190dc:	211c      	movs	r1, #28
   190de:	f007 f952 	bl	20386 <mcp2515_cmd_read_reg.isra.0>
		if (ret < 0) {
   190e2:	2800      	cmp	r0, #0
   190e4:	da02      	bge.n	190ec <mcp2515_get_state+0x84>
			LOG_ERR("Failed to read error counters [%d]", ret);
   190e6:	4b07      	ldr	r3, [pc, #28]	; (19104 <mcp2515_get_state+0x9c>)
   190e8:	9003      	str	r0, [sp, #12]
   190ea:	e7ce      	b.n	1908a <mcp2515_get_state+0x22>
		err_cnt->tx_err_cnt = err_cnt_buf[0];
   190ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
   190f0:	702b      	strb	r3, [r5, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
   190f2:	f89d 3015 	ldrb.w	r3, [sp, #21]
   190f6:	706b      	strb	r3, [r5, #1]
   190f8:	e7da      	b.n	190b0 <mcp2515_get_state+0x48>
   190fa:	bf00      	nop
   190fc:	000235f6 	.word	0x000235f6
   19100:	0002168c 	.word	0x0002168c
   19104:	00023619 	.word	0x00023619

00019108 <mcp2515_send>:
{
   19108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1910c:	460d      	mov	r5, r1
	if (frame->dlc > CAN_MAX_DLC) {
   1910e:	7909      	ldrb	r1, [r1, #4]
	struct mcp2515_data *dev_data = dev->data;
   19110:	6907      	ldr	r7, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
   19112:	2908      	cmp	r1, #8
{
   19114:	b093      	sub	sp, #76	; 0x4c
   19116:	4606      	mov	r6, r0
	if (frame->dlc > CAN_MAX_DLC) {
   19118:	d912      	bls.n	19140 <mcp2515_send+0x38>
		LOG_ERR("DLC of %d exceeds maximum (%d)",
   1911a:	2308      	movs	r3, #8
   1911c:	e9cd 1303 	strd	r1, r3, [sp, #12]
   19120:	4b5a      	ldr	r3, [pc, #360]	; (1928c <mcp2515_send+0x184>)
   19122:	9302      	str	r3, [sp, #8]
   19124:	2300      	movs	r3, #0
   19126:	e9cd 3300 	strd	r3, r3, [sp]
   1912a:	4959      	ldr	r1, [pc, #356]	; (19290 <mcp2515_send+0x188>)
   1912c:	2201      	movs	r2, #1
   1912e:	4618      	mov	r0, r3
   19130:	f006 ffe8 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   19134:	f06f 0415 	mvn.w	r4, #21
}
   19138:	4620      	mov	r0, r4
   1913a:	b013      	add	sp, #76	; 0x4c
   1913c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
   19140:	7969      	ldrb	r1, [r5, #5]
   19142:	2903      	cmp	r1, #3
   19144:	d90d      	bls.n	19162 <mcp2515_send+0x5a>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
   19146:	4b53      	ldr	r3, [pc, #332]	; (19294 <mcp2515_send+0x18c>)
   19148:	9302      	str	r3, [sp, #8]
   1914a:	2300      	movs	r3, #0
   1914c:	9103      	str	r1, [sp, #12]
   1914e:	e9cd 3300 	strd	r3, r3, [sp]
   19152:	494f      	ldr	r1, [pc, #316]	; (19290 <mcp2515_send+0x188>)
   19154:	2201      	movs	r2, #1
   19156:	4618      	mov	r0, r3
   19158:	f006 ffd4 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
   1915c:	f06f 0485 	mvn.w	r4, #133	; 0x85
   19160:	e7ea      	b.n	19138 <mcp2515_send+0x30>
	if (!dev_data->started) {
   19162:	f897 1142 	ldrb.w	r1, [r7, #322]	; 0x142
   19166:	2900      	cmp	r1, #0
   19168:	f000 8089 	beq.w	1927e <mcp2515_send+0x176>
   1916c:	f107 00ac 	add.w	r0, r7, #172	; 0xac
   19170:	f003 f966 	bl	1c440 <z_impl_k_sem_take>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
   19174:	4604      	mov	r4, r0
   19176:	2800      	cmp	r0, #0
   19178:	f040 8084 	bne.w	19284 <mcp2515_send+0x17c>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1917c:	f507 7896 	add.w	r8, r7, #300	; 0x12c
   19180:	f04f 32ff 	mov.w	r2, #4294967295
   19184:	f04f 33ff 	mov.w	r3, #4294967295
   19188:	4640      	mov	r0, r8
   1918a:	f006 ffca 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
   1918e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
   19192:	07da      	lsls	r2, r3, #31
   19194:	d419      	bmi.n	191ca <mcp2515_send+0xc2>
			dev_data->tx_busy_map |= BIT(tx_idx);
   19196:	f043 0301 	orr.w	r3, r3, #1
   1919a:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
	k_mutex_unlock(&dev_data->mutex);
   1919e:	4640      	mov	r0, r8
   191a0:	f006 ffc1 	bl	20126 <k_mutex_unlock.isra.0>
	dev_data->tx_cb[tx_idx].cb = callback;
   191a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   191a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
   191aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   191ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	if ((source->flags & CAN_FRAME_IDE) != 0) {
   191b0:	796a      	ldrb	r2, [r5, #5]
   191b2:	682b      	ldr	r3, [r5, #0]
   191b4:	f012 0f01 	tst.w	r2, #1
   191b8:	d117      	bne.n	191ea <mcp2515_send+0xe2>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   191ba:	f3c3 01d9 	ubfx	r1, r3, #3, #26
			(source->id & 0x07) << 5;
   191be:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
   191c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
		target[MCP2515_FRAME_OFFSET_SIDL] =
   191c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   191c8:	e023      	b.n	19212 <mcp2515_send+0x10a>
	k_mutex_unlock(&dev_data->mutex);
   191ca:	4640      	mov	r0, r8
   191cc:	f006 ffab 	bl	20126 <k_mutex_unlock.isra.0>
		LOG_WRN("no free tx slot available");
   191d0:	4b31      	ldr	r3, [pc, #196]	; (19298 <mcp2515_send+0x190>)
   191d2:	9400      	str	r4, [sp, #0]
   191d4:	e9cd 4301 	strd	r4, r3, [sp, #4]
   191d8:	4620      	mov	r0, r4
   191da:	4623      	mov	r3, r4
   191dc:	492c      	ldr	r1, [pc, #176]	; (19290 <mcp2515_send+0x188>)
   191de:	2202      	movs	r2, #2
   191e0:	f006 ff90 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   191e4:	f06f 0404 	mvn.w	r4, #4
   191e8:	e7a6      	b.n	19138 <mcp2515_send+0x30>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
   191ea:	f3c3 5147 	ubfx	r1, r3, #21, #8
   191ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   191f2:	f3c3 408a 	ubfx	r0, r3, #18, #11
			((source->id >> 16) & 0x03);
   191f6:	f3c3 4101 	ubfx	r1, r3, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
   191fa:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
   191fe:	f041 0108 	orr.w	r1, r1, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
   19202:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
   19206:	f3c3 2114 	ubfx	r1, r3, #8, #21
   1920a:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
   1920e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	dlc = (source->dlc) & 0x0F;
   19212:	792b      	ldrb	r3, [r5, #4]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   19214:	0152      	lsls	r2, r2, #5
	dlc = (source->dlc) & 0x0F;
   19216:	f003 010f 	and.w	r1, r3, #15
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
   1921a:	f002 0240 	and.w	r2, r2, #64	; 0x40
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
   1921e:	430a      	orrs	r2, r1
   19220:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   19224:	a90b      	add	r1, sp, #44	; 0x2c
   19226:	1dea      	adds	r2, r5, #7
   19228:	350f      	adds	r5, #15
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
   1922a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   1922e:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   19232:	42aa      	cmp	r2, r5
   19234:	d1f9      	bne.n	1922a <mcp2515_send+0x122>
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
   19236:	3305      	adds	r3, #5
	return spi_write_dt(&dev_cfg->bus, &tx);
   19238:	f10d 0920 	add.w	r9, sp, #32
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   1923c:	2240      	movs	r2, #64	; 0x40
	struct spi_buf tx_buf[] = {
   1923e:	b2db      	uxtb	r3, r3
   19240:	2701      	movs	r7, #1
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
   19242:	f88d 201c 	strb.w	r2, [sp, #28]
	struct spi_buf tx_buf[] = {
   19246:	ad07      	add	r5, sp, #28
   19248:	aa0a      	add	r2, sp, #40	; 0x28
   1924a:	9311      	str	r3, [sp, #68]	; 0x44
	const struct spi_buf_set tx = {
   1924c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
   19250:	2302      	movs	r3, #2
	return spi_write_dt(&dev_cfg->bus, &tx);
   19252:	4649      	mov	r1, r9
   19254:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf_set tx = {
   19256:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf tx_buf[] = {
   19258:	950e      	str	r5, [sp, #56]	; 0x38
   1925a:	970f      	str	r7, [sp, #60]	; 0x3c
   1925c:	9210      	str	r2, [sp, #64]	; 0x40
	const struct spi_buf_set tx = {
   1925e:	f8cd 8020 	str.w	r8, [sp, #32]
	return spi_write_dt(&dev_cfg->bus, &tx);
   19262:	f007 f8b2 	bl	203ca <spi_write_dt>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   19266:	2381      	movs	r3, #129	; 0x81
	return spi_write_dt(&dev_cfg->bus, &tx);
   19268:	6870      	ldr	r0, [r6, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
   1926a:	f88d 301c 	strb.w	r3, [sp, #28]
	return spi_write_dt(&dev_cfg->bus, &tx);
   1926e:	4641      	mov	r1, r8
	struct spi_buf tx_buf[] = {
   19270:	e9cd 5708 	strd	r5, r7, [sp, #32]
	const struct spi_buf_set tx = {
   19274:	e9cd 970e 	strd	r9, r7, [sp, #56]	; 0x38
	return spi_write_dt(&dev_cfg->bus, &tx);
   19278:	f007 f8a7 	bl	203ca <spi_write_dt>
   1927c:	e75c      	b.n	19138 <mcp2515_send+0x30>
		return -ENETDOWN;
   1927e:	f06f 0472 	mvn.w	r4, #114	; 0x72
   19282:	e759      	b.n	19138 <mcp2515_send+0x30>
		return -EAGAIN;
   19284:	f06f 040a 	mvn.w	r4, #10
   19288:	e756      	b.n	19138 <mcp2515_send+0x30>
   1928a:	bf00      	nop
   1928c:	0002363c 	.word	0x0002363c
   19290:	0002168c 	.word	0x0002168c
   19294:	0002365b 	.word	0x0002365b
   19298:	0002367e 	.word	0x0002367e

0001929c <mcp2515_int_thread>:
		}
	}
}

static void mcp2515_int_thread(const struct device *dev)
{
   1929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Couldn't read INTF register %d", ret);
   192a0:	f8df b168 	ldr.w	fp, [pc, #360]	; 1940c <mcp2515_int_thread+0x170>
	struct mcp2515_data *dev_data = dev->data;
   192a4:	f8d0 a010 	ldr.w	sl, [r0, #16]
{
   192a8:	b089      	sub	sp, #36	; 0x24
   192aa:	4604      	mov	r4, r0
   192ac:	f04f 32ff 	mov.w	r2, #4294967295
   192b0:	f04f 33ff 	mov.w	r3, #4294967295
   192b4:	f10a 0094 	add.w	r0, sl, #148	; 0x94
   192b8:	f003 f8c2 	bl	1c440 <z_impl_k_sem_take>
			LOG_ERR("Couldn't read INT pin");
   192bc:	4e54      	ldr	r6, [pc, #336]	; (19410 <mcp2515_int_thread+0x174>)
	const struct mcp2515_config *dev_cfg = dev->config;
   192be:	6867      	ldr	r7, [r4, #4]
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
   192c0:	6860      	ldr	r0, [r4, #4]
   192c2:	212c      	movs	r1, #44	; 0x2c
   192c4:	2301      	movs	r3, #1
   192c6:	f10d 021a 	add.w	r2, sp, #26
   192ca:	f007 f85c 	bl	20386 <mcp2515_cmd_read_reg.isra.0>
		if (ret != 0) {
   192ce:	4601      	mov	r1, r0
   192d0:	b150      	cbz	r0, 192e8 <mcp2515_int_thread+0x4c>
			LOG_ERR("Couldn't read INTF register %d", ret);
   192d2:	2300      	movs	r3, #0
   192d4:	e9cd b002 	strd	fp, r0, [sp, #8]
   192d8:	e9cd 3300 	strd	r3, r3, [sp]
   192dc:	2201      	movs	r2, #1
   192de:	4631      	mov	r1, r6
   192e0:	4618      	mov	r0, r3
   192e2:	f006 ff0f 	bl	20104 <z_log_msg_runtime_create.constprop.0>
			continue;
   192e6:	e7eb      	b.n	192c0 <mcp2515_int_thread+0x24>
		if (canintf == 0) {
   192e8:	f89d 301a 	ldrb.w	r3, [sp, #26]
   192ec:	2b00      	cmp	r3, #0
   192ee:	d0dd      	beq.n	192ac <mcp2515_int_thread+0x10>
		if (canintf & MCP2515_CANINTF_RX0IF) {
   192f0:	07db      	lsls	r3, r3, #31
   192f2:	d508      	bpl.n	19306 <mcp2515_int_thread+0x6a>
			mcp2515_rx(dev, 0);
   192f4:	4620      	mov	r0, r4
   192f6:	f006 ff42 	bl	2017e <mcp2515_rx>
			canintf &= ~MCP2515_CANINTF_RX0IF;
   192fa:	f89d 301a 	ldrb.w	r3, [sp, #26]
   192fe:	f023 0301 	bic.w	r3, r3, #1
   19302:	f88d 301a 	strb.w	r3, [sp, #26]
		if (canintf & MCP2515_CANINTF_RX1IF) {
   19306:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1930a:	079d      	lsls	r5, r3, #30
   1930c:	d509      	bpl.n	19322 <mcp2515_int_thread+0x86>
			mcp2515_rx(dev, 1);
   1930e:	2101      	movs	r1, #1
   19310:	4620      	mov	r0, r4
   19312:	f006 ff34 	bl	2017e <mcp2515_rx>
			canintf &= ~MCP2515_CANINTF_RX1IF;
   19316:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1931a:	f023 0302 	bic.w	r3, r3, #2
   1931e:	f88d 301a 	strb.w	r3, [sp, #26]
		if (canintf & MCP2515_CANINTF_TX0IF) {
   19322:	f89d 301a 	ldrb.w	r3, [sp, #26]
   19326:	0758      	lsls	r0, r3, #29
   19328:	d504      	bpl.n	19334 <mcp2515_int_thread+0x98>
			mcp2515_tx_done(dev, 0, 0);
   1932a:	2200      	movs	r2, #0
   1932c:	4611      	mov	r1, r2
   1932e:	4620      	mov	r0, r4
   19330:	f006 fefb 	bl	2012a <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_TX1IF) {
   19334:	f89d 301a 	ldrb.w	r3, [sp, #26]
   19338:	0719      	lsls	r1, r3, #28
   1933a:	d504      	bpl.n	19346 <mcp2515_int_thread+0xaa>
			mcp2515_tx_done(dev, 1, 0);
   1933c:	2200      	movs	r2, #0
   1933e:	2101      	movs	r1, #1
   19340:	4620      	mov	r0, r4
   19342:	f006 fef2 	bl	2012a <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_TX2IF) {
   19346:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1934a:	06db      	lsls	r3, r3, #27
   1934c:	d504      	bpl.n	19358 <mcp2515_int_thread+0xbc>
			mcp2515_tx_done(dev, 2, 0);
   1934e:	2200      	movs	r2, #0
   19350:	2102      	movs	r1, #2
   19352:	4620      	mov	r0, r4
   19354:	f006 fee9 	bl	2012a <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_ERRIF) {
   19358:	f89d 301a 	ldrb.w	r3, [sp, #26]
   1935c:	f013 0f20 	tst.w	r3, #32
   19360:	f10d 081c 	add.w	r8, sp, #28
   19364:	d01a      	beq.n	1939c <mcp2515_int_thread+0x100>
	struct mcp2515_data *dev_data = dev->data;
   19366:	f8d4 9010 	ldr.w	r9, [r4, #16]
	void *state_change_cb_data = dev_data->state_change_cb_data;
   1936a:	e9d9 5349 	ldrd	r5, r3, [r9, #292]	; 0x124
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1936e:	2d00      	cmp	r5, #0
   19370:	bf14      	ite	ne
   19372:	4642      	movne	r2, r8
   19374:	2200      	moveq	r2, #0
   19376:	f10d 011b 	add.w	r1, sp, #27
   1937a:	4620      	mov	r0, r4
	void *state_change_cb_data = dev_data->state_change_cb_data;
   1937c:	9305      	str	r3, [sp, #20]
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
   1937e:	f7ff fe73 	bl	19068 <mcp2515_get_state>
	if (err != 0) {
   19382:	9b05      	ldr	r3, [sp, #20]
   19384:	b350      	cbz	r0, 193dc <mcp2515_int_thread+0x140>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
   19386:	4b23      	ldr	r3, [pc, #140]	; (19414 <mcp2515_int_thread+0x178>)
   19388:	9302      	str	r3, [sp, #8]
   1938a:	2300      	movs	r3, #0
   1938c:	9003      	str	r0, [sp, #12]
   1938e:	e9cd 3300 	strd	r3, r3, [sp]
   19392:	491f      	ldr	r1, [pc, #124]	; (19410 <mcp2515_int_thread+0x174>)
   19394:	2201      	movs	r2, #1
   19396:	4618      	mov	r0, r3
   19398:	f006 feb4 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		if (canintf != 0) {
   1939c:	f89d 201a 	ldrb.w	r2, [sp, #26]
   193a0:	b12a      	cbz	r2, 193ae <mcp2515_int_thread+0x112>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
   193a2:	43d3      	mvns	r3, r2
   193a4:	6860      	ldr	r0, [r4, #4]
   193a6:	b2db      	uxtb	r3, r3
   193a8:	212c      	movs	r1, #44	; 0x2c
   193aa:	f007 f819 	bl	203e0 <mcp2515_cmd_bit_modify.isra.0>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
   193ae:	6938      	ldr	r0, [r7, #16]
   193b0:	7d3d      	ldrb	r5, [r7, #20]
	const struct gpio_driver_data *const data =
   193b2:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
   193b6:	6882      	ldr	r2, [r0, #8]
   193b8:	4641      	mov	r1, r8
   193ba:	6852      	ldr	r2, [r2, #4]
   193bc:	4790      	blx	r2
	if (ret == 0) {
   193be:	2800      	cmp	r0, #0
   193c0:	d01a      	beq.n	193f8 <mcp2515_int_thread+0x15c>
		if (ret < 0) {
   193c2:	f6bf af7d 	bge.w	192c0 <mcp2515_int_thread+0x24>
			LOG_ERR("Couldn't read INT pin");
   193c6:	4b14      	ldr	r3, [pc, #80]	; (19418 <mcp2515_int_thread+0x17c>)
   193c8:	9302      	str	r3, [sp, #8]
   193ca:	2300      	movs	r3, #0
   193cc:	e9cd 3300 	strd	r3, r3, [sp]
   193d0:	2201      	movs	r2, #1
   193d2:	4631      	mov	r1, r6
   193d4:	4618      	mov	r0, r3
   193d6:	f006 fe95 	bl	20104 <z_log_msg_runtime_create.constprop.0>
   193da:	e771      	b.n	192c0 <mcp2515_int_thread+0x24>
	if (state_change_cb && dev_data->old_state != state) {
   193dc:	2d00      	cmp	r5, #0
   193de:	d0dd      	beq.n	1939c <mcp2515_int_thread+0x100>
   193e0:	f89d 101b 	ldrb.w	r1, [sp, #27]
   193e4:	f899 2140 	ldrb.w	r2, [r9, #320]	; 0x140
   193e8:	428a      	cmp	r2, r1
   193ea:	d0d7      	beq.n	1939c <mcp2515_int_thread+0x100>
		dev_data->old_state = state;
   193ec:	f889 1140 	strb.w	r1, [r9, #320]	; 0x140
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
   193f0:	9a07      	ldr	r2, [sp, #28]
   193f2:	4620      	mov	r0, r4
   193f4:	47a8      	blx	r5
   193f6:	e7d1      	b.n	1939c <mcp2515_int_thread+0x100>
		*value ^= data->invert;
   193f8:	9b07      	ldr	r3, [sp, #28]
   193fa:	f8d9 2000 	ldr.w	r2, [r9]
   193fe:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   19400:	2301      	movs	r3, #1
   19402:	40ab      	lsls	r3, r5
		} else if (ret == 0) {
   19404:	421a      	tst	r2, r3
   19406:	f47f af5b 	bne.w	192c0 <mcp2515_int_thread+0x24>
   1940a:	e74f      	b.n	192ac <mcp2515_int_thread+0x10>
   1940c:	00023698 	.word	0x00023698
   19410:	0002168c 	.word	0x0002168c
   19414:	000236b7 	.word	0x000236b7
   19418:	000236df 	.word	0x000236df

0001941c <mcp2515_set_timing>:
{
   1941c:	b570      	push	{r4, r5, r6, lr}
   1941e:	4605      	mov	r5, r0
	struct mcp2515_data *dev_data = dev->data;
   19420:	6906      	ldr	r6, [r0, #16]
{
   19422:	b08c      	sub	sp, #48	; 0x30
	if (!timing) {
   19424:	2900      	cmp	r1, #0
   19426:	d067      	beq.n	194f8 <mcp2515_set_timing+0xdc>
	if (dev_data->started) {
   19428:	f896 2142 	ldrb.w	r2, [r6, #322]	; 0x142
   1942c:	2a00      	cmp	r2, #0
   1942e:	d166      	bne.n	194fe <mcp2515_set_timing+0xe2>
	uint8_t brp = timing->prescaler - 1;
   19430:	890a      	ldrh	r2, [r1, #8]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   19432:	8808      	ldrh	r0, [r1, #0]
	uint8_t brp = timing->prescaler - 1;
   19434:	3a01      	subs	r2, #1
   19436:	b2d2      	uxtb	r2, r2
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
   19438:	b118      	cbz	r0, 19442 <mcp2515_set_timing+0x26>
		dev_data->sjw = (timing->sjw - 1) << 6;
   1943a:	3801      	subs	r0, #1
   1943c:	0180      	lsls	r0, r0, #6
   1943e:	f886 0143 	strb.w	r0, [r6, #323]	; 0x143
	uint8_t cnf1 = dev_data->sjw | brp;
   19442:	f896 0143 	ldrb.w	r0, [r6, #323]	; 0x143
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   19446:	888c      	ldrh	r4, [r1, #4]
	uint8_t cnf1 = dev_data->sjw | brp;
   19448:	4302      	orrs	r2, r0
	const uint8_t prseg = (timing->prop_seg - 1);
   1944a:	8848      	ldrh	r0, [r1, #2]
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   1944c:	88c9      	ldrh	r1, [r1, #6]
	config_buf[2] = cnf1;
   1944e:	f88d 2016 	strb.w	r2, [sp, #22]
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
   19452:	3c01      	subs	r4, #1
	const uint8_t prseg = (timing->prop_seg - 1);
   19454:	3801      	subs	r0, #1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
   19456:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
   1945a:	f060 007f 	orn	r0, r0, #127	; 0x7f
	config_buf[3] = caninte;
   1945e:	223f      	movs	r2, #63	; 0x3f
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   19460:	f506 7696 	add.w	r6, r6, #300	; 0x12c
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
   19464:	3901      	subs	r1, #1
	config_buf[1] = cnf2;
   19466:	f88d 0015 	strb.w	r0, [sp, #21]
	config_buf[3] = caninte;
   1946a:	f88d 2017 	strb.w	r2, [sp, #23]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1946e:	f04f 33ff 	mov.w	r3, #4294967295
   19472:	f04f 32ff 	mov.w	r2, #4294967295
   19476:	4630      	mov	r0, r6
	config_buf[0] = cnf3;
   19478:	f88d 1014 	strb.w	r1, [sp, #20]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   1947c:	f006 fe51 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   19480:	f642 0302 	movw	r3, #10242	; 0x2802
	struct spi_buf tx_buf[] = {
   19484:	aa05      	add	r2, sp, #20
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
   19486:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct spi_buf tx_buf[] = {
   1948a:	920a      	str	r2, [sp, #40]	; 0x28
   1948c:	ab04      	add	r3, sp, #16
   1948e:	2204      	movs	r2, #4
   19490:	9308      	str	r3, [sp, #32]
   19492:	920b      	str	r2, [sp, #44]	; 0x2c
   19494:	2302      	movs	r3, #2
	const struct spi_buf_set tx = {
   19496:	aa08      	add	r2, sp, #32
	return spi_write_dt(&dev_cfg->bus, &tx);
   19498:	6868      	ldr	r0, [r5, #4]
	struct spi_buf tx_buf[] = {
   1949a:	9309      	str	r3, [sp, #36]	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
   1949c:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
   1949e:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return spi_write_dt(&dev_cfg->bus, &tx);
   194a2:	f006 ff92 	bl	203ca <spi_write_dt>
	if (ret < 0) {
   194a6:	1e04      	subs	r4, r0, #0
   194a8:	da10      	bge.n	194cc <mcp2515_set_timing+0xb0>
		LOG_ERR("Failed to write the configuration [%d]", ret);
   194aa:	4b16      	ldr	r3, [pc, #88]	; (19504 <mcp2515_set_timing+0xe8>)
   194ac:	9403      	str	r4, [sp, #12]
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   194ae:	9302      	str	r3, [sp, #8]
   194b0:	2300      	movs	r3, #0
   194b2:	e9cd 3300 	strd	r3, r3, [sp]
   194b6:	4914      	ldr	r1, [pc, #80]	; (19508 <mcp2515_set_timing+0xec>)
   194b8:	2201      	movs	r2, #1
   194ba:	4618      	mov	r0, r3
   194bc:	f006 fe22 	bl	20104 <z_log_msg_runtime_create.constprop.0>
	k_mutex_unlock(&dev_data->mutex);
   194c0:	4630      	mov	r0, r6
   194c2:	f006 fe30 	bl	20126 <k_mutex_unlock.isra.0>
}
   194c6:	4620      	mov	r0, r4
   194c8:	b00c      	add	sp, #48	; 0x30
   194ca:	bd70      	pop	{r4, r5, r6, pc}
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
   194cc:	2364      	movs	r3, #100	; 0x64
   194ce:	6868      	ldr	r0, [r5, #4]
   194d0:	461a      	mov	r2, r3
   194d2:	2160      	movs	r1, #96	; 0x60
   194d4:	f006 ff84 	bl	203e0 <mcp2515_cmd_bit_modify.isra.0>
	if (ret < 0) {
   194d8:	1e04      	subs	r4, r0, #0
   194da:	da02      	bge.n	194e2 <mcp2515_set_timing+0xc6>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
   194dc:	4b0b      	ldr	r3, [pc, #44]	; (1950c <mcp2515_set_timing+0xf0>)
   194de:	9403      	str	r4, [sp, #12]
   194e0:	e7e5      	b.n	194ae <mcp2515_set_timing+0x92>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
   194e2:	2360      	movs	r3, #96	; 0x60
   194e4:	6868      	ldr	r0, [r5, #4]
   194e6:	461a      	mov	r2, r3
   194e8:	2170      	movs	r1, #112	; 0x70
   194ea:	f006 ff79 	bl	203e0 <mcp2515_cmd_bit_modify.isra.0>
	if (ret < 0) {
   194ee:	1e04      	subs	r4, r0, #0
   194f0:	dae6      	bge.n	194c0 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
   194f2:	4b07      	ldr	r3, [pc, #28]	; (19510 <mcp2515_set_timing+0xf4>)
   194f4:	9403      	str	r4, [sp, #12]
   194f6:	e7da      	b.n	194ae <mcp2515_set_timing+0x92>
		return -EINVAL;
   194f8:	f06f 0415 	mvn.w	r4, #21
   194fc:	e7e3      	b.n	194c6 <mcp2515_set_timing+0xaa>
		return -EBUSY;
   194fe:	f06f 040f 	mvn.w	r4, #15
   19502:	e7e0      	b.n	194c6 <mcp2515_set_timing+0xaa>
   19504:	000236f5 	.word	0x000236f5
   19508:	0002168c 	.word	0x0002168c
   1950c:	0002371c 	.word	0x0002371c
   19510:	0002373a 	.word	0x0002373a

00019514 <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
   19514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19518:	4605      	mov	r5, r0
	const struct mcp2515_config *dev_cfg = dev->config;
   1951a:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
   1951c:	6907      	ldr	r7, [r0, #16]
{
   1951e:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_sem_init(sem, initial_count, limit);
   19520:	2201      	movs	r2, #1
   19522:	2100      	movs	r1, #0
   19524:	f107 0094 	add.w	r0, r7, #148	; 0x94
   19528:	f007 fafb 	bl	20b22 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
   1952c:	f507 7096 	add.w	r0, r7, #300	; 0x12c
   19530:	f007 fa5d 	bl	209ee <z_impl_k_mutex_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
   19534:	2201      	movs	r2, #1
   19536:	4611      	mov	r1, r2
   19538:	f107 00ac 	add.w	r0, r7, #172	; 0xac
   1953c:	f007 faf1 	bl	20b22 <z_impl_k_sem_init>

	k_sem_init(&dev_data->int_sem, 0, 1);
	k_mutex_init(&dev_data->mutex);
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);

	if (dev_cfg->phy != NULL) {
   19540:	6b20      	ldr	r0, [r4, #48]	; 0x30
   19542:	b180      	cbz	r0, 19566 <mcp2515_init+0x52>
   19544:	f007 f967 	bl	20816 <z_device_is_ready>
   19548:	4603      	mov	r3, r0
		if (!device_is_ready(dev_cfg->phy)) {
   1954a:	b960      	cbnz	r0, 19566 <mcp2515_init+0x52>
			LOG_ERR("CAN transceiver not ready");
   1954c:	4a7c      	ldr	r2, [pc, #496]	; (19740 <mcp2515_init+0x22c>)
   1954e:	497d      	ldr	r1, [pc, #500]	; (19744 <mcp2515_init+0x230>)
   19550:	9300      	str	r3, [sp, #0]
   19552:	e9cd 3201 	strd	r3, r2, [sp, #4]
   19556:	2201      	movs	r2, #1
   19558:	f006 fdd4 	bl	20104 <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
   1955c:	f06f 0012 	mvn.w	r0, #18
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
   19560:	b00e      	add	sp, #56	; 0x38
   19562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
   19566:	6820      	ldr	r0, [r4, #0]
   19568:	f007 f955 	bl	20816 <z_device_is_ready>
   1956c:	b968      	cbnz	r0, 1958a <mcp2515_init+0x76>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
   1956e:	6823      	ldr	r3, [r4, #0]
   19570:	4974      	ldr	r1, [pc, #464]	; (19744 <mcp2515_init+0x230>)
   19572:	681b      	ldr	r3, [r3, #0]
   19574:	9303      	str	r3, [sp, #12]
   19576:	4b74      	ldr	r3, [pc, #464]	; (19748 <mcp2515_init+0x234>)
   19578:	9302      	str	r3, [sp, #8]
   1957a:	2300      	movs	r3, #0
   1957c:	e9cd 3300 	strd	r3, r3, [sp]
   19580:	2201      	movs	r2, #1
   19582:	4618      	mov	r0, r3
   19584:	f006 fdbe 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   19588:	e7e8      	b.n	1955c <mcp2515_init+0x48>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
   1958a:	68e3      	ldr	r3, [r4, #12]
   1958c:	b123      	cbz	r3, 19598 <mcp2515_init+0x84>
	    !device_is_ready(spec->config.cs->gpio.port)) {
   1958e:	6818      	ldr	r0, [r3, #0]
   19590:	f007 f941 	bl	20816 <z_device_is_ready>
	if (spec->config.cs &&
   19594:	2800      	cmp	r0, #0
   19596:	d0ea      	beq.n	1956e <mcp2515_init+0x5a>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
   19598:	23c0      	movs	r3, #192	; 0xc0
   1959a:	f88d 3020 	strb.w	r3, [sp, #32]
	const struct spi_buf tx_buf = {
   1959e:	ab08      	add	r3, sp, #32
   195a0:	2601      	movs	r6, #1
   195a2:	9309      	str	r3, [sp, #36]	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
   195a4:	6868      	ldr	r0, [r5, #4]
	const struct spi_buf tx_buf = {
   195a6:	960a      	str	r6, [sp, #40]	; 0x28
	const struct spi_buf_set tx = {
   195a8:	ab09      	add	r3, sp, #36	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
   195aa:	a90b      	add	r1, sp, #44	; 0x2c
	const struct spi_buf_set tx = {
   195ac:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	return spi_write_dt(&dev_cfg->bus, &tx);
   195b0:	f006 ff0b 	bl	203ca <spi_write_dt>
	if (mcp2515_cmd_soft_reset(dev)) {
   195b4:	b160      	cbz	r0, 195d0 <mcp2515_init+0xbc>
		LOG_ERR("Soft-reset failed");
   195b6:	4b65      	ldr	r3, [pc, #404]	; (1974c <mcp2515_init+0x238>)
   195b8:	9302      	str	r3, [sp, #8]
   195ba:	2300      	movs	r3, #0
   195bc:	e9cd 3300 	strd	r3, r3, [sp]
   195c0:	4632      	mov	r2, r6
			LOG_ERR("Can't find timing for given param");
   195c2:	4618      	mov	r0, r3
   195c4:	495f      	ldr	r1, [pc, #380]	; (19744 <mcp2515_init+0x230>)
   195c6:	f006 fd9d 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -EIO;
   195ca:	f06f 0004 	mvn.w	r0, #4
   195ce:	e7c7      	b.n	19560 <mcp2515_init+0x4c>
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
   195d0:	6920      	ldr	r0, [r4, #16]
   195d2:	f007 f920 	bl	20816 <z_device_is_ready>
   195d6:	4603      	mov	r3, r0
   195d8:	b908      	cbnz	r0, 195de <mcp2515_init+0xca>
		LOG_ERR("Interrupt GPIO port not ready");
   195da:	4a5d      	ldr	r2, [pc, #372]	; (19750 <mcp2515_init+0x23c>)
   195dc:	e7b7      	b.n	1954e <mcp2515_init+0x3a>
				  spec->dt_flags | extra_flags);
   195de:	8ae3      	ldrh	r3, [r4, #22]
	return gpio_pin_configure(spec->port,
   195e0:	6920      	ldr	r0, [r4, #16]
				  spec->pin,
   195e2:	7d21      	ldrb	r1, [r4, #20]
	return gpio_pin_configure(spec->port,
   195e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
   195e8:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
   195ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   195f0:	f013 0f01 	tst.w	r3, #1
   195f4:	f8dc 3000 	ldr.w	r3, [ip]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   195f8:	fa06 f601 	lsl.w	r6, r6, r1
   195fc:	bf14      	ite	ne
   195fe:	4333      	orrne	r3, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19600:	43b3      	biceq	r3, r6
   19602:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
   19606:	f8de 3000 	ldr.w	r3, [lr]
   1960a:	4798      	blx	r3
	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
   1960c:	b160      	cbz	r0, 19628 <mcp2515_init+0x114>
		LOG_ERR("Unable to configure interrupt GPIO");
   1960e:	4b51      	ldr	r3, [pc, #324]	; (19754 <mcp2515_init+0x240>)
   19610:	9302      	str	r3, [sp, #8]
   19612:	2300      	movs	r3, #0
   19614:	e9cd 3300 	strd	r3, r3, [sp]
   19618:	494a      	ldr	r1, [pc, #296]	; (19744 <mcp2515_init+0x230>)
   1961a:	2201      	movs	r2, #1
   1961c:	4618      	mov	r0, r3
   1961e:	f006 fd71 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   19622:	f06f 0015 	mvn.w	r0, #21
   19626:	e79b      	b.n	19560 <mcp2515_init+0x4c>
			   BIT(dev_cfg->int_gpio.pin));
   19628:	7d23      	ldrb	r3, [r4, #20]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
   1962a:	4a4b      	ldr	r2, [pc, #300]	; (19758 <mcp2515_init+0x244>)
   1962c:	f04f 0801 	mov.w	r8, #1
   19630:	fa08 f303 	lsl.w	r3, r8, r3
	callback->pin_mask = pin_mask;
   19634:	e9c7 2301 	strd	r2, r3, [r7, #4]
	if (gpio_add_callback(dev_cfg->int_gpio.port,
   19638:	6920      	ldr	r0, [r4, #16]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
   1963a:	6883      	ldr	r3, [r0, #8]
   1963c:	69db      	ldr	r3, [r3, #28]
   1963e:	2b00      	cmp	r3, #0
   19640:	d0ef      	beq.n	19622 <mcp2515_init+0x10e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
   19642:	4642      	mov	r2, r8
   19644:	4639      	mov	r1, r7
   19646:	4798      	blx	r3
   19648:	2800      	cmp	r0, #0
   1964a:	d1ea      	bne.n	19622 <mcp2515_init+0x10e>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
   1964c:	6920      	ldr	r0, [r4, #16]
   1964e:	7d21      	ldrb	r1, [r4, #20]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   19650:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   19652:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   19654:	6812      	ldr	r2, [r2, #0]
   19656:	fa08 f601 	lsl.w	r6, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   1965a:	4216      	tst	r6, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
   1965c:	699e      	ldr	r6, [r3, #24]
   1965e:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
   19662:	bf14      	ite	ne
   19664:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
   19668:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
   1966c:	47b0      	blx	r6
	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
   1966e:	4606      	mov	r6, r0
   19670:	2800      	cmp	r0, #0
   19672:	d1d6      	bne.n	19622 <mcp2515_init+0x10e>
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
   19674:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   19678:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
   1967c:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1967e:	2000      	movs	r0, #0
   19680:	2100      	movs	r1, #0
   19682:	e9cd 0106 	strd	r0, r1, [sp, #24]
   19686:	e9cd 3603 	strd	r3, r6, [sp, #12]
   1968a:	4661      	mov	r1, ip
   1968c:	4b33      	ldr	r3, [pc, #204]	; (1975c <mcp2515_init+0x248>)
   1968e:	9500      	str	r5, [sp, #0]
   19690:	f107 0010 	add.w	r0, r7, #16
   19694:	e9cd 6601 	strd	r6, r6, [sp, #4]
   19698:	f002 fd1e 	bl	1c0d8 <z_impl_k_thread_create>
	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
   1969c:	2214      	movs	r2, #20
   1969e:	4631      	mov	r1, r6
   196a0:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
   196a4:	f005 f877 	bl	1e796 <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
   196a8:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
   196ac:	2228      	movs	r2, #40	; 0x28
   196ae:	4631      	mov	r1, r6
   196b0:	f005 f871 	bl	1e796 <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
   196b4:	f887 6140 	strb.w	r6, [r7, #320]	; 0x140
	timing.sjw = dev_cfg->tq_sjw;
   196b8:	f894 3020 	ldrb.w	r3, [r4, #32]
   196bc:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (dev_cfg->sample_point && USE_SP_ALGO) {
   196c0:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   196c2:	b177      	cbz	r7, 196e2 <mcp2515_init+0x1ce>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
   196c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
		union { uintptr_t x; uint16_t val; } parm3 = { .val = sample_pnt };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_CAN_CALC_TIMING);
	}
#endif
	compiler_barrier();
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
   196c6:	463b      	mov	r3, r7
   196c8:	a90b      	add	r1, sp, #44	; 0x2c
   196ca:	4628      	mov	r0, r5
   196cc:	f7ff fbf2 	bl	18eb4 <z_impl_can_calc_timing>
		if (ret == -EINVAL) {
   196d0:	3016      	adds	r0, #22
   196d2:	d123      	bne.n	1971c <mcp2515_init+0x208>
			LOG_ERR("Can't find timing for given param");
   196d4:	4b22      	ldr	r3, [pc, #136]	; (19760 <mcp2515_init+0x24c>)
   196d6:	9600      	str	r6, [sp, #0]
   196d8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   196dc:	4642      	mov	r2, r8
   196de:	4633      	mov	r3, r6
   196e0:	e76f      	b.n	195c2 <mcp2515_init+0xae>
		timing.prop_seg = dev_cfg->tq_prop;
   196e2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   196e6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		timing.phase_seg1 = dev_cfg->tq_bs1;
   196ea:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
   196ee:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		timing.phase_seg2 = dev_cfg->tq_bs2;
   196f2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   196f6:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
   196fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   196fc:	a90b      	add	r1, sp, #44	; 0x2c
   196fe:	4628      	mov	r0, r5
   19700:	f006 fccb 	bl	2009a <can_calc_prescaler>
		if (ret) {
   19704:	b150      	cbz	r0, 1971c <mcp2515_init+0x208>
			LOG_WRN("Bitrate error: %d", ret);
   19706:	4b17      	ldr	r3, [pc, #92]	; (19764 <mcp2515_init+0x250>)
   19708:	9003      	str	r0, [sp, #12]
   1970a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1970e:	490d      	ldr	r1, [pc, #52]	; (19744 <mcp2515_init+0x230>)
   19710:	9700      	str	r7, [sp, #0]
   19712:	463b      	mov	r3, r7
   19714:	2202      	movs	r2, #2
   19716:	4638      	mov	r0, r7
   19718:	f006 fcf4 	bl	20104 <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_usleep(us);
   1971c:	2080      	movs	r0, #128	; 0x80
   1971e:	f003 fb69 	bl	1cdf4 <z_impl_k_usleep>
static inline int z_impl_can_set_timing(const struct device *dev,
					const struct can_timing *timing)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;

	return api->set_timing(dev, timing);
   19722:	68ab      	ldr	r3, [r5, #8]
   19724:	a90b      	add	r1, sp, #44	; 0x2c
   19726:	691b      	ldr	r3, [r3, #16]
   19728:	4628      	mov	r0, r5
   1972a:	4798      	blx	r3
	if (ret) {
   1972c:	2800      	cmp	r0, #0
   1972e:	f47f af17 	bne.w	19560 <mcp2515_init+0x4c>

static inline int z_impl_can_set_mode(const struct device *dev, can_mode_t mode)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;

	return api->set_mode(dev, mode);
   19732:	68ab      	ldr	r3, [r5, #8]
   19734:	4601      	mov	r1, r0
   19736:	68db      	ldr	r3, [r3, #12]
   19738:	4628      	mov	r0, r5
   1973a:	4798      	blx	r3
	return ret;
   1973c:	e710      	b.n	19560 <mcp2515_init+0x4c>
   1973e:	bf00      	nop
   19740:	00023758 	.word	0x00023758
   19744:	0002168c 	.word	0x0002168c
   19748:	00023772 	.word	0x00023772
   1974c:	00023787 	.word	0x00023787
   19750:	00023799 	.word	0x00023799
   19754:	000237b7 	.word	0x000237b7
   19758:	0002037f 	.word	0x0002037f
   1975c:	0001929d 	.word	0x0001929d
   19760:	000237da 	.word	0x000237da
   19764:	000237fc 	.word	0x000237fc

00019768 <mcp2515_set_mode_int>:
{
   19768:	b570      	push	{r4, r5, r6, lr}
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   1976a:	014b      	lsls	r3, r1, #5
{
   1976c:	4605      	mov	r5, r0
   1976e:	b086      	sub	sp, #24
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   19770:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
   19774:	22e0      	movs	r2, #224	; 0xe0
   19776:	6840      	ldr	r0, [r0, #4]
{
   19778:	460e      	mov	r6, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
   1977a:	210f      	movs	r1, #15
   1977c:	f006 fe30 	bl	203e0 <mcp2515_cmd_bit_modify.isra.0>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   19780:	6868      	ldr	r0, [r5, #4]
   19782:	2301      	movs	r3, #1
   19784:	f10d 0217 	add.w	r2, sp, #23
   19788:	210e      	movs	r1, #14
   1978a:	f006 fdfc 	bl	20386 <mcp2515_cmd_read_reg.isra.0>
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
   1978e:	2465      	movs	r4, #101	; 0x65
   19790:	f89d 3017 	ldrb.w	r3, [sp, #23]
		!= mcp2515_mode) {
   19794:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
   19798:	d101      	bne.n	1979e <mcp2515_set_mode_int+0x36>
	return 0;
   1979a:	2000      	movs	r0, #0
   1979c:	e00d      	b.n	197ba <mcp2515_set_mode_int+0x52>
		if (--retries < 0) {
   1979e:	3c01      	subs	r4, #1
   197a0:	d10d      	bne.n	197be <mcp2515_set_mode_int+0x56>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
   197a2:	4b0d      	ldr	r3, [pc, #52]	; (197d8 <mcp2515_set_mode_int+0x70>)
   197a4:	490d      	ldr	r1, [pc, #52]	; (197dc <mcp2515_set_mode_int+0x74>)
   197a6:	9400      	str	r4, [sp, #0]
   197a8:	e9cd 4301 	strd	r4, r3, [sp, #4]
   197ac:	4620      	mov	r0, r4
   197ae:	4623      	mov	r3, r4
   197b0:	2201      	movs	r2, #1
   197b2:	f006 fca7 	bl	20104 <z_log_msg_runtime_create.constprop.0>
			return -EIO;
   197b6:	f06f 0004 	mvn.w	r0, #4
}
   197ba:	b006      	add	sp, #24
   197bc:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
   197be:	2100      	movs	r1, #0
   197c0:	2001      	movs	r0, #1
   197c2:	f003 fafd 	bl	1cdc0 <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
   197c6:	6868      	ldr	r0, [r5, #4]
   197c8:	2301      	movs	r3, #1
   197ca:	f10d 0217 	add.w	r2, sp, #23
   197ce:	210e      	movs	r1, #14
   197d0:	f006 fdd9 	bl	20386 <mcp2515_cmd_read_reg.isra.0>
   197d4:	e7dc      	b.n	19790 <mcp2515_set_mode_int+0x28>
   197d6:	bf00      	nop
   197d8:	0002380e 	.word	0x0002380e
   197dc:	0002168c 	.word	0x0002168c

000197e0 <mcp2515_stop>:
{
   197e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct mcp2515_data *dev_data = dev->data;
   197e4:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct mcp2515_config *dev_cfg = dev->config;
   197e8:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (!dev_data->started) {
   197ec:	f898 3142 	ldrb.w	r3, [r8, #322]	; 0x142
{
   197f0:	b085      	sub	sp, #20
   197f2:	4606      	mov	r6, r0
	if (!dev_data->started) {
   197f4:	2b00      	cmp	r3, #0
   197f6:	d048      	beq.n	1988a <mcp2515_stop+0xaa>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   197f8:	f508 7796 	add.w	r7, r8, #300	; 0x12c
   197fc:	f04f 32ff 	mov.w	r2, #4294967295
   19800:	f04f 33ff 	mov.w	r3, #4294967295
   19804:	4638      	mov	r0, r7
   19806:	f006 fc8c 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
   1980a:	2300      	movs	r3, #0
   1980c:	2208      	movs	r2, #8
   1980e:	2130      	movs	r1, #48	; 0x30
   19810:	6870      	ldr	r0, [r6, #4]
   19812:	f006 fde5 	bl	203e0 <mcp2515_cmd_bit_modify.isra.0>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
   19816:	2104      	movs	r1, #4
   19818:	4630      	mov	r0, r6
   1981a:	f7ff ffa5 	bl	19768 <mcp2515_set_mode_int>
	if (ret < 0) {
   1981e:	1e04      	subs	r4, r0, #0
   19820:	f04f 0500 	mov.w	r5, #0
   19824:	da11      	bge.n	1984a <mcp2515_stop+0x6a>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
   19826:	4b1b      	ldr	r3, [pc, #108]	; (19894 <mcp2515_stop+0xb4>)
   19828:	491b      	ldr	r1, [pc, #108]	; (19898 <mcp2515_stop+0xb8>)
   1982a:	9403      	str	r4, [sp, #12]
   1982c:	e9cd 5301 	strd	r5, r3, [sp, #4]
   19830:	4628      	mov	r0, r5
   19832:	9500      	str	r5, [sp, #0]
   19834:	462b      	mov	r3, r5
   19836:	2201      	movs	r2, #1
   19838:	f006 fc64 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		k_mutex_unlock(&dev_data->mutex);
   1983c:	4638      	mov	r0, r7
   1983e:	f006 fc72 	bl	20126 <k_mutex_unlock.isra.0>
}
   19842:	4620      	mov	r0, r4
   19844:	b005      	add	sp, #20
   19846:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_mutex_unlock(&dev_data->mutex);
   1984a:	4638      	mov	r0, r7
	dev_data->started = false;
   1984c:	f888 5142 	strb.w	r5, [r8, #322]	; 0x142
	k_mutex_unlock(&dev_data->mutex);
   19850:	f006 fc69 	bl	20126 <k_mutex_unlock.isra.0>
		mcp2515_tx_done(dev, i, -ENETDOWN);
   19854:	4630      	mov	r0, r6
   19856:	f06f 0272 	mvn.w	r2, #114	; 0x72
   1985a:	4629      	mov	r1, r5
   1985c:	f006 fc65 	bl	2012a <mcp2515_tx_done>
	if (dev_cfg->phy != NULL) {
   19860:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
   19864:	b1a0      	cbz	r0, 19890 <mcp2515_stop+0xb0>
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
   19866:	6883      	ldr	r3, [r0, #8]
   19868:	685b      	ldr	r3, [r3, #4]
   1986a:	4798      	blx	r3
		if (ret != 0) {
   1986c:	4604      	mov	r4, r0
   1986e:	2800      	cmp	r0, #0
   19870:	d0e7      	beq.n	19842 <mcp2515_stop+0x62>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
   19872:	4b0a      	ldr	r3, [pc, #40]	; (1989c <mcp2515_stop+0xbc>)
   19874:	9003      	str	r0, [sp, #12]
   19876:	e9cd 5301 	strd	r5, r3, [sp, #4]
   1987a:	4907      	ldr	r1, [pc, #28]	; (19898 <mcp2515_stop+0xb8>)
   1987c:	9500      	str	r5, [sp, #0]
   1987e:	462b      	mov	r3, r5
   19880:	2201      	movs	r2, #1
   19882:	4628      	mov	r0, r5
   19884:	f006 fc3e 	bl	20104 <z_log_msg_runtime_create.constprop.0>
			return ret;
   19888:	e7db      	b.n	19842 <mcp2515_stop+0x62>
		return -EALREADY;
   1988a:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1988e:	e7d8      	b.n	19842 <mcp2515_stop+0x62>
	return 0;
   19890:	4604      	mov	r4, r0
   19892:	e7d6      	b.n	19842 <mcp2515_stop+0x62>
   19894:	0002383b 	.word	0x0002383b
   19898:	0002168c 	.word	0x0002168c
   1989c:	00023863 	.word	0x00023863

000198a0 <mcp2515_start>:
{
   198a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct mcp2515_data *dev_data = dev->data;
   198a4:	6907      	ldr	r7, [r0, #16]
	const struct mcp2515_config *dev_cfg = dev->config;
   198a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (dev_data->started) {
   198aa:	f897 6142 	ldrb.w	r6, [r7, #322]	; 0x142
{
   198ae:	4605      	mov	r5, r0
	if (dev_data->started) {
   198b0:	2e00      	cmp	r6, #0
   198b2:	d13f      	bne.n	19934 <mcp2515_start+0x94>
	if (dev_cfg->phy != NULL) {
   198b4:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   198b8:	b198      	cbz	r0, 198e2 <mcp2515_start+0x42>
	return api->enable(dev);
   198ba:	6883      	ldr	r3, [r0, #8]
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	4798      	blx	r3
		if (ret != 0) {
   198c0:	4604      	mov	r4, r0
   198c2:	b170      	cbz	r0, 198e2 <mcp2515_start+0x42>
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
   198c4:	4b1d      	ldr	r3, [pc, #116]	; (1993c <mcp2515_start+0x9c>)
   198c6:	9003      	str	r0, [sp, #12]
   198c8:	e9cd 6301 	strd	r6, r3, [sp, #4]
   198cc:	491c      	ldr	r1, [pc, #112]	; (19940 <mcp2515_start+0xa0>)
   198ce:	9600      	str	r6, [sp, #0]
   198d0:	4633      	mov	r3, r6
   198d2:	2201      	movs	r2, #1
   198d4:	4630      	mov	r0, r6
   198d6:	f006 fc15 	bl	20104 <z_log_msg_runtime_create.constprop.0>
}
   198da:	4620      	mov	r0, r4
   198dc:	b004      	add	sp, #16
   198de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   198e2:	f507 7696 	add.w	r6, r7, #300	; 0x12c
   198e6:	f04f 32ff 	mov.w	r2, #4294967295
   198ea:	f04f 33ff 	mov.w	r3, #4294967295
   198ee:	4630      	mov	r0, r6
   198f0:	f006 fc17 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
   198f4:	f897 1141 	ldrb.w	r1, [r7, #321]	; 0x141
   198f8:	4628      	mov	r0, r5
   198fa:	f7ff ff35 	bl	19768 <mcp2515_set_mode_int>
	if (ret < 0) {
   198fe:	1e04      	subs	r4, r0, #0
   19900:	da14      	bge.n	1992c <mcp2515_start+0x8c>
		LOG_ERR("Failed to set the mode [%d]", ret);
   19902:	4b10      	ldr	r3, [pc, #64]	; (19944 <mcp2515_start+0xa4>)
   19904:	9302      	str	r3, [sp, #8]
   19906:	2300      	movs	r3, #0
   19908:	4618      	mov	r0, r3
   1990a:	e9cd 3300 	strd	r3, r3, [sp]
   1990e:	490c      	ldr	r1, [pc, #48]	; (19940 <mcp2515_start+0xa0>)
   19910:	9403      	str	r4, [sp, #12]
   19912:	2201      	movs	r2, #1
   19914:	f006 fbf6 	bl	20104 <z_log_msg_runtime_create.constprop.0>
		if (dev_cfg->phy != NULL) {
   19918:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1991c:	b110      	cbz	r0, 19924 <mcp2515_start+0x84>
	return api->disable(dev);
   1991e:	6883      	ldr	r3, [r0, #8]
   19920:	685b      	ldr	r3, [r3, #4]
   19922:	4798      	blx	r3
	k_mutex_unlock(&dev_data->mutex);
   19924:	4630      	mov	r0, r6
   19926:	f006 fbfe 	bl	20126 <k_mutex_unlock.isra.0>
	return ret;
   1992a:	e7d6      	b.n	198da <mcp2515_start+0x3a>
		dev_data->started = true;
   1992c:	2301      	movs	r3, #1
   1992e:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
   19932:	e7f7      	b.n	19924 <mcp2515_start+0x84>
		return -EALREADY;
   19934:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19938:	e7cf      	b.n	198da <mcp2515_start+0x3a>
   1993a:	bf00      	nop
   1993c:	0002388a 	.word	0x0002388a
   19940:	0002168c 	.word	0x0002168c
   19944:	000238b0 	.word	0x000238b0

00019948 <random_byte_get>:
   19948:	f04f 0340 	mov.w	r3, #64	; 0x40
   1994c:	f3ef 8211 	mrs	r2, BASEPRI
   19950:	f383 8812 	msr	BASEPRI_MAX, r3
   19954:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19958:	4b09      	ldr	r3, [pc, #36]	; (19980 <random_byte_get+0x38>)
   1995a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1995e:	b161      	cbz	r1, 1997a <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19960:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   19962:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19966:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1996a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1996e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   19970:	f382 8811 	msr	BASEPRI, r2
   19974:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   19978:	4770      	bx	lr
	int retval = -EAGAIN;
   1997a:	f06f 000a 	mvn.w	r0, #10
   1997e:	e7f7      	b.n	19970 <random_byte_get+0x28>
   19980:	4000d000 	.word	0x4000d000

00019984 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19984:	b5f0      	push	{r4, r5, r6, r7, lr}
   19986:	4603      	mov	r3, r0
   19988:	4610      	mov	r0, r2
	uint32_t last  = rngp->last;
   1998a:	789c      	ldrb	r4, [r3, #2]
	uint32_t mask  = rngp->mask;
   1998c:	f893 c003 	ldrb.w	ip, [r3, #3]
	__asm__ volatile(
   19990:	f04f 0540 	mov.w	r5, #64	; 0x40
   19994:	f3ef 8211 	mrs	r2, BASEPRI
   19998:	f385 8812 	msr	BASEPRI_MAX, r5
   1999c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   199a0:	781f      	ldrb	r7, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   199a2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   199a6:	1be4      	subs	r4, r4, r7
   199a8:	ea04 040c 	and.w	r4, r4, ip
	if (available < len) {
   199ac:	42a0      	cmp	r0, r4
		len = available;
   199ae:	bf88      	it	hi
   199b0:	b2a0      	uxthhi	r0, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   199b2:	183e      	adds	r6, r7, r0
   199b4:	ea0c 0606 	and.w	r6, ip, r6
	first = rngp->first_alloc;
   199b8:	463d      	mov	r5, r7
	rngp->first_alloc = (first + len) & mask;
   199ba:	701e      	strb	r6, [r3, #0]
	__asm__ volatile(
   199bc:	f382 8811 	msr	BASEPRI, r2
   199c0:	f3bf 8f6f 	isb	sy
   199c4:	180a      	adds	r2, r1, r0
	irq_unlock(key);

	while (likely(len--)) {
   199c6:	428a      	cmp	r2, r1
   199c8:	d117      	bne.n	199fa <rng_pool_get+0x76>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   199ca:	4577      	cmp	r7, lr
   199cc:	d10d      	bne.n	199ea <rng_pool_get+0x66>
	__asm__ volatile(
   199ce:	f04f 0140 	mov.w	r1, #64	; 0x40
   199d2:	f3ef 8211 	mrs	r2, BASEPRI
   199d6:	f381 8812 	msr	BASEPRI_MAX, r1
   199da:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   199de:	7819      	ldrb	r1, [r3, #0]
   199e0:	7059      	strb	r1, [r3, #1]
	__asm__ volatile(
   199e2:	f382 8811 	msr	BASEPRI, r2
   199e6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
	available = available - len;
	if (available <= rngp->threshold) {
   199ea:	791b      	ldrb	r3, [r3, #4]
	available = available - len;
   199ec:	1a24      	subs	r4, r4, r0
	if (available <= rngp->threshold) {
   199ee:	42a3      	cmp	r3, r4
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   199f0:	bf22      	ittt	cs
   199f2:	4b06      	ldrcs	r3, [pc, #24]	; (19a0c <rng_pool_get+0x88>)
   199f4:	2201      	movcs	r2, #1
   199f6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   199f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   199fa:	195e      	adds	r6, r3, r5
		first = (first + 1) & mask;
   199fc:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   199fe:	7976      	ldrb	r6, [r6, #5]
   19a00:	f801 6b01 	strb.w	r6, [r1], #1
		first = (first + 1) & mask;
   19a04:	ea05 050c 	and.w	r5, r5, ip
   19a08:	e7dd      	b.n	199c6 <rng_pool_get+0x42>
   19a0a:	bf00      	nop
   19a0c:	4000d000 	.word	0x4000d000

00019a10 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19a10:	43db      	mvns	r3, r3
{
   19a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19a16:	f013 0501 	ands.w	r5, r3, #1
{
   19a1a:	460e      	mov	r6, r1
   19a1c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19a1e:	d004      	beq.n	19a2a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   19a20:	4823      	ldr	r0, [pc, #140]	; (19ab0 <entropy_nrf5_get_entropy_isr+0xa0>)
   19a22:	f7ff ffaf 	bl	19984 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   19a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   19a2a:	b3a2      	cbz	r2, 19a96 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   19a2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a30:	f3ef 8811 	mrs	r8, BASEPRI
   19a34:	f383 8812 	msr	BASEPRI_MAX, r3
   19a38:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   19a3c:	200d      	movs	r0, #13
   19a3e:	f7f8 fe59 	bl	126f4 <arch_irq_is_enabled>
   19a42:	4607      	mov	r7, r0
		irq_disable(IRQN);
   19a44:	200d      	movs	r0, #13
   19a46:	f7f8 fe41 	bl	126cc <arch_irq_disable>
	__asm__ volatile(
   19a4a:	f388 8811 	msr	BASEPRI, r8
   19a4e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19a52:	f8df a060 	ldr.w	sl, [pc, #96]	; 19ab4 <entropy_nrf5_get_entropy_isr+0xa4>
   19a56:	f8df 8060 	ldr.w	r8, [pc, #96]	; 19ab8 <entropy_nrf5_get_entropy_isr+0xa8>
   19a5a:	f8ca 5100 	str.w	r5, [sl, #256]	; 0x100
   19a5e:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
   19a62:	f44f 5900 	mov.w	r9, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19a66:	2301      	movs	r3, #1
   19a68:	f8ca 3000 	str.w	r3, [sl]
   19a6c:	4625      	mov	r5, r4
   19a6e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19a72:	f8da 3100 	ldr.w	r3, [sl, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   19a76:	b183      	cbz	r3, 19a9a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   19a78:	f7ff ff66 	bl	19948 <random_byte_get>
			if (byte < 0) {
   19a7c:	1e03      	subs	r3, r0, #0
   19a7e:	f8c8 9180 	str.w	r9, [r8, #384]	; 0x180
   19a82:	dbf6      	blt.n	19a72 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   19a84:	3d01      	subs	r5, #1
   19a86:	b2ad      	uxth	r5, r5
   19a88:	5573      	strb	r3, [r6, r5]
		} while (len);
   19a8a:	2d00      	cmp	r5, #0
   19a8c:	d1f1      	bne.n	19a72 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   19a8e:	b117      	cbz	r7, 19a96 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   19a90:	200d      	movs	r0, #13
   19a92:	f7f8 fe0d 	bl	126b0 <arch_irq_enable>
	return cnt;
   19a96:	4620      	mov	r0, r4
   19a98:	e7c5      	b.n	19a26 <entropy_nrf5_get_entropy_isr+0x16>
	__asm__ volatile(
   19a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   19a9e:	f3ef 8011 	mrs	r0, BASEPRI
   19aa2:	f383 8812 	msr	BASEPRI_MAX, r3
   19aa6:	f3bf 8f6f 	isb	sy
	arch_cpu_atomic_idle(key);
   19aaa:	f7f8 fda5 	bl	125f8 <arch_cpu_atomic_idle>
}
   19aae:	e7e0      	b.n	19a72 <entropy_nrf5_get_entropy_isr+0x62>
   19ab0:	200027cc 	.word	0x200027cc
   19ab4:	4000d000 	.word	0x4000d000
   19ab8:	e000e100 	.word	0xe000e100

00019abc <entropy_nrf5_get_entropy>:
{
   19abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   19ac0:	4f12      	ldr	r7, [pc, #72]	; (19b0c <entropy_nrf5_get_entropy+0x50>)
   19ac2:	460d      	mov	r5, r1
   19ac4:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19ac6:	f107 0845 	add.w	r8, r7, #69	; 0x45
	while (len) {
   19aca:	b914      	cbnz	r4, 19ad2 <entropy_nrf5_get_entropy+0x16>
}
   19acc:	4620      	mov	r0, r4
   19ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ad2:	f04f 33ff 	mov.w	r3, #4294967295
   19ad6:	f04f 32ff 	mov.w	r2, #4294967295
   19ada:	4638      	mov	r0, r7
   19adc:	f002 fcb0 	bl	1c440 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19ae0:	4622      	mov	r2, r4
   19ae2:	4629      	mov	r1, r5
   19ae4:	4640      	mov	r0, r8
   19ae6:	f7ff ff4d 	bl	19984 <rng_pool_get>
   19aea:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19aec:	4638      	mov	r0, r7
   19aee:	f002 fc81 	bl	1c3f4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   19af2:	b93e      	cbnz	r6, 19b04 <entropy_nrf5_get_entropy+0x48>
	return z_impl_k_sem_take(sem, timeout);
   19af4:	f04f 32ff 	mov.w	r2, #4294967295
   19af8:	f04f 33ff 	mov.w	r3, #4294967295
   19afc:	4804      	ldr	r0, [pc, #16]	; (19b10 <entropy_nrf5_get_entropy+0x54>)
   19afe:	f002 fc9f 	bl	1c440 <z_impl_k_sem_take>
	while (len) {
   19b02:	e7e6      	b.n	19ad2 <entropy_nrf5_get_entropy+0x16>
		len -= bytes;
   19b04:	1ba4      	subs	r4, r4, r6
   19b06:	b2a4      	uxth	r4, r4
		buf += bytes;
   19b08:	4435      	add	r5, r6
   19b0a:	e7de      	b.n	19aca <entropy_nrf5_get_entropy+0xe>
   19b0c:	2000279c 	.word	0x2000279c
   19b10:	200027b4 	.word	0x200027b4

00019b14 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19b14:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19b16:	4c19      	ldr	r4, [pc, #100]	; (19b7c <entropy_nrf5_init+0x68>)
   19b18:	2201      	movs	r2, #1
   19b1a:	4611      	mov	r1, r2
   19b1c:	4620      	mov	r0, r4
   19b1e:	f007 f800 	bl	20b22 <z_impl_k_sem_init>
   19b22:	2201      	movs	r2, #1
   19b24:	2100      	movs	r1, #0
   19b26:	f104 0018 	add.w	r0, r4, #24
   19b2a:	f006 fffa 	bl	20b22 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   19b2e:	f240 4307 	movw	r3, #1031	; 0x407
   19b32:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   19b36:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   19b3a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   19b3c:	230c      	movs	r3, #12
   19b3e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   19b42:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   19b44:	4b0e      	ldr	r3, [pc, #56]	; (19b80 <entropy_nrf5_init+0x6c>)
   19b46:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   19b4a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   19b4e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19b52:	f022 0201 	bic.w	r2, r2, #1
   19b56:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   19b5a:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   19b5c:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   19b60:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   19b64:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   19b68:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19b6a:	6019      	str	r1, [r3, #0]
   19b6c:	200d      	movs	r0, #13
   19b6e:	f7f8 fdcf 	bl	12710 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19b72:	200d      	movs	r0, #13
   19b74:	f7f8 fd9c 	bl	126b0 <arch_irq_enable>

	return 0;
}
   19b78:	4628      	mov	r0, r5
   19b7a:	bd38      	pop	{r3, r4, r5, pc}
   19b7c:	2000279c 	.word	0x2000279c
   19b80:	4000d000 	.word	0x4000d000

00019b84 <isr>:
{
   19b84:	b510      	push	{r4, lr}
	byte = random_byte_get();
   19b86:	f7ff fedf 	bl	19948 <random_byte_get>
	if (byte < 0) {
   19b8a:	2800      	cmp	r0, #0
   19b8c:	db20      	blt.n	19bd0 <isr+0x4c>
	uint8_t last  = rngp->last;
   19b8e:	4b17      	ldr	r3, [pc, #92]	; (19bec <isr+0x68>)
   19b90:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   19b94:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   19b98:	f893 1033 	ldrb.w	r1, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   19b9c:	1b14      	subs	r4, r2, r4
   19b9e:	ea31 0404 	bics.w	r4, r1, r4
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19ba2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   19ba4:	d10d      	bne.n	19bc2 <isr+0x3e>
	uint8_t last  = rngp->last;
   19ba6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   19baa:	f893 4046 	ldrb.w	r4, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   19bae:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   19bb2:	1b14      	subs	r4, r2, r4
   19bb4:	ea31 0404 	bics.w	r4, r1, r4
   19bb8:	d10b      	bne.n	19bd2 <isr+0x4e>
   19bba:	4b0d      	ldr	r3, [pc, #52]	; (19bf0 <isr+0x6c>)
   19bbc:	2201      	movs	r2, #1
   19bbe:	605a      	str	r2, [r3, #4]
}
   19bc0:	e00e      	b.n	19be0 <isr+0x5c>
	rngp->buffer[last] = byte;
   19bc2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19bc4:	3201      	adds	r2, #1
   19bc6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19bc8:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   19bcc:	f883 1032 	strb.w	r1, [r3, #50]	; 0x32
}
   19bd0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19bd2:	189c      	adds	r4, r3, r2
	rngp->last = (last + 1) & mask;
   19bd4:	3201      	adds	r2, #1
   19bd6:	4011      	ands	r1, r2
	rngp->buffer[last] = byte;
   19bd8:	f884 004a 	strb.w	r0, [r4, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   19bdc:	f883 1047 	strb.w	r1, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19be0:	4804      	ldr	r0, [pc, #16]	; (19bf4 <isr+0x70>)
}
   19be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19be6:	f002 bc05 	b.w	1c3f4 <z_impl_k_sem_give>
   19bea:	bf00      	nop
   19bec:	2000279c 	.word	0x2000279c
   19bf0:	4000d000 	.word	0x4000d000
   19bf4:	200027b4 	.word	0x200027b4

00019bf8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   19bf8:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   19bfa:	2301      	movs	r3, #1
   19bfc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19bfe:	4a0e      	ldr	r2, [pc, #56]	; (19c38 <compare_int_lock+0x40>)
   19c00:	f3bf 8f5b 	dmb	ish
   19c04:	43dc      	mvns	r4, r3
   19c06:	e852 1f00 	ldrex	r1, [r2]
   19c0a:	ea01 0504 	and.w	r5, r1, r4
   19c0e:	e842 5600 	strex	r6, r5, [r2]
   19c12:	2e00      	cmp	r6, #0
   19c14:	d1f7      	bne.n	19c06 <compare_int_lock+0xe>
   19c16:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19c1e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19c20:	4806      	ldr	r0, [pc, #24]	; (19c3c <compare_int_lock+0x44>)
   19c22:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   19c26:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19c2a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   19c2e:	420b      	tst	r3, r1
}
   19c30:	bf14      	ite	ne
   19c32:	2001      	movne	r0, #1
   19c34:	2000      	moveq	r0, #0
   19c36:	bd70      	pop	{r4, r5, r6, pc}
   19c38:	200027f4 	.word	0x200027f4
   19c3c:	40011000 	.word	0x40011000

00019c40 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
   19c40:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
   19c42:	490e      	ldr	r1, [pc, #56]	; (19c7c <sys_clock_timeout_handler+0x3c>)
   19c44:	e9d1 3400 	ldrd	r3, r4, [r1]
   19c48:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
   19c4a:	18c3      	adds	r3, r0, r3
   19c4c:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
   19c50:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
   19c54:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   19c58:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
   19c5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   19c60:	d209      	bcs.n	19c76 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   19c62:	4b07      	ldr	r3, [pc, #28]	; (19c80 <sys_clock_timeout_handler+0x40>)
   19c64:	681b      	ldr	r3, [r3, #0]
   19c66:	0a1a      	lsrs	r2, r3, #8
   19c68:	061b      	lsls	r3, r3, #24
   19c6a:	199c      	adds	r4, r3, r6
   19c6c:	4b05      	ldr	r3, [pc, #20]	; (19c84 <sys_clock_timeout_handler+0x44>)
   19c6e:	f142 0500 	adc.w	r5, r2, #0
   19c72:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
   19c76:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
   19c78:	f003 ba34 	b.w	1d0e4 <sys_clock_announce>
   19c7c:	20001b70 	.word	0x20001b70
   19c80:	200027f8 	.word	0x200027f8
   19c84:	20001b78 	.word	0x20001b78

00019c88 <compare_int_unlock>:
	if (key) {
   19c88:	b311      	cbz	r1, 19cd0 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19c8a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   19c8e:	2301      	movs	r3, #1
   19c90:	4a10      	ldr	r2, [pc, #64]	; (19cd4 <compare_int_unlock+0x4c>)
   19c92:	4083      	lsls	r3, r0
   19c94:	e852 cf00 	ldrex	ip, [r2]
   19c98:	ea4c 0c03 	orr.w	ip, ip, r3
   19c9c:	e842 c100 	strex	r1, ip, [r2]
   19ca0:	2900      	cmp	r1, #0
   19ca2:	d1f7      	bne.n	19c94 <compare_int_unlock+0xc>
   19ca4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   19ca8:	4a0b      	ldr	r2, [pc, #44]	; (19cd8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19cae:	4083      	lsls	r3, r0
   19cb0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19cb4:	4b09      	ldr	r3, [pc, #36]	; (19cdc <compare_int_unlock+0x54>)
   19cb6:	f3bf 8f5b 	dmb	ish
   19cba:	681b      	ldr	r3, [r3, #0]
   19cbc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   19cc0:	40c3      	lsrs	r3, r0
   19cc2:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19cc4:	bf42      	ittt	mi
   19cc6:	4b06      	ldrmi	r3, [pc, #24]	; (19ce0 <compare_int_unlock+0x58>)
   19cc8:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   19ccc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   19cd0:	4770      	bx	lr
   19cd2:	bf00      	nop
   19cd4:	200027f4 	.word	0x200027f4
   19cd8:	40011000 	.word	0x40011000
   19cdc:	200027f0 	.word	0x200027f0
   19ce0:	e000e100 	.word	0xe000e100

00019ce4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   19ce4:	4b0d      	ldr	r3, [pc, #52]	; (19d1c <z_nrf_rtc_timer_read+0x38>)
   19ce6:	6818      	ldr	r0, [r3, #0]
   19ce8:	0a01      	lsrs	r1, r0, #8
   19cea:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   19cec:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   19cf0:	4b0b      	ldr	r3, [pc, #44]	; (19d20 <z_nrf_rtc_timer_read+0x3c>)
   19cf2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   19cf6:	1818      	adds	r0, r3, r0
   19cf8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   19cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   19d00:	d20a      	bcs.n	19d18 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   19d02:	4b08      	ldr	r3, [pc, #32]	; (19d24 <z_nrf_rtc_timer_read+0x40>)
   19d04:	e9d3 2300 	ldrd	r2, r3, [r3]
   19d08:	4290      	cmp	r0, r2
   19d0a:	eb71 0303 	sbcs.w	r3, r1, r3
   19d0e:	d203      	bcs.n	19d18 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   19d10:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   19d14:	f141 0100 	adc.w	r1, r1, #0
}
   19d18:	4770      	bx	lr
   19d1a:	bf00      	nop
   19d1c:	200027f8 	.word	0x200027f8
   19d20:	40011000 	.word	0x40011000
   19d24:	20001b78 	.word	0x20001b78

00019d28 <compare_set>:
{
   19d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d2c:	4616      	mov	r6, r2
   19d2e:	461f      	mov	r7, r3
   19d30:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
   19d32:	f7ff ff61 	bl	19bf8 <compare_int_lock>
   19d36:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   19d38:	f7ff ffd4 	bl	19ce4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   19d3c:	42b0      	cmp	r0, r6
   19d3e:	eb71 0307 	sbcs.w	r3, r1, r7
   19d42:	d251      	bcs.n	19de8 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
   19d44:	4b3a      	ldr	r3, [pc, #232]	; (19e30 <compare_set+0x108>)
   19d46:	1a30      	subs	r0, r6, r0
   19d48:	eb67 0101 	sbc.w	r1, r7, r1
   19d4c:	4298      	cmp	r0, r3
   19d4e:	f171 0100 	sbcs.w	r1, r1, #0
   19d52:	d26a      	bcs.n	19e2a <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
   19d54:	4b37      	ldr	r3, [pc, #220]	; (19e34 <compare_set+0x10c>)
   19d56:	eb03 1304 	add.w	r3, r3, r4, lsl #4
   19d5a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   19d5e:	429f      	cmp	r7, r3
   19d60:	bf08      	it	eq
   19d62:	4296      	cmpeq	r6, r2
   19d64:	d04e      	beq.n	19e04 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   19d66:	4934      	ldr	r1, [pc, #208]	; (19e38 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19d68:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19d6c:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   19d70:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   19d74:	00ad      	lsls	r5, r5, #2
   19d76:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
   19d7a:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d7c:	b2ad      	uxth	r5, r5
   19d7e:	f006 fb59 	bl	20434 <event_clear>
	return absolute_time & COUNTER_MAX;
   19d82:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
   19d86:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
   19d8a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   19d8e:	4a2b      	ldr	r2, [pc, #172]	; (19e3c <compare_set+0x114>)
   19d90:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d92:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
   19d96:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
   19d98:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
   19d9c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   19d9e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
   19da2:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
   19da6:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
   19daa:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   19dae:	f06f 0002 	mvn.w	r0, #2
   19db2:	eba0 0008 	sub.w	r0, r0, r8
   19db6:	4460      	add	r0, ip
   19db8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
   19dbc:	4290      	cmp	r0, r2
   19dbe:	d921      	bls.n	19e04 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19dc0:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
   19dc2:	b160      	cbz	r0, 19dde <compare_set+0xb6>
     return p_reg->COUNTER;
   19dc4:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   19dc8:	eba8 000b 	sub.w	r0, r8, fp
   19dcc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
   19dd0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19dd4:	d916      	bls.n	19e04 <compare_set+0xdc>
					event_clear(chan);
   19dd6:	4620      	mov	r0, r4
   19dd8:	f006 fb2c 	bl	20434 <event_clear>
   19ddc:	4a17      	ldr	r2, [pc, #92]	; (19e3c <compare_set+0x114>)
			cc_val = now + cc_inc;
   19dde:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
   19de2:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
   19de6:	e7d9      	b.n	19d9c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   19de8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19dea:	4a15      	ldr	r2, [pc, #84]	; (19e40 <compare_set+0x118>)
   19dec:	f3bf 8f5b 	dmb	ish
   19df0:	40a3      	lsls	r3, r4
   19df2:	e852 0f00 	ldrex	r0, [r2]
   19df6:	4318      	orrs	r0, r3
   19df8:	e842 0100 	strex	r1, r0, [r2]
   19dfc:	2900      	cmp	r1, #0
   19dfe:	d1f8      	bne.n	19df2 <compare_set+0xca>
   19e00:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
   19e04:	490b      	ldr	r1, [pc, #44]	; (19e34 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
   19e06:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
   19e08:	0123      	lsls	r3, r4, #4
   19e0a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
   19e0e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
   19e12:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   19e14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19e16:	6053      	str	r3, [r2, #4]
	return ret;
   19e18:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
   19e1a:	4620      	mov	r0, r4
   19e1c:	9900      	ldr	r1, [sp, #0]
   19e1e:	f7ff ff33 	bl	19c88 <compare_int_unlock>
}
   19e22:	4628      	mov	r0, r5
   19e24:	b003      	add	sp, #12
   19e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
   19e2a:	f06f 0515 	mvn.w	r5, #21
   19e2e:	e7f4      	b.n	19e1a <compare_set+0xf2>
   19e30:	00800001 	.word	0x00800001
   19e34:	20001b60 	.word	0x20001b60
   19e38:	40011000 	.word	0x40011000
   19e3c:	007ffffd 	.word	0x007ffffd
   19e40:	200027f0 	.word	0x200027f0

00019e44 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   19e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   19e46:	4b19      	ldr	r3, [pc, #100]	; (19eac <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   19e48:	4d19      	ldr	r5, [pc, #100]	; (19eb0 <sys_clock_driver_init+0x6c>)
   19e4a:	2400      	movs	r4, #0
   19e4c:	f04f 30ff 	mov.w	r0, #4294967295
   19e50:	f04f 31ff 	mov.w	r1, #4294967295
   19e54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   19e58:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   19e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19e60:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19e64:	4b13      	ldr	r3, [pc, #76]	; (19eb4 <sys_clock_driver_init+0x70>)
   19e66:	2602      	movs	r6, #2
   19e68:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   19e6c:	2101      	movs	r1, #1
   19e6e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   19e72:	2011      	movs	r0, #17
   19e74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   19e78:	4622      	mov	r2, r4
   19e7a:	f7f8 fc49 	bl	12710 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   19e7e:	2011      	movs	r0, #17
   19e80:	f7f8 fc16 	bl	126b0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   19e84:	4a0c      	ldr	r2, [pc, #48]	; (19eb8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19e86:	2301      	movs	r3, #1
   19e88:	60ab      	str	r3, [r5, #8]
   19e8a:	602b      	str	r3, [r5, #0]
   19e8c:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   19e8e:	4b0b      	ldr	r3, [pc, #44]	; (19ebc <sys_clock_driver_init+0x78>)
   19e90:	4a0b      	ldr	r2, [pc, #44]	; (19ec0 <sys_clock_driver_init+0x7c>)
   19e92:	9300      	str	r3, [sp, #0]
   19e94:	9401      	str	r4, [sp, #4]
   19e96:	2300      	movs	r3, #0
   19e98:	4620      	mov	r0, r4
   19e9a:	f7ff ff45 	bl	19d28 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   19e9e:	4630      	mov	r0, r6
   19ea0:	f7fe fba4 	bl	185ec <z_nrf_clock_control_lf_on>

	return 0;
}
   19ea4:	4620      	mov	r0, r4
   19ea6:	b002      	add	sp, #8
   19ea8:	bd70      	pop	{r4, r5, r6, pc}
   19eaa:	bf00      	nop
   19eac:	20001b60 	.word	0x20001b60
   19eb0:	40011000 	.word	0x40011000
   19eb4:	e000e100 	.word	0xe000e100
   19eb8:	200027f4 	.word	0x200027f4
   19ebc:	00019c41 	.word	0x00019c41
   19ec0:	007fffff 	.word	0x007fffff

00019ec4 <rtc_nrf_isr>:
{
   19ec4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   19ec8:	4c2b      	ldr	r4, [pc, #172]	; (19f78 <rtc_nrf_isr+0xb4>)
   19eca:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   19ece:	0799      	lsls	r1, r3, #30
   19ed0:	d50b      	bpl.n	19eea <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19ed2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19ed6:	b143      	cbz	r3, 19eea <rtc_nrf_isr+0x26>
		overflow_cnt++;
   19ed8:	4a28      	ldr	r2, [pc, #160]	; (19f7c <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19eda:	2300      	movs	r3, #0
   19edc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19ee0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19ee4:	6813      	ldr	r3, [r2, #0]
   19ee6:	3301      	adds	r3, #1
   19ee8:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   19eea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   19eee:	03da      	lsls	r2, r3, #15
   19ef0:	d523      	bpl.n	19f3a <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19ef2:	f3bf 8f5b 	dmb	ish
   19ef6:	4b22      	ldr	r3, [pc, #136]	; (19f80 <rtc_nrf_isr+0xbc>)
   19ef8:	e853 2f00 	ldrex	r2, [r3]
   19efc:	f022 0101 	bic.w	r1, r2, #1
   19f00:	e843 1000 	strex	r0, r1, [r3]
   19f04:	2800      	cmp	r0, #0
   19f06:	d1f7      	bne.n	19ef8 <rtc_nrf_isr+0x34>
   19f08:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
   19f0c:	07d3      	lsls	r3, r2, #31
   19f0e:	d402      	bmi.n	19f16 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19f10:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   19f14:	b18b      	cbz	r3, 19f3a <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19f16:	2500      	movs	r5, #0
   19f18:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   19f1c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
   19f20:	f7ff fee0 	bl	19ce4 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19f24:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19f28:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   19f2a:	4b16      	ldr	r3, [pc, #88]	; (19f84 <rtc_nrf_isr+0xc0>)
   19f2c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   19f30:	42b0      	cmp	r0, r6
   19f32:	41b9      	sbcs	r1, r7
   19f34:	d204      	bcs.n	19f40 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19f36:	f382 8810 	msr	PRIMASK, r2
}
   19f3a:	b003      	add	sp, #12
   19f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   19f40:	f04f 38ff 	mov.w	r8, #4294967295
   19f44:	f04f 39ff 	mov.w	r9, #4294967295
   19f48:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
   19f4c:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
   19f50:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
   19f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   19f56:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   19f5a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   19f5e:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   19f62:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   19f66:	2900      	cmp	r1, #0
   19f68:	d0e7      	beq.n	19f3a <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
   19f6a:	9000      	str	r0, [sp, #0]
   19f6c:	4632      	mov	r2, r6
   19f6e:	463b      	mov	r3, r7
   19f70:	4628      	mov	r0, r5
   19f72:	4788      	blx	r1
   19f74:	e7e1      	b.n	19f3a <rtc_nrf_isr+0x76>
   19f76:	bf00      	nop
   19f78:	40011000 	.word	0x40011000
   19f7c:	200027f8 	.word	0x200027f8
   19f80:	200027f0 	.word	0x200027f0
   19f84:	20001b60 	.word	0x20001b60

00019f88 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
   19f88:	1c43      	adds	r3, r0, #1
{
   19f8a:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
   19f8c:	d022      	beq.n	19fd4 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   19f8e:	2801      	cmp	r0, #1
   19f90:	dd22      	ble.n	19fd8 <sys_clock_set_timeout+0x50>
   19f92:	4a12      	ldr	r2, [pc, #72]	; (19fdc <sys_clock_set_timeout+0x54>)
   19f94:	4b12      	ldr	r3, [pc, #72]	; (19fe0 <sys_clock_set_timeout+0x58>)
   19f96:	4290      	cmp	r0, r2
   19f98:	bfd4      	ite	le
   19f9a:	4604      	movle	r4, r0
   19f9c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19f9e:	f7ff fea1 	bl	19ce4 <z_nrf_rtc_timer_read>
   19fa2:	4b10      	ldr	r3, [pc, #64]	; (19fe4 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
   19fa4:	490e      	ldr	r1, [pc, #56]	; (19fe0 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   19fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
   19faa:	1a80      	subs	r0, r0, r2
		cyc = 0;
   19fac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   19fb0:	bf28      	it	cs
   19fb2:	2400      	movcs	r4, #0
	cyc += unannounced;
   19fb4:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
   19fb6:	428c      	cmp	r4, r1
   19fb8:	bf28      	it	cs
   19fba:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
   19fbc:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19fbe:	490a      	ldr	r1, [pc, #40]	; (19fe8 <sys_clock_set_timeout+0x60>)
   19fc0:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   19fc2:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   19fc6:	9001      	str	r0, [sp, #4]
   19fc8:	f143 0300 	adc.w	r3, r3, #0
   19fcc:	f7ff feac 	bl	19d28 <compare_set>
}
   19fd0:	b002      	add	sp, #8
   19fd2:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
   19fd4:	4c02      	ldr	r4, [pc, #8]	; (19fe0 <sys_clock_set_timeout+0x58>)
   19fd6:	e7e2      	b.n	19f9e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
   19fd8:	2401      	movs	r4, #1
   19fda:	e7e0      	b.n	19f9e <sys_clock_set_timeout+0x16>
   19fdc:	007ffffe 	.word	0x007ffffe
   19fe0:	007fffff 	.word	0x007fffff
   19fe4:	20001b70 	.word	0x20001b70
   19fe8:	00019c41 	.word	0x00019c41

00019fec <sys_clock_elapsed>:
{
   19fec:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   19fee:	f7ff fe79 	bl	19ce4 <z_nrf_rtc_timer_read>
   19ff2:	4b02      	ldr	r3, [pc, #8]	; (19ffc <sys_clock_elapsed+0x10>)
   19ff4:	681b      	ldr	r3, [r3, #0]
}
   19ff6:	1ac0      	subs	r0, r0, r3
   19ff8:	bd08      	pop	{r3, pc}
   19ffa:	bf00      	nop
   19ffc:	20001b70 	.word	0x20001b70

0001a000 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
   1a000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        case 1: return NRF_P1;
   1a004:	4e2d      	ldr	r6, [pc, #180]	; (1a0bc <pinctrl_configure_pins+0xbc>)
   1a006:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a00a:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1a00c:	4281      	cmp	r1, r0
   1a00e:	d102      	bne.n	1a016 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
   1a010:	2000      	movs	r0, #0
}
   1a012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1a016:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
   1a018:	f005 037f 	and.w	r3, r5, #127	; 0x7f
			pin = 0xFFFFFFFFU;
   1a01c:	2b7f      	cmp	r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
   1a01e:	f3c5 2443 	ubfx	r4, r5, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
   1a022:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
   1a026:	bf08      	it	eq
   1a028:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
   1a02c:	2d05      	cmp	r5, #5
   1a02e:	d017      	beq.n	1a060 <pinctrl_configure_pins+0x60>
   1a030:	2d06      	cmp	r5, #6
   1a032:	d019      	beq.n	1a068 <pinctrl_configure_pins+0x68>
   1a034:	2d04      	cmp	r5, #4
   1a036:	d13d      	bne.n	1a0b4 <pinctrl_configure_pins+0xb4>
			NRF_PSEL_SPIM(reg, SCK) = pin;
   1a038:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1a03c:	2500      	movs	r5, #0
    return pin_number >> 5;
   1a03e:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
   1a042:	f1be 0f01 	cmp.w	lr, #1
   1a046:	bf14      	ite	ne
   1a048:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
   1a04c:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
   1a04e:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1a052:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
   1a056:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
   1a05a:	f04f 0e01 	mov.w	lr, #1
   1a05e:	e007      	b.n	1a070 <pinctrl_configure_pins+0x70>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
   1a060:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a064:	2501      	movs	r5, #1
   1a066:	e7ea      	b.n	1a03e <pinctrl_configure_pins+0x3e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
   1a068:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, MISO) = pin;
   1a06a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
   1a06e:	46ae      	mov	lr, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
   1a070:	f850 9b04 	ldr.w	r9, [r0], #4
   1a074:	f409 5800 	and.w	r8, r9, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a078:	f1b8 0f00 	cmp.w	r8, #0
    *p_pin = pin_number & 0x1F;
   1a07c:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
   1a080:	ea4f 1353 	mov.w	r3, r3, lsr #5
   1a084:	bf1c      	itt	ne
   1a086:	2501      	movne	r5, #1
   1a088:	f04f 0e00 	movne.w	lr, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
   1a08c:	f3c9 19c1 	ubfx	r9, r9, #7, #2
        case 0: return NRF_P0;
   1a090:	2b01      	cmp	r3, #1
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
   1a092:	ea4f 2304 	mov.w	r3, r4, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a096:	ea43 0389 	orr.w	r3, r3, r9, lsl #2
        case 0: return NRF_P0;
   1a09a:	bf0c      	ite	eq
   1a09c:	46b0      	moveq	r8, r6
   1a09e:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a0a2:	ea43 030e 	orr.w	r3, r3, lr
    reg->PIN_CNF[pin_number] = cnf;
   1a0a6:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1a0aa:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
   1a0ae:	f848 302c 	str.w	r3, [r8, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
   1a0b2:	e7ab      	b.n	1a00c <pinctrl_configure_pins+0xc>
		switch (NRF_GET_FUN(pins[i])) {
   1a0b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a0b8:	e7ab      	b.n	1a012 <pinctrl_configure_pins+0x12>
   1a0ba:	bf00      	nop
   1a0bc:	50000300 	.word	0x50000300

0001a0c0 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   1a0c0:	4602      	mov	r2, r0
   1a0c2:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   1a0c4:	4801      	ldr	r0, [pc, #4]	; (1a0cc <multithreading_lock_acquire+0xc>)
   1a0c6:	f002 b8ab 	b.w	1c220 <z_impl_k_mutex_lock>
   1a0ca:	bf00      	nop
   1a0cc:	200008a4 	.word	0x200008a4

0001a0d0 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   1a0d0:	4801      	ldr	r0, [pc, #4]	; (1a0d8 <multithreading_lock_release+0x8>)
   1a0d2:	f002 b91f 	b.w	1c314 <z_impl_k_mutex_unlock>
   1a0d6:	bf00      	nop
   1a0d8:	200008a4 	.word	0x200008a4

0001a0dc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1a0dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1a0de:	ab0b      	add	r3, sp, #44	; 0x2c
   1a0e0:	9305      	str	r3, [sp, #20]
   1a0e2:	9303      	str	r3, [sp, #12]
   1a0e4:	4b05      	ldr	r3, [pc, #20]	; (1a0fc <z_log_msg_runtime_create.constprop.0+0x20>)
   1a0e6:	9302      	str	r3, [sp, #8]
   1a0e8:	2300      	movs	r3, #0
   1a0ea:	e9cd 3300 	strd	r3, r3, [sp]
   1a0ee:	2201      	movs	r2, #1
   1a0f0:	4618      	mov	r0, r3
   1a0f2:	f7f7 fe6f 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1a0f6:	b007      	add	sp, #28
   1a0f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1a0fc:	000238fe 	.word	0x000238fe

0001a100 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   1a100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
   1a102:	f7f7 fdf3 	bl	11cec <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   1a106:	2400      	movs	r4, #0
   1a108:	4b06      	ldr	r3, [pc, #24]	; (1a124 <k_sys_fatal_error_handler+0x24>)
   1a10a:	9302      	str	r3, [sp, #8]
   1a10c:	4620      	mov	r0, r4
   1a10e:	e9cd 4400 	strd	r4, r4, [sp]
   1a112:	4905      	ldr	r1, [pc, #20]	; (1a128 <k_sys_fatal_error_handler+0x28>)
   1a114:	4623      	mov	r3, r4
   1a116:	2201      	movs	r2, #1
   1a118:	f7ff ffe0 	bl	1a0dc <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
   1a11c:	4620      	mov	r0, r4
   1a11e:	f7f9 f85b 	bl	131d8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   1a122:	bf00      	nop
   1a124:	000238fe 	.word	0x000238fe
   1a128:	000216a4 	.word	0x000216a4

0001a12c <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   1a12c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   1a12e:	482e      	ldr	r0, [pc, #184]	; (1a1e8 <hci_driver_init+0xbc>)
{
   1a130:	b089      	sub	sp, #36	; 0x24
	bt_hci_driver_register(&drv);
   1a132:	f7fa fae5 	bl	14700 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
   1a136:	482d      	ldr	r0, [pc, #180]	; (1a1ec <hci_driver_init+0xc0>)
   1a138:	f7e6 fc4c 	bl	9d4 <sdc_init>
			err = sdc_support_central();
   1a13c:	f7e6 fcc6 	bl	acc <sdc_support_central>
			if (err) {
   1a140:	b118      	cbz	r0, 1a14a <hci_driver_init+0x1e>
			return -ENOTSUP;
   1a142:	f06f 0085 	mvn.w	r0, #133	; 0x85
	if (err) {
		return err;
	}

	return err;
}
   1a146:	b009      	add	sp, #36	; 0x24
   1a148:	bd30      	pop	{r4, r5, pc}
			err = sdc_support_dle_central();
   1a14a:	f7e6 fcd1 	bl	af0 <sdc_support_dle_central>
			if (err) {
   1a14e:	2800      	cmp	r0, #0
   1a150:	d1f7      	bne.n	1a142 <hci_driver_init+0x16>
		err = sdc_support_le_2m_phy();
   1a152:	f7e6 fcdd 	bl	b10 <sdc_support_le_2m_phy>
		if (err) {
   1a156:	2800      	cmp	r0, #0
   1a158:	d1f3      	bne.n	1a142 <hci_driver_init+0x16>
			err = sdc_support_phy_update_central();
   1a15a:	f7e6 fce9 	bl	b30 <sdc_support_phy_update_central>
			if (err) {
   1a15e:	4604      	mov	r4, r0
   1a160:	2800      	cmp	r0, #0
   1a162:	d1ee      	bne.n	1a142 <hci_driver_init+0x16>
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1a164:	2501      	movs	r5, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a166:	aa07      	add	r2, sp, #28
   1a168:	4629      	mov	r1, r5
	cfg.central_count.count = SDC_CENTRAL_COUNT;
   1a16a:	f88d 501c 	strb.w	r5, [sp, #28]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a16e:	f7e6 fbad 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   1a172:	2800      	cmp	r0, #0
   1a174:	dbe7      	blt.n	1a146 <hci_driver_init+0x1a>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   1a176:	4b1e      	ldr	r3, [pc, #120]	; (1a1f0 <hci_driver_init+0xc4>)
   1a178:	9307      	str	r3, [sp, #28]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a17a:	aa07      	add	r2, sp, #28
   1a17c:	2103      	movs	r1, #3
   1a17e:	4620      	mov	r0, r4
   1a180:	f7e6 fba4 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   1a184:	2800      	cmp	r0, #0
   1a186:	dbde      	blt.n	1a146 <hci_driver_init+0x1a>
	cfg.event_length.event_length_us =
   1a188:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a18c:	aa07      	add	r2, sp, #28
   1a18e:	2104      	movs	r1, #4
   1a190:	4620      	mov	r0, r4
	cfg.event_length.event_length_us =
   1a192:	9307      	str	r3, [sp, #28]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a194:	f7e6 fb9a 	bl	8cc <sdc_cfg_set>
	if (required_memory < 0) {
   1a198:	2800      	cmp	r0, #0
   1a19a:	dbd4      	blt.n	1a146 <hci_driver_init+0x1a>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1a19c:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a19e:	aa07      	add	r2, sp, #28
   1a1a0:	2106      	movs	r1, #6
   1a1a2:	4620      	mov	r0, r4
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   1a1a4:	f88d 301c 	strb.w	r3, [sp, #28]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   1a1a8:	f7e6 fb90 	bl	8cc <sdc_cfg_set>
		if (required_memory < 0) {
   1a1ac:	2800      	cmp	r0, #0
   1a1ae:	dbca      	blt.n	1a146 <hci_driver_init+0x1a>
	if (required_memory > sizeof(sdc_mempool)) {
   1a1b0:	f240 6371 	movw	r3, #1649	; 0x671
   1a1b4:	4298      	cmp	r0, r3
   1a1b6:	dd14      	ble.n	1a1e2 <hci_driver_init+0xb6>
		LOG_ERR("Allocated memory too low: %u < %u",
   1a1b8:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1a1bc:	4b0d      	ldr	r3, [pc, #52]	; (1a1f4 <hci_driver_init+0xc8>)
   1a1be:	490e      	ldr	r1, [pc, #56]	; (1a1f8 <hci_driver_init+0xcc>)
   1a1c0:	9400      	str	r4, [sp, #0]
   1a1c2:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a1c6:	462a      	mov	r2, r5
   1a1c8:	4623      	mov	r3, r4
   1a1ca:	4620      	mov	r0, r4
   1a1cc:	f006 f967 	bl	2049e <z_log_msg_runtime_create.constprop.0>
		k_panic();
   1a1d0:	4040      	eors	r0, r0
   1a1d2:	f380 8811 	msr	BASEPRI, r0
   1a1d6:	f04f 0004 	mov.w	r0, #4
   1a1da:	df02      	svc	2
		return -ENOMEM;
   1a1dc:	f06f 000b 	mvn.w	r0, #11
   1a1e0:	e7b1      	b.n	1a146 <hci_driver_init+0x1a>
	return 0;
   1a1e2:	4620      	mov	r0, r4
	if (err) {
   1a1e4:	e7af      	b.n	1a146 <hci_driver_init+0x1a>
   1a1e6:	bf00      	nop
   1a1e8:	00021c5c 	.word	0x00021c5c
   1a1ec:	0001a2d1 	.word	0x0001a2d1
   1a1f0:	02031b1b 	.word	0x02031b1b
   1a1f4:	0002391b 	.word	0x0002391b
   1a1f8:	00021674 	.word	0x00021674

0001a1fc <hci_driver_open>:
{
   1a1fc:	b510      	push	{r4, lr}
	k_work_init(&receive_work, receive_work_handler);
   1a1fe:	4929      	ldr	r1, [pc, #164]	; (1a2a4 <hci_driver_open+0xa8>)
   1a200:	4829      	ldr	r0, [pc, #164]	; (1a2a8 <hci_driver_open+0xac>)
{
   1a202:	b08c      	sub	sp, #48	; 0x30
	k_work_init(&receive_work, receive_work_handler);
   1a204:	f006 fd0f 	bl	20c26 <k_work_init>
		hci_ecdh_init();
   1a208:	f000 fdc6 	bl	1ad98 <hci_ecdh_init>
	sdc_build_revision_get(build_revision);
   1a20c:	a807      	add	r0, sp, #28
   1a20e:	f7e6 fb4f 	bl	8b0 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   1a212:	4b26      	ldr	r3, [pc, #152]	; (1a2ac <hci_driver_open+0xb0>)
   1a214:	9303      	str	r3, [sp, #12]
   1a216:	4b26      	ldr	r3, [pc, #152]	; (1a2b0 <hci_driver_open+0xb4>)
   1a218:	9302      	str	r3, [sp, #8]
   1a21a:	2400      	movs	r4, #0
   1a21c:	2314      	movs	r3, #20
   1a21e:	e9cd 3400 	strd	r3, r4, [sp]
   1a222:	4924      	ldr	r1, [pc, #144]	; (1a2b4 <hci_driver_open+0xb8>)
   1a224:	ab07      	add	r3, sp, #28
   1a226:	2203      	movs	r2, #3
   1a228:	4620      	mov	r0, r4
   1a22a:	f006 f938 	bl	2049e <z_log_msg_runtime_create.constprop.0>
   1a22e:	4822      	ldr	r0, [pc, #136]	; (1a2b8 <hci_driver_open+0xbc>)
   1a230:	f006 faf1 	bl	20816 <z_device_is_ready>
   1a234:	4603      	mov	r3, r0
	if (!device_is_ready(entropy_source)) {
   1a236:	b960      	cbnz	r0, 1a252 <hci_driver_open+0x56>
		LOG_ERR("Entropy source device not ready");
   1a238:	4a20      	ldr	r2, [pc, #128]	; (1a2bc <hci_driver_open+0xc0>)
   1a23a:	491e      	ldr	r1, [pc, #120]	; (1a2b4 <hci_driver_open+0xb8>)
   1a23c:	9000      	str	r0, [sp, #0]
   1a23e:	e9cd 0201 	strd	r0, r2, [sp, #4]
   1a242:	2201      	movs	r2, #1
   1a244:	f006 f92b 	bl	2049e <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
   1a248:	f06f 0412 	mvn.w	r4, #18
}
   1a24c:	4620      	mov	r0, r4
   1a24e:	b00c      	add	sp, #48	; 0x30
   1a250:	bd10      	pop	{r4, pc}
	sdc_rand_source_t rand_functions = {
   1a252:	4a1b      	ldr	r2, [pc, #108]	; (1a2c0 <hci_driver_open+0xc4>)
   1a254:	ca07      	ldmia	r2, {r0, r1, r2}
   1a256:	ab04      	add	r3, sp, #16
   1a258:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   1a25c:	4618      	mov	r0, r3
   1a25e:	f7e6 fcbd 	bl	bdc <sdc_rand_source_register>
	if (err) {
   1a262:	b168      	cbz	r0, 1a280 <hci_driver_open+0x84>
		LOG_ERR("Failed to register rand source (%d)", err);
   1a264:	4b17      	ldr	r3, [pc, #92]	; (1a2c4 <hci_driver_open+0xc8>)
   1a266:	9003      	str	r0, [sp, #12]
   1a268:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a26c:	9400      	str	r4, [sp, #0]
   1a26e:	4623      	mov	r3, r4
   1a270:	4620      	mov	r0, r4
   1a272:	4910      	ldr	r1, [pc, #64]	; (1a2b4 <hci_driver_open+0xb8>)
   1a274:	2201      	movs	r2, #1
   1a276:	f006 f912 	bl	2049e <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
   1a27a:	f06f 0415 	mvn.w	r4, #21
   1a27e:	e7e5      	b.n	1a24c <hci_driver_open+0x50>
	err = MULTITHREADING_LOCK_ACQUIRE();
   1a280:	f04f 30ff 	mov.w	r0, #4294967295
   1a284:	f04f 31ff 	mov.w	r1, #4294967295
   1a288:	f7ff ff1a 	bl	1a0c0 <multithreading_lock_acquire>
	if (err) {
   1a28c:	4604      	mov	r4, r0
   1a28e:	2800      	cmp	r0, #0
   1a290:	d1dc      	bne.n	1a24c <hci_driver_open+0x50>
	err = sdc_enable(receive_signal_raise, sdc_mempool);
   1a292:	490d      	ldr	r1, [pc, #52]	; (1a2c8 <hci_driver_open+0xcc>)
   1a294:	480d      	ldr	r0, [pc, #52]	; (1a2cc <hci_driver_open+0xd0>)
   1a296:	f7e6 fb73 	bl	980 <sdc_enable>
	if (err) {
   1a29a:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   1a29c:	f7ff ff18 	bl	1a0d0 <multithreading_lock_release>
	return 0;
   1a2a0:	e7d4      	b.n	1a24c <hci_driver_open+0x50>
   1a2a2:	bf00      	nop
   1a2a4:	0002052d 	.word	0x0002052d
   1a2a8:	200027fc 	.word	0x200027fc
   1a2ac:	0002393d 	.word	0x0002393d
   1a2b0:	0002272b 	.word	0x0002272b
   1a2b4:	00021674 	.word	0x00021674
   1a2b8:	000213bc 	.word	0x000213bc
   1a2bc:	00023964 	.word	0x00023964
   1a2c0:	0002174c 	.word	0x0002174c
   1a2c4:	00023984 	.word	0x00023984
   1a2c8:	20001b80 	.word	0x20001b80
   1a2cc:	0001a32d 	.word	0x0001a32d

0001a2d0 <sdc_assertion_handler>:
{
   1a2d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("SoftDevice Controller ASSERT: %s, %d", file, line);
   1a2d2:	4b0a      	ldr	r3, [pc, #40]	; (1a2fc <sdc_assertion_handler+0x2c>)
   1a2d4:	9302      	str	r3, [sp, #8]
   1a2d6:	2300      	movs	r3, #0
   1a2d8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1a2dc:	e9cd 3300 	strd	r3, r3, [sp]
   1a2e0:	4907      	ldr	r1, [pc, #28]	; (1a300 <sdc_assertion_handler+0x30>)
   1a2e2:	2201      	movs	r2, #1
   1a2e4:	4618      	mov	r0, r3
   1a2e6:	f006 f8da 	bl	2049e <z_log_msg_runtime_create.constprop.0>
	k_oops();
   1a2ea:	4040      	eors	r0, r0
   1a2ec:	f380 8811 	msr	BASEPRI, r0
   1a2f0:	f04f 0003 	mov.w	r0, #3
   1a2f4:	df02      	svc	2
}
   1a2f6:	b007      	add	sp, #28
   1a2f8:	f85d fb04 	ldr.w	pc, [sp], #4
   1a2fc:	000239a8 	.word	0x000239a8
   1a300:	00021674 	.word	0x00021674

0001a304 <rand_prio_low_vector_get>:
{
   1a304:	b538      	push	{r3, r4, r5, lr}
   1a306:	4604      	mov	r4, r0
static inline int entropy_get_entropy_isr(const struct device *dev,
					  uint8_t *buffer,
					  uint16_t length,
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
   1a308:	4807      	ldr	r0, [pc, #28]	; (1a328 <rand_prio_low_vector_get+0x24>)
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1a30a:	6883      	ldr	r3, [r0, #8]
   1a30c:	685d      	ldr	r5, [r3, #4]
   1a30e:	460a      	mov	r2, r1
   1a310:	b135      	cbz	r5, 1a320 <rand_prio_low_vector_get+0x1c>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1a312:	2300      	movs	r3, #0
   1a314:	4621      	mov	r1, r4
   1a316:	47a8      	blx	r5
	return ret >= 0 ? ret : 0;
   1a318:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   1a31c:	b2c0      	uxtb	r0, r0
   1a31e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   1a320:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1a324:	e7f8      	b.n	1a318 <rand_prio_low_vector_get+0x14>
   1a326:	bf00      	nop
   1a328:	000213bc 	.word	0x000213bc

0001a32c <receive_signal_raise>:
 *
 * @return N/A
 */
static inline int mpsl_work_submit(struct k_work *work)
{
	return k_work_submit_to_queue(&mpsl_work_q, work);
   1a32c:	4901      	ldr	r1, [pc, #4]	; (1a334 <receive_signal_raise+0x8>)
   1a32e:	4802      	ldr	r0, [pc, #8]	; (1a338 <receive_signal_raise+0xc>)
   1a330:	f006 bca6 	b.w	20c80 <k_work_submit_to_queue>
   1a334:	200027fc 	.word	0x200027fc
   1a338:	20002278 	.word	0x20002278

0001a33c <rand_prio_low_vector_get_blocking>:
{
   1a33c:	b410      	push	{r4}
   1a33e:	4603      	mov	r3, r0
   1a340:	460a      	mov	r2, r1
	return api->get_entropy(dev, buffer, length);
   1a342:	4803      	ldr	r0, [pc, #12]	; (1a350 <rand_prio_low_vector_get_blocking+0x14>)
   1a344:	6881      	ldr	r1, [r0, #8]
   1a346:	680c      	ldr	r4, [r1, #0]
   1a348:	4619      	mov	r1, r3
   1a34a:	4623      	mov	r3, r4
}
   1a34c:	bc10      	pop	{r4}
   1a34e:	4718      	bx	r3
   1a350:	000213bc 	.word	0x000213bc

0001a354 <hci_driver_receive_process>:
{
   1a354:	b570      	push	{r4, r5, r6, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a356:	f04f 30ff 	mov.w	r0, #4294967295
{
   1a35a:	b086      	sub	sp, #24
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   1a35c:	f04f 31ff 	mov.w	r1, #4294967295
   1a360:	f7ff feae 	bl	1a0c0 <multithreading_lock_acquire>
	if (!errcode) {
   1a364:	2800      	cmp	r0, #0
   1a366:	d160      	bne.n	1a42a <hci_driver_receive_process+0xd6>
		errcode = hci_internal_msg_get(p_hci_buffer, &msg_type);
   1a368:	4d31      	ldr	r5, [pc, #196]	; (1a430 <hci_driver_receive_process+0xdc>)
   1a36a:	f10d 0117 	add.w	r1, sp, #23
   1a36e:	4628      	mov	r0, r5
   1a370:	f000 fbe8 	bl	1ab44 <hci_internal_msg_get>
   1a374:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   1a376:	f7ff feab 	bl	1a0d0 <multithreading_lock_release>
	if (errcode) {
   1a37a:	2c00      	cmp	r4, #0
   1a37c:	d155      	bne.n	1a42a <hci_driver_receive_process+0xd6>
	if (msg_type == SDC_HCI_MSG_TYPE_EVT) {
   1a37e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1a382:	2b04      	cmp	r3, #4
   1a384:	d130      	bne.n	1a3e8 <hci_driver_receive_process+0x94>
	switch (hdr->evt) {
   1a386:	7828      	ldrb	r0, [r5, #0]
   1a388:	283e      	cmp	r0, #62	; 0x3e
   1a38a:	d019      	beq.n	1a3c0 <hci_driver_receive_process+0x6c>
   1a38c:	28ff      	cmp	r0, #255	; 0xff
   1a38e:	d01e      	beq.n	1a3ce <hci_driver_receive_process+0x7a>
		switch (subevent) {
   1a390:	f04f 32ff 	mov.w	r2, #4294967295
   1a394:	f04f 33ff 	mov.w	r3, #4294967295
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a398:	4621      	mov	r1, r4
   1a39a:	f7f9 f8a7 	bl	134ec <bt_buf_get_evt>
	if (!evt_buf) {
   1a39e:	4606      	mov	r6, r0
   1a3a0:	b9c0      	cbnz	r0, 1a3d4 <hci_driver_receive_process+0x80>
		if (discardable) {
   1a3a2:	b944      	cbnz	r4, 1a3b6 <hci_driver_receive_process+0x62>
		LOG_ERR("No event buffer available");
   1a3a4:	4b23      	ldr	r3, [pc, #140]	; (1a434 <hci_driver_receive_process+0xe0>)
		LOG_ERR("No data buffer available");
   1a3a6:	4924      	ldr	r1, [pc, #144]	; (1a438 <hci_driver_receive_process+0xe4>)
   1a3a8:	9400      	str	r4, [sp, #0]
   1a3aa:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a3ae:	2201      	movs	r2, #1
   1a3b0:	4623      	mov	r3, r4
   1a3b2:	f006 f874 	bl	2049e <z_log_msg_runtime_create.constprop.0>
}
   1a3b6:	b006      	add	sp, #24
   1a3b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		receive_signal_raise();
   1a3bc:	f7ff bfb6 	b.w	1a32c <receive_signal_raise>
		switch (me->subevent) {
   1a3c0:	78ab      	ldrb	r3, [r5, #2]
   1a3c2:	2b02      	cmp	r3, #2
		switch (subevent) {
   1a3c4:	d1e4      	bne.n	1a390 <hci_driver_receive_process+0x3c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   1a3c6:	2200      	movs	r2, #0
   1a3c8:	2300      	movs	r3, #0
			return true;
   1a3ca:	2401      	movs	r4, #1
   1a3cc:	e7e4      	b.n	1a398 <hci_driver_receive_process+0x44>
		switch (subevent) {
   1a3ce:	78ab      	ldrb	r3, [r5, #2]
   1a3d0:	2b80      	cmp	r3, #128	; 0x80
   1a3d2:	e7f7      	b.n	1a3c4 <hci_driver_receive_process+0x70>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   1a3d4:	786a      	ldrb	r2, [r5, #1]
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a3d6:	4916      	ldr	r1, [pc, #88]	; (1a430 <hci_driver_receive_process+0xdc>)
   1a3d8:	3202      	adds	r2, #2
   1a3da:	300c      	adds	r0, #12
   1a3dc:	f005 fcbc 	bl	1fd58 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   1a3e0:	4630      	mov	r0, r6
	bt_recv(data_buf);
   1a3e2:	f7fa f95d 	bl	146a0 <bt_recv>
   1a3e6:	e7e6      	b.n	1a3b6 <hci_driver_receive_process+0x62>
	} else if (msg_type == SDC_HCI_MSG_TYPE_DATA) {
   1a3e8:	2b02      	cmp	r3, #2
   1a3ea:	d112      	bne.n	1a412 <hci_driver_receive_process+0xbe>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   1a3ec:	f04f 32ff 	mov.w	r2, #4294967295
   1a3f0:	f04f 33ff 	mov.w	r3, #4294967295
   1a3f4:	2003      	movs	r0, #3
   1a3f6:	f7f9 f84f 	bl	13498 <bt_buf_get_rx>
	if (!data_buf) {
   1a3fa:	4604      	mov	r4, r0
   1a3fc:	b908      	cbnz	r0, 1a402 <hci_driver_receive_process+0xae>
		LOG_ERR("No data buffer available");
   1a3fe:	4b0f      	ldr	r3, [pc, #60]	; (1a43c <hci_driver_receive_process+0xe8>)
   1a400:	e7d1      	b.n	1a3a6 <hci_driver_receive_process+0x52>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   1a402:	886a      	ldrh	r2, [r5, #2]
   1a404:	4629      	mov	r1, r5
   1a406:	3204      	adds	r2, #4
   1a408:	300c      	adds	r0, #12
   1a40a:	f005 fca5 	bl	1fd58 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   1a40e:	4620      	mov	r0, r4
   1a410:	e7e7      	b.n	1a3e2 <hci_driver_receive_process+0x8e>
		LOG_ERR("Unexpected msg_type: %u. This if-else needs a new branch", msg_type);
   1a412:	9303      	str	r3, [sp, #12]
   1a414:	4b0a      	ldr	r3, [pc, #40]	; (1a440 <hci_driver_receive_process+0xec>)
   1a416:	4908      	ldr	r1, [pc, #32]	; (1a438 <hci_driver_receive_process+0xe4>)
   1a418:	9400      	str	r4, [sp, #0]
   1a41a:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1a41e:	2201      	movs	r2, #1
   1a420:	4623      	mov	r3, r4
   1a422:	4620      	mov	r0, r4
   1a424:	f006 f83b 	bl	2049e <z_log_msg_runtime_create.constprop.0>
   1a428:	e7c5      	b.n	1a3b6 <hci_driver_receive_process+0x62>
}
   1a42a:	b006      	add	sp, #24
   1a42c:	bd70      	pop	{r4, r5, r6, pc}
   1a42e:	bf00      	nop
   1a430:	20002a3d 	.word	0x20002a3d
   1a434:	000239cd 	.word	0x000239cd
   1a438:	00021674 	.word	0x00021674
   1a43c:	000239e7 	.word	0x000239e7
   1a440:	00023a00 	.word	0x00023a00

0001a444 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   1a444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   1a446:	4cb9      	ldr	r4, [pc, #740]	; (1a72c <hci_internal_cmd_put+0x2e8>)
   1a448:	7823      	ldrb	r3, [r4, #0]
{
   1a44a:	4605      	mov	r5, r0
	if (cmd_complete_or_status.occurred) {
   1a44c:	2b00      	cmp	r3, #0
   1a44e:	f040 8375 	bne.w	1ab3c <hci_internal_cmd_put+0x6f8>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   1a452:	2304      	movs	r3, #4
   1a454:	f88d 3007 	strb.w	r3, [sp, #7]
	if (user_cmd_handler) {
   1a458:	4bb5      	ldr	r3, [pc, #724]	; (1a730 <hci_internal_cmd_put+0x2ec>)
   1a45a:	8806      	ldrh	r6, [r0, #0]
   1a45c:	681f      	ldr	r7, [r3, #0]
   1a45e:	b1b7      	cbz	r7, 1a48e <hci_internal_cmd_put+0x4a>
		status = user_cmd_handler(cmd_in,
   1a460:	f10d 0306 	add.w	r3, sp, #6
   1a464:	f10d 0207 	add.w	r2, sp, #7
   1a468:	1c61      	adds	r1, r4, #1
   1a46a:	47b8      	blx	r7
	if (status == BT_HCI_ERR_UNKNOWN_CMD) {
   1a46c:	2801      	cmp	r0, #1
   1a46e:	d00e      	beq.n	1a48e <hci_internal_cmd_put+0x4a>
	if (generate_command_status_event ||
   1a470:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a474:	2b00      	cmp	r3, #0
   1a476:	f040 8255 	bne.w	1a924 <hci_internal_cmd_put+0x4e0>
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
   1a47a:	f89d 3007 	ldrb.w	r3, [sp, #7]
	evt_hdr->len = param_length;
   1a47e:	70a3      	strb	r3, [r4, #2]
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a480:	220e      	movs	r2, #14
	evt_data->ncmd = 1;
   1a482:	2301      	movs	r3, #1
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   1a484:	7062      	strb	r2, [r4, #1]
	evt_data->ncmd = 1;
   1a486:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   1a488:	80a6      	strh	r6, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   1a48a:	71a0      	strb	r0, [r4, #6]
}
   1a48c:	e253      	b.n	1a936 <hci_internal_cmd_put+0x4f2>
		switch (BT_OGF(opcode)) {
   1a48e:	f5b6 5f10 	cmp.w	r6, #9216	; 0x2400
   1a492:	ea4f 2396 	mov.w	r3, r6, lsr #10
   1a496:	d20f      	bcs.n	1a4b8 <hci_internal_cmd_put+0x74>
   1a498:	2b00      	cmp	r3, #0
   1a49a:	d057      	beq.n	1a54c <hci_internal_cmd_put+0x108>
   1a49c:	3b01      	subs	r3, #1
   1a49e:	2b07      	cmp	r3, #7
   1a4a0:	f200 832e 	bhi.w	1ab00 <hci_internal_cmd_put+0x6bc>
   1a4a4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a4a8:	032c000d 	.word	0x032c000d
   1a4ac:	0082003e 	.word	0x0082003e
   1a4b0:	032c032c 	.word	0x032c032c
   1a4b4:	0132032c 	.word	0x0132032c
   1a4b8:	2b3f      	cmp	r3, #63	; 0x3f
   1a4ba:	f000 827d 	beq.w	1a9b8 <hci_internal_cmd_put+0x574>
	switch (opcode)	{
   1a4be:	2001      	movs	r0, #1
   1a4c0:	e2bc      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
	return ((uint16_t)src[1] << 8) | src[0];
   1a4c2:	4628      	mov	r0, r5
	switch (opcode)	{
   1a4c4:	f240 4206 	movw	r2, #1030	; 0x406
   1a4c8:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a4cc:	4293      	cmp	r3, r2
   1a4ce:	d00f      	beq.n	1a4f0 <hci_internal_cmd_put+0xac>
   1a4d0:	f240 421d 	movw	r2, #1053	; 0x41d
   1a4d4:	4293      	cmp	r3, r2
   1a4d6:	d022      	beq.n	1a51e <hci_internal_cmd_put+0xda>
   1a4d8:	2001      	movs	r0, #1
	switch (hci_opcode) {
   1a4da:	f240 4306 	movw	r3, #1030	; 0x406
   1a4de:	429e      	cmp	r6, r3
   1a4e0:	f000 8220 	beq.w	1a924 <hci_internal_cmd_put+0x4e0>
   1a4e4:	f240 431d 	movw	r3, #1053	; 0x41d
   1a4e8:	429e      	cmp	r6, r3
   1a4ea:	f000 821b 	beq.w	1a924 <hci_internal_cmd_put+0x4e0>
   1a4ee:	e042      	b.n	1a576 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   1a4f0:	f7f2 feac 	bl	d24c <sdc_hci_cmd_lc_disconnect>
	switch (hci_opcode) {
   1a4f4:	f242 0332 	movw	r3, #8242	; 0x2032
   1a4f8:	429e      	cmp	r6, r3
   1a4fa:	f240 82fb 	bls.w	1aaf4 <hci_internal_cmd_put+0x6b0>
   1a4fe:	f242 0385 	movw	r3, #8325	; 0x2085
   1a502:	429e      	cmp	r6, r3
   1a504:	d837      	bhi.n	1a576 <hci_internal_cmd_put+0x132>
   1a506:	f242 036c 	movw	r3, #8300	; 0x206c
   1a50a:	429e      	cmp	r6, r3
   1a50c:	f5a6 5301 	sub.w	r3, r6, #8256	; 0x2040
   1a510:	f200 82f8 	bhi.w	1ab04 <hci_internal_cmd_put+0x6c0>
   1a514:	3b03      	subs	r3, #3
   1a516:	b29b      	uxth	r3, r3
   1a518:	2b01      	cmp	r3, #1
   1a51a:	d82c      	bhi.n	1a576 <hci_internal_cmd_put+0x132>
   1a51c:	e202      	b.n	1a924 <hci_internal_cmd_put+0x4e0>
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   1a51e:	f7f2 fe97 	bl	d250 <sdc_hci_cmd_lc_read_remote_version_information>
	switch (hci_opcode) {
   1a522:	e7e7      	b.n	1a4f4 <hci_internal_cmd_put+0xb0>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a524:	4628      	mov	r0, r5
	switch (opcode)	{
   1a526:	f640 4263 	movw	r2, #3171	; 0xc63
   1a52a:	f930 3b03 	ldrsh.w	r3, [r0], #3
   1a52e:	4293      	cmp	r3, r2
   1a530:	d030      	beq.n	1a594 <hci_internal_cmd_put+0x150>
   1a532:	dc0d      	bgt.n	1a550 <hci_internal_cmd_put+0x10c>
   1a534:	f640 4203 	movw	r2, #3075	; 0xc03
   1a538:	4293      	cmp	r3, r2
   1a53a:	d01f      	beq.n	1a57c <hci_internal_cmd_put+0x138>
   1a53c:	f640 422d 	movw	r2, #3117	; 0xc2d
   1a540:	4293      	cmp	r3, r2
   1a542:	d01e      	beq.n	1a582 <hci_internal_cmd_put+0x13e>
   1a544:	f640 4201 	movw	r2, #3073	; 0xc01
   1a548:	4293      	cmp	r3, r2
   1a54a:	d012      	beq.n	1a572 <hci_internal_cmd_put+0x12e>
	switch (hci_opcode) {
   1a54c:	2001      	movs	r0, #1
   1a54e:	e1e9      	b.n	1a924 <hci_internal_cmd_put+0x4e0>
	switch (opcode)	{
   1a550:	f640 427b 	movw	r2, #3195	; 0xc7b
   1a554:	4293      	cmp	r3, r2
   1a556:	d020      	beq.n	1a59a <hci_internal_cmd_put+0x156>
   1a558:	f640 427c 	movw	r2, #3196	; 0xc7c
   1a55c:	4293      	cmp	r3, r2
   1a55e:	d1f5      	bne.n	1a54c <hci_internal_cmd_put+0x108>
		*param_length_out +=
   1a560:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a564:	4973      	ldr	r1, [pc, #460]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out +=
   1a566:	3302      	adds	r3, #2
   1a568:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   1a56c:	f7f2 fd44 	bl	cff8 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a570:	e001      	b.n	1a576 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   1a572:	f7f2 fd37 	bl	cfe4 <sdc_hci_cmd_cb_set_event_mask>
	if (generate_command_status_event ||
   1a576:	2801      	cmp	r0, #1
   1a578:	d0e8      	beq.n	1a54c <hci_internal_cmd_put+0x108>
   1a57a:	e77e      	b.n	1a47a <hci_internal_cmd_put+0x36>
		return sdc_hci_cmd_cb_reset();
   1a57c:	f7e6 fc2e 	bl	ddc <sdc_hci_cmd_cb_reset>
	if (generate_command_status_event ||
   1a580:	e7f9      	b.n	1a576 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a582:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a586:	496b      	ldr	r1, [pc, #428]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out += sizeof(sdc_hci_cmd_cb_read_transmit_power_level_return_t);
   1a588:	3303      	adds	r3, #3
   1a58a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   1a58e:	f7f2 fd27 	bl	cfe0 <sdc_hci_cmd_cb_read_transmit_power_level>
	if (generate_command_status_event ||
   1a592:	e7f0      	b.n	1a576 <hci_internal_cmd_put+0x132>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   1a594:	f7f2 fd2b 	bl	cfee <sdc_hci_cmd_cb_set_event_mask_page_2>
	if (generate_command_status_event ||
   1a598:	e7ed      	b.n	1a576 <hci_internal_cmd_put+0x132>
		*param_length_out +=
   1a59a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a59e:	4965      	ldr	r1, [pc, #404]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out +=
   1a5a0:	3304      	adds	r3, #4
   1a5a2:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   1a5a6:	f7f2 fd19 	bl	cfdc <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
	if (generate_command_status_event ||
   1a5aa:	e7e4      	b.n	1a576 <hci_internal_cmd_put+0x132>
	switch (opcode)	{
   1a5ac:	882b      	ldrh	r3, [r5, #0]
   1a5ae:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
   1a5b2:	3b01      	subs	r3, #1
   1a5b4:	2b08      	cmp	r3, #8
   1a5b6:	d8c9      	bhi.n	1a54c <hci_internal_cmd_put+0x108>
   1a5b8:	a201      	add	r2, pc, #4	; (adr r2, 1a5c0 <hci_internal_cmd_put+0x17c>)
   1a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a5be:	bf00      	nop
   1a5c0:	0001a5e5 	.word	0x0001a5e5
   1a5c4:	0001a5f7 	.word	0x0001a5f7
   1a5c8:	0001a6d9 	.word	0x0001a6d9
   1a5cc:	0001a54d 	.word	0x0001a54d
   1a5d0:	0001a54d 	.word	0x0001a54d
   1a5d4:	0001a54d 	.word	0x0001a54d
   1a5d8:	0001a54d 	.word	0x0001a54d
   1a5dc:	0001a54d 	.word	0x0001a54d
   1a5e0:	0001a6fb 	.word	0x0001a6fb
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a5e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a5e8:	4852      	ldr	r0, [pc, #328]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_version_information_return_t);
   1a5ea:	3308      	adds	r3, #8
   1a5ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   1a5f0:	f7f2 fdf3 	bl	d1da <sdc_hci_cmd_ip_read_local_version_information>
	if (generate_command_status_event ||
   1a5f4:	e7bf      	b.n	1a576 <hci_internal_cmd_put+0x132>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a5f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a5fa:	484e      	ldr	r0, [pc, #312]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a5fc:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1a5fe:	2230      	movs	r2, #48	; 0x30
   1a600:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_commands_return_t);
   1a602:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1a606:	f004 f8c6 	bl	1e796 <memset>
	cmds->hci_disconnect = 1;
   1a60a:	79e3      	ldrb	r3, [r4, #7]
   1a60c:	f043 0320 	orr.w	r3, r3, #32
   1a610:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   1a612:	7a63      	ldrb	r3, [r4, #9]
   1a614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a618:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   1a61a:	7b23      	ldrb	r3, [r4, #12]
   1a61c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a620:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   1a622:	7c63      	ldrb	r3, [r4, #17]
   1a624:	f043 0304 	orr.w	r3, r3, #4
   1a628:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   1a62a:	7d63      	ldrb	r3, [r4, #21]
   1a62c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a630:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   1a634:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   1a636:	7da3      	ldrb	r3, [r4, #22]
   1a638:	f043 0302 	orr.w	r3, r3, #2
   1a63c:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   1a63e:	7f63      	ldrb	r3, [r4, #29]
   1a640:	f043 0304 	orr.w	r3, r3, #4
   1a644:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   1a646:	f894 3020 	ldrb.w	r3, [r4, #32]
   1a64a:	f023 0317 	bic.w	r3, r3, #23
   1a64e:	f043 0317 	orr.w	r3, r3, #23
   1a652:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   1a656:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   1a65a:	f063 0303 	orn	r3, r3, #3
   1a65e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_filter_accept_list = 1;
   1a662:	23ff      	movs	r3, #255	; 0xff
   1a664:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   1a668:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1a66c:	f023 0379 	bic.w	r3, r3, #121	; 0x79
   1a670:	f043 0379 	orr.w	r3, r3, #121	; 0x79
   1a674:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   1a678:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
   1a67c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1a680:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1a684:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   1a688:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a68c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1a690:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   1a694:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1a698:	f023 0307 	bic.w	r3, r3, #7
   1a69c:	f043 0307 	orr.w	r3, r3, #7
   1a6a0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_read_maximum_data_length = 1;
   1a6a4:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1a6a8:	f063 0307 	orn	r3, r3, #7
   1a6ac:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   1a6b0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1a6b4:	f043 0301 	orr.w	r3, r3, #1
   1a6b8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   1a6bc:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   1a6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1a6c4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_generate_dhkey_v2 = 1;
   1a6c8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   1a6cc:	f043 0304 	orr.w	r3, r3, #4
   1a6d0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		return 0;
   1a6d4:	2000      	movs	r0, #0
   1a6d6:	e6d0      	b.n	1a47a <hci_internal_cmd_put+0x36>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a6d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a6dc:	4815      	ldr	r0, [pc, #84]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a6de:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1a6e0:	2208      	movs	r2, #8
   1a6e2:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_local_supported_features_return_t);
   1a6e4:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a6e8:	f004 f855 	bl	1e796 <memset>
	features->bdedr_not_supported = 1;
   1a6ec:	7ae3      	ldrb	r3, [r4, #11]
   1a6ee:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   1a6f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   1a6f6:	72e3      	strb	r3, [r4, #11]
	if (generate_command_status_event ||
   1a6f8:	e7ec      	b.n	1a6d4 <hci_internal_cmd_put+0x290>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a6fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a6fe:	480d      	ldr	r0, [pc, #52]	; (1a734 <hci_internal_cmd_put+0x2f0>)
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   1a700:	3306      	adds	r3, #6
   1a702:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   1a706:	f7f2 fd66 	bl	d1d6 <sdc_hci_cmd_ip_read_bd_addr>
	if (generate_command_status_event ||
   1a70a:	e734      	b.n	1a576 <hci_internal_cmd_put+0x132>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a70c:	4628      	mov	r0, r5
	switch (opcode)	{
   1a70e:	f242 014b 	movw	r1, #8267	; 0x204b
   1a712:	f830 3b03 	ldrh.w	r3, [r0], #3
   1a716:	b21a      	sxth	r2, r3
   1a718:	428a      	cmp	r2, r1
   1a71a:	f242 0132 	movw	r1, #8242	; 0x2032
   1a71e:	dc75      	bgt.n	1a80c <hci_internal_cmd_put+0x3c8>
   1a720:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a724:	dc08      	bgt.n	1a738 <hci_internal_cmd_put+0x2f4>
	switch (hci_opcode) {
   1a726:	428e      	cmp	r6, r1
   1a728:	e05b      	b.n	1a7e2 <hci_internal_cmd_put+0x39e>
   1a72a:	bf00      	nop
   1a72c:	20002a83 	.word	0x20002a83
   1a730:	2000280c 	.word	0x2000280c
   1a734:	20002a8a 	.word	0x20002a8a
	switch (opcode)	{
   1a738:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
   1a73c:	3b01      	subs	r3, #1
   1a73e:	2b4a      	cmp	r3, #74	; 0x4a
   1a740:	d84c      	bhi.n	1a7dc <hci_internal_cmd_put+0x398>
   1a742:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a746:	006a      	.short	0x006a
   1a748:	007b0072 	.word	0x007b0072
   1a74c:	009c004b 	.word	0x009c004b
   1a750:	004b004b 	.word	0x004b004b
   1a754:	004b004b 	.word	0x004b004b
   1a758:	009f004b 	.word	0x009f004b
   1a75c:	00a500a2 	.word	0x00a500a2
   1a760:	00ab00a8 	.word	0x00ab00a8
   1a764:	00b700b4 	.word	0x00b700b4
   1a768:	00bd00ba 	.word	0x00bd00ba
   1a76c:	00c300c0 	.word	0x00c300c0
   1a770:	00cf00cc 	.word	0x00cf00cc
   1a774:	00e100d8 	.word	0x00e100d8
   1a778:	004b004b 	.word	0x004b004b
   1a77c:	004b00e4 	.word	0x004b00e4
   1a780:	004b004b 	.word	0x004b004b
   1a784:	004b004b 	.word	0x004b004b
   1a788:	010600fd 	.word	0x010600fd
   1a78c:	0112010f 	.word	0x0112010f
   1a790:	004b0115 	.word	0x004b0115
   1a794:	004b004b 	.word	0x004b004b
   1a798:	004b004b 	.word	0x004b004b
   1a79c:	004b004b 	.word	0x004b004b
   1a7a0:	0118004b 	.word	0x0118004b
   1a7a4:	012a0121 	.word	0x012a0121
   1a7a8:	004b012d 	.word	0x004b012d
   1a7ac:	004b004b 	.word	0x004b004b
   1a7b0:	004b004b 	.word	0x004b004b
   1a7b4:	004b004b 	.word	0x004b004b
   1a7b8:	004b004b 	.word	0x004b004b
   1a7bc:	004b004b 	.word	0x004b004b
   1a7c0:	004b004b 	.word	0x004b004b
   1a7c4:	004b004b 	.word	0x004b004b
   1a7c8:	004b004b 	.word	0x004b004b
   1a7cc:	004b004b 	.word	0x004b004b
   1a7d0:	004b004b 	.word	0x004b004b
   1a7d4:	004b004b 	.word	0x004b004b
   1a7d8:	0130004b 	.word	0x0130004b
	switch (hci_opcode) {
   1a7dc:	f242 0332 	movw	r3, #8242	; 0x2032
   1a7e0:	429e      	cmp	r6, r3
   1a7e2:	f43f aeb3 	beq.w	1a54c <hci_internal_cmd_put+0x108>
   1a7e6:	f200 81a3 	bhi.w	1ab30 <hci_internal_cmd_put+0x6ec>
   1a7ea:	f242 0326 	movw	r3, #8230	; 0x2026
   1a7ee:	429e      	cmp	r6, r3
   1a7f0:	f63f aeac 	bhi.w	1a54c <hci_internal_cmd_put+0x108>
   1a7f4:	2001      	movs	r0, #1
   1a7f6:	f242 030c 	movw	r3, #8204	; 0x200c
   1a7fa:	429e      	cmp	r6, r3
   1a7fc:	f67f ae6d 	bls.w	1a4da <hci_internal_cmd_put+0x96>
   1a800:	f5a6 5300 	sub.w	r3, r6, #8192	; 0x2000
   1a804:	3b0d      	subs	r3, #13
   1a806:	4ac7      	ldr	r2, [pc, #796]	; (1ab24 <hci_internal_cmd_put+0x6e0>)
   1a808:	b29b      	uxth	r3, r3
   1a80a:	e17e      	b.n	1ab0a <hci_internal_cmd_put+0x6c6>
	switch (opcode)	{
   1a80c:	f242 035e 	movw	r3, #8286	; 0x205e
   1a810:	429a      	cmp	r2, r3
   1a812:	d188      	bne.n	1a726 <hci_internal_cmd_put+0x2e2>
		return hci_cmd_le_generate_dhkey_v2((void *)cmd_params);
   1a814:	f005 fea8 	bl	20568 <hci_cmd_le_generate_dhkey_v2>
   1a818:	e001      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   1a81a:	f7f2 fd06 	bl	d22a <sdc_hci_cmd_le_set_event_mask>
	switch (hci_opcode) {
   1a81e:	f242 0332 	movw	r3, #8242	; 0x2032
   1a822:	429e      	cmp	r6, r3
   1a824:	f47f ae66 	bne.w	1a4f4 <hci_internal_cmd_put+0xb0>
   1a828:	e07c      	b.n	1a924 <hci_internal_cmd_put+0x4e0>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1a82a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a82e:	48be      	ldr	r0, [pc, #760]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   1a830:	3303      	adds	r3, #3
   1a832:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   1a836:	f7f2 fce2 	bl	d1fe <sdc_hci_cmd_le_read_buffer_size>
   1a83a:	e7f0      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a83c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a840:	48b9      	ldr	r0, [pc, #740]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a842:	3308      	adds	r3, #8
	memset(features, 0, sizeof(*features));
   1a844:	2208      	movs	r2, #8
   1a846:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   1a848:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(features, 0, sizeof(*features));
   1a84c:	f003 ffa3 	bl	1e796 <memset>
	features->params.le_encryption = 1;
   1a850:	79e3      	ldrb	r3, [r4, #7]
   1a852:	f063 0342 	orn	r3, r3, #66	; 0x42
   1a856:	71e3      	strb	r3, [r4, #7]
	features->params.le_2m_phy = 1;
   1a858:	7a23      	ldrb	r3, [r4, #8]
   1a85a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   1a85e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   1a862:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   1a864:	f242 0332 	movw	r3, #8242	; 0x2032
   1a868:	429e      	cmp	r6, r3
   1a86a:	d05a      	beq.n	1a922 <hci_internal_cmd_put+0x4de>
   1a86c:	f200 8153 	bhi.w	1ab16 <hci_internal_cmd_put+0x6d2>
   1a870:	f242 0326 	movw	r3, #8230	; 0x2026
   1a874:	429e      	cmp	r6, r3
   1a876:	f63f af2d 	bhi.w	1a6d4 <hci_internal_cmd_put+0x290>
		return 0;
   1a87a:	2000      	movs	r0, #0
   1a87c:	e7bb      	b.n	1a7f6 <hci_internal_cmd_put+0x3b2>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   1a87e:	f7f2 fcdd 	bl	d23c <sdc_hci_cmd_le_set_random_address>
   1a882:	e7cc      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   1a884:	f7f2 fcde 	bl	d244 <sdc_hci_cmd_le_set_scan_params>
   1a888:	e7c9      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   1a88a:	f7f2 fcd9 	bl	d240 <sdc_hci_cmd_le_set_scan_enable>
   1a88e:	e7c6      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   1a890:	f7f2 fcab 	bl	d1ea <sdc_hci_cmd_le_create_conn>
   1a894:	e7c3      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_create_conn_cancel();
   1a896:	f7f2 fcaa 	bl	d1ee <sdc_hci_cmd_le_create_conn_cancel>
   1a89a:	e7c0      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1a89c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1a8a0:	48a1      	ldr	r0, [pc, #644]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_filter_accept_list_size_return_t);
   1a8a2:	3301      	adds	r3, #1
   1a8a4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_filter_accept_list_size((void *)event_out_params);
   1a8a8:	f7f2 fcad 	bl	d206 <sdc_hci_cmd_le_read_filter_accept_list_size>
   1a8ac:	e7b7      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_clear_filter_accept_list();
   1a8ae:	f7f2 fc98 	bl	d1e2 <sdc_hci_cmd_le_clear_filter_accept_list>
   1a8b2:	e7b4      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_add_device_to_filter_accept_list((void *)cmd_params);
   1a8b4:	f7f2 fc93 	bl	d1de <sdc_hci_cmd_le_add_device_to_filter_accept_list>
   1a8b8:	e7b1      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_remove_device_from_filter_accept_list((void *)cmd_params);
   1a8ba:	f7f2 fcb0 	bl	d21e <sdc_hci_cmd_le_remove_device_from_filter_accept_list>
   1a8be:	e7ae      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   1a8c0:	f7f2 fc91 	bl	d1e6 <sdc_hci_cmd_le_conn_update>
   1a8c4:	e7ab      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   1a8c6:	f7f2 fcb5 	bl	d234 <sdc_hci_cmd_le_set_host_channel_classification>
   1a8ca:	e7a8      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1a8cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a8d0:	4995      	ldr	r1, [pc, #596]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   1a8d2:	3307      	adds	r3, #7
   1a8d4:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   1a8d8:	f7f2 fc93 	bl	d202 <sdc_hci_cmd_le_read_channel_map>
   1a8dc:	e79f      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   1a8de:	f7f2 fc98 	bl	d212 <sdc_hci_cmd_le_read_remote_features>
   1a8e2:	e79c      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1a8e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a8e8:	498f      	ldr	r1, [pc, #572]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   1a8ea:	3310      	adds	r3, #16
   1a8ec:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   1a8f0:	f7f2 fc81 	bl	d1f6 <sdc_hci_cmd_le_encrypt>
   1a8f4:	e793      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1a8f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1a8fa:	488b      	ldr	r0, [pc, #556]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_rand_return_t);
   1a8fc:	3308      	adds	r3, #8
   1a8fe:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   1a902:	f7f2 fc7a 	bl	d1fa <sdc_hci_cmd_le_rand>
   1a906:	e78a      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   1a908:	f7f2 fc73 	bl	d1f2 <sdc_hci_cmd_le_enable_encryption>
   1a90c:	e787      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   1a90e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1a912:	3308      	adds	r3, #8
   1a914:	f88d 3007 	strb.w	r3, [sp, #7]
	*buf = states1;
   1a918:	2370      	movs	r3, #112	; 0x70
   1a91a:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   1a91c:	2340      	movs	r3, #64	; 0x40
   1a91e:	72e3      	strb	r3, [r4, #11]
   1a920:	e7a0      	b.n	1a864 <hci_internal_cmd_put+0x420>
		return 0;
   1a922:	2000      	movs	r0, #0
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1a924:	230f      	movs	r3, #15
   1a926:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   1a928:	2304      	movs	r3, #4
   1a92a:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   1a92c:	2301      	movs	r3, #1
	evt_data->status = status_code;
   1a92e:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   1a930:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   1a932:	f8a4 6005 	strh.w	r6, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   1a936:	2301      	movs	r3, #1
   1a938:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   1a93a:	2000      	movs	r0, #0
}
   1a93c:	b003      	add	sp, #12
   1a93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1a940:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1a944:	4978      	ldr	r1, [pc, #480]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_set_data_length_return_t);
   1a946:	3302      	adds	r3, #2
   1a948:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   1a94c:	f7f2 fc69 	bl	d222 <sdc_hci_cmd_le_set_data_length>
   1a950:	e765      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out +=
   1a952:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1a956:	4874      	ldr	r0, [pc, #464]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1a958:	3304      	adds	r3, #4
   1a95a:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   1a95e:	f7f2 fc5a 	bl	d216 <sdc_hci_cmd_le_read_suggested_default_data_length>
   1a962:	e75c      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   1a964:	f7f2 fc70 	bl	d248 <sdc_hci_cmd_le_write_suggested_default_data_length>
   1a968:	e759      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return hci_cmd_le_read_local_p256_public_key();
   1a96a:	f000 fa45 	bl	1adf8 <hci_cmd_le_read_local_p256_public_key>
   1a96e:	e756      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return hci_cmd_le_generate_dhkey((void *)cmd_params);
   1a970:	f005 fdf7 	bl	20562 <hci_cmd_le_generate_dhkey>
   1a974:	e753      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1a976:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a97a:	486b      	ldr	r0, [pc, #428]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   1a97c:	3308      	adds	r3, #8
   1a97e:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   1a982:	f7f2 fc42 	bl	d20a <sdc_hci_cmd_le_read_max_data_length>
   1a986:	e74a      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1a988:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a98c:	4966      	ldr	r1, [pc, #408]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   1a98e:	3304      	adds	r3, #4
   1a990:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   1a994:	f7f2 fc3b 	bl	d20e <sdc_hci_cmd_le_read_phy>
   1a998:	e741      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   1a99a:	f7f2 fc44 	bl	d226 <sdc_hci_cmd_le_set_default_phy>
   1a99e:	e73e      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   1a9a0:	f7f2 fc4a 	bl	d238 <sdc_hci_cmd_le_set_phy>
   1a9a4:	e73b      	b.n	1a81e <hci_internal_cmd_put+0x3da>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1a9a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a9aa:	485f      	ldr	r0, [pc, #380]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   1a9ac:	3302      	adds	r3, #2
   1a9ae:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   1a9b2:	f7f2 fc32 	bl	d21a <sdc_hci_cmd_le_read_transmit_power>
   1a9b6:	e732      	b.n	1a81e <hci_internal_cmd_put+0x3da>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   1a9b8:	4628      	mov	r0, r5
	switch (opcode)	{
   1a9ba:	f64f 420b 	movw	r2, #64523	; 0xfc0b
   1a9be:	f830 3b03 	ldrh.w	r3, [r0], #3
   1a9c2:	4293      	cmp	r3, r2
   1a9c4:	d822      	bhi.n	1aa0c <hci_internal_cmd_put+0x5c8>
   1a9c6:	f5b3 4f7c 	cmp.w	r3, #64512	; 0xfc00
   1a9ca:	f67f ad78 	bls.w	1a4be <hci_internal_cmd_put+0x7a>
   1a9ce:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
   1a9d2:	3b01      	subs	r3, #1
   1a9d4:	2b0a      	cmp	r3, #10
   1a9d6:	f63f ad72 	bhi.w	1a4be <hci_internal_cmd_put+0x7a>
   1a9da:	a201      	add	r2, pc, #4	; (adr r2, 1a9e0 <hci_internal_cmd_put+0x59c>)
   1a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a9e0:	0001aa2d 	.word	0x0001aa2d
   1a9e4:	0001aa49 	.word	0x0001aa49
   1a9e8:	0001a4bf 	.word	0x0001a4bf
   1a9ec:	0001a4bf 	.word	0x0001a4bf
   1a9f0:	0001a4bf 	.word	0x0001a4bf
   1a9f4:	0001aa9d 	.word	0x0001aa9d
   1a9f8:	0001a4bf 	.word	0x0001a4bf
   1a9fc:	0001a4bf 	.word	0x0001a4bf
   1aa00:	0001aa79 	.word	0x0001aa79
   1aa04:	0001aa8b 	.word	0x0001aa8b
   1aa08:	0001aaa3 	.word	0x0001aaa3
   1aa0c:	f503 7240 	add.w	r2, r3, #768	; 0x300
   1aa10:	b292      	uxth	r2, r2
   1aa12:	2a05      	cmp	r2, #5
   1aa14:	f63f ad53 	bhi.w	1a4be <hci_internal_cmd_put+0x7a>
   1aa18:	f5a3 437d 	sub.w	r3, r3, #64768	; 0xfd00
   1aa1c:	3b01      	subs	r3, #1
   1aa1e:	2b04      	cmp	r3, #4
   1aa20:	d848      	bhi.n	1aab4 <hci_internal_cmd_put+0x670>
   1aa22:	e8df f003 	tbb	[pc, r3]
   1aa26:	5b58      	.short	0x5b58
   1aa28:	615e      	.short	0x615e
   1aa2a:	64          	.byte	0x64
   1aa2b:	00          	.byte	0x00
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1aa2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1aa30:	483d      	ldr	r0, [pc, #244]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   1aa32:	330c      	adds	r3, #12
   1aa34:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   1aa38:	f7e6 f9e4 	bl	e04 <sdc_hci_cmd_vs_zephyr_read_version_info>
	switch (hci_opcode) {
   1aa3c:	f026 0308 	bic.w	r3, r6, #8
   1aa40:	f64f 5202 	movw	r2, #64770	; 0xfd02
   1aa44:	4293      	cmp	r3, r2
   1aa46:	e550      	b.n	1a4ea <hci_internal_cmd_put+0xa6>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1aa48:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1aa4c:	4836      	ldr	r0, [pc, #216]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1aa4e:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1aa50:	2202      	movs	r2, #2
   1aa52:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_supported_commands_return_t);
   1aa54:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1aa58:	f003 fe9d 	bl	1e796 <memset>
	cmds->read_version_info = 1;
   1aa5c:	79e3      	ldrb	r3, [r4, #7]
   1aa5e:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   1aa62:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   1aa66:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   1aa68:	7a23      	ldrb	r3, [r4, #8]
   1aa6a:	f023 0307 	bic.w	r3, r3, #7
   1aa6e:	f043 0307 	orr.w	r3, r3, #7
   1aa72:	7223      	strb	r3, [r4, #8]
		return 0;
   1aa74:	2000      	movs	r0, #0
   1aa76:	e7e1      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1aa78:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1aa7c:	482a      	ldr	r0, [pc, #168]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   1aa7e:	3317      	adds	r3, #23
   1aa80:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   1aa84:	f7f2 fb56 	bl	d134 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
   1aa88:	e7d8      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		*param_length_out +=
   1aa8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1aa8e:	4826      	ldr	r0, [pc, #152]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out +=
   1aa90:	3320      	adds	r3, #32
   1aa92:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   1aa96:	f7f2 fb00 	bl	d09a <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
   1aa9a:	e7cf      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   1aa9c:	f7f2 fb99 	bl	d1d2 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
   1aaa0:	e7cc      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1aaa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1aaa6:	4820      	ldr	r0, [pc, #128]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_chip_temp_return_t);
   1aaa8:	3301      	adds	r3, #1
   1aaaa:	f88d 3007 	strb.w	r3, [sp, #7]
		return sdc_hci_cmd_vs_zephyr_read_chip_temp((void *)event_out_params);
   1aaae:	f7f2 fae0 	bl	d072 <sdc_hci_cmd_vs_zephyr_read_chip_temp>
   1aab2:	e7c3      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1aab4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1aab8:	481b      	ldr	r0, [pc, #108]	; (1ab28 <hci_internal_cmd_put+0x6e4>)
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1aaba:	3340      	adds	r3, #64	; 0x40
	memset(cmds, 0, sizeof(*cmds));
   1aabc:	2202      	movs	r2, #2
   1aabe:	2100      	movs	r1, #0
		*param_length_out += sizeof(sdc_hci_cmd_vs_read_supported_vs_commands_return_t);
   1aac0:	f88d 3007 	strb.w	r3, [sp, #7]
	memset(cmds, 0, sizeof(*cmds));
   1aac4:	f003 fe67 	bl	1e796 <memset>
	cmds->read_supported_vs_commands = 1;
   1aac8:	79e3      	ldrb	r3, [r4, #7]
   1aaca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   1aace:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
   1aad2:	71e3      	strb	r3, [r4, #7]
	switch (hci_opcode) {
   1aad4:	e7ce      	b.n	1aa74 <hci_internal_cmd_put+0x630>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   1aad6:	f7f2 fac5 	bl	d064 <sdc_hci_cmd_vs_llpm_mode_set>
   1aada:	e7af      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   1aadc:	f7f2 fa96 	bl	d00c <sdc_hci_cmd_vs_conn_update>
   1aae0:	e7ac      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   1aae2:	f7f2 fa8b 	bl	cffc <sdc_hci_cmd_vs_conn_event_extend>
   1aae6:	e7a9      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   1aae8:	f7f2 fabe 	bl	d068 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   1aaec:	e7a6      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   1aaee:	f7f2 fab7 	bl	d060 <sdc_hci_cmd_vs_event_length_set>
   1aaf2:	e7a3      	b.n	1aa3c <hci_internal_cmd_put+0x5f8>
	switch (hci_opcode) {
   1aaf4:	f242 0326 	movw	r3, #8230	; 0x2026
   1aaf8:	429e      	cmp	r6, r3
   1aafa:	f67f ae7c 	bls.w	1a7f6 <hci_internal_cmd_put+0x3b2>
   1aafe:	e53a      	b.n	1a576 <hci_internal_cmd_put+0x132>
		switch (BT_OGF(opcode)) {
   1ab00:	2001      	movs	r0, #1
	if (generate_command_status_event ||
   1ab02:	e538      	b.n	1a576 <hci_internal_cmd_put+0x132>
	switch (hci_opcode) {
   1ab04:	3b2d      	subs	r3, #45	; 0x2d
   1ab06:	4a09      	ldr	r2, [pc, #36]	; (1ab2c <hci_internal_cmd_put+0x6e8>)
   1ab08:	b29b      	uxth	r3, r3
   1ab0a:	fa22 f303 	lsr.w	r3, r2, r3
   1ab0e:	07db      	lsls	r3, r3, #31
   1ab10:	f57f ad31 	bpl.w	1a576 <hci_internal_cmd_put+0x132>
   1ab14:	e706      	b.n	1a924 <hci_internal_cmd_put+0x4e0>
   1ab16:	f242 0385 	movw	r3, #8325	; 0x2085
   1ab1a:	429e      	cmp	r6, r3
   1ab1c:	d90c      	bls.n	1ab38 <hci_internal_cmd_put+0x6f4>
		return 0;
   1ab1e:	2000      	movs	r0, #0
   1ab20:	e529      	b.n	1a576 <hci_internal_cmd_put+0x132>
   1ab22:	bf00      	nop
   1ab24:	03001241 	.word	0x03001241
   1ab28:	20002a8a 	.word	0x20002a8a
   1ab2c:	01000401 	.word	0x01000401
	switch (hci_opcode) {
   1ab30:	f242 0385 	movw	r3, #8325	; 0x2085
   1ab34:	2001      	movs	r0, #1
   1ab36:	e4e4      	b.n	1a502 <hci_internal_cmd_put+0xbe>
		return 0;
   1ab38:	2000      	movs	r0, #0
   1ab3a:	e4e4      	b.n	1a506 <hci_internal_cmd_put+0xc2>
		return -NRF_EPERM;
   1ab3c:	f04f 30ff 	mov.w	r0, #4294967295
   1ab40:	e6fc      	b.n	1a93c <hci_internal_cmd_put+0x4f8>
   1ab42:	bf00      	nop

0001ab44 <hci_internal_msg_get>:

int hci_internal_msg_get(uint8_t *msg_out, sdc_hci_msg_type_t *msg_type_out)
{
   1ab44:	b538      	push	{r3, r4, r5, lr}
	if (cmd_complete_or_status.occurred) {
   1ab46:	4c09      	ldr	r4, [pc, #36]	; (1ab6c <hci_internal_msg_get+0x28>)
   1ab48:	7823      	ldrb	r3, [r4, #0]
{
   1ab4a:	460d      	mov	r5, r1
	if (cmd_complete_or_status.occurred) {
   1ab4c:	b91b      	cbnz	r3, 1ab56 <hci_internal_msg_get+0x12>

		return 0;
	}

	return sdc_hci_get(msg_out, msg_type_out);
}
   1ab4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return sdc_hci_get(msg_out, msg_type_out);
   1ab52:	f7f2 ba33 	b.w	cfbc <sdc_hci_get>
					 evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
   1ab56:	78a2      	ldrb	r2, [r4, #2]
		memcpy(msg_out,
   1ab58:	1c61      	adds	r1, r4, #1
   1ab5a:	3202      	adds	r2, #2
   1ab5c:	f003 fe10 	bl	1e780 <memcpy>
		cmd_complete_or_status.occurred = false;
   1ab60:	2000      	movs	r0, #0
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ab62:	2304      	movs	r3, #4
		cmd_complete_or_status.occurred = false;
   1ab64:	7020      	strb	r0, [r4, #0]
		*msg_type_out = SDC_HCI_MSG_TYPE_EVT;
   1ab66:	702b      	strb	r3, [r5, #0]
}
   1ab68:	bd38      	pop	{r3, r4, r5, pc}
   1ab6a:	bf00      	nop
   1ab6c:	20002a83 	.word	0x20002a83

0001ab70 <bt_rand>:
#define BT_ECB_BLOCK_SIZE 16

static const struct device *dev = DEVICE_DT_GET(DT_NODELABEL(rng));

int bt_rand(void *buf, size_t len)
{
   1ab70:	b570      	push	{r4, r5, r6, lr}
   1ab72:	4605      	mov	r5, r0
   1ab74:	460e      	mov	r6, r1
   1ab76:	4c08      	ldr	r4, [pc, #32]	; (1ab98 <bt_rand+0x28>)
   1ab78:	4620      	mov	r0, r4
   1ab7a:	f005 fe4c 	bl	20816 <z_device_is_ready>
	if (unlikely(!device_is_ready(dev))) {
   1ab7e:	b138      	cbz	r0, 1ab90 <bt_rand+0x20>
   1ab80:	68a3      	ldr	r3, [r4, #8]
   1ab82:	b2b2      	uxth	r2, r6
   1ab84:	4629      	mov	r1, r5
   1ab86:	4620      	mov	r0, r4
   1ab88:	681b      	ldr	r3, [r3, #0]
		return -ENODEV;
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
}
   1ab8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ab8e:	4718      	bx	r3
   1ab90:	f06f 0012 	mvn.w	r0, #18
   1ab94:	bd70      	pop	{r4, r5, r6, pc}
   1ab96:	bf00      	nop
   1ab98:	000213bc 	.word	0x000213bc

0001ab9c <ecdh_p256_common_secret>:

	return buf;
}

static struct net_buf *ecdh_p256_common_secret(bool use_debug)
{
   1ab9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = ocrypto_ecdh_p256_common_secret(ecdh.dhkey_be,
   1ab9e:	4b21      	ldr	r3, [pc, #132]	; (1ac24 <ecdh_p256_common_secret+0x88>)
   1aba0:	4921      	ldr	r1, [pc, #132]	; (1ac28 <ecdh_p256_common_secret+0x8c>)
   1aba2:	f103 0220 	add.w	r2, r3, #32
   1aba6:	2800      	cmp	r0, #0
   1aba8:	bf08      	it	eq
   1abaa:	4619      	moveq	r1, r3
   1abac:	4610      	mov	r0, r2
   1abae:	f002 fbcb 	bl	1d348 <ocrypto_ecdh_p256_common_secret>
	if (err) {
   1abb2:	2300      	movs	r3, #0
   1abb4:	4604      	mov	r4, r0
   1abb6:	b150      	cbz	r0, 1abce <ecdh_p256_common_secret+0x32>
		LOG_ERR("public key is not valid (err %d)", err);
   1abb8:	4a1c      	ldr	r2, [pc, #112]	; (1ac2c <ecdh_p256_common_secret+0x90>)
   1abba:	9003      	str	r0, [sp, #12]
   1abbc:	e9cd 3201 	strd	r3, r2, [sp, #4]
   1abc0:	491b      	ldr	r1, [pc, #108]	; (1ac30 <ecdh_p256_common_secret+0x94>)
   1abc2:	9300      	str	r3, [sp, #0]
   1abc4:	2201      	movs	r2, #1
   1abc6:	4618      	mov	r0, r3
   1abc8:	f005 fcb2 	bl	20530 <z_log_msg_runtime_create.constprop.0>
		return BT_HCI_ERR_INVALID_PARAM;
   1abcc:	2412      	movs	r4, #18
	struct net_buf *buf;
	uint8_t status;

	status = common_secret(use_debug);

	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1abce:	f04f 32ff 	mov.w	r2, #4294967295
   1abd2:	f04f 33ff 	mov.w	r3, #4294967295
   1abd6:	2001      	movs	r0, #1
   1abd8:	f7f8 fc5e 	bl	13498 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1abdc:	f100 060c 	add.w	r6, r0, #12
   1abe0:	2102      	movs	r1, #2
   1abe2:	4605      	mov	r5, r0
   1abe4:	4630      	mov	r0, r6
   1abe6:	f005 f8b1 	bl	1fd4c <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1abea:	233e      	movs	r3, #62	; 0x3e
   1abec:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1abee:	2322      	movs	r3, #34	; 0x22
   1abf0:	7043      	strb	r3, [r0, #1]
   1abf2:	2101      	movs	r1, #1
   1abf4:	4630      	mov	r0, r6
   1abf6:	f005 f8a9 	bl	1fd4c <net_buf_simple_add>

	meta = net_buf_add(buf, sizeof(*meta));
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
   1abfa:	2309      	movs	r3, #9
   1abfc:	7003      	strb	r3, [r0, #0]
   1abfe:	2121      	movs	r1, #33	; 0x21
   1ac00:	4630      	mov	r0, r6
   1ac02:	f005 f8a3 	bl	1fd4c <net_buf_simple_add>

	evt = net_buf_add(buf, sizeof(*evt));
	evt->status = status;
   1ac06:	f800 4b01 	strb.w	r4, [r0], #1

	if (status) {
   1ac0a:	b134      	cbz	r4, 1ac1a <ecdh_p256_common_secret+0x7e>
		memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
   1ac0c:	2220      	movs	r2, #32
   1ac0e:	21ff      	movs	r1, #255	; 0xff
   1ac10:	f003 fdc1 	bl	1e796 <memset>
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
				sizeof(ecdh.dhkey_be));
	}

	return buf;
}
   1ac14:	4628      	mov	r0, r5
   1ac16:	b004      	add	sp, #16
   1ac18:	bd70      	pop	{r4, r5, r6, pc}
		sys_memcpy_swap(evt->dhkey, ecdh.dhkey_be,
   1ac1a:	4906      	ldr	r1, [pc, #24]	; (1ac34 <ecdh_p256_common_secret+0x98>)
   1ac1c:	f005 fc97 	bl	2054e <sys_memcpy_swap.constprop.0>
   1ac20:	e7f8      	b.n	1ac14 <ecdh_p256_common_secret+0x78>
   1ac22:	bf00      	nop
   1ac24:	20002aca 	.word	0x20002aca
   1ac28:	00023aad 	.word	0x00023aad
   1ac2c:	00023a6f 	.word	0x00023a6f
   1ac30:	0002166c 	.word	0x0002166c
   1ac34:	20002aea 	.word	0x20002aea

0001ac38 <ecdh_cmd_process>:

void ecdh_cmd_process(void)
{
   1ac38:	b5f0      	push	{r4, r5, r6, r7, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ac3a:	4d41      	ldr	r5, [pc, #260]	; (1ad40 <ecdh_cmd_process+0x108>)
   1ac3c:	f3bf 8f5b 	dmb	ish
   1ac40:	682b      	ldr	r3, [r5, #0]
   1ac42:	f3bf 8f5b 	dmb	ish
	struct net_buf *buf;

	switch (atomic_get(&cmd)) {
   1ac46:	2b02      	cmp	r3, #2
{
   1ac48:	b085      	sub	sp, #20
   1ac4a:	462f      	mov	r7, r5
	switch (atomic_get(&cmd)) {
   1ac4c:	d05a      	beq.n	1ad04 <ecdh_cmd_process+0xcc>
   1ac4e:	2b04      	cmp	r3, #4
   1ac50:	d05d      	beq.n	1ad0e <ecdh_cmd_process+0xd6>
   1ac52:	2b01      	cmp	r3, #1
   1ac54:	d15d      	bne.n	1ad12 <ecdh_cmd_process+0xda>
		err = bt_rand(ecdh.private_key_be, 32);
   1ac56:	4c3b      	ldr	r4, [pc, #236]	; (1ad44 <ecdh_cmd_process+0x10c>)
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ac58:	4e3b      	ldr	r6, [pc, #236]	; (1ad48 <ecdh_cmd_process+0x110>)
		err = bt_rand(ecdh.private_key_be, 32);
   1ac5a:	2120      	movs	r1, #32
   1ac5c:	4620      	mov	r0, r4
   1ac5e:	f7ff ff87 	bl	1ab70 <bt_rand>
		if (err) {
   1ac62:	2800      	cmp	r0, #0
   1ac64:	d143      	bne.n	1acee <ecdh_cmd_process+0xb6>
		if (!memcmp(ecdh.private_key_be, debug_private_key_be, 32)) {
   1ac66:	2220      	movs	r2, #32
   1ac68:	4631      	mov	r1, r6
   1ac6a:	4620      	mov	r0, r4
   1ac6c:	f003 fd78 	bl	1e760 <memcmp>
   1ac70:	2800      	cmp	r0, #0
   1ac72:	d0f2      	beq.n	1ac5a <ecdh_cmd_process+0x22>
		err = ocrypto_ecdh_p256_public_key(ecdh.public_key_be,
   1ac74:	4835      	ldr	r0, [pc, #212]	; (1ad4c <ecdh_cmd_process+0x114>)
   1ac76:	4621      	mov	r1, r4
   1ac78:	f002 fb52 	bl	1d320 <ocrypto_ecdh_p256_public_key>
	} while (err);
   1ac7c:	4605      	mov	r5, r0
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d1eb      	bne.n	1ac5a <ecdh_cmd_process+0x22>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1ac82:	f04f 32ff 	mov.w	r2, #4294967295
   1ac86:	f04f 33ff 	mov.w	r3, #4294967295
   1ac8a:	2001      	movs	r0, #1
   1ac8c:	f7f8 fc04 	bl	13498 <bt_buf_get_rx>
   1ac90:	f100 060c 	add.w	r6, r0, #12
   1ac94:	2102      	movs	r1, #2
   1ac96:	4604      	mov	r4, r0
   1ac98:	4630      	mov	r0, r6
   1ac9a:	f005 f857 	bl	1fd4c <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
   1ac9e:	233e      	movs	r3, #62	; 0x3e
   1aca0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
   1aca2:	2342      	movs	r3, #66	; 0x42
   1aca4:	7043      	strb	r3, [r0, #1]
   1aca6:	2101      	movs	r1, #1
   1aca8:	4630      	mov	r0, r6
   1acaa:	f005 f84f 	bl	1fd4c <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
   1acae:	2308      	movs	r3, #8
   1acb0:	7003      	strb	r3, [r0, #0]
   1acb2:	2141      	movs	r1, #65	; 0x41
   1acb4:	4630      	mov	r0, r6
   1acb6:	f005 f849 	bl	1fd4c <net_buf_simple_add>
   1acba:	4606      	mov	r6, r0
	evt->status = status;
   1acbc:	f800 5b01 	strb.w	r5, [r0], #1
	if (status) {
   1acc0:	b1bd      	cbz	r5, 1acf2 <ecdh_cmd_process+0xba>
		(void)memset(evt->key, 0, sizeof(evt->key));
   1acc2:	2240      	movs	r2, #64	; 0x40
   1acc4:	2100      	movs	r1, #0
   1acc6:	f003 fd66 	bl	1e796 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1acca:	f3bf 8f5b 	dmb	ish
   1acce:	2300      	movs	r3, #0
   1acd0:	e857 2f00 	ldrex	r2, [r7]
   1acd4:	e847 3100 	strex	r1, r3, [r7]
   1acd8:	2900      	cmp	r1, #0
   1acda:	d1f9      	bne.n	1acd0 <ecdh_cmd_process+0x98>
   1acdc:	f3bf 8f5b 	dmb	ish
		buf = NULL;
		break;
	}

	atomic_set(&cmd, 0);
	if (buf) {
   1ace0:	b364      	cbz	r4, 1ad3c <ecdh_cmd_process+0x104>
		bt_recv(buf);
   1ace2:	4620      	mov	r0, r4
	}
}
   1ace4:	b005      	add	sp, #20
   1ace6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_recv(buf);
   1acea:	f7f9 bcd9 	b.w	146a0 <bt_recv>
			return BT_HCI_ERR_UNSPECIFIED;
   1acee:	251f      	movs	r5, #31
   1acf0:	e7c7      	b.n	1ac82 <ecdh_cmd_process+0x4a>
		sys_memcpy_swap(&evt->key[0], &ecdh.public_key_be[0], 32);
   1acf2:	4916      	ldr	r1, [pc, #88]	; (1ad4c <ecdh_cmd_process+0x114>)
   1acf4:	f005 fc2b 	bl	2054e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecdh.public_key_be[32], 32);
   1acf8:	3120      	adds	r1, #32
   1acfa:	f106 0021 	add.w	r0, r6, #33	; 0x21
   1acfe:	f005 fc26 	bl	2054e <sys_memcpy_swap.constprop.0>
		break;
   1ad02:	e7e2      	b.n	1acca <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(false);
   1ad04:	2000      	movs	r0, #0
		buf = ecdh_p256_common_secret(true);
   1ad06:	f7ff ff49 	bl	1ab9c <ecdh_p256_common_secret>
   1ad0a:	4604      	mov	r4, r0
		break;
   1ad0c:	e7dd      	b.n	1acca <ecdh_cmd_process+0x92>
		buf = ecdh_p256_common_secret(true);
   1ad0e:	2001      	movs	r0, #1
   1ad10:	e7f9      	b.n	1ad06 <ecdh_cmd_process+0xce>
		LOG_WRN("Unknown command");
   1ad12:	2400      	movs	r4, #0
   1ad14:	4b0e      	ldr	r3, [pc, #56]	; (1ad50 <ecdh_cmd_process+0x118>)
   1ad16:	9302      	str	r3, [sp, #8]
   1ad18:	e9cd 4400 	strd	r4, r4, [sp]
   1ad1c:	490d      	ldr	r1, [pc, #52]	; (1ad54 <ecdh_cmd_process+0x11c>)
   1ad1e:	4623      	mov	r3, r4
   1ad20:	2202      	movs	r2, #2
   1ad22:	4620      	mov	r0, r4
   1ad24:	f005 fc04 	bl	20530 <z_log_msg_runtime_create.constprop.0>
   1ad28:	f3bf 8f5b 	dmb	ish
   1ad2c:	e855 3f00 	ldrex	r3, [r5]
   1ad30:	e845 4200 	strex	r2, r4, [r5]
   1ad34:	2a00      	cmp	r2, #0
   1ad36:	d1f9      	bne.n	1ad2c <ecdh_cmd_process+0xf4>
   1ad38:	f3bf 8f5b 	dmb	ish
}
   1ad3c:	b005      	add	sp, #20
   1ad3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ad40:	20002820 	.word	0x20002820
   1ad44:	20002aca 	.word	0x20002aca
   1ad48:	00023aad 	.word	0x00023aad
   1ad4c:	20002aea 	.word	0x20002aea
   1ad50:	00023a90 	.word	0x00023a90
   1ad54:	0002166c 	.word	0x0002166c

0001ad58 <ecdh_thread>:
{
	k_poll_signal_raise(&ecdh_signal, 0);
}

static void ecdh_thread(void *p1, void *p2, void *p3)
{
   1ad58:	b510      	push	{r4, lr}
   1ad5a:	b086      	sub	sp, #24
	struct k_poll_event events[1] = {
   1ad5c:	2210      	movs	r2, #16
   1ad5e:	2100      	movs	r1, #0
   1ad60:	a801      	add	r0, sp, #4
   1ad62:	f003 fd18 	bl	1e796 <memset>
   1ad66:	4c0b      	ldr	r4, [pc, #44]	; (1ad94 <ecdh_thread+0x3c>)
   1ad68:	9405      	str	r4, [sp, #20]
   1ad6a:	2301      	movs	r3, #1
   1ad6c:	f88d 3011 	strb.w	r3, [sp, #17]
	return z_impl_k_poll(events, num_events, timeout);
   1ad70:	f04f 32ff 	mov.w	r2, #4294967295
   1ad74:	f04f 33ff 	mov.w	r3, #4294967295
   1ad78:	2101      	movs	r1, #1
   1ad7a:	a801      	add	r0, sp, #4
   1ad7c:	f002 fa26 	bl	1d1cc <z_impl_k_poll>
	z_impl_k_poll_signal_reset(sig);
   1ad80:	4620      	mov	r0, r4
   1ad82:	f006 fa94 	bl	212ae <z_impl_k_poll_signal_reset>

	while (true) {
		k_poll(events, 1, K_FOREVER);

		k_poll_signal_reset(&ecdh_signal);
		events[0].state = K_POLL_STATE_NOT_READY;
   1ad86:	9b04      	ldr	r3, [sp, #16]
   1ad88:	f36f 3394 	bfc	r3, #14, #7
   1ad8c:	9304      	str	r3, [sp, #16]

		ecdh_cmd_process();
   1ad8e:	f7ff ff53 	bl	1ac38 <ecdh_cmd_process>
	while (true) {
   1ad92:	e7ed      	b.n	1ad70 <ecdh_thread+0x18>
   1ad94:	20002810 	.word	0x20002810

0001ad98 <hci_ecdh_init>:
	}
}
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */

void hci_ecdh_init(void)
{
   1ad98:	b510      	push	{r4, lr}
   1ad9a:	b088      	sub	sp, #32
	z_impl_k_poll_signal_init(sig);
   1ad9c:	480e      	ldr	r0, [pc, #56]	; (1add8 <hci_ecdh_init+0x40>)
   1ad9e:	f006 fa81 	bl	212a4 <z_impl_k_poll_signal_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1ada2:	4c0e      	ldr	r4, [pc, #56]	; (1addc <hci_ecdh_init+0x44>)
   1ada4:	490e      	ldr	r1, [pc, #56]	; (1ade0 <hci_ecdh_init+0x48>)
   1ada6:	2200      	movs	r2, #0
   1ada8:	2300      	movs	r3, #0
   1adaa:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1adae:	2300      	movs	r3, #0
   1adb0:	220a      	movs	r2, #10
   1adb2:	e9cd 2303 	strd	r2, r3, [sp, #12]
   1adb6:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1adba:	9300      	str	r3, [sp, #0]
   1adbc:	f44f 7262 	mov.w	r2, #904	; 0x388
   1adc0:	4b08      	ldr	r3, [pc, #32]	; (1ade4 <hci_ecdh_init+0x4c>)
   1adc2:	4620      	mov	r0, r4
   1adc4:	f001 f988 	bl	1c0d8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1adc8:	4907      	ldr	r1, [pc, #28]	; (1ade8 <hci_ecdh_init+0x50>)
   1adca:	4620      	mov	r0, r4
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecdh_thread_data, "BT CTLR ECDH");
#else
	k_work_init(&ecdh_work, ecdh_work_handler);
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}
   1adcc:	b008      	add	sp, #32
   1adce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1add2:	f005 bdf6 	b.w	209c2 <z_impl_k_thread_name_set>
   1add6:	bf00      	nop
   1add8:	20002810 	.word	0x20002810
   1addc:	200021f8 	.word	0x200021f8
   1ade0:	20004180 	.word	0x20004180
   1ade4:	0001ad59 	.word	0x0001ad59
   1ade8:	00023aa0 	.word	0x00023aa0

0001adec <hci_ecdh_uninit>:
	z_impl_k_thread_abort(thread);
   1adec:	4801      	ldr	r0, [pc, #4]	; (1adf4 <hci_ecdh_uninit+0x8>)
   1adee:	f7f8 b8e1 	b.w	12fb4 <z_impl_k_thread_abort>
   1adf2:	bf00      	nop
   1adf4:	200021f8 	.word	0x200021f8

0001adf8 <hci_cmd_le_read_local_p256_public_key>:
#endif /* !defined(CONFIG_BT_CTLR_ECDH_IN_MPSL_WORK) */
}


uint8_t hci_cmd_le_read_local_p256_public_key(void)
{
   1adf8:	b508      	push	{r3, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1adfa:	4b0b      	ldr	r3, [pc, #44]	; (1ae28 <hci_cmd_le_read_local_p256_public_key+0x30>)
   1adfc:	f3bf 8f5b 	dmb	ish
   1ae00:	2201      	movs	r2, #1
   1ae02:	e853 1f00 	ldrex	r1, [r3]
   1ae06:	2900      	cmp	r1, #0
   1ae08:	d103      	bne.n	1ae12 <hci_cmd_le_read_local_p256_public_key+0x1a>
   1ae0a:	e843 2000 	strex	r0, r2, [r3]
   1ae0e:	2800      	cmp	r0, #0
   1ae10:	d1f7      	bne.n	1ae02 <hci_cmd_le_read_local_p256_public_key+0xa>
   1ae12:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&cmd, 0, GEN_PUBLIC_KEY)) {
   1ae16:	d105      	bne.n	1ae24 <hci_cmd_le_read_local_p256_public_key+0x2c>
	return z_impl_k_poll_signal_raise(sig, result);
   1ae18:	4804      	ldr	r0, [pc, #16]	; (1ae2c <hci_cmd_le_read_local_p256_public_key+0x34>)
   1ae1a:	2100      	movs	r1, #0
   1ae1c:	f002 fa32 	bl	1d284 <z_impl_k_poll_signal_raise>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	work_submit();

	return 0;
   1ae20:	2000      	movs	r0, #0
}
   1ae22:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ae24:	200c      	movs	r0, #12
   1ae26:	e7fc      	b.n	1ae22 <hci_cmd_le_read_local_p256_public_key+0x2a>
   1ae28:	20002820 	.word	0x20002820
   1ae2c:	20002810 	.word	0x20002810

0001ae30 <cmd_le_generate_dhkey>:

uint8_t cmd_le_generate_dhkey(uint8_t *key, uint8_t key_type)
{
   1ae30:	b510      	push	{r4, lr}
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ae32:	2900      	cmp	r1, #0
   1ae34:	4b11      	ldr	r3, [pc, #68]	; (1ae7c <cmd_le_generate_dhkey+0x4c>)
   1ae36:	f3bf 8f5b 	dmb	ish
{
   1ae3a:	4604      	mov	r4, r0
	if (!atomic_cas(&cmd, 0, key_type ? GEN_DHKEY_DEBUG : GEN_DHKEY)) {
   1ae3c:	bf0c      	ite	eq
   1ae3e:	2202      	moveq	r2, #2
   1ae40:	2204      	movne	r2, #4
   1ae42:	e853 1f00 	ldrex	r1, [r3]
   1ae46:	2900      	cmp	r1, #0
   1ae48:	d103      	bne.n	1ae52 <cmd_le_generate_dhkey+0x22>
   1ae4a:	e843 2000 	strex	r0, r2, [r3]
   1ae4e:	2800      	cmp	r0, #0
   1ae50:	d1f7      	bne.n	1ae42 <cmd_le_generate_dhkey+0x12>
   1ae52:	f3bf 8f5b 	dmb	ish
   1ae56:	d10e      	bne.n	1ae76 <cmd_le_generate_dhkey+0x46>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	sys_memcpy_swap(&ecdh.public_key_be[0], &key[0], 32);
   1ae58:	4621      	mov	r1, r4
   1ae5a:	4809      	ldr	r0, [pc, #36]	; (1ae80 <cmd_le_generate_dhkey+0x50>)
   1ae5c:	f005 fb77 	bl	2054e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecdh.public_key_be[32], &key[32], 32);
   1ae60:	4808      	ldr	r0, [pc, #32]	; (1ae84 <cmd_le_generate_dhkey+0x54>)
   1ae62:	f104 0120 	add.w	r1, r4, #32
   1ae66:	f005 fb72 	bl	2054e <sys_memcpy_swap.constprop.0>
   1ae6a:	4807      	ldr	r0, [pc, #28]	; (1ae88 <cmd_le_generate_dhkey+0x58>)
   1ae6c:	2100      	movs	r1, #0
   1ae6e:	f002 fa09 	bl	1d284 <z_impl_k_poll_signal_raise>

	work_submit();

	return 0;
   1ae72:	2000      	movs	r0, #0
}
   1ae74:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ae76:	200c      	movs	r0, #12
   1ae78:	e7fc      	b.n	1ae74 <cmd_le_generate_dhkey+0x44>
   1ae7a:	bf00      	nop
   1ae7c:	20002820 	.word	0x20002820
   1ae80:	20002aea 	.word	0x20002aea
   1ae84:	20002b0a 	.word	0x20002b0a
   1ae88:	20002810 	.word	0x20002810

0001ae8c <mpsl_low_prio_irq_handler>:
static uint8_t __aligned(4) timeslot_context[TIMESLOT_MEM_SIZE];
#endif

static void mpsl_low_prio_irq_handler(const void *arg)
{
	k_work_submit_to_queue(&mpsl_work_q, &mpsl_low_prio_work);
   1ae8c:	4901      	ldr	r1, [pc, #4]	; (1ae94 <mpsl_low_prio_irq_handler+0x8>)
   1ae8e:	4802      	ldr	r0, [pc, #8]	; (1ae98 <mpsl_low_prio_irq_handler+0xc>)
   1ae90:	f005 bef6 	b.w	20c80 <k_work_submit_to_queue>
   1ae94:	20002824 	.word	0x20002824
   1ae98:	20002278 	.word	0x20002278

0001ae9c <mpsl_lib_init_sys>:

	return 0;
}

static int mpsl_lib_init_sys(const struct device *dev)
{
   1ae9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   1ae9e:	2332      	movs	r3, #50	; 0x32
   1aea0:	f8ad 3004 	strh.w	r3, [sp, #4]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1aea4:	4a10      	ldr	r2, [pc, #64]	; (1aee8 <mpsl_lib_init_sys+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   1aea6:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   1aea8:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1aeaa:	2119      	movs	r1, #25
   1aeac:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   1aeae:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   1aeb2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   1aeb6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   1aeba:	f7f1 fa71 	bl	c3a0 <mpsl_init>
	ARG_UNUSED(dev);
	int err = 0;

	err = mpsl_lib_init_internal();
	if (err) {
   1aebe:	4604      	mov	r4, r0
   1aec0:	b970      	cbnz	r0, 1aee0 <mpsl_lib_init_sys+0x44>
	ARM_IRQ_DIRECT_DYNAMIC_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
			IRQ_CONNECT_FLAGS, reschedule);

	mpsl_lib_irq_connect();
#else /* !IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */
	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1aec2:	4601      	mov	r1, r0
   1aec4:	462a      	mov	r2, r5
   1aec6:	2008      	movs	r0, #8
   1aec8:	f7f7 fc22 	bl	12710 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1aecc:	462a      	mov	r2, r5
   1aece:	4621      	mov	r1, r4
   1aed0:	200b      	movs	r0, #11
   1aed2:	f7f7 fc1d 	bl	12710 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_CONNECT_FLAGS);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   1aed6:	462a      	mov	r2, r5
   1aed8:	4621      	mov	r1, r4
   1aeda:	4628      	mov	r0, r5
   1aedc:	f7f7 fc18 	bl	12710 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_CONNECT_FLAGS);
#endif /* IS_ENABLED(CONFIG_MPSL_DYNAMIC_INTERRUPTS) */

	return 0;
}
   1aee0:	4620      	mov	r0, r4
   1aee2:	b003      	add	sp, #12
   1aee4:	bd30      	pop	{r4, r5, pc}
   1aee6:	bf00      	nop
   1aee8:	0001af11 	.word	0x0001af11

0001aeec <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1aeec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1aeee:	ab0b      	add	r3, sp, #44	; 0x2c
   1aef0:	9305      	str	r3, [sp, #20]
   1aef2:	9303      	str	r3, [sp, #12]
   1aef4:	4b05      	ldr	r3, [pc, #20]	; (1af0c <z_log_msg_runtime_create.constprop.0+0x20>)
   1aef6:	9302      	str	r3, [sp, #8]
   1aef8:	2300      	movs	r3, #0
   1aefa:	e9cd 3300 	strd	r3, r3, [sp]
   1aefe:	2201      	movs	r2, #1
   1af00:	4618      	mov	r0, r3
   1af02:	f7f6 ff67 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1af06:	b007      	add	sp, #28
   1af08:	f85d fb04 	ldr.w	pc, [sp], #4
   1af0c:	00023ad9 	.word	0x00023ad9

0001af10 <m_assert_handler>:
{
   1af10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_ERR("MPSL ASSERT: %s, %d", file, line);
   1af12:	4b0a      	ldr	r3, [pc, #40]	; (1af3c <m_assert_handler+0x2c>)
   1af14:	9302      	str	r3, [sp, #8]
   1af16:	2300      	movs	r3, #0
   1af18:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1af1c:	e9cd 3300 	strd	r3, r3, [sp]
   1af20:	4907      	ldr	r1, [pc, #28]	; (1af40 <m_assert_handler+0x30>)
   1af22:	2201      	movs	r2, #1
   1af24:	4618      	mov	r0, r3
   1af26:	f7ff ffe1 	bl	1aeec <z_log_msg_runtime_create.constprop.0>
	k_oops();
   1af2a:	4040      	eors	r0, r0
   1af2c:	f380 8811 	msr	BASEPRI, r0
   1af30:	f04f 0003 	mov.w	r0, #3
   1af34:	df02      	svc	2
}
   1af36:	b007      	add	sp, #28
   1af38:	f85d fb04 	ldr.w	pc, [sp], #4
   1af3c:	00023ad9 	.word	0x00023ad9
   1af40:	000216bc 	.word	0x000216bc

0001af44 <mpsl_low_prio_init>:

static int mpsl_low_prio_init(const struct device *dev)
{
   1af44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);

	k_work_queue_start(&mpsl_work_q, mpsl_work_stack,
   1af46:	4d0d      	ldr	r5, [pc, #52]	; (1af7c <mpsl_low_prio_init+0x38>)
   1af48:	490d      	ldr	r1, [pc, #52]	; (1af80 <mpsl_low_prio_init+0x3c>)
   1af4a:	2400      	movs	r4, #0
   1af4c:	9400      	str	r4, [sp, #0]
   1af4e:	f06f 0309 	mvn.w	r3, #9
   1af52:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1af56:	4628      	mov	r0, r5
   1af58:	f001 fbce 	bl	1c6f8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
   1af5c:	4909      	ldr	r1, [pc, #36]	; (1af84 <mpsl_low_prio_init+0x40>)
   1af5e:	4628      	mov	r0, r5
   1af60:	f005 fd2f 	bl	209c2 <z_impl_k_thread_name_set>
			   K_THREAD_STACK_SIZEOF(mpsl_work_stack),
			   K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO), NULL);
	k_thread_name_set(&mpsl_work_q.thread, "MPSL Work");
	k_work_init(&mpsl_low_prio_work, mpsl_low_prio_work_handler);
   1af64:	4908      	ldr	r1, [pc, #32]	; (1af88 <mpsl_low_prio_init+0x44>)
   1af66:	4809      	ldr	r0, [pc, #36]	; (1af8c <mpsl_low_prio_init+0x48>)
   1af68:	f005 fe5d 	bl	20c26 <k_work_init>

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   1af6c:	4622      	mov	r2, r4
   1af6e:	2104      	movs	r1, #4
   1af70:	2019      	movs	r0, #25
   1af72:	f7f7 fbcd 	bl	12710 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   1af76:	4620      	mov	r0, r4
   1af78:	b003      	add	sp, #12
   1af7a:	bd30      	pop	{r4, r5, pc}
   1af7c:	20002278 	.word	0x20002278
   1af80:	20004580 	.word	0x20004580
   1af84:	00023aed 	.word	0x00023aed
   1af88:	00020597 	.word	0x00020597
   1af8c:	20002824 	.word	0x20002824

0001af90 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1af90:	4b01      	ldr	r3, [pc, #4]	; (1af98 <mpsl_hfclk_callback+0x8>)
   1af92:	2000      	movs	r0, #0
   1af94:	681b      	ldr	r3, [r3, #0]
   1af96:	4718      	bx	r3
   1af98:	20002834 	.word	0x20002834

0001af9c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
	switch (domain) {
   1af9c:	b120      	cbz	r0, 1afa8 <nrfx_clock_start+0xc>
   1af9e:	2801      	cmp	r0, #1
   1afa0:	d106      	bne.n	1afb0 <nrfx_clock_start+0x14>
	case NRF_CLOCK_DOMAIN_HFCLK:
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   1afa2:	4804      	ldr	r0, [pc, #16]	; (1afb4 <nrfx_clock_start+0x18>)
   1afa4:	f7f1 b87c 	b.w	c0a0 <mpsl_clock_hfclk_request>
		break;
	case NRF_CLOCK_DOMAIN_LFCLK:
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1afa8:	4b03      	ldr	r3, [pc, #12]	; (1afb8 <nrfx_clock_start+0x1c>)
   1afaa:	2001      	movs	r0, #1
   1afac:	681b      	ldr	r3, [r3, #0]
   1afae:	4718      	bx	r3
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   1afb0:	4770      	bx	lr
   1afb2:	bf00      	nop
   1afb4:	0001af91 	.word	0x0001af91
   1afb8:	20002834 	.word	0x20002834

0001afbc <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   1afbc:	4b01      	ldr	r3, [pc, #4]	; (1afc4 <nrfx_clock_init+0x8>)
   1afbe:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   1afc0:	4801      	ldr	r0, [pc, #4]	; (1afc8 <nrfx_clock_init+0xc>)
   1afc2:	4770      	bx	lr
   1afc4:	20002834 	.word	0x20002834
   1afc8:	0bad0000 	.word	0x0bad0000

0001afcc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1afcc:	4a02      	ldr	r2, [pc, #8]	; (1afd8 <nvmc_wait+0xc>)
   1afce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1afd2:	2b00      	cmp	r3, #0
   1afd4:	d0fb      	beq.n	1afce <nvmc_wait+0x2>
}
   1afd6:	4770      	bx	lr
   1afd8:	4001e000 	.word	0x4001e000

0001afdc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1afdc:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1afde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1afe2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1afe6:	2a0d      	cmp	r2, #13
   1afe8:	d155      	bne.n	1b096 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   1afea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1afee:	2200      	movs	r2, #0
   1aff0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1aff4:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1aff8:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1affc:	4a48      	ldr	r2, [pc, #288]	; (1b120 <SystemInit+0x144>)
   1affe:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
   1b002:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1b006:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
   1b00a:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1b00e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
   1b012:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1b016:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
   1b01a:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1b01e:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
   1b022:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1b026:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
   1b02a:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1b02e:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
   1b032:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1b036:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
   1b03a:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1b03e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
   1b042:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1b046:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
   1b04a:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1b04e:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
   1b052:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1b056:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
   1b05a:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1b05e:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
   1b062:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1b066:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
   1b06a:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1b06e:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
   1b072:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1b076:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
   1b07a:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1b07e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
   1b082:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1b086:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   1b08a:	07db      	lsls	r3, r3, #31
   1b08c:	d509      	bpl.n	1b0a2 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1b08e:	f06f 0301 	mvn.w	r3, #1
   1b092:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1b096:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   1b09a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   1b09e:	2b0d      	cmp	r3, #13
   1b0a0:	d10c      	bne.n	1b0bc <SystemInit+0xe0>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1b0a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            {
                switch(var2)
   1b0a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   1b0aa:	b13b      	cbz	r3, 1b0bc <SystemInit+0xe0>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   1b0ac:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b0b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   1b0b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1b0b8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b0bc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1b0c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1b0c4:	2a00      	cmp	r2, #0
   1b0c6:	db03      	blt.n	1b0d0 <SystemInit+0xf4>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1b0c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1b0cc:	2b00      	cmp	r3, #0
   1b0ce:	da22      	bge.n	1b116 <SystemInit+0x13a>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b0d0:	4914      	ldr	r1, [pc, #80]	; (1b124 <SystemInit+0x148>)
   1b0d2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0d4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b0d8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0dc:	2412      	movs	r4, #18
    nvmc_wait();
   1b0de:	f7ff ff75 	bl	1afcc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1b0e2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1b0e6:	f7ff ff71 	bl	1afcc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1b0ea:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1b0ee:	f7ff ff6d 	bl	1afcc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1b0f2:	2300      	movs	r3, #0
   1b0f4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1b0f8:	f7ff ff68 	bl	1afcc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   1b0fc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1b100:	4909      	ldr	r1, [pc, #36]	; (1b128 <SystemInit+0x14c>)
   1b102:	4b0a      	ldr	r3, [pc, #40]	; (1b12c <SystemInit+0x150>)
   1b104:	68ca      	ldr	r2, [r1, #12]
   1b106:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1b10a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1b10c:	60cb      	str	r3, [r1, #12]
   1b10e:	f3bf 8f4f 	dsb	sy
    __NOP();
   1b112:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1b114:	e7fd      	b.n	1b112 <SystemInit+0x136>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1b116:	4b06      	ldr	r3, [pc, #24]	; (1b130 <SystemInit+0x154>)
   1b118:	4a06      	ldr	r2, [pc, #24]	; (1b134 <SystemInit+0x158>)
   1b11a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1b11c:	bd10      	pop	{r4, pc}
   1b11e:	bf00      	nop
   1b120:	4000c000 	.word	0x4000c000
   1b124:	4001e000 	.word	0x4001e000
   1b128:	e000ed00 	.word	0xe000ed00
   1b12c:	05fa0004 	.word	0x05fa0004
   1b130:	20000760 	.word	0x20000760
   1b134:	03d09000 	.word	0x03d09000

0001b138 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   1b138:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b13a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   1b13c:	6802      	ldr	r2, [r0, #0]
   1b13e:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
   1b142:	fab2 f382 	clz	r3, r2
   1b146:	f1c3 031f 	rsb	r3, r3, #31
   1b14a:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
   1b14c:	fa05 f403 	lsl.w	r4, r5, r3
   1b150:	ea22 0404 	bic.w	r4, r2, r4
   1b154:	e850 6f00 	ldrex	r6, [r0]
   1b158:	4296      	cmp	r6, r2
   1b15a:	d104      	bne.n	1b166 <nrfx_flag32_alloc+0x2e>
   1b15c:	e840 4c00 	strex	ip, r4, [r0]
   1b160:	f1bc 0f00 	cmp.w	ip, #0
   1b164:	d1f6      	bne.n	1b154 <nrfx_flag32_alloc+0x1c>
   1b166:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b16a:	d1e7      	bne.n	1b13c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
   1b16c:	4801      	ldr	r0, [pc, #4]	; (1b174 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
   1b16e:	700b      	strb	r3, [r1, #0]
}
   1b170:	bd70      	pop	{r4, r5, r6, pc}
   1b172:	bf00      	nop
   1b174:	0bad0000 	.word	0x0bad0000

0001b178 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
   1b178:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   1b17a:	6803      	ldr	r3, [r0, #0]
   1b17c:	40cb      	lsrs	r3, r1
   1b17e:	07db      	lsls	r3, r3, #31
   1b180:	d414      	bmi.n	1b1ac <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   1b182:	2301      	movs	r3, #1
   1b184:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
   1b186:	6802      	ldr	r2, [r0, #0]
   1b188:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   1b18c:	ea43 0102 	orr.w	r1, r3, r2
   1b190:	e850 4f00 	ldrex	r4, [r0]
   1b194:	4294      	cmp	r4, r2
   1b196:	d104      	bne.n	1b1a2 <nrfx_flag32_free+0x2a>
   1b198:	e840 1c00 	strex	ip, r1, [r0]
   1b19c:	f1bc 0f00 	cmp.w	ip, #0
   1b1a0:	d1f6      	bne.n	1b190 <nrfx_flag32_free+0x18>
   1b1a2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   1b1a6:	d1ee      	bne.n	1b186 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
   1b1a8:	4801      	ldr	r0, [pc, #4]	; (1b1b0 <nrfx_flag32_free+0x38>)
}
   1b1aa:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b1ac:	4801      	ldr	r0, [pc, #4]	; (1b1b4 <nrfx_flag32_free+0x3c>)
   1b1ae:	e7fc      	b.n	1b1aa <nrfx_flag32_free+0x32>
   1b1b0:	0bad0000 	.word	0x0bad0000
   1b1b4:	0bad0004 	.word	0x0bad0004

0001b1b8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1b1b8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1b1ba:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b1be:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1b1c0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1b1c2:	6002      	str	r2, [r0, #0]
}
   1b1c4:	4802      	ldr	r0, [pc, #8]	; (1b1d0 <nrf_gpio_pin_port_decode+0x18>)
   1b1c6:	bf18      	it	ne
   1b1c8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1b1cc:	4770      	bx	lr
   1b1ce:	bf00      	nop
   1b1d0:	50000300 	.word	0x50000300

0001b1d4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   1b1d4:	4b03      	ldr	r3, [pc, #12]	; (1b1e4 <pin_in_use_by_te+0x10>)
   1b1d6:	3008      	adds	r0, #8
   1b1d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   1b1dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1b1e0:	4770      	bx	lr
   1b1e2:	bf00      	nop
   1b1e4:	20000764 	.word	0x20000764

0001b1e8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   1b1e8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b1ea:	f100 0308 	add.w	r3, r0, #8
   1b1ee:	4c0c      	ldr	r4, [pc, #48]	; (1b220 <call_handler+0x38>)
   1b1f0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   1b1f4:	05da      	lsls	r2, r3, #23
{
   1b1f6:	4605      	mov	r5, r0
   1b1f8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b1fa:	d507      	bpl.n	1b20c <call_handler+0x24>
   1b1fc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   1b200:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1b204:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   1b208:	6852      	ldr	r2, [r2, #4]
   1b20a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   1b20c:	68a3      	ldr	r3, [r4, #8]
   1b20e:	b12b      	cbz	r3, 1b21c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b210:	68e2      	ldr	r2, [r4, #12]
   1b212:	4631      	mov	r1, r6
   1b214:	4628      	mov	r0, r5
    }
}
   1b216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   1b21a:	4718      	bx	r3
}
   1b21c:	bd70      	pop	{r4, r5, r6, pc}
   1b21e:	bf00      	nop
   1b220:	20000764 	.word	0x20000764

0001b224 <release_handler>:
{
   1b224:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   1b226:	4a12      	ldr	r2, [pc, #72]	; (1b270 <release_handler+0x4c>)
   1b228:	3008      	adds	r0, #8
   1b22a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   1b22e:	05d9      	lsls	r1, r3, #23
   1b230:	d51b      	bpl.n	1b26a <release_handler+0x46>
   1b232:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   1b236:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b23a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b23e:	f102 040e 	add.w	r4, r2, #14
   1b242:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   1b244:	f834 3f02 	ldrh.w	r3, [r4, #2]!
   1b248:	f413 7f80 	tst.w	r3, #256	; 0x100
   1b24c:	d003      	beq.n	1b256 <release_handler+0x32>
   1b24e:	f3c3 2343 	ubfx	r3, r3, #9, #4
   1b252:	4299      	cmp	r1, r3
   1b254:	d009      	beq.n	1b26a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   1b256:	3001      	adds	r0, #1
   1b258:	282a      	cmp	r0, #42	; 0x2a
   1b25a:	d1f3      	bne.n	1b244 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   1b25c:	2300      	movs	r3, #0
   1b25e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1b262:	4804      	ldr	r0, [pc, #16]	; (1b274 <release_handler+0x50>)
}
   1b264:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   1b266:	f7ff bf87 	b.w	1b178 <nrfx_flag32_free>
}
   1b26a:	bc10      	pop	{r4}
   1b26c:	4770      	bx	lr
   1b26e:	bf00      	nop
   1b270:	20000764 	.word	0x20000764
   1b274:	200007cc 	.word	0x200007cc

0001b278 <pin_handler_trigger_uninit>:
{
   1b278:	b538      	push	{r3, r4, r5, lr}
   1b27a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1b27c:	f7ff ffaa 	bl	1b1d4 <pin_in_use_by_te>
   1b280:	4c09      	ldr	r4, [pc, #36]	; (1b2a8 <pin_handler_trigger_uninit+0x30>)
   1b282:	f102 0508 	add.w	r5, r2, #8
   1b286:	b140      	cbz	r0, 1b29a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b288:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   1b28c:	4907      	ldr	r1, [pc, #28]	; (1b2ac <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   1b28e:	0b5b      	lsrs	r3, r3, #13
   1b290:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   1b294:	2000      	movs	r0, #0
   1b296:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   1b29a:	4610      	mov	r0, r2
   1b29c:	f7ff ffc2 	bl	1b224 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   1b2a0:	2300      	movs	r3, #0
   1b2a2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   1b2a6:	bd38      	pop	{r3, r4, r5, pc}
   1b2a8:	20000764 	.word	0x20000764
   1b2ac:	40006000 	.word	0x40006000

0001b2b0 <nrfx_gpiote_input_configure>:
{
   1b2b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1b2b4:	4604      	mov	r4, r0
   1b2b6:	4616      	mov	r6, r2
   1b2b8:	461d      	mov	r5, r3
    if (p_input_config)
   1b2ba:	b301      	cbz	r1, 1b2fe <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b2bc:	4f4e      	ldr	r7, [pc, #312]	; (1b3f8 <nrfx_gpiote_input_configure+0x148>)
   1b2be:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   1b2c2:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1b2c6:	079b      	lsls	r3, r3, #30
   1b2c8:	d502      	bpl.n	1b2d0 <nrfx_gpiote_input_configure+0x20>
   1b2ca:	f7ff ff83 	bl	1b1d4 <pin_in_use_by_te>
   1b2ce:	bb10      	cbnz	r0, 1b316 <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1b2d0:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b2d2:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   1b2d6:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   1b2da:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   1b2de:	f10d 020f 	add.w	r2, sp, #15
   1b2e2:	460b      	mov	r3, r1
   1b2e4:	4620      	mov	r0, r4
   1b2e6:	f10d 010e 	add.w	r1, sp, #14
   1b2ea:	f005 f98b 	bl	20604 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   1b2ee:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
   1b2f2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   1b2f6:	f043 0301 	orr.w	r3, r3, #1
   1b2fa:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
   1b2fe:	b346      	cbz	r6, 1b352 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b300:	4b3d      	ldr	r3, [pc, #244]	; (1b3f8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   1b302:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   1b306:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b308:	f104 0708 	add.w	r7, r4, #8
   1b30c:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
   1b310:	0788      	lsls	r0, r1, #30
   1b312:	d502      	bpl.n	1b31a <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
   1b314:	b1aa      	cbz	r2, 1b342 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
   1b316:	4839      	ldr	r0, [pc, #228]	; (1b3fc <nrfx_gpiote_input_configure+0x14c>)
   1b318:	e01d      	b.n	1b356 <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   1b31a:	f021 0120 	bic.w	r1, r1, #32
   1b31e:	04c9      	lsls	r1, r1, #19
   1b320:	0cc9      	lsrs	r1, r1, #19
   1b322:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
   1b326:	b162      	cbz	r2, 1b342 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
   1b328:	f1bc 0f03 	cmp.w	ip, #3
   1b32c:	d8f3      	bhi.n	1b316 <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
   1b32e:	6872      	ldr	r2, [r6, #4]
   1b330:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   1b332:	f1bc 0f00 	cmp.w	ip, #0
   1b336:	d111      	bne.n	1b35c <nrfx_gpiote_input_configure+0xac>
   1b338:	4a31      	ldr	r2, [pc, #196]	; (1b400 <nrfx_gpiote_input_configure+0x150>)
   1b33a:	f506 76a2 	add.w	r6, r6, #324	; 0x144
   1b33e:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   1b342:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
   1b346:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   1b34a:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
   1b34e:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
   1b352:	bb45      	cbnz	r5, 1b3a6 <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
   1b354:	482b      	ldr	r0, [pc, #172]	; (1b404 <nrfx_gpiote_input_configure+0x154>)
}
   1b356:	b004      	add	sp, #16
   1b358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b35c:	00b2      	lsls	r2, r6, #2
   1b35e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b362:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b366:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
   1b36a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b36e:	f020 0003 	bic.w	r0, r0, #3
   1b372:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1b376:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b37a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   1b37e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   1b382:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b386:	0220      	lsls	r0, r4, #8
   1b388:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   1b38c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
   1b390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b394:	ea40 000e 	orr.w	r0, r0, lr
   1b398:	f041 0120 	orr.w	r1, r1, #32
   1b39c:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
   1b3a0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
   1b3a4:	e7cd      	b.n	1b342 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   1b3a6:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   1b3aa:	4620      	mov	r0, r4
   1b3ac:	f7ff ff3a 	bl	1b224 <release_handler>
    if (!handler)
   1b3b0:	2e00      	cmp	r6, #0
   1b3b2:	d0cf      	beq.n	1b354 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b3b4:	4d10      	ldr	r5, [pc, #64]	; (1b3f8 <nrfx_gpiote_input_configure+0x148>)
   1b3b6:	e9d5 2300 	ldrd	r2, r3, [r5]
   1b3ba:	4296      	cmp	r6, r2
   1b3bc:	d101      	bne.n	1b3c2 <nrfx_gpiote_input_configure+0x112>
   1b3be:	429f      	cmp	r7, r3
   1b3c0:	d018      	beq.n	1b3f4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   1b3c2:	4811      	ldr	r0, [pc, #68]	; (1b408 <nrfx_gpiote_input_configure+0x158>)
   1b3c4:	f10d 010f 	add.w	r1, sp, #15
   1b3c8:	f7ff feb6 	bl	1b138 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   1b3cc:	4b0d      	ldr	r3, [pc, #52]	; (1b404 <nrfx_gpiote_input_configure+0x154>)
   1b3ce:	4298      	cmp	r0, r3
   1b3d0:	d1c1      	bne.n	1b356 <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
   1b3d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   1b3d6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   1b3da:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b3de:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   1b3e0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   1b3e2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   1b3e6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   1b3ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b3ee:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
   1b3f2:	e7af      	b.n	1b354 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   1b3f4:	2200      	movs	r2, #0
   1b3f6:	e7ee      	b.n	1b3d6 <nrfx_gpiote_input_configure+0x126>
   1b3f8:	20000764 	.word	0x20000764
   1b3fc:	0bad0004 	.word	0x0bad0004
   1b400:	40006000 	.word	0x40006000
   1b404:	0bad0000 	.word	0x0bad0000
   1b408:	200007cc 	.word	0x200007cc

0001b40c <nrfx_gpiote_output_configure>:
{
   1b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b40e:	4604      	mov	r4, r0
   1b410:	b085      	sub	sp, #20
   1b412:	4615      	mov	r5, r2
    if (p_config)
   1b414:	b319      	cbz	r1, 1b45e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b416:	4e33      	ldr	r6, [pc, #204]	; (1b4e4 <nrfx_gpiote_output_configure+0xd8>)
   1b418:	f100 0708 	add.w	r7, r0, #8
   1b41c:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   1b420:	0793      	lsls	r3, r2, #30
   1b422:	d403      	bmi.n	1b42c <nrfx_gpiote_output_configure+0x20>
   1b424:	f7ff fed6 	bl	1b1d4 <pin_in_use_by_te>
   1b428:	2800      	cmp	r0, #0
   1b42a:	d158      	bne.n	1b4de <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   1b42c:	f012 0f1c 	tst.w	r2, #28
   1b430:	d002      	beq.n	1b438 <nrfx_gpiote_output_configure+0x2c>
   1b432:	784b      	ldrb	r3, [r1, #1]
   1b434:	2b01      	cmp	r3, #1
   1b436:	d052      	beq.n	1b4de <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   1b438:	2301      	movs	r3, #1
   1b43a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   1b43e:	2300      	movs	r3, #0
   1b440:	e9cd 1300 	strd	r1, r3, [sp]
   1b444:	1c4a      	adds	r2, r1, #1
   1b446:	1c8b      	adds	r3, r1, #2
   1b448:	4620      	mov	r0, r4
   1b44a:	f10d 010f 	add.w	r1, sp, #15
   1b44e:	f005 f8d9 	bl	20604 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   1b452:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   1b456:	f043 0303 	orr.w	r3, r3, #3
   1b45a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   1b45e:	b915      	cbnz	r5, 1b466 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   1b460:	4821      	ldr	r0, [pc, #132]	; (1b4e8 <nrfx_gpiote_output_configure+0xdc>)
}
   1b462:	b005      	add	sp, #20
   1b464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b466:	4e1f      	ldr	r6, [pc, #124]	; (1b4e4 <nrfx_gpiote_output_configure+0xd8>)
   1b468:	f104 0708 	add.w	r7, r4, #8
   1b46c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   1b470:	0783      	lsls	r3, r0, #30
   1b472:	d534      	bpl.n	1b4de <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   1b474:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   1b478:	4661      	mov	r1, ip
   1b47a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   1b47c:	f020 0020 	bic.w	r0, r0, #32
   1b480:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1b484:	04c0      	lsls	r0, r0, #19
   1b486:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   1b48a:	0cc0      	lsrs	r0, r0, #19
   1b48c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1b490:	2300      	movs	r3, #0
   1b492:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   1b496:	786a      	ldrb	r2, [r5, #1]
   1b498:	2a00      	cmp	r2, #0
   1b49a:	d0e1      	beq.n	1b460 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   1b49c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
   1b4a0:	78ad      	ldrb	r5, [r5, #2]
   1b4a2:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   1b4a6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   1b4aa:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b4ae:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   1b4b2:	0223      	lsls	r3, r4, #8
   1b4b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   1b4b8:	0412      	lsls	r2, r2, #16
   1b4ba:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b4be:	ea43 030e 	orr.w	r3, r3, lr
   1b4c2:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   1b4c4:	052a      	lsls	r2, r5, #20
   1b4c6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   1b4ca:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1b4ce:	4313      	orrs	r3, r2
   1b4d0:	f040 0020 	orr.w	r0, r0, #32
   1b4d4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   1b4d8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   1b4dc:	e7c0      	b.n	1b460 <nrfx_gpiote_output_configure+0x54>
{
   1b4de:	4803      	ldr	r0, [pc, #12]	; (1b4ec <nrfx_gpiote_output_configure+0xe0>)
   1b4e0:	e7bf      	b.n	1b462 <nrfx_gpiote_output_configure+0x56>
   1b4e2:	bf00      	nop
   1b4e4:	20000764 	.word	0x20000764
   1b4e8:	0bad0000 	.word	0x0bad0000
   1b4ec:	0bad0004 	.word	0x0bad0004

0001b4f0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   1b4f0:	4b01      	ldr	r3, [pc, #4]	; (1b4f8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   1b4f2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   1b4f6:	4770      	bx	lr
   1b4f8:	20000764 	.word	0x20000764

0001b4fc <nrfx_gpiote_channel_get>:
{
   1b4fc:	b508      	push	{r3, lr}
   1b4fe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   1b500:	f7ff fe68 	bl	1b1d4 <pin_in_use_by_te>
   1b504:	b138      	cbz	r0, 1b516 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b506:	4b05      	ldr	r3, [pc, #20]	; (1b51c <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   1b508:	4805      	ldr	r0, [pc, #20]	; (1b520 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b50a:	3208      	adds	r2, #8
   1b50c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   1b510:	0b5b      	lsrs	r3, r3, #13
   1b512:	700b      	strb	r3, [r1, #0]
}
   1b514:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b516:	4803      	ldr	r0, [pc, #12]	; (1b524 <nrfx_gpiote_channel_get+0x28>)
   1b518:	e7fc      	b.n	1b514 <nrfx_gpiote_channel_get+0x18>
   1b51a:	bf00      	nop
   1b51c:	20000764 	.word	0x20000764
   1b520:	0bad0000 	.word	0x0bad0000
   1b524:	0bad0004 	.word	0x0bad0004

0001b528 <nrfx_gpiote_init>:
{
   1b528:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   1b52a:	4c0f      	ldr	r4, [pc, #60]	; (1b568 <nrfx_gpiote_init+0x40>)
   1b52c:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   1b530:	b9bd      	cbnz	r5, 1b562 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   1b532:	2254      	movs	r2, #84	; 0x54
   1b534:	4629      	mov	r1, r5
   1b536:	f104 0010 	add.w	r0, r4, #16
   1b53a:	f003 f92c 	bl	1e796 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   1b53e:	2006      	movs	r0, #6
   1b540:	f7f7 f8b6 	bl	126b0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b544:	4b09      	ldr	r3, [pc, #36]	; (1b56c <nrfx_gpiote_init+0x44>)
    return err_code;
   1b546:	480a      	ldr	r0, [pc, #40]	; (1b570 <nrfx_gpiote_init+0x48>)
   1b548:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   1b54c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   1b550:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b554:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   1b558:	2301      	movs	r3, #1
   1b55a:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   1b55e:	66a3      	str	r3, [r4, #104]	; 0x68
}
   1b560:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   1b562:	4804      	ldr	r0, [pc, #16]	; (1b574 <nrfx_gpiote_init+0x4c>)
   1b564:	e7fc      	b.n	1b560 <nrfx_gpiote_init+0x38>
   1b566:	bf00      	nop
   1b568:	20000764 	.word	0x20000764
   1b56c:	40006000 	.word	0x40006000
   1b570:	0bad0000 	.word	0x0bad0000
   1b574:	0bad0005 	.word	0x0bad0005

0001b578 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   1b578:	4b03      	ldr	r3, [pc, #12]	; (1b588 <nrfx_gpiote_is_init+0x10>)
   1b57a:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   1b57e:	3800      	subs	r0, #0
   1b580:	bf18      	it	ne
   1b582:	2001      	movne	r0, #1
   1b584:	4770      	bx	lr
   1b586:	bf00      	nop
   1b588:	20000764 	.word	0x20000764

0001b58c <nrfx_gpiote_channel_free>:
{
   1b58c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   1b58e:	4801      	ldr	r0, [pc, #4]	; (1b594 <nrfx_gpiote_channel_free+0x8>)
   1b590:	f7ff bdf2 	b.w	1b178 <nrfx_flag32_free>
   1b594:	200007c8 	.word	0x200007c8

0001b598 <nrfx_gpiote_channel_alloc>:
{
   1b598:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   1b59a:	4801      	ldr	r0, [pc, #4]	; (1b5a0 <nrfx_gpiote_channel_alloc+0x8>)
   1b59c:	f7ff bdcc 	b.w	1b138 <nrfx_flag32_alloc>
   1b5a0:	200007c8 	.word	0x200007c8

0001b5a4 <nrfx_gpiote_trigger_enable>:
{
   1b5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1b5a6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b5a8:	f7ff fe14 	bl	1b1d4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b5ac:	f104 0208 	add.w	r2, r4, #8
   1b5b0:	4b1e      	ldr	r3, [pc, #120]	; (1b62c <nrfx_gpiote_trigger_enable+0x88>)
   1b5b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b5b6:	b1e8      	cbz	r0, 1b5f4 <nrfx_gpiote_trigger_enable+0x50>
   1b5b8:	f013 0502 	ands.w	r5, r3, #2
   1b5bc:	d11a      	bne.n	1b5f4 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b5be:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   1b5c0:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   1b5c2:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   1b5c6:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   1b5ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1b5ce:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b5d2:	6005      	str	r5, [r0, #0]
   1b5d4:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1b5d6:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   1b5da:	f040 0001 	orr.w	r0, r0, #1
   1b5de:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   1b5e2:	b129      	cbz	r1, 1b5f0 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   1b5e4:	2201      	movs	r2, #1
   1b5e6:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   1b5ea:	4a11      	ldr	r2, [pc, #68]	; (1b630 <nrfx_gpiote_trigger_enable+0x8c>)
   1b5ec:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1b5f0:	b003      	add	sp, #12
   1b5f2:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b5f4:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   1b5f8:	2b04      	cmp	r3, #4
   1b5fa:	d012      	beq.n	1b622 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   1b5fc:	2b05      	cmp	r3, #5
   1b5fe:	d012      	beq.n	1b626 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b600:	a801      	add	r0, sp, #4
   1b602:	9401      	str	r4, [sp, #4]
   1b604:	f7ff fdd8 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b608:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   1b60a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   1b60e:	40d9      	lsrs	r1, r3
   1b610:	f001 0101 	and.w	r1, r1, #1
   1b614:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b616:	4620      	mov	r0, r4
}
   1b618:	b003      	add	sp, #12
   1b61a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   1b61e:	f005 b83a 	b.w	20696 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   1b622:	2103      	movs	r1, #3
   1b624:	e7f7      	b.n	1b616 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   1b626:	2102      	movs	r1, #2
   1b628:	e7f5      	b.n	1b616 <nrfx_gpiote_trigger_enable+0x72>
   1b62a:	bf00      	nop
   1b62c:	20000764 	.word	0x20000764
   1b630:	40006000 	.word	0x40006000

0001b634 <nrfx_gpiote_trigger_disable>:
{
   1b634:	b508      	push	{r3, lr}
   1b636:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b638:	f7ff fdcc 	bl	1b1d4 <pin_in_use_by_te>
   1b63c:	b1c0      	cbz	r0, 1b670 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   1b63e:	f102 0108 	add.w	r1, r2, #8
   1b642:	4b0e      	ldr	r3, [pc, #56]	; (1b67c <nrfx_gpiote_trigger_disable+0x48>)
   1b644:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   1b648:	0799      	lsls	r1, r3, #30
   1b64a:	d411      	bmi.n	1b670 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   1b64c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   1b64e:	2201      	movs	r2, #1
   1b650:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   1b652:	009b      	lsls	r3, r3, #2
   1b654:	490a      	ldr	r1, [pc, #40]	; (1b680 <nrfx_gpiote_trigger_disable+0x4c>)
   1b656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b65a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b65e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   1b662:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1b666:	f022 0203 	bic.w	r2, r2, #3
   1b66a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   1b66e:	bd08      	pop	{r3, pc}
   1b670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1b674:	2100      	movs	r1, #0
   1b676:	4610      	mov	r0, r2
   1b678:	f005 b80d 	b.w	20696 <nrf_gpio_cfg_sense_set>
   1b67c:	20000764 	.word	0x20000764
   1b680:	40006000 	.word	0x40006000

0001b684 <nrfx_gpiote_pin_uninit>:
{
   1b684:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b686:	4b0e      	ldr	r3, [pc, #56]	; (1b6c0 <nrfx_gpiote_pin_uninit+0x3c>)
   1b688:	f100 0208 	add.w	r2, r0, #8
{
   1b68c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   1b68e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   1b692:	07db      	lsls	r3, r3, #31
   1b694:	d511      	bpl.n	1b6ba <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   1b696:	f7ff ffcd 	bl	1b634 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   1b69a:	4620      	mov	r0, r4
   1b69c:	f7ff fdec 	bl	1b278 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b6a0:	a801      	add	r0, sp, #4
   1b6a2:	9401      	str	r4, [sp, #4]
   1b6a4:	f7ff fd88 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b6a8:	9b01      	ldr	r3, [sp, #4]
   1b6aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b6ae:	2202      	movs	r2, #2
   1b6b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   1b6b4:	4803      	ldr	r0, [pc, #12]	; (1b6c4 <nrfx_gpiote_pin_uninit+0x40>)
}
   1b6b6:	b002      	add	sp, #8
   1b6b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   1b6ba:	4803      	ldr	r0, [pc, #12]	; (1b6c8 <nrfx_gpiote_pin_uninit+0x44>)
   1b6bc:	e7fb      	b.n	1b6b6 <nrfx_gpiote_pin_uninit+0x32>
   1b6be:	bf00      	nop
   1b6c0:	20000764 	.word	0x20000764
   1b6c4:	0bad0000 	.word	0x0bad0000
   1b6c8:	0bad0004 	.word	0x0bad0004

0001b6cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   1b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6d0:	4b68      	ldr	r3, [pc, #416]	; (1b874 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
   1b6d2:	4869      	ldr	r0, [pc, #420]	; (1b878 <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b6d4:	4969      	ldr	r1, [pc, #420]	; (1b87c <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
   1b6d6:	2600      	movs	r6, #0
{
   1b6d8:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   1b6da:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b6dc:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b6de:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   1b6e0:	b135      	cbz	r5, 1b6f0 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   1b6e2:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   1b6e6:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b6e8:	bf1e      	ittt	ne
   1b6ea:	601c      	strne	r4, [r3, #0]
   1b6ec:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   1b6ee:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b6f0:	3304      	adds	r3, #4
   1b6f2:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   1b6f4:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   1b6f8:	d1f1      	bne.n	1b6de <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1b6fa:	f8df 917c 	ldr.w	r9, [pc, #380]	; 1b878 <nrfx_gpiote_irq_handler+0x1ac>
   1b6fe:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   1b702:	2b00      	cmp	r3, #0
   1b704:	f000 8099 	beq.w	1b83a <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
   1b708:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b70c:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   1b710:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1b712:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1b716:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   1b71a:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   1b71c:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1b720:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
   1b724:	f10d 0a10 	add.w	sl, sp, #16
   1b728:	ea4f 1348 	mov.w	r3, r8, lsl #5
   1b72c:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   1b72e:	f04f 0b01 	mov.w	fp, #1
   1b732:	e049      	b.n	1b7c8 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
   1b734:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b736:	4a52      	ldr	r2, [pc, #328]	; (1b880 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   1b738:	fa94 f4a4 	rbit	r4, r4
   1b73c:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   1b740:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   1b742:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b744:	f104 0308 	add.w	r3, r4, #8
   1b748:	9403      	str	r4, [sp, #12]
   1b74a:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
   1b74e:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
   1b752:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   1b756:	fa0b f202 	lsl.w	r2, fp, r2
   1b75a:	ea23 0302 	bic.w	r3, r3, r2
   1b75e:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b762:	a803      	add	r0, sp, #12
   1b764:	f7ff fd28 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b768:	9b03      	ldr	r3, [sp, #12]
   1b76a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b76e:	08b9      	lsrs	r1, r7, #2
   1b770:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   1b774:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
   1b778:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   1b77a:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   1b77c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
   1b780:	d52c      	bpl.n	1b7dc <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
   1b782:	4620      	mov	r0, r4
   1b784:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b786:	b2dd      	uxtb	r5, r3
   1b788:	f7ff fd2e 	bl	1b1e8 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b78c:	a803      	add	r0, sp, #12
   1b78e:	9403      	str	r4, [sp, #12]
   1b790:	f7ff fd12 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   1b794:	9b03      	ldr	r3, [sp, #12]
   1b796:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b79a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   1b79e:	f3c3 4301 	ubfx	r3, r3, #16, #2
   1b7a2:	429d      	cmp	r5, r3
   1b7a4:	d107      	bne.n	1b7b6 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   1b7a6:	2100      	movs	r1, #0
   1b7a8:	4620      	mov	r0, r4
   1b7aa:	f004 ff74 	bl	20696 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   1b7ae:	4629      	mov	r1, r5
   1b7b0:	4620      	mov	r0, r4
   1b7b2:	f004 ff70 	bl	20696 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b7b6:	a803      	add	r0, sp, #12
   1b7b8:	9403      	str	r4, [sp, #12]
   1b7ba:	f7ff fcfd 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   1b7be:	9b03      	ldr	r3, [sp, #12]
   1b7c0:	fa0b f303 	lsl.w	r3, fp, r3
   1b7c4:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   1b7c8:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
   1b7cc:	2c00      	cmp	r4, #0
   1b7ce:	d1b1      	bne.n	1b734 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   1b7d0:	f1b8 0f00 	cmp.w	r8, #0
   1b7d4:	d11d      	bne.n	1b812 <nrfx_gpiote_irq_handler+0x146>
   1b7d6:	f04f 0801 	mov.w	r8, #1
   1b7da:	e7a5      	b.n	1b728 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   1b7dc:	2b02      	cmp	r3, #2
   1b7de:	d10c      	bne.n	1b7fa <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1b7e0:	2103      	movs	r1, #3
   1b7e2:	4620      	mov	r0, r4
   1b7e4:	f004 ff57 	bl	20696 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1b7e8:	f005 0305 	and.w	r3, r5, #5
   1b7ec:	2b01      	cmp	r3, #1
   1b7ee:	d1e2      	bne.n	1b7b6 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
   1b7f0:	4639      	mov	r1, r7
   1b7f2:	4620      	mov	r0, r4
   1b7f4:	f7ff fcf8 	bl	1b1e8 <call_handler>
   1b7f8:	e7dd      	b.n	1b7b6 <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
   1b7fa:	2102      	movs	r1, #2
   1b7fc:	4620      	mov	r0, r4
   1b7fe:	9301      	str	r3, [sp, #4]
   1b800:	f004 ff49 	bl	20696 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   1b804:	2d03      	cmp	r5, #3
   1b806:	d0f3      	beq.n	1b7f0 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   1b808:	9b01      	ldr	r3, [sp, #4]
   1b80a:	2b03      	cmp	r3, #3
   1b80c:	d1d3      	bne.n	1b7b6 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   1b80e:	2d02      	cmp	r5, #2
   1b810:	e7ed      	b.n	1b7ee <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
   1b812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1b816:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
   1b81a:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
   1b81e:	4919      	ldr	r1, [pc, #100]	; (1b884 <nrfx_gpiote_irq_handler+0x1b8>)
   1b820:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
   1b824:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   1b826:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   1b82a:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
   1b82e:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
   1b830:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
   1b832:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
   1b836:	f47f af73 	bne.w	1b720 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   1b83a:	2401      	movs	r4, #1
    while (mask)
   1b83c:	b916      	cbnz	r6, 1b844 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   1b83e:	b007      	add	sp, #28
   1b840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   1b844:	fa96 f3a6 	rbit	r3, r6
   1b848:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   1b84c:	fa04 f203 	lsl.w	r2, r4, r3
   1b850:	009b      	lsls	r3, r3, #2
   1b852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1b856:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1b85a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1b85e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   1b862:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   1b866:	f3c0 2005 	ubfx	r0, r0, #8, #6
   1b86a:	f3c1 4101 	ubfx	r1, r1, #16, #2
   1b86e:	f7ff fcbb 	bl	1b1e8 <call_handler>
   1b872:	e7e3      	b.n	1b83c <nrfx_gpiote_irq_handler+0x170>
   1b874:	40006100 	.word	0x40006100
   1b878:	40006000 	.word	0x40006000
   1b87c:	40006120 	.word	0x40006120
   1b880:	20000764 	.word	0x20000764
   1b884:	50000300 	.word	0x50000300

0001b888 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1b888:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1b88a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1b88e:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
   1b890:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1b892:	6002      	str	r2, [r0, #0]
}
   1b894:	4802      	ldr	r0, [pc, #8]	; (1b8a0 <nrf_gpio_pin_port_decode+0x18>)
   1b896:	bf18      	it	ne
   1b898:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1b89c:	4770      	bx	lr
   1b89e:	bf00      	nop
   1b8a0:	50000300 	.word	0x50000300

0001b8a4 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1b8a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1b8a8:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1b8aa:	4c52      	ldr	r4, [pc, #328]	; (1b9f4 <nrfx_spi_init+0x150>)
   1b8ac:	f04f 0c28 	mov.w	ip, #40	; 0x28
   1b8b0:	fb0c fc07 	mul.w	ip, ip, r7
{
   1b8b4:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1b8b6:	eb04 000c 	add.w	r0, r4, ip
   1b8ba:	7f05      	ldrb	r5, [r0, #28]
   1b8bc:	2d00      	cmp	r5, #0
   1b8be:	f040 8096 	bne.w	1b9ee <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1b8c2:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1b8c4:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
   1b8c8:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   1b8ca:	7bcb      	ldrb	r3, [r1, #15]
   1b8cc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
   1b8d0:	78cb      	ldrb	r3, [r1, #3]
   1b8d2:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
   1b8d4:	794b      	ldrb	r3, [r1, #5]
   1b8d6:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
   1b8d8:	7bcb      	ldrb	r3, [r1, #15]
   1b8da:	2b00      	cmp	r3, #0
   1b8dc:	d140      	bne.n	1b960 <nrfx_spi_init+0xbc>
    if (value == 0)
   1b8de:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
   1b8e0:	7808      	ldrb	r0, [r1, #0]
   1b8e2:	2b01      	cmp	r3, #1
   1b8e4:	d87a      	bhi.n	1b9dc <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
   1b8e6:	f004 ff00 	bl	206ea <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
   1b8ea:	780b      	ldrb	r3, [r1, #0]
   1b8ec:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b8ee:	a801      	add	r0, sp, #4
   1b8f0:	f7ff ffca 	bl	1b888 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b8f4:	9b01      	ldr	r3, [sp, #4]
   1b8f6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b8fa:	2201      	movs	r2, #1
   1b8fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1b900:	7848      	ldrb	r0, [r1, #1]
   1b902:	28ff      	cmp	r0, #255	; 0xff
   1b904:	d00c      	beq.n	1b920 <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
   1b906:	f004 fef0 	bl	206ea <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
   1b90a:	784b      	ldrb	r3, [r1, #1]
   1b90c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b90e:	a801      	add	r0, sp, #4
   1b910:	f7ff ffba 	bl	1b888 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b914:	9b01      	ldr	r3, [sp, #4]
   1b916:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b91a:	2203      	movs	r2, #3
   1b91c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1b920:	788b      	ldrb	r3, [r1, #2]
   1b922:	2bff      	cmp	r3, #255	; 0xff
   1b924:	d00c      	beq.n	1b940 <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b926:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
   1b928:	f891 800e 	ldrb.w	r8, [r1, #14]
   1b92c:	9301      	str	r3, [sp, #4]
   1b92e:	f7ff ffab 	bl	1b888 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b932:	9b01      	ldr	r3, [sp, #4]
   1b934:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1b938:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1b93c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1b940:	78c8      	ldrb	r0, [r1, #3]
   1b942:	28ff      	cmp	r0, #255	; 0xff
   1b944:	d00c      	beq.n	1b960 <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
   1b946:	f004 fec3 	bl	206d0 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
   1b94a:	78cb      	ldrb	r3, [r1, #3]
   1b94c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1b94e:	a801      	add	r0, sp, #4
   1b950:	f7ff ff9a 	bl	1b888 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   1b954:	9b01      	ldr	r3, [sp, #4]
   1b956:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b95a:	2203      	movs	r2, #3
   1b95c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   1b960:	7c0b      	ldrb	r3, [r1, #16]
   1b962:	b993      	cbnz	r3, 1b98a <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1b964:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1b966:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1b968:	2bff      	cmp	r3, #255	; 0xff
   1b96a:	bf18      	it	ne
   1b96c:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1b96e:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
   1b970:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1b974:	bf08      	it	eq
   1b976:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
   1b97a:	2bff      	cmp	r3, #255	; 0xff
   1b97c:	bf08      	it	eq
   1b97e:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
   1b982:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
   1b986:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
   1b98a:	688b      	ldr	r3, [r1, #8]
   1b98c:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1b990:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1b992:	7b0a      	ldrb	r2, [r1, #12]
   1b994:	3b00      	subs	r3, #0
   1b996:	bf18      	it	ne
   1b998:	2301      	movne	r3, #1
    switch (spi_mode)
   1b99a:	2a02      	cmp	r2, #2
   1b99c:	d021      	beq.n	1b9e2 <nrfx_spi_init+0x13e>
   1b99e:	2a03      	cmp	r2, #3
   1b9a0:	d022      	beq.n	1b9e8 <nrfx_spi_init+0x144>
   1b9a2:	2a01      	cmp	r2, #1
   1b9a4:	d101      	bne.n	1b9aa <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1b9a6:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1b9aa:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b9ae:	2301      	movs	r3, #1
   1b9b0:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1b9b4:	2328      	movs	r3, #40	; 0x28
   1b9b6:	437b      	muls	r3, r7
   1b9b8:	58e3      	ldr	r3, [r4, r3]
   1b9ba:	b123      	cbz	r3, 1b9c6 <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   1b9bc:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1b9be:	f340 3007 	sbfx	r0, r0, #12, #8
   1b9c2:	f7f6 fe75 	bl	126b0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1b9c6:	2328      	movs	r3, #40	; 0x28
   1b9c8:	fb03 4407 	mla	r4, r3, r7, r4
   1b9cc:	2300      	movs	r3, #0
   1b9ce:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1b9d0:	4809      	ldr	r0, [pc, #36]	; (1b9f8 <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1b9d2:	2301      	movs	r3, #1
   1b9d4:	7723      	strb	r3, [r4, #28]
}
   1b9d6:	b002      	add	sp, #8
   1b9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
   1b9dc:	f004 fe78 	bl	206d0 <nrf_gpio_pin_set>
   1b9e0:	e783      	b.n	1b8ea <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1b9e2:	f043 0304 	orr.w	r3, r3, #4
        break;
   1b9e6:	e7e0      	b.n	1b9aa <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1b9e8:	f043 0306 	orr.w	r3, r3, #6
        break;
   1b9ec:	e7dd      	b.n	1b9aa <nrfx_spi_init+0x106>
        return err_code;
   1b9ee:	4803      	ldr	r0, [pc, #12]	; (1b9fc <nrfx_spi_init+0x158>)
   1b9f0:	e7f1      	b.n	1b9d6 <nrfx_spi_init+0x132>
   1b9f2:	bf00      	nop
   1b9f4:	20002838 	.word	0x20002838
   1b9f8:	0bad0000 	.word	0x0bad0000
   1b9fc:	0bad0005 	.word	0x0bad0005

0001ba00 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
   1ba00:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1ba02:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
   1ba04:	4c19      	ldr	r4, [pc, #100]	; (1ba6c <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1ba06:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
   1ba08:	2328      	movs	r3, #40	; 0x28
   1ba0a:	4373      	muls	r3, r6
   1ba0c:	58e3      	ldr	r3, [r4, r3]
   1ba0e:	b133      	cbz	r3, 1ba1e <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
   1ba10:	f345 3007 	sbfx	r0, r5, #12, #8
   1ba14:	f7f6 fe5a 	bl	126cc <arch_irq_disable>
    p_reg->INTENCLR = mask;
   1ba18:	2304      	movs	r3, #4
   1ba1a:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
   1ba1e:	2300      	movs	r3, #0
   1ba20:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
   1ba24:	2328      	movs	r3, #40	; 0x28
   1ba26:	fb03 4306 	mla	r3, r3, r6, r4
   1ba2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   1ba2e:	b9bb      	cbnz	r3, 1ba60 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
   1ba30:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
   1ba34:	f004 fe3e 	bl	206b4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
   1ba38:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1ba3c:	1c42      	adds	r2, r0, #1
   1ba3e:	d001      	beq.n	1ba44 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
   1ba40:	f004 fe38 	bl	206b4 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
   1ba44:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
   1ba48:	1c43      	adds	r3, r0, #1
   1ba4a:	d001      	beq.n	1ba50 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
   1ba4c:	f004 fe32 	bl	206b4 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1ba50:	2328      	movs	r3, #40	; 0x28
   1ba52:	fb03 4306 	mla	r3, r3, r6, r4
   1ba56:	7f98      	ldrb	r0, [r3, #30]
   1ba58:	28ff      	cmp	r0, #255	; 0xff
   1ba5a:	d001      	beq.n	1ba60 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
   1ba5c:	f004 fe2a 	bl	206b4 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   1ba60:	2328      	movs	r3, #40	; 0x28
   1ba62:	fb03 4406 	mla	r4, r3, r6, r4
   1ba66:	2300      	movs	r3, #0
   1ba68:	7723      	strb	r3, [r4, #28]
}
   1ba6a:	bd70      	pop	{r4, r5, r6, pc}
   1ba6c:	20002838 	.word	0x20002838

0001ba70 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1ba70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ba74:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1ba76:	4c39      	ldr	r4, [pc, #228]	; (1bb5c <nrfx_spi_xfer+0xec>)
   1ba78:	2328      	movs	r3, #40	; 0x28
   1ba7a:	437b      	muls	r3, r7
{
   1ba7c:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1ba7e:	18e2      	adds	r2, r4, r3
{
   1ba80:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1ba82:	7f51      	ldrb	r1, [r2, #29]
{
   1ba84:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1ba86:	2900      	cmp	r1, #0
   1ba88:	d166      	bne.n	1bb58 <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1ba8a:	58e3      	ldr	r3, [r4, r3]
   1ba8c:	b10b      	cbz	r3, 1ba92 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1ba8e:	2301      	movs	r3, #1
   1ba90:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1ba92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1ba96:	2528      	movs	r5, #40	; 0x28
   1ba98:	fb05 4507 	mla	r5, r5, r7, r4
   1ba9c:	f105 0c0c 	add.w	ip, r5, #12
   1baa0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1baa4:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   1baa6:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1baa8:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1baaa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1baae:	d001      	beq.n	1bab4 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
   1bab0:	f004 fe1b 	bl	206ea <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
   1bab4:	2328      	movs	r3, #40	; 0x28
   1bab6:	f1b8 0f00 	cmp.w	r8, #0
   1baba:	d006      	beq.n	1baca <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1babc:	fb03 4307 	mla	r3, r3, r7, r4
   1bac0:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1bac2:	4827      	ldr	r0, [pc, #156]	; (1bb60 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1bac4:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1bac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1baca:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   1bace:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   1bad2:	2204      	movs	r2, #4
   1bad4:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   1bad8:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1badc:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   1bae0:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
   1bae4:	6872      	ldr	r2, [r6, #4]
   1bae6:	b19a      	cbz	r2, 1bb10 <nrfx_spi_xfer+0xa0>
   1bae8:	6833      	ldr	r3, [r6, #0]
   1baea:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1baec:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1baf0:	6873      	ldr	r3, [r6, #4]
   1baf2:	2b01      	cmp	r3, #1
   1baf4:	d90e      	bls.n	1bb14 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1baf6:	6833      	ldr	r3, [r6, #0]
   1baf8:	785b      	ldrb	r3, [r3, #1]
   1bafa:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   1bafe:	2328      	movs	r3, #40	; 0x28
   1bb00:	437b      	muls	r3, r7
   1bb02:	58e6      	ldr	r6, [r4, r3]
   1bb04:	b176      	cbz	r6, 1bb24 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
   1bb06:	2304      	movs	r3, #4
   1bb08:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1bb0c:	4815      	ldr	r0, [pc, #84]	; (1bb64 <nrfx_spi_xfer+0xf4>)
   1bb0e:	e7da      	b.n	1bac6 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1bb10:	7fdb      	ldrb	r3, [r3, #31]
   1bb12:	e7eb      	b.n	1baec <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1bb14:	68f3      	ldr	r3, [r6, #12]
   1bb16:	2b01      	cmp	r3, #1
   1bb18:	d9f1      	bls.n	1bafe <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1bb1a:	2328      	movs	r3, #40	; 0x28
   1bb1c:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   1bb20:	7fdb      	ldrb	r3, [r3, #31]
   1bb22:	e7ea      	b.n	1bafa <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1bb24:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1bb28:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1bb2c:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1bb30:	2b00      	cmp	r3, #0
   1bb32:	d0fb      	beq.n	1bb2c <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1bb34:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1bb38:	4628      	mov	r0, r5
   1bb3a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1bb3e:	f004 fde1 	bl	20704 <transfer_byte>
   1bb42:	2800      	cmp	r0, #0
   1bb44:	d1f2      	bne.n	1bb2c <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1bb46:	2328      	movs	r3, #40	; 0x28
   1bb48:	fb03 4407 	mla	r4, r3, r7, r4
   1bb4c:	7fa0      	ldrb	r0, [r4, #30]
   1bb4e:	28ff      	cmp	r0, #255	; 0xff
   1bb50:	d0dc      	beq.n	1bb0c <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
   1bb52:	f004 fdbd 	bl	206d0 <nrf_gpio_pin_set>
   1bb56:	e7d9      	b.n	1bb0c <nrfx_spi_xfer+0x9c>
        return err_code;
   1bb58:	4803      	ldr	r0, [pc, #12]	; (1bb68 <nrfx_spi_xfer+0xf8>)
   1bb5a:	e7b4      	b.n	1bac6 <nrfx_spi_xfer+0x56>
   1bb5c:	20002838 	.word	0x20002838
   1bb60:	0bad0003 	.word	0x0bad0003
   1bb64:	0bad0000 	.word	0x0bad0000
   1bb68:	0bad000b 	.word	0x0bad000b

0001bb6c <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
   1bb6c:	b510      	push	{r4, lr}
   1bb6e:	480c      	ldr	r0, [pc, #48]	; (1bba0 <nrfx_spi_0_irq_handler+0x34>)
    if (!transfer_byte(p_spi, p_cb))
   1bb70:	490c      	ldr	r1, [pc, #48]	; (1bba4 <nrfx_spi_0_irq_handler+0x38>)
   1bb72:	2300      	movs	r3, #0
   1bb74:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1bb78:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1bb7c:	f004 fdc2 	bl	20704 <transfer_byte>
   1bb80:	b968      	cbnz	r0, 1bb9e <nrfx_spi_0_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1bb82:	7f88      	ldrb	r0, [r1, #30]
   1bb84:	28ff      	cmp	r0, #255	; 0xff
   1bb86:	d001      	beq.n	1bb8c <nrfx_spi_0_irq_handler+0x20>
   1bb88:	f004 fda2 	bl	206d0 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1bb8c:	2300      	movs	r3, #0
   1bb8e:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1bb90:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
   1bb92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1bb96:	e9d1 3100 	ldrd	r3, r1, [r1]
   1bb9a:	4803      	ldr	r0, [pc, #12]	; (1bba8 <nrfx_spi_0_irq_handler+0x3c>)
   1bb9c:	4718      	bx	r3
}
   1bb9e:	bd10      	pop	{r4, pc}
   1bba0:	40003000 	.word	0x40003000
   1bba4:	20002838 	.word	0x20002838
   1bba8:	20002840 	.word	0x20002840

0001bbac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   1bbac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1bbae:	4c11      	ldr	r4, [pc, #68]	; (1bbf4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   1bbb0:	4a11      	ldr	r2, [pc, #68]	; (1bbf8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   1bbb2:	4912      	ldr	r1, [pc, #72]	; (1bbfc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   1bbb4:	2303      	movs	r3, #3
   1bbb6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   1bbb8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1bbba:	4b11      	ldr	r3, [pc, #68]	; (1bc00 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   1bbbc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   1bbbe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   1bbc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1bbc4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   1bbc6:	2300      	movs	r3, #0
   1bbc8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   1bbca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1bbcc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   1bbce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   1bbd0:	4a0c      	ldr	r2, [pc, #48]	; (1bc04 <_DoInit+0x58>)
   1bbd2:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   1bbd4:	2210      	movs	r2, #16
   1bbd6:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
   1bbd8:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
   1bbda:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   1bbdc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   1bbde:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   1bbe0:	f002 fd98 	bl	1e714 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   1bbe4:	4908      	ldr	r1, [pc, #32]	; (1bc08 <_DoInit+0x5c>)
   1bbe6:	4620      	mov	r0, r4
   1bbe8:	f002 fd94 	bl	1e714 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   1bbec:	2320      	movs	r3, #32
   1bbee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   1bbf0:	bd10      	pop	{r4, pc}
   1bbf2:	bf00      	nop
   1bbf4:	20002860 	.word	0x20002860
   1bbf8:	00023b16 	.word	0x00023b16
   1bbfc:	00023b1f 	.word	0x00023b1f
   1bc00:	20002b3a 	.word	0x20002b3a
   1bc04:	20002b2a 	.word	0x20002b2a
   1bc08:	00023b23 	.word	0x00023b23

0001bc0c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   1bc10:	4f21      	ldr	r7, [pc, #132]	; (1bc98 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
   1bc12:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bc16:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   1bc18:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bc1c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   1bc1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   1bc20:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1bc22:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bc24:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   1bc26:	d831      	bhi.n	1bc8c <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   1bc28:	f8d2 a020 	ldr.w	sl, [r2, #32]
   1bc2c:	ebaa 0905 	sub.w	r9, sl, r5
   1bc30:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   1bc34:	4294      	cmp	r4, r2
   1bc36:	d811      	bhi.n	1bc5c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bc38:	2318      	movs	r3, #24
   1bc3a:	fb06 3303 	mla	r3, r6, r3, r3
   1bc3e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   1bc40:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bc42:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   1bc44:	4641      	mov	r1, r8
   1bc46:	4428      	add	r0, r5
   1bc48:	f002 fd9a 	bl	1e780 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   1bc4c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   1bc4e:	2318      	movs	r3, #24
   1bc50:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
   1bc54:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
   1bc56:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   1bc58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   1bc5c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   1bc5e:	429c      	cmp	r4, r3
   1bc60:	d818      	bhi.n	1bc94 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bc62:	fb00 bb0b 	mla	fp, r0, fp, fp
   1bc66:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1bc68:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   1bc6a:	f8db 0004 	ldr.w	r0, [fp, #4]
   1bc6e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   1bc70:	4428      	add	r0, r5
   1bc72:	f002 fd85 	bl	1e780 <memcpy>
      if (NumBytes) {
   1bc76:	ebb4 040a 	subs.w	r4, r4, sl
   1bc7a:	d0e8      	beq.n	1bc4e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   1bc7c:	f8db 0004 	ldr.w	r0, [fp, #4]
   1bc80:	4622      	mov	r2, r4
   1bc82:	eb08 0109 	add.w	r1, r8, r9
   1bc86:	f002 fd7b 	bl	1e780 <memcpy>
      return 1;
   1bc8a:	e7e0      	b.n	1bc4e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
   1bc8c:	3b01      	subs	r3, #1
   1bc8e:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   1bc90:	42a3      	cmp	r3, r4
   1bc92:	d2d1      	bcs.n	1bc38 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   1bc94:	2000      	movs	r0, #0
   1bc96:	e7df      	b.n	1bc58 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   1bc98:	20002860 	.word	0x20002860

0001bc9c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   1bc9e:	4b14      	ldr	r3, [pc, #80]	; (1bcf0 <SEGGER_RTT_WriteNoLock+0x54>)
   1bca0:	2718      	movs	r7, #24
   1bca2:	fb00 7507 	mla	r5, r0, r7, r7
   1bca6:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   1bca8:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bcac:	460e      	mov	r6, r1
  switch (pRing->Flags) {
   1bcae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bcb0:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   1bcb2:	4614      	mov	r4, r2
  switch (pRing->Flags) {
   1bcb4:	d00a      	beq.n	1bccc <SEGGER_RTT_WriteNoLock+0x30>
   1bcb6:	2b02      	cmp	r3, #2
   1bcb8:	d014      	beq.n	1bce4 <SEGGER_RTT_WriteNoLock+0x48>
   1bcba:	b923      	cbnz	r3, 1bcc6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   1bcbc:	4628      	mov	r0, r5
   1bcbe:	f004 fd54 	bl	2076a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   1bcc2:	4284      	cmp	r4, r0
   1bcc4:	d908      	bls.n	1bcd8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
   1bcc6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
   1bcc8:	4620      	mov	r0, r4
   1bcca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
   1bccc:	4628      	mov	r0, r5
   1bcce:	f004 fd4c 	bl	2076a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   1bcd2:	4284      	cmp	r4, r0
   1bcd4:	bf28      	it	cs
   1bcd6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   1bcd8:	4622      	mov	r2, r4
   1bcda:	4631      	mov	r1, r6
   1bcdc:	4628      	mov	r0, r5
   1bcde:	f004 fd4d 	bl	2077c <_WriteNoCheck>
    break;
   1bce2:	e7f1      	b.n	1bcc8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1bce4:	4628      	mov	r0, r5
}
   1bce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   1bcea:	f004 bd62 	b.w	207b2 <_WriteBlocking>
   1bcee:	bf00      	nop
   1bcf0:	20002860 	.word	0x20002860

0001bcf4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   1bcf4:	4b03      	ldr	r3, [pc, #12]	; (1bd04 <SEGGER_RTT_HasDataUp+0x10>)
   1bcf6:	2218      	movs	r2, #24
   1bcf8:	fb02 3300 	mla	r3, r2, r0, r3
   1bcfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   1bcfe:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   1bd00:	1a80      	subs	r0, r0, r2
   1bd02:	4770      	bx	lr
   1bd04:	20002860 	.word	0x20002860

0001bd08 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
   1bd08:	4803      	ldr	r0, [pc, #12]	; (1bd18 <zephyr_rtt_mutex_lock+0x10>)
   1bd0a:	f04f 32ff 	mov.w	r2, #4294967295
   1bd0e:	f04f 33ff 	mov.w	r3, #4294967295
   1bd12:	f000 ba85 	b.w	1c220 <z_impl_k_mutex_lock>
   1bd16:	bf00      	nop
   1bd18:	200008b8 	.word	0x200008b8

0001bd1c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   1bd1c:	4801      	ldr	r0, [pc, #4]	; (1bd24 <zephyr_rtt_mutex_unlock+0x8>)
   1bd1e:	f000 baf9 	b.w	1c314 <z_impl_k_mutex_unlock>
   1bd22:	bf00      	nop
   1bd24:	200008b8 	.word	0x200008b8

0001bd28 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd2c:	4606      	mov	r6, r0
   1bd2e:	b086      	sub	sp, #24
   1bd30:	460f      	mov	r7, r1
   1bd32:	f04f 0340 	mov.w	r3, #64	; 0x40
   1bd36:	f3ef 8811 	mrs	r8, BASEPRI
   1bd3a:	f383 8812 	msr	BASEPRI_MAX, r3
   1bd3e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   1bd42:	f001 f871 	bl	1ce28 <z_impl_z_current_get>
   1bd46:	2e04      	cmp	r6, #4
   1bd48:	bf96      	itet	ls
   1bd4a:	4b22      	ldrls	r3, [pc, #136]	; (1bdd4 <z_fatal_error+0xac>)
   1bd4c:	4b22      	ldrhi	r3, [pc, #136]	; (1bdd8 <z_fatal_error+0xb0>)
   1bd4e:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1bd52:	4922      	ldr	r1, [pc, #136]	; (1bddc <z_fatal_error+0xb4>)
   1bd54:	9603      	str	r6, [sp, #12]
   1bd56:	2400      	movs	r4, #0
   1bd58:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1bd5c:	4b20      	ldr	r3, [pc, #128]	; (1bde0 <z_fatal_error+0xb8>)
   1bd5e:	9400      	str	r4, [sp, #0]
   1bd60:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1bd64:	4605      	mov	r5, r0
   1bd66:	4623      	mov	r3, r4
   1bd68:	2201      	movs	r2, #1
   1bd6a:	4620      	mov	r0, r4
   1bd6c:	f004 fd5e 	bl	2082c <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1bd70:	b16f      	cbz	r7, 1bd8e <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1bd72:	69fb      	ldr	r3, [r7, #28]
   1bd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1bd78:	b14b      	cbz	r3, 1bd8e <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
   1bd7a:	4b1a      	ldr	r3, [pc, #104]	; (1bde4 <z_fatal_error+0xbc>)
   1bd7c:	4917      	ldr	r1, [pc, #92]	; (1bddc <z_fatal_error+0xb4>)
   1bd7e:	9400      	str	r4, [sp, #0]
   1bd80:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1bd84:	2201      	movs	r2, #1
   1bd86:	4623      	mov	r3, r4
   1bd88:	4620      	mov	r0, r4
   1bd8a:	f004 fd4f 	bl	2082c <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1bd8e:	b12d      	cbz	r5, 1bd9c <z_fatal_error+0x74>
   1bd90:	4628      	mov	r0, r5
   1bd92:	f004 fe19 	bl	209c8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1bd96:	b108      	cbz	r0, 1bd9c <z_fatal_error+0x74>
   1bd98:	7803      	ldrb	r3, [r0, #0]
   1bd9a:	b903      	cbnz	r3, 1bd9e <z_fatal_error+0x76>
		thread_name = "unknown";
   1bd9c:	4812      	ldr	r0, [pc, #72]	; (1bde8 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1bd9e:	4b13      	ldr	r3, [pc, #76]	; (1bdec <z_fatal_error+0xc4>)
   1bda0:	9302      	str	r3, [sp, #8]
   1bda2:	2300      	movs	r3, #0
   1bda4:	e9cd 5003 	strd	r5, r0, [sp, #12]
   1bda8:	e9cd 3300 	strd	r3, r3, [sp]
   1bdac:	4618      	mov	r0, r3
   1bdae:	2201      	movs	r2, #1
   1bdb0:	490a      	ldr	r1, [pc, #40]	; (1bddc <z_fatal_error+0xb4>)
   1bdb2:	f004 fd3b 	bl	2082c <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
   1bdb6:	4639      	mov	r1, r7
   1bdb8:	4630      	mov	r0, r6
   1bdba:	f7fe f9a1 	bl	1a100 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1bdbe:	f388 8811 	msr	BASEPRI, r8
   1bdc2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1bdc6:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1bdc8:	b006      	add	sp, #24
   1bdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bdce:	f7f7 b8f1 	b.w	12fb4 <z_impl_k_thread_abort>
   1bdd2:	bf00      	nop
   1bdd4:	00021c78 	.word	0x00021c78
   1bdd8:	00023b2a 	.word	0x00023b2a
   1bddc:	000216d4 	.word	0x000216d4
   1bde0:	00023b40 	.word	0x00023b40
   1bde4:	00023b68 	.word	0x00023b68
   1bde8:	00023b38 	.word	0x00023b38
   1bdec:	00023b89 	.word	0x00023b89

0001bdf0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bdf0:	4b0f      	ldr	r3, [pc, #60]	; (1be30 <z_sys_init_run_level+0x40>)
{
   1bdf2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1bdf4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1bdf8:	3001      	adds	r0, #1
   1bdfa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1bdfe:	42a6      	cmp	r6, r4
   1be00:	d800      	bhi.n	1be04 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   1be02:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   1be04:	e9d4 3500 	ldrd	r3, r5, [r4]
   1be08:	4628      	mov	r0, r5
   1be0a:	4798      	blx	r3
		if (dev != NULL) {
   1be0c:	b16d      	cbz	r5, 1be2a <z_sys_init_run_level+0x3a>
			if (rc != 0) {
   1be0e:	b138      	cbz	r0, 1be20 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   1be10:	2800      	cmp	r0, #0
   1be12:	bfb8      	it	lt
   1be14:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   1be16:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
   1be18:	28ff      	cmp	r0, #255	; 0xff
   1be1a:	bfa8      	it	ge
   1be1c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
   1be1e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   1be20:	68ea      	ldr	r2, [r5, #12]
   1be22:	7853      	ldrb	r3, [r2, #1]
   1be24:	f043 0301 	orr.w	r3, r3, #1
   1be28:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1be2a:	3408      	adds	r4, #8
   1be2c:	e7e7      	b.n	1bdfe <z_sys_init_run_level+0xe>
   1be2e:	bf00      	nop
   1be30:	00021c8c 	.word	0x00021c8c

0001be34 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1be34:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1be36:	4b0a      	ldr	r3, [pc, #40]	; (1be60 <bg_thread_main+0x2c>)
   1be38:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1be3a:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
   1be3c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
   1be3e:	f7ff ffd7 	bl	1bdf0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1be42:	f001 fa67 	bl	1d314 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
   1be46:	2004      	movs	r0, #4
   1be48:	f7ff ffd2 	bl	1bdf0 <z_sys_init_run_level>

	z_init_static_threads();
   1be4c:	f000 f970 	bl	1c130 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
   1be50:	f7f4 fe44 	bl	10adc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1be54:	4a03      	ldr	r2, [pc, #12]	; (1be64 <bg_thread_main+0x30>)
   1be56:	7b13      	ldrb	r3, [r2, #12]
   1be58:	f023 0301 	bic.w	r3, r3, #1
   1be5c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1be5e:	bd08      	pop	{r3, pc}
   1be60:	20002f3a 	.word	0x20002f3a
   1be64:	20002398 	.word	0x20002398

0001be68 <z_bss_zero>:
{
   1be68:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
   1be6a:	4803      	ldr	r0, [pc, #12]	; (1be78 <z_bss_zero+0x10>)
   1be6c:	4a03      	ldr	r2, [pc, #12]	; (1be7c <z_bss_zero+0x14>)
   1be6e:	2100      	movs	r1, #0
   1be70:	1a12      	subs	r2, r2, r0
   1be72:	f004 fceb 	bl	2084c <z_early_memset>
}
   1be76:	bd08      	pop	{r3, pc}
   1be78:	20000a08 	.word	0x20000a08
   1be7c:	20002f3c 	.word	0x20002f3c

0001be80 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
   1be80:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
   1be82:	2300      	movs	r3, #0
{
   1be84:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   1be86:	2201      	movs	r2, #1
   1be88:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
   1be8c:	4e13      	ldr	r6, [pc, #76]	; (1bedc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1be8e:	4d14      	ldr	r5, [pc, #80]	; (1bee0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
   1be90:	9301      	str	r3, [sp, #4]
   1be92:	220f      	movs	r2, #15
   1be94:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1be98:	4912      	ldr	r1, [pc, #72]	; (1bee4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   1be9a:	2318      	movs	r3, #24
   1be9c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
   1bea0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
   1bea4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
   1bea6:	f44f 70c0 	mov.w	r0, #384	; 0x180
   1beaa:	fb00 1104 	mla	r1, r0, r4, r1
   1beae:	4b0e      	ldr	r3, [pc, #56]	; (1bee8 <z_init_cpu+0x68>)
   1beb0:	9500      	str	r5, [sp, #0]
   1beb2:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1beb6:	4630      	mov	r0, r6
   1beb8:	f000 f8dc 	bl	1c074 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1bebc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1bebe:	4a0b      	ldr	r2, [pc, #44]	; (1beec <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
   1bec0:	60ee      	str	r6, [r5, #12]
   1bec2:	f023 0304 	bic.w	r3, r3, #4
   1bec6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
   1bec8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   1becc:	fb04 3303 	mla	r3, r4, r3, r3
   1bed0:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
   1bed2:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
   1bed4:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
   1bed6:	b006      	add	sp, #24
   1bed8:	bd70      	pop	{r4, r5, r6, pc}
   1beda:	bf00      	nop
   1bedc:	20002318 	.word	0x20002318
   1bee0:	20002908 	.word	0x20002908
   1bee4:	20005200 	.word	0x20005200
   1bee8:	0001c1e9 	.word	0x0001c1e9
   1beec:	200049c0 	.word	0x200049c0

0001bef0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1bef0:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1bef2:	2000      	movs	r0, #0
{
   1bef4:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
   1bef6:	f7ff ff7b 	bl	1bdf0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1befa:	4b2e      	ldr	r3, [pc, #184]	; (1bfb4 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1befc:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1bf00:	4d2d      	ldr	r5, [pc, #180]	; (1bfb8 <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
   1bf02:	4e2e      	ldr	r6, [pc, #184]	; (1bfbc <z_cstart+0xcc>)
   1bf04:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1bf06:	4f2e      	ldr	r7, [pc, #184]	; (1bfc0 <z_cstart+0xd0>)
   1bf08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   1bf0c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bf0e:	23e0      	movs	r3, #224	; 0xe0
   1bf10:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1bf14:	2400      	movs	r4, #0
   1bf16:	2320      	movs	r3, #32
   1bf18:	77eb      	strb	r3, [r5, #31]
   1bf1a:	762c      	strb	r4, [r5, #24]
   1bf1c:	766c      	strb	r4, [r5, #25]
   1bf1e:	76ac      	strb	r4, [r5, #26]
   1bf20:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1bf24:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1bf26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1bf2a:	626b      	str	r3, [r5, #36]	; 0x24
   1bf2c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1bf30:	f7f6 ffb4 	bl	12e9c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1bf34:	f7f6 fb4c 	bl	125d0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1bf38:	f04f 33ff 	mov.w	r3, #4294967295
   1bf3c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1bf3e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1bf40:	f7f7 f8fc 	bl	1313c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1bf44:	f7f7 f84c 	bl	12fe0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   1bf48:	f7f5 fec0 	bl	11ccc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1bf4c:	f240 1301 	movw	r3, #257	; 0x101
   1bf50:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1bf54:	ab06      	add	r3, sp, #24
   1bf56:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   1bf58:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   1bf5c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1bf5e:	f004 fc59 	bl	20814 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
   1bf62:	2001      	movs	r0, #1
   1bf64:	f7ff ff44 	bl	1bdf0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1bf68:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
   1bf6a:	4d16      	ldr	r5, [pc, #88]	; (1bfc4 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
   1bf6c:	f7ff ff40 	bl	1bdf0 <z_sys_init_run_level>
	z_sched_init();
   1bf70:	f000 fe98 	bl	1cca4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1bf74:	4b14      	ldr	r3, [pc, #80]	; (1bfc8 <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
   1bf76:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1bf78:	9305      	str	r3, [sp, #20]
   1bf7a:	2301      	movs	r3, #1
   1bf7c:	4913      	ldr	r1, [pc, #76]	; (1bfcc <z_cstart+0xdc>)
   1bf7e:	9400      	str	r4, [sp, #0]
   1bf80:	e9cd 4303 	strd	r4, r3, [sp, #12]
   1bf84:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1bf88:	463b      	mov	r3, r7
   1bf8a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1bf8e:	4628      	mov	r0, r5
   1bf90:	f000 f870 	bl	1c074 <z_setup_new_thread>
   1bf94:	7b6a      	ldrb	r2, [r5, #13]
   1bf96:	4606      	mov	r6, r0
   1bf98:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   1bf9c:	4628      	mov	r0, r5
   1bf9e:	736a      	strb	r2, [r5, #13]
   1bfa0:	f004 ff3d 	bl	20e1e <z_ready_thread>
	z_init_cpu(0);
   1bfa4:	4620      	mov	r0, r4
   1bfa6:	f7ff ff6b 	bl	1be80 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1bfaa:	463a      	mov	r2, r7
   1bfac:	4631      	mov	r1, r6
   1bfae:	4628      	mov	r0, r5
   1bfb0:	f7f6 fc7c 	bl	128ac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1bfb4:	20005200 	.word	0x20005200
   1bfb8:	e000ed00 	.word	0xe000ed00
   1bfbc:	20002908 	.word	0x20002908
   1bfc0:	0001be35 	.word	0x0001be35
   1bfc4:	20002398 	.word	0x20002398
   1bfc8:	00023beb 	.word	0x00023beb
   1bfcc:	20005380 	.word	0x20005380

0001bfd0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1bfd0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1bfd2:	4c06      	ldr	r4, [pc, #24]	; (1bfec <statics_init+0x1c>)
   1bfd4:	4d06      	ldr	r5, [pc, #24]	; (1bff0 <statics_init+0x20>)
   1bfd6:	42ac      	cmp	r4, r5
   1bfd8:	d301      	bcc.n	1bfde <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   1bfda:	2000      	movs	r0, #0
   1bfdc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1bfde:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1bfe2:	4620      	mov	r0, r4
   1bfe4:	f004 fc36 	bl	20854 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   1bfe8:	3414      	adds	r4, #20
   1bfea:	e7f4      	b.n	1bfd6 <statics_init+0x6>
   1bfec:	200008a4 	.word	0x200008a4
   1bff0:	200008a4 	.word	0x200008a4

0001bff4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   1bff4:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1bff6:	4c06      	ldr	r4, [pc, #24]	; (1c010 <init_mem_slab_module+0x1c>)
   1bff8:	4d06      	ldr	r5, [pc, #24]	; (1c014 <init_mem_slab_module+0x20>)
	int rc = 0;
   1bffa:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1bffc:	42ac      	cmp	r4, r5
   1bffe:	d300      	bcc.n	1c002 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
   1c000:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
   1c002:	4620      	mov	r0, r4
   1c004:	f004 fc98 	bl	20938 <create_free_list>
		if (rc < 0) {
   1c008:	2800      	cmp	r0, #0
   1c00a:	dbf9      	blt.n	1c000 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1c00c:	341c      	adds	r4, #28
   1c00e:	e7f5      	b.n	1bffc <init_mem_slab_module+0x8>
   1c010:	20000850 	.word	0x20000850
   1c014:	200008a4 	.word	0x200008a4

0001c018 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1c018:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c01a:	460c      	mov	r4, r1
	__asm__ volatile(
   1c01c:	f04f 0540 	mov.w	r5, #64	; 0x40
   1c020:	f3ef 8111 	mrs	r1, BASEPRI
   1c024:	f385 8812 	msr	BASEPRI_MAX, r5
   1c028:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1c02c:	6945      	ldr	r5, [r0, #20]
   1c02e:	b15d      	cbz	r5, 1c048 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1c030:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1c032:	682b      	ldr	r3, [r5, #0]
   1c034:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1c036:	6983      	ldr	r3, [r0, #24]
   1c038:	3301      	adds	r3, #1
   1c03a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1c03c:	2000      	movs	r0, #0
	__asm__ volatile(
   1c03e:	f381 8811 	msr	BASEPRI, r1
   1c042:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1c046:	e011      	b.n	1c06c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1c048:	ea52 0603 	orrs.w	r6, r2, r3
   1c04c:	d103      	bne.n	1c056 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1c04e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1c050:	f06f 000b 	mvn.w	r0, #11
   1c054:	e7f3      	b.n	1c03e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1c056:	e9cd 2300 	strd	r2, r3, [sp]
   1c05a:	4602      	mov	r2, r0
   1c05c:	3008      	adds	r0, #8
   1c05e:	f000 fd2b 	bl	1cab8 <z_pend_curr>
		if (result == 0) {
   1c062:	b918      	cbnz	r0, 1c06c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1c064:	4b02      	ldr	r3, [pc, #8]	; (1c070 <k_mem_slab_alloc+0x58>)
   1c066:	689b      	ldr	r3, [r3, #8]
   1c068:	695b      	ldr	r3, [r3, #20]
   1c06a:	6023      	str	r3, [r4, #0]
}
   1c06c:	b002      	add	sp, #8
   1c06e:	bd70      	pop	{r4, r5, r6, pc}
   1c070:	20002908 	.word	0x20002908

0001c074 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1c074:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1c078:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1c07a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1c07c:	2604      	movs	r6, #4
   1c07e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1c080:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1c082:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1c084:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1c088:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c08a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   1c08c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1c092:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c094:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1c098:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1c09a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1c09e:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1c0a2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1c0a4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1c0a6:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1c0a8:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c0ac:	9202      	str	r2, [sp, #8]
   1c0ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1c0b0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1c0b2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c0b6:	9200      	str	r2, [sp, #0]
   1c0b8:	4642      	mov	r2, r8
{
   1c0ba:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1c0bc:	f7f6 fbc4 	bl	12848 <arch_new_thread>
	if (!_current) {
   1c0c0:	4b04      	ldr	r3, [pc, #16]	; (1c0d4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1c0c2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1c0c4:	689b      	ldr	r3, [r3, #8]
   1c0c6:	b103      	cbz	r3, 1c0ca <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1c0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1c0ca:	6763      	str	r3, [r4, #116]	; 0x74
}
   1c0cc:	4640      	mov	r0, r8
   1c0ce:	b004      	add	sp, #16
   1c0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c0d4:	20002908 	.word	0x20002908

0001c0d8 <z_impl_k_thread_create>:
{
   1c0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c0da:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c0dc:	2500      	movs	r5, #0
   1c0de:	9505      	str	r5, [sp, #20]
   1c0e0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1c0e2:	9504      	str	r5, [sp, #16]
   1c0e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1c0e6:	9503      	str	r5, [sp, #12]
   1c0e8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c0ea:	9502      	str	r5, [sp, #8]
{
   1c0ec:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c0f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1c0f2:	9501      	str	r5, [sp, #4]
   1c0f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1c0f6:	9500      	str	r5, [sp, #0]
{
   1c0f8:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1c0fa:	f7ff ffbb 	bl	1c074 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1c0fe:	f1b6 3fff 	cmp.w	r6, #4294967295
   1c102:	bf08      	it	eq
   1c104:	f1b7 3fff 	cmpeq.w	r7, #4294967295
   1c108:	d005      	beq.n	1c116 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c10a:	ea56 0307 	orrs.w	r3, r6, r7
   1c10e:	d105      	bne.n	1c11c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1c110:	4620      	mov	r0, r4
   1c112:	f000 fd47 	bl	1cba4 <z_sched_start>
}
   1c116:	4620      	mov	r0, r4
   1c118:	b007      	add	sp, #28
   1c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1c11c:	4903      	ldr	r1, [pc, #12]	; (1c12c <z_impl_k_thread_create+0x54>)
   1c11e:	463a      	mov	r2, r7
   1c120:	4633      	mov	r3, r6
   1c122:	f104 0018 	add.w	r0, r4, #24
   1c126:	f000 ff5f 	bl	1cfe8 <z_add_timeout>
   1c12a:	e7f4      	b.n	1c116 <z_impl_k_thread_create+0x3e>
   1c12c:	00020d8b 	.word	0x00020d8b

0001c130 <z_init_static_threads>:
{
   1c130:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c134:	4c29      	ldr	r4, [pc, #164]	; (1c1dc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1c136:	4d2a      	ldr	r5, [pc, #168]	; (1c1e0 <z_init_static_threads+0xb0>)
{
   1c138:	b087      	sub	sp, #28
   1c13a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1c13c:	42ae      	cmp	r6, r5
   1c13e:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1c142:	d30f      	bcc.n	1c164 <z_init_static_threads+0x34>
	k_sched_lock();
   1c144:	f000 fd7e 	bl	1cc44 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c148:	4c24      	ldr	r4, [pc, #144]	; (1c1dc <z_init_static_threads+0xac>)
   1c14a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1c1e4 <z_init_static_threads+0xb4>
   1c14e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1c152:	f240 37e7 	movw	r7, #999	; 0x3e7
   1c156:	42ac      	cmp	r4, r5
   1c158:	d320      	bcc.n	1c19c <z_init_static_threads+0x6c>
}
   1c15a:	b007      	add	sp, #28
   1c15c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1c160:	f000 bd84 	b.w	1cc6c <k_sched_unlock>
		z_setup_new_thread(
   1c164:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1c168:	9305      	str	r3, [sp, #20]
   1c16a:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1c16e:	9304      	str	r3, [sp, #16]
   1c170:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1c174:	9303      	str	r3, [sp, #12]
   1c176:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1c17a:	9302      	str	r3, [sp, #8]
   1c17c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1c180:	9301      	str	r3, [sp, #4]
   1c182:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1c186:	9300      	str	r3, [sp, #0]
   1c188:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1c18c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1c190:	f7ff ff70 	bl	1c074 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1c194:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1c198:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1c19a:	e7ce      	b.n	1c13a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1c19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c19e:	1c5a      	adds	r2, r3, #1
   1c1a0:	d00d      	beq.n	1c1be <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1c1a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1c1a6:	2100      	movs	r1, #0
   1c1a8:	4638      	mov	r0, r7
   1c1aa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c1ae:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1c1b2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c1b6:	d104      	bne.n	1c1c2 <z_init_static_threads+0x92>
	z_sched_start(thread);
   1c1b8:	4640      	mov	r0, r8
   1c1ba:	f000 fcf3 	bl	1cba4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1c1be:	3430      	adds	r4, #48	; 0x30
   1c1c0:	e7c9      	b.n	1c156 <z_init_static_threads+0x26>
   1c1c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c1c6:	2300      	movs	r3, #0
   1c1c8:	f7e3 ff9a 	bl	100 <__aeabi_uldivmod>
   1c1cc:	4602      	mov	r2, r0
   1c1ce:	460b      	mov	r3, r1
   1c1d0:	f108 0018 	add.w	r0, r8, #24
   1c1d4:	4649      	mov	r1, r9
   1c1d6:	f000 ff07 	bl	1cfe8 <z_add_timeout>
   1c1da:	e7f0      	b.n	1c1be <z_init_static_threads+0x8e>
   1c1dc:	0002159c 	.word	0x0002159c
   1c1e0:	0002159c 	.word	0x0002159c
   1c1e4:	00020d8b 	.word	0x00020d8b

0001c1e8 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1c1e8:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   1c1ea:	4c0b      	ldr	r4, [pc, #44]	; (1c218 <idle+0x30>)
	return !z_sys_post_kernel;
   1c1ec:	4d0b      	ldr	r5, [pc, #44]	; (1c21c <idle+0x34>)
	__asm__ volatile(
   1c1ee:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c1f2:	f3ef 8311 	mrs	r3, BASEPRI
   1c1f6:	f382 8812 	msr	BASEPRI_MAX, r2
   1c1fa:	f3bf 8f6f 	isb	sy
   1c1fe:	f004 fead 	bl	20f5c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1c202:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   1c204:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   1c206:	b913      	cbnz	r3, 1c20e <idle+0x26>
	arch_cpu_idle();
   1c208:	f7f6 f9e8 	bl	125dc <arch_cpu_idle>
}
   1c20c:	e7ef      	b.n	1c1ee <idle+0x6>
   1c20e:	f7f6 f8b3 	bl	12378 <pm_system_suspend>
   1c212:	2800      	cmp	r0, #0
   1c214:	d1eb      	bne.n	1c1ee <idle+0x6>
   1c216:	e7f7      	b.n	1c208 <idle+0x20>
   1c218:	20002908 	.word	0x20002908
   1c21c:	20002f3a 	.word	0x20002f3a

0001c220 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1c220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c224:	4604      	mov	r4, r0
   1c226:	4617      	mov	r7, r2
   1c228:	461e      	mov	r6, r3
   1c22a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c22e:	f3ef 8811 	mrs	r8, BASEPRI
   1c232:	f383 8812 	msr	BASEPRI_MAX, r3
   1c236:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1c23a:	68c3      	ldr	r3, [r0, #12]
   1c23c:	4a33      	ldr	r2, [pc, #204]	; (1c30c <z_impl_k_mutex_lock+0xec>)
   1c23e:	b17b      	cbz	r3, 1c260 <z_impl_k_mutex_lock+0x40>
   1c240:	6880      	ldr	r0, [r0, #8]
   1c242:	6891      	ldr	r1, [r2, #8]
   1c244:	4288      	cmp	r0, r1
   1c246:	d019      	beq.n	1c27c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1c248:	ea57 0306 	orrs.w	r3, r7, r6
   1c24c:	d118      	bne.n	1c280 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1c24e:	f388 8811 	msr	BASEPRI, r8
   1c252:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1c256:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1c25a:	b002      	add	sp, #8
   1c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1c260:	6891      	ldr	r1, [r2, #8]
   1c262:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1c266:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1c268:	3301      	adds	r3, #1
   1c26a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1c26c:	6893      	ldr	r3, [r2, #8]
   1c26e:	60a3      	str	r3, [r4, #8]
   1c270:	f388 8811 	msr	BASEPRI, r8
   1c274:	f3bf 8f6f 	isb	sy
		return 0;
   1c278:	2000      	movs	r0, #0
   1c27a:	e7ee      	b.n	1c25a <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
   1c27c:	6921      	ldr	r1, [r4, #16]
   1c27e:	e7f2      	b.n	1c266 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1c280:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1c284:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   1c288:	4299      	cmp	r1, r3
   1c28a:	bfa8      	it	ge
   1c28c:	4619      	movge	r1, r3
   1c28e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1c292:	4291      	cmp	r1, r2
   1c294:	bfb8      	it	lt
   1c296:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1c298:	428b      	cmp	r3, r1
   1c29a:	dd2e      	ble.n	1c2fa <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1c29c:	f004 fb9f 	bl	209de <adjust_owner_prio.isra.0>
   1c2a0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1c2a2:	e9cd 7600 	strd	r7, r6, [sp]
   1c2a6:	481a      	ldr	r0, [pc, #104]	; (1c310 <z_impl_k_mutex_lock+0xf0>)
   1c2a8:	4622      	mov	r2, r4
   1c2aa:	4641      	mov	r1, r8
   1c2ac:	f000 fc04 	bl	1cab8 <z_pend_curr>
	if (got_mutex == 0) {
   1c2b0:	2800      	cmp	r0, #0
   1c2b2:	d0e1      	beq.n	1c278 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
   1c2b4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c2b8:	f3ef 8611 	mrs	r6, BASEPRI
   1c2bc:	f383 8812 	msr	BASEPRI_MAX, r3
   1c2c0:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
   1c2c4:	68a0      	ldr	r0, [r4, #8]
   1c2c6:	b1d0      	cbz	r0, 1c2fe <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1c2c8:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1c2ca:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c2cc:	429c      	cmp	r4, r3
   1c2ce:	d00a      	beq.n	1c2e6 <z_impl_k_mutex_lock+0xc6>
   1c2d0:	b14b      	cbz	r3, 1c2e6 <z_impl_k_mutex_lock+0xc6>
   1c2d2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1c2d6:	4299      	cmp	r1, r3
   1c2d8:	bfa8      	it	ge
   1c2da:	4619      	movge	r1, r3
   1c2dc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1c2e0:	4299      	cmp	r1, r3
   1c2e2:	bfb8      	it	lt
   1c2e4:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
   1c2e6:	f004 fb7a 	bl	209de <adjust_owner_prio.isra.0>
   1c2ea:	b140      	cbz	r0, 1c2fe <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1c2ec:	4808      	ldr	r0, [pc, #32]	; (1c310 <z_impl_k_mutex_lock+0xf0>)
   1c2ee:	4631      	mov	r1, r6
   1c2f0:	f000 fc46 	bl	1cb80 <z_reschedule>
	return -EAGAIN;
   1c2f4:	f06f 000a 	mvn.w	r0, #10
   1c2f8:	e7af      	b.n	1c25a <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
   1c2fa:	2500      	movs	r5, #0
   1c2fc:	e7d1      	b.n	1c2a2 <z_impl_k_mutex_lock+0x82>
	if (resched) {
   1c2fe:	2d00      	cmp	r5, #0
   1c300:	d1f4      	bne.n	1c2ec <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
   1c302:	f386 8811 	msr	BASEPRI, r6
   1c306:	f3bf 8f6f 	isb	sy
   1c30a:	e7f3      	b.n	1c2f4 <z_impl_k_mutex_lock+0xd4>
   1c30c:	20002908 	.word	0x20002908
   1c310:	20002f3b 	.word	0x20002f3b

0001c314 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1c314:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1c316:	6883      	ldr	r3, [r0, #8]
{
   1c318:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1c31a:	b36b      	cbz	r3, 1c378 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1c31c:	4a19      	ldr	r2, [pc, #100]	; (1c384 <z_impl_k_mutex_unlock+0x70>)
   1c31e:	6892      	ldr	r2, [r2, #8]
   1c320:	4293      	cmp	r3, r2
   1c322:	d12c      	bne.n	1c37e <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1c324:	68c3      	ldr	r3, [r0, #12]
   1c326:	2b01      	cmp	r3, #1
   1c328:	d903      	bls.n	1c332 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
   1c32a:	3b01      	subs	r3, #1
   1c32c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
   1c32e:	2000      	movs	r0, #0
}
   1c330:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1c332:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c336:	f3ef 8511 	mrs	r5, BASEPRI
   1c33a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c33e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1c342:	6901      	ldr	r1, [r0, #16]
   1c344:	6880      	ldr	r0, [r0, #8]
   1c346:	f004 fb4a 	bl	209de <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1c34a:	4620      	mov	r0, r4
   1c34c:	f004 fd77 	bl	20e3e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1c350:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1c352:	b158      	cbz	r0, 1c36c <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
   1c354:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1c358:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1c35a:	2200      	movs	r2, #0
   1c35c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1c35e:	f004 fd5e 	bl	20e1e <z_ready_thread>
		z_reschedule(&lock, key);
   1c362:	4809      	ldr	r0, [pc, #36]	; (1c388 <z_impl_k_mutex_unlock+0x74>)
   1c364:	4629      	mov	r1, r5
   1c366:	f000 fc0b 	bl	1cb80 <z_reschedule>
   1c36a:	e7e0      	b.n	1c32e <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
   1c36c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1c36e:	f385 8811 	msr	BASEPRI, r5
   1c372:	f3bf 8f6f 	isb	sy
   1c376:	e7da      	b.n	1c32e <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
   1c378:	f06f 0015 	mvn.w	r0, #21
   1c37c:	e7d8      	b.n	1c330 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
   1c37e:	f04f 30ff 	mov.w	r0, #4294967295
   1c382:	e7d5      	b.n	1c330 <z_impl_k_mutex_unlock+0x1c>
   1c384:	20002908 	.word	0x20002908
   1c388:	20002f3b 	.word	0x20002f3b

0001c38c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1c38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c38e:	4611      	mov	r1, r2
	__asm__ volatile(
   1c390:	f04f 0240 	mov.w	r2, #64	; 0x40
   1c394:	f3ef 8511 	mrs	r5, BASEPRI
   1c398:	f382 8812 	msr	BASEPRI_MAX, r2
   1c39c:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1c3a0:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1c3a2:	b19c      	cbz	r4, 1c3cc <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c3a4:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c3a6:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1c3a8:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1c3ac:	4294      	cmp	r4, r2
	list->head = node;
   1c3ae:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1c3b0:	bf08      	it	eq
   1c3b2:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1c3b4:	2101      	movs	r1, #1
   1c3b6:	4620      	mov	r0, r4
   1c3b8:	f004 fb86 	bl	20ac8 <z_queue_node_peek>
   1c3bc:	4604      	mov	r4, r0
	__asm__ volatile(
   1c3be:	f385 8811 	msr	BASEPRI, r5
   1c3c2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1c3c6:	4620      	mov	r0, r4
   1c3c8:	b003      	add	sp, #12
   1c3ca:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c3cc:	ea51 0203 	orrs.w	r2, r1, r3
   1c3d0:	d0f5      	beq.n	1c3be <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1c3d2:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1c3d6:	e9cd 1300 	strd	r1, r3, [sp]
   1c3da:	4610      	mov	r0, r2
   1c3dc:	4629      	mov	r1, r5
   1c3de:	f000 fb6b 	bl	1cab8 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1c3e2:	2800      	cmp	r0, #0
   1c3e4:	d1ef      	bne.n	1c3c6 <z_impl_k_queue_get+0x3a>
   1c3e6:	4b02      	ldr	r3, [pc, #8]	; (1c3f0 <z_impl_k_queue_get+0x64>)
   1c3e8:	689b      	ldr	r3, [r3, #8]
   1c3ea:	695c      	ldr	r4, [r3, #20]
   1c3ec:	e7eb      	b.n	1c3c6 <z_impl_k_queue_get+0x3a>
   1c3ee:	bf00      	nop
   1c3f0:	20002908 	.word	0x20002908

0001c3f4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1c3f4:	b538      	push	{r3, r4, r5, lr}
   1c3f6:	4604      	mov	r4, r0
	__asm__ volatile(
   1c3f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c3fc:	f3ef 8511 	mrs	r5, BASEPRI
   1c400:	f383 8812 	msr	BASEPRI_MAX, r3
   1c404:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1c408:	f004 fd19 	bl	20e3e <z_unpend_first_thread>

	if (thread != NULL) {
   1c40c:	b148      	cbz	r0, 1c422 <z_impl_k_sem_give+0x2e>
   1c40e:	2200      	movs	r2, #0
   1c410:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1c412:	f004 fd04 	bl	20e1e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1c416:	4629      	mov	r1, r5
   1c418:	4808      	ldr	r0, [pc, #32]	; (1c43c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1c41a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1c41e:	f000 bbaf 	b.w	1cb80 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1c422:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1c426:	429a      	cmp	r2, r3
   1c428:	bf18      	it	ne
   1c42a:	3301      	addne	r3, #1
   1c42c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1c42e:	2102      	movs	r1, #2
   1c430:	f104 0010 	add.w	r0, r4, #16
   1c434:	f004 ff28 	bl	21288 <z_handle_obj_poll_events>
}
   1c438:	e7ed      	b.n	1c416 <z_impl_k_sem_give+0x22>
   1c43a:	bf00      	nop
   1c43c:	20002f3b 	.word	0x20002f3b

0001c440 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1c440:	b513      	push	{r0, r1, r4, lr}
   1c442:	f04f 0440 	mov.w	r4, #64	; 0x40
   1c446:	f3ef 8111 	mrs	r1, BASEPRI
   1c44a:	f384 8812 	msr	BASEPRI_MAX, r4
   1c44e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1c452:	6884      	ldr	r4, [r0, #8]
   1c454:	b144      	cbz	r4, 1c468 <z_impl_k_sem_take+0x28>
		sem->count--;
   1c456:	3c01      	subs	r4, #1
   1c458:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1c45a:	f381 8811 	msr	BASEPRI, r1
   1c45e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1c462:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1c464:	b002      	add	sp, #8
   1c466:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c468:	ea52 0403 	orrs.w	r4, r2, r3
   1c46c:	d106      	bne.n	1c47c <z_impl_k_sem_take+0x3c>
   1c46e:	f381 8811 	msr	BASEPRI, r1
   1c472:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1c476:	f06f 000f 	mvn.w	r0, #15
   1c47a:	e7f3      	b.n	1c464 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1c47c:	e9cd 2300 	strd	r2, r3, [sp]
   1c480:	4602      	mov	r2, r0
   1c482:	4802      	ldr	r0, [pc, #8]	; (1c48c <z_impl_k_sem_take+0x4c>)
   1c484:	f000 fb18 	bl	1cab8 <z_pend_curr>
	return ret;
   1c488:	e7ec      	b.n	1c464 <z_impl_k_sem_take+0x24>
   1c48a:	bf00      	nop
   1c48c:	20002f3b 	.word	0x20002f3b

0001c490 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1c490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1c492:	4b09      	ldr	r3, [pc, #36]	; (1c4b8 <k_sys_work_q_init+0x28>)
   1c494:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1c496:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1c498:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1c49a:	9300      	str	r3, [sp, #0]
   1c49c:	4907      	ldr	r1, [pc, #28]	; (1c4bc <k_sys_work_q_init+0x2c>)
   1c49e:	4808      	ldr	r0, [pc, #32]	; (1c4c0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1c4a0:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1c4a4:	f04f 33ff 	mov.w	r3, #4294967295
   1c4a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1c4ac:	f000 f924 	bl	1c6f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	b004      	add	sp, #16
   1c4b4:	bd10      	pop	{r4, pc}
   1c4b6:	bf00      	nop
   1c4b8:	00023bf3 	.word	0x00023bf3
   1c4bc:	200057c0 	.word	0x200057c0
   1c4c0:	20002418 	.word	0x20002418

0001c4c4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1c4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1c4c8:	4e4a      	ldr	r6, [pc, #296]	; (1c5f4 <work_queue_main+0x130>)
   1c4ca:	b085      	sub	sp, #20
   1c4cc:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1c4ce:	f04f 38ff 	mov.w	r8, #4294967295
   1c4d2:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
   1c4d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c4da:	f3ef 8711 	mrs	r7, BASEPRI
   1c4de:	f383 8812 	msr	BASEPRI_MAX, r3
   1c4e2:	f3bf 8f6f 	isb	sy
   1c4e6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1c4ea:	b98d      	cbnz	r5, 1c510 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1c4ec:	2102      	movs	r1, #2
   1c4ee:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1c4f2:	f004 fb26 	bl	20b42 <flag_test_and_clear>
   1c4f6:	2800      	cmp	r0, #0
   1c4f8:	d143      	bne.n	1c582 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1c4fa:	2300      	movs	r3, #0
   1c4fc:	e9cd 8900 	strd	r8, r9, [sp]
   1c500:	9302      	str	r3, [sp, #8]
   1c502:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1c506:	4639      	mov	r1, r7
   1c508:	483b      	ldr	r0, [pc, #236]	; (1c5f8 <work_queue_main+0x134>)
   1c50a:	f000 fcf3 	bl	1cef4 <z_sched_wait>
			continue;
   1c50e:	e7e2      	b.n	1c4d6 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c510:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1c514:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1c516:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c51a:	4295      	cmp	r5, r2
	list->tail = node;
   1c51c:	bf08      	it	eq
   1c51e:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1c522:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c526:	f043 0302 	orr.w	r3, r3, #2
   1c52a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1c52e:	68eb      	ldr	r3, [r5, #12]
   1c530:	f023 0304 	bic.w	r3, r3, #4
   1c534:	f043 0301 	orr.w	r3, r3, #1
   1c538:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1c53a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1c53c:	f387 8811 	msr	BASEPRI, r7
   1c540:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   1c544:	4628      	mov	r0, r5
   1c546:	4798      	blx	r3
	__asm__ volatile(
   1c548:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c54c:	f3ef 8b11 	mrs	fp, BASEPRI
   1c550:	f383 8812 	msr	BASEPRI_MAX, r3
   1c554:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1c558:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c55a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1c55c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c560:	d419      	bmi.n	1c596 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
   1c562:	60ea      	str	r2, [r5, #12]
   1c564:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c568:	f023 0302 	bic.w	r3, r3, #2
   1c56c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1c570:	f38b 8811 	msr	BASEPRI, fp
   1c574:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   1c578:	05db      	lsls	r3, r3, #23
   1c57a:	d4ac      	bmi.n	1c4d6 <work_queue_main+0x12>
	z_impl_k_yield();
   1c57c:	f000 fb9e 	bl	1ccbc <z_impl_k_yield>
}
   1c580:	e7a9      	b.n	1c4d6 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1c582:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1c586:	2200      	movs	r2, #0
   1c588:	2101      	movs	r1, #1
   1c58a:	4628      	mov	r0, r5
   1c58c:	f004 fcad 	bl	20eea <z_sched_wake>
   1c590:	2800      	cmp	r0, #0
   1c592:	d1f8      	bne.n	1c586 <work_queue_main+0xc2>
   1c594:	e7b1      	b.n	1c4fa <work_queue_main+0x36>
	return list->head;
   1c596:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1c598:	f023 0303 	bic.w	r3, r3, #3
   1c59c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c59e:	2800      	cmp	r0, #0
   1c5a0:	d0e0      	beq.n	1c564 <work_queue_main+0xa0>
	return node->next;
   1c5a2:	2700      	movs	r7, #0
   1c5a4:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1c5a8:	463b      	mov	r3, r7
   1c5aa:	2800      	cmp	r0, #0
   1c5ac:	d0da      	beq.n	1c564 <work_queue_main+0xa0>
		if (wc->work == work) {
   1c5ae:	6842      	ldr	r2, [r0, #4]
   1c5b0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1c5b2:	4601      	mov	r1, r0
		if (wc->work == work) {
   1c5b4:	d10c      	bne.n	1c5d0 <work_queue_main+0x10c>
	return node->next;
   1c5b6:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c5b8:	b99f      	cbnz	r7, 1c5e2 <work_queue_main+0x11e>
   1c5ba:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1c5bc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c5be:	4282      	cmp	r2, r0
   1c5c0:	d100      	bne.n	1c5c4 <work_queue_main+0x100>
	list->tail = node;
   1c5c2:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1c5c4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1c5c8:	f7ff ff14 	bl	1c3f4 <z_impl_k_sem_give>
}
   1c5cc:	4639      	mov	r1, r7
   1c5ce:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1c5d0:	f1ba 0f00 	cmp.w	sl, #0
   1c5d4:	d00b      	beq.n	1c5ee <work_queue_main+0x12a>
	return node->next;
   1c5d6:	f8da 2000 	ldr.w	r2, [sl]
   1c5da:	4650      	mov	r0, sl
   1c5dc:	460f      	mov	r7, r1
   1c5de:	4692      	mov	sl, r2
   1c5e0:	e7e3      	b.n	1c5aa <work_queue_main+0xe6>
	parent->next = child;
   1c5e2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c5e4:	6872      	ldr	r2, [r6, #4]
   1c5e6:	4282      	cmp	r2, r0
	list->tail = node;
   1c5e8:	bf08      	it	eq
   1c5ea:	6077      	streq	r7, [r6, #4]
}
   1c5ec:	e7ea      	b.n	1c5c4 <work_queue_main+0x100>
   1c5ee:	4652      	mov	r2, sl
   1c5f0:	e7f3      	b.n	1c5da <work_queue_main+0x116>
   1c5f2:	bf00      	nop
   1c5f4:	20002930 	.word	0x20002930
   1c5f8:	20002f3b 	.word	0x20002f3b

0001c5fc <cancel_sync_locked>:
{
   1c5fc:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1c5fe:	68c3      	ldr	r3, [r0, #12]
   1c600:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1c604:	079b      	lsls	r3, r3, #30
{
   1c606:	4605      	mov	r5, r0
   1c608:	460c      	mov	r4, r1
	if (ret) {
   1c60a:	d50d      	bpl.n	1c628 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1c60c:	2201      	movs	r2, #1
   1c60e:	2100      	movs	r1, #0
   1c610:	f104 0008 	add.w	r0, r4, #8
   1c614:	f004 fa85 	bl	20b22 <z_impl_k_sem_init>
	parent->next = child;
   1c618:	2300      	movs	r3, #0
   1c61a:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c61c:	4b05      	ldr	r3, [pc, #20]	; (1c634 <cancel_sync_locked+0x38>)
	canceler->work = work;
   1c61e:	6065      	str	r5, [r4, #4]
   1c620:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1c622:	b91a      	cbnz	r2, 1c62c <cancel_sync_locked+0x30>
	list->head = node;
   1c624:	e9c3 4400 	strd	r4, r4, [r3]
}
   1c628:	4630      	mov	r0, r6
   1c62a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1c62c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1c62e:	605c      	str	r4, [r3, #4]
}
   1c630:	e7fa      	b.n	1c628 <cancel_sync_locked+0x2c>
   1c632:	bf00      	nop
   1c634:	20002930 	.word	0x20002930

0001c638 <submit_to_queue_locked>:
{
   1c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1c63a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c63c:	079a      	lsls	r2, r3, #30
{
   1c63e:	4604      	mov	r4, r0
   1c640:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1c642:	f3c3 0640 	ubfx	r6, r3, #1, #1
   1c646:	d42c      	bmi.n	1c6a2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1c648:	075b      	lsls	r3, r3, #29
   1c64a:	d41a      	bmi.n	1c682 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
   1c64c:	680b      	ldr	r3, [r1, #0]
   1c64e:	b90b      	cbnz	r3, 1c654 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1c650:	6883      	ldr	r3, [r0, #8]
   1c652:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
   1c654:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1c656:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
   1c658:	bf44      	itt	mi
   1c65a:	68a3      	ldrmi	r3, [r4, #8]
   1c65c:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
   1c65e:	683d      	ldr	r5, [r7, #0]
			ret = 2;
   1c660:	bf4c      	ite	mi
   1c662:	2602      	movmi	r6, #2
		ret = 1;
   1c664:	2601      	movpl	r6, #1
	if (queue == NULL) {
   1c666:	2d00      	cmp	r5, #0
   1c668:	d03a      	beq.n	1c6e0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c66a:	4b1f      	ldr	r3, [pc, #124]	; (1c6e8 <submit_to_queue_locked+0xb0>)
   1c66c:	689b      	ldr	r3, [r3, #8]
   1c66e:	42ab      	cmp	r3, r5
   1c670:	d00a      	beq.n	1c688 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
   1c672:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c676:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1c678:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c67c:	d414      	bmi.n	1c6a8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
   1c67e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
   1c682:	2300      	movs	r3, #0
   1c684:	603b      	str	r3, [r7, #0]
	return ret;
   1c686:	e025      	b.n	1c6d4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1c688:	f004 f995 	bl	209b6 <k_is_in_isr>
   1c68c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
   1c690:	2800      	cmp	r0, #0
   1c692:	d1f0      	bne.n	1c676 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c694:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1c696:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1c69a:	d5f0      	bpl.n	1c67e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
   1c69c:	b152      	cbz	r2, 1c6b4 <submit_to_queue_locked+0x7c>
   1c69e:	075b      	lsls	r3, r3, #29
   1c6a0:	d408      	bmi.n	1c6b4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
   1c6a2:	f06f 060f 	mvn.w	r6, #15
   1c6a6:	e7ec      	b.n	1c682 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
   1c6a8:	2a00      	cmp	r2, #0
   1c6aa:	d1fa      	bne.n	1c6a2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
   1c6ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
   1c6b0:	2b00      	cmp	r3, #0
   1c6b2:	d1f6      	bne.n	1c6a2 <submit_to_queue_locked+0x6a>
	parent->next = child;
   1c6b4:	2300      	movs	r3, #0
   1c6b6:	6023      	str	r3, [r4, #0]
	return list->tail;
   1c6b8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1c6bc:	b963      	cbnz	r3, 1c6d8 <submit_to_queue_locked+0xa0>
	list->head = node;
   1c6be:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1c6c2:	4628      	mov	r0, r5
   1c6c4:	f004 fa56 	bl	20b74 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1c6c8:	68e3      	ldr	r3, [r4, #12]
   1c6ca:	f043 0304 	orr.w	r3, r3, #4
   1c6ce:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1c6d0:	683b      	ldr	r3, [r7, #0]
   1c6d2:	60a3      	str	r3, [r4, #8]
}
   1c6d4:	4630      	mov	r0, r6
   1c6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1c6d8:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1c6da:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
   1c6de:	e7f0      	b.n	1c6c2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
   1c6e0:	f06f 0615 	mvn.w	r6, #21
   1c6e4:	e7cd      	b.n	1c682 <submit_to_queue_locked+0x4a>
   1c6e6:	bf00      	nop
   1c6e8:	20002908 	.word	0x20002908

0001c6ec <k_work_submit>:
{
   1c6ec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1c6ee:	4801      	ldr	r0, [pc, #4]	; (1c6f4 <k_work_submit+0x8>)
   1c6f0:	f004 bac6 	b.w	20c80 <k_work_submit_to_queue>
   1c6f4:	20002418 	.word	0x20002418

0001c6f8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1c6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6fa:	b089      	sub	sp, #36	; 0x24
   1c6fc:	4604      	mov	r4, r0
	list->head = NULL;
   1c6fe:	2000      	movs	r0, #0
	list->tail = NULL;
   1c700:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1c704:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1c706:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1c70a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1c70e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1c712:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1c716:	b31d      	cbz	r5, 1c760 <k_work_queue_start+0x68>
   1c718:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1c71a:	2800      	cmp	r0, #0
   1c71c:	f240 1001 	movw	r0, #257	; 0x101
   1c720:	bf08      	it	eq
   1c722:	2001      	moveq	r0, #1
	*flagp = flags;
   1c724:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1c728:	2000      	movs	r0, #0
   1c72a:	f04f 36ff 	mov.w	r6, #4294967295
   1c72e:	f04f 37ff 	mov.w	r7, #4294967295
   1c732:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1c736:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1c73a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1c73e:	4b09      	ldr	r3, [pc, #36]	; (1c764 <k_work_queue_start+0x6c>)
   1c740:	9400      	str	r4, [sp, #0]
   1c742:	4620      	mov	r0, r4
   1c744:	f7ff fcc8 	bl	1c0d8 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1c748:	b125      	cbz	r5, 1c754 <k_work_queue_start+0x5c>
   1c74a:	6829      	ldr	r1, [r5, #0]
   1c74c:	b111      	cbz	r1, 1c754 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1c74e:	4620      	mov	r0, r4
   1c750:	f004 f937 	bl	209c2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1c754:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1c756:	b009      	add	sp, #36	; 0x24
   1c758:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c75c:	f004 b936 	b.w	209cc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1c760:	2001      	movs	r0, #1
   1c762:	e7df      	b.n	1c724 <k_work_queue_start+0x2c>
   1c764:	0001c4c5 	.word	0x0001c4c5

0001c768 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1c768:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c76a:	9001      	str	r0, [sp, #4]
   1c76c:	4608      	mov	r0, r1
	__asm__ volatile(
   1c76e:	f04f 0140 	mov.w	r1, #64	; 0x40
   1c772:	f3ef 8411 	mrs	r4, BASEPRI
   1c776:	f381 8812 	msr	BASEPRI_MAX, r1
   1c77a:	f3bf 8f6f 	isb	sy
	return *flagp;
   1c77e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1c780:	f011 0f0e 	tst.w	r1, #14
   1c784:	d116      	bne.n	1c7b4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c786:	ea53 0502 	orrs.w	r5, r3, r2
   1c78a:	d108      	bne.n	1c79e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1c78c:	a901      	add	r1, sp, #4
   1c78e:	f7ff ff53 	bl	1c638 <submit_to_queue_locked>
	__asm__ volatile(
   1c792:	f384 8811 	msr	BASEPRI, r4
   1c796:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1c79a:	b003      	add	sp, #12
   1c79c:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
   1c79e:	f041 0108 	orr.w	r1, r1, #8
   1c7a2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1c7a4:	9901      	ldr	r1, [sp, #4]
   1c7a6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1c7a8:	3010      	adds	r0, #16
   1c7aa:	4903      	ldr	r1, [pc, #12]	; (1c7b8 <k_work_schedule_for_queue+0x50>)
   1c7ac:	f000 fc1c 	bl	1cfe8 <z_add_timeout>
	return ret;
   1c7b0:	2001      	movs	r0, #1
   1c7b2:	e7ee      	b.n	1c792 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1c7b4:	2000      	movs	r0, #0
   1c7b6:	e7ec      	b.n	1c792 <k_work_schedule_for_queue+0x2a>
   1c7b8:	00020be9 	.word	0x00020be9

0001c7bc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1c7bc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1c7be:	4801      	ldr	r0, [pc, #4]	; (1c7c4 <k_work_schedule+0x8>)
   1c7c0:	f7ff bfd2 	b.w	1c768 <k_work_schedule_for_queue>
   1c7c4:	20002418 	.word	0x20002418

0001c7c8 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1c7c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c7ca:	460c      	mov	r4, r1
   1c7cc:	9001      	str	r0, [sp, #4]
   1c7ce:	4616      	mov	r6, r2
   1c7d0:	461d      	mov	r5, r3
	__asm__ volatile(
   1c7d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c7d6:	f3ef 8711 	mrs	r7, BASEPRI
   1c7da:	f383 8812 	msr	BASEPRI_MAX, r3
   1c7de:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1c7e2:	4608      	mov	r0, r1
   1c7e4:	f004 f9b8 	bl	20b58 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c7e8:	ea55 0306 	orrs.w	r3, r5, r6
   1c7ec:	d109      	bne.n	1c802 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1c7ee:	a901      	add	r1, sp, #4
   1c7f0:	4620      	mov	r0, r4
   1c7f2:	f7ff ff21 	bl	1c638 <submit_to_queue_locked>
	__asm__ volatile(
   1c7f6:	f387 8811 	msr	BASEPRI, r7
   1c7fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1c7fe:	b003      	add	sp, #12
   1c800:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1c802:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1c804:	4906      	ldr	r1, [pc, #24]	; (1c820 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1c806:	f043 0308 	orr.w	r3, r3, #8
   1c80a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1c80c:	9b01      	ldr	r3, [sp, #4]
   1c80e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1c810:	f104 0010 	add.w	r0, r4, #16
   1c814:	4632      	mov	r2, r6
   1c816:	462b      	mov	r3, r5
   1c818:	f000 fbe6 	bl	1cfe8 <z_add_timeout>
	return ret;
   1c81c:	2001      	movs	r0, #1
   1c81e:	e7ea      	b.n	1c7f6 <k_work_reschedule_for_queue+0x2e>
   1c820:	00020be9 	.word	0x00020be9

0001c824 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1c824:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1c826:	4801      	ldr	r0, [pc, #4]	; (1c82c <k_work_reschedule+0x8>)
   1c828:	f7ff bfce 	b.w	1c7c8 <k_work_reschedule_for_queue>
   1c82c:	20002418 	.word	0x20002418

0001c830 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
   1c830:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
   1c832:	4d07      	ldr	r5, [pc, #28]	; (1c850 <z_reset_time_slice+0x20>)
   1c834:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
   1c836:	b154      	cbz	r4, 1c84e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
   1c838:	f7fd fbd8 	bl	19fec <sys_clock_elapsed>
   1c83c:	4b05      	ldr	r3, [pc, #20]	; (1c854 <z_reset_time_slice+0x24>)
   1c83e:	4404      	add	r4, r0
   1c840:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
   1c842:	6828      	ldr	r0, [r5, #0]
   1c844:	2100      	movs	r1, #0
	}
}
   1c846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
   1c84a:	f004 bb97 	b.w	20f7c <z_set_timeout_expiry>
}
   1c84e:	bd38      	pop	{r3, r4, r5, pc}
   1c850:	20002940 	.word	0x20002940
   1c854:	20002908 	.word	0x20002908

0001c858 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
   1c858:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   1c85a:	4d0d      	ldr	r5, [pc, #52]	; (1c890 <update_cache+0x38>)
   1c85c:	462b      	mov	r3, r5
   1c85e:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c862:	429c      	cmp	r4, r3
   1c864:	d000      	beq.n	1c868 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1c866:	b904      	cbnz	r4, 1c86a <update_cache+0x12>
   1c868:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1c86a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1c86c:	b938      	cbnz	r0, 1c87e <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
   1c86e:	7b5a      	ldrb	r2, [r3, #13]
   1c870:	06d2      	lsls	r2, r2, #27
   1c872:	d104      	bne.n	1c87e <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1c874:	69a2      	ldr	r2, [r4, #24]
   1c876:	b912      	cbnz	r2, 1c87e <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
   1c878:	89da      	ldrh	r2, [r3, #14]
   1c87a:	2a7f      	cmp	r2, #127	; 0x7f
   1c87c:	d805      	bhi.n	1c88a <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
   1c87e:	429c      	cmp	r4, r3
   1c880:	d002      	beq.n	1c888 <update_cache+0x30>
			z_reset_time_slice(thread);
   1c882:	4620      	mov	r0, r4
   1c884:	f7ff ffd4 	bl	1c830 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
   1c888:	4623      	mov	r3, r4
   1c88a:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
   1c88c:	bd38      	pop	{r3, r4, r5, pc}
   1c88e:	bf00      	nop
   1c890:	20002908 	.word	0x20002908

0001c894 <move_thread_to_end_of_prio_q>:
{
   1c894:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1c896:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1c89a:	7b43      	ldrb	r3, [r0, #13]
   1c89c:	2a00      	cmp	r2, #0
{
   1c89e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c8a0:	da04      	bge.n	1c8ac <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c8a6:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1c8a8:	f004 fa54 	bl	20d54 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1c8ac:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1c8ae:	4a15      	ldr	r2, [pc, #84]	; (1c904 <move_thread_to_end_of_prio_q+0x70>)
   1c8b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c8b4:	4610      	mov	r0, r2
   1c8b6:	734b      	strb	r3, [r1, #13]
   1c8b8:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1c8bc:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c8be:	4283      	cmp	r3, r0
   1c8c0:	bf08      	it	eq
   1c8c2:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c8c4:	b923      	cbnz	r3, 1c8d0 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
   1c8c6:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
   1c8ca:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1c8cc:	6251      	str	r1, [r2, #36]	; 0x24
}
   1c8ce:	e00c      	b.n	1c8ea <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
   1c8d0:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1c8d4:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1c8d8:	42b5      	cmp	r5, r6
   1c8da:	d00e      	beq.n	1c8fa <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c8dc:	42ae      	cmp	r6, r5
   1c8de:	dd0c      	ble.n	1c8fa <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1c8e0:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1c8e2:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1c8e6:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1c8e8:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1c8ea:	6890      	ldr	r0, [r2, #8]
   1c8ec:	1a43      	subs	r3, r0, r1
   1c8ee:	4258      	negs	r0, r3
}
   1c8f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1c8f4:	4158      	adcs	r0, r3
   1c8f6:	f7ff bfaf 	b.w	1c858 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c8fa:	429c      	cmp	r4, r3
   1c8fc:	d0e3      	beq.n	1c8c6 <move_thread_to_end_of_prio_q+0x32>
   1c8fe:	681b      	ldr	r3, [r3, #0]
   1c900:	e7e0      	b.n	1c8c4 <move_thread_to_end_of_prio_q+0x30>
   1c902:	bf00      	nop
   1c904:	20002908 	.word	0x20002908

0001c908 <ready_thread>:
{
   1c908:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1c90a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1c90e:	7b42      	ldrb	r2, [r0, #13]
   1c910:	2b00      	cmp	r3, #0
   1c912:	db29      	blt.n	1c968 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1c914:	06d3      	lsls	r3, r2, #27
   1c916:	d127      	bne.n	1c968 <ready_thread+0x60>
	return node->next != NULL;
   1c918:	6983      	ldr	r3, [r0, #24]
   1c91a:	bb2b      	cbnz	r3, 1c968 <ready_thread+0x60>
	return list->head == list;
   1c91c:	4913      	ldr	r1, [pc, #76]	; (1c96c <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1c91e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1c922:	7342      	strb	r2, [r0, #13]
   1c924:	460a      	mov	r2, r1
   1c926:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c92a:	4294      	cmp	r4, r2
   1c92c:	bf18      	it	ne
   1c92e:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
   1c930:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1c932:	b923      	cbnz	r3, 1c93e <ready_thread+0x36>
	node->prev = tail;
   1c934:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
   1c938:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1c93a:	6248      	str	r0, [r1, #36]	; 0x24
}
   1c93c:	e00c      	b.n	1c958 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
   1c93e:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1c942:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
   1c946:	42b5      	cmp	r5, r6
   1c948:	d00a      	beq.n	1c960 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1c94a:	42ae      	cmp	r6, r5
   1c94c:	dd08      	ble.n	1c960 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
   1c94e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1c950:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1c954:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1c956:	6058      	str	r0, [r3, #4]
}
   1c958:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1c95a:	2000      	movs	r0, #0
   1c95c:	f7ff bf7c 	b.w	1c858 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1c960:	42a3      	cmp	r3, r4
   1c962:	d0e7      	beq.n	1c934 <ready_thread+0x2c>
   1c964:	681b      	ldr	r3, [r3, #0]
   1c966:	e7e4      	b.n	1c932 <ready_thread+0x2a>
}
   1c968:	bc70      	pop	{r4, r5, r6}
   1c96a:	4770      	bx	lr
   1c96c:	20002908 	.word	0x20002908

0001c970 <unready_thread>:
{
   1c970:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1c972:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1c976:	7b43      	ldrb	r3, [r0, #13]
   1c978:	2a00      	cmp	r2, #0
{
   1c97a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1c97c:	da04      	bge.n	1c988 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1c97e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1c982:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1c984:	f004 f9e6 	bl	20d54 <sys_dlist_remove>
	update_cache(thread == _current);
   1c988:	4b04      	ldr	r3, [pc, #16]	; (1c99c <unready_thread+0x2c>)
   1c98a:	6898      	ldr	r0, [r3, #8]
   1c98c:	1a43      	subs	r3, r0, r1
   1c98e:	4258      	negs	r0, r3
   1c990:	4158      	adcs	r0, r3
}
   1c992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1c996:	f7ff bf5f 	b.w	1c858 <update_cache>
   1c99a:	bf00      	nop
   1c99c:	20002908 	.word	0x20002908

0001c9a0 <pend_locked>:
{
   1c9a0:	b570      	push	{r4, r5, r6, lr}
   1c9a2:	4615      	mov	r5, r2
   1c9a4:	461c      	mov	r4, r3
   1c9a6:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
   1c9a8:	f004 fa11 	bl	20dce <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c9ac:	f1b4 3fff 	cmp.w	r4, #4294967295
   1c9b0:	bf08      	it	eq
   1c9b2:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   1c9b6:	d008      	beq.n	1c9ca <pend_locked+0x2a>
   1c9b8:	462a      	mov	r2, r5
   1c9ba:	4623      	mov	r3, r4
   1c9bc:	f106 0018 	add.w	r0, r6, #24
   1c9c0:	4902      	ldr	r1, [pc, #8]	; (1c9cc <pend_locked+0x2c>)
}
   1c9c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c9c6:	f000 bb0f 	b.w	1cfe8 <z_add_timeout>
   1c9ca:	bd70      	pop	{r4, r5, r6, pc}
   1c9cc:	00020d8b 	.word	0x00020d8b

0001c9d0 <k_sched_time_slice_set>:
{
   1c9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c9d2:	4604      	mov	r4, r0
   1c9d4:	460d      	mov	r5, r1
	__asm__ volatile(
   1c9d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   1c9da:	f3ef 8711 	mrs	r7, BASEPRI
   1c9de:	f383 8812 	msr	BASEPRI_MAX, r3
   1c9e2:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
   1c9e6:	2600      	movs	r6, #0
   1c9e8:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   1c9ec:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c9f0:	4631      	mov	r1, r6
   1c9f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c9f6:	2300      	movs	r3, #0
   1c9f8:	fbe4 010c 	umlal	r0, r1, r4, ip
   1c9fc:	f7e3 fb80 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ca00:	42b4      	cmp	r4, r6
   1ca02:	dd02      	ble.n	1ca0a <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
   1ca04:	2802      	cmp	r0, #2
   1ca06:	bfb8      	it	lt
   1ca08:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1ca0a:	4a07      	ldr	r2, [pc, #28]	; (1ca28 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
   1ca0c:	4b07      	ldr	r3, [pc, #28]	; (1ca2c <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
   1ca0e:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
   1ca10:	4a07      	ldr	r2, [pc, #28]	; (1ca30 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
   1ca12:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
   1ca14:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
   1ca16:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
   1ca18:	f7ff ff0a 	bl	1c830 <z_reset_time_slice>
	__asm__ volatile(
   1ca1c:	f387 8811 	msr	BASEPRI, r7
   1ca20:	f3bf 8f6f 	isb	sy
}
   1ca24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ca26:	bf00      	nop
   1ca28:	20002940 	.word	0x20002940
   1ca2c:	20002908 	.word	0x20002908
   1ca30:	2000293c 	.word	0x2000293c

0001ca34 <z_time_slice>:
{
   1ca34:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ca36:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ca3a:	f3ef 8511 	mrs	r5, BASEPRI
   1ca3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ca42:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1ca46:	4b17      	ldr	r3, [pc, #92]	; (1caa4 <z_time_slice+0x70>)
   1ca48:	4a17      	ldr	r2, [pc, #92]	; (1caa8 <z_time_slice+0x74>)
   1ca4a:	689c      	ldr	r4, [r3, #8]
   1ca4c:	6811      	ldr	r1, [r2, #0]
   1ca4e:	428c      	cmp	r4, r1
   1ca50:	d107      	bne.n	1ca62 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
   1ca52:	4620      	mov	r0, r4
   1ca54:	f7ff feec 	bl	1c830 <z_reset_time_slice>
	__asm__ volatile(
   1ca58:	f385 8811 	msr	BASEPRI, r5
   1ca5c:	f3bf 8f6f 	isb	sy
}
   1ca60:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1ca62:	2100      	movs	r1, #0
   1ca64:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
   1ca66:	4a11      	ldr	r2, [pc, #68]	; (1caac <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
   1ca68:	6812      	ldr	r2, [r2, #0]
   1ca6a:	b1c2      	cbz	r2, 1ca9e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ca6c:	89e2      	ldrh	r2, [r4, #14]
   1ca6e:	2a7f      	cmp	r2, #127	; 0x7f
   1ca70:	d815      	bhi.n	1ca9e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1ca72:	7b62      	ldrb	r2, [r4, #13]
   1ca74:	06d2      	lsls	r2, r2, #27
   1ca76:	d112      	bne.n	1ca9e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1ca78:	4a0d      	ldr	r2, [pc, #52]	; (1cab0 <z_time_slice+0x7c>)
   1ca7a:	f994 100e 	ldrsb.w	r1, [r4, #14]
   1ca7e:	6812      	ldr	r2, [r2, #0]
   1ca80:	4291      	cmp	r1, r2
   1ca82:	db0c      	blt.n	1ca9e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1ca84:	4a0b      	ldr	r2, [pc, #44]	; (1cab4 <z_time_slice+0x80>)
   1ca86:	4294      	cmp	r4, r2
   1ca88:	d009      	beq.n	1ca9e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1ca8a:	691a      	ldr	r2, [r3, #16]
   1ca8c:	4282      	cmp	r2, r0
   1ca8e:	dc03      	bgt.n	1ca98 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
   1ca90:	4620      	mov	r0, r4
   1ca92:	f7ff feff 	bl	1c894 <move_thread_to_end_of_prio_q>
   1ca96:	e7dc      	b.n	1ca52 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
   1ca98:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
   1ca9a:	611a      	str	r2, [r3, #16]
   1ca9c:	e7dc      	b.n	1ca58 <z_time_slice+0x24>
   1ca9e:	2200      	movs	r2, #0
   1caa0:	e7fb      	b.n	1ca9a <z_time_slice+0x66>
   1caa2:	bf00      	nop
   1caa4:	20002908 	.word	0x20002908
   1caa8:	20002938 	.word	0x20002938
   1caac:	20002940 	.word	0x20002940
   1cab0:	2000293c 	.word	0x2000293c
   1cab4:	20002318 	.word	0x20002318

0001cab8 <z_pend_curr>:
{
   1cab8:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
   1caba:	480c      	ldr	r0, [pc, #48]	; (1caec <z_pend_curr+0x34>)
   1cabc:	4d0c      	ldr	r5, [pc, #48]	; (1caf0 <z_pend_curr+0x38>)
   1cabe:	6886      	ldr	r6, [r0, #8]
   1cac0:	602e      	str	r6, [r5, #0]
{
   1cac2:	460c      	mov	r4, r1
   1cac4:	4611      	mov	r1, r2
   1cac6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
   1caca:	f04f 0640 	mov.w	r6, #64	; 0x40
   1cace:	f3ef 8511 	mrs	r5, BASEPRI
   1cad2:	f386 8812 	msr	BASEPRI_MAX, r6
   1cad6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
   1cada:	6880      	ldr	r0, [r0, #8]
   1cadc:	f7ff ff60 	bl	1c9a0 <pend_locked>
	ret = arch_swap(key);
   1cae0:	4620      	mov	r0, r4
}
   1cae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1cae6:	f7f5 be5b 	b.w	127a0 <arch_swap>
   1caea:	bf00      	nop
   1caec:	20002908 	.word	0x20002908
   1caf0:	20002938 	.word	0x20002938

0001caf4 <z_set_prio>:
{
   1caf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1caf6:	4604      	mov	r4, r0
   1caf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cafc:	f3ef 8611 	mrs	r6, BASEPRI
   1cb00:	f383 8812 	msr	BASEPRI_MAX, r3
   1cb04:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1cb08:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1cb0a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1cb0c:	b249      	sxtb	r1, r1
   1cb0e:	d119      	bne.n	1cb44 <z_set_prio+0x50>
	return node->next != NULL;
   1cb10:	6985      	ldr	r5, [r0, #24]
   1cb12:	b9bd      	cbnz	r5, 1cb44 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cb14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cb18:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cb1a:	f004 f91b 	bl	20d54 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1cb1e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1cb20:	4a16      	ldr	r2, [pc, #88]	; (1cb7c <z_set_prio+0x88>)
				thread->base.prio = prio;
   1cb22:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cb24:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1cb28:	7343      	strb	r3, [r0, #13]
   1cb2a:	4613      	mov	r3, r2
   1cb2c:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cb30:	4298      	cmp	r0, r3
   1cb32:	bf18      	it	ne
   1cb34:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
   1cb36:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1cb38:	b95d      	cbnz	r5, 1cb52 <z_set_prio+0x5e>
	node->prev = tail;
   1cb3a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
   1cb3e:	6004      	str	r4, [r0, #0]
	list->tail = node;
   1cb40:	6254      	str	r4, [r2, #36]	; 0x24
}
   1cb42:	e011      	b.n	1cb68 <z_set_prio+0x74>
			thread->base.prio = prio;
   1cb44:	73a1      	strb	r1, [r4, #14]
   1cb46:	2000      	movs	r0, #0
	__asm__ volatile(
   1cb48:	f386 8811 	msr	BASEPRI, r6
   1cb4c:	f3bf 8f6f 	isb	sy
}
   1cb50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
   1cb52:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
   1cb56:	42b9      	cmp	r1, r7
   1cb58:	d00b      	beq.n	1cb72 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cb5a:	428f      	cmp	r7, r1
   1cb5c:	dd09      	ble.n	1cb72 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
   1cb5e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
   1cb60:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
   1cb64:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1cb66:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1cb68:	2001      	movs	r0, #1
   1cb6a:	f7ff fe75 	bl	1c858 <update_cache>
   1cb6e:	2001      	movs	r0, #1
   1cb70:	e7ea      	b.n	1cb48 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
   1cb72:	42a8      	cmp	r0, r5
   1cb74:	d0e1      	beq.n	1cb3a <z_set_prio+0x46>
   1cb76:	682d      	ldr	r5, [r5, #0]
   1cb78:	e7de      	b.n	1cb38 <z_set_prio+0x44>
   1cb7a:	bf00      	nop
   1cb7c:	20002908 	.word	0x20002908

0001cb80 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1cb80:	b949      	cbnz	r1, 1cb96 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cb82:	f3ef 8005 	mrs	r0, IPSR
   1cb86:	b930      	cbnz	r0, 1cb96 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1cb88:	4b05      	ldr	r3, [pc, #20]	; (1cba0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1cb8a:	69da      	ldr	r2, [r3, #28]
   1cb8c:	689b      	ldr	r3, [r3, #8]
   1cb8e:	429a      	cmp	r2, r3
   1cb90:	d001      	beq.n	1cb96 <z_reschedule+0x16>
   1cb92:	f7f5 be05 	b.w	127a0 <arch_swap>
   1cb96:	f381 8811 	msr	BASEPRI, r1
   1cb9a:	f3bf 8f6f 	isb	sy
}
   1cb9e:	4770      	bx	lr
   1cba0:	20002908 	.word	0x20002908

0001cba4 <z_sched_start>:
{
   1cba4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cba6:	f04f 0240 	mov.w	r2, #64	; 0x40
   1cbaa:	f3ef 8411 	mrs	r4, BASEPRI
   1cbae:	f382 8812 	msr	BASEPRI_MAX, r2
   1cbb2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1cbb6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1cbb8:	0751      	lsls	r1, r2, #29
   1cbba:	d404      	bmi.n	1cbc6 <z_sched_start+0x22>
	__asm__ volatile(
   1cbbc:	f384 8811 	msr	BASEPRI, r4
   1cbc0:	f3bf 8f6f 	isb	sy
}
   1cbc4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1cbc6:	f022 0204 	bic.w	r2, r2, #4
   1cbca:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1cbcc:	f7ff fe9c 	bl	1c908 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1cbd0:	4621      	mov	r1, r4
   1cbd2:	4802      	ldr	r0, [pc, #8]	; (1cbdc <z_sched_start+0x38>)
}
   1cbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1cbd8:	f7ff bfd2 	b.w	1cb80 <z_reschedule>
   1cbdc:	20002f3b 	.word	0x20002f3b

0001cbe0 <z_impl_k_thread_suspend>:
{
   1cbe0:	b570      	push	{r4, r5, r6, lr}
   1cbe2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1cbe4:	3018      	adds	r0, #24
   1cbe6:	f004 f9a3 	bl	20f30 <z_abort_timeout>
	__asm__ volatile(
   1cbea:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cbee:	f3ef 8611 	mrs	r6, BASEPRI
   1cbf2:	f383 8812 	msr	BASEPRI_MAX, r3
   1cbf6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1cbfa:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   1cbfe:	7b63      	ldrb	r3, [r4, #13]
   1cc00:	2a00      	cmp	r2, #0
   1cc02:	da05      	bge.n	1cc10 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1cc08:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1cc0a:	4620      	mov	r0, r4
   1cc0c:	f004 f8a2 	bl	20d54 <sys_dlist_remove>
		update_cache(thread == _current);
   1cc10:	4d0b      	ldr	r5, [pc, #44]	; (1cc40 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cc12:	7b63      	ldrb	r3, [r4, #13]
   1cc14:	68a8      	ldr	r0, [r5, #8]
   1cc16:	f043 0310 	orr.w	r3, r3, #16
   1cc1a:	7363      	strb	r3, [r4, #13]
   1cc1c:	1b03      	subs	r3, r0, r4
   1cc1e:	4258      	negs	r0, r3
   1cc20:	4158      	adcs	r0, r3
   1cc22:	f7ff fe19 	bl	1c858 <update_cache>
	__asm__ volatile(
   1cc26:	f386 8811 	msr	BASEPRI, r6
   1cc2a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1cc2e:	68ab      	ldr	r3, [r5, #8]
   1cc30:	42a3      	cmp	r3, r4
   1cc32:	d103      	bne.n	1cc3c <z_impl_k_thread_suspend+0x5c>
}
   1cc34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1cc38:	f004 b93d 	b.w	20eb6 <z_reschedule_unlocked>
}
   1cc3c:	bd70      	pop	{r4, r5, r6, pc}
   1cc3e:	bf00      	nop
   1cc40:	20002908 	.word	0x20002908

0001cc44 <k_sched_lock>:
	__asm__ volatile(
   1cc44:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc48:	f3ef 8111 	mrs	r1, BASEPRI
   1cc4c:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc50:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1cc54:	4b04      	ldr	r3, [pc, #16]	; (1cc68 <k_sched_lock+0x24>)
   1cc56:	689a      	ldr	r2, [r3, #8]
   1cc58:	7bd3      	ldrb	r3, [r2, #15]
   1cc5a:	3b01      	subs	r3, #1
   1cc5c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1cc5e:	f381 8811 	msr	BASEPRI, r1
   1cc62:	f3bf 8f6f 	isb	sy
}
   1cc66:	4770      	bx	lr
   1cc68:	20002908 	.word	0x20002908

0001cc6c <k_sched_unlock>:
{
   1cc6c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1cc6e:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cc72:	f3ef 8411 	mrs	r4, BASEPRI
   1cc76:	f383 8812 	msr	BASEPRI_MAX, r3
   1cc7a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1cc7e:	4b08      	ldr	r3, [pc, #32]	; (1cca0 <k_sched_unlock+0x34>)
   1cc80:	689a      	ldr	r2, [r3, #8]
   1cc82:	7bd3      	ldrb	r3, [r2, #15]
   1cc84:	3301      	adds	r3, #1
   1cc86:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1cc88:	2000      	movs	r0, #0
   1cc8a:	f7ff fde5 	bl	1c858 <update_cache>
	__asm__ volatile(
   1cc8e:	f384 8811 	msr	BASEPRI, r4
   1cc92:	f3bf 8f6f 	isb	sy
}
   1cc96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1cc9a:	f004 b90c 	b.w	20eb6 <z_reschedule_unlocked>
   1cc9e:	bf00      	nop
   1cca0:	20002908 	.word	0x20002908

0001cca4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1cca4:	4b04      	ldr	r3, [pc, #16]	; (1ccb8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1cca6:	2100      	movs	r1, #0
   1cca8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   1ccac:	e9c3 2208 	strd	r2, r2, [r3, #32]
   1ccb0:	4608      	mov	r0, r1
   1ccb2:	f7ff be8d 	b.w	1c9d0 <k_sched_time_slice_set>
   1ccb6:	bf00      	nop
   1ccb8:	20002908 	.word	0x20002908

0001ccbc <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
   1ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1ccbe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ccc2:	f3ef 8511 	mrs	r5, BASEPRI
   1ccc6:	f383 8812 	msr	BASEPRI_MAX, r3
   1ccca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   1ccce:	4919      	ldr	r1, [pc, #100]	; (1cd34 <z_impl_k_yield+0x78>)
   1ccd0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ccd2:	7b43      	ldrb	r3, [r0, #13]
   1ccd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ccd8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ccda:	f004 f83b 	bl	20d54 <sys_dlist_remove>
	}
	queue_thread(_current);
   1ccde:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1cce0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1cce2:	4608      	mov	r0, r1
   1cce4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1cce8:	735a      	strb	r2, [r3, #13]
   1ccea:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
   1ccee:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ccf0:	4282      	cmp	r2, r0
   1ccf2:	bf08      	it	eq
   1ccf4:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ccf6:	b922      	cbnz	r2, 1cd02 <z_impl_k_yield+0x46>
	node->prev = tail;
   1ccf8:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
   1ccfc:	6023      	str	r3, [r4, #0]
	list->tail = node;
   1ccfe:	624b      	str	r3, [r1, #36]	; 0x24
}
   1cd00:	e00c      	b.n	1cd1c <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
   1cd02:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1cd06:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
   1cd0a:	42be      	cmp	r6, r7
   1cd0c:	d00e      	beq.n	1cd2c <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
   1cd0e:	42b7      	cmp	r7, r6
   1cd10:	dd0c      	ble.n	1cd2c <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
   1cd12:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1cd14:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1cd18:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1cd1a:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1cd1c:	2001      	movs	r0, #1
   1cd1e:	f7ff fd9b 	bl	1c858 <update_cache>
   1cd22:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1cd24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1cd28:	f7f5 bd3a 	b.w	127a0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1cd2c:	42a2      	cmp	r2, r4
   1cd2e:	d0e3      	beq.n	1ccf8 <z_impl_k_yield+0x3c>
   1cd30:	6812      	ldr	r2, [r2, #0]
   1cd32:	e7e0      	b.n	1ccf6 <z_impl_k_yield+0x3a>
   1cd34:	20002908 	.word	0x20002908

0001cd38 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1cd38:	ea50 0301 	orrs.w	r3, r0, r1
{
   1cd3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cd40:	4605      	mov	r5, r0
   1cd42:	460e      	mov	r6, r1
	if (ticks == 0) {
   1cd44:	d103      	bne.n	1cd4e <z_tick_sleep+0x16>
	z_impl_k_yield();
   1cd46:	f7ff ffb9 	bl	1ccbc <z_impl_k_yield>
		k_yield();
		return 0;
   1cd4a:	2000      	movs	r0, #0
   1cd4c:	e02c      	b.n	1cda8 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
   1cd4e:	1c83      	adds	r3, r0, #2
   1cd50:	f171 33ff 	sbcs.w	r3, r1, #4294967295
   1cd54:	db2a      	blt.n	1cdac <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1cd56:	f004 f92d 	bl	20fb4 <sys_clock_tick_get_32>
   1cd5a:	182c      	adds	r4, r5, r0
   1cd5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   1cd60:	f3ef 8811 	mrs	r8, BASEPRI
   1cd64:	f383 8812 	msr	BASEPRI_MAX, r3
   1cd68:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1cd6c:	4f11      	ldr	r7, [pc, #68]	; (1cdb4 <z_tick_sleep+0x7c>)
   1cd6e:	4b12      	ldr	r3, [pc, #72]	; (1cdb8 <z_tick_sleep+0x80>)
   1cd70:	68b8      	ldr	r0, [r7, #8]
   1cd72:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1cd74:	f7ff fdfc 	bl	1c970 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1cd78:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1cd7a:	4910      	ldr	r1, [pc, #64]	; (1cdbc <z_tick_sleep+0x84>)
   1cd7c:	462a      	mov	r2, r5
   1cd7e:	4633      	mov	r3, r6
   1cd80:	3018      	adds	r0, #24
   1cd82:	f000 f931 	bl	1cfe8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1cd86:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1cd88:	7b53      	ldrb	r3, [r2, #13]
   1cd8a:	f043 0310 	orr.w	r3, r3, #16
   1cd8e:	7353      	strb	r3, [r2, #13]
   1cd90:	4640      	mov	r0, r8
   1cd92:	f7f5 fd05 	bl	127a0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1cd96:	f004 f90d 	bl	20fb4 <sys_clock_tick_get_32>
   1cd9a:	1a20      	subs	r0, r4, r0
   1cd9c:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1cda0:	2801      	cmp	r0, #1
   1cda2:	f173 0300 	sbcs.w	r3, r3, #0
   1cda6:	dbd0      	blt.n	1cd4a <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
   1cda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   1cdac:	f06f 0401 	mvn.w	r4, #1
   1cdb0:	1a24      	subs	r4, r4, r0
   1cdb2:	e7d3      	b.n	1cd5c <z_tick_sleep+0x24>
   1cdb4:	20002908 	.word	0x20002908
   1cdb8:	20002938 	.word	0x20002938
   1cdbc:	00020d8b 	.word	0x00020d8b

0001cdc0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cdc0:	f1b1 3fff 	cmp.w	r1, #4294967295
   1cdc4:	bf08      	it	eq
   1cdc6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   1cdca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cdcc:	d106      	bne.n	1cddc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1cdce:	4b08      	ldr	r3, [pc, #32]	; (1cdf0 <z_impl_k_sleep+0x30>)
   1cdd0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1cdd2:	f7ff ff05 	bl	1cbe0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1cdd6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1cdda:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1cddc:	f7ff ffac 	bl	1cd38 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   1cde0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cde4:	fb80 0303 	smull	r0, r3, r0, r3
   1cde8:	0bc0      	lsrs	r0, r0, #15
   1cdea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1cdee:	e7f4      	b.n	1cdda <z_impl_k_sleep+0x1a>
   1cdf0:	20002908 	.word	0x20002908

0001cdf4 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
   1cdf4:	b538      	push	{r3, r4, r5, lr}
   1cdf6:	4c0a      	ldr	r4, [pc, #40]	; (1ce20 <z_impl_k_usleep+0x2c>)
   1cdf8:	4a0a      	ldr	r2, [pc, #40]	; (1ce24 <z_impl_k_usleep+0x30>)
   1cdfa:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1cdfe:	2100      	movs	r1, #0
   1ce00:	fbc0 4105 	smlal	r4, r1, r0, r5
   1ce04:	2300      	movs	r3, #0
   1ce06:	4620      	mov	r0, r4
   1ce08:	f7e3 f97a 	bl	100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
   1ce0c:	17c1      	asrs	r1, r0, #31
   1ce0e:	f7ff ff93 	bl	1cd38 <z_tick_sleep>
   1ce12:	4b04      	ldr	r3, [pc, #16]	; (1ce24 <z_impl_k_usleep+0x30>)
   1ce14:	fb80 0303 	smull	r0, r3, r0, r3
   1ce18:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
   1ce1a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   1ce1e:	bd38      	pop	{r3, r4, r5, pc}
   1ce20:	000f423f 	.word	0x000f423f
   1ce24:	000f4240 	.word	0x000f4240

0001ce28 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1ce28:	4b01      	ldr	r3, [pc, #4]	; (1ce30 <z_impl_z_current_get+0x8>)
   1ce2a:	6898      	ldr	r0, [r3, #8]
   1ce2c:	4770      	bx	lr
   1ce2e:	bf00      	nop
   1ce30:	20002908 	.word	0x20002908

0001ce34 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1ce34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce38:	4604      	mov	r4, r0
   1ce3a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1ce3e:	f3ef 8611 	mrs	r6, BASEPRI
   1ce42:	f383 8812 	msr	BASEPRI_MAX, r3
   1ce46:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
   1ce4a:	7b03      	ldrb	r3, [r0, #12]
   1ce4c:	07d9      	lsls	r1, r3, #31
   1ce4e:	d50b      	bpl.n	1ce68 <z_thread_abort+0x34>
	__asm__ volatile(
   1ce50:	f386 8811 	msr	BASEPRI, r6
   1ce54:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
   1ce58:	4040      	eors	r0, r0
   1ce5a:	f380 8811 	msr	BASEPRI, r0
   1ce5e:	f04f 0004 	mov.w	r0, #4
   1ce62:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1ce64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1ce68:	7b43      	ldrb	r3, [r0, #13]
   1ce6a:	071a      	lsls	r2, r3, #28
   1ce6c:	d504      	bpl.n	1ce78 <z_thread_abort+0x44>
   1ce6e:	f386 8811 	msr	BASEPRI, r6
   1ce72:	f3bf 8f6f 	isb	sy
   1ce76:	e7f5      	b.n	1ce64 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ce78:	f023 0220 	bic.w	r2, r3, #32
   1ce7c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1ce80:	09d2      	lsrs	r2, r2, #7
   1ce82:	d120      	bne.n	1cec6 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1ce84:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1ce86:	68a3      	ldr	r3, [r4, #8]
   1ce88:	b113      	cbz	r3, 1ce90 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
   1ce8a:	4620      	mov	r0, r4
   1ce8c:	f003 ff6a 	bl	20d64 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1ce90:	f104 0018 	add.w	r0, r4, #24
   1ce94:	f004 f84c 	bl	20f30 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ce98:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1ce9c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1cea0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cea2:	42bd      	cmp	r5, r7
   1cea4:	d000      	beq.n	1cea8 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1cea6:	b9b5      	cbnz	r5, 1ced6 <z_thread_abort+0xa2>
		update_cache(1);
   1cea8:	2001      	movs	r0, #1
   1ceaa:	f7ff fcd5 	bl	1c858 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1ceae:	4b10      	ldr	r3, [pc, #64]	; (1cef0 <z_thread_abort+0xbc>)
   1ceb0:	689b      	ldr	r3, [r3, #8]
   1ceb2:	42a3      	cmp	r3, r4
   1ceb4:	d1db      	bne.n	1ce6e <z_thread_abort+0x3a>
   1ceb6:	f3ef 8305 	mrs	r3, IPSR
   1ceba:	2b00      	cmp	r3, #0
   1cebc:	d1d7      	bne.n	1ce6e <z_thread_abort+0x3a>
   1cebe:	4630      	mov	r0, r6
   1cec0:	f7f5 fc6e 	bl	127a0 <arch_swap>
	return ret;
   1cec4:	e7d3      	b.n	1ce6e <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1cec6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1ceca:	f043 0308 	orr.w	r3, r3, #8
   1cece:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ced0:	f003 ff40 	bl	20d54 <sys_dlist_remove>
}
   1ced4:	e7d7      	b.n	1ce86 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
   1ced6:	4628      	mov	r0, r5
   1ced8:	f003 ff44 	bl	20d64 <unpend_thread_no_timeout>
   1cedc:	f105 0018 	add.w	r0, r5, #24
   1cee0:	f004 f826 	bl	20f30 <z_abort_timeout>
   1cee4:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1cee8:	4628      	mov	r0, r5
   1ceea:	f7ff fd0d 	bl	1c908 <ready_thread>
   1ceee:	e7d7      	b.n	1cea0 <z_thread_abort+0x6c>
   1cef0:	20002908 	.word	0x20002908

0001cef4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1cef4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1cef6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1cefa:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1cefc:	e9cd 6700 	strd	r6, r7, [sp]
   1cf00:	f7ff fdda 	bl	1cab8 <z_pend_curr>

	if (data != NULL) {
   1cf04:	b11c      	cbz	r4, 1cf0e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1cf06:	4b03      	ldr	r3, [pc, #12]	; (1cf14 <z_sched_wait+0x20>)
   1cf08:	689b      	ldr	r3, [r3, #8]
   1cf0a:	695b      	ldr	r3, [r3, #20]
   1cf0c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1cf0e:	b002      	add	sp, #8
   1cf10:	bdd0      	pop	{r4, r6, r7, pc}
   1cf12:	bf00      	nop
   1cf14:	20002908 	.word	0x20002908

0001cf18 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   1cf18:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
   1cf1a:	4806      	ldr	r0, [pc, #24]	; (1cf34 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
   1cf1c:	4a06      	ldr	r2, [pc, #24]	; (1cf38 <z_data_copy+0x20>)
   1cf1e:	4907      	ldr	r1, [pc, #28]	; (1cf3c <z_data_copy+0x24>)
   1cf20:	1a12      	subs	r2, r2, r0
   1cf22:	f003 fc95 	bl	20850 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1cf26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
   1cf2a:	4a05      	ldr	r2, [pc, #20]	; (1cf40 <z_data_copy+0x28>)
   1cf2c:	4905      	ldr	r1, [pc, #20]	; (1cf44 <z_data_copy+0x2c>)
   1cf2e:	4806      	ldr	r0, [pc, #24]	; (1cf48 <z_data_copy+0x30>)
   1cf30:	f003 bc8e 	b.w	20850 <z_early_memcpy>
   1cf34:	20000000 	.word	0x20000000
   1cf38:	20000a04 	.word	0x20000a04
   1cf3c:	00023c2c 	.word	0x00023c2c
   1cf40:	00000000 	.word	0x00000000
   1cf44:	00023c2c 	.word	0x00023c2c
   1cf48:	20000000 	.word	0x20000000

0001cf4c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1cf4c:	4b03      	ldr	r3, [pc, #12]	; (1cf5c <elapsed+0x10>)
   1cf4e:	681b      	ldr	r3, [r3, #0]
   1cf50:	b90b      	cbnz	r3, 1cf56 <elapsed+0xa>
   1cf52:	f7fd b84b 	b.w	19fec <sys_clock_elapsed>
}
   1cf56:	2000      	movs	r0, #0
   1cf58:	4770      	bx	lr
   1cf5a:	bf00      	nop
   1cf5c:	20002944 	.word	0x20002944

0001cf60 <next_timeout>:

static int32_t next_timeout(void)
{
   1cf60:	b510      	push	{r4, lr}
	return list->head == list;
   1cf62:	4b11      	ldr	r3, [pc, #68]	; (1cfa8 <next_timeout+0x48>)
   1cf64:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1cf66:	429c      	cmp	r4, r3
   1cf68:	d10a      	bne.n	1cf80 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1cf6a:	f7ff ffef 	bl	1cf4c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
   1cf6e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1cf72:	4b0e      	ldr	r3, [pc, #56]	; (1cfac <next_timeout+0x4c>)
   1cf74:	691b      	ldr	r3, [r3, #16]
   1cf76:	b113      	cbz	r3, 1cf7e <next_timeout+0x1e>
   1cf78:	4298      	cmp	r0, r3
   1cf7a:	bfa8      	it	ge
   1cf7c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1cf7e:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
   1cf80:	f7ff ffe4 	bl	1cf4c <elapsed>
	if ((to == NULL) ||
   1cf84:	2c00      	cmp	r4, #0
   1cf86:	d0f2      	beq.n	1cf6e <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   1cf88:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   1cf8c:	1a1b      	subs	r3, r3, r0
   1cf8e:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
   1cf92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1cf96:	f172 0100 	sbcs.w	r1, r2, #0
   1cf9a:	dae8      	bge.n	1cf6e <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
   1cf9c:	2a00      	cmp	r2, #0
   1cf9e:	bfac      	ite	ge
   1cfa0:	4618      	movge	r0, r3
   1cfa2:	2000      	movlt	r0, #0
   1cfa4:	e7e5      	b.n	1cf72 <next_timeout+0x12>
   1cfa6:	bf00      	nop
   1cfa8:	200007d4 	.word	0x200007d4
   1cfac:	20002908 	.word	0x20002908

0001cfb0 <remove_timeout>:
{
   1cfb0:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1cfb2:	b170      	cbz	r0, 1cfd2 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1cfb4:	4b0b      	ldr	r3, [pc, #44]	; (1cfe4 <remove_timeout+0x34>)
   1cfb6:	685b      	ldr	r3, [r3, #4]
   1cfb8:	4298      	cmp	r0, r3
   1cfba:	d00a      	beq.n	1cfd2 <remove_timeout+0x22>
   1cfbc:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
   1cfbe:	b143      	cbz	r3, 1cfd2 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1cfc0:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1cfc4:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1cfc8:	1912      	adds	r2, r2, r4
   1cfca:	eb41 0105 	adc.w	r1, r1, r5
   1cfce:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   1cfd2:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
   1cfd6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1cfd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1cfda:	2300      	movs	r3, #0
	node->prev = NULL;
   1cfdc:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cfe0:	bd30      	pop	{r4, r5, pc}
   1cfe2:	bf00      	nop
   1cfe4:	200007d4 	.word	0x200007d4

0001cfe8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
   1cfec:	bf08      	it	eq
   1cfee:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   1cff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cff4:	4604      	mov	r4, r0
   1cff6:	461d      	mov	r5, r3
   1cff8:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1cffa:	d061      	beq.n	1d0c0 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1cffc:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1cffe:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d002:	f3ef 8711 	mrs	r7, BASEPRI
   1d006:	f383 8812 	msr	BASEPRI_MAX, r3
   1d00a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1d00e:	3201      	adds	r2, #1
   1d010:	f175 33ff 	sbcs.w	r3, r5, #4294967295
   1d014:	da24      	bge.n	1d060 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1d016:	4930      	ldr	r1, [pc, #192]	; (1d0d8 <z_add_timeout+0xf0>)
   1d018:	e9d1 2000 	ldrd	r2, r0, [r1]
   1d01c:	f06f 0301 	mvn.w	r3, #1
   1d020:	1a9b      	subs	r3, r3, r2
   1d022:	f04f 32ff 	mov.w	r2, #4294967295
   1d026:	eb62 0000 	sbc.w	r0, r2, r0
   1d02a:	1b9e      	subs	r6, r3, r6
   1d02c:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
   1d030:	2e01      	cmp	r6, #1
   1d032:	f170 0300 	sbcs.w	r3, r0, #0
   1d036:	da01      	bge.n	1d03c <z_add_timeout+0x54>
   1d038:	2601      	movs	r6, #1
   1d03a:	2000      	movs	r0, #0
   1d03c:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
   1d040:	4e26      	ldr	r6, [pc, #152]	; (1d0dc <z_add_timeout+0xf4>)
   1d042:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
   1d046:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d048:	45b4      	cmp	ip, r6
   1d04a:	bf08      	it	eq
   1d04c:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
   1d050:	f1bc 0f00 	cmp.w	ip, #0
   1d054:	d10d      	bne.n	1d072 <z_add_timeout+0x8a>
	node->prev = tail;
   1d056:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
   1d05a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1d05c:	6074      	str	r4, [r6, #4]
}
   1d05e:	e01c      	b.n	1d09a <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
   1d060:	f7ff ff74 	bl	1cf4c <elapsed>
   1d064:	3601      	adds	r6, #1
   1d066:	f145 0500 	adc.w	r5, r5, #0
   1d06a:	1836      	adds	r6, r6, r0
   1d06c:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
   1d070:	e7e4      	b.n	1d03c <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
   1d072:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
   1d076:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
   1d07a:	4293      	cmp	r3, r2
   1d07c:	eb71 0e00 	sbcs.w	lr, r1, r0
   1d080:	da1f      	bge.n	1d0c2 <z_add_timeout+0xda>
				t->dticks -= to->dticks;
   1d082:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
   1d084:	f8dc 3004 	ldr.w	r3, [ip, #4]
   1d088:	eb60 0001 	sbc.w	r0, r0, r1
   1d08c:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
   1d090:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
   1d094:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1d096:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
   1d09a:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d09c:	42b3      	cmp	r3, r6
   1d09e:	d00b      	beq.n	1d0b8 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1d0a0:	429c      	cmp	r4, r3
   1d0a2:	d109      	bne.n	1d0b8 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1d0a4:	f7ff ff5c 	bl	1cf60 <next_timeout>

			if (next_time == 0 ||
   1d0a8:	b118      	cbz	r0, 1d0b2 <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
   1d0aa:	4b0d      	ldr	r3, [pc, #52]	; (1d0e0 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
   1d0ac:	691b      	ldr	r3, [r3, #16]
   1d0ae:	4283      	cmp	r3, r0
   1d0b0:	d002      	beq.n	1d0b8 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
   1d0b2:	2100      	movs	r1, #0
   1d0b4:	f7fc ff68 	bl	19f88 <sys_clock_set_timeout>
	__asm__ volatile(
   1d0b8:	f387 8811 	msr	BASEPRI, r7
   1d0bc:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1d0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
   1d0c2:	1a9b      	subs	r3, r3, r2
   1d0c4:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
   1d0c8:	45ac      	cmp	ip, r5
   1d0ca:	e9c4 3104 	strd	r3, r1, [r4, #16]
   1d0ce:	d0c2      	beq.n	1d056 <z_add_timeout+0x6e>
   1d0d0:	f8dc c000 	ldr.w	ip, [ip]
   1d0d4:	e7bc      	b.n	1d050 <z_add_timeout+0x68>
   1d0d6:	bf00      	nop
   1d0d8:	200024b8 	.word	0x200024b8
   1d0dc:	200007d4 	.word	0x200007d4
   1d0e0:	20002908 	.word	0x20002908

0001d0e4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1d0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d0e8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1d0ea:	f7ff fca3 	bl	1ca34 <z_time_slice>
	__asm__ volatile(
   1d0ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d0f2:	f3ef 8611 	mrs	r6, BASEPRI
   1d0f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1d0fa:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
   1d0fe:	4f23      	ldr	r7, [pc, #140]	; (1d18c <sys_clock_announce+0xa8>)
	return list->head == list;
   1d100:	f8df 808c 	ldr.w	r8, [pc, #140]	; 1d190 <sys_clock_announce+0xac>
   1d104:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1d108:	4a22      	ldr	r2, [pc, #136]	; (1d194 <sys_clock_announce+0xb0>)
	announce_remaining = ticks;
   1d10a:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1d10c:	4540      	cmp	r0, r8
		curr_tick += dt;
   1d10e:	e9d2 3e00 	ldrd	r3, lr, [r2]
   1d112:	ea4f 71e4 	mov.w	r1, r4, asr #31
   1d116:	d00b      	beq.n	1d130 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1d118:	b150      	cbz	r0, 1d130 <sys_clock_announce+0x4c>
   1d11a:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
   1d11e:	42ac      	cmp	r4, r5
   1d120:	eb71 090c 	sbcs.w	r9, r1, ip
   1d124:	da16      	bge.n	1d154 <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1d126:	1b2d      	subs	r5, r5, r4
   1d128:	eb6c 0c01 	sbc.w	ip, ip, r1
   1d12c:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1d130:	18e3      	adds	r3, r4, r3
   1d132:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
   1d136:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   1d138:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
   1d13c:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1d13e:	f7ff ff0f 	bl	1cf60 <next_timeout>
   1d142:	4621      	mov	r1, r4
   1d144:	f7fc ff20 	bl	19f88 <sys_clock_set_timeout>
	__asm__ volatile(
   1d148:	f386 8811 	msr	BASEPRI, r6
   1d14c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1d150:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1d154:	18eb      	adds	r3, r5, r3
   1d156:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
   1d15a:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
   1d15e:	2200      	movs	r2, #0
   1d160:	2300      	movs	r3, #0
   1d162:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
   1d166:	f7ff ff23 	bl	1cfb0 <remove_timeout>
   1d16a:	f386 8811 	msr	BASEPRI, r6
   1d16e:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1d172:	6883      	ldr	r3, [r0, #8]
   1d174:	4798      	blx	r3
	__asm__ volatile(
   1d176:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d17a:	f3ef 8611 	mrs	r6, BASEPRI
   1d17e:	f383 8812 	msr	BASEPRI_MAX, r3
   1d182:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
   1d186:	683c      	ldr	r4, [r7, #0]
   1d188:	1b64      	subs	r4, r4, r5
   1d18a:	e7bb      	b.n	1d104 <sys_clock_announce+0x20>
   1d18c:	20002944 	.word	0x20002944
   1d190:	200007d4 	.word	0x200007d4
   1d194:	200024b8 	.word	0x200024b8

0001d198 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1d198:	b510      	push	{r4, lr}
   1d19a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d19e:	f3ef 8411 	mrs	r4, BASEPRI
   1d1a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1d1a6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
   1d1aa:	f7ff fecf 	bl	1cf4c <elapsed>
   1d1ae:	4a06      	ldr	r2, [pc, #24]	; (1d1c8 <sys_clock_tick_get+0x30>)
   1d1b0:	4603      	mov	r3, r0
   1d1b2:	e9d2 0100 	ldrd	r0, r1, [r2]
   1d1b6:	1818      	adds	r0, r3, r0
   1d1b8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
   1d1bc:	f384 8811 	msr	BASEPRI, r4
   1d1c0:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1d1c4:	bd10      	pop	{r4, pc}
   1d1c6:	bf00      	nop
   1d1c8:	200024b8 	.word	0x200024b8

0001d1cc <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1d1cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1d1d0:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1d1d2:	4b29      	ldr	r3, [pc, #164]	; (1d278 <z_impl_k_poll+0xac>)
   1d1d4:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1d1d6:	2301      	movs	r3, #1
   1d1d8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1d1dc:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1d1e0:	ea52 0305 	orrs.w	r3, r2, r5
{
   1d1e4:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1d1e6:	bf0c      	ite	eq
   1d1e8:	2301      	moveq	r3, #1
   1d1ea:	2300      	movne	r3, #0
   1d1ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1d1f0:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1d1f2:	f003 ff3a 	bl	2106a <register_events>
   1d1f6:	4681      	mov	r9, r0
	__asm__ volatile(
   1d1f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d1fc:	f3ef 8a11 	mrs	sl, BASEPRI
   1d200:	f383 8812 	msr	BASEPRI_MAX, r3
   1d204:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1d208:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1d20c:	b964      	cbnz	r4, 1d228 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1d20e:	4601      	mov	r1, r0
   1d210:	4652      	mov	r2, sl
   1d212:	4640      	mov	r0, r8
   1d214:	f003 fffa 	bl	2120c <clear_event_registrations>
	__asm__ volatile(
   1d218:	f38a 8811 	msr	BASEPRI, sl
   1d21c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1d220:	4620      	mov	r0, r4
   1d222:	b002      	add	sp, #8
   1d224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1d228:	2300      	movs	r3, #0
   1d22a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1d22e:	ea56 0305 	orrs.w	r3, r6, r5
   1d232:	d106      	bne.n	1d242 <z_impl_k_poll+0x76>
   1d234:	f38a 8811 	msr	BASEPRI, sl
   1d238:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1d23c:	f06f 040a 	mvn.w	r4, #10
   1d240:	e7ee      	b.n	1d220 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1d242:	e9cd 6500 	strd	r6, r5, [sp]
   1d246:	4a0d      	ldr	r2, [pc, #52]	; (1d27c <z_impl_k_poll+0xb0>)
   1d248:	480d      	ldr	r0, [pc, #52]	; (1d280 <z_impl_k_poll+0xb4>)
   1d24a:	4651      	mov	r1, sl
   1d24c:	f7ff fc34 	bl	1cab8 <z_pend_curr>
   1d250:	4604      	mov	r4, r0
	__asm__ volatile(
   1d252:	f04f 0340 	mov.w	r3, #64	; 0x40
   1d256:	f3ef 8511 	mrs	r5, BASEPRI
   1d25a:	f383 8812 	msr	BASEPRI_MAX, r3
   1d25e:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1d262:	462a      	mov	r2, r5
   1d264:	4649      	mov	r1, r9
   1d266:	4640      	mov	r0, r8
   1d268:	f003 ffd0 	bl	2120c <clear_event_registrations>
	__asm__ volatile(
   1d26c:	f385 8811 	msr	BASEPRI, r5
   1d270:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1d274:	e7d4      	b.n	1d220 <z_impl_k_poll+0x54>
   1d276:	bf00      	nop
   1d278:	20002908 	.word	0x20002908
   1d27c:	200007dc 	.word	0x200007dc
   1d280:	20002f3b 	.word	0x20002f3b

0001d284 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1d284:	b538      	push	{r3, r4, r5, lr}
   1d286:	4603      	mov	r3, r0
	__asm__ volatile(
   1d288:	f04f 0240 	mov.w	r2, #64	; 0x40
   1d28c:	f3ef 8511 	mrs	r5, BASEPRI
   1d290:	f382 8812 	msr	BASEPRI_MAX, r2
   1d294:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1d298:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1d29a:	2101      	movs	r1, #1
   1d29c:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1d29e:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1d2a0:	4283      	cmp	r3, r0
   1d2a2:	d106      	bne.n	1d2b2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1d2a4:	f385 8811 	msr	BASEPRI, r5
   1d2a8:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1d2ac:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1d2ae:	4620      	mov	r0, r4
   1d2b0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1d2b2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1d2b6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1d2b8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1d2ba:	2300      	movs	r3, #0
	node->prev = NULL;
   1d2bc:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d2c0:	f003 ff4a 	bl	21158 <signal_poll_event>
	z_reschedule(&lock, key);
   1d2c4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1d2c6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1d2c8:	4801      	ldr	r0, [pc, #4]	; (1d2d0 <z_impl_k_poll_signal_raise+0x4c>)
   1d2ca:	f7ff fc59 	bl	1cb80 <z_reschedule>
	return rc;
   1d2ce:	e7ee      	b.n	1d2ae <z_impl_k_poll_signal_raise+0x2a>
   1d2d0:	20002f3b 	.word	0x20002f3b

0001d2d4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1d2d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d2d6:	4606      	mov	r6, r0
   1d2d8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1d2da:	f003 fb6c 	bl	209b6 <k_is_in_isr>
   1d2de:	b978      	cbnz	r0, 1d300 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1d2e0:	4b0b      	ldr	r3, [pc, #44]	; (1d310 <z_thread_aligned_alloc+0x3c>)
   1d2e2:	689b      	ldr	r3, [r3, #8]
   1d2e4:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1d2e6:	b17c      	cbz	r4, 1d308 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1d2e8:	1d2a      	adds	r2, r5, #4
   1d2ea:	d209      	bcs.n	1d300 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1d2ec:	2000      	movs	r0, #0
   1d2ee:	2100      	movs	r1, #0
   1d2f0:	e9cd 0100 	strd	r0, r1, [sp]
   1d2f4:	f046 0104 	orr.w	r1, r6, #4
   1d2f8:	4620      	mov	r0, r4
   1d2fa:	f003 fab3 	bl	20864 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1d2fe:	b908      	cbnz	r0, 1d304 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1d300:	2400      	movs	r4, #0
	}

	return ret;
   1d302:	e001      	b.n	1d308 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1d304:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1d306:	1d04      	adds	r4, r0, #4
}
   1d308:	4620      	mov	r0, r4
   1d30a:	b002      	add	sp, #8
   1d30c:	bd70      	pop	{r4, r5, r6, pc}
   1d30e:	bf00      	nop
   1d310:	20002908 	.word	0x20002908

0001d314 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
   1d314:	4801      	ldr	r0, [pc, #4]	; (1d31c <boot_banner+0x8>)
   1d316:	f000 bbd8 	b.w	1daca <printk>
   1d31a:	bf00      	nop
   1d31c:	00023bfc 	.word	0x00023bfc

0001d320 <ocrypto_ecdh_p256_public_key>:
   1d320:	b530      	push	{r4, r5, lr}
   1d322:	b099      	sub	sp, #100	; 0x64
   1d324:	4605      	mov	r5, r0
   1d326:	4668      	mov	r0, sp
   1d328:	f000 f828 	bl	1d37c <ocrypto_sc_p256_from32bytes>
   1d32c:	4669      	mov	r1, sp
   1d32e:	4604      	mov	r4, r0
   1d330:	a808      	add	r0, sp, #32
   1d332:	f000 fa53 	bl	1d7dc <ocrypto_curve_p256_scalarmult_base>
   1d336:	a908      	add	r1, sp, #32
   1d338:	4304      	orrs	r4, r0
   1d33a:	4628      	mov	r0, r5
   1d33c:	f000 f98a 	bl	1d654 <ocrypto_curve_p256_to64bytes>
   1d340:	4620      	mov	r0, r4
   1d342:	b019      	add	sp, #100	; 0x64
   1d344:	bd30      	pop	{r4, r5, pc}
   1d346:	bf00      	nop

0001d348 <ocrypto_ecdh_p256_common_secret>:
   1d348:	b570      	push	{r4, r5, r6, lr}
   1d34a:	b098      	sub	sp, #96	; 0x60
   1d34c:	4605      	mov	r5, r0
   1d34e:	4668      	mov	r0, sp
   1d350:	4616      	mov	r6, r2
   1d352:	f000 f813 	bl	1d37c <ocrypto_sc_p256_from32bytes>
   1d356:	4631      	mov	r1, r6
   1d358:	4604      	mov	r4, r0
   1d35a:	a808      	add	r0, sp, #32
   1d35c:	f000 f946 	bl	1d5ec <ocrypto_curve_p256_from64bytes>
   1d360:	a908      	add	r1, sp, #32
   1d362:	466a      	mov	r2, sp
   1d364:	4304      	orrs	r4, r0
   1d366:	4608      	mov	r0, r1
   1d368:	f000 f982 	bl	1d670 <ocrypto_curve_p256_scalarmult>
   1d36c:	a908      	add	r1, sp, #32
   1d36e:	4304      	orrs	r4, r0
   1d370:	4628      	mov	r0, r5
   1d372:	f000 f96d 	bl	1d650 <ocrypto_curve_p256_to32bytes>
   1d376:	4620      	mov	r0, r4
   1d378:	b018      	add	sp, #96	; 0x60
   1d37a:	bd70      	pop	{r4, r5, r6, pc}

0001d37c <ocrypto_sc_p256_from32bytes>:
   1d37c:	b570      	push	{r4, r5, r6, lr}
   1d37e:	680b      	ldr	r3, [r1, #0]
   1d380:	4e12      	ldr	r6, [pc, #72]	; (1d3cc <ocrypto_sc_p256_from32bytes+0x50>)
   1d382:	ba1b      	rev	r3, r3
   1d384:	61c3      	str	r3, [r0, #28]
   1d386:	684b      	ldr	r3, [r1, #4]
   1d388:	ba1b      	rev	r3, r3
   1d38a:	6183      	str	r3, [r0, #24]
   1d38c:	688b      	ldr	r3, [r1, #8]
   1d38e:	ba1b      	rev	r3, r3
   1d390:	6143      	str	r3, [r0, #20]
   1d392:	68cb      	ldr	r3, [r1, #12]
   1d394:	ba1b      	rev	r3, r3
   1d396:	6103      	str	r3, [r0, #16]
   1d398:	690b      	ldr	r3, [r1, #16]
   1d39a:	ba1b      	rev	r3, r3
   1d39c:	60c3      	str	r3, [r0, #12]
   1d39e:	694b      	ldr	r3, [r1, #20]
   1d3a0:	ba1b      	rev	r3, r3
   1d3a2:	6083      	str	r3, [r0, #8]
   1d3a4:	698b      	ldr	r3, [r1, #24]
   1d3a6:	ba1b      	rev	r3, r3
   1d3a8:	6043      	str	r3, [r0, #4]
   1d3aa:	69cb      	ldr	r3, [r1, #28]
   1d3ac:	ba1b      	rev	r3, r3
   1d3ae:	4632      	mov	r2, r6
   1d3b0:	6003      	str	r3, [r0, #0]
   1d3b2:	4601      	mov	r1, r0
   1d3b4:	4604      	mov	r4, r0
   1d3b6:	f7e2 fedd 	bl	174 <ocrypto_bigint_sub256>
   1d3ba:	4631      	mov	r1, r6
   1d3bc:	4605      	mov	r5, r0
   1d3be:	4602      	mov	r2, r0
   1d3c0:	4620      	mov	r0, r4
   1d3c2:	f7e2 fef7 	bl	1b4 <ocrypto_bigint_cadd256>
   1d3c6:	1e68      	subs	r0, r5, #1
   1d3c8:	bd70      	pop	{r4, r5, r6, pc}
   1d3ca:	bf00      	nop
   1d3cc:	00021ca4 	.word	0x00021ca4

0001d3d0 <p256_zdblu>:
   1d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d3d4:	b088      	sub	sp, #32
   1d3d6:	460c      	mov	r4, r1
   1d3d8:	4606      	mov	r6, r0
   1d3da:	f102 0120 	add.w	r1, r2, #32
   1d3de:	4668      	mov	r0, sp
   1d3e0:	f106 0720 	add.w	r7, r6, #32
   1d3e4:	4690      	mov	r8, r2
   1d3e6:	f7e3 f9cf 	bl	788 <ocrypto_mod_p256_sqr>
   1d3ea:	466a      	mov	r2, sp
   1d3ec:	4669      	mov	r1, sp
   1d3ee:	4668      	mov	r0, sp
   1d3f0:	f7e3 f8dc 	bl	5ac <ocrypto_mod_p256_add>
   1d3f4:	4669      	mov	r1, sp
   1d3f6:	4638      	mov	r0, r7
   1d3f8:	f7e3 f9c6 	bl	788 <ocrypto_mod_p256_sqr>
   1d3fc:	463a      	mov	r2, r7
   1d3fe:	4639      	mov	r1, r7
   1d400:	4638      	mov	r0, r7
   1d402:	f104 0520 	add.w	r5, r4, #32
   1d406:	f7e3 f8d1 	bl	5ac <ocrypto_mod_p256_add>
   1d40a:	466a      	mov	r2, sp
   1d40c:	4669      	mov	r1, sp
   1d40e:	4668      	mov	r0, sp
   1d410:	f7e3 f8cc 	bl	5ac <ocrypto_mod_p256_add>
   1d414:	4641      	mov	r1, r8
   1d416:	4628      	mov	r0, r5
   1d418:	f7e3 f9b6 	bl	788 <ocrypto_mod_p256_sqr>
   1d41c:	466a      	mov	r2, sp
   1d41e:	4641      	mov	r1, r8
   1d420:	4630      	mov	r0, r6
   1d422:	f7e3 f999 	bl	758 <ocrypto_mod_p256_mul>
   1d426:	462a      	mov	r2, r5
   1d428:	4629      	mov	r1, r5
   1d42a:	4668      	mov	r0, sp
   1d42c:	f7e3 f8be 	bl	5ac <ocrypto_mod_p256_add>
   1d430:	462a      	mov	r2, r5
   1d432:	4669      	mov	r1, sp
   1d434:	4668      	mov	r0, sp
   1d436:	f7e3 f8b9 	bl	5ac <ocrypto_mod_p256_add>
   1d43a:	4a12      	ldr	r2, [pc, #72]	; (1d484 <p256_zdblu+0xb4>)
   1d43c:	4669      	mov	r1, sp
   1d43e:	4668      	mov	r0, sp
   1d440:	f7e3 f8b4 	bl	5ac <ocrypto_mod_p256_add>
   1d444:	4669      	mov	r1, sp
   1d446:	4620      	mov	r0, r4
   1d448:	f7e3 f99e 	bl	788 <ocrypto_mod_p256_sqr>
   1d44c:	4632      	mov	r2, r6
   1d44e:	4621      	mov	r1, r4
   1d450:	4620      	mov	r0, r4
   1d452:	f7e3 f8e9 	bl	628 <ocrypto_mod_p256_sub>
   1d456:	4632      	mov	r2, r6
   1d458:	4621      	mov	r1, r4
   1d45a:	4620      	mov	r0, r4
   1d45c:	f7e3 f8e4 	bl	628 <ocrypto_mod_p256_sub>
   1d460:	4622      	mov	r2, r4
   1d462:	4631      	mov	r1, r6
   1d464:	4628      	mov	r0, r5
   1d466:	f7e3 f8df 	bl	628 <ocrypto_mod_p256_sub>
   1d46a:	466a      	mov	r2, sp
   1d46c:	4629      	mov	r1, r5
   1d46e:	4628      	mov	r0, r5
   1d470:	f7e3 f972 	bl	758 <ocrypto_mod_p256_mul>
   1d474:	463a      	mov	r2, r7
   1d476:	4629      	mov	r1, r5
   1d478:	4628      	mov	r0, r5
   1d47a:	f7e3 f8d5 	bl	628 <ocrypto_mod_p256_sub>
   1d47e:	b008      	add	sp, #32
   1d480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d484:	00021d44 	.word	0x00021d44

0001d488 <p256_zaddc>:
   1d488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d48a:	b099      	sub	sp, #100	; 0x64
   1d48c:	4604      	mov	r4, r0
   1d48e:	460d      	mov	r5, r1
   1d490:	460a      	mov	r2, r1
   1d492:	4601      	mov	r1, r0
   1d494:	4668      	mov	r0, sp
   1d496:	f7e3 f8c7 	bl	628 <ocrypto_mod_p256_sub>
   1d49a:	4669      	mov	r1, sp
   1d49c:	4668      	mov	r0, sp
   1d49e:	f7e3 f973 	bl	788 <ocrypto_mod_p256_sqr>
   1d4a2:	466a      	mov	r2, sp
   1d4a4:	4621      	mov	r1, r4
   1d4a6:	a808      	add	r0, sp, #32
   1d4a8:	f105 0620 	add.w	r6, r5, #32
   1d4ac:	f104 0720 	add.w	r7, r4, #32
   1d4b0:	f7e3 f952 	bl	758 <ocrypto_mod_p256_mul>
   1d4b4:	466a      	mov	r2, sp
   1d4b6:	4629      	mov	r1, r5
   1d4b8:	4668      	mov	r0, sp
   1d4ba:	f7e3 f94d 	bl	758 <ocrypto_mod_p256_mul>
   1d4be:	4632      	mov	r2, r6
   1d4c0:	4639      	mov	r1, r7
   1d4c2:	a810      	add	r0, sp, #64	; 0x40
   1d4c4:	f7e3 f872 	bl	5ac <ocrypto_mod_p256_add>
   1d4c8:	4632      	mov	r2, r6
   1d4ca:	4639      	mov	r1, r7
   1d4cc:	4630      	mov	r0, r6
   1d4ce:	f7e3 f8ab 	bl	628 <ocrypto_mod_p256_sub>
   1d4d2:	4631      	mov	r1, r6
   1d4d4:	4628      	mov	r0, r5
   1d4d6:	f7e3 f957 	bl	788 <ocrypto_mod_p256_sqr>
   1d4da:	466a      	mov	r2, sp
   1d4dc:	a908      	add	r1, sp, #32
   1d4de:	4620      	mov	r0, r4
   1d4e0:	f7e3 f864 	bl	5ac <ocrypto_mod_p256_add>
   1d4e4:	4622      	mov	r2, r4
   1d4e6:	4629      	mov	r1, r5
   1d4e8:	4628      	mov	r0, r5
   1d4ea:	f7e3 f89d 	bl	628 <ocrypto_mod_p256_sub>
   1d4ee:	466a      	mov	r2, sp
   1d4f0:	a908      	add	r1, sp, #32
   1d4f2:	4668      	mov	r0, sp
   1d4f4:	f7e3 f898 	bl	628 <ocrypto_mod_p256_sub>
   1d4f8:	466a      	mov	r2, sp
   1d4fa:	4639      	mov	r1, r7
   1d4fc:	4638      	mov	r0, r7
   1d4fe:	f7e3 f92b 	bl	758 <ocrypto_mod_p256_mul>
   1d502:	462a      	mov	r2, r5
   1d504:	a908      	add	r1, sp, #32
   1d506:	4668      	mov	r0, sp
   1d508:	f7e3 f88e 	bl	628 <ocrypto_mod_p256_sub>
   1d50c:	466a      	mov	r2, sp
   1d50e:	4631      	mov	r1, r6
   1d510:	4630      	mov	r0, r6
   1d512:	f7e3 f921 	bl	758 <ocrypto_mod_p256_mul>
   1d516:	463a      	mov	r2, r7
   1d518:	4631      	mov	r1, r6
   1d51a:	4630      	mov	r0, r6
   1d51c:	f7e3 f884 	bl	628 <ocrypto_mod_p256_sub>
   1d520:	a910      	add	r1, sp, #64	; 0x40
   1d522:	4668      	mov	r0, sp
   1d524:	f7e3 f930 	bl	788 <ocrypto_mod_p256_sqr>
   1d528:	4622      	mov	r2, r4
   1d52a:	4669      	mov	r1, sp
   1d52c:	4620      	mov	r0, r4
   1d52e:	f7e3 f87b 	bl	628 <ocrypto_mod_p256_sub>
   1d532:	a908      	add	r1, sp, #32
   1d534:	4622      	mov	r2, r4
   1d536:	4608      	mov	r0, r1
   1d538:	f7e3 f876 	bl	628 <ocrypto_mod_p256_sub>
   1d53c:	a910      	add	r1, sp, #64	; 0x40
   1d53e:	aa08      	add	r2, sp, #32
   1d540:	4608      	mov	r0, r1
   1d542:	f7e3 f909 	bl	758 <ocrypto_mod_p256_mul>
   1d546:	463a      	mov	r2, r7
   1d548:	a910      	add	r1, sp, #64	; 0x40
   1d54a:	4638      	mov	r0, r7
   1d54c:	f7e3 f86c 	bl	628 <ocrypto_mod_p256_sub>
   1d550:	b019      	add	sp, #100	; 0x64
   1d552:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d554 <p256_zaddu>:
   1d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d558:	b088      	sub	sp, #32
   1d55a:	460c      	mov	r4, r1
   1d55c:	4605      	mov	r5, r0
   1d55e:	4690      	mov	r8, r2
   1d560:	460a      	mov	r2, r1
   1d562:	4601      	mov	r1, r0
   1d564:	4668      	mov	r0, sp
   1d566:	f7e3 f85f 	bl	628 <ocrypto_mod_p256_sub>
   1d56a:	4669      	mov	r1, sp
   1d56c:	4668      	mov	r0, sp
   1d56e:	f7e3 f90b 	bl	788 <ocrypto_mod_p256_sqr>
   1d572:	466a      	mov	r2, sp
   1d574:	4629      	mov	r1, r5
   1d576:	4628      	mov	r0, r5
   1d578:	f104 0620 	add.w	r6, r4, #32
   1d57c:	f7e3 f8ec 	bl	758 <ocrypto_mod_p256_mul>
   1d580:	f105 0720 	add.w	r7, r5, #32
   1d584:	466a      	mov	r2, sp
   1d586:	4621      	mov	r1, r4
   1d588:	4668      	mov	r0, sp
   1d58a:	f7e3 f8e5 	bl	758 <ocrypto_mod_p256_mul>
   1d58e:	4632      	mov	r2, r6
   1d590:	4639      	mov	r1, r7
   1d592:	4630      	mov	r0, r6
   1d594:	f7e3 f848 	bl	628 <ocrypto_mod_p256_sub>
   1d598:	4631      	mov	r1, r6
   1d59a:	4620      	mov	r0, r4
   1d59c:	f7e3 f8f4 	bl	788 <ocrypto_mod_p256_sqr>
   1d5a0:	462a      	mov	r2, r5
   1d5a2:	4621      	mov	r1, r4
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	f7e3 f83f 	bl	628 <ocrypto_mod_p256_sub>
   1d5aa:	466a      	mov	r2, sp
   1d5ac:	4621      	mov	r1, r4
   1d5ae:	4620      	mov	r0, r4
   1d5b0:	f7e3 f83a 	bl	628 <ocrypto_mod_p256_sub>
   1d5b4:	466a      	mov	r2, sp
   1d5b6:	4629      	mov	r1, r5
   1d5b8:	4640      	mov	r0, r8
   1d5ba:	f7e3 f835 	bl	628 <ocrypto_mod_p256_sub>
   1d5be:	4642      	mov	r2, r8
   1d5c0:	4639      	mov	r1, r7
   1d5c2:	4638      	mov	r0, r7
   1d5c4:	f7e3 f8c8 	bl	758 <ocrypto_mod_p256_mul>
   1d5c8:	4622      	mov	r2, r4
   1d5ca:	4629      	mov	r1, r5
   1d5cc:	4668      	mov	r0, sp
   1d5ce:	f7e3 f82b 	bl	628 <ocrypto_mod_p256_sub>
   1d5d2:	466a      	mov	r2, sp
   1d5d4:	4631      	mov	r1, r6
   1d5d6:	4630      	mov	r0, r6
   1d5d8:	f7e3 f8be 	bl	758 <ocrypto_mod_p256_mul>
   1d5dc:	463a      	mov	r2, r7
   1d5de:	4631      	mov	r1, r6
   1d5e0:	4630      	mov	r0, r6
   1d5e2:	f7e3 f821 	bl	628 <ocrypto_mod_p256_sub>
   1d5e6:	b008      	add	sp, #32
   1d5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d5ec <ocrypto_curve_p256_from64bytes>:
   1d5ec:	b570      	push	{r4, r5, r6, lr}
   1d5ee:	f100 0620 	add.w	r6, r0, #32
   1d5f2:	b090      	sub	sp, #64	; 0x40
   1d5f4:	460d      	mov	r5, r1
   1d5f6:	4604      	mov	r4, r0
   1d5f8:	f000 f914 	bl	1d824 <ocrypto_mod_p256_from_bytes>
   1d5fc:	f105 0120 	add.w	r1, r5, #32
   1d600:	4630      	mov	r0, r6
   1d602:	f000 f90f 	bl	1d824 <ocrypto_mod_p256_from_bytes>
   1d606:	4621      	mov	r1, r4
   1d608:	a808      	add	r0, sp, #32
   1d60a:	f7e3 f8bd 	bl	788 <ocrypto_mod_p256_sqr>
   1d60e:	a908      	add	r1, sp, #32
   1d610:	4608      	mov	r0, r1
   1d612:	4a0d      	ldr	r2, [pc, #52]	; (1d648 <ocrypto_curve_p256_from64bytes+0x5c>)
   1d614:	f7e2 ffca 	bl	5ac <ocrypto_mod_p256_add>
   1d618:	a908      	add	r1, sp, #32
   1d61a:	4622      	mov	r2, r4
   1d61c:	4608      	mov	r0, r1
   1d61e:	f7e3 f89b 	bl	758 <ocrypto_mod_p256_mul>
   1d622:	a908      	add	r1, sp, #32
   1d624:	4a09      	ldr	r2, [pc, #36]	; (1d64c <ocrypto_curve_p256_from64bytes+0x60>)
   1d626:	4608      	mov	r0, r1
   1d628:	f7e2 ffc0 	bl	5ac <ocrypto_mod_p256_add>
   1d62c:	4631      	mov	r1, r6
   1d62e:	4668      	mov	r0, sp
   1d630:	f7e3 f8aa 	bl	788 <ocrypto_mod_p256_sqr>
   1d634:	2220      	movs	r2, #32
   1d636:	4669      	mov	r1, sp
   1d638:	eb0d 0002 	add.w	r0, sp, r2
   1d63c:	f7e2 ff88 	bl	550 <ocrypto_constant_time_equal>
   1d640:	3801      	subs	r0, #1
   1d642:	b010      	add	sp, #64	; 0x40
   1d644:	bd70      	pop	{r4, r5, r6, pc}
   1d646:	bf00      	nop
   1d648:	00021d44 	.word	0x00021d44
   1d64c:	00021d64 	.word	0x00021d64

0001d650 <ocrypto_curve_p256_to32bytes>:
   1d650:	f000 b902 	b.w	1d858 <ocrypto_mod_p256_to_bytes>

0001d654 <ocrypto_curve_p256_to64bytes>:
   1d654:	b538      	push	{r3, r4, r5, lr}
   1d656:	4604      	mov	r4, r0
   1d658:	460d      	mov	r5, r1
   1d65a:	f000 f8fd 	bl	1d858 <ocrypto_mod_p256_to_bytes>
   1d65e:	f105 0120 	add.w	r1, r5, #32
   1d662:	f104 0020 	add.w	r0, r4, #32
   1d666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1d66a:	f000 b8f5 	b.w	1d858 <ocrypto_mod_p256_to_bytes>
   1d66e:	bf00      	nop

0001d670 <ocrypto_curve_p256_scalarmult>:
   1d670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d674:	4613      	mov	r3, r2
   1d676:	b0b8      	sub	sp, #224	; 0xe0
   1d678:	4a54      	ldr	r2, [pc, #336]	; (1d7cc <ocrypto_curve_p256_scalarmult+0x15c>)
   1d67a:	4689      	mov	r9, r1
   1d67c:	4680      	mov	r8, r0
   1d67e:	4619      	mov	r1, r3
   1d680:	a810      	add	r0, sp, #64	; 0x40
   1d682:	f7e2 fd77 	bl	174 <ocrypto_bigint_sub256>
   1d686:	4952      	ldr	r1, [pc, #328]	; (1d7d0 <ocrypto_curve_p256_scalarmult+0x160>)
   1d688:	4602      	mov	r2, r0
   1d68a:	a810      	add	r0, sp, #64	; 0x40
   1d68c:	f7e2 fd92 	bl	1b4 <ocrypto_bigint_cadd256>
   1d690:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   1d692:	494e      	ldr	r1, [pc, #312]	; (1d7cc <ocrypto_curve_p256_scalarmult+0x15c>)
   1d694:	ea00 76d6 	and.w	r6, r0, r6, lsr #31
   1d698:	4607      	mov	r7, r0
   1d69a:	f1c6 0201 	rsb	r2, r6, #1
   1d69e:	a810      	add	r0, sp, #64	; 0x40
   1d6a0:	f7e2 fd88 	bl	1b4 <ocrypto_bigint_cadd256>
   1d6a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d6a6:	464a      	mov	r2, r9
   1d6a8:	ea6f 0a03 	mvn.w	sl, r3
   1d6ac:	a928      	add	r1, sp, #160	; 0xa0
   1d6ae:	a818      	add	r0, sp, #96	; 0x60
   1d6b0:	f7ff fe8e 	bl	1d3d0 <p256_zdblu>
   1d6b4:	ea4f 7ada 	mov.w	sl, sl, lsr #31
   1d6b8:	a920      	add	r1, sp, #128	; 0x80
   1d6ba:	f1ca 0201 	rsb	r2, sl, #1
   1d6be:	4608      	mov	r0, r1
   1d6c0:	f000 f892 	bl	1d7e8 <ocrypto_mod_p256_cneg>
   1d6c4:	f1c7 0701 	rsb	r7, r7, #1
   1d6c8:	24fe      	movs	r4, #254	; 0xfe
   1d6ca:	466a      	mov	r2, sp
   1d6cc:	a918      	add	r1, sp, #96	; 0x60
   1d6ce:	a828      	add	r0, sp, #160	; 0xa0
   1d6d0:	f7ff ff40 	bl	1d554 <p256_zaddu>
   1d6d4:	1162      	asrs	r2, r4, #5
   1d6d6:	ab38      	add	r3, sp, #224	; 0xe0
   1d6d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1d6dc:	f004 011f 	and.w	r1, r4, #31
   1d6e0:	f852 3ca0 	ldr.w	r3, [r2, #-160]
   1d6e4:	40cb      	lsrs	r3, r1
   1d6e6:	4655      	mov	r5, sl
   1d6e8:	f003 0a01 	and.w	sl, r3, #1
   1d6ec:	ea8a 0505 	eor.w	r5, sl, r5
   1d6f0:	462a      	mov	r2, r5
   1d6f2:	a928      	add	r1, sp, #160	; 0xa0
   1d6f4:	a818      	add	r0, sp, #96	; 0x60
   1d6f6:	f7e2 fdb9 	bl	26c <ocrypto_bigint_cswap256>
   1d6fa:	462a      	mov	r2, r5
   1d6fc:	a930      	add	r1, sp, #192	; 0xc0
   1d6fe:	a820      	add	r0, sp, #128	; 0x80
   1d700:	f7e2 fdb4 	bl	26c <ocrypto_bigint_cswap256>
   1d704:	3c01      	subs	r4, #1
   1d706:	a928      	add	r1, sp, #160	; 0xa0
   1d708:	a818      	add	r0, sp, #96	; 0x60
   1d70a:	f7ff febd 	bl	1d488 <p256_zaddc>
   1d70e:	1c63      	adds	r3, r4, #1
   1d710:	d1db      	bne.n	1d6ca <ocrypto_curve_p256_scalarmult+0x5a>
   1d712:	f1ca 0201 	rsb	r2, sl, #1
   1d716:	a920      	add	r1, sp, #128	; 0x80
   1d718:	a808      	add	r0, sp, #32
   1d71a:	f000 f865 	bl	1d7e8 <ocrypto_mod_p256_cneg>
   1d71e:	ea86 060a 	eor.w	r6, r6, sl
   1d722:	466a      	mov	r2, sp
   1d724:	a918      	add	r1, sp, #96	; 0x60
   1d726:	a828      	add	r0, sp, #160	; 0xa0
   1d728:	f7ff ff14 	bl	1d554 <p256_zaddu>
   1d72c:	a928      	add	r1, sp, #160	; 0xa0
   1d72e:	4632      	mov	r2, r6
   1d730:	a818      	add	r0, sp, #96	; 0x60
   1d732:	f7e2 fd9b 	bl	26c <ocrypto_bigint_cswap256>
   1d736:	4632      	mov	r2, r6
   1d738:	a930      	add	r1, sp, #192	; 0xc0
   1d73a:	a820      	add	r0, sp, #128	; 0x80
   1d73c:	f7e2 fd96 	bl	26c <ocrypto_bigint_cswap256>
   1d740:	a908      	add	r1, sp, #32
   1d742:	466a      	mov	r2, sp
   1d744:	4608      	mov	r0, r1
   1d746:	f7e3 f807 	bl	758 <ocrypto_mod_p256_mul>
   1d74a:	a908      	add	r1, sp, #32
   1d74c:	4608      	mov	r0, r1
   1d74e:	f000 f89d 	bl	1d88c <ocrypto_mod_p256_inv>
   1d752:	a908      	add	r1, sp, #32
   1d754:	f108 0420 	add.w	r4, r8, #32
   1d758:	f109 0220 	add.w	r2, r9, #32
   1d75c:	4608      	mov	r0, r1
   1d75e:	f7e2 fffb 	bl	758 <ocrypto_mod_p256_mul>
   1d762:	a920      	add	r1, sp, #128	; 0x80
   1d764:	aa08      	add	r2, sp, #32
   1d766:	4620      	mov	r0, r4
   1d768:	f7e2 fff6 	bl	758 <ocrypto_mod_p256_mul>
   1d76c:	aa08      	add	r2, sp, #32
   1d76e:	a918      	add	r1, sp, #96	; 0x60
   1d770:	4668      	mov	r0, sp
   1d772:	f7e2 fff1 	bl	758 <ocrypto_mod_p256_mul>
   1d776:	4669      	mov	r1, sp
   1d778:	4668      	mov	r0, sp
   1d77a:	f7e3 f805 	bl	788 <ocrypto_mod_p256_sqr>
   1d77e:	aa18      	add	r2, sp, #96	; 0x60
   1d780:	4669      	mov	r1, sp
   1d782:	a808      	add	r0, sp, #32
   1d784:	f7e2 ffe8 	bl	758 <ocrypto_mod_p256_mul>
   1d788:	4621      	mov	r1, r4
   1d78a:	4668      	mov	r0, sp
   1d78c:	f7e2 fffc 	bl	788 <ocrypto_mod_p256_sqr>
   1d790:	aa08      	add	r2, sp, #32
   1d792:	4669      	mov	r1, sp
   1d794:	4610      	mov	r0, r2
   1d796:	f7e2 ff47 	bl	628 <ocrypto_mod_p256_sub>
   1d79a:	4a0e      	ldr	r2, [pc, #56]	; (1d7d4 <ocrypto_curve_p256_scalarmult+0x164>)
   1d79c:	a908      	add	r1, sp, #32
   1d79e:	4668      	mov	r0, sp
   1d7a0:	f7e2 ff42 	bl	628 <ocrypto_mod_p256_sub>
   1d7a4:	4620      	mov	r0, r4
   1d7a6:	2120      	movs	r1, #32
   1d7a8:	f7e2 fee6 	bl	578 <ocrypto_constant_time_is_zero>
   1d7ac:	a908      	add	r1, sp, #32
   1d7ae:	4243      	negs	r3, r0
   1d7b0:	4602      	mov	r2, r0
   1d7b2:	4668      	mov	r0, sp
   1d7b4:	431f      	orrs	r7, r3
   1d7b6:	f7e2 fd59 	bl	26c <ocrypto_bigint_cswap256>
   1d7ba:	4640      	mov	r0, r8
   1d7bc:	4a06      	ldr	r2, [pc, #24]	; (1d7d8 <ocrypto_curve_p256_scalarmult+0x168>)
   1d7be:	4669      	mov	r1, sp
   1d7c0:	f7e2 ffca 	bl	758 <ocrypto_mod_p256_mul>
   1d7c4:	4638      	mov	r0, r7
   1d7c6:	b038      	add	sp, #224	; 0xe0
   1d7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d7cc:	00021d84 	.word	0x00021d84
   1d7d0:	00021d04 	.word	0x00021d04
   1d7d4:	00021d64 	.word	0x00021d64
   1d7d8:	00021d24 	.word	0x00021d24

0001d7dc <ocrypto_curve_p256_scalarmult_base>:
   1d7dc:	460a      	mov	r2, r1
   1d7de:	4901      	ldr	r1, [pc, #4]	; (1d7e4 <ocrypto_curve_p256_scalarmult_base+0x8>)
   1d7e0:	f7ff bf46 	b.w	1d670 <ocrypto_curve_p256_scalarmult>
   1d7e4:	00021cc4 	.word	0x00021cc4

0001d7e8 <ocrypto_mod_p256_cneg>:
   1d7e8:	b570      	push	{r4, r5, r6, lr}
   1d7ea:	b088      	sub	sp, #32
   1d7ec:	4604      	mov	r4, r0
   1d7ee:	460d      	mov	r5, r1
   1d7f0:	4616      	mov	r6, r2
   1d7f2:	2100      	movs	r1, #0
   1d7f4:	2220      	movs	r2, #32
   1d7f6:	4668      	mov	r0, sp
   1d7f8:	f000 ffcd 	bl	1e796 <memset>
   1d7fc:	2300      	movs	r3, #0
   1d7fe:	4629      	mov	r1, r5
   1d800:	2220      	movs	r2, #32
   1d802:	4620      	mov	r0, r4
   1d804:	9300      	str	r3, [sp, #0]
   1d806:	f000 ffbb 	bl	1e780 <memcpy>
   1d80a:	462a      	mov	r2, r5
   1d80c:	4669      	mov	r1, sp
   1d80e:	4668      	mov	r0, sp
   1d810:	f7e2 ff0a 	bl	628 <ocrypto_mod_p256_sub>
   1d814:	4632      	mov	r2, r6
   1d816:	4669      	mov	r1, sp
   1d818:	4620      	mov	r0, r4
   1d81a:	f7e2 fd27 	bl	26c <ocrypto_bigint_cswap256>
   1d81e:	b008      	add	sp, #32
   1d820:	bd70      	pop	{r4, r5, r6, pc}
   1d822:	bf00      	nop

0001d824 <ocrypto_mod_p256_from_bytes>:
   1d824:	680b      	ldr	r3, [r1, #0]
   1d826:	ba1b      	rev	r3, r3
   1d828:	61c3      	str	r3, [r0, #28]
   1d82a:	684b      	ldr	r3, [r1, #4]
   1d82c:	ba1b      	rev	r3, r3
   1d82e:	6183      	str	r3, [r0, #24]
   1d830:	688b      	ldr	r3, [r1, #8]
   1d832:	ba1b      	rev	r3, r3
   1d834:	6143      	str	r3, [r0, #20]
   1d836:	68cb      	ldr	r3, [r1, #12]
   1d838:	ba1b      	rev	r3, r3
   1d83a:	6103      	str	r3, [r0, #16]
   1d83c:	690b      	ldr	r3, [r1, #16]
   1d83e:	ba1b      	rev	r3, r3
   1d840:	60c3      	str	r3, [r0, #12]
   1d842:	694b      	ldr	r3, [r1, #20]
   1d844:	ba1b      	rev	r3, r3
   1d846:	6083      	str	r3, [r0, #8]
   1d848:	698b      	ldr	r3, [r1, #24]
   1d84a:	ba1b      	rev	r3, r3
   1d84c:	6043      	str	r3, [r0, #4]
   1d84e:	69cb      	ldr	r3, [r1, #28]
   1d850:	ba1b      	rev	r3, r3
   1d852:	6003      	str	r3, [r0, #0]
   1d854:	4770      	bx	lr
   1d856:	bf00      	nop

0001d858 <ocrypto_mod_p256_to_bytes>:
   1d858:	69cb      	ldr	r3, [r1, #28]
   1d85a:	ba1b      	rev	r3, r3
   1d85c:	6003      	str	r3, [r0, #0]
   1d85e:	698b      	ldr	r3, [r1, #24]
   1d860:	ba1b      	rev	r3, r3
   1d862:	6043      	str	r3, [r0, #4]
   1d864:	694b      	ldr	r3, [r1, #20]
   1d866:	ba1b      	rev	r3, r3
   1d868:	6083      	str	r3, [r0, #8]
   1d86a:	690b      	ldr	r3, [r1, #16]
   1d86c:	ba1b      	rev	r3, r3
   1d86e:	60c3      	str	r3, [r0, #12]
   1d870:	68cb      	ldr	r3, [r1, #12]
   1d872:	ba1b      	rev	r3, r3
   1d874:	6103      	str	r3, [r0, #16]
   1d876:	688b      	ldr	r3, [r1, #8]
   1d878:	ba1b      	rev	r3, r3
   1d87a:	6143      	str	r3, [r0, #20]
   1d87c:	684b      	ldr	r3, [r1, #4]
   1d87e:	ba1b      	rev	r3, r3
   1d880:	6183      	str	r3, [r0, #24]
   1d882:	680b      	ldr	r3, [r1, #0]
   1d884:	ba1b      	rev	r3, r3
   1d886:	61c3      	str	r3, [r0, #28]
   1d888:	4770      	bx	lr
   1d88a:	bf00      	nop

0001d88c <ocrypto_mod_p256_inv>:
   1d88c:	b570      	push	{r4, r5, r6, lr}
   1d88e:	b098      	sub	sp, #96	; 0x60
   1d890:	460d      	mov	r5, r1
   1d892:	4606      	mov	r6, r0
   1d894:	a810      	add	r0, sp, #64	; 0x40
   1d896:	f7e2 ff77 	bl	788 <ocrypto_mod_p256_sqr>
   1d89a:	462a      	mov	r2, r5
   1d89c:	a910      	add	r1, sp, #64	; 0x40
   1d89e:	4668      	mov	r0, sp
   1d8a0:	f7e2 ff5a 	bl	758 <ocrypto_mod_p256_mul>
   1d8a4:	4669      	mov	r1, sp
   1d8a6:	a810      	add	r0, sp, #64	; 0x40
   1d8a8:	f7e2 ff6e 	bl	788 <ocrypto_mod_p256_sqr>
   1d8ac:	a910      	add	r1, sp, #64	; 0x40
   1d8ae:	4608      	mov	r0, r1
   1d8b0:	f7e2 ff6a 	bl	788 <ocrypto_mod_p256_sqr>
   1d8b4:	466a      	mov	r2, sp
   1d8b6:	a910      	add	r1, sp, #64	; 0x40
   1d8b8:	a808      	add	r0, sp, #32
   1d8ba:	f7e2 ff4d 	bl	758 <ocrypto_mod_p256_mul>
   1d8be:	a908      	add	r1, sp, #32
   1d8c0:	a810      	add	r0, sp, #64	; 0x40
   1d8c2:	f7e2 ff61 	bl	788 <ocrypto_mod_p256_sqr>
   1d8c6:	a910      	add	r1, sp, #64	; 0x40
   1d8c8:	4608      	mov	r0, r1
   1d8ca:	f7e2 ff5d 	bl	788 <ocrypto_mod_p256_sqr>
   1d8ce:	a910      	add	r1, sp, #64	; 0x40
   1d8d0:	4608      	mov	r0, r1
   1d8d2:	f7e2 ff59 	bl	788 <ocrypto_mod_p256_sqr>
   1d8d6:	a910      	add	r1, sp, #64	; 0x40
   1d8d8:	4608      	mov	r0, r1
   1d8da:	f7e2 ff55 	bl	788 <ocrypto_mod_p256_sqr>
   1d8de:	a910      	add	r1, sp, #64	; 0x40
   1d8e0:	aa08      	add	r2, sp, #32
   1d8e2:	4608      	mov	r0, r1
   1d8e4:	f7e2 ff38 	bl	758 <ocrypto_mod_p256_mul>
   1d8e8:	a910      	add	r1, sp, #64	; 0x40
   1d8ea:	4608      	mov	r0, r1
   1d8ec:	f7e2 ff4c 	bl	788 <ocrypto_mod_p256_sqr>
   1d8f0:	a910      	add	r1, sp, #64	; 0x40
   1d8f2:	4608      	mov	r0, r1
   1d8f4:	f7e2 ff48 	bl	788 <ocrypto_mod_p256_sqr>
   1d8f8:	a910      	add	r1, sp, #64	; 0x40
   1d8fa:	466a      	mov	r2, sp
   1d8fc:	a808      	add	r0, sp, #32
   1d8fe:	f7e2 ff2b 	bl	758 <ocrypto_mod_p256_mul>
   1d902:	2405      	movs	r4, #5
   1d904:	a908      	add	r1, sp, #32
   1d906:	a810      	add	r0, sp, #64	; 0x40
   1d908:	f7e2 ff3e 	bl	788 <ocrypto_mod_p256_sqr>
   1d90c:	a910      	add	r1, sp, #64	; 0x40
   1d90e:	4608      	mov	r0, r1
   1d910:	f7e2 ff3a 	bl	788 <ocrypto_mod_p256_sqr>
   1d914:	3c01      	subs	r4, #1
   1d916:	a910      	add	r1, sp, #64	; 0x40
   1d918:	d1f5      	bne.n	1d906 <ocrypto_mod_p256_inv+0x7a>
   1d91a:	aa08      	add	r2, sp, #32
   1d91c:	4608      	mov	r0, r1
   1d91e:	f7e2 ff1b 	bl	758 <ocrypto_mod_p256_mul>
   1d922:	2405      	movs	r4, #5
   1d924:	a910      	add	r1, sp, #64	; 0x40
   1d926:	4608      	mov	r0, r1
   1d928:	f7e2 ff2e 	bl	788 <ocrypto_mod_p256_sqr>
   1d92c:	a910      	add	r1, sp, #64	; 0x40
   1d92e:	4608      	mov	r0, r1
   1d930:	f7e2 ff2a 	bl	788 <ocrypto_mod_p256_sqr>
   1d934:	3c01      	subs	r4, #1
   1d936:	d1f5      	bne.n	1d924 <ocrypto_mod_p256_inv+0x98>
   1d938:	a910      	add	r1, sp, #64	; 0x40
   1d93a:	aa08      	add	r2, sp, #32
   1d93c:	4608      	mov	r0, r1
   1d93e:	f7e2 ff0b 	bl	758 <ocrypto_mod_p256_mul>
   1d942:	a910      	add	r1, sp, #64	; 0x40
   1d944:	a808      	add	r0, sp, #32
   1d946:	f7e2 ff1f 	bl	788 <ocrypto_mod_p256_sqr>
   1d94a:	a908      	add	r1, sp, #32
   1d94c:	4608      	mov	r0, r1
   1d94e:	f7e2 ff1b 	bl	788 <ocrypto_mod_p256_sqr>
   1d952:	a908      	add	r1, sp, #32
   1d954:	466a      	mov	r2, sp
   1d956:	4668      	mov	r0, sp
   1d958:	f7e2 fefe 	bl	758 <ocrypto_mod_p256_mul>
   1d95c:	2410      	movs	r4, #16
   1d95e:	4669      	mov	r1, sp
   1d960:	a810      	add	r0, sp, #64	; 0x40
   1d962:	f7e2 ff11 	bl	788 <ocrypto_mod_p256_sqr>
   1d966:	a910      	add	r1, sp, #64	; 0x40
   1d968:	4608      	mov	r0, r1
   1d96a:	f7e2 ff0d 	bl	788 <ocrypto_mod_p256_sqr>
   1d96e:	3c01      	subs	r4, #1
   1d970:	a910      	add	r1, sp, #64	; 0x40
   1d972:	d1f5      	bne.n	1d960 <ocrypto_mod_p256_inv+0xd4>
   1d974:	462a      	mov	r2, r5
   1d976:	4608      	mov	r0, r1
   1d978:	f7e2 feee 	bl	758 <ocrypto_mod_p256_mul>
   1d97c:	2440      	movs	r4, #64	; 0x40
   1d97e:	a910      	add	r1, sp, #64	; 0x40
   1d980:	4608      	mov	r0, r1
   1d982:	f7e2 ff01 	bl	788 <ocrypto_mod_p256_sqr>
   1d986:	a910      	add	r1, sp, #64	; 0x40
   1d988:	4608      	mov	r0, r1
   1d98a:	f7e2 fefd 	bl	788 <ocrypto_mod_p256_sqr>
   1d98e:	3c01      	subs	r4, #1
   1d990:	d1f5      	bne.n	1d97e <ocrypto_mod_p256_inv+0xf2>
   1d992:	a910      	add	r1, sp, #64	; 0x40
   1d994:	466a      	mov	r2, sp
   1d996:	4608      	mov	r0, r1
   1d998:	f7e2 fede 	bl	758 <ocrypto_mod_p256_mul>
   1d99c:	2410      	movs	r4, #16
   1d99e:	a910      	add	r1, sp, #64	; 0x40
   1d9a0:	4608      	mov	r0, r1
   1d9a2:	f7e2 fef1 	bl	788 <ocrypto_mod_p256_sqr>
   1d9a6:	a910      	add	r1, sp, #64	; 0x40
   1d9a8:	4608      	mov	r0, r1
   1d9aa:	f7e2 feed 	bl	788 <ocrypto_mod_p256_sqr>
   1d9ae:	3c01      	subs	r4, #1
   1d9b0:	d1f5      	bne.n	1d99e <ocrypto_mod_p256_inv+0x112>
   1d9b2:	a910      	add	r1, sp, #64	; 0x40
   1d9b4:	466a      	mov	r2, sp
   1d9b6:	4608      	mov	r0, r1
   1d9b8:	f7e2 fece 	bl	758 <ocrypto_mod_p256_mul>
   1d9bc:	2410      	movs	r4, #16
   1d9be:	a910      	add	r1, sp, #64	; 0x40
   1d9c0:	4608      	mov	r0, r1
   1d9c2:	f7e2 fee1 	bl	788 <ocrypto_mod_p256_sqr>
   1d9c6:	a910      	add	r1, sp, #64	; 0x40
   1d9c8:	4608      	mov	r0, r1
   1d9ca:	f7e2 fedd 	bl	788 <ocrypto_mod_p256_sqr>
   1d9ce:	3c01      	subs	r4, #1
   1d9d0:	d1f5      	bne.n	1d9be <ocrypto_mod_p256_inv+0x132>
   1d9d2:	a910      	add	r1, sp, #64	; 0x40
   1d9d4:	aa08      	add	r2, sp, #32
   1d9d6:	4608      	mov	r0, r1
   1d9d8:	f7e2 febe 	bl	758 <ocrypto_mod_p256_mul>
   1d9dc:	462a      	mov	r2, r5
   1d9de:	a910      	add	r1, sp, #64	; 0x40
   1d9e0:	4630      	mov	r0, r6
   1d9e2:	f7e2 feb9 	bl	758 <ocrypto_mod_p256_mul>
   1d9e6:	b018      	add	sp, #96	; 0x60
   1d9e8:	bd70      	pop	{r4, r5, r6, pc}
   1d9ea:	bf00      	nop

0001d9ec <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1d9ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1d9ee:	ab0b      	add	r3, sp, #44	; 0x2c
   1d9f0:	9305      	str	r3, [sp, #20]
   1d9f2:	9303      	str	r3, [sp, #12]
   1d9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d9f6:	9302      	str	r3, [sp, #8]
   1d9f8:	2300      	movs	r3, #0
   1d9fa:	e9cd 3300 	strd	r3, r3, [sp]
   1d9fe:	4618      	mov	r0, r3
   1da00:	f7f4 f9e8 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1da04:	b007      	add	sp, #28
   1da06:	f85d fb04 	ldr.w	pc, [sp], #4

0001da0a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
   1da0a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1da0e:	4606      	mov	r6, r0
   1da10:	460d      	mov	r5, r1
   1da12:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
   1da14:	4698      	mov	r8, r3
   1da16:	b32b      	cbz	r3, 1da64 <cbpprintf_external+0x5a>
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
   1da18:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
   1da1c:	f893 9001 	ldrb.w	r9, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1da20:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
   1da22:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1da24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
   1da28:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
   1da2c:	441c      	add	r4, r3
   1da2e:	4444      	add	r4, r8

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   1da30:	f04f 0a00 	mov.w	sl, #0
   1da34:	45ca      	cmp	sl, r9
   1da36:	d309      	bcc.n	1da4c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
   1da38:	f8d8 2004 	ldr.w	r2, [r8, #4]
   1da3c:	f108 0308 	add.w	r3, r8, #8
   1da40:	4639      	mov	r1, r7
   1da42:	4630      	mov	r0, r6
   1da44:	46ac      	mov	ip, r5
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
   1da46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   1da4a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   1da4c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   1da50:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
   1da54:	4620      	mov	r0, r4
   1da56:	f000 fe67 	bl	1e728 <strlen>
   1da5a:	3001      	adds	r0, #1
   1da5c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   1da5e:	f10a 0a01 	add.w	sl, sl, #1
   1da62:	e7e7      	b.n	1da34 <cbpprintf_external+0x2a>
}
   1da64:	f06f 0015 	mvn.w	r0, #21
   1da68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001da6c <char2hex>:
#include <errno.h>
#include <zephyr/sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1da6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1da70:	b2db      	uxtb	r3, r3
   1da72:	2b09      	cmp	r3, #9
   1da74:	d802      	bhi.n	1da7c <char2hex+0x10>
		*x = c - '0';
   1da76:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1da78:	2000      	movs	r0, #0
   1da7a:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1da7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1da80:	2b05      	cmp	r3, #5
   1da82:	d802      	bhi.n	1da8a <char2hex+0x1e>
		*x = c - 'a' + 10;
   1da84:	3857      	subs	r0, #87	; 0x57
		*x = c - 'A' + 10;
   1da86:	b2c3      	uxtb	r3, r0
   1da88:	e7f5      	b.n	1da76 <char2hex+0xa>
	} else if (c >= 'A' && c <= 'F') {
   1da8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1da8e:	2b05      	cmp	r3, #5
   1da90:	d801      	bhi.n	1da96 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1da92:	3837      	subs	r0, #55	; 0x37
   1da94:	e7f7      	b.n	1da86 <char2hex+0x1a>
		return -EINVAL;
   1da96:	f06f 0015 	mvn.w	r0, #21
}
   1da9a:	4770      	bx	lr

0001da9c <arch_printk_char_out>:
}
   1da9c:	2000      	movs	r0, #0
   1da9e:	4770      	bx	lr

0001daa0 <str_out>:
{
   1daa0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1daa2:	688a      	ldr	r2, [r1, #8]
   1daa4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1daa6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1daa8:	b114      	cbz	r4, 1dab0 <str_out+0x10>
   1daaa:	684b      	ldr	r3, [r1, #4]
   1daac:	4293      	cmp	r3, r2
   1daae:	dc01      	bgt.n	1dab4 <str_out+0x14>
		ctx->count++;
   1dab0:	608d      	str	r5, [r1, #8]
}
   1dab2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1dab4:	3b01      	subs	r3, #1
   1dab6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1dab8:	bf08      	it	eq
   1daba:	2200      	moveq	r2, #0
   1dabc:	608d      	str	r5, [r1, #8]
   1dabe:	bf0c      	ite	eq
   1dac0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1dac2:	54a0      	strbne	r0, [r4, r2]
   1dac4:	e7f5      	b.n	1dab2 <str_out+0x12>

0001dac6 <vprintk>:
		z_log_vprintk(fmt, ap);
   1dac6:	f000 bb54 	b.w	1e172 <z_log_vprintk>

0001daca <printk>:
{
   1daca:	b40f      	push	{r0, r1, r2, r3}
   1dacc:	b507      	push	{r0, r1, r2, lr}
   1dace:	a904      	add	r1, sp, #16
   1dad0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1dad4:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   1dad6:	f000 fb4c 	bl	1e172 <z_log_vprintk>
}
   1dada:	b003      	add	sp, #12
   1dadc:	f85d eb04 	ldr.w	lr, [sp], #4
   1dae0:	b004      	add	sp, #16
   1dae2:	4770      	bx	lr

0001dae4 <snprintk>:
{
   1dae4:	b40c      	push	{r2, r3}
   1dae6:	b507      	push	{r0, r1, r2, lr}
   1dae8:	ab04      	add	r3, sp, #16
   1daea:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1daee:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1daf0:	f7f3 fb96 	bl	11220 <vsnprintk>
}
   1daf4:	b003      	add	sp, #12
   1daf6:	f85d eb04 	ldr.w	lr, [sp], #4
   1dafa:	b002      	add	sp, #8
   1dafc:	4770      	bx	lr

0001dafe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1dafe:	4604      	mov	r4, r0
   1db00:	b508      	push	{r3, lr}
   1db02:	4608      	mov	r0, r1
   1db04:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   1db06:	461a      	mov	r2, r3
   1db08:	47a0      	blx	r4
	return z_impl_z_current_get();
   1db0a:	f7ff f98d 	bl	1ce28 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1db0e:	f7f5 fa51 	bl	12fb4 <z_impl_k_thread_abort>

0001db12 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   1db12:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   1db16:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   1db18:	0840      	lsrs	r0, r0, #1
   1db1a:	4770      	bx	lr

0001db1c <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   1db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1db1e:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   1db20:	f7ff fff7 	bl	1db12 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   1db24:	fab0 f080 	clz	r0, r0
   1db28:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   1db2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   1db30:	00ca      	lsls	r2, r1, #3
   1db32:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   1db36:	1d17      	adds	r7, r2, #4
{
   1db38:	460c      	mov	r4, r1
   1db3a:	3206      	adds	r2, #6
   1db3c:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   1db3e:	b956      	cbnz	r6, 1db56 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   1db40:	2101      	movs	r1, #1
   1db42:	fa01 f000 	lsl.w	r0, r1, r0
   1db46:	68d9      	ldr	r1, [r3, #12]
   1db48:	4301      	orrs	r1, r0
   1db4a:	60d9      	str	r1, [r3, #12]
		b->next = c;
   1db4c:	f8cc 4010 	str.w	r4, [ip, #16]
   1db50:	53dd      	strh	r5, [r3, r7]
   1db52:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   1db54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   1db56:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   1db58:	3104      	adds	r1, #4
   1db5a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   1db5c:	53d8      	strh	r0, [r3, r7]
   1db5e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1db62:	529e      	strh	r6, [r3, r2]
   1db64:	80c5      	strh	r5, [r0, #6]
   1db66:	525d      	strh	r5, [r3, r1]
   1db68:	e7f4      	b.n	1db54 <free_list_add+0x38>

0001db6a <free_list_remove_bidx>:
{
   1db6a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   1db6c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   1db70:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   1db72:	4299      	cmp	r1, r3
   1db74:	f102 0104 	add.w	r1, r2, #4
   1db78:	d10a      	bne.n	1db90 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   1db7a:	2301      	movs	r3, #1
   1db7c:	fa03 f202 	lsl.w	r2, r3, r2
   1db80:	68c3      	ldr	r3, [r0, #12]
   1db82:	ea23 0302 	bic.w	r3, r3, r2
   1db86:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   1db88:	2300      	movs	r3, #0
   1db8a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   1db8e:	bd10      	pop	{r4, pc}
   1db90:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   1db92:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   1db96:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   1db9a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1db9e:	80cb      	strh	r3, [r1, #6]
   1dba0:	8082      	strh	r2, [r0, #4]
}
   1dba2:	e7f4      	b.n	1db8e <free_list_remove_bidx+0x24>

0001dba4 <free_list_remove>:
{
   1dba4:	b508      	push	{r3, lr}
   1dba6:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   1dba8:	f7ff ffb3 	bl	1db12 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   1dbac:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1dbb0:	f1c2 021f 	rsb	r2, r2, #31
   1dbb4:	4618      	mov	r0, r3
}
   1dbb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   1dbba:	f7ff bfd6 	b.w	1db6a <free_list_remove_bidx>

0001dbbe <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1dbbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dbc2:	fab1 f581 	clz	r5, r1
   1dbc6:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1dbca:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
   1dbce:	4603      	mov	r3, r0
	if (b->next) {
   1dbd0:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
   1dbd4:	460e      	mov	r6, r1
	if (b->next) {
   1dbd6:	b1c2      	cbz	r2, 1dc0a <alloc_chunk+0x4c>
   1dbd8:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1dbda:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
   1dbde:	4618      	mov	r0, r3
   1dbe0:	4621      	mov	r1, r4
   1dbe2:	f7ff ff96 	bl	1db12 <chunk_size>
   1dbe6:	42b0      	cmp	r0, r6
   1dbe8:	d306      	bcc.n	1dbf8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   1dbea:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1dbec:	4618      	mov	r0, r3
   1dbee:	f7ff ffbc 	bl	1db6a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1dbf2:	4620      	mov	r0, r4
   1dbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   1dbf8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   1dbfc:	3f01      	subs	r7, #1
   1dbfe:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
   1dc00:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
   1dc04:	d001      	beq.n	1dc0a <alloc_chunk+0x4c>
   1dc06:	4282      	cmp	r2, r0
   1dc08:	d1e7      	bne.n	1dbda <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   1dc0a:	f1c5 0220 	rsb	r2, r5, #32
   1dc0e:	f04f 34ff 	mov.w	r4, #4294967295
   1dc12:	4094      	lsls	r4, r2
   1dc14:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   1dc16:	4014      	ands	r4, r2
   1dc18:	d0eb      	beq.n	1dbf2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   1dc1a:	fa94 f2a4 	rbit	r2, r4
   1dc1e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1dc22:	1d11      	adds	r1, r2, #4
   1dc24:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   1dc28:	4621      	mov	r1, r4
   1dc2a:	e7df      	b.n	1dbec <alloc_chunk+0x2e>

0001dc2c <merge_chunks>:
{
   1dc2c:	b538      	push	{r3, r4, r5, lr}
   1dc2e:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1dc30:	f7ff ff6f 	bl	1db12 <chunk_size>
{
   1dc34:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1dc36:	4604      	mov	r4, r0
   1dc38:	4611      	mov	r1, r2
   1dc3a:	4618      	mov	r0, r3
   1dc3c:	f7ff ff69 	bl	1db12 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   1dc40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1dc44:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1dc46:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   1dc48:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   1dc4a:	4618      	mov	r0, r3
   1dc4c:	f7ff ff61 	bl	1db12 <chunk_size>
	void *cmem = &buf[c];
   1dc50:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1dc52:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   1dc56:	bd38      	pop	{r3, r4, r5, pc}

0001dc58 <split_chunks>:
{
   1dc58:	b538      	push	{r3, r4, r5, lr}
   1dc5a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   1dc5c:	f7ff ff59 	bl	1db12 <chunk_size>
{
   1dc60:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   1dc62:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   1dc64:	1a51      	subs	r1, r2, r1
   1dc66:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   1dc6a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1dc6c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   1dc6e:	8060      	strh	r0, [r4, #2]
   1dc70:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1dc74:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   1dc76:	8044      	strh	r4, [r0, #2]
   1dc78:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   1dc7c:	4618      	mov	r0, r3
   1dc7e:	4611      	mov	r1, r2
   1dc80:	f7ff ff47 	bl	1db12 <chunk_size>
	void *cmem = &buf[c];
   1dc84:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   1dc86:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   1dc8a:	bd38      	pop	{r3, r4, r5, pc}

0001dc8c <free_chunk>:
{
   1dc8c:	b538      	push	{r3, r4, r5, lr}
   1dc8e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1dc90:	f7ff ff3f 	bl	1db12 <chunk_size>
   1dc94:	460c      	mov	r4, r1
   1dc96:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   1dc98:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1dc9c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   1dc9e:	07da      	lsls	r2, r3, #31
   1dca0:	d40a      	bmi.n	1dcb8 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   1dca2:	4628      	mov	r0, r5
   1dca4:	f7ff ff7e 	bl	1dba4 <free_list_remove>
	return c + chunk_size(h, c);
   1dca8:	4621      	mov	r1, r4
   1dcaa:	4628      	mov	r0, r5
   1dcac:	f7ff ff31 	bl	1db12 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1dcb0:	1822      	adds	r2, r4, r0
   1dcb2:	4628      	mov	r0, r5
   1dcb4:	f7ff ffba 	bl	1dc2c <merge_chunks>
		return ((uint16_t *)cmem)[f];
   1dcb8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1dcbc:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   1dcbe:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1dcc2:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   1dcc4:	07db      	lsls	r3, r3, #31
   1dcc6:	d40c      	bmi.n	1dce2 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   1dcc8:	4628      	mov	r0, r5
   1dcca:	f7ff ff6b 	bl	1dba4 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   1dcce:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   1dcd2:	4622      	mov	r2, r4
   1dcd4:	1a61      	subs	r1, r4, r1
   1dcd6:	4628      	mov	r0, r5
   1dcd8:	f7ff ffa8 	bl	1dc2c <merge_chunks>
   1dcdc:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   1dce0:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   1dce2:	4621      	mov	r1, r4
   1dce4:	4628      	mov	r0, r5
}
   1dce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   1dcea:	f7ff bf17 	b.w	1db1c <free_list_add>

0001dcee <sys_heap_free>:
	if (mem == NULL) {
   1dcee:	b161      	cbz	r1, 1dd0a <sys_heap_free+0x1c>
   1dcf0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1dcf2:	3904      	subs	r1, #4
   1dcf4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   1dcf6:	f021 0307 	bic.w	r3, r1, #7
   1dcfa:	4403      	add	r3, r0
	free_chunk(h, c);
   1dcfc:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1dcfe:	885a      	ldrh	r2, [r3, #2]
   1dd00:	f022 0201 	bic.w	r2, r2, #1
   1dd04:	805a      	strh	r2, [r3, #2]
   1dd06:	f7ff bfc1 	b.w	1dc8c <free_chunk>
}
   1dd0a:	4770      	bx	lr

0001dd0c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1dd0c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1dd0e:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   1dd10:	b909      	cbnz	r1, 1dd16 <sys_heap_alloc+0xa>
		return NULL;
   1dd12:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1dd14:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   1dd16:	68ab      	ldr	r3, [r5, #8]
   1dd18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1dd1c:	d9f9      	bls.n	1dd12 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1dd1e:	310b      	adds	r1, #11
   1dd20:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1dd22:	4621      	mov	r1, r4
   1dd24:	4628      	mov	r0, r5
   1dd26:	f7ff ff4a 	bl	1dbbe <alloc_chunk>
	if (c == 0U) {
   1dd2a:	4606      	mov	r6, r0
   1dd2c:	2800      	cmp	r0, #0
   1dd2e:	d0f0      	beq.n	1dd12 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1dd30:	4601      	mov	r1, r0
   1dd32:	4628      	mov	r0, r5
   1dd34:	f7ff feed 	bl	1db12 <chunk_size>
   1dd38:	42a0      	cmp	r0, r4
   1dd3a:	d907      	bls.n	1dd4c <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   1dd3c:	1932      	adds	r2, r6, r4
   1dd3e:	4628      	mov	r0, r5
   1dd40:	f7ff ff8a 	bl	1dc58 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1dd44:	4611      	mov	r1, r2
   1dd46:	4628      	mov	r0, r5
   1dd48:	f7ff fee8 	bl	1db1c <free_list_add>
	void *cmem = &buf[c];
   1dd4c:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1dd50:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1dd52:	8853      	ldrh	r3, [r2, #2]
   1dd54:	f043 0301 	orr.w	r3, r3, #1
   1dd58:	8053      	strh	r3, [r2, #2]
   1dd5a:	3004      	adds	r0, #4
	return mem;
   1dd5c:	e7da      	b.n	1dd14 <sys_heap_alloc+0x8>

0001dd5e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1dd5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd62:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
   1dd66:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
   1dd6a:	6806      	ldr	r6, [r0, #0]
{
   1dd6c:	460f      	mov	r7, r1
   1dd6e:	4614      	mov	r4, r2
	if (align != rew) {
   1dd70:	d00c      	beq.n	1dd8c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
   1dd72:	424b      	negs	r3, r1
   1dd74:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
   1dd76:	2b04      	cmp	r3, #4
   1dd78:	461a      	mov	r2, r3
   1dd7a:	464f      	mov	r7, r9
   1dd7c:	bf28      	it	cs
   1dd7e:	2204      	movcs	r2, #4
	rew = align & -align;
   1dd80:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1dd82:	b964      	cbnz	r4, 1dd9e <sys_heap_aligned_alloc+0x40>
		return NULL;
   1dd84:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
   1dd86:	4628      	mov	r0, r5
   1dd88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   1dd8c:	2904      	cmp	r1, #4
   1dd8e:	d804      	bhi.n	1dd9a <sys_heap_aligned_alloc+0x3c>
}
   1dd90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1dd94:	4611      	mov	r1, r2
   1dd96:	f7ff bfb9 	b.w	1dd0c <sys_heap_alloc>
		gap = chunk_header_bytes(h);
   1dd9a:	2204      	movs	r2, #4
   1dd9c:	e7f1      	b.n	1dd82 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1dd9e:	68b3      	ldr	r3, [r6, #8]
   1dda0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   1dda4:	d9ee      	bls.n	1dd84 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1dda6:	f104 010b 	add.w	r1, r4, #11
   1ddaa:	4439      	add	r1, r7
   1ddac:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1ddae:	08c9      	lsrs	r1, r1, #3
   1ddb0:	4630      	mov	r0, r6
   1ddb2:	f7ff ff04 	bl	1dbbe <alloc_chunk>
	if (c0 == 0) {
   1ddb6:	4680      	mov	r8, r0
   1ddb8:	2800      	cmp	r0, #0
   1ddba:	d0e3      	beq.n	1dd84 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1ddbc:	f109 0504 	add.w	r5, r9, #4
   1ddc0:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   1ddc4:	1e7b      	subs	r3, r7, #1
   1ddc6:	4435      	add	r5, r6
   1ddc8:	441d      	add	r5, r3
   1ddca:	427f      	negs	r7, r7
   1ddcc:	403d      	ands	r5, r7
   1ddce:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ddd2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ddd4:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ddd6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1ddd8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1ddda:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1ddde:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1dde0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1dde4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1dde8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1ddec:	d208      	bcs.n	1de00 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
   1ddee:	4601      	mov	r1, r0
   1ddf0:	463a      	mov	r2, r7
   1ddf2:	4630      	mov	r0, r6
   1ddf4:	f7ff ff30 	bl	1dc58 <split_chunks>
		free_list_add(h, c0);
   1ddf8:	4641      	mov	r1, r8
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	f7ff fe8e 	bl	1db1c <free_list_add>
	return c + chunk_size(h, c);
   1de00:	4639      	mov	r1, r7
   1de02:	4630      	mov	r0, r6
   1de04:	f7ff fe85 	bl	1db12 <chunk_size>
   1de08:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1de0a:	4284      	cmp	r4, r0
   1de0c:	d207      	bcs.n	1de1e <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
   1de0e:	4630      	mov	r0, r6
   1de10:	4622      	mov	r2, r4
   1de12:	f7ff ff21 	bl	1dc58 <split_chunks>
		free_list_add(h, c_end);
   1de16:	4621      	mov	r1, r4
   1de18:	4630      	mov	r0, r6
   1de1a:	f7ff fe7f 	bl	1db1c <free_list_add>
	void *cmem = &buf[c];
   1de1e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1de22:	8873      	ldrh	r3, [r6, #2]
   1de24:	f043 0301 	orr.w	r3, r3, #1
   1de28:	8073      	strh	r3, [r6, #2]
   1de2a:	e7ac      	b.n	1dd86 <sys_heap_aligned_alloc+0x28>

0001de2c <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1de2c:	3a04      	subs	r2, #4
{
   1de2e:	b4f0      	push	{r4, r5, r6, r7}
   1de30:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1de32:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1de34:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1de36:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1de3a:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1de3e:	1a0e      	subs	r6, r1, r0
   1de40:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   1de42:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
   1de44:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1de48:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1de4a:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
   1de4e:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
   1de50:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1de52:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
   1de54:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1de58:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1de5a:	f1c2 0220 	rsb	r2, r2, #32
   1de5e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1de60:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
   1de64:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
   1de68:	4294      	cmp	r4, r2
   1de6a:	d1fb      	bne.n	1de64 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1de6c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1de6e:	f042 0201 	orr.w	r2, r2, #1
   1de72:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
   1de74:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1de78:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1de7a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
   1de7c:	8007      	strh	r7, [r0, #0]
   1de7e:	8065      	strh	r5, [r4, #2]
   1de80:	1984      	adds	r4, r0, r6
   1de82:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
   1de86:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
   1de8a:	8067      	strh	r7, [r4, #2]
   1de8c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1de8e:	885a      	ldrh	r2, [r3, #2]
   1de90:	f042 0201 	orr.w	r2, r2, #1
   1de94:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   1de96:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   1de98:	f7ff be40 	b.w	1db1c <free_list_add>

0001de9c <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1de9c:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1de9e:	f013 0307 	ands.w	r3, r3, #7
   1dea2:	d105      	bne.n	1deb0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1dea4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1dea6:	2b00      	cmp	r3, #0
   1dea8:	bf0c      	ite	eq
   1deaa:	2000      	moveq	r0, #0
   1deac:	2003      	movne	r0, #3
   1deae:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1deb0:	2b02      	cmp	r3, #2
   1deb2:	d105      	bne.n	1dec0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1deb4:	8b40      	ldrh	r0, [r0, #26]
   1deb6:	fab0 f080 	clz	r0, r0
   1deba:	0940      	lsrs	r0, r0, #5
   1debc:	0080      	lsls	r0, r0, #2
   1debe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1dec0:	2b01      	cmp	r3, #1
   1dec2:	d105      	bne.n	1ded0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1dec4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1dec6:	2b00      	cmp	r3, #0
   1dec8:	bf0c      	ite	eq
   1deca:	2000      	moveq	r0, #0
   1decc:	2005      	movne	r0, #5
   1dece:	4770      	bx	lr
	int evt = EVT_NOP;
   1ded0:	2000      	movs	r0, #0
}
   1ded2:	4770      	bx	lr

0001ded4 <validate_args>:
{
   1ded4:	b510      	push	{r4, lr}
   1ded6:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1ded8:	b100      	cbz	r0, 1dedc <validate_args+0x8>
   1deda:	b911      	cbnz	r1, 1dee2 <validate_args+0xe>
		return -EINVAL;
   1dedc:	f06f 0015 	mvn.w	r0, #21
}
   1dee0:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
   1dee2:	1d08      	adds	r0, r1, #4
   1dee4:	f000 f895 	bl	1e012 <sys_notify_validate>
	if ((rv == 0)
   1dee8:	2800      	cmp	r0, #0
   1deea:	d1f9      	bne.n	1dee0 <validate_args+0xc>
	    && ((cli->notify.flags
   1deec:	68a3      	ldr	r3, [r4, #8]
   1deee:	2b03      	cmp	r3, #3
   1def0:	d9f6      	bls.n	1dee0 <validate_args+0xc>
   1def2:	e7f3      	b.n	1dedc <validate_args+0x8>

0001def4 <notify_one>:
{
   1def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1def8:	460d      	mov	r5, r1
   1defa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1defc:	4619      	mov	r1, r3
   1defe:	1d28      	adds	r0, r5, #4
{
   1df00:	4690      	mov	r8, r2
   1df02:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1df04:	f000 f899 	bl	1e03a <sys_notify_finalize>
	if (cb) {
   1df08:	4604      	mov	r4, r0
   1df0a:	b138      	cbz	r0, 1df1c <notify_one+0x28>
		cb(mgr, cli, state, res);
   1df0c:	4633      	mov	r3, r6
   1df0e:	4642      	mov	r2, r8
   1df10:	4629      	mov	r1, r5
   1df12:	4638      	mov	r0, r7
   1df14:	46a4      	mov	ip, r4
}
   1df16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1df1a:	4760      	bx	ip
}
   1df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001df20 <transition_complete>:
{
   1df20:	b410      	push	{r4}
	__asm__ volatile(
   1df22:	f04f 0440 	mov.w	r4, #64	; 0x40
   1df26:	f3ef 8211 	mrs	r2, BASEPRI
   1df2a:	f384 8812 	msr	BASEPRI_MAX, r4
   1df2e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1df32:	6141      	str	r1, [r0, #20]
}
   1df34:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1df36:	2101      	movs	r1, #1
   1df38:	f7f3 b988 	b.w	1124c <process_event>

0001df3c <onoff_manager_init>:
{
   1df3c:	b538      	push	{r3, r4, r5, lr}
   1df3e:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1df40:	4605      	mov	r5, r0
   1df42:	b158      	cbz	r0, 1df5c <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1df44:	b151      	cbz	r1, 1df5c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1df46:	680b      	ldr	r3, [r1, #0]
   1df48:	b143      	cbz	r3, 1df5c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1df4a:	684b      	ldr	r3, [r1, #4]
   1df4c:	b133      	cbz	r3, 1df5c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1df4e:	221c      	movs	r2, #28
   1df50:	2100      	movs	r1, #0
   1df52:	f000 fc20 	bl	1e796 <memset>
   1df56:	612c      	str	r4, [r5, #16]
	return 0;
   1df58:	2000      	movs	r0, #0
}
   1df5a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1df5c:	f06f 0015 	mvn.w	r0, #21
   1df60:	e7fb      	b.n	1df5a <onoff_manager_init+0x1e>

0001df62 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1df62:	b570      	push	{r4, r5, r6, lr}
   1df64:	4605      	mov	r5, r0
   1df66:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1df68:	f7ff ffb4 	bl	1ded4 <validate_args>

	if (rv < 0) {
   1df6c:	1e04      	subs	r4, r0, #0
   1df6e:	db15      	blt.n	1df9c <onoff_request+0x3a>
   1df70:	f04f 0340 	mov.w	r3, #64	; 0x40
   1df74:	f3ef 8211 	mrs	r2, BASEPRI
   1df78:	f383 8812 	msr	BASEPRI_MAX, r3
   1df7c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1df80:	8b6b      	ldrh	r3, [r5, #26]
   1df82:	8b2c      	ldrh	r4, [r5, #24]
   1df84:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1df88:	428b      	cmp	r3, r1
   1df8a:	f004 0407 	and.w	r4, r4, #7
   1df8e:	d107      	bne.n	1dfa0 <onoff_request+0x3e>
	__asm__ volatile(
   1df90:	f382 8811 	msr	BASEPRI, r2
   1df94:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
   1df98:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1df9c:	4620      	mov	r0, r4
   1df9e:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
   1dfa0:	2c02      	cmp	r4, #2
   1dfa2:	d10c      	bne.n	1dfbe <onoff_request+0x5c>
		mgr->refs += 1U;
   1dfa4:	3301      	adds	r3, #1
   1dfa6:	836b      	strh	r3, [r5, #26]
   1dfa8:	f382 8811 	msr	BASEPRI, r2
   1dfac:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
   1dfb0:	2300      	movs	r3, #0
   1dfb2:	4622      	mov	r2, r4
   1dfb4:	4631      	mov	r1, r6
   1dfb6:	4628      	mov	r0, r5
   1dfb8:	f7ff ff9c 	bl	1def4 <notify_one>
   1dfbc:	e7ee      	b.n	1df9c <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
   1dfbe:	2c06      	cmp	r4, #6
   1dfc0:	d814      	bhi.n	1dfec <onoff_request+0x8a>
   1dfc2:	e8df f004 	tbb	[pc, r4]
   1dfc6:	1304      	.short	0x1304
   1dfc8:	1a041313 	.word	0x1a041313
   1dfcc:	04          	.byte	0x04
   1dfcd:	00          	.byte	0x00
	parent->next = child;
   1dfce:	2300      	movs	r3, #0
   1dfd0:	6033      	str	r3, [r6, #0]
	return list->tail;
   1dfd2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
   1dfd4:	b93b      	cbnz	r3, 1dfe6 <onoff_request+0x84>
	list->head = node;
   1dfd6:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
   1dfda:	b9ac      	cbnz	r4, 1e008 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
   1dfdc:	2102      	movs	r1, #2
   1dfde:	4628      	mov	r0, r5
   1dfe0:	f7f3 f934 	bl	1124c <process_event>
   1dfe4:	e7da      	b.n	1df9c <onoff_request+0x3a>
	parent->next = child;
   1dfe6:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1dfe8:	606e      	str	r6, [r5, #4]
}
   1dfea:	e7f6      	b.n	1dfda <onoff_request+0x78>
   1dfec:	f382 8811 	msr	BASEPRI, r2
   1dff0:	f3bf 8f6f 	isb	sy
		rv = -EIO;
   1dff4:	f06f 0404 	mvn.w	r4, #4
   1dff8:	e7d0      	b.n	1df9c <onoff_request+0x3a>
   1dffa:	f382 8811 	msr	BASEPRI, r2
   1dffe:	f3bf 8f6f 	isb	sy
   1e002:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1e006:	e7c9      	b.n	1df9c <onoff_request+0x3a>
   1e008:	f382 8811 	msr	BASEPRI, r2
   1e00c:	f3bf 8f6f 	isb	sy
		if (notify) {
   1e010:	e7c4      	b.n	1df9c <onoff_request+0x3a>

0001e012 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1e012:	4603      	mov	r3, r0
   1e014:	b140      	cbz	r0, 1e028 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e016:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e018:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1e01c:	2a02      	cmp	r2, #2
   1e01e:	d006      	beq.n	1e02e <sys_notify_validate+0x1c>
   1e020:	2a03      	cmp	r2, #3
   1e022:	d004      	beq.n	1e02e <sys_notify_validate+0x1c>
   1e024:	2a01      	cmp	r2, #1
   1e026:	d005      	beq.n	1e034 <sys_notify_validate+0x22>
   1e028:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1e02c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1e02e:	681a      	ldr	r2, [r3, #0]
   1e030:	2a00      	cmp	r2, #0
   1e032:	d0f9      	beq.n	1e028 <sys_notify_validate+0x16>
		notify->result = 0;
   1e034:	2000      	movs	r0, #0
   1e036:	6098      	str	r0, [r3, #8]
   1e038:	4770      	bx	lr

0001e03a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   1e03a:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1e03c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   1e03e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
   1e040:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
   1e044:	2a02      	cmp	r2, #2
{
   1e046:	4603      	mov	r3, r0
	switch (method) {
   1e048:	f04f 0400 	mov.w	r4, #0
   1e04c:	d007      	beq.n	1e05e <sys_notify_finalize+0x24>
   1e04e:	2a03      	cmp	r2, #3
   1e050:	d002      	beq.n	1e058 <sys_notify_finalize+0x1e>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e052:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
   1e054:	2000      	movs	r0, #0
   1e056:	e001      	b.n	1e05c <sys_notify_finalize+0x22>
		rv = notify->method.callback;
   1e058:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e05a:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1e05c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1e05e:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1e060:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1e062:	2800      	cmp	r0, #0
   1e064:	d0f6      	beq.n	1e054 <sys_notify_finalize+0x1a>
	return z_impl_k_poll_signal_raise(sig, result);
   1e066:	f7ff f90d 	bl	1d284 <z_impl_k_poll_signal_raise>
   1e06a:	e7f3      	b.n	1e054 <sys_notify_finalize+0x1a>

0001e06c <encode_uint>:
{
   1e06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e070:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1e072:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1e074:	2b6f      	cmp	r3, #111	; 0x6f
{
   1e076:	4680      	mov	r8, r0
   1e078:	460f      	mov	r7, r1
   1e07a:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1e07c:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1e080:	d029      	beq.n	1e0d6 <encode_uint+0x6a>
   1e082:	d824      	bhi.n	1e0ce <encode_uint+0x62>
		return 10;
   1e084:	2b58      	cmp	r3, #88	; 0x58
   1e086:	bf0c      	ite	eq
   1e088:	2610      	moveq	r6, #16
   1e08a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
   1e08c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1e090:	4632      	mov	r2, r6
   1e092:	2300      	movs	r3, #0
   1e094:	4640      	mov	r0, r8
   1e096:	4639      	mov	r1, r7
   1e098:	f7e2 f832 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e09c:	2a09      	cmp	r2, #9
   1e09e:	b2d4      	uxtb	r4, r2
   1e0a0:	d81e      	bhi.n	1e0e0 <encode_uint+0x74>
   1e0a2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1e0a4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e0a6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1e0a8:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e0ac:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1e0b0:	d301      	bcc.n	1e0b6 <encode_uint+0x4a>
   1e0b2:	45d1      	cmp	r9, sl
   1e0b4:	d811      	bhi.n	1e0da <encode_uint+0x6e>
	if (conv->flag_hash) {
   1e0b6:	782b      	ldrb	r3, [r5, #0]
   1e0b8:	069b      	lsls	r3, r3, #26
   1e0ba:	d505      	bpl.n	1e0c8 <encode_uint+0x5c>
		if (radix == 8) {
   1e0bc:	2e08      	cmp	r6, #8
   1e0be:	d115      	bne.n	1e0ec <encode_uint+0x80>
			conv->altform_0 = true;
   1e0c0:	78ab      	ldrb	r3, [r5, #2]
   1e0c2:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1e0c6:	70ab      	strb	r3, [r5, #2]
}
   1e0c8:	4648      	mov	r0, r9
   1e0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1e0ce:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
   1e0d2:	2b70      	cmp	r3, #112	; 0x70
   1e0d4:	e7d7      	b.n	1e086 <encode_uint+0x1a>
	switch (specifier) {
   1e0d6:	2608      	movs	r6, #8
   1e0d8:	e7d8      	b.n	1e08c <encode_uint+0x20>
		value /= radix;
   1e0da:	4680      	mov	r8, r0
   1e0dc:	460f      	mov	r7, r1
   1e0de:	e7d7      	b.n	1e090 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1e0e0:	f1bb 0f19 	cmp.w	fp, #25
   1e0e4:	bf94      	ite	ls
   1e0e6:	3437      	addls	r4, #55	; 0x37
   1e0e8:	3457      	addhi	r4, #87	; 0x57
   1e0ea:	e7db      	b.n	1e0a4 <encode_uint+0x38>
		} else if (radix == 16) {
   1e0ec:	2e10      	cmp	r6, #16
   1e0ee:	d1eb      	bne.n	1e0c8 <encode_uint+0x5c>
			conv->altform_0c = true;
   1e0f0:	78ab      	ldrb	r3, [r5, #2]
   1e0f2:	f043 0310 	orr.w	r3, r3, #16
   1e0f6:	e7e6      	b.n	1e0c6 <encode_uint+0x5a>

0001e0f8 <outs>:
{
   1e0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0fc:	4607      	mov	r7, r0
   1e0fe:	4688      	mov	r8, r1
   1e100:	4615      	mov	r5, r2
   1e102:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e104:	4614      	mov	r4, r2
   1e106:	42b4      	cmp	r4, r6
   1e108:	d305      	bcc.n	1e116 <outs+0x1e>
   1e10a:	b10e      	cbz	r6, 1e110 <outs+0x18>
	return (int)count;
   1e10c:	1b60      	subs	r0, r4, r5
   1e10e:	e008      	b.n	1e122 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1e110:	7823      	ldrb	r3, [r4, #0]
   1e112:	2b00      	cmp	r3, #0
   1e114:	d0fa      	beq.n	1e10c <outs+0x14>
		int rc = out((int)*sp++, ctx);
   1e116:	f814 0b01 	ldrb.w	r0, [r4], #1
   1e11a:	4641      	mov	r1, r8
   1e11c:	47b8      	blx	r7
		if (rc < 0) {
   1e11e:	2800      	cmp	r0, #0
   1e120:	daf1      	bge.n	1e106 <outs+0xe>
}
   1e122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e126 <assert_print>:

	k_panic();
}

void assert_print(const char *fmt, ...)
{
   1e126:	b40f      	push	{r0, r1, r2, r3}
   1e128:	b507      	push	{r0, r1, r2, lr}
   1e12a:	a904      	add	r1, sp, #16
   1e12c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
   1e130:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
   1e132:	f7ff fcc8 	bl	1dac6 <vprintk>

	va_end(ap);
}
   1e136:	b003      	add	sp, #12
   1e138:	f85d eb04 	ldr.w	lr, [sp], #4
   1e13c:	b004      	add	sp, #16
   1e13e:	4770      	bx	lr

0001e140 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1e140:	4770      	bx	lr

0001e142 <dummy_timestamp>:
}
   1e142:	2000      	movs	r0, #0
   1e144:	4770      	bx	lr

0001e146 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1e146:	f002 b981 	b.w	2044c <sys_clock_cycle_get_32>

0001e14a <atomic_inc>:
{
   1e14a:	4603      	mov	r3, r0
}
   1e14c:	f3bf 8f5b 	dmb	ish
   1e150:	e853 0f00 	ldrex	r0, [r3]
   1e154:	1c42      	adds	r2, r0, #1
   1e156:	e843 2100 	strex	r1, r2, [r3]
   1e15a:	2900      	cmp	r1, #0
   1e15c:	d1f8      	bne.n	1e150 <atomic_inc+0x6>
   1e15e:	f3bf 8f5b 	dmb	ish
   1e162:	4770      	bx	lr

0001e164 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1e164:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
   1e166:	2100      	movs	r1, #0
   1e168:	4608      	mov	r0, r1
   1e16a:	f7f3 fd31 	bl	11bd0 <z_log_init.isra.0>
	}

	return 0;
}
   1e16e:	2000      	movs	r0, #0
   1e170:	bd08      	pop	{r3, pc}

0001e172 <z_log_vprintk>:
{
   1e172:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e174:	2300      	movs	r3, #0
   1e176:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1e17a:	e9cd 3300 	strd	r3, r3, [sp]
   1e17e:	461a      	mov	r2, r3
   1e180:	4619      	mov	r1, r3
   1e182:	4618      	mov	r0, r3
   1e184:	f7f3 fe26 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1e188:	b005      	add	sp, #20
   1e18a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e18e <z_log_notify_backend_enabled>:
}
   1e18e:	4770      	bx	lr

0001e190 <z_log_get_tag>:
}
   1e190:	2000      	movs	r0, #0
   1e192:	4770      	bx	lr

0001e194 <z_log_msg_finalize>:
{
   1e194:	b570      	push	{r4, r5, r6, lr}
   1e196:	460e      	mov	r6, r1
   1e198:	4615      	mov	r5, r2
   1e19a:	4619      	mov	r1, r3
	if (!msg) {
   1e19c:	4604      	mov	r4, r0
   1e19e:	b918      	cbnz	r0, 1e1a8 <z_log_msg_finalize+0x14>
}
   1e1a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   1e1a4:	f7f3 bdc0 	b.w	11d28 <z_log_dropped>
	if (data) {
   1e1a8:	b13b      	cbz	r3, 1e1ba <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
   1e1aa:	f3c2 2349 	ubfx	r3, r2, #9, #10
   1e1ae:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
   1e1b0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   1e1b4:	4418      	add	r0, r3
   1e1b6:	f000 fae3 	bl	1e780 <memcpy>
	msg->hdr.source = source;
   1e1ba:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
   1e1be:	4620      	mov	r0, r4
}
   1e1c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
   1e1c4:	f7f3 bdc8 	b.w	11d58 <z_log_msg_commit>

0001e1c8 <out_func>:
{
   1e1c8:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   1e1ca:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
   1e1ce:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
   1e1d2:	6852      	ldr	r2, [r2, #4]
   1e1d4:	2101      	movs	r1, #1
   1e1d6:	f10d 0007 	add.w	r0, sp, #7
   1e1da:	4798      	blx	r3
}
   1e1dc:	2000      	movs	r0, #0
   1e1de:	b003      	add	sp, #12
   1e1e0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e1e4 <cr_out_func>:
	if (c == '\n') {
   1e1e4:	280a      	cmp	r0, #10
{
   1e1e6:	b538      	push	{r3, r4, r5, lr}
   1e1e8:	4604      	mov	r4, r0
   1e1ea:	460d      	mov	r5, r1
	if (c == '\n') {
   1e1ec:	d102      	bne.n	1e1f4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
   1e1ee:	200d      	movs	r0, #13
   1e1f0:	f7ff ffea 	bl	1e1c8 <out_func>
	out_func(c, ctx);
   1e1f4:	4629      	mov	r1, r5
   1e1f6:	4620      	mov	r0, r4
   1e1f8:	f7ff ffe6 	bl	1e1c8 <out_func>
}
   1e1fc:	2000      	movs	r0, #0
   1e1fe:	bd38      	pop	{r3, r4, r5, pc}

0001e200 <buffer_write>:
{
   1e200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e202:	4606      	mov	r6, r0
   1e204:	460d      	mov	r5, r1
   1e206:	4614      	mov	r4, r2
   1e208:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1e20a:	4621      	mov	r1, r4
   1e20c:	4628      	mov	r0, r5
   1e20e:	463a      	mov	r2, r7
   1e210:	47b0      	blx	r6
	} while (len != 0);
   1e212:	1a24      	subs	r4, r4, r0
		buf += processed;
   1e214:	4405      	add	r5, r0
	} while (len != 0);
   1e216:	d1f8      	bne.n	1e20a <buffer_write+0xa>
}
   1e218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e21a <cbvprintf>:
{
   1e21a:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
   1e21c:	2400      	movs	r4, #0
   1e21e:	9400      	str	r4, [sp, #0]
   1e220:	f7f3 f922 	bl	11468 <z_cbvprintf_impl>
}
   1e224:	b002      	add	sp, #8
   1e226:	bd10      	pop	{r4, pc}

0001e228 <log_output_flush>:
{
   1e228:	b510      	push	{r4, lr}
		     output->control_block->offset,
   1e22a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1e22c:	6881      	ldr	r1, [r0, #8]
{
   1e22e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1e230:	e9d2 2300 	ldrd	r2, r3, [r2]
   1e234:	6800      	ldr	r0, [r0, #0]
   1e236:	f7ff ffe3 	bl	1e200 <buffer_write>
	output->control_block->offset = 0;
   1e23a:	6863      	ldr	r3, [r4, #4]
   1e23c:	2200      	movs	r2, #0
   1e23e:	601a      	str	r2, [r3, #0]
}
   1e240:	bd10      	pop	{r4, pc}

0001e242 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1e242:	b538      	push	{r3, r4, r5, lr}
   1e244:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1e246:	42ab      	cmp	r3, r5
{
   1e248:	4611      	mov	r1, r2
   1e24a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1e24c:	d804      	bhi.n	1e258 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1e24e:	461a      	mov	r2, r3
   1e250:	f000 fa96 	bl	1e780 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1e254:	4620      	mov	r0, r4
   1e256:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1e258:	2400      	movs	r4, #0
   1e25a:	e7fb      	b.n	1e254 <_copy+0x12>

0001e25c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1e25c:	f000 ba9b 	b.w	1e796 <memset>

0001e260 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1e260:	09c3      	lsrs	r3, r0, #7
   1e262:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e266:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1e26a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1e26e:	b2c0      	uxtb	r0, r0
   1e270:	4770      	bx	lr

0001e272 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1e272:	78cb      	ldrb	r3, [r1, #3]
   1e274:	7802      	ldrb	r2, [r0, #0]
   1e276:	4053      	eors	r3, r2
   1e278:	7003      	strb	r3, [r0, #0]
   1e27a:	884b      	ldrh	r3, [r1, #2]
   1e27c:	7842      	ldrb	r2, [r0, #1]
   1e27e:	4053      	eors	r3, r2
   1e280:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1e282:	680a      	ldr	r2, [r1, #0]
   1e284:	7883      	ldrb	r3, [r0, #2]
   1e286:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e28a:	7083      	strb	r3, [r0, #2]
   1e28c:	680a      	ldr	r2, [r1, #0]
   1e28e:	78c3      	ldrb	r3, [r0, #3]
   1e290:	4053      	eors	r3, r2
   1e292:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1e294:	79cb      	ldrb	r3, [r1, #7]
   1e296:	7902      	ldrb	r2, [r0, #4]
   1e298:	4053      	eors	r3, r2
   1e29a:	7103      	strb	r3, [r0, #4]
   1e29c:	88cb      	ldrh	r3, [r1, #6]
   1e29e:	7942      	ldrb	r2, [r0, #5]
   1e2a0:	4053      	eors	r3, r2
   1e2a2:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1e2a4:	684a      	ldr	r2, [r1, #4]
   1e2a6:	7983      	ldrb	r3, [r0, #6]
   1e2a8:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e2ac:	7183      	strb	r3, [r0, #6]
   1e2ae:	684a      	ldr	r2, [r1, #4]
   1e2b0:	79c3      	ldrb	r3, [r0, #7]
   1e2b2:	4053      	eors	r3, r2
   1e2b4:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1e2b6:	7acb      	ldrb	r3, [r1, #11]
   1e2b8:	7a02      	ldrb	r2, [r0, #8]
   1e2ba:	4053      	eors	r3, r2
   1e2bc:	7203      	strb	r3, [r0, #8]
   1e2be:	7a42      	ldrb	r2, [r0, #9]
   1e2c0:	894b      	ldrh	r3, [r1, #10]
   1e2c2:	4053      	eors	r3, r2
   1e2c4:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1e2c6:	688a      	ldr	r2, [r1, #8]
   1e2c8:	7a83      	ldrb	r3, [r0, #10]
   1e2ca:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e2ce:	7283      	strb	r3, [r0, #10]
   1e2d0:	688a      	ldr	r2, [r1, #8]
   1e2d2:	7ac3      	ldrb	r3, [r0, #11]
   1e2d4:	4053      	eors	r3, r2
   1e2d6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1e2d8:	7bcb      	ldrb	r3, [r1, #15]
   1e2da:	7b02      	ldrb	r2, [r0, #12]
   1e2dc:	4053      	eors	r3, r2
   1e2de:	7303      	strb	r3, [r0, #12]
   1e2e0:	89cb      	ldrh	r3, [r1, #14]
   1e2e2:	7b42      	ldrb	r2, [r0, #13]
   1e2e4:	4053      	eors	r3, r2
   1e2e6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1e2e8:	68ca      	ldr	r2, [r1, #12]
   1e2ea:	7b83      	ldrb	r3, [r0, #14]
   1e2ec:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e2f0:	7383      	strb	r3, [r0, #14]
   1e2f2:	68ca      	ldr	r2, [r1, #12]
   1e2f4:	7bc3      	ldrb	r3, [r0, #15]
   1e2f6:	4053      	eors	r3, r2
   1e2f8:	73c3      	strb	r3, [r0, #15]
}
   1e2fa:	4770      	bx	lr

0001e2fc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1e2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1e2fe:	7802      	ldrb	r2, [r0, #0]
   1e300:	f88d 2000 	strb.w	r2, [sp]
   1e304:	7942      	ldrb	r2, [r0, #5]
   1e306:	f88d 2001 	strb.w	r2, [sp, #1]
   1e30a:	7a82      	ldrb	r2, [r0, #10]
   1e30c:	f88d 2002 	strb.w	r2, [sp, #2]
   1e310:	7bc2      	ldrb	r2, [r0, #15]
   1e312:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1e316:	7902      	ldrb	r2, [r0, #4]
   1e318:	f88d 2004 	strb.w	r2, [sp, #4]
   1e31c:	7a42      	ldrb	r2, [r0, #9]
   1e31e:	f88d 2005 	strb.w	r2, [sp, #5]
   1e322:	7b82      	ldrb	r2, [r0, #14]
   1e324:	f88d 2006 	strb.w	r2, [sp, #6]
   1e328:	78c2      	ldrb	r2, [r0, #3]
   1e32a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1e32e:	7a02      	ldrb	r2, [r0, #8]
   1e330:	f88d 2008 	strb.w	r2, [sp, #8]
   1e334:	7b42      	ldrb	r2, [r0, #13]
   1e336:	f88d 2009 	strb.w	r2, [sp, #9]
   1e33a:	7882      	ldrb	r2, [r0, #2]
   1e33c:	f88d 200a 	strb.w	r2, [sp, #10]
   1e340:	79c2      	ldrb	r2, [r0, #7]
   1e342:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1e346:	7b02      	ldrb	r2, [r0, #12]
   1e348:	f88d 200c 	strb.w	r2, [sp, #12]
   1e34c:	7842      	ldrb	r2, [r0, #1]
   1e34e:	7ac3      	ldrb	r3, [r0, #11]
   1e350:	f88d 200d 	strb.w	r2, [sp, #13]
   1e354:	7982      	ldrb	r2, [r0, #6]
   1e356:	f88d 200e 	strb.w	r2, [sp, #14]
   1e35a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e35e:	2310      	movs	r3, #16
   1e360:	466a      	mov	r2, sp
   1e362:	4619      	mov	r1, r3
   1e364:	f7ff ff6d 	bl	1e242 <_copy>
}
   1e368:	b005      	add	sp, #20
   1e36a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e36e <mult_row_column>:
{
   1e36e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e370:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e372:	7808      	ldrb	r0, [r1, #0]
{
   1e374:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e376:	f7ff ff73 	bl	1e260 <_double_byte>
   1e37a:	4605      	mov	r5, r0
   1e37c:	7860      	ldrb	r0, [r4, #1]
   1e37e:	f7ff ff6f 	bl	1e260 <_double_byte>
   1e382:	78a2      	ldrb	r2, [r4, #2]
   1e384:	7863      	ldrb	r3, [r4, #1]
   1e386:	4053      	eors	r3, r2
   1e388:	78e2      	ldrb	r2, [r4, #3]
   1e38a:	4053      	eors	r3, r2
   1e38c:	405d      	eors	r5, r3
   1e38e:	4068      	eors	r0, r5
   1e390:	7030      	strb	r0, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1e392:	7860      	ldrb	r0, [r4, #1]
   1e394:	7827      	ldrb	r7, [r4, #0]
   1e396:	f7ff ff63 	bl	1e260 <_double_byte>
   1e39a:	4605      	mov	r5, r0
   1e39c:	78a0      	ldrb	r0, [r4, #2]
   1e39e:	f7ff ff5f 	bl	1e260 <_double_byte>
   1e3a2:	78a3      	ldrb	r3, [r4, #2]
   1e3a4:	405f      	eors	r7, r3
   1e3a6:	78e3      	ldrb	r3, [r4, #3]
   1e3a8:	405f      	eors	r7, r3
   1e3aa:	407d      	eors	r5, r7
   1e3ac:	4068      	eors	r0, r5
   1e3ae:	7070      	strb	r0, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1e3b0:	7863      	ldrb	r3, [r4, #1]
   1e3b2:	7827      	ldrb	r7, [r4, #0]
   1e3b4:	78a0      	ldrb	r0, [r4, #2]
   1e3b6:	405f      	eors	r7, r3
   1e3b8:	f7ff ff52 	bl	1e260 <_double_byte>
   1e3bc:	4605      	mov	r5, r0
   1e3be:	78e0      	ldrb	r0, [r4, #3]
   1e3c0:	f7ff ff4e 	bl	1e260 <_double_byte>
   1e3c4:	78e3      	ldrb	r3, [r4, #3]
   1e3c6:	405f      	eors	r7, r3
   1e3c8:	407d      	eors	r5, r7
   1e3ca:	4068      	eors	r0, r5
   1e3cc:	70b0      	strb	r0, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1e3ce:	7820      	ldrb	r0, [r4, #0]
   1e3d0:	f7ff ff46 	bl	1e260 <_double_byte>
   1e3d4:	7862      	ldrb	r2, [r4, #1]
   1e3d6:	7823      	ldrb	r3, [r4, #0]
   1e3d8:	4053      	eors	r3, r2
   1e3da:	78a2      	ldrb	r2, [r4, #2]
   1e3dc:	4053      	eors	r3, r2
   1e3de:	ea80 0503 	eor.w	r5, r0, r3
   1e3e2:	78e0      	ldrb	r0, [r4, #3]
   1e3e4:	f7ff ff3c 	bl	1e260 <_double_byte>
   1e3e8:	b2ed      	uxtb	r5, r5
   1e3ea:	4045      	eors	r5, r0
   1e3ec:	70f5      	strb	r5, [r6, #3]
}
   1e3ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e3f0 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1e3f0:	b570      	push	{r4, r5, r6, lr}
   1e3f2:	4614      	mov	r4, r2
   1e3f4:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1e3f6:	4605      	mov	r5, r0
   1e3f8:	2800      	cmp	r0, #0
   1e3fa:	d049      	beq.n	1e490 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1e3fc:	2900      	cmp	r1, #0
   1e3fe:	d049      	beq.n	1e494 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1e400:	2a00      	cmp	r2, #0
   1e402:	d049      	beq.n	1e498 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1e404:	2310      	movs	r3, #16
   1e406:	460a      	mov	r2, r1
   1e408:	4668      	mov	r0, sp
   1e40a:	4619      	mov	r1, r3
   1e40c:	f7ff ff19 	bl	1e242 <_copy>
	add_round_key(state, s->words);
   1e410:	4621      	mov	r1, r4
   1e412:	4668      	mov	r0, sp
   1e414:	f7ff ff2d 	bl	1e272 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1e418:	3410      	adds	r4, #16
   1e41a:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1e41e:	4668      	mov	r0, sp
   1e420:	f7f4 f878 	bl	12514 <sub_bytes>
		shift_rows(state);
   1e424:	4668      	mov	r0, sp
   1e426:	f7ff ff69 	bl	1e2fc <shift_rows>
	mult_row_column(t, s);
   1e42a:	4669      	mov	r1, sp
   1e42c:	a804      	add	r0, sp, #16
   1e42e:	f7ff ff9e 	bl	1e36e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1e432:	a901      	add	r1, sp, #4
   1e434:	a805      	add	r0, sp, #20
   1e436:	f7ff ff9a 	bl	1e36e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1e43a:	a902      	add	r1, sp, #8
   1e43c:	a806      	add	r0, sp, #24
   1e43e:	f7ff ff96 	bl	1e36e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1e442:	a903      	add	r1, sp, #12
   1e444:	a807      	add	r0, sp, #28
   1e446:	f7ff ff92 	bl	1e36e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e44a:	2310      	movs	r3, #16
   1e44c:	4619      	mov	r1, r3
   1e44e:	eb0d 0203 	add.w	r2, sp, r3
   1e452:	4668      	mov	r0, sp
   1e454:	f7ff fef5 	bl	1e242 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1e458:	4621      	mov	r1, r4
   1e45a:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1e45c:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1e45e:	f7ff ff08 	bl	1e272 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1e462:	42b4      	cmp	r4, r6
   1e464:	d1db      	bne.n	1e41e <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1e466:	f7f4 f855 	bl	12514 <sub_bytes>
	shift_rows(state);
   1e46a:	4668      	mov	r0, sp
   1e46c:	f7ff ff46 	bl	1e2fc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1e470:	4621      	mov	r1, r4
   1e472:	4668      	mov	r0, sp
   1e474:	f7ff fefd 	bl	1e272 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1e478:	2310      	movs	r3, #16
   1e47a:	4619      	mov	r1, r3
   1e47c:	466a      	mov	r2, sp
   1e47e:	4628      	mov	r0, r5
   1e480:	f7ff fedf 	bl	1e242 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1e484:	4668      	mov	r0, sp
   1e486:	2210      	movs	r2, #16
   1e488:	2100      	movs	r1, #0
   1e48a:	f7ff fee7 	bl	1e25c <_set>

	return TC_CRYPTO_SUCCESS;
   1e48e:	2001      	movs	r0, #1
}
   1e490:	b008      	add	sp, #32
   1e492:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1e494:	4608      	mov	r0, r1
   1e496:	e7fb      	b.n	1e490 <tc_aes_encrypt+0xa0>
   1e498:	4610      	mov	r0, r2
   1e49a:	e7f9      	b.n	1e490 <tc_aes_encrypt+0xa0>

0001e49c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1e49c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e49e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1e4a0:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1e4a2:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1e4a6:	2b00      	cmp	r3, #0
   1e4a8:	bfac      	ite	ge
   1e4aa:	2300      	movge	r3, #0
   1e4ac:	2387      	movlt	r3, #135	; 0x87
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1e4ae:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1e4b2:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1e4b6:	428a      	cmp	r2, r1
		*out-- = (*x << 1) ^ carry;
   1e4b8:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1e4bc:	d002      	beq.n	1e4c4 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1e4be:	7813      	ldrb	r3, [r2, #0]
   1e4c0:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1e4c2:	e7f4      	b.n	1e4ae <gf_double+0x12>
	}
}
   1e4c4:	bd10      	pop	{r4, pc}

0001e4c6 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1e4c6:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1e4c8:	b120      	cbz	r0, 1e4d4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1e4ca:	2258      	movs	r2, #88	; 0x58
   1e4cc:	2100      	movs	r1, #0
   1e4ce:	f7ff fec5 	bl	1e25c <_set>
   1e4d2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e4d4:	bd08      	pop	{r3, pc}

0001e4d6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1e4d6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e4d8:	4604      	mov	r4, r0
   1e4da:	b188      	cbz	r0, 1e500 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e4dc:	2210      	movs	r2, #16
   1e4de:	2100      	movs	r1, #0
   1e4e0:	f7ff febc 	bl	1e25c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1e4e4:	2210      	movs	r2, #16
   1e4e6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e4ea:	2100      	movs	r1, #0
   1e4ec:	f7ff feb6 	bl	1e25c <_set>
	s->leftover_offset = 0;
   1e4f0:	2300      	movs	r3, #0
   1e4f2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1e4f4:	2200      	movs	r2, #0
   1e4f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1e4fa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1e4fe:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1e500:	bd10      	pop	{r4, pc}

0001e502 <tc_cmac_setup>:
{
   1e502:	b570      	push	{r4, r5, r6, lr}
   1e504:	4604      	mov	r4, r0
   1e506:	460d      	mov	r5, r1
   1e508:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1e50a:	b310      	cbz	r0, 1e552 <tc_cmac_setup+0x50>
   1e50c:	b311      	cbz	r1, 1e554 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1e50e:	2258      	movs	r2, #88	; 0x58
   1e510:	2100      	movs	r1, #0
   1e512:	f7ff fea3 	bl	1e25c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1e516:	4629      	mov	r1, r5
	s->sched = sched;
   1e518:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1e51a:	4630      	mov	r0, r6
   1e51c:	f7f4 f806 	bl	1252c <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1e520:	2210      	movs	r2, #16
   1e522:	2100      	movs	r1, #0
   1e524:	4620      	mov	r0, r4
   1e526:	f7ff fe99 	bl	1e25c <_set>
	gf_double (s->K1, s->iv);
   1e52a:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e52e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e530:	4621      	mov	r1, r4
   1e532:	4620      	mov	r0, r4
   1e534:	f7ff ff5c 	bl	1e3f0 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1e538:	4621      	mov	r1, r4
   1e53a:	4628      	mov	r0, r5
   1e53c:	f7ff ffae 	bl	1e49c <gf_double>
	gf_double (s->K2, s->K1);
   1e540:	4629      	mov	r1, r5
   1e542:	f104 0020 	add.w	r0, r4, #32
   1e546:	f7ff ffa9 	bl	1e49c <gf_double>
	tc_cmac_init(s);
   1e54a:	4620      	mov	r0, r4
   1e54c:	f7ff ffc3 	bl	1e4d6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1e550:	2001      	movs	r0, #1
}
   1e552:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1e554:	4608      	mov	r0, r1
   1e556:	e7fc      	b.n	1e552 <tc_cmac_setup+0x50>

0001e558 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1e558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e55c:	460e      	mov	r6, r1
   1e55e:	4615      	mov	r5, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1e560:	4604      	mov	r4, r0
   1e562:	2800      	cmp	r0, #0
   1e564:	d060      	beq.n	1e628 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1e566:	b1fa      	cbz	r2, 1e5a8 <tc_cmac_update+0x50>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
   1e568:	2900      	cmp	r1, #0
   1e56a:	d05d      	beq.n	1e628 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
   1e56c:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1e570:	ea53 0102 	orrs.w	r1, r3, r2
   1e574:	d058      	beq.n	1e628 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
   1e576:	3b01      	subs	r3, #1

	if (s->leftover_offset > 0) {
   1e578:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1e57c:	f142 32ff 	adc.w	r2, r2, #4294967295
   1e580:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1e584:	f1b8 0f00 	cmp.w	r8, #0
   1e588:	d02c      	beq.n	1e5e4 <tc_cmac_update+0x8c>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1e58a:	f1c8 0710 	rsb	r7, r8, #16

		if (data_length < remaining_space) {
			/* still not enough data to encrypt this time either */
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1e58e:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1e592:	42bd      	cmp	r5, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1e594:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1e596:	d20a      	bcs.n	1e5ae <tc_cmac_update+0x56>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1e598:	462b      	mov	r3, r5
   1e59a:	4632      	mov	r2, r6
   1e59c:	4629      	mov	r1, r5
   1e59e:	f7ff fe50 	bl	1e242 <_copy>
			s->leftover_offset += data_length;
   1e5a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e5a4:	442b      	add	r3, r5
   1e5a6:	6463      	str	r3, [r4, #68]	; 0x44
		return  TC_CRYPTO_SUCCESS;
   1e5a8:	2001      	movs	r0, #1
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
}
   1e5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		_copy(&s->leftover[s->leftover_offset],
   1e5ae:	463b      	mov	r3, r7
   1e5b0:	4632      	mov	r2, r6
   1e5b2:	4639      	mov	r1, r7
   1e5b4:	f7ff fe45 	bl	1e242 <_copy>
		data_length -= remaining_space;
   1e5b8:	3d10      	subs	r5, #16
		s->leftover_offset = 0;
   1e5ba:	2300      	movs	r3, #0
   1e5bc:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1e5be:	4445      	add	r5, r8
		data += remaining_space;
   1e5c0:	443e      	add	r6, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e5c2:	1e63      	subs	r3, r4, #1
   1e5c4:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1e5c8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e5cc:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e5d0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1e5d2:	ea82 0200 	eor.w	r2, r2, r0
   1e5d6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e5d8:	d1f6      	bne.n	1e5c8 <tc_cmac_update+0x70>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e5da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e5dc:	4621      	mov	r1, r4
   1e5de:	4620      	mov	r0, r4
   1e5e0:	f7ff ff06 	bl	1e3f0 <tc_aes_encrypt>
   1e5e4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1e5e8:	2d10      	cmp	r5, #16
   1e5ea:	d80a      	bhi.n	1e602 <tc_cmac_update+0xaa>
	if (data_length > 0) {
   1e5ec:	2d00      	cmp	r5, #0
   1e5ee:	d0db      	beq.n	1e5a8 <tc_cmac_update+0x50>
		_copy(s->leftover, data_length, data, data_length);
   1e5f0:	462b      	mov	r3, r5
   1e5f2:	4632      	mov	r2, r6
   1e5f4:	4629      	mov	r1, r5
   1e5f6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1e5fa:	f7ff fe22 	bl	1e242 <_copy>
		s->leftover_offset = data_length;
   1e5fe:	6465      	str	r5, [r4, #68]	; 0x44
   1e600:	e7d2      	b.n	1e5a8 <tc_cmac_update+0x50>
   1e602:	1e63      	subs	r3, r4, #1
   1e604:	1e71      	subs	r1, r6, #1
			s->iv[i] ^= data[i];
   1e606:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e60a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e60e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1e610:	ea82 0200 	eor.w	r2, r2, r0
   1e614:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e616:	d1f6      	bne.n	1e606 <tc_cmac_update+0xae>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1e618:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e61a:	4621      	mov	r1, r4
   1e61c:	4620      	mov	r0, r4
   1e61e:	f7ff fee7 	bl	1e3f0 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1e622:	3610      	adds	r6, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1e624:	3d10      	subs	r5, #16
   1e626:	e7df      	b.n	1e5e8 <tc_cmac_update+0x90>
		return TC_CRYPTO_FAIL;
   1e628:	2000      	movs	r0, #0
   1e62a:	e7be      	b.n	1e5aa <tc_cmac_update+0x52>

0001e62c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1e62c:	b570      	push	{r4, r5, r6, lr}
   1e62e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1e630:	4605      	mov	r5, r0
   1e632:	b1e8      	cbz	r0, 1e670 <tc_cmac_final+0x44>
   1e634:	b369      	cbz	r1, 1e692 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1e636:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1e638:	2a10      	cmp	r2, #16
   1e63a:	d11a      	bne.n	1e672 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1e63c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e63e:	1e63      	subs	r3, r4, #1
   1e640:	3901      	subs	r1, #1
   1e642:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e646:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e64a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1e64e:	4072      	eors	r2, r6
   1e650:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e654:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1e656:	ea82 0206 	eor.w	r2, r2, r6
   1e65a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1e65c:	d1f3      	bne.n	1e646 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1e65e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1e660:	4621      	mov	r1, r4
   1e662:	4628      	mov	r0, r5
   1e664:	f7ff fec4 	bl	1e3f0 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1e668:	4620      	mov	r0, r4
   1e66a:	f7ff ff2c 	bl	1e4c6 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1e66e:	2001      	movs	r0, #1
}
   1e670:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1e672:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1e676:	2100      	movs	r1, #0
   1e678:	f1c2 0210 	rsb	r2, r2, #16
   1e67c:	4420      	add	r0, r4
   1e67e:	f7ff fded 	bl	1e25c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1e682:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1e684:	4423      	add	r3, r4
   1e686:	2280      	movs	r2, #128	; 0x80
   1e688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1e68c:	f104 0120 	add.w	r1, r4, #32
   1e690:	e7d5      	b.n	1e63e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1e692:	4608      	mov	r0, r1
   1e694:	e7ec      	b.n	1e670 <tc_cmac_final+0x44>

0001e696 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1e696:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1e698:	ab0b      	add	r3, sp, #44	; 0x2c
   1e69a:	9305      	str	r3, [sp, #20]
   1e69c:	9303      	str	r3, [sp, #12]
   1e69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6a0:	9302      	str	r3, [sp, #8]
   1e6a2:	2300      	movs	r3, #0
   1e6a4:	e9cd 3300 	strd	r3, r3, [sp]
   1e6a8:	2201      	movs	r2, #1
   1e6aa:	4618      	mov	r0, r3
   1e6ac:	f7f3 fb92 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1e6b0:	b007      	add	sp, #28
   1e6b2:	f85d fb04 	ldr.w	pc, [sp], #4

0001e6b6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
   1e6b6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1e6b8:	6800      	ldr	r0, [r0, #0]
   1e6ba:	f7f3 bfa9 	b.w	12610 <z_arm_fatal_error>

0001e6be <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1e6be:	2100      	movs	r1, #0
   1e6c0:	2001      	movs	r0, #1
   1e6c2:	f7f3 bfa5 	b.w	12610 <z_arm_fatal_error>

0001e6c6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   1e6c6:	b508      	push	{r3, lr}
	handler();
   1e6c8:	f7f4 f84a 	bl	12760 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1e6cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1e6d0:	f7f4 b922 	b.w	12918 <z_arm_exc_exit>

0001e6d4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1e6d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1e6d6:	ab0b      	add	r3, sp, #44	; 0x2c
   1e6d8:	9305      	str	r3, [sp, #20]
   1e6da:	9303      	str	r3, [sp, #12]
   1e6dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6de:	9302      	str	r3, [sp, #8]
   1e6e0:	2300      	movs	r3, #0
   1e6e2:	e9cd 3300 	strd	r3, r3, [sp]
   1e6e6:	2201      	movs	r2, #1
   1e6e8:	4618      	mov	r0, r3
   1e6ea:	f7f3 fb73 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1e6ee:	b007      	add	sp, #28
   1e6f0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e6f4 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1e6f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1e6f6:	ab0b      	add	r3, sp, #44	; 0x2c
   1e6f8:	9305      	str	r3, [sp, #20]
   1e6fa:	9303      	str	r3, [sp, #12]
   1e6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e6fe:	9302      	str	r3, [sp, #8]
   1e700:	2300      	movs	r3, #0
   1e702:	e9cd 3300 	strd	r3, r3, [sp]
   1e706:	2201      	movs	r2, #1
   1e708:	4618      	mov	r0, r3
   1e70a:	f7f3 fb63 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1e70e:	b007      	add	sp, #28
   1e710:	f85d fb04 	ldr.w	pc, [sp], #4

0001e714 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1e714:	3901      	subs	r1, #1
   1e716:	4603      	mov	r3, r0
   1e718:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1e71c:	b90a      	cbnz	r2, 1e722 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1e71e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1e720:	4770      	bx	lr
		*d = *s;
   1e722:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1e726:	e7f7      	b.n	1e718 <strcpy+0x4>

0001e728 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1e728:	4603      	mov	r3, r0
	size_t n = 0;
   1e72a:	2000      	movs	r0, #0

	while (*s != '\0') {
   1e72c:	5c1a      	ldrb	r2, [r3, r0]
   1e72e:	b902      	cbnz	r2, 1e732 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1e730:	4770      	bx	lr
		n++;
   1e732:	3001      	adds	r0, #1
   1e734:	e7fa      	b.n	1e72c <strlen+0x4>

0001e736 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1e736:	4603      	mov	r3, r0
	size_t n = 0;
   1e738:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1e73a:	5c1a      	ldrb	r2, [r3, r0]
   1e73c:	b10a      	cbz	r2, 1e742 <strnlen+0xc>
   1e73e:	4288      	cmp	r0, r1
   1e740:	d100      	bne.n	1e744 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1e742:	4770      	bx	lr
		n++;
   1e744:	3001      	adds	r0, #1
   1e746:	e7f8      	b.n	1e73a <strnlen+0x4>

0001e748 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1e748:	1e43      	subs	r3, r0, #1
   1e74a:	3901      	subs	r1, #1
   1e74c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1e750:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1e754:	4282      	cmp	r2, r0
   1e756:	d101      	bne.n	1e75c <strcmp+0x14>
   1e758:	2a00      	cmp	r2, #0
   1e75a:	d1f7      	bne.n	1e74c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1e75c:	1a10      	subs	r0, r2, r0
   1e75e:	4770      	bx	lr

0001e760 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1e760:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1e762:	b15a      	cbz	r2, 1e77c <memcmp+0x1c>
   1e764:	3901      	subs	r1, #1
   1e766:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1e768:	f810 2b01 	ldrb.w	r2, [r0], #1
   1e76c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1e770:	42a0      	cmp	r0, r4
   1e772:	d001      	beq.n	1e778 <memcmp+0x18>
   1e774:	429a      	cmp	r2, r3
   1e776:	d0f7      	beq.n	1e768 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1e778:	1ad0      	subs	r0, r2, r3
}
   1e77a:	bd10      	pop	{r4, pc}
		return 0;
   1e77c:	4610      	mov	r0, r2
   1e77e:	e7fc      	b.n	1e77a <memcmp+0x1a>

0001e780 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
   1e780:	b510      	push	{r4, lr}
   1e782:	1e43      	subs	r3, r0, #1
   1e784:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1e786:	4291      	cmp	r1, r2
   1e788:	d100      	bne.n	1e78c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1e78a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1e78c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1e790:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1e794:	e7f7      	b.n	1e786 <memcpy+0x6>

0001e796 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1e796:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1e798:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1e79a:	4603      	mov	r3, r0
	while (n > 0) {
   1e79c:	4293      	cmp	r3, r2
   1e79e:	d100      	bne.n	1e7a2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1e7a0:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1e7a2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1e7a6:	e7f9      	b.n	1e79c <memset+0x6>

0001e7a8 <_stdout_hook_default>:
}
   1e7a8:	f04f 30ff 	mov.w	r0, #4294967295
   1e7ac:	4770      	bx	lr

0001e7ae <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
   1e7ae:	2806      	cmp	r0, #6
   1e7b0:	d108      	bne.n	1e7c4 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1e7b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1e7b6:	2201      	movs	r2, #1
   1e7b8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1e7bc:	f3bf 8f4f 	dsb	sy
        __WFE();
   1e7c0:	bf20      	wfe
    while (true)
   1e7c2:	e7fd      	b.n	1e7c0 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
   1e7c4:	4770      	bx	lr

0001e7c6 <pm_state_exit_post_ops>:
   1e7c6:	2300      	movs	r3, #0
   1e7c8:	f383 8811 	msr	BASEPRI, r3
   1e7cc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1e7d0:	4770      	bx	lr

0001e7d2 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1e7d2:	b510      	push	{r4, lr}
   1e7d4:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1e7d6:	7801      	ldrb	r1, [r0, #0]
   1e7d8:	7822      	ldrb	r2, [r4, #0]
   1e7da:	428a      	cmp	r2, r1
{
   1e7dc:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1e7de:	d00f      	beq.n	1e800 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1e7e0:	4669      	mov	r1, sp
   1e7e2:	f7f4 fd9b 	bl	1331c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1e7e6:	a905      	add	r1, sp, #20
   1e7e8:	4620      	mov	r0, r4
   1e7ea:	f7f4 fd97 	bl	1331c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1e7ee:	2210      	movs	r2, #16
   1e7f0:	f10d 0115 	add.w	r1, sp, #21
   1e7f4:	f10d 0001 	add.w	r0, sp, #1
   1e7f8:	f7ff ffb2 	bl	1e760 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1e7fc:	b00a      	add	sp, #40	; 0x28
   1e7fe:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1e800:	2a01      	cmp	r2, #1
   1e802:	d006      	beq.n	1e812 <bt_uuid_cmp+0x40>
   1e804:	2a02      	cmp	r2, #2
   1e806:	d007      	beq.n	1e818 <bt_uuid_cmp+0x46>
   1e808:	b972      	cbnz	r2, 1e828 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1e80a:	8840      	ldrh	r0, [r0, #2]
   1e80c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1e80e:	1ac0      	subs	r0, r0, r3
   1e810:	e7f4      	b.n	1e7fc <bt_uuid_cmp+0x2a>
   1e812:	6840      	ldr	r0, [r0, #4]
   1e814:	6863      	ldr	r3, [r4, #4]
   1e816:	e7fa      	b.n	1e80e <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e818:	2210      	movs	r2, #16
   1e81a:	1c61      	adds	r1, r4, #1
   1e81c:	3001      	adds	r0, #1
}
   1e81e:	b00a      	add	sp, #40	; 0x28
   1e820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1e824:	f7ff bf9c 	b.w	1e760 <memcmp>
	switch (u1->type) {
   1e828:	f06f 0015 	mvn.w	r0, #21
   1e82c:	e7e6      	b.n	1e7fc <bt_uuid_cmp+0x2a>

0001e82e <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1e82e:	2a04      	cmp	r2, #4
{
   1e830:	b510      	push	{r4, lr}
	switch (data_len) {
   1e832:	d00a      	beq.n	1e84a <bt_uuid_create+0x1c>
   1e834:	2a10      	cmp	r2, #16
   1e836:	d00d      	beq.n	1e854 <bt_uuid_create+0x26>
   1e838:	2a02      	cmp	r2, #2
   1e83a:	f04f 0300 	mov.w	r3, #0
   1e83e:	d10f      	bne.n	1e860 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1e840:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1e842:	880b      	ldrh	r3, [r1, #0]
   1e844:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1e846:	2001      	movs	r0, #1
}
   1e848:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1e84a:	2301      	movs	r3, #1
   1e84c:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1e84e:	680b      	ldr	r3, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1e850:	6043      	str	r3, [r0, #4]
		break;
   1e852:	e7f8      	b.n	1e846 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1e854:	2302      	movs	r3, #2
   1e856:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1e85a:	f7ff ff91 	bl	1e780 <memcpy>
		break;
   1e85e:	e7f2      	b.n	1e846 <bt_uuid_create+0x18>
	switch (data_len) {
   1e860:	4618      	mov	r0, r3
   1e862:	e7f1      	b.n	1e848 <bt_uuid_create+0x1a>

0001e864 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1e864:	2301      	movs	r3, #1
{
   1e866:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1e868:	2106      	movs	r1, #6
{
   1e86a:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1e86c:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1e870:	f7fc f97e 	bl	1ab70 <bt_rand>
	if (err) {
   1e874:	b918      	cbnz	r0, 1e87e <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1e876:	79a3      	ldrb	r3, [r4, #6]
   1e878:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1e87c:	71a3      	strb	r3, [r4, #6]
}
   1e87e:	bd10      	pop	{r4, pc}

0001e880 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1e880:	280f      	cmp	r0, #15
   1e882:	d807      	bhi.n	1e894 <bt_hci_evt_get_flags+0x14>
   1e884:	280d      	cmp	r0, #13
   1e886:	d80b      	bhi.n	1e8a0 <bt_hci_evt_get_flags+0x20>
#endif /* CONFIG_BT_CONN ||  CONFIG_BT_ISO */
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
   1e888:	2805      	cmp	r0, #5
   1e88a:	bf08      	it	eq
   1e88c:	2003      	moveq	r0, #3
   1e88e:	bf18      	it	ne
   1e890:	2002      	movne	r0, #2
   1e892:	4770      	bx	lr
	switch (evt) {
   1e894:	2813      	cmp	r0, #19
   1e896:	d003      	beq.n	1e8a0 <bt_hci_evt_get_flags+0x20>
		return BT_HCI_EVT_FLAG_RECV;
   1e898:	281a      	cmp	r0, #26
   1e89a:	bf08      	it	eq
   1e89c:	2001      	moveq	r0, #1
   1e89e:	e7f6      	b.n	1e88e <bt_hci_evt_get_flags+0xe>
	switch (evt) {
   1e8a0:	2001      	movs	r0, #1
	}
}
   1e8a2:	4770      	bx	lr

0001e8a4 <hci_vendor_event>:
}
   1e8a4:	4770      	bx	lr

0001e8a6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e8a6:	f3bf 8f5b 	dmb	ish
   1e8aa:	6800      	ldr	r0, [r0, #0]
   1e8ac:	f3bf 8f5b 	dmb	ish
}
   1e8b0:	4770      	bx	lr

0001e8b2 <bt_addr_le_copy>:
   1e8b2:	2207      	movs	r2, #7
   1e8b4:	f7ff bf64 	b.w	1e780 <memcpy>

0001e8b8 <atomic_or>:
{
   1e8b8:	b510      	push	{r4, lr}
   1e8ba:	4603      	mov	r3, r0
}
   1e8bc:	f3bf 8f5b 	dmb	ish
   1e8c0:	e853 0f00 	ldrex	r0, [r3]
   1e8c4:	ea40 0201 	orr.w	r2, r0, r1
   1e8c8:	e843 2400 	strex	r4, r2, [r3]
   1e8cc:	2c00      	cmp	r4, #0
   1e8ce:	d1f7      	bne.n	1e8c0 <atomic_or+0x8>
   1e8d0:	f3bf 8f5b 	dmb	ish
   1e8d4:	bd10      	pop	{r4, pc}

0001e8d6 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1e8d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1e8d8:	ab0b      	add	r3, sp, #44	; 0x2c
   1e8da:	9305      	str	r3, [sp, #20]
   1e8dc:	9303      	str	r3, [sp, #12]
   1e8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e8e0:	9302      	str	r3, [sp, #8]
   1e8e2:	2300      	movs	r3, #0
   1e8e4:	e9cd 3300 	strd	r3, r3, [sp]
   1e8e8:	4618      	mov	r0, r3
   1e8ea:	f7f3 fa73 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1e8ee:	b007      	add	sp, #28
   1e8f0:	f85d fb04 	ldr.w	pc, [sp], #4

0001e8f4 <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1e8f4:	f3bf 8f5b 	dmb	ish
   1e8f8:	e850 3f00 	ldrex	r3, [r0]
   1e8fc:	400b      	ands	r3, r1
   1e8fe:	e840 3200 	strex	r2, r3, [r0]
   1e902:	2a00      	cmp	r2, #0
   1e904:	d1f8      	bne.n	1e8f8 <atomic_and.isra.0+0x4>
   1e906:	f3bf 8f5b 	dmb	ish
}
   1e90a:	4770      	bx	lr

0001e90c <bt_hci_disconnect>:
{
   1e90c:	b570      	push	{r4, r5, r6, lr}
   1e90e:	4606      	mov	r6, r0
   1e910:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1e912:	f240 4006 	movw	r0, #1030	; 0x406
   1e916:	2103      	movs	r1, #3
   1e918:	f7f5 f9d0 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   1e91c:	4604      	mov	r4, r0
   1e91e:	b168      	cbz	r0, 1e93c <bt_hci_disconnect+0x30>
   1e920:	2103      	movs	r1, #3
   1e922:	300c      	adds	r0, #12
   1e924:	f001 fa12 	bl	1fd4c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(handle);
   1e928:	8006      	strh	r6, [r0, #0]
	disconn->reason = reason;
   1e92a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e92c:	4621      	mov	r1, r4
   1e92e:	2200      	movs	r2, #0
}
   1e930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1e934:	f240 4006 	movw	r0, #1030	; 0x406
   1e938:	f7f5 b9fa 	b.w	13d30 <bt_hci_cmd_send_sync>
}
   1e93c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e940:	bd70      	pop	{r4, r5, r6, pc}

0001e942 <bt_le_set_data_len>:
{
   1e942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e944:	4607      	mov	r7, r0
   1e946:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e948:	f242 0022 	movw	r0, #8226	; 0x2022
   1e94c:	2106      	movs	r1, #6
{
   1e94e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1e950:	f7f5 f9b4 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   1e954:	4604      	mov	r4, r0
   1e956:	b178      	cbz	r0, 1e978 <bt_le_set_data_len+0x36>
   1e958:	2106      	movs	r1, #6
   1e95a:	300c      	adds	r0, #12
   1e95c:	f001 f9f6 	bl	1fd4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e960:	883b      	ldrh	r3, [r7, #0]
   1e962:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1e964:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1e966:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1e968:	4621      	mov	r1, r4
   1e96a:	2200      	movs	r2, #0
}
   1e96c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_DATA_LEN, buf, NULL);
   1e970:	f242 0022 	movw	r0, #8226	; 0x2022
   1e974:	f7f5 b9dc 	b.w	13d30 <bt_hci_cmd_send_sync>
}
   1e978:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e97c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e97e <bt_le_set_phy>:
{
   1e97e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e982:	4681      	mov	r9, r0
   1e984:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e986:	f242 0032 	movw	r0, #8242	; 0x2032
   1e98a:	2107      	movs	r1, #7
{
   1e98c:	f89d a020 	ldrb.w	sl, [sp, #32]
   1e990:	4617      	mov	r7, r2
   1e992:	461e      	mov	r6, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1e994:	f7f5 f992 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   1e998:	4605      	mov	r5, r0
   1e99a:	b1a0      	cbz	r0, 1e9c6 <bt_le_set_phy+0x48>
   1e99c:	2107      	movs	r1, #7
   1e99e:	300c      	adds	r0, #12
   1e9a0:	f001 f9d4 	bl	1fd4c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1e9a4:	f8b9 3000 	ldrh.w	r3, [r9]
   1e9a8:	8003      	strh	r3, [r0, #0]
	cp->all_phys = all_phys;
   1e9aa:	f880 8002 	strb.w	r8, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1e9ae:	70c7      	strb	r7, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1e9b0:	7106      	strb	r6, [r0, #4]
	cp->phy_opts = phy_opts;
   1e9b2:	f8a0 a005 	strh.w	sl, [r0, #5]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1e9b6:	4629      	mov	r1, r5
   1e9b8:	2200      	movs	r2, #0
}
   1e9ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PHY, buf, NULL);
   1e9be:	f242 0032 	movw	r0, #8242	; 0x2032
   1e9c2:	f7f5 b9b5 	b.w	13d30 <bt_hci_cmd_send_sync>
}
   1e9c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e9ce <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1e9ce:	68c0      	ldr	r0, [r0, #12]
   1e9d0:	f7f5 bb02 	b.w	13fd8 <bt_hci_le_enh_conn_complete>

0001e9d4 <bt_le_conn_params_valid>:
{
   1e9d4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1e9d6:	8803      	ldrh	r3, [r0, #0]
   1e9d8:	8842      	ldrh	r2, [r0, #2]
   1e9da:	4293      	cmp	r3, r2
   1e9dc:	d819      	bhi.n	1ea12 <bt_le_conn_params_valid+0x3e>
   1e9de:	2b05      	cmp	r3, #5
   1e9e0:	d917      	bls.n	1ea12 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1e9e2:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1e9e6:	d814      	bhi.n	1ea12 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1e9e8:	8883      	ldrh	r3, [r0, #4]
   1e9ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1e9ee:	d210      	bcs.n	1ea12 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1e9f0:	88c0      	ldrh	r0, [r0, #6]
   1e9f2:	f1a0 010a 	sub.w	r1, r0, #10
   1e9f6:	b289      	uxth	r1, r1
   1e9f8:	f640 4476 	movw	r4, #3190	; 0xc76
   1e9fc:	42a1      	cmp	r1, r4
   1e9fe:	d808      	bhi.n	1ea12 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1ea00:	3301      	adds	r3, #1
   1ea02:	b29b      	uxth	r3, r3
   1ea04:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ea06:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1ea0a:	bf34      	ite	cc
   1ea0c:	2001      	movcc	r0, #1
   1ea0e:	2000      	movcs	r0, #0
}
   1ea10:	bd10      	pop	{r4, pc}
		return false;
   1ea12:	2000      	movs	r0, #0
   1ea14:	e7fc      	b.n	1ea10 <bt_le_conn_params_valid+0x3c>

0001ea16 <bt_get_appearance>:
}
   1ea16:	2000      	movs	r0, #0
   1ea18:	4770      	bx	lr

0001ea1a <bt_addr_le_is_bonded>:
}
   1ea1a:	2000      	movs	r0, #0
   1ea1c:	4770      	bx	lr

0001ea1e <bt_addr_le_eq>:
{
   1ea1e:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1ea20:	2207      	movs	r2, #7
   1ea22:	f7ff fe9d 	bl	1e760 <memcmp>
}
   1ea26:	fab0 f080 	clz	r0, r0
   1ea2a:	0940      	lsrs	r0, r0, #5
   1ea2c:	bd08      	pop	{r3, pc}

0001ea2e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ea2e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ea30:	ab0b      	add	r3, sp, #44	; 0x2c
   1ea32:	9305      	str	r3, [sp, #20]
   1ea34:	9303      	str	r3, [sp, #12]
   1ea36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ea38:	9302      	str	r3, [sp, #8]
   1ea3a:	2300      	movs	r3, #0
   1ea3c:	e9cd 3300 	strd	r3, r3, [sp]
   1ea40:	4618      	mov	r0, r3
   1ea42:	f7f3 f9c7 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1ea46:	b007      	add	sp, #28
   1ea48:	f85d fb04 	ldr.w	pc, [sp], #4

0001ea4c <bt_lookup_id_addr>:
	return addr;
   1ea4c:	2800      	cmp	r0, #0
}
   1ea4e:	bf0c      	ite	eq
   1ea50:	4608      	moveq	r0, r1
   1ea52:	2000      	movne	r0, #0
   1ea54:	4770      	bx	lr

0001ea56 <bt_id_set_private_addr>:
{
   1ea56:	b507      	push	{r0, r1, r2, lr}
	CHECKIF(id >= CONFIG_BT_ID_MAX) {
   1ea58:	b980      	cbnz	r0, 1ea7c <bt_id_set_private_addr+0x26>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1ea5a:	2106      	movs	r1, #6
   1ea5c:	4668      	mov	r0, sp
   1ea5e:	f7fc f887 	bl	1ab70 <bt_rand>
	if (err) {
   1ea62:	b940      	cbnz	r0, 1ea76 <bt_id_set_private_addr+0x20>
	BT_ADDR_SET_NRPA(&nrpa);
   1ea64:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1ea68:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1ea6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ea6e:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   1ea72:	f7f6 f959 	bl	14d28 <set_random_address>
}
   1ea76:	b003      	add	sp, #12
   1ea78:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   1ea7c:	f06f 0015 	mvn.w	r0, #21
   1ea80:	e7f9      	b.n	1ea76 <bt_id_set_private_addr+0x20>

0001ea82 <bt_id_scan_random_addr_check>:
}
   1ea82:	2001      	movs	r0, #1
   1ea84:	4770      	bx	lr

0001ea86 <atomic_or>:
{
   1ea86:	b510      	push	{r4, lr}
   1ea88:	4603      	mov	r3, r0
}
   1ea8a:	f3bf 8f5b 	dmb	ish
   1ea8e:	e853 0f00 	ldrex	r0, [r3]
   1ea92:	ea40 0201 	orr.w	r2, r0, r1
   1ea96:	e843 2400 	strex	r4, r2, [r3]
   1ea9a:	2c00      	cmp	r4, #0
   1ea9c:	d1f7      	bne.n	1ea8e <atomic_or+0x8>
   1ea9e:	f3bf 8f5b 	dmb	ish
   1eaa2:	bd10      	pop	{r4, pc}

0001eaa4 <atomic_and>:
{
   1eaa4:	b510      	push	{r4, lr}
   1eaa6:	4603      	mov	r3, r0
}
   1eaa8:	f3bf 8f5b 	dmb	ish
   1eaac:	e853 0f00 	ldrex	r0, [r3]
   1eab0:	ea00 0201 	and.w	r2, r0, r1
   1eab4:	e843 2400 	strex	r4, r2, [r3]
   1eab8:	2c00      	cmp	r4, #0
   1eaba:	d1f7      	bne.n	1eaac <atomic_and+0x8>
   1eabc:	f3bf 8f5b 	dmb	ish
   1eac0:	bd10      	pop	{r4, pc}

0001eac2 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eac2:	f3bf 8f5b 	dmb	ish
   1eac6:	6800      	ldr	r0, [r0, #0]
   1eac8:	f3bf 8f5b 	dmb	ish
}
   1eacc:	4770      	bx	lr

0001eace <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1eace:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ead0:	ab0b      	add	r3, sp, #44	; 0x2c
   1ead2:	9305      	str	r3, [sp, #20]
   1ead4:	9303      	str	r3, [sp, #12]
   1ead6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ead8:	9302      	str	r3, [sp, #8]
   1eada:	2300      	movs	r3, #0
   1eadc:	e9cd 3300 	strd	r3, r3, [sp]
   1eae0:	4618      	mov	r0, r3
   1eae2:	f7f3 f977 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1eae6:	b007      	add	sp, #28
   1eae8:	f85d fb04 	ldr.w	pc, [sp], #4

0001eaec <atomic_dec.isra.0>:
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1eaec:	f3bf 8f5b 	dmb	ish
   1eaf0:	e850 3f00 	ldrex	r3, [r0]
   1eaf4:	3b01      	subs	r3, #1
   1eaf6:	e840 3200 	strex	r2, r3, [r0]
   1eafa:	2a00      	cmp	r2, #0
   1eafc:	d1f8      	bne.n	1eaf0 <atomic_dec.isra.0+0x4>
   1eafe:	f3bf 8f5b 	dmb	ish
}
   1eb02:	4770      	bx	lr

0001eb04 <tx_complete_work>:
	tx_notify(conn);
   1eb04:	3828      	subs	r0, #40	; 0x28
   1eb06:	f7f6 bd0b 	b.w	15520 <tx_notify>

0001eb0a <bt_conn_reset_rx_state>:
{
   1eb0a:	b510      	push	{r4, lr}
   1eb0c:	4604      	mov	r4, r0
	if (!conn->rx) {
   1eb0e:	6900      	ldr	r0, [r0, #16]
   1eb10:	b118      	cbz	r0, 1eb1a <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1eb12:	f7f9 fc35 	bl	18380 <net_buf_unref>
	conn->rx = NULL;
   1eb16:	2300      	movs	r3, #0
   1eb18:	6123      	str	r3, [r4, #16]
}
   1eb1a:	bd10      	pop	{r4, pc}

0001eb1c <conn_cleanup>:
{
   1eb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb20:	4604      	mov	r4, r0
		tx_data(buf)->tx = NULL;
   1eb22:	2700      	movs	r7, #0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1eb24:	f104 0638 	add.w	r6, r4, #56	; 0x38
   1eb28:	2300      	movs	r3, #0
   1eb2a:	2200      	movs	r2, #0
   1eb2c:	4630      	mov	r0, r6
   1eb2e:	f001 f8b2 	bl	1fc96 <net_buf_get>
   1eb32:	4603      	mov	r3, r0
   1eb34:	b950      	cbnz	r0, 1eb4c <conn_cleanup+0x30>
	bt_conn_reset_rx_state(conn);
   1eb36:	4620      	mov	r0, r4
   1eb38:	f7ff ffe7 	bl	1eb0a <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1eb3c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1eb40:	2200      	movs	r2, #0
}
   1eb42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1eb46:	2300      	movs	r3, #0
   1eb48:	f7fd be6c 	b.w	1c824 <k_work_reschedule>
		struct bt_conn_tx *tx = tx_data(buf)->tx;
   1eb4c:	699d      	ldr	r5, [r3, #24]
		tx_data(buf)->tx = NULL;
   1eb4e:	619f      	str	r7, [r3, #24]
		net_buf_unref(buf);
   1eb50:	f7f9 fc16 	bl	18380 <net_buf_unref>
		if (tx) {
   1eb54:	2d00      	cmp	r5, #0
   1eb56:	d0e7      	beq.n	1eb28 <conn_cleanup+0xc>
			conn_tx_destroy(conn, tx);
   1eb58:	4629      	mov	r1, r5
   1eb5a:	4620      	mov	r0, r4
   1eb5c:	f7f6 fd10 	bl	15580 <conn_tx_destroy>
   1eb60:	e7e0      	b.n	1eb24 <conn_cleanup+0x8>

0001eb62 <bt_conn_ref>:
{
   1eb62:	b510      	push	{r4, lr}
   1eb64:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   1eb66:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   1eb6a:	4610      	mov	r0, r2
   1eb6c:	f7ff ffa9 	bl	1eac2 <atomic_get>
		if (!old) {
   1eb70:	b180      	cbz	r0, 1eb94 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1eb72:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1eb76:	1c41      	adds	r1, r0, #1
   1eb78:	e852 4f00 	ldrex	r4, [r2]
   1eb7c:	4284      	cmp	r4, r0
   1eb7e:	d104      	bne.n	1eb8a <bt_conn_ref+0x28>
   1eb80:	e842 1c00 	strex	ip, r1, [r2]
   1eb84:	f1bc 0f00 	cmp.w	ip, #0
   1eb88:	d1f6      	bne.n	1eb78 <bt_conn_ref+0x16>
   1eb8a:	f3bf 8f5b 	dmb	ish
   1eb8e:	d1ec      	bne.n	1eb6a <bt_conn_ref+0x8>
}
   1eb90:	4618      	mov	r0, r3
   1eb92:	bd10      	pop	{r4, pc}
			return NULL;
   1eb94:	4603      	mov	r3, r0
   1eb96:	e7fb      	b.n	1eb90 <bt_conn_ref+0x2e>

0001eb98 <conn_lookup_handle>:
{
   1eb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb9c:	4606      	mov	r6, r0
   1eb9e:	460d      	mov	r5, r1
   1eba0:	4617      	mov	r7, r2
	for (i = 0; i < size; i++) {
   1eba2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1eba4:	f04f 08c0 	mov.w	r8, #192	; 0xc0
	for (i = 0; i < size; i++) {
   1eba8:	42ac      	cmp	r4, r5
   1ebaa:	d102      	bne.n	1ebb2 <conn_lookup_handle+0x1a>
	return NULL;
   1ebac:	2000      	movs	r0, #0
}
   1ebae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1ebb2:	fb08 6004 	mla	r0, r8, r4, r6
   1ebb6:	f7ff ffd4 	bl	1eb62 <bt_conn_ref>
		if (!conn) {
   1ebba:	b158      	cbz	r0, 1ebd4 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(conn)) {
   1ebbc:	7a83      	ldrb	r3, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1ebbe:	2b01      	cmp	r3, #1
   1ebc0:	d002      	beq.n	1ebc8 <conn_lookup_handle+0x30>
   1ebc2:	3b07      	subs	r3, #7
   1ebc4:	2b01      	cmp	r3, #1
   1ebc6:	d802      	bhi.n	1ebce <conn_lookup_handle+0x36>
		if (conn->handle != handle) {
   1ebc8:	8803      	ldrh	r3, [r0, #0]
   1ebca:	42bb      	cmp	r3, r7
   1ebcc:	d0ef      	beq.n	1ebae <conn_lookup_handle+0x16>
	old = atomic_dec(&conn->ref);
   1ebce:	30b8      	adds	r0, #184	; 0xb8
   1ebd0:	f7ff ff8c 	bl	1eaec <atomic_dec.isra.0>
	for (i = 0; i < size; i++) {
   1ebd4:	3401      	adds	r4, #1
   1ebd6:	e7e7      	b.n	1eba8 <conn_lookup_handle+0x10>

0001ebd8 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1ebd8:	30b8      	adds	r0, #184	; 0xb8
   1ebda:	f7ff bf87 	b.w	1eaec <atomic_dec.isra.0>

0001ebde <bt_conn_connected>:
{
   1ebde:	b510      	push	{r4, lr}
   1ebe0:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1ebe2:	f7f7 fb6b 	bl	162bc <bt_l2cap_connected>
	notify_connected(conn);
   1ebe6:	4620      	mov	r0, r4
}
   1ebe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1ebec:	f7f6 bc62 	b.w	154b4 <notify_connected>

0001ebf0 <bt_conn_get_security>:
}
   1ebf0:	2001      	movs	r0, #1
   1ebf2:	4770      	bx	lr

0001ebf4 <bt_conn_is_peer_addr_le>:
{
   1ebf4:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1ebf6:	7a03      	ldrb	r3, [r0, #8]
   1ebf8:	428b      	cmp	r3, r1
{
   1ebfa:	4604      	mov	r4, r0
   1ebfc:	4615      	mov	r5, r2
	if (id != conn->id) {
   1ebfe:	d115      	bne.n	1ec2c <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1ec00:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1ec04:	2207      	movs	r2, #7
   1ec06:	4628      	mov	r0, r5
   1ec08:	f7ff fdaa 	bl	1e760 <memcmp>
	if (bt_addr_le_eq(peer, &conn->le.dst)) {
   1ec0c:	b180      	cbz	r0, 1ec30 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1ec0e:	78e3      	ldrb	r3, [r4, #3]
   1ec10:	2207      	movs	r2, #7
   1ec12:	b943      	cbnz	r3, 1ec26 <bt_conn_is_peer_addr_le+0x32>
   1ec14:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1ec18:	4628      	mov	r0, r5
   1ec1a:	f7ff fda1 	bl	1e760 <memcmp>
	return bt_addr_le_cmp(a, b) == 0;
   1ec1e:	fab0 f080 	clz	r0, r0
   1ec22:	0940      	lsrs	r0, r0, #5
}
   1ec24:	bd38      	pop	{r3, r4, r5, pc}
	return memcmp(a, b, sizeof(*a));
   1ec26:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1ec2a:	e7f5      	b.n	1ec18 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1ec2c:	2000      	movs	r0, #0
   1ec2e:	e7f9      	b.n	1ec24 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1ec30:	2001      	movs	r0, #1
   1ec32:	e7f7      	b.n	1ec24 <bt_conn_is_peer_addr_le+0x30>

0001ec34 <bt_conn_get_dst>:
}
   1ec34:	3088      	adds	r0, #136	; 0x88
   1ec36:	4770      	bx	lr

0001ec38 <bt_conn_le_conn_update>:
{
   1ec38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ec3a:	4607      	mov	r7, r0
   1ec3c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1ec3e:	f242 0013 	movw	r0, #8211	; 0x2013
   1ec42:	210e      	movs	r1, #14
   1ec44:	f7f5 f83a 	bl	13cbc <bt_hci_cmd_create>
	if (!buf) {
   1ec48:	4606      	mov	r6, r0
   1ec4a:	b1d0      	cbz	r0, 1ec82 <bt_conn_le_conn_update+0x4a>
   1ec4c:	210e      	movs	r1, #14
   1ec4e:	300c      	adds	r0, #12
   1ec50:	f001 f87c 	bl	1fd4c <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1ec54:	220e      	movs	r2, #14
   1ec56:	4604      	mov	r4, r0
   1ec58:	2100      	movs	r1, #0
   1ec5a:	f7ff fd9c 	bl	1e796 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1ec5e:	883b      	ldrh	r3, [r7, #0]
   1ec60:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1ec62:	882b      	ldrh	r3, [r5, #0]
   1ec64:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1ec66:	886b      	ldrh	r3, [r5, #2]
   1ec68:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1ec6a:	88ab      	ldrh	r3, [r5, #4]
   1ec6c:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1ec6e:	88eb      	ldrh	r3, [r5, #6]
   1ec70:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ec72:	4631      	mov	r1, r6
   1ec74:	2200      	movs	r2, #0
}
   1ec76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1ec7a:	f242 0013 	movw	r0, #8211	; 0x2013
   1ec7e:	f7f5 b857 	b.w	13d30 <bt_hci_cmd_send_sync>
}
   1ec82:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1ec86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ec88 <l2cap_connected>:
}
   1ec88:	4770      	bx	lr

0001ec8a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ec8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ec8c:	ab0b      	add	r3, sp, #44	; 0x2c
   1ec8e:	9305      	str	r3, [sp, #20]
   1ec90:	9303      	str	r3, [sp, #12]
   1ec92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ec94:	9302      	str	r3, [sp, #8]
   1ec96:	2300      	movs	r3, #0
   1ec98:	e9cd 3300 	strd	r3, r3, [sp]
   1ec9c:	4618      	mov	r0, r3
   1ec9e:	f7f3 f899 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1eca2:	b007      	add	sp, #28
   1eca4:	f85d fb04 	ldr.w	pc, [sp], #4

0001eca8 <l2cap_disconnected>:
static void l2cap_disconnected(struct bt_l2cap_chan *chan)
   1eca8:	4770      	bx	lr

0001ecaa <bt_l2cap_chan_del>:
{
   1ecaa:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1ecac:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1ecb0:	4604      	mov	r4, r0
	if (!chan->conn) {
   1ecb2:	b123      	cbz	r3, 1ecbe <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1ecb4:	686b      	ldr	r3, [r5, #4]
   1ecb6:	b103      	cbz	r3, 1ecba <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1ecb8:	4798      	blx	r3
	chan->conn = NULL;
   1ecba:	2300      	movs	r3, #0
   1ecbc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1ecbe:	68e3      	ldr	r3, [r4, #12]
   1ecc0:	b10b      	cbz	r3, 1ecc6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1ecc2:	4620      	mov	r0, r4
   1ecc4:	4798      	blx	r3
	if (ops->released) {
   1ecc6:	6a2b      	ldr	r3, [r5, #32]
   1ecc8:	b11b      	cbz	r3, 1ecd2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1ecca:	4620      	mov	r0, r4
}
   1eccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1ecd0:	4718      	bx	r3
}
   1ecd2:	bd70      	pop	{r4, r5, r6, pc}

0001ecd4 <bt_l2cap_disconnected>:
{
   1ecd4:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1ecd6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ecd8:	b130      	cbz	r0, 1ece8 <bt_l2cap_disconnected+0x14>
	return node->next;
   1ecda:	f850 4908 	ldr.w	r4, [r0], #-8
   1ecde:	b104      	cbz	r4, 1ece2 <bt_l2cap_disconnected+0xe>
   1ece0:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1ece2:	f7ff ffe2 	bl	1ecaa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ece6:	b904      	cbnz	r4, 1ecea <bt_l2cap_disconnected+0x16>
}
   1ece8:	bd38      	pop	{r3, r4, r5, pc}
   1ecea:	68a5      	ldr	r5, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ecec:	b12d      	cbz	r5, 1ecfa <bt_l2cap_disconnected+0x26>
		bt_l2cap_chan_del(chan);
   1ecee:	4620      	mov	r0, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ecf0:	3d08      	subs	r5, #8
		bt_l2cap_chan_del(chan);
   1ecf2:	f7ff ffda 	bl	1ecaa <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1ecf6:	462c      	mov	r4, r5
   1ecf8:	e7f7      	b.n	1ecea <bt_l2cap_disconnected+0x16>
		bt_l2cap_chan_del(chan);
   1ecfa:	4620      	mov	r0, r4
}
   1ecfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_l2cap_chan_del(chan);
   1ed00:	f7ff bfd3 	b.w	1ecaa <bt_l2cap_chan_del>

0001ed04 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1ed04:	3104      	adds	r1, #4
   1ed06:	f7f6 bf8b 	b.w	15c20 <bt_conn_create_pdu_timeout>

0001ed0a <bt_l2cap_send_cb>:
{
   1ed0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed0e:	4614      	mov	r4, r2
   1ed10:	4605      	mov	r5, r0
   1ed12:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1ed14:	f102 000c 	add.w	r0, r2, #12
   1ed18:	2104      	movs	r1, #4
   1ed1a:	461e      	mov	r6, r3
   1ed1c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1ed20:	f001 f823 	bl	1fd6a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ed24:	8a22      	ldrh	r2, [r4, #16]
	hdr->cid = sys_cpu_to_le16(cid);
   1ed26:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1ed28:	3a04      	subs	r2, #4
   1ed2a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ed2c:	4643      	mov	r3, r8
   1ed2e:	4632      	mov	r2, r6
   1ed30:	4621      	mov	r1, r4
   1ed32:	4628      	mov	r0, r5
}
   1ed34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1ed38:	f7f6 bdae 	b.w	15898 <bt_conn_send_cb>

0001ed3c <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   1ed3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ed3e:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1ed40:	2202      	movs	r2, #2
   1ed42:	2001      	movs	r0, #1
   1ed44:	f7f7 fa72 	bl	1622c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1ed48:	4604      	mov	r4, r0
   1ed4a:	b198      	cbz	r0, 1ed74 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1ed4c:	2102      	movs	r1, #2
   1ed4e:	300c      	adds	r0, #12
   1ed50:	f000 fffc 	bl	1fd4c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1ed54:	2300      	movs	r3, #0
   1ed56:	7003      	strb	r3, [r0, #0]
   1ed58:	7043      	strb	r3, [r0, #1]
   1ed5a:	4622      	mov	r2, r4
   1ed5c:	9300      	str	r3, [sp, #0]
   1ed5e:	2105      	movs	r1, #5
   1ed60:	4628      	mov	r0, r5
   1ed62:	f7ff ffd2 	bl	1ed0a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1ed66:	b128      	cbz	r0, 1ed74 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   1ed68:	4620      	mov	r0, r4
}
   1ed6a:	b003      	add	sp, #12
   1ed6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1ed70:	f7f9 bb06 	b.w	18380 <net_buf_unref>
}
   1ed74:	b003      	add	sp, #12
   1ed76:	bd30      	pop	{r4, r5, pc}

0001ed78 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1ed78:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed7a:	b130      	cbz	r0, 1ed8a <bt_l2cap_le_lookup_rx_cid+0x12>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ed7c:	8983      	ldrh	r3, [r0, #12]
   1ed7e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1ed80:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1ed84:	d001      	beq.n	1ed8a <bt_l2cap_le_lookup_rx_cid+0x12>
	return node->next;
   1ed86:	6880      	ldr	r0, [r0, #8]
   1ed88:	e7f7      	b.n	1ed7a <bt_l2cap_le_lookup_rx_cid+0x2>
}
   1ed8a:	4770      	bx	lr

0001ed8c <bt_l2cap_init>:
		(void)memset(&l2cap_tx_meta_data_storage[i], 0,
					sizeof(l2cap_tx_meta_data_storage[i]));
		k_fifo_put(&free_l2cap_tx_meta_data, &l2cap_tx_meta_data_storage[i]);
	}
#endif /* CONFIG_BT_L2CAP_DYNAMIC_CHANNEL */
}
   1ed8c:	4770      	bx	lr

0001ed8e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1ed8e:	4603      	mov	r3, r0
	return list->head;
   1ed90:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1ed92:	b128      	cbz	r0, 1eda0 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ed94:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1ed96:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1ed98:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1ed9a:	4288      	cmp	r0, r1
	list->tail = node;
   1ed9c:	bf08      	it	eq
   1ed9e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1eda0:	4770      	bx	lr

0001eda2 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1eda2:	4603      	mov	r3, r0
	size_t bytes = 0;
   1eda4:	2000      	movs	r0, #0

	while (buf) {
   1eda6:	b903      	cbnz	r3, 1edaa <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1eda8:	4770      	bx	lr
		bytes += buf->len;
   1edaa:	8a1a      	ldrh	r2, [r3, #16]
		buf = buf->frags;
   1edac:	685b      	ldr	r3, [r3, #4]
		bytes += buf->len;
   1edae:	4410      	add	r0, r2
		buf = buf->frags;
   1edb0:	e7f9      	b.n	1eda6 <net_buf_frags_len+0x4>

0001edb2 <attr_read_type_cb>:
{
   1edb2:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1edb4:	68d4      	ldr	r4, [r2, #12]
   1edb6:	7823      	ldrb	r3, [r4, #0]
   1edb8:	3102      	adds	r1, #2
   1edba:	b913      	cbnz	r3, 1edc2 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1edbc:	7021      	strb	r1, [r4, #0]
	return true;
   1edbe:	2001      	movs	r0, #1
}
   1edc0:	bd10      	pop	{r4, pc}
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1edc2:	428b      	cmp	r3, r1
   1edc4:	d0fb      	beq.n	1edbe <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1edc6:	8a03      	ldrh	r3, [r0, #16]
   1edc8:	3b02      	subs	r3, #2
   1edca:	8203      	strh	r3, [r0, #16]
		data->item = NULL;
   1edcc:	2000      	movs	r0, #0
   1edce:	6110      	str	r0, [r2, #16]
		return false;
   1edd0:	e7f6      	b.n	1edc0 <attr_read_type_cb+0xe>

0001edd2 <att_prepare_write_req>:
}
   1edd2:	2006      	movs	r0, #6
   1edd4:	4770      	bx	lr

0001edd6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1edd6:	f3bf 8f5b 	dmb	ish
   1edda:	6800      	ldr	r0, [r0, #0]
   1eddc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ede0:	4108      	asrs	r0, r1
}
   1ede2:	f000 0001 	and.w	r0, r0, #1
   1ede6:	4770      	bx	lr

0001ede8 <write_cb>:
{
   1ede8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1edea:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1edec:	4601      	mov	r1, r0
{
   1edee:	4605      	mov	r5, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1edf0:	f44f 7295 	mov.w	r2, #298	; 0x12a
   1edf4:	6820      	ldr	r0, [r4, #0]
   1edf6:	f000 fe29 	bl	1fa4c <bt_gatt_check_perm>
   1edfa:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1edfc:	bb00      	cbnz	r0, 1ee40 <write_cb+0x58>
	if (!data->req) {
   1edfe:	7a23      	ldrb	r3, [r4, #8]
   1ee00:	b1b3      	cbz	r3, 1ee30 <write_cb+0x48>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   1ee02:	f1a3 0218 	sub.w	r2, r3, #24
   1ee06:	4253      	negs	r3, r2
   1ee08:	4153      	adcs	r3, r2
   1ee0a:	009b      	lsls	r3, r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1ee0c:	9301      	str	r3, [sp, #4]
   1ee0e:	8a63      	ldrh	r3, [r4, #18]
   1ee10:	9300      	str	r3, [sp, #0]
   1ee12:	68ae      	ldr	r6, [r5, #8]
   1ee14:	8a23      	ldrh	r3, [r4, #16]
   1ee16:	68e2      	ldr	r2, [r4, #12]
   1ee18:	6820      	ldr	r0, [r4, #0]
   1ee1a:	4629      	mov	r1, r5
   1ee1c:	47b0      	blx	r6
	if (write < 0 || write != data->len) {
   1ee1e:	2800      	cmp	r0, #0
   1ee20:	db08      	blt.n	1ee34 <write_cb+0x4c>
   1ee22:	8a23      	ldrh	r3, [r4, #16]
   1ee24:	4283      	cmp	r3, r0
   1ee26:	d10e      	bne.n	1ee46 <write_cb+0x5e>
	data->err = 0U;
   1ee28:	2300      	movs	r3, #0
   1ee2a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1ee2c:	2001      	movs	r0, #1
   1ee2e:	e008      	b.n	1ee42 <write_cb+0x5a>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1ee30:	2302      	movs	r3, #2
   1ee32:	e7eb      	b.n	1ee0c <write_cb+0x24>
	if (err < 0 && err >= -0xff) {
   1ee34:	f110 0fff 	cmn.w	r0, #255	; 0xff
   1ee38:	d305      	bcc.n	1ee46 <write_cb+0x5e>
		return -err;
   1ee3a:	4240      	negs	r0, r0
   1ee3c:	b2c0      	uxtb	r0, r0
		data->err = err_to_att(write);
   1ee3e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ee40:	2000      	movs	r0, #0
}
   1ee42:	b002      	add	sp, #8
   1ee44:	bd70      	pop	{r4, r5, r6, pc}
	return BT_ATT_ERR_UNLIKELY;
   1ee46:	200e      	movs	r0, #14
   1ee48:	e7f9      	b.n	1ee3e <write_cb+0x56>

0001ee4a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   1ee4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ee4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ee50:	2300      	movs	r3, #0
   1ee52:	9300      	str	r3, [sp, #0]
   1ee54:	461a      	mov	r2, r3
   1ee56:	f7f8 fdc9 	bl	179ec <bt_gatt_foreach_attr_type>
				  user_data);
}
   1ee5a:	b005      	add	sp, #20
   1ee5c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ee60 <find_info_cb>:
{
   1ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ee62:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ee64:	6817      	ldr	r7, [r2, #0]
{
   1ee66:	4605      	mov	r5, r0
   1ee68:	460e      	mov	r6, r1
   1ee6a:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ee6c:	b963      	cbnz	r3, 1ee88 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1ee6e:	6850      	ldr	r0, [r2, #4]
   1ee70:	2101      	movs	r1, #1
   1ee72:	300c      	adds	r0, #12
   1ee74:	f000 ff6a 	bl	1fd4c <net_buf_simple_add>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ee78:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ee7a:	682b      	ldr	r3, [r5, #0]
   1ee7c:	781b      	ldrb	r3, [r3, #0]
   1ee7e:	2b00      	cmp	r3, #0
   1ee80:	bf14      	ite	ne
   1ee82:	2302      	movne	r3, #2
   1ee84:	2301      	moveq	r3, #1
   1ee86:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1ee88:	68a3      	ldr	r3, [r4, #8]
   1ee8a:	781b      	ldrb	r3, [r3, #0]
   1ee8c:	2b01      	cmp	r3, #1
   1ee8e:	d003      	beq.n	1ee98 <find_info_cb+0x38>
   1ee90:	2b02      	cmp	r3, #2
   1ee92:	d019      	beq.n	1eec8 <find_info_cb+0x68>
   1ee94:	2000      	movs	r0, #0
   1ee96:	e016      	b.n	1eec6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1ee98:	682b      	ldr	r3, [r5, #0]
   1ee9a:	781b      	ldrb	r3, [r3, #0]
   1ee9c:	2b00      	cmp	r3, #0
   1ee9e:	d1f9      	bne.n	1ee94 <find_info_cb+0x34>
   1eea0:	6860      	ldr	r0, [r4, #4]
   1eea2:	2104      	movs	r1, #4
   1eea4:	300c      	adds	r0, #12
   1eea6:	f000 ff51 	bl	1fd4c <net_buf_simple_add>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1eeaa:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(handle);
   1eeac:	8006      	strh	r6, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1eeae:	682a      	ldr	r2, [r5, #0]
   1eeb0:	68e3      	ldr	r3, [r4, #12]
   1eeb2:	8852      	ldrh	r2, [r2, #2]
   1eeb4:	805a      	strh	r2, [r3, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1eeb6:	6863      	ldr	r3, [r4, #4]
   1eeb8:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1eeba:	8a1b      	ldrh	r3, [r3, #16]
   1eebc:	1ac0      	subs	r0, r0, r3
   1eebe:	2804      	cmp	r0, #4
		if (chan->chan.tx.mtu - data->buf->len >
   1eec0:	bf94      	ite	ls
   1eec2:	2000      	movls	r0, #0
   1eec4:	2001      	movhi	r0, #1
}
   1eec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1eec8:	682b      	ldr	r3, [r5, #0]
   1eeca:	781b      	ldrb	r3, [r3, #0]
   1eecc:	2b02      	cmp	r3, #2
   1eece:	d1e1      	bne.n	1ee94 <find_info_cb+0x34>
   1eed0:	6860      	ldr	r0, [r4, #4]
   1eed2:	2112      	movs	r1, #18
   1eed4:	300c      	adds	r0, #12
   1eed6:	f000 ff39 	bl	1fd4c <net_buf_simple_add>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1eeda:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   1eedc:	8006      	strh	r6, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1eede:	6829      	ldr	r1, [r5, #0]
   1eee0:	68e0      	ldr	r0, [r4, #12]
   1eee2:	2210      	movs	r2, #16
   1eee4:	3101      	adds	r1, #1
   1eee6:	3002      	adds	r0, #2
   1eee8:	f7ff fc4a 	bl	1e780 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1eeec:	6863      	ldr	r3, [r4, #4]
   1eeee:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
   1eef0:	8a1b      	ldrh	r3, [r3, #16]
   1eef2:	1ac0      	subs	r0, r0, r3
   1eef4:	2812      	cmp	r0, #18
   1eef6:	e7e3      	b.n	1eec0 <find_info_cb+0x60>

0001eef8 <att_chan_mtu_updated>:
{
   1eef8:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1eefa:	6805      	ldr	r5, [r0, #0]
	return list->head;
   1eefc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1eefe:	b352      	cbz	r2, 1ef56 <att_chan_mtu_updated+0x5e>
	return node->next;
   1ef00:	6813      	ldr	r3, [r2, #0]
   1ef02:	b103      	cbz	r3, 1ef06 <att_chan_mtu_updated+0xe>
   1ef04:	3be0      	subs	r3, #224	; 0xe0
   1ef06:	f1a2 04e0 	sub.w	r4, r2, #224	; 0xe0
   1ef0a:	2200      	movs	r2, #0
   1ef0c:	4611      	mov	r1, r2
   1ef0e:	e000      	b.n	1ef12 <att_chan_mtu_updated+0x1a>
   1ef10:	3be0      	subs	r3, #224	; 0xe0
		if (chan == updated_chan) {
   1ef12:	4284      	cmp	r4, r0
   1ef14:	d007      	beq.n	1ef26 <att_chan_mtu_updated+0x2e>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ef16:	8d66      	ldrh	r6, [r4, #42]	; 0x2a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ef18:	8b64      	ldrh	r4, [r4, #26]
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1ef1a:	42b1      	cmp	r1, r6
   1ef1c:	bf38      	it	cc
   1ef1e:	4631      	movcc	r1, r6
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1ef20:	42a2      	cmp	r2, r4
   1ef22:	bf38      	it	cc
   1ef24:	4622      	movcc	r2, r4
   1ef26:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ef28:	b12b      	cbz	r3, 1ef36 <att_chan_mtu_updated+0x3e>
   1ef2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1ef2e:	2b00      	cmp	r3, #0
   1ef30:	d1ee      	bne.n	1ef10 <att_chan_mtu_updated+0x18>
		if (chan == updated_chan) {
   1ef32:	4284      	cmp	r4, r0
   1ef34:	d1ef      	bne.n	1ef16 <att_chan_mtu_updated+0x1e>
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ef36:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1ef38:	8b40      	ldrh	r0, [r0, #26]
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1ef3a:	428b      	cmp	r3, r1
   1ef3c:	d801      	bhi.n	1ef42 <att_chan_mtu_updated+0x4a>
   1ef3e:	4290      	cmp	r0, r2
   1ef40:	d90b      	bls.n	1ef5a <att_chan_mtu_updated+0x62>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ef42:	4282      	cmp	r2, r0
   1ef44:	bf38      	it	cc
   1ef46:	4602      	movcc	r2, r0
   1ef48:	4299      	cmp	r1, r3
   1ef4a:	6828      	ldr	r0, [r5, #0]
   1ef4c:	bf38      	it	cc
   1ef4e:	4619      	movcc	r1, r3
}
   1ef50:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1ef52:	f7f9 b8e9 	b.w	18128 <bt_gatt_att_max_mtu_changed>
   1ef56:	4611      	mov	r1, r2
   1ef58:	e7ed      	b.n	1ef36 <att_chan_mtu_updated+0x3e>
}
   1ef5a:	bc70      	pop	{r4, r5, r6}
   1ef5c:	4770      	bx	lr

0001ef5e <attr_read_group_cb>:
	if (!data->rsp->len) {
   1ef5e:	68d0      	ldr	r0, [r2, #12]
   1ef60:	7803      	ldrb	r3, [r0, #0]
   1ef62:	3104      	adds	r1, #4
   1ef64:	b913      	cbnz	r3, 1ef6c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1ef66:	7001      	strb	r1, [r0, #0]
	return true;
   1ef68:	2001      	movs	r0, #1
   1ef6a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1ef6c:	428b      	cmp	r3, r1
   1ef6e:	d0fb      	beq.n	1ef68 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1ef70:	6891      	ldr	r1, [r2, #8]
   1ef72:	8a0b      	ldrh	r3, [r1, #16]
		data->group = NULL;
   1ef74:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1ef76:	3b04      	subs	r3, #4
   1ef78:	820b      	strh	r3, [r1, #16]
		data->group = NULL;
   1ef7a:	6110      	str	r0, [r2, #16]
}
   1ef7c:	4770      	bx	lr

0001ef7e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ef7e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ef80:	ab0b      	add	r3, sp, #44	; 0x2c
   1ef82:	9305      	str	r3, [sp, #20]
   1ef84:	9303      	str	r3, [sp, #12]
   1ef86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ef88:	9302      	str	r3, [sp, #8]
   1ef8a:	2300      	movs	r3, #0
   1ef8c:	e9cd 3300 	strd	r3, r3, [sp]
   1ef90:	4618      	mov	r0, r3
   1ef92:	f7f2 ff1f 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1ef96:	b007      	add	sp, #28
   1ef98:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef9c <chan_req_send>:
{
   1ef9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ef9e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1efa0:	6888      	ldr	r0, [r1, #8]
   1efa2:	f7ff fefe 	bl	1eda2 <net_buf_frags_len>
   1efa6:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
   1efa8:	4283      	cmp	r3, r0
{
   1efaa:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1efac:	d30d      	bcc.n	1efca <chan_req_send+0x2e>
	chan->req = req;
   1efae:	f8c5 1094 	str.w	r1, [r5, #148]	; 0x94
	buf = req->buf;
   1efb2:	688f      	ldr	r7, [r1, #8]
	req->buf = NULL;
   1efb4:	2600      	movs	r6, #0
   1efb6:	608e      	str	r6, [r1, #8]
	return chan_send(chan, buf);
   1efb8:	4628      	mov	r0, r5
   1efba:	4639      	mov	r1, r7
   1efbc:	f7f7 fbdc 	bl	16778 <chan_send>
	if (err) {
   1efc0:	b110      	cbz	r0, 1efc8 <chan_req_send+0x2c>
		req->buf = buf;
   1efc2:	60a7      	str	r7, [r4, #8]
		chan->req = NULL;
   1efc4:	f8c5 6094 	str.w	r6, [r5, #148]	; 0x94
}
   1efc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   1efca:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1efce:	e7fb      	b.n	1efc8 <chan_req_send+0x2c>

0001efd0 <process_queue>:
{
   1efd0:	b570      	push	{r4, r5, r6, lr}
		return net_buf_get(fifo, K_NO_WAIT);
   1efd2:	2200      	movs	r2, #0
{
   1efd4:	4604      	mov	r4, r0
		return net_buf_get(fifo, K_NO_WAIT);
   1efd6:	2300      	movs	r3, #0
   1efd8:	4608      	mov	r0, r1
{
   1efda:	460e      	mov	r6, r1
		return net_buf_get(fifo, K_NO_WAIT);
   1efdc:	f000 fe5b 	bl	1fc96 <net_buf_get>
	if (buf) {
   1efe0:	4605      	mov	r5, r0
   1efe2:	b158      	cbz	r0, 1effc <process_queue+0x2c>
	return chan_send(chan, buf);
   1efe4:	4601      	mov	r1, r0
   1efe6:	4620      	mov	r0, r4
   1efe8:	f7f7 fbc6 	bl	16778 <chan_send>
		if (err) {
   1efec:	4604      	mov	r4, r0
   1efee:	b118      	cbz	r0, 1eff8 <process_queue+0x28>
			k_queue_prepend(&queue->_queue, buf);
   1eff0:	4629      	mov	r1, r5
   1eff2:	4630      	mov	r0, r6
   1eff4:	f001 fd8b 	bl	20b0e <k_queue_prepend>
}
   1eff8:	4620      	mov	r0, r4
   1effa:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1effc:	f06f 0401 	mvn.w	r4, #1
   1f000:	e7fa      	b.n	1eff8 <process_queue+0x28>

0001f002 <bt_att_chan_send_rsp>:
{
   1f002:	b538      	push	{r3, r4, r5, lr}
   1f004:	4604      	mov	r4, r0
   1f006:	460d      	mov	r5, r1
	err = chan_send(chan, buf);
   1f008:	f7f7 fbb6 	bl	16778 <chan_send>
	if (err) {
   1f00c:	b130      	cbz	r0, 1f01c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1f00e:	4629      	mov	r1, r5
   1f010:	f104 0098 	add.w	r0, r4, #152	; 0x98
}
   1f014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1f018:	f000 be70 	b.w	1fcfc <net_buf_put>
}
   1f01c:	bd38      	pop	{r3, r4, r5, pc}

0001f01e <att_chan_read>:
{
   1f01e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f022:	4680      	mov	r8, r0
   1f024:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f026:	4610      	mov	r0, r2
{
   1f028:	4699      	mov	r9, r3
   1f02a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f02c:	f7ff feb9 	bl	1eda2 <net_buf_frags_len>
   1f030:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1f034:	4283      	cmp	r3, r0
{
   1f036:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f038:	d97a      	bls.n	1f130 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1f03a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1f03e:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1f040:	4630      	mov	r0, r6
   1f042:	f000 fe61 	bl	1fd08 <net_buf_frag_last>
	size_t len, total = 0;
   1f046:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1f04a:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f04c:	4630      	mov	r0, r6
   1f04e:	f7ff fea8 	bl	1eda2 <net_buf_frags_len>
   1f052:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
	return net_buf_simple_tailroom(&buf->b);
   1f056:	f105 070c 	add.w	r7, r5, #12
   1f05a:	1a24      	subs	r4, r4, r0
   1f05c:	4638      	mov	r0, r7
   1f05e:	f000 feb0 	bl	1fdc2 <net_buf_simple_tailroom>
   1f062:	4284      	cmp	r4, r0
   1f064:	d211      	bcs.n	1f08a <att_chan_read+0x6c>
   1f066:	4630      	mov	r0, r6
   1f068:	f7ff fe9b 	bl	1eda2 <net_buf_frags_len>
   1f06c:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1f070:	1a24      	subs	r4, r4, r0
		if (!len) {
   1f072:	bb34      	cbnz	r4, 1f0c2 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f074:	7ab0      	ldrb	r0, [r6, #10]
   1f076:	f7f9 f8c1 	bl	181fc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1f07a:	2200      	movs	r2, #0
   1f07c:	2300      	movs	r3, #0
   1f07e:	f000 fe05 	bl	1fc8c <net_buf_alloc_fixed>
			if (!frag) {
   1f082:	4605      	mov	r5, r0
   1f084:	b930      	cbnz	r0, 1f094 <att_chan_read+0x76>
	return total;
   1f086:	4657      	mov	r7, sl
   1f088:	e02c      	b.n	1f0e4 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1f08a:	4638      	mov	r0, r7
   1f08c:	f000 fe99 	bl	1fdc2 <net_buf_simple_tailroom>
   1f090:	4604      	mov	r4, r0
   1f092:	e7ee      	b.n	1f072 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1f094:	4601      	mov	r1, r0
   1f096:	4630      	mov	r0, r6
   1f098:	f000 fe47 	bl	1fd2a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f09c:	4630      	mov	r0, r6
   1f09e:	f7ff fe80 	bl	1eda2 <net_buf_frags_len>
   1f0a2:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1f0a6:	f105 070c 	add.w	r7, r5, #12
   1f0aa:	1a24      	subs	r4, r4, r0
   1f0ac:	4638      	mov	r0, r7
   1f0ae:	f000 fe88 	bl	1fdc2 <net_buf_simple_tailroom>
   1f0b2:	4284      	cmp	r4, r0
   1f0b4:	d21a      	bcs.n	1f0ec <att_chan_read+0xce>
   1f0b6:	4630      	mov	r0, r6
   1f0b8:	f7ff fe73 	bl	1eda2 <net_buf_frags_len>
   1f0bc:	f8b8 402a 	ldrh.w	r4, [r8, #42]	; 0x2a
   1f0c0:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f0c2:	68e9      	ldr	r1, [r5, #12]
   1f0c4:	8a2a      	ldrh	r2, [r5, #16]
   1f0c6:	f8cd 9000 	str.w	r9, [sp]
   1f0ca:	f8db 7004 	ldr.w	r7, [fp, #4]
   1f0ce:	9803      	ldr	r0, [sp, #12]
   1f0d0:	440a      	add	r2, r1
   1f0d2:	b2a3      	uxth	r3, r4
   1f0d4:	4659      	mov	r1, fp
   1f0d6:	47b8      	blx	r7
		if (read < 0) {
   1f0d8:	1e07      	subs	r7, r0, #0
   1f0da:	da0c      	bge.n	1f0f6 <att_chan_read+0xd8>
				return total;
   1f0dc:	f1ba 0f00 	cmp.w	sl, #0
   1f0e0:	bf18      	it	ne
   1f0e2:	4657      	movne	r7, sl
}
   1f0e4:	4638      	mov	r0, r7
   1f0e6:	b005      	add	sp, #20
   1f0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0ec:	4638      	mov	r0, r7
   1f0ee:	f000 fe68 	bl	1fdc2 <net_buf_simple_tailroom>
   1f0f2:	4604      	mov	r4, r0
   1f0f4:	e7e5      	b.n	1f0c2 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f0f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f0f8:	b993      	cbnz	r3, 1f120 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1f0fa:	4639      	mov	r1, r7
   1f0fc:	f105 000c 	add.w	r0, r5, #12
   1f100:	f000 fe24 	bl	1fd4c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f104:	4630      	mov	r0, r6
   1f106:	f7ff fe4c 	bl	1eda2 <net_buf_frags_len>
   1f10a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
		offset += read;
   1f10e:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f110:	4283      	cmp	r3, r0
		total += read;
   1f112:	44ba      	add	sl, r7
		offset += read;
   1f114:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f118:	d9b5      	bls.n	1f086 <att_chan_read+0x68>
   1f11a:	42a7      	cmp	r7, r4
   1f11c:	d096      	beq.n	1f04c <att_chan_read+0x2e>
   1f11e:	e7b2      	b.n	1f086 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f120:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f124:	4639      	mov	r1, r7
   1f126:	4628      	mov	r0, r5
   1f128:	4798      	blx	r3
   1f12a:	2800      	cmp	r0, #0
   1f12c:	d1e5      	bne.n	1f0fa <att_chan_read+0xdc>
   1f12e:	e7aa      	b.n	1f086 <att_chan_read+0x68>
		return 0;
   1f130:	2700      	movs	r7, #0
   1f132:	e7d7      	b.n	1f0e4 <att_chan_read+0xc6>

0001f134 <sys_slist_find_and_remove.isra.0>:
	return list->head;
   1f134:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f136:	2200      	movs	r2, #0
   1f138:	b903      	cbnz	r3, 1f13c <sys_slist_find_and_remove.isra.0+0x8>
   1f13a:	4770      	bx	lr
   1f13c:	428b      	cmp	r3, r1
   1f13e:	d10f      	bne.n	1f160 <sys_slist_find_and_remove.isra.0+0x2c>
	return node->next;
   1f140:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f142:	b93a      	cbnz	r2, 1f154 <sys_slist_find_and_remove.isra.0+0x20>
   1f144:	6842      	ldr	r2, [r0, #4]
	list->head = node;
   1f146:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f148:	4291      	cmp	r1, r2
   1f14a:	d100      	bne.n	1f14e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1f14c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1f14e:	2300      	movs	r3, #0
   1f150:	600b      	str	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f152:	4770      	bx	lr
	parent->next = child;
   1f154:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f156:	6843      	ldr	r3, [r0, #4]
   1f158:	4299      	cmp	r1, r3
	list->tail = node;
   1f15a:	bf08      	it	eq
   1f15c:	6042      	streq	r2, [r0, #4]
}
   1f15e:	e7f6      	b.n	1f14e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1f160:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f162:	681b      	ldr	r3, [r3, #0]
   1f164:	e7e8      	b.n	1f138 <sys_slist_find_and_remove.isra.0+0x4>

0001f166 <att_exec_write_req>:
static uint8_t att_exec_write_req(struct bt_att_chan *chan, struct net_buf *buf)
   1f166:	2006      	movs	r0, #6
   1f168:	4770      	bx	lr

0001f16a <atomic_test_and_set_bit>:
{
   1f16a:	b510      	push	{r4, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f16c:	2301      	movs	r3, #1
   1f16e:	fa03 f101 	lsl.w	r1, r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f172:	f3bf 8f5b 	dmb	ish
   1f176:	e850 3f00 	ldrex	r3, [r0]
   1f17a:	ea43 0201 	orr.w	r2, r3, r1
   1f17e:	e840 2400 	strex	r4, r2, [r0]
   1f182:	2c00      	cmp	r4, #0
   1f184:	d1f7      	bne.n	1f176 <atomic_test_and_set_bit+0xc>
   1f186:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1f18a:	4219      	tst	r1, r3
}
   1f18c:	bf14      	ite	ne
   1f18e:	2001      	movne	r0, #1
   1f190:	2000      	moveq	r0, #0
   1f192:	bd10      	pop	{r4, pc}

0001f194 <read_cb>:
{
   1f194:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   1f196:	6816      	ldr	r6, [r2, #0]
{
   1f198:	4605      	mov	r5, r0
	data->err = 0x00;
   1f19a:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f19c:	6870      	ldr	r0, [r6, #4]
	data->err = 0x00;
   1f19e:	7313      	strb	r3, [r2, #12]
{
   1f1a0:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f1a2:	4629      	mov	r1, r5
   1f1a4:	2295      	movs	r2, #149	; 0x95
   1f1a6:	f000 fc51 	bl	1fa4c <bt_gatt_check_perm>
   1f1aa:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1f1ac:	b980      	cbnz	r0, 1f1d0 <read_cb+0x3c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f1ae:	e9cd 0000 	strd	r0, r0, [sp]
   1f1b2:	4629      	mov	r1, r5
   1f1b4:	88a3      	ldrh	r3, [r4, #4]
   1f1b6:	68a2      	ldr	r2, [r4, #8]
   1f1b8:	4630      	mov	r0, r6
   1f1ba:	f7ff ff30 	bl	1f01e <att_chan_read>
	if (ret < 0) {
   1f1be:	2800      	cmp	r0, #0
   1f1c0:	da09      	bge.n	1f1d6 <read_cb+0x42>
	if (err < 0 && err >= -0xff) {
   1f1c2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1f1c6:	bf26      	itte	cs
   1f1c8:	4240      	negcs	r0, r0
   1f1ca:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1f1cc:	200e      	movcc	r0, #14
		data->err = err_to_att(ret);
   1f1ce:	7320      	strb	r0, [r4, #12]
		return BT_GATT_ITER_STOP;
   1f1d0:	2000      	movs	r0, #0
}
   1f1d2:	b002      	add	sp, #8
   1f1d4:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_CONTINUE;
   1f1d6:	2001      	movs	r0, #1
   1f1d8:	e7fb      	b.n	1f1d2 <read_cb+0x3e>

0001f1da <read_vl_cb>:
{
   1f1da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1f1de:	f8d2 8000 	ldr.w	r8, [r2]
{
   1f1e2:	4606      	mov	r6, r0
	data->err = 0x00;
   1f1e4:	2300      	movs	r3, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1f1e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
	data->err = 0x00;
   1f1ea:	7313      	strb	r3, [r2, #12]
{
   1f1ec:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1f1ee:	4631      	mov	r1, r6
   1f1f0:	2295      	movs	r2, #149	; 0x95
   1f1f2:	f000 fc2b 	bl	1fa4c <bt_gatt_check_perm>
   1f1f6:	4605      	mov	r5, r0
   1f1f8:	7320      	strb	r0, [r4, #12]
	if (data->err) {
   1f1fa:	b9e0      	cbnz	r0, 1f236 <read_vl_cb+0x5c>
	if (chan->chan.tx.mtu - data->buf->len < 2) {
   1f1fc:	68a0      	ldr	r0, [r4, #8]
   1f1fe:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1f202:	8a02      	ldrh	r2, [r0, #16]
   1f204:	1a9b      	subs	r3, r3, r2
   1f206:	2b01      	cmp	r3, #1
   1f208:	dd15      	ble.n	1f236 <read_vl_cb+0x5c>
   1f20a:	2102      	movs	r1, #2
   1f20c:	300c      	adds	r0, #12
   1f20e:	f000 fd9d 	bl	1fd4c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1f212:	e9cd 5500 	strd	r5, r5, [sp]
   1f216:	4607      	mov	r7, r0
   1f218:	88a3      	ldrh	r3, [r4, #4]
   1f21a:	68a2      	ldr	r2, [r4, #8]
   1f21c:	4631      	mov	r1, r6
   1f21e:	4640      	mov	r0, r8
   1f220:	f7ff fefd 	bl	1f01e <att_chan_read>
	if (read < 0) {
   1f224:	1e03      	subs	r3, r0, #0
   1f226:	da0a      	bge.n	1f23e <read_vl_cb+0x64>
	if (err < 0 && err >= -0xff) {
   1f228:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1f22c:	bf26      	itte	cs
   1f22e:	425b      	negcs	r3, r3
   1f230:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1f232:	230e      	movcc	r3, #14
		data->err = err_to_att(read);
   1f234:	7323      	strb	r3, [r4, #12]
		return BT_GATT_ITER_STOP;
   1f236:	2000      	movs	r0, #0
}
   1f238:	b002      	add	sp, #8
   1f23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rsp->len = read;
   1f23e:	803b      	strh	r3, [r7, #0]
	return BT_GATT_ITER_CONTINUE;
   1f240:	2001      	movs	r0, #1
   1f242:	e7f9      	b.n	1f238 <read_vl_cb+0x5e>

0001f244 <bt_att_sent>:
{
   1f244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f246:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1f248:	1f07      	subs	r7, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f24a:	f100 038c 	add.w	r3, r0, #140	; 0x8c
	struct bt_att *att = chan->att;
   1f24e:	f850 4c04 	ldr.w	r4, [r0, #-4]
   1f252:	f3bf 8f5b 	dmb	ish
   1f256:	e853 1f00 	ldrex	r1, [r3]
   1f25a:	f021 0110 	bic.w	r1, r1, #16
   1f25e:	e843 1200 	strex	r2, r1, [r3]
   1f262:	2a00      	cmp	r2, #0
   1f264:	d1f7      	bne.n	1f256 <bt_att_sent+0x12>
   1f266:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1f26a:	b30c      	cbz	r4, 1f2b0 <bt_att_sent+0x6c>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1f26c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1f270:	b98b      	cbnz	r3, 1f296 <bt_att_sent+0x52>
   1f272:	6863      	ldr	r3, [r4, #4]
   1f274:	b17b      	cbz	r3, 1f296 <bt_att_sent+0x52>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f276:	1d20      	adds	r0, r4, #4
   1f278:	f7ff fd89 	bl	1ed8e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f27c:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1f27e:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f280:	4638      	mov	r0, r7
   1f282:	f7ff fe8b 	bl	1ef9c <chan_req_send>
   1f286:	2800      	cmp	r0, #0
   1f288:	da12      	bge.n	1f2b0 <bt_att_sent+0x6c>
	return list->head;
   1f28a:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   1f28c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f28e:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1f290:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f292:	b903      	cbnz	r3, 1f296 <bt_att_sent+0x52>
	list->tail = node;
   1f294:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1f296:	f105 0194 	add.w	r1, r5, #148	; 0x94
   1f29a:	4638      	mov	r0, r7
   1f29c:	f7ff fe98 	bl	1efd0 <process_queue>
	if (!err) {
   1f2a0:	b130      	cbz	r0, 1f2b0 <bt_att_sent+0x6c>
	(void)process_queue(chan, &att->tx_queue);
   1f2a2:	f104 010c 	add.w	r1, r4, #12
   1f2a6:	4638      	mov	r0, r7
}
   1f2a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1f2ac:	f7ff be90 	b.w	1efd0 <process_queue>
}
   1f2b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f2b2 <att_req_send_process>:
{
   1f2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return list->head;
   1f2b6:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1f2b8:	4680      	mov	r8, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2ba:	2c00      	cmp	r4, #0
   1f2bc:	d03b      	beq.n	1f336 <att_req_send_process+0x84>
	return node->next;
   1f2be:	f854 69e0 	ldr.w	r6, [r4], #-224
   1f2c2:	b106      	cbz	r6, 1f2c6 <att_req_send_process+0x14>
   1f2c4:	3ee0      	subs	r6, #224	; 0xe0
{
   1f2c6:	2300      	movs	r3, #0
   1f2c8:	461d      	mov	r5, r3
		req = get_first_req_matching_chan(&att->reqs, chan);
   1f2ca:	f108 0704 	add.w	r7, r8, #4
   1f2ce:	e013      	b.n	1f2f8 <att_req_send_process+0x46>
		if (!req && prev &&
   1f2d0:	b1c3      	cbz	r3, 1f304 <att_req_send_process+0x52>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1f2d2:	2103      	movs	r1, #3
   1f2d4:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1f2d8:	f7ff fd7d 	bl	1edd6 <atomic_test_bit>
   1f2dc:	4602      	mov	r2, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1f2de:	f103 0090 	add.w	r0, r3, #144	; 0x90
   1f2e2:	f7ff fd78 	bl	1edd6 <atomic_test_bit>
		if (!req && prev &&
   1f2e6:	4282      	cmp	r2, r0
   1f2e8:	d10c      	bne.n	1f304 <att_req_send_process+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f2ea:	b326      	cbz	r6, 1f336 <att_req_send_process+0x84>
   1f2ec:	f8d6 20e0 	ldr.w	r2, [r6, #224]	; 0xe0
   1f2f0:	b102      	cbz	r2, 1f2f4 <att_req_send_process+0x42>
   1f2f2:	3ae0      	subs	r2, #224	; 0xe0
{
   1f2f4:	4634      	mov	r4, r6
   1f2f6:	4616      	mov	r6, r2
		if (chan->req) {
   1f2f8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   1f2fc:	2a00      	cmp	r2, #0
   1f2fe:	d1f4      	bne.n	1f2ea <att_req_send_process+0x38>
		if (!req && prev &&
   1f300:	2d00      	cmp	r5, #0
   1f302:	d0e5      	beq.n	1f2d0 <att_req_send_process+0x1e>
	sys_snode_t *node = sys_slist_get(reqs);
   1f304:	4638      	mov	r0, r7
   1f306:	f7ff fd42 	bl	1ed8e <sys_slist_get>
	if (node) {
   1f30a:	4605      	mov	r5, r0
   1f30c:	b908      	cbnz	r0, 1f312 <att_req_send_process+0x60>
   1f30e:	4623      	mov	r3, r4
   1f310:	e7eb      	b.n	1f2ea <att_req_send_process+0x38>
	return chan_req_send(chan, req);
   1f312:	4601      	mov	r1, r0
   1f314:	4620      	mov	r0, r4
   1f316:	f7ff fe41 	bl	1ef9c <chan_req_send>
		if (bt_att_chan_req_send(chan, req) >= 0) {
   1f31a:	2800      	cmp	r0, #0
   1f31c:	da0b      	bge.n	1f336 <att_req_send_process+0x84>
	return list->head;
   1f31e:	f8d8 3004 	ldr.w	r3, [r8, #4]
	parent->next = child;
   1f322:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f324:	f8d8 3008 	ldr.w	r3, [r8, #8]
	list->head = node;
   1f328:	f8c8 5004 	str.w	r5, [r8, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f32c:	2b00      	cmp	r3, #0
   1f32e:	d1ee      	bne.n	1f30e <att_req_send_process+0x5c>
	list->tail = node;
   1f330:	f8c8 5008 	str.w	r5, [r8, #8]
}
   1f334:	e7eb      	b.n	1f30e <att_req_send_process+0x5c>
}
   1f336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f33a <bt_att_status>:
{
   1f33a:	b538      	push	{r3, r4, r5, lr}
   1f33c:	4605      	mov	r5, r0
   1f33e:	4608      	mov	r0, r1
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1f340:	2100      	movs	r1, #0
   1f342:	f7ff fd48 	bl	1edd6 <atomic_test_bit>
   1f346:	b1c0      	cbz	r0, 1f37a <bt_att_status+0x40>
	if (!chan->att) {
   1f348:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1f34c:	b1a8      	cbz	r0, 1f37a <bt_att_status+0x40>
	if (chan->req) {
   1f34e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   1f352:	b993      	cbnz	r3, 1f37a <bt_att_status+0x40>
	node = sys_slist_get(&chan->att->reqs);
   1f354:	3004      	adds	r0, #4
   1f356:	f7ff fd1a 	bl	1ed8e <sys_slist_get>
	if (!node) {
   1f35a:	4604      	mov	r4, r0
   1f35c:	b168      	cbz	r0, 1f37a <bt_att_status+0x40>
	return chan_req_send(chan, req);
   1f35e:	4601      	mov	r1, r0
   1f360:	1f28      	subs	r0, r5, #4
   1f362:	f7ff fe1b 	bl	1ef9c <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1f366:	2800      	cmp	r0, #0
   1f368:	da07      	bge.n	1f37a <bt_att_status+0x40>
	sys_slist_prepend(&chan->att->reqs, node);
   1f36a:	f855 3c04 	ldr.w	r3, [r5, #-4]
	return list->head;
   1f36e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1f370:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1f372:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1f374:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1f376:	b902      	cbnz	r2, 1f37a <bt_att_status+0x40>
	list->tail = node;
   1f378:	609c      	str	r4, [r3, #8]
}
   1f37a:	bd38      	pop	{r3, r4, r5, pc}

0001f37c <att_sent>:
	struct bt_att_chan *att_chan = data->att_chan;
   1f37c:	6808      	ldr	r0, [r1, #0]
	if (chan->ops->sent) {
   1f37e:	6883      	ldr	r3, [r0, #8]
   1f380:	699b      	ldr	r3, [r3, #24]
   1f382:	b10b      	cbz	r3, 1f388 <att_sent+0xc>
		chan->ops->sent(chan);
   1f384:	3004      	adds	r0, #4
   1f386:	4718      	bx	r3
}
   1f388:	4770      	bx	lr

0001f38a <att_unknown>:
{
   1f38a:	b510      	push	{r4, lr}
   1f38c:	460c      	mov	r4, r1
	if (!err) {
   1f38e:	b90a      	cbnz	r2, 1f394 <att_unknown+0xa>
		att_sent(conn, user_data);
   1f390:	f7ff fff4 	bl	1f37c <att_sent>
	tx_meta_data_free(user_data);
   1f394:	4620      	mov	r0, r4
}
   1f396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1f39a:	f7f7 b933 	b.w	16604 <tx_meta_data_free>

0001f39e <att_tx_complete>:
{
   1f39e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f3a2:	4606      	mov	r6, r0
   1f3a4:	460d      	mov	r5, r1
	if (!err) {
   1f3a6:	4614      	mov	r4, r2
   1f3a8:	b122      	cbz	r2, 1f3b4 <att_tx_complete+0x16>
}
   1f3aa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	tx_meta_data_free(data);
   1f3ae:	4608      	mov	r0, r1
   1f3b0:	f7f7 b928 	b.w	16604 <tx_meta_data_free>
		att_sent(conn, user_data);
   1f3b4:	f7ff ffe2 	bl	1f37c <att_sent>
	bt_gatt_complete_func_t func = data->func;
   1f3b8:	68af      	ldr	r7, [r5, #8]
	uint16_t attr_count = data->attr_count;
   1f3ba:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	void *ud = data->user_data;
   1f3be:	f8d5 900c 	ldr.w	r9, [r5, #12]
	tx_meta_data_free(data);
   1f3c2:	4628      	mov	r0, r5
   1f3c4:	f7f7 f91e 	bl	16604 <tx_meta_data_free>
	if (!err && func) {
   1f3c8:	b92f      	cbnz	r7, 1f3d6 <att_tx_complete+0x38>
}
   1f3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			func(conn, ud);
   1f3ce:	4649      	mov	r1, r9
   1f3d0:	4630      	mov	r0, r6
   1f3d2:	47b8      	blx	r7
		for (uint16_t i = 0; i < attr_count; i++) {
   1f3d4:	3401      	adds	r4, #1
   1f3d6:	b2a3      	uxth	r3, r4
   1f3d8:	4543      	cmp	r3, r8
   1f3da:	d3f8      	bcc.n	1f3ce <att_tx_complete+0x30>
   1f3dc:	e7f5      	b.n	1f3ca <att_tx_complete+0x2c>

0001f3de <att_req_sent>:
{
   1f3de:	b510      	push	{r4, lr}
   1f3e0:	460c      	mov	r4, r1
	if (!err) {
   1f3e2:	b90a      	cbnz	r2, 1f3e8 <att_req_sent+0xa>
		att_sent(conn, user_data);
   1f3e4:	f7ff ffca 	bl	1f37c <att_sent>
	struct bt_att_chan *chan = data->att_chan;
   1f3e8:	6820      	ldr	r0, [r4, #0]
	if (chan->req) {
   1f3ea:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
   1f3ee:	b12b      	cbz	r3, 1f3fc <att_req_sent+0x1e>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1f3f0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f3f4:	2300      	movs	r3, #0
   1f3f6:	30b0      	adds	r0, #176	; 0xb0
   1f3f8:	f7fd fa14 	bl	1c824 <k_work_reschedule>
	tx_meta_data_free(user_data);
   1f3fc:	4620      	mov	r0, r4
}
   1f3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(user_data);
   1f402:	f7f7 b8ff 	b.w	16604 <tx_meta_data_free>

0001f406 <att_cfm_sent>:
{
   1f406:	b510      	push	{r4, lr}
   1f408:	460c      	mov	r4, r1
	if (!err) {
   1f40a:	b90a      	cbnz	r2, 1f410 <att_cfm_sent+0xa>
		att_sent(conn, user_data);
   1f40c:	f7ff ffb6 	bl	1f37c <att_sent>
   1f410:	6823      	ldr	r3, [r4, #0]
   1f412:	f3bf 8f5b 	dmb	ish
   1f416:	3390      	adds	r3, #144	; 0x90
   1f418:	e853 1f00 	ldrex	r1, [r3]
   1f41c:	f021 0102 	bic.w	r1, r1, #2
   1f420:	e843 1200 	strex	r2, r1, [r3]
   1f424:	2a00      	cmp	r2, #0
   1f426:	d1f7      	bne.n	1f418 <att_cfm_sent+0x12>
   1f428:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1f42c:	4620      	mov	r0, r4
}
   1f42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1f432:	f7f7 b8e7 	b.w	16604 <tx_meta_data_free>

0001f436 <att_rsp_sent>:
{
   1f436:	b510      	push	{r4, lr}
   1f438:	460c      	mov	r4, r1
	if (!err) {
   1f43a:	b90a      	cbnz	r2, 1f440 <att_rsp_sent+0xa>
		att_sent(conn, user_data);
   1f43c:	f7ff ff9e 	bl	1f37c <att_sent>
   1f440:	6823      	ldr	r3, [r4, #0]
   1f442:	f3bf 8f5b 	dmb	ish
   1f446:	3390      	adds	r3, #144	; 0x90
   1f448:	e853 1f00 	ldrex	r1, [r3]
   1f44c:	f021 0101 	bic.w	r1, r1, #1
   1f450:	e843 1200 	strex	r2, r1, [r3]
   1f454:	2a00      	cmp	r2, #0
   1f456:	d1f7      	bne.n	1f448 <att_rsp_sent+0x12>
   1f458:	f3bf 8f5b 	dmb	ish
	tx_meta_data_free(data);
   1f45c:	4620      	mov	r0, r4
}
   1f45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tx_meta_data_free(data);
   1f462:	f7f7 b8cf 	b.w	16604 <tx_meta_data_free>

0001f466 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f46a:	4688      	mov	r8, r1
   1f46c:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f46e:	2101      	movs	r1, #1
   1f470:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1f472:	4605      	mov	r5, r0
   1f474:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1f476:	f7f7 fb49 	bl	16b0c <bt_att_chan_create_pdu>
	if (!buf) {
   1f47a:	4604      	mov	r4, r0
   1f47c:	b170      	cbz	r0, 1f49c <send_err_rsp.part.0+0x36>
   1f47e:	2104      	movs	r1, #4
   1f480:	300c      	adds	r0, #12
   1f482:	f000 fc63 	bl	1fd4c <net_buf_simple_add>
	rsp->request = req;
   1f486:	f880 8000 	strb.w	r8, [r0]
	rsp->handle = sys_cpu_to_le16(handle);
   1f48a:	f8a0 7001 	strh.w	r7, [r0, #1]
	rsp->error = err;
   1f48e:	70c6      	strb	r6, [r0, #3]
	bt_att_chan_send_rsp(chan, buf);
   1f490:	4621      	mov	r1, r4
   1f492:	4628      	mov	r0, r5
}
   1f494:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf);
   1f498:	f7ff bdb3 	b.w	1f002 <bt_att_chan_send_rsp>
}
   1f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f4a0 <att_write_req>:
{
   1f4a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f4a2:	460c      	mov	r4, r1
   1f4a4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1f4a6:	f101 000c 	add.w	r0, r1, #12
   1f4aa:	f000 fc7e 	bl	1fdaa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1f4ae:	8a22      	ldrh	r2, [r4, #16]
   1f4b0:	9201      	str	r2, [sp, #4]
   1f4b2:	68e2      	ldr	r2, [r4, #12]
   1f4b4:	9200      	str	r2, [sp, #0]
   1f4b6:	4603      	mov	r3, r0
   1f4b8:	2213      	movs	r2, #19
   1f4ba:	2112      	movs	r1, #18
   1f4bc:	4628      	mov	r0, r5
   1f4be:	f7f7 fc1d 	bl	16cfc <att_write_rsp.constprop.0>
}
   1f4c2:	b003      	add	sp, #12
   1f4c4:	bd30      	pop	{r4, r5, pc}

0001f4c6 <att_write_cmd>:
{
   1f4c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f4c8:	460c      	mov	r4, r1
   1f4ca:	4605      	mov	r5, r0
   1f4cc:	f101 000c 	add.w	r0, r1, #12
   1f4d0:	f000 fc6b 	bl	1fdaa <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1f4d4:	8a22      	ldrh	r2, [r4, #16]
   1f4d6:	9201      	str	r2, [sp, #4]
   1f4d8:	68e2      	ldr	r2, [r4, #12]
   1f4da:	9200      	str	r2, [sp, #0]
   1f4dc:	2200      	movs	r2, #0
   1f4de:	4603      	mov	r3, r0
   1f4e0:	4611      	mov	r1, r2
   1f4e2:	4628      	mov	r0, r5
   1f4e4:	f7f7 fc0a 	bl	16cfc <att_write_rsp.constprop.0>
}
   1f4e8:	b003      	add	sp, #12
   1f4ea:	bd30      	pop	{r4, r5, pc}

0001f4ec <att_read_blob_req>:
{
   1f4ec:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1f4ee:	68ca      	ldr	r2, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1f4f0:	8813      	ldrh	r3, [r2, #0]
   1f4f2:	8852      	ldrh	r2, [r2, #2]
   1f4f4:	9200      	str	r2, [sp, #0]
   1f4f6:	210c      	movs	r1, #12
   1f4f8:	220d      	movs	r2, #13
   1f4fa:	f7f7 fdc1 	bl	17080 <att_read_rsp>
}
   1f4fe:	b003      	add	sp, #12
   1f500:	f85d fb04 	ldr.w	pc, [sp], #4

0001f504 <att_read_req>:
{
   1f504:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1f506:	68cb      	ldr	r3, [r1, #12]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1f508:	2200      	movs	r2, #0
   1f50a:	881b      	ldrh	r3, [r3, #0]
   1f50c:	9200      	str	r2, [sp, #0]
   1f50e:	210a      	movs	r1, #10
   1f510:	220b      	movs	r2, #11
   1f512:	f7f7 fdb5 	bl	17080 <att_read_rsp>
}
   1f516:	b003      	add	sp, #12
   1f518:	f85d fb04 	ldr.w	pc, [sp], #4

0001f51c <att_mtu_req>:
{
   1f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f51e:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   1f520:	f850 2b90 	ldr.w	r2, [r0], #144
{
   1f524:	460b      	mov	r3, r1
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1f526:	2103      	movs	r1, #3
	struct bt_conn *conn = chan->att->conn;
   1f528:	6816      	ldr	r6, [r2, #0]
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1f52a:	f7ff fc54 	bl	1edd6 <atomic_test_bit>
   1f52e:	4604      	mov	r4, r0
   1f530:	b9d8      	cbnz	r0, 1f56a <att_mtu_req+0x4e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1f532:	68db      	ldr	r3, [r3, #12]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1f534:	881b      	ldrh	r3, [r3, #0]
   1f536:	2b16      	cmp	r3, #22
   1f538:	d919      	bls.n	1f56e <att_mtu_req+0x52>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1f53a:	4630      	mov	r0, r6
   1f53c:	2202      	movs	r2, #2
   1f53e:	f7f7 fc41 	bl	16dc4 <bt_att_create_pdu>
	if (!pdu) {
   1f542:	4606      	mov	r6, r0
   1f544:	b1a8      	cbz	r0, 1f572 <att_mtu_req+0x56>
	return net_buf_simple_add(&buf->b, len);
   1f546:	2102      	movs	r1, #2
   1f548:	300c      	adds	r0, #12
   1f54a:	f000 fbff 	bl	1fd4c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1f54e:	2717      	movs	r7, #23
   1f550:	7007      	strb	r7, [r0, #0]
   1f552:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu);
   1f554:	4631      	mov	r1, r6
   1f556:	4628      	mov	r0, r5
   1f558:	f7ff fd53 	bl	1f002 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1f55c:	4628      	mov	r0, r5
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1f55e:	836f      	strh	r7, [r5, #26]
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1f560:	856f      	strh	r7, [r5, #42]	; 0x2a
	att_chan_mtu_updated(chan);
   1f562:	f7ff fcc9 	bl	1eef8 <att_chan_mtu_updated>
	return 0;
   1f566:	4620      	mov	r0, r4
}
   1f568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1f56a:	2006      	movs	r0, #6
   1f56c:	e7fc      	b.n	1f568 <att_mtu_req+0x4c>
		return BT_ATT_ERR_INVALID_PDU;
   1f56e:	2004      	movs	r0, #4
   1f570:	e7fa      	b.n	1f568 <att_mtu_req+0x4c>
		return BT_ATT_ERR_UNLIKELY;
   1f572:	200e      	movs	r0, #14
   1f574:	e7f8      	b.n	1f568 <att_mtu_req+0x4c>

0001f576 <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1f576:	8a0a      	ldrh	r2, [r1, #16]
   1f578:	68c9      	ldr	r1, [r1, #12]
   1f57a:	2300      	movs	r3, #0
   1f57c:	f7f7 bf2c 	b.w	173d8 <att_handle_rsp>

0001f580 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
   1f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f582:	460d      	mov	r5, r1
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1f584:	f7f7 f956 	bl	16834 <att_get>
	if (!att) {
   1f588:	4604      	mov	r4, r0
   1f58a:	b940      	cbnz	r0, 1f59e <bt_att_send+0x1e>
		tx_meta_data_free(bt_att_tx_meta_data(buf));
   1f58c:	69a8      	ldr	r0, [r5, #24]
   1f58e:	f7f7 f839 	bl	16604 <tx_meta_data_free>
		net_buf_unref(buf);
   1f592:	4628      	mov	r0, r5
   1f594:	f7f8 fef4 	bl	18380 <net_buf_unref>
		return -ENOTCONN;
   1f598:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_put(&att->tx_queue, buf);
   1f59e:	f100 060c 	add.w	r6, r0, #12
   1f5a2:	4629      	mov	r1, r5
   1f5a4:	4630      	mov	r0, r6
   1f5a6:	f000 fba9 	bl	1fcfc <net_buf_put>
	return list->head;
   1f5aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f5ac:	b14d      	cbz	r5, 1f5c2 <bt_att_send+0x42>
	return node->next;
   1f5ae:	f855 49e0 	ldr.w	r4, [r5], #-224
   1f5b2:	b104      	cbz	r4, 1f5b6 <bt_att_send+0x36>
   1f5b4:	3ce0      	subs	r4, #224	; 0xe0
		err = process_queue(chan, &att->tx_queue);
   1f5b6:	4631      	mov	r1, r6
   1f5b8:	4628      	mov	r0, r5
   1f5ba:	f7ff fd09 	bl	1efd0 <process_queue>
		if (!err) {
   1f5be:	4603      	mov	r3, r0
   1f5c0:	b980      	cbnz	r0, 1f5e4 <bt_att_send+0x64>
	return 0;
   1f5c2:	2000      	movs	r0, #0
   1f5c4:	e7ea      	b.n	1f59c <bt_att_send+0x1c>
		    (atomic_test_bit(chan->flags, ATT_ENHANCED) ==
   1f5c6:	2103      	movs	r1, #3
   1f5c8:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1f5cc:	f7ff fc03 	bl	1edd6 <atomic_test_bit>
   1f5d0:	4607      	mov	r7, r0
		     atomic_test_bit(prev->flags, ATT_ENHANCED))) {
   1f5d2:	f105 0090 	add.w	r0, r5, #144	; 0x90
   1f5d6:	f7ff fbfe 	bl	1edd6 <atomic_test_bit>
		if (err == -ENOENT && prev &&
   1f5da:	4287      	cmp	r7, r0
   1f5dc:	f06f 0301 	mvn.w	r3, #1
   1f5e0:	d107      	bne.n	1f5f2 <bt_att_send+0x72>
   1f5e2:	4614      	mov	r4, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f5e4:	2c00      	cmp	r4, #0
   1f5e6:	d0ec      	beq.n	1f5c2 <bt_att_send+0x42>
   1f5e8:	f8d4 20e0 	ldr.w	r2, [r4, #224]	; 0xe0
   1f5ec:	b922      	cbnz	r2, 1f5f8 <__kernel_ram_size>
		if (err == -ENOENT && prev &&
   1f5ee:	3302      	adds	r3, #2
   1f5f0:	d0e9      	beq.n	1f5c6 <bt_att_send+0x46>
{
   1f5f2:	4625      	mov	r5, r4
   1f5f4:	4614      	mov	r4, r2
   1f5f6:	e7de      	b.n	1f5b6 <bt_att_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1f5f8:	3ae0      	subs	r2, #224	; 0xe0
   1f5fa:	e7f8      	b.n	1f5ee <bt_att_send+0x6e>

0001f5fc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1f5fc:	b510      	push	{r4, lr}
   1f5fe:	460c      	mov	r4, r1
	LOG_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1f600:	f7f7 f918 	bl	16834 <att_get>
	if (!att) {
   1f604:	b160      	cbz	r0, 1f620 <bt_att_req_send+0x24>
	parent->next = child;
   1f606:	2300      	movs	r3, #0
   1f608:	6023      	str	r3, [r4, #0]
	return list->tail;
   1f60a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1f60c:	b92b      	cbnz	r3, 1f61a <bt_att_req_send+0x1e>
	list->head = node;
   1f60e:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1f612:	f7ff fe4e 	bl	1f2b2 <att_req_send_process>

	return 0;
   1f616:	2000      	movs	r0, #0
}
   1f618:	bd10      	pop	{r4, pc}
	parent->next = child;
   1f61a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1f61c:	6084      	str	r4, [r0, #8]
}
   1f61e:	e7f8      	b.n	1f612 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1f620:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1f624:	e7f8      	b.n	1f618 <bt_att_req_send+0x1c>

0001f626 <bt_att_fixed_chan_only>:
#if defined(CONFIG_BT_EATT)
	return bt_eatt_count(conn) == 0;
#else
	return true;
#endif /* CONFIG_BT_EATT */
}
   1f626:	2001      	movs	r0, #1
   1f628:	4770      	bx	lr

0001f62a <bt_att_clear_out_of_sync_sent>:

void bt_att_clear_out_of_sync_sent(struct bt_conn *conn)
{
   1f62a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
   1f62c:	f7f7 f902 	bl	16834 <att_get>
	struct bt_att_chan *chan;

	if (!att) {
   1f630:	b198      	cbz	r0, 1f65a <bt_att_clear_out_of_sync_sent+0x30>
	return list->head;
   1f632:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1f634:	b18b      	cbz	r3, 1f65a <bt_att_clear_out_of_sync_sent+0x30>
   1f636:	f3bf 8f5b 	dmb	ish
   1f63a:	3be0      	subs	r3, #224	; 0xe0
   1f63c:	f103 0290 	add.w	r2, r3, #144	; 0x90
   1f640:	e852 0f00 	ldrex	r0, [r2]
   1f644:	f020 0020 	bic.w	r0, r0, #32
   1f648:	e842 0100 	strex	r1, r0, [r2]
   1f64c:	2900      	cmp	r1, #0
   1f64e:	d1f7      	bne.n	1f640 <bt_att_clear_out_of_sync_sent+0x16>
   1f650:	f3bf 8f5b 	dmb	ish
	return node->next;
   1f654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   1f658:	e7ec      	b.n	1f634 <bt_att_clear_out_of_sync_sent+0xa>
		atomic_clear_bit(chan->flags, ATT_OUT_OF_SYNC_SENT);
	}
}
   1f65a:	bd08      	pop	{r3, pc}

0001f65c <bt_att_out_of_sync_sent_on_fixed>:

bool bt_att_out_of_sync_sent_on_fixed(struct bt_conn *conn)
{
   1f65c:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *l2cap_chan;
	struct bt_att_chan *att_chan;

	l2cap_chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1f65e:	2104      	movs	r1, #4
   1f660:	f7ff fb8a 	bl	1ed78 <bt_l2cap_le_lookup_rx_cid>
	if (!l2cap_chan) {
   1f664:	b128      	cbz	r0, 1f672 <bt_att_out_of_sync_sent_on_fixed+0x16>
		return false;
	}

	att_chan = ATT_CHAN(l2cap_chan);
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
}
   1f666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return atomic_test_bit(att_chan->flags, ATT_OUT_OF_SYNC_SENT);
   1f66a:	2105      	movs	r1, #5
   1f66c:	308c      	adds	r0, #140	; 0x8c
   1f66e:	f7ff bbb2 	b.w	1edd6 <atomic_test_bit>
}
   1f672:	bd08      	pop	{r3, pc}

0001f674 <bt_att_set_tx_meta_data>:

void bt_att_set_tx_meta_data(struct net_buf *buf, bt_gatt_complete_func_t func, void *user_data,
			     enum bt_att_chan_opt chan_opt)
{
	struct bt_att_tx_meta_data *data = bt_att_tx_meta_data(buf);
   1f674:	6980      	ldr	r0, [r0, #24]

	data->func = func;
	data->user_data = user_data;
   1f676:	e9c0 1202 	strd	r1, r2, [r0, #8]
	data->attr_count = 1;
   1f67a:	2201      	movs	r2, #1
   1f67c:	8082      	strh	r2, [r0, #4]
	data->chan_opt = chan_opt;
   1f67e:	7403      	strb	r3, [r0, #16]
}
   1f680:	4770      	bx	lr

0001f682 <find_next>:
	*next = (struct bt_gatt_attr *)attr;
   1f682:	6010      	str	r0, [r2, #0]
}
   1f684:	2000      	movs	r0, #0
   1f686:	4770      	bx	lr

0001f688 <gatt_ccc_changed>:
{
   1f688:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1f68a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1f68c:	895a      	ldrh	r2, [r3, #10]
   1f68e:	428a      	cmp	r2, r1
   1f690:	d003      	beq.n	1f69a <gatt_ccc_changed+0x12>
		ccc->value = value;
   1f692:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1f694:	68db      	ldr	r3, [r3, #12]
   1f696:	b103      	cbz	r3, 1f69a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1f698:	4718      	bx	r3
}
   1f69a:	4770      	bx	lr

0001f69c <gatt_indicate_rsp>:
{
   1f69c:	b510      	push	{r4, lr}
   1f69e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1f6a0:	68a3      	ldr	r3, [r4, #8]
{
   1f6a2:	460a      	mov	r2, r1
	if (params->func) {
   1f6a4:	b10b      	cbz	r3, 1f6aa <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1f6a6:	4621      	mov	r1, r4
   1f6a8:	4798      	blx	r3
	params->_ref--;
   1f6aa:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f6ac:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1f6ae:	3b01      	subs	r3, #1
   1f6b0:	b2db      	uxtb	r3, r3
   1f6b2:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1f6b4:	b122      	cbz	r2, 1f6c0 <gatt_indicate_rsp+0x24>
   1f6b6:	b91b      	cbnz	r3, 1f6c0 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1f6b8:	4620      	mov	r0, r4
}
   1f6ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1f6be:	4710      	bx	r2
}
   1f6c0:	bd10      	pop	{r4, pc}

0001f6c2 <match_uuid>:
	data->attr = attr;
   1f6c2:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1f6c4:	8091      	strh	r1, [r2, #4]
}
   1f6c6:	2000      	movs	r0, #0
   1f6c8:	4770      	bx	lr

0001f6ca <gen_hash_m>:
{
   1f6ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f6cc:	6807      	ldr	r7, [r0, #0]
   1f6ce:	783d      	ldrb	r5, [r7, #0]
{
   1f6d0:	b089      	sub	sp, #36	; 0x24
   1f6d2:	4606      	mov	r6, r0
   1f6d4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1f6d6:	b9dd      	cbnz	r5, 1f710 <gen_hash_m+0x46>
	switch (u16->val) {
   1f6d8:	887b      	ldrh	r3, [r7, #2]
   1f6da:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1f6de:	d004      	beq.n	1f6ea <gen_hash_m+0x20>
   1f6e0:	d810      	bhi.n	1f704 <gen_hash_m+0x3a>
   1f6e2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1f6e6:	2b03      	cmp	r3, #3
   1f6e8:	d812      	bhi.n	1f710 <gen_hash_m+0x46>
		value = sys_cpu_to_le16(handle);
   1f6ea:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f6ee:	2202      	movs	r2, #2
   1f6f0:	f10d 010a 	add.w	r1, sp, #10
   1f6f4:	4620      	mov	r0, r4
   1f6f6:	f7fe ff2f 	bl	1e558 <tc_cmac_update>
   1f6fa:	b968      	cbnz	r0, 1f718 <gen_hash_m+0x4e>
			return BT_GATT_ITER_STOP;
   1f6fc:	f06f 0215 	mvn.w	r2, #21
			state->err = -EINVAL;
   1f700:	65a2      	str	r2, [r4, #88]	; 0x58
   1f702:	e006      	b.n	1f712 <gen_hash_m+0x48>
	switch (u16->val) {
   1f704:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1f708:	33ff      	adds	r3, #255	; 0xff
   1f70a:	b29b      	uxth	r3, r3
   1f70c:	2b04      	cmp	r3, #4
   1f70e:	d91e      	bls.n	1f74e <gen_hash_m+0x84>
			return BT_GATT_ITER_STOP;
   1f710:	2501      	movs	r5, #1
}
   1f712:	4628      	mov	r0, r5
   1f714:	b009      	add	sp, #36	; 0x24
   1f716:	bdf0      	pop	{r4, r5, r6, r7, pc}
		value = sys_cpu_to_le16(u16->val);
   1f718:	887b      	ldrh	r3, [r7, #2]
   1f71a:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f71e:	2202      	movs	r2, #2
   1f720:	f10d 010a 	add.w	r1, sp, #10
   1f724:	4620      	mov	r0, r4
   1f726:	f7fe ff17 	bl	1e558 <tc_cmac_update>
   1f72a:	2800      	cmp	r0, #0
   1f72c:	d0e6      	beq.n	1f6fc <gen_hash_m+0x32>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1f72e:	2000      	movs	r0, #0
   1f730:	9000      	str	r0, [sp, #0]
   1f732:	aa03      	add	r2, sp, #12
   1f734:	6877      	ldr	r7, [r6, #4]
   1f736:	2313      	movs	r3, #19
   1f738:	4631      	mov	r1, r6
   1f73a:	47b8      	blx	r7
		if (len < 0) {
   1f73c:	1e02      	subs	r2, r0, #0
   1f73e:	dbdf      	blt.n	1f700 <gen_hash_m+0x36>
		if (tc_cmac_update(&state->state, data, len) ==
   1f740:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f742:	4620      	mov	r0, r4
   1f744:	f7fe ff08 	bl	1e558 <tc_cmac_update>
   1f748:	2800      	cmp	r0, #0
   1f74a:	d1e1      	bne.n	1f710 <gen_hash_m+0x46>
   1f74c:	e7d6      	b.n	1f6fc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(handle);
   1f74e:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f752:	2202      	movs	r2, #2
   1f754:	f10d 010a 	add.w	r1, sp, #10
   1f758:	4620      	mov	r0, r4
   1f75a:	f7fe fefd 	bl	1e558 <tc_cmac_update>
   1f75e:	2800      	cmp	r0, #0
   1f760:	d0cc      	beq.n	1f6fc <gen_hash_m+0x32>
		value = sys_cpu_to_le16(u16->val);
   1f762:	887b      	ldrh	r3, [r7, #2]
   1f764:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1f768:	2202      	movs	r2, #2
   1f76a:	f10d 010a 	add.w	r1, sp, #10
   1f76e:	e7e8      	b.n	1f742 <gen_hash_m+0x78>

0001f770 <bt_addr_le_eq>:
{
   1f770:	b508      	push	{r3, lr}
	return memcmp(a, b, sizeof(*a));
   1f772:	2207      	movs	r2, #7
   1f774:	f7fe fff4 	bl	1e760 <memcmp>
}
   1f778:	fab0 f080 	clz	r0, r0
   1f77c:	0940      	lsrs	r0, r0, #5
   1f77e:	bd08      	pop	{r3, pc}

0001f780 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f780:	2207      	movs	r2, #7
   1f782:	f7fe bffd 	b.w	1e780 <memcpy>

0001f786 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1f786:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1f788:	ab0b      	add	r3, sp, #44	; 0x2c
   1f78a:	9305      	str	r3, [sp, #20]
   1f78c:	9303      	str	r3, [sp, #12]
   1f78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f790:	9302      	str	r3, [sp, #8]
   1f792:	2300      	movs	r3, #0
   1f794:	e9cd 3300 	strd	r3, r3, [sp]
   1f798:	4618      	mov	r0, r3
   1f79a:	f7f2 fb1b 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1f79e:	b007      	add	sp, #28
   1f7a0:	f85d fb04 	ldr.w	pc, [sp], #4

0001f7a4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f7a4:	2301      	movs	r3, #1
   1f7a6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f7a8:	f3bf 8f5b 	dmb	ish
   1f7ac:	e850 2f00 	ldrex	r2, [r0]
   1f7b0:	431a      	orrs	r2, r3
   1f7b2:	e840 2100 	strex	r1, r2, [r0]
   1f7b6:	2900      	cmp	r1, #0
   1f7b8:	d1f8      	bne.n	1f7ac <atomic_set_bit+0x8>
   1f7ba:	f3bf 8f5b 	dmb	ish
}
   1f7be:	4770      	bx	lr

0001f7c0 <sc_restore_rsp>:
{
   1f7c0:	b538      	push	{r3, r4, r5, lr}
   1f7c2:	4604      	mov	r4, r0
   1f7c4:	4615      	mov	r5, r2
	if (bt_att_fixed_chan_only(conn)) {
   1f7c6:	f7ff ff2e 	bl	1f626 <bt_att_fixed_chan_only>
   1f7ca:	b150      	cbz	r0, 1f7e2 <sc_restore_rsp+0x22>
		cfg = find_cf_cfg(conn);
   1f7cc:	4620      	mov	r0, r4
   1f7ce:	f7f7 fec5 	bl	1755c <find_cf_cfg>
		if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f7d2:	b130      	cbz	r0, 1f7e2 <sc_restore_rsp+0x22>
   1f7d4:	7a03      	ldrb	r3, [r0, #8]
   1f7d6:	07db      	lsls	r3, r3, #31
   1f7d8:	d503      	bpl.n	1f7e2 <sc_restore_rsp+0x22>
			atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f7da:	2100      	movs	r1, #0
   1f7dc:	300c      	adds	r0, #12
   1f7de:	f7ff ffe1 	bl	1f7a4 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   1f7e2:	b965      	cbnz	r5, 1f7fe <sc_restore_rsp+0x3e>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1f7e4:	7a20      	ldrb	r0, [r4, #8]
   1f7e6:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1f7ea:	f7f7 fecf 	bl	1758c <find_sc_cfg>
		if (sc_cfg) {
   1f7ee:	b130      	cbz	r0, 1f7fe <sc_restore_rsp+0x3e>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1f7f0:	4629      	mov	r1, r5
   1f7f2:	2204      	movs	r2, #4
}
   1f7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset(&cfg->data, 0, sizeof(cfg->data));
   1f7f8:	3008      	adds	r0, #8
   1f7fa:	f7fe bfcc 	b.w	1e796 <memset>
}
   1f7fe:	bd38      	pop	{r3, r4, r5, pc}

0001f800 <sc_clear>:
{
   1f800:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f802:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f806:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f808:	4631      	mov	r1, r6
   1f80a:	7a00      	ldrb	r0, [r0, #8]
   1f80c:	f7ff f905 	bl	1ea1a <bt_addr_le_is_bonded>
   1f810:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f812:	4631      	mov	r1, r6
   1f814:	f7f7 feba 	bl	1758c <find_sc_cfg>
	if (!cfg) {
   1f818:	b128      	cbz	r0, 1f826 <sc_clear+0x26>
}
   1f81a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f81e:	220c      	movs	r2, #12
   1f820:	2100      	movs	r1, #0
   1f822:	f7fe bfb8 	b.w	1e796 <memset>
}
   1f826:	bd70      	pop	{r4, r5, r6, pc}

0001f828 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f828:	2a02      	cmp	r2, #2
{
   1f82a:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f82c:	d108      	bne.n	1f840 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f82e:	2300      	movs	r3, #0
   1f830:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f834:	461a      	mov	r2, r3
   1f836:	7a00      	ldrb	r0, [r0, #8]
   1f838:	f7f7 ff4c 	bl	176d4 <sc_save>
}
   1f83c:	2002      	movs	r0, #2
   1f83e:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f840:	f7ff ffde 	bl	1f800 <sc_clear>
   1f844:	e7fa      	b.n	1f83c <sc_ccc_cfg_write+0x14>

0001f846 <read_appearance>:
{
   1f846:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f848:	4615      	mov	r5, r2
   1f84a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f84e:	461f      	mov	r7, r3
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1f850:	f7ff f8e1 	bl	1ea16 <bt_get_appearance>
	if (offset > value_len) {
   1f854:	2e02      	cmp	r6, #2
	uint16_t appearance = sys_cpu_to_le16(bt_get_appearance());
   1f856:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f85a:	d80e      	bhi.n	1f87a <read_appearance+0x34>
	len = MIN(buf_len, value_len - offset);
   1f85c:	f1c6 0402 	rsb	r4, r6, #2
   1f860:	42bc      	cmp	r4, r7
   1f862:	bfa8      	it	ge
   1f864:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f866:	f10d 0306 	add.w	r3, sp, #6
   1f86a:	4622      	mov	r2, r4
   1f86c:	1999      	adds	r1, r3, r6
   1f86e:	4628      	mov	r0, r5
   1f870:	f7fe ff86 	bl	1e780 <memcpy>
}
   1f874:	4620      	mov	r0, r4
   1f876:	b003      	add	sp, #12
   1f878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f87a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f87e:	e7f9      	b.n	1f874 <read_appearance+0x2e>

0001f880 <read_name>:
{
   1f880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f884:	4698      	mov	r8, r3
   1f886:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f88a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f88c:	f7f5 f9f8 	bl	14c80 <bt_get_name>
   1f890:	4607      	mov	r7, r0
				 strlen(name));
   1f892:	f7fe ff49 	bl	1e728 <strlen>
	if (offset > value_len) {
   1f896:	b283      	uxth	r3, r0
   1f898:	42b3      	cmp	r3, r6
   1f89a:	d30c      	bcc.n	1f8b6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f89c:	1b9c      	subs	r4, r3, r6
   1f89e:	4544      	cmp	r4, r8
   1f8a0:	bfa8      	it	ge
   1f8a2:	4644      	movge	r4, r8
   1f8a4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f8a6:	4622      	mov	r2, r4
   1f8a8:	19b9      	adds	r1, r7, r6
   1f8aa:	4628      	mov	r0, r5
   1f8ac:	f7fe ff68 	bl	1e780 <memcpy>
}
   1f8b0:	4620      	mov	r0, r4
   1f8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8b6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f8ba:	e7f9      	b.n	1f8b0 <read_name+0x30>

0001f8bc <cf_read>:
{
   1f8bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f8be:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f8c0:	2300      	movs	r3, #0
{
   1f8c2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f8c6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f8ca:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f8cc:	f7f7 fe46 	bl	1755c <find_cf_cfg>
	if (cfg) {
   1f8d0:	b128      	cbz	r0, 1f8de <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f8d2:	f100 0108 	add.w	r1, r0, #8
   1f8d6:	2201      	movs	r2, #1
   1f8d8:	a801      	add	r0, sp, #4
   1f8da:	f7fe ff51 	bl	1e780 <memcpy>
	if (offset > value_len) {
   1f8de:	2e01      	cmp	r6, #1
   1f8e0:	d80d      	bhi.n	1f8fe <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f8e2:	f1c6 0401 	rsb	r4, r6, #1
   1f8e6:	42bc      	cmp	r4, r7
   1f8e8:	bfa8      	it	ge
   1f8ea:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f8ec:	ab01      	add	r3, sp, #4
   1f8ee:	4622      	mov	r2, r4
   1f8f0:	1999      	adds	r1, r3, r6
   1f8f2:	4628      	mov	r0, r5
   1f8f4:	f7fe ff44 	bl	1e780 <memcpy>
}
   1f8f8:	4620      	mov	r0, r4
   1f8fa:	b003      	add	sp, #12
   1f8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f8fe:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f902:	e7f9      	b.n	1f8f8 <cf_read+0x3c>

0001f904 <bt_gatt_attr_read_service>:
{
   1f904:	b513      	push	{r0, r1, r4, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f906:	68c9      	ldr	r1, [r1, #12]
{
   1f908:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f90a:	780a      	ldrb	r2, [r1, #0]
{
   1f90c:	461c      	mov	r4, r3
   1f90e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (uuid->type == BT_UUID_TYPE_16) {
   1f912:	b992      	cbnz	r2, 1f93a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f914:	884a      	ldrh	r2, [r1, #2]
   1f916:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f91a:	2b02      	cmp	r3, #2
   1f91c:	d818      	bhi.n	1f950 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1f91e:	f1c3 0202 	rsb	r2, r3, #2
   1f922:	4294      	cmp	r4, r2
   1f924:	bfa8      	it	ge
   1f926:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f928:	4622      	mov	r2, r4
   1f92a:	f10d 0106 	add.w	r1, sp, #6
   1f92e:	4419      	add	r1, r3
   1f930:	f7fe ff26 	bl	1e780 <memcpy>
}
   1f934:	4620      	mov	r0, r4
   1f936:	b002      	add	sp, #8
   1f938:	bd10      	pop	{r4, pc}
	if (offset > value_len) {
   1f93a:	2b10      	cmp	r3, #16
				 BT_UUID_128(uuid)->val, 16);
   1f93c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f940:	d806      	bhi.n	1f950 <bt_gatt_attr_read_service+0x4c>
	len = MIN(buf_len, value_len - offset);
   1f942:	f1c3 0210 	rsb	r2, r3, #16
   1f946:	4294      	cmp	r4, r2
   1f948:	bfa8      	it	ge
   1f94a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f94c:	4622      	mov	r2, r4
   1f94e:	e7ee      	b.n	1f92e <bt_gatt_attr_read_service+0x2a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f950:	f06f 0406 	mvn.w	r4, #6
   1f954:	e7ee      	b.n	1f934 <bt_gatt_attr_read_service+0x30>

0001f956 <bt_gatt_attr_read_ccc>:
{
   1f956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f958:	68c9      	ldr	r1, [r1, #12]
{
   1f95a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f95e:	4615      	mov	r5, r2
   1f960:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f962:	f7f7 fe23 	bl	175ac <find_ccc_cfg>
	if (cfg) {
   1f966:	b100      	cbz	r0, 1f96a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f968:	8900      	ldrh	r0, [r0, #8]
   1f96a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f96e:	2e02      	cmp	r6, #2
   1f970:	d80e      	bhi.n	1f990 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f972:	f1c6 0402 	rsb	r4, r6, #2
   1f976:	42bc      	cmp	r4, r7
   1f978:	bfa8      	it	ge
   1f97a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f97c:	f10d 0306 	add.w	r3, sp, #6
   1f980:	4622      	mov	r2, r4
   1f982:	1999      	adds	r1, r3, r6
   1f984:	4628      	mov	r0, r5
   1f986:	f7fe fefb 	bl	1e780 <memcpy>
}
   1f98a:	4620      	mov	r0, r4
   1f98c:	b003      	add	sp, #12
   1f98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f990:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f994:	e7f9      	b.n	1f98a <bt_gatt_attr_read_ccc+0x34>

0001f996 <bt_gatt_attr_value_handle>:
{
   1f996:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f998:	4604      	mov	r4, r0
   1f99a:	b910      	cbnz	r0, 1f9a2 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f99c:	2000      	movs	r0, #0
}
   1f99e:	b002      	add	sp, #8
   1f9a0:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f9a2:	2300      	movs	r3, #0
   1f9a4:	f88d 3004 	strb.w	r3, [sp, #4]
   1f9a8:	6800      	ldr	r0, [r0, #0]
   1f9aa:	f642 0303 	movw	r3, #10243	; 0x2803
   1f9ae:	a901      	add	r1, sp, #4
   1f9b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f9b4:	f7fe ff0d 	bl	1e7d2 <bt_uuid_cmp>
   1f9b8:	2800      	cmp	r0, #0
   1f9ba:	d1ef      	bne.n	1f99c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f9bc:	68e3      	ldr	r3, [r4, #12]
   1f9be:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f9c0:	2800      	cmp	r0, #0
   1f9c2:	d1ec      	bne.n	1f99e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f9c4:	4620      	mov	r0, r4
   1f9c6:	f7f7 ffe1 	bl	1798c <bt_gatt_attr_get_handle>
   1f9ca:	3001      	adds	r0, #1
   1f9cc:	b280      	uxth	r0, r0
	return handle;
   1f9ce:	e7e6      	b.n	1f99e <bt_gatt_attr_value_handle+0x8>

0001f9d0 <bt_gatt_attr_read_chrc>:
{
   1f9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f9d2:	68cc      	ldr	r4, [r1, #12]
{
   1f9d4:	b087      	sub	sp, #28
   1f9d6:	4608      	mov	r0, r1
   1f9d8:	461f      	mov	r7, r3
	pdu.properties = chrc->properties;
   1f9da:	79a3      	ldrb	r3, [r4, #6]
   1f9dc:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f9e0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f9e4:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f9e6:	f7ff ffd6 	bl	1f996 <bt_gatt_attr_value_handle>
   1f9ea:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f9ee:	6821      	ldr	r1, [r4, #0]
   1f9f0:	780b      	ldrb	r3, [r1, #0]
   1f9f2:	b99b      	cbnz	r3, 1fa1c <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f9f4:	884b      	ldrh	r3, [r1, #2]
   1f9f6:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f9fa:	2405      	movs	r4, #5
	if (offset > value_len) {
   1f9fc:	42b4      	cmp	r4, r6
   1f9fe:	d315      	bcc.n	1fa2c <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1fa00:	1ba4      	subs	r4, r4, r6
   1fa02:	42bc      	cmp	r4, r7
   1fa04:	bfa8      	it	ge
   1fa06:	463c      	movge	r4, r7
   1fa08:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1fa0a:	ab01      	add	r3, sp, #4
   1fa0c:	4622      	mov	r2, r4
   1fa0e:	1999      	adds	r1, r3, r6
   1fa10:	4628      	mov	r0, r5
   1fa12:	f7fe feb5 	bl	1e780 <memcpy>
}
   1fa16:	4620      	mov	r0, r4
   1fa18:	b007      	add	sp, #28
   1fa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1fa1c:	2210      	movs	r2, #16
   1fa1e:	3101      	adds	r1, #1
   1fa20:	f10d 0007 	add.w	r0, sp, #7
   1fa24:	f7fe feac 	bl	1e780 <memcpy>
		value_len += 16U;
   1fa28:	2413      	movs	r4, #19
   1fa2a:	e7e7      	b.n	1f9fc <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fa2c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1fa30:	e7f1      	b.n	1fa16 <bt_gatt_attr_read_chrc+0x46>

0001fa32 <bt_gatt_foreach_attr>:
{
   1fa32:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1fa34:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1fa38:	2300      	movs	r3, #0
   1fa3a:	9300      	str	r3, [sp, #0]
   1fa3c:	461a      	mov	r2, r3
   1fa3e:	f7f7 ffd5 	bl	179ec <bt_gatt_foreach_attr_type>
}
   1fa42:	b005      	add	sp, #20
   1fa44:	f85d fb04 	ldr.w	pc, [sp], #4

0001fa48 <db_hash_process>:
	db_hash_gen(true);
   1fa48:	f7f8 b82a 	b.w	17aa0 <db_hash_gen.constprop.0>

0001fa4c <bt_gatt_check_perm>:
{
   1fa4c:	b510      	push	{r4, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1fa4e:	07d4      	lsls	r4, r2, #31
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa50:	8a4b      	ldrh	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1fa52:	d504      	bpl.n	1fa5e <bt_gatt_check_perm+0x12>
   1fa54:	f013 0f95 	tst.w	r3, #149	; 0x95
   1fa58:	d01d      	beq.n	1fa96 <bt_gatt_check_perm+0x4a>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1fa5a:	684c      	ldr	r4, [r1, #4]
   1fa5c:	b1dc      	cbz	r4, 1fa96 <bt_gatt_check_perm+0x4a>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1fa5e:	0794      	lsls	r4, r2, #30
   1fa60:	d504      	bpl.n	1fa6c <bt_gatt_check_perm+0x20>
   1fa62:	f413 7f95 	tst.w	r3, #298	; 0x12a
   1fa66:	d018      	beq.n	1fa9a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1fa68:	6889      	ldr	r1, [r1, #8]
   1fa6a:	b1b1      	cbz	r1, 1fa9a <bt_gatt_check_perm+0x4e>
	mask &= attr->perm;
   1fa6c:	ea02 0403 	and.w	r4, r2, r3
	if (mask & BT_GATT_PERM_LESC_MASK) {
   1fa70:	f414 7fc0 	tst.w	r4, #384	; 0x180
   1fa74:	d001      	beq.n	1fa7a <bt_gatt_check_perm+0x2e>
			return BT_ATT_ERR_AUTHENTICATION;
   1fa76:	2005      	movs	r0, #5
}
   1fa78:	bd10      	pop	{r4, pc}
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1fa7a:	f014 0f30 	tst.w	r4, #48	; 0x30
   1fa7e:	d105      	bne.n	1fa8c <bt_gatt_check_perm+0x40>
	return 0;
   1fa80:	f014 0f0c 	tst.w	r4, #12
   1fa84:	bf14      	ite	ne
   1fa86:	200f      	movne	r0, #15
   1fa88:	2000      	moveq	r0, #0
   1fa8a:	e7f5      	b.n	1fa78 <bt_gatt_check_perm+0x2c>
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1fa8c:	f7ff f8b0 	bl	1ebf0 <bt_conn_get_security>
   1fa90:	2802      	cmp	r0, #2
   1fa92:	d8f5      	bhi.n	1fa80 <bt_gatt_check_perm+0x34>
   1fa94:	e7ef      	b.n	1fa76 <bt_gatt_check_perm+0x2a>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1fa96:	2002      	movs	r0, #2
   1fa98:	e7ee      	b.n	1fa78 <bt_gatt_check_perm+0x2c>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1fa9a:	2003      	movs	r0, #3
   1fa9c:	e7ec      	b.n	1fa78 <bt_gatt_check_perm+0x2c>

0001fa9e <bt_gatt_is_subscribed>:
{
   1fa9e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1faa2:	7a83      	ldrb	r3, [r0, #10]
   1faa4:	2b07      	cmp	r3, #7
{
   1faa6:	4605      	mov	r5, r0
   1faa8:	460c      	mov	r4, r1
   1faaa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1faac:	d110      	bne.n	1fad0 <bt_gatt_is_subscribed+0x32>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1faae:	2300      	movs	r3, #0
   1fab0:	f88d 300c 	strb.w	r3, [sp, #12]
   1fab4:	6820      	ldr	r0, [r4, #0]
   1fab6:	f642 0303 	movw	r3, #10243	; 0x2803
   1faba:	a903      	add	r1, sp, #12
   1fabc:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fac0:	f7fe fe87 	bl	1e7d2 <bt_uuid_cmp>
   1fac4:	b960      	cbnz	r0, 1fae0 <bt_gatt_is_subscribed+0x42>
		if (!(chrc->properties &
   1fac6:	68e3      	ldr	r3, [r4, #12]
   1fac8:	799b      	ldrb	r3, [r3, #6]
   1faca:	f013 0f30 	tst.w	r3, #48	; 0x30
   1face:	d103      	bne.n	1fad8 <bt_gatt_is_subscribed+0x3a>
		return false;
   1fad0:	2000      	movs	r0, #0
}
   1fad2:	b004      	add	sp, #16
   1fad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		attr = bt_gatt_attr_next(attr);
   1fad8:	4620      	mov	r0, r4
   1fada:	f7f8 f871 	bl	17bc0 <bt_gatt_attr_next>
   1fade:	4604      	mov	r4, r0
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1fae0:	2300      	movs	r3, #0
   1fae2:	6820      	ldr	r0, [r4, #0]
   1fae4:	f88d 300c 	strb.w	r3, [sp, #12]
   1fae8:	a903      	add	r1, sp, #12
   1faea:	f642 1302 	movw	r3, #10498	; 0x2902
   1faee:	f8ad 300e 	strh.w	r3, [sp, #14]
   1faf2:	f7fe fe6e 	bl	1e7d2 <bt_uuid_cmp>
   1faf6:	b118      	cbz	r0, 1fb00 <bt_gatt_is_subscribed+0x62>
		attr = bt_gatt_attr_next(attr);
   1faf8:	4620      	mov	r0, r4
   1fafa:	f7f8 f861 	bl	17bc0 <bt_gatt_attr_next>
   1fafe:	4604      	mov	r4, r0
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1fb00:	2600      	movs	r6, #0
   1fb02:	f642 1802 	movw	r8, #10498	; 0x2902
   1fb06:	6820      	ldr	r0, [r4, #0]
   1fb08:	f88d 6000 	strb.w	r6, [sp]
   1fb0c:	4669      	mov	r1, sp
   1fb0e:	f8ad 8002 	strh.w	r8, [sp, #2]
   1fb12:	f7fe fe5e 	bl	1e7d2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fb16:	b9d8      	cbnz	r0, 1fb50 <bt_gatt_is_subscribed+0xb2>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) != 0) {
   1fb18:	2300      	movs	r3, #0
   1fb1a:	6820      	ldr	r0, [r4, #0]
   1fb1c:	f88d 300c 	strb.w	r3, [sp, #12]
   1fb20:	a903      	add	r1, sp, #12
   1fb22:	f642 1302 	movw	r3, #10498	; 0x2902
   1fb26:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fb2a:	f7fe fe52 	bl	1e7d2 <bt_uuid_cmp>
   1fb2e:	2800      	cmp	r0, #0
   1fb30:	d1ce      	bne.n	1fad0 <bt_gatt_is_subscribed+0x32>
	ccc = attr->user_data;
   1fb32:	68e4      	ldr	r4, [r4, #12]
		if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer) &&
   1fb34:	4622      	mov	r2, r4
   1fb36:	4628      	mov	r0, r5
   1fb38:	f812 1b01 	ldrb.w	r1, [r2], #1
   1fb3c:	f7ff f85a 	bl	1ebf4 <bt_conn_is_peer_addr_le>
   1fb40:	2800      	cmp	r0, #0
   1fb42:	d0c5      	beq.n	1fad0 <bt_gatt_is_subscribed+0x32>
   1fb44:	8923      	ldrh	r3, [r4, #8]
   1fb46:	421f      	tst	r7, r3
   1fb48:	bf14      	ite	ne
   1fb4a:	2001      	movne	r0, #1
   1fb4c:	2000      	moveq	r0, #0
   1fb4e:	e7c0      	b.n	1fad2 <bt_gatt_is_subscribed+0x34>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1fb50:	6820      	ldr	r0, [r4, #0]
   1fb52:	f88d 6004 	strb.w	r6, [sp, #4]
   1fb56:	f642 0303 	movw	r3, #10243	; 0x2803
   1fb5a:	a901      	add	r1, sp, #4
   1fb5c:	f8ad 3006 	strh.w	r3, [sp, #6]
   1fb60:	f7fe fe37 	bl	1e7d2 <bt_uuid_cmp>
	while (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1fb64:	2800      	cmp	r0, #0
   1fb66:	d0d7      	beq.n	1fb18 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fb68:	6820      	ldr	r0, [r4, #0]
   1fb6a:	f88d 6008 	strb.w	r6, [sp, #8]
   1fb6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1fb72:	a902      	add	r1, sp, #8
   1fb74:	f8ad 300a 	strh.w	r3, [sp, #10]
   1fb78:	f7fe fe2b 	bl	1e7d2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) &&
   1fb7c:	2800      	cmp	r0, #0
   1fb7e:	d0cb      	beq.n	1fb18 <bt_gatt_is_subscribed+0x7a>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1fb80:	6820      	ldr	r0, [r4, #0]
   1fb82:	f88d 600c 	strb.w	r6, [sp, #12]
   1fb86:	f642 0301 	movw	r3, #10241	; 0x2801
   1fb8a:	a903      	add	r1, sp, #12
   1fb8c:	f8ad 300e 	strh.w	r3, [sp, #14]
   1fb90:	f7fe fe1f 	bl	1e7d2 <bt_uuid_cmp>
	       bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1fb94:	2800      	cmp	r0, #0
   1fb96:	d0bf      	beq.n	1fb18 <bt_gatt_is_subscribed+0x7a>
		attr = bt_gatt_attr_next(attr);
   1fb98:	4620      	mov	r0, r4
   1fb9a:	f7f8 f811 	bl	17bc0 <bt_gatt_attr_next>
		if (!attr) {
   1fb9e:	4604      	mov	r4, r0
   1fba0:	2800      	cmp	r0, #0
   1fba2:	d1b0      	bne.n	1fb06 <bt_gatt_is_subscribed+0x68>
   1fba4:	e794      	b.n	1fad0 <bt_gatt_is_subscribed+0x32>

0001fba6 <bt_gatt_change_aware>:
{
   1fba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fba8:	4606      	mov	r6, r0
   1fbaa:	460f      	mov	r7, r1
	cfg = find_cf_cfg(conn);
   1fbac:	f7f7 fcd6 	bl	1755c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1fbb0:	b318      	cbz	r0, 1fbfa <bt_gatt_change_aware+0x54>
   1fbb2:	7a03      	ldrb	r3, [r0, #8]
   1fbb4:	07db      	lsls	r3, r3, #31
   1fbb6:	d520      	bpl.n	1fbfa <bt_gatt_change_aware+0x54>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1fbb8:	f3bf 8f5b 	dmb	ish
   1fbbc:	68c5      	ldr	r5, [r0, #12]
   1fbbe:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1fbc2:	f015 0501 	ands.w	r5, r5, #1
   1fbc6:	f100 040c 	add.w	r4, r0, #12
   1fbca:	d116      	bne.n	1fbfa <bt_gatt_change_aware+0x54>
	if (!req) {
   1fbcc:	b1b7      	cbz	r7, 1fbfc <bt_gatt_change_aware+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fbce:	f3bf 8f5b 	dmb	ish
   1fbd2:	e854 1f00 	ldrex	r1, [r4]
   1fbd6:	f021 0302 	bic.w	r3, r1, #2
   1fbda:	e844 3200 	strex	r2, r3, [r4]
   1fbde:	2a00      	cmp	r2, #0
   1fbe0:	d1f7      	bne.n	1fbd2 <bt_gatt_change_aware+0x2c>
   1fbe2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1fbe6:	f011 0702 	ands.w	r7, r1, #2
		bt_att_clear_out_of_sync_sent(conn);
   1fbea:	4630      	mov	r0, r6
	if (atomic_test_and_clear_bit(cfg->flags, CF_DB_HASH_READ)) {
   1fbec:	d008      	beq.n	1fc00 <bt_gatt_change_aware+0x5a>
		bt_att_clear_out_of_sync_sent(conn);
   1fbee:	f7ff fd1c 	bl	1f62a <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1fbf2:	4629      	mov	r1, r5
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f7ff fdd5 	bl	1f7a4 <atomic_set_bit>
		return true;
   1fbfa:	2501      	movs	r5, #1
}
   1fbfc:	4628      	mov	r0, r5
   1fbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (bt_att_fixed_chan_only(conn) && bt_att_out_of_sync_sent_on_fixed(conn)) {
   1fc00:	f7ff fd11 	bl	1f626 <bt_att_fixed_chan_only>
   1fc04:	2800      	cmp	r0, #0
   1fc06:	d0f9      	beq.n	1fbfc <bt_gatt_change_aware+0x56>
   1fc08:	4630      	mov	r0, r6
   1fc0a:	f7ff fd27 	bl	1f65c <bt_att_out_of_sync_sent_on_fixed>
   1fc0e:	2800      	cmp	r0, #0
   1fc10:	d0f4      	beq.n	1fbfc <bt_gatt_change_aware+0x56>
   1fc12:	f3bf 8f5b 	dmb	ish
   1fc16:	e854 3f00 	ldrex	r3, [r4]
   1fc1a:	f023 0302 	bic.w	r3, r3, #2
   1fc1e:	e844 3200 	strex	r2, r3, [r4]
   1fc22:	2a00      	cmp	r2, #0
   1fc24:	d1f7      	bne.n	1fc16 <bt_gatt_change_aware+0x70>
   1fc26:	f3bf 8f5b 	dmb	ish
		bt_att_clear_out_of_sync_sent(conn);
   1fc2a:	4630      	mov	r0, r6
   1fc2c:	f7ff fcfd 	bl	1f62a <bt_att_clear_out_of_sync_sent>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1fc30:	4639      	mov	r1, r7
   1fc32:	e7df      	b.n	1fbf4 <bt_gatt_change_aware+0x4e>

0001fc34 <bt_smp_recv>:
{
   1fc34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fc36:	2100      	movs	r1, #0
   1fc38:	f04f 32ff 	mov.w	r2, #4294967295
   1fc3c:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   1fc40:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   1fc42:	4608      	mov	r0, r1
   1fc44:	f7ff f85e 	bl	1ed04 <bt_l2cap_create_pdu_timeout>
   1fc48:	f100 060c 	add.w	r6, r0, #12
   1fc4c:	4604      	mov	r4, r0
   1fc4e:	2101      	movs	r1, #1
   1fc50:	4630      	mov	r0, r6
   1fc52:	f000 f87b 	bl	1fd4c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   1fc56:	2505      	movs	r5, #5
   1fc58:	7005      	strb	r5, [r0, #0]
   1fc5a:	2101      	movs	r1, #1
   1fc5c:	4630      	mov	r0, r6
   1fc5e:	f000 f875 	bl	1fd4c <net_buf_simple_add>
   1fc62:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   1fc64:	7005      	strb	r5, [r0, #0]
   1fc66:	4622      	mov	r2, r4
   1fc68:	9300      	str	r3, [sp, #0]
   1fc6a:	2106      	movs	r1, #6
   1fc6c:	4638      	mov	r0, r7
   1fc6e:	f7ff f84c 	bl	1ed0a <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   1fc72:	b110      	cbz	r0, 1fc7a <bt_smp_recv+0x46>
		net_buf_unref(buf);
   1fc74:	4620      	mov	r0, r4
   1fc76:	f7f8 fb83 	bl	18380 <net_buf_unref>
}
   1fc7a:	2000      	movs	r0, #0
   1fc7c:	b003      	add	sp, #12
   1fc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001fc80 <bt_smp_sign>:
int bt_smp_sign(struct bt_conn *conn, struct net_buf *buf)
   1fc80:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1fc84:	4770      	bx	lr

0001fc86 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   1fc86:	2000      	movs	r0, #0
   1fc88:	4770      	bx	lr

0001fc8a <fixed_data_unref>:
}
   1fc8a:	4770      	bx	lr

0001fc8c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc8c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fc8e:	6849      	ldr	r1, [r1, #4]
   1fc90:	6809      	ldr	r1, [r1, #0]
   1fc92:	f7f8 bae3 	b.w	1825c <net_buf_alloc_len>

0001fc96 <net_buf_get>:
	return z_impl_k_queue_get(queue, timeout);
   1fc96:	f7fc bb79 	b.w	1c38c <z_impl_k_queue_get>

0001fc9a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fc9a:	6883      	ldr	r3, [r0, #8]
   1fc9c:	440b      	add	r3, r1
   1fc9e:	6003      	str	r3, [r0, #0]
}
   1fca0:	4770      	bx	lr

0001fca2 <net_buf_slist_put>:
	__asm__ volatile(
   1fca2:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fca6:	f3ef 8211 	mrs	r2, BASEPRI
   1fcaa:	f383 8812 	msr	BASEPRI_MAX, r3
   1fcae:	f3bf 8f6f 	isb	sy
	parent->next = child;
   1fcb2:	2300      	movs	r3, #0
   1fcb4:	600b      	str	r3, [r1, #0]
	return list->tail;
   1fcb6:	6843      	ldr	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1fcb8:	b933      	cbnz	r3, 1fcc8 <net_buf_slist_put+0x26>
	list->head = node;
   1fcba:	e9c0 1100 	strd	r1, r1, [r0]
	__asm__ volatile(
   1fcbe:	f382 8811 	msr	BASEPRI, r2
   1fcc2:	f3bf 8f6f 	isb	sy
}
   1fcc6:	4770      	bx	lr
	parent->next = child;
   1fcc8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1fcca:	6041      	str	r1, [r0, #4]
}
   1fccc:	e7f7      	b.n	1fcbe <net_buf_slist_put+0x1c>

0001fcce <net_buf_slist_get>:
{
   1fcce:	b510      	push	{r4, lr}
   1fcd0:	4603      	mov	r3, r0
	__asm__ volatile(
   1fcd2:	f04f 0240 	mov.w	r2, #64	; 0x40
   1fcd6:	f3ef 8111 	mrs	r1, BASEPRI
   1fcda:	f382 8812 	msr	BASEPRI_MAX, r2
   1fcde:	f3bf 8f6f 	isb	sy
	return list->head;
   1fce2:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1fce4:	b128      	cbz	r0, 1fcf2 <net_buf_slist_get+0x24>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fce6:	685c      	ldr	r4, [r3, #4]
	return node->next;
   1fce8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1fcea:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1fcec:	42a0      	cmp	r0, r4
	list->tail = node;
   1fcee:	bf08      	it	eq
   1fcf0:	605a      	streq	r2, [r3, #4]
	__asm__ volatile(
   1fcf2:	f381 8811 	msr	BASEPRI, r1
   1fcf6:	f3bf 8f6f 	isb	sy
}
   1fcfa:	bd10      	pop	{r4, pc}

0001fcfc <net_buf_put>:
	k_fifo_put(fifo, buf);
   1fcfc:	f000 befc 	b.w	20af8 <k_queue_append>

0001fd00 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fd00:	7a02      	ldrb	r2, [r0, #8]
   1fd02:	3201      	adds	r2, #1
   1fd04:	7202      	strb	r2, [r0, #8]
	return buf;
}
   1fd06:	4770      	bx	lr

0001fd08 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fd08:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1fd0a:	4618      	mov	r0, r3
   1fd0c:	685b      	ldr	r3, [r3, #4]
   1fd0e:	2b00      	cmp	r3, #0
   1fd10:	d1fb      	bne.n	1fd0a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fd12:	4770      	bx	lr

0001fd14 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fd14:	6842      	ldr	r2, [r0, #4]
{
   1fd16:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fd18:	b12a      	cbz	r2, 1fd26 <net_buf_frag_insert+0x12>
   1fd1a:	460b      	mov	r3, r1
	while (buf->frags) {
   1fd1c:	461c      	mov	r4, r3
   1fd1e:	685b      	ldr	r3, [r3, #4]
   1fd20:	2b00      	cmp	r3, #0
   1fd22:	d1fb      	bne.n	1fd1c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fd24:	6062      	str	r2, [r4, #4]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fd26:	6041      	str	r1, [r0, #4]
}
   1fd28:	bd10      	pop	{r4, pc}

0001fd2a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fd2a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1fd2c:	4604      	mov	r4, r0
   1fd2e:	b920      	cbnz	r0, 1fd3a <net_buf_frag_add+0x10>
	buf->ref++;
   1fd30:	7a0b      	ldrb	r3, [r1, #8]
   1fd32:	3301      	adds	r3, #1
   1fd34:	720b      	strb	r3, [r1, #8]
		return net_buf_ref(frag);
   1fd36:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fd38:	bd10      	pop	{r4, pc}
   1fd3a:	4603      	mov	r3, r0
	while (buf->frags) {
   1fd3c:	4618      	mov	r0, r3
   1fd3e:	685b      	ldr	r3, [r3, #4]
   1fd40:	2b00      	cmp	r3, #0
   1fd42:	d1fb      	bne.n	1fd3c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fd44:	f7ff ffe6 	bl	1fd14 <net_buf_frag_insert>
   1fd48:	4620      	mov	r0, r4
   1fd4a:	e7f5      	b.n	1fd38 <net_buf_frag_add+0xe>

0001fd4c <net_buf_simple_add>:
	return buf->data + buf->len;
   1fd4c:	8883      	ldrh	r3, [r0, #4]
   1fd4e:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fd50:	4419      	add	r1, r3
   1fd52:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fd54:	18d0      	adds	r0, r2, r3
   1fd56:	4770      	bx	lr

0001fd58 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fd58:	b430      	push	{r4, r5}
   1fd5a:	8884      	ldrh	r4, [r0, #4]
   1fd5c:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fd5e:	18a3      	adds	r3, r4, r2
   1fd60:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fd62:	1928      	adds	r0, r5, r4
}
   1fd64:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fd66:	f7fe bd0b 	b.w	1e780 <memcpy>

0001fd6a <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fd6a:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1fd6c:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1fd6e:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fd70:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fd72:	4411      	add	r1, r2
	buf->data -= len;
   1fd74:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fd76:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fd78:	4770      	bx	lr

0001fd7a <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fd7a:	8882      	ldrh	r2, [r0, #4]
   1fd7c:	1a52      	subs	r2, r2, r1
{
   1fd7e:	4603      	mov	r3, r0
	buf->len -= len;
   1fd80:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fd82:	6800      	ldr	r0, [r0, #0]
   1fd84:	4408      	add	r0, r1
   1fd86:	6018      	str	r0, [r3, #0]
}
   1fd88:	4770      	bx	lr

0001fd8a <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fd8a:	4603      	mov	r3, r0
	void *data = buf->data;
   1fd8c:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fd8e:	889a      	ldrh	r2, [r3, #4]
   1fd90:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fd92:	4401      	add	r1, r0
	buf->len -= len;
   1fd94:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fd96:	6019      	str	r1, [r3, #0]

	return data;
}
   1fd98:	4770      	bx	lr

0001fd9a <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1fd9a:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   1fd9c:	6803      	ldr	r3, [r0, #0]
   1fd9e:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1fda0:	2101      	movs	r1, #1
   1fda2:	f7ff ffea 	bl	1fd7a <net_buf_simple_pull>

	return val;
}
   1fda6:	4620      	mov	r0, r4
   1fda8:	bd10      	pop	{r4, pc}

0001fdaa <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fdaa:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fdac:	6803      	ldr	r3, [r0, #0]
   1fdae:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fdb0:	2102      	movs	r1, #2
   1fdb2:	f7ff ffe2 	bl	1fd7a <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fdb6:	4620      	mov	r0, r4
   1fdb8:	bd10      	pop	{r4, pc}

0001fdba <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fdba:	6802      	ldr	r2, [r0, #0]
   1fdbc:	6880      	ldr	r0, [r0, #8]
}
   1fdbe:	1a10      	subs	r0, r2, r0
   1fdc0:	4770      	bx	lr

0001fdc2 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fdc2:	8883      	ldrh	r3, [r0, #4]
   1fdc4:	88c2      	ldrh	r2, [r0, #6]
	return buf->data - buf->__buf;
   1fdc6:	6881      	ldr	r1, [r0, #8]
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fdc8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fdca:	6803      	ldr	r3, [r0, #0]
   1fdcc:	1a5b      	subs	r3, r3, r1
}
   1fdce:	1ad0      	subs	r0, r2, r3
   1fdd0:	4770      	bx	lr

0001fdd2 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1fdd2:	6903      	ldr	r3, [r0, #16]
   1fdd4:	b2c9      	uxtb	r1, r1
   1fdd6:	220c      	movs	r2, #12
   1fdd8:	fb01 3302 	mla	r3, r1, r2, r3
   1fddc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1fdde:	f000 0007 	and.w	r0, r0, #7
   1fde2:	4770      	bx	lr

0001fde4 <set_on_state>:
	__asm__ volatile(
   1fde4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fde8:	f3ef 8211 	mrs	r2, BASEPRI
   1fdec:	f383 8812 	msr	BASEPRI_MAX, r3
   1fdf0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1fdf4:	6803      	ldr	r3, [r0, #0]
   1fdf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1fdfa:	f043 0302 	orr.w	r3, r3, #2
   1fdfe:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1fe00:	f382 8811 	msr	BASEPRI, r2
   1fe04:	f3bf 8f6f 	isb	sy
}
   1fe08:	4770      	bx	lr

0001fe0a <stop>:
{
   1fe0a:	b570      	push	{r4, r5, r6, lr}
   1fe0c:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
   1fe0e:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
   1fe10:	f04f 0440 	mov.w	r4, #64	; 0x40
   1fe14:	f3ef 8511 	mrs	r5, BASEPRI
   1fe18:	f384 8812 	msr	BASEPRI_MAX, r4
   1fe1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fe20:	260c      	movs	r6, #12
   1fe22:	fb06 3401 	mla	r4, r6, r1, r3
   1fe26:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1fe28:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1fe2c:	d008      	beq.n	1fe40 <stop+0x36>
   1fe2e:	42a2      	cmp	r2, r4
   1fe30:	d006      	beq.n	1fe40 <stop+0x36>
	__asm__ volatile(
   1fe32:	f385 8811 	msr	BASEPRI, r5
   1fe36:	f3bf 8f6f 	isb	sy
		err = -EPERM;
   1fe3a:	f04f 30ff 	mov.w	r0, #4294967295
}
   1fe3e:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1fe40:	4371      	muls	r1, r6
   1fe42:	440b      	add	r3, r1
   1fe44:	2201      	movs	r2, #1
   1fe46:	641a      	str	r2, [r3, #64]	; 0x40
   1fe48:	f385 8811 	msr	BASEPRI, r5
   1fe4c:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
   1fe50:	6843      	ldr	r3, [r0, #4]
   1fe52:	440b      	add	r3, r1
   1fe54:	685b      	ldr	r3, [r3, #4]
   1fe56:	4798      	blx	r3
	return 0;
   1fe58:	2000      	movs	r0, #0
   1fe5a:	e7f0      	b.n	1fe3e <stop+0x34>

0001fe5c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1fe5c:	2280      	movs	r2, #128	; 0x80
   1fe5e:	f7ff bfd4 	b.w	1fe0a <stop>

0001fe62 <async_start>:
{
   1fe62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fe64:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1fe66:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
   1fe68:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1fe6a:	f04f 0540 	mov.w	r5, #64	; 0x40
   1fe6e:	f3ef 8611 	mrs	r6, BASEPRI
   1fe72:	f385 8812 	msr	BASEPRI_MAX, r5
   1fe76:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1fe7a:	250c      	movs	r5, #12
   1fe7c:	4369      	muls	r1, r5
   1fe7e:	440c      	add	r4, r1
   1fe80:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1fe82:	f005 0c07 	and.w	ip, r5, #7
   1fe86:	f1bc 0f01 	cmp.w	ip, #1
   1fe8a:	d10b      	bne.n	1fea4 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1fe8c:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
   1fe8e:	f386 8811 	msr	BASEPRI, r6
   1fe92:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
   1fe96:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1fe9a:	6843      	ldr	r3, [r0, #4]
   1fe9c:	585b      	ldr	r3, [r3, r1]
   1fe9e:	4798      	blx	r3
	return 0;
   1fea0:	2000      	movs	r0, #0
}
   1fea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1fea4:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1fea8:	42af      	cmp	r7, r5
   1feaa:	f386 8811 	msr	BASEPRI, r6
   1feae:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
   1feb2:	bf0c      	ite	eq
   1feb4:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
   1feb8:	f04f 30ff 	movne.w	r0, #4294967295
   1febc:	e7f1      	b.n	1fea2 <async_start+0x40>

0001febe <api_start>:
{
   1febe:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1fec0:	2480      	movs	r4, #128	; 0x80
   1fec2:	9400      	str	r4, [sp, #0]
   1fec4:	f7ff ffcd 	bl	1fe62 <async_start>
}
   1fec8:	b002      	add	sp, #8
   1feca:	bd10      	pop	{r4, pc}

0001fecc <onoff_started_callback>:
{
   1fecc:	b410      	push	{r4}
	return &data->mgr[type];
   1fece:	6900      	ldr	r0, [r0, #16]
   1fed0:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1fed2:	241c      	movs	r4, #28
   1fed4:	fb03 0004 	mla	r0, r3, r4, r0
   1fed8:	2100      	movs	r1, #0
}
   1feda:	bc10      	pop	{r4}
	notify(mgr, 0);
   1fedc:	4710      	bx	r2

0001fede <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1fede:	2000      	movs	r0, #0
   1fee0:	f7fb b85c 	b.w	1af9c <nrfx_clock_start>

0001fee4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1fee4:	2000      	movs	r0, #0
   1fee6:	f000 bb84 	b.w	205f2 <nrfx_clock_stop>

0001feea <blocking_start_callback>:
{
   1feea:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1feec:	f7fc ba82 	b.w	1c3f4 <z_impl_k_sem_give>

0001fef0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fef0:	6843      	ldr	r3, [r0, #4]
   1fef2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fef4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fef8:	600b      	str	r3, [r1, #0]
}
   1fefa:	2000      	movs	r0, #0
   1fefc:	4770      	bx	lr

0001fefe <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fefe:	6843      	ldr	r3, [r0, #4]
   1ff00:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
   1ff02:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
   1ff06:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
   1ff0a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1ff0e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1ff12:	2000      	movs	r0, #0
   1ff14:	4770      	bx	lr

0001ff16 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff16:	6843      	ldr	r3, [r0, #4]
   1ff18:	685b      	ldr	r3, [r3, #4]
}
   1ff1a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1ff1c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1ff20:	4770      	bx	lr

0001ff22 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff22:	6843      	ldr	r3, [r0, #4]
   1ff24:	685b      	ldr	r3, [r3, #4]
}
   1ff26:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1ff28:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1ff2c:	4770      	bx	lr

0001ff2e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1ff2e:	6843      	ldr	r3, [r0, #4]
   1ff30:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1ff32:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
   1ff36:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
   1ff3a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
   1ff3c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
   1ff40:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
   1ff44:	2000      	movs	r0, #0
   1ff46:	4770      	bx	lr

0001ff48 <gpio_nrfx_manage_callback>:
{
   1ff48:	b510      	push	{r4, lr}
	return port->data;
   1ff4a:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1ff4c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1ff4e:	b1f8      	cbz	r0, 1ff90 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ff50:	4288      	cmp	r0, r1
   1ff52:	d119      	bne.n	1ff88 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
   1ff54:	689c      	ldr	r4, [r3, #8]
	return node->next;
   1ff56:	6808      	ldr	r0, [r1, #0]
	list->head = node;
   1ff58:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1ff5a:	42a1      	cmp	r1, r4
   1ff5c:	d100      	bne.n	1ff60 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1ff5e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1ff60:	2000      	movs	r0, #0
   1ff62:	6008      	str	r0, [r1, #0]
	if (set) {
   1ff64:	b12a      	cbz	r2, 1ff72 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
   1ff66:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1ff68:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ff6a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ff6c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ff6e:	b902      	cbnz	r2, 1ff72 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
   1ff70:	6099      	str	r1, [r3, #8]
	return 0;
   1ff72:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1ff74:	e010      	b.n	1ff98 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ff76:	4281      	cmp	r1, r0
   1ff78:	d106      	bne.n	1ff88 <gpio_nrfx_manage_callback+0x40>
	return node->next;
   1ff7a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
   1ff7c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1ff7e:	6898      	ldr	r0, [r3, #8]
   1ff80:	4281      	cmp	r1, r0
   1ff82:	d1ed      	bne.n	1ff60 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
   1ff84:	609c      	str	r4, [r3, #8]
}
   1ff86:	e7eb      	b.n	1ff60 <gpio_nrfx_manage_callback+0x18>
	return node->next;
   1ff88:	4604      	mov	r4, r0
   1ff8a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	d1f2      	bne.n	1ff76 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
   1ff90:	2a00      	cmp	r2, #0
   1ff92:	d1e8      	bne.n	1ff66 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
   1ff94:	f06f 0015 	mvn.w	r0, #21
}
   1ff98:	bd10      	pop	{r4, pc}

0001ff9a <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
   1ff9a:	2200      	movs	r2, #0
   1ff9c:	2101      	movs	r1, #1
   1ff9e:	2003      	movs	r0, #3
   1ffa0:	f7f2 bbb6 	b.w	12710 <z_arm_irq_priority_set>

0001ffa4 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
   1ffa4:	b510      	push	{r4, lr}
	while (*count) {
   1ffa6:	680b      	ldr	r3, [r1, #0]
   1ffa8:	b913      	cbnz	r3, 1ffb0 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
   1ffaa:	6013      	str	r3, [r2, #0]
	return NULL;
   1ffac:	4618      	mov	r0, r3
   1ffae:	e005      	b.n	1ffbc <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
   1ffb0:	6803      	ldr	r3, [r0, #0]
   1ffb2:	685c      	ldr	r4, [r3, #4]
   1ffb4:	b11c      	cbz	r4, 1ffbe <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
   1ffb6:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
   1ffb8:	6803      	ldr	r3, [r0, #0]
   1ffba:	6818      	ldr	r0, [r3, #0]
}
   1ffbc:	bd10      	pop	{r4, pc}
		++(*current);
   1ffbe:	3308      	adds	r3, #8
   1ffc0:	6003      	str	r3, [r0, #0]
		--(*count);
   1ffc2:	680b      	ldr	r3, [r1, #0]
   1ffc4:	3b01      	subs	r3, #1
   1ffc6:	600b      	str	r3, [r1, #0]
   1ffc8:	e7ed      	b.n	1ffa6 <spi_context_get_next_buf.constprop.0+0x2>

0001ffca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   1ffca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   1ffcc:	ab0b      	add	r3, sp, #44	; 0x2c
   1ffce:	9305      	str	r3, [sp, #20]
   1ffd0:	9303      	str	r3, [sp, #12]
   1ffd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ffd4:	9302      	str	r3, [sp, #8]
   1ffd6:	2300      	movs	r3, #0
   1ffd8:	e9cd 3300 	strd	r3, r3, [sp]
   1ffdc:	2201      	movs	r2, #1
   1ffde:	4618      	mov	r0, r3
   1ffe0:	f7f1 fef8 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   1ffe4:	b007      	add	sp, #28
   1ffe6:	f85d fb04 	ldr.w	pc, [sp], #4

0001ffea <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
   1ffea:	4603      	mov	r3, r0
   1ffec:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   1ffee:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1fff0:	7919      	ldrb	r1, [r3, #4]
   1fff2:	2301      	movs	r3, #1
   1fff4:	fa03 f101 	lsl.w	r1, r3, r1
   1fff8:	6903      	ldr	r3, [r0, #16]
   1fffa:	681b      	ldr	r3, [r3, #0]
   1fffc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1fffe:	bf18      	it	ne
   20000:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   20004:	b112      	cbz	r2, 2000c <CONFIG_PM_SRAM_SIZE+0xc>
	return api->port_set_bits_raw(port, pins);
   20006:	6883      	ldr	r3, [r0, #8]
   20008:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2000a:	4718      	bx	r3
   2000c:	6883      	ldr	r3, [r0, #8]
   2000e:	691b      	ldr	r3, [r3, #16]
   20010:	e7fb      	b.n	2000a <CONFIG_PM_SRAM_SIZE+0xa>

00020012 <_spi_context_cs_control>:
{
   20012:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   20014:	6803      	ldr	r3, [r0, #0]
{
   20016:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
   20018:	b1e3      	cbz	r3, 20054 <_spi_context_cs_control+0x42>
   2001a:	6898      	ldr	r0, [r3, #8]
   2001c:	b1d0      	cbz	r0, 20054 <_spi_context_cs_control+0x42>
   2001e:	6805      	ldr	r5, [r0, #0]
   20020:	b1c5      	cbz	r5, 20054 <_spi_context_cs_control+0x42>
		if (on) {
   20022:	b149      	cbz	r1, 20038 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
   20024:	2101      	movs	r1, #1
   20026:	f7ff ffe0 	bl	1ffea <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   2002a:	6823      	ldr	r3, [r4, #0]
   2002c:	689b      	ldr	r3, [r3, #8]
   2002e:	6898      	ldr	r0, [r3, #8]
}
   20030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   20034:	f000 bfc2 	b.w	20fbc <z_impl_k_busy_wait>
			if (!force_off &&
   20038:	b912      	cbnz	r2, 20040 <_spi_context_cs_control+0x2e>
   2003a:	889b      	ldrh	r3, [r3, #4]
   2003c:	04db      	lsls	r3, r3, #19
   2003e:	d409      	bmi.n	20054 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
   20040:	6880      	ldr	r0, [r0, #8]
   20042:	f000 ffbb 	bl	20fbc <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   20046:	6823      	ldr	r3, [r4, #0]
   20048:	2100      	movs	r1, #0
   2004a:	6898      	ldr	r0, [r3, #8]
}
   2004c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
   20050:	f7ff bfcb 	b.w	1ffea <gpio_pin_set_dt.isra.0>
}
   20054:	bd38      	pop	{r3, r4, r5, pc}

00020056 <spi_context_unlock_unconditionally>:
{
   20056:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   20058:	2201      	movs	r2, #1
   2005a:	2100      	movs	r1, #0
{
   2005c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2005e:	f7ff ffd8 	bl	20012 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   20062:	69a3      	ldr	r3, [r4, #24]
   20064:	b933      	cbnz	r3, 20074 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   20066:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   20068:	f104 0010 	add.w	r0, r4, #16
}
   2006c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20070:	f7fc b9c0 	b.w	1c3f4 <z_impl_k_sem_give>
   20074:	bd10      	pop	{r4, pc}

00020076 <spi_nrfx_release>:
{
   20076:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
   20078:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2007a:	6803      	ldr	r3, [r0, #0]
   2007c:	428b      	cmp	r3, r1
   2007e:	d106      	bne.n	2008e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   20080:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
   20084:	b934      	cbnz	r4, 20094 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   20086:	f7ff ffe6 	bl	20056 <spi_context_unlock_unconditionally>
	return 0;
   2008a:	4620      	mov	r0, r4
}
   2008c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2008e:	f06f 0015 	mvn.w	r0, #21
   20092:	e7fb      	b.n	2008c <spi_nrfx_release+0x16>
		return -EBUSY;
   20094:	f06f 000f 	mvn.w	r0, #15
   20098:	e7f8      	b.n	2008c <spi_nrfx_release+0x16>

0002009a <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
   2009a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2009e:	460e      	mov	r6, r1
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   200a0:	884d      	ldrh	r5, [r1, #2]
   200a2:	f8b1 8004 	ldrh.w	r8, [r1, #4]
   200a6:	88cf      	ldrh	r7, [r1, #6]
{
   200a8:	4614      	mov	r4, r2
	return api->get_core_clock(dev, rate);
   200aa:	6883      	ldr	r3, [r0, #8]
   200ac:	a901      	add	r1, sp, #4
   200ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   200b0:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
   200b2:	b978      	cbnz	r0, 200d4 <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
   200b4:	eb05 0308 	add.w	r3, r5, r8
   200b8:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
   200ba:	9801      	ldr	r0, [sp, #4]
   200bc:	fb03 4404 	mla	r4, r3, r4, r4
   200c0:	fbb0 f4f4 	udiv	r4, r0, r4
   200c4:	8134      	strh	r4, [r6, #8]

	return core_clock % (ts * timing->prescaler);
   200c6:	b2a4      	uxth	r4, r4
   200c8:	fb03 4404 	mla	r4, r3, r4, r4
   200cc:	fbb0 f3f4 	udiv	r3, r0, r4
   200d0:	fb04 0013 	mls	r0, r4, r3, r0
}
   200d4:	b002      	add	sp, #8
   200d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000200da <mcp2515_get_core_clock>:
	*rate = dev_cfg->osc_freq / 2;
   200da:	6843      	ldr	r3, [r0, #4]
   200dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   200de:	085b      	lsrs	r3, r3, #1
   200e0:	600b      	str	r3, [r1, #0]
}
   200e2:	2000      	movs	r0, #0
   200e4:	4770      	bx	lr

000200e6 <mcp2515_get_max_filters>:
}
   200e6:	2005      	movs	r0, #5
   200e8:	4770      	bx	lr

000200ea <mcp2515_get_max_bitrate>:
	*max_bitrate = dev_cfg->max_bitrate;
   200ea:	6843      	ldr	r3, [r0, #4]
   200ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   200ee:	600b      	str	r3, [r1, #0]
}
   200f0:	2000      	movs	r0, #0
   200f2:	4770      	bx	lr

000200f4 <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
   200f4:	2303      	movs	r3, #3
   200f6:	600b      	str	r3, [r1, #0]
}
   200f8:	2000      	movs	r0, #0
   200fa:	4770      	bx	lr

000200fc <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
   200fc:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb_data = user_data;
   200fe:	e9c3 1249 	strd	r1, r2, [r3, #292]	; 0x124
}
   20102:	4770      	bx	lr

00020104 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   20104:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20106:	ab0b      	add	r3, sp, #44	; 0x2c
   20108:	9305      	str	r3, [sp, #20]
   2010a:	9303      	str	r3, [sp, #12]
   2010c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2010e:	9302      	str	r3, [sp, #8]
   20110:	2300      	movs	r3, #0
   20112:	e9cd 3300 	strd	r3, r3, [sp]
   20116:	4618      	mov	r0, r3
   20118:	f7f1 fe5c 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   2011c:	b007      	add	sp, #28
   2011e:	f85d fb04 	ldr.w	pc, [sp], #4

00020122 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   20122:	f7fc b87d 	b.w	1c220 <z_impl_k_mutex_lock>

00020126 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
   20126:	f7fc b8f5 	b.w	1c314 <z_impl_k_mutex_unlock>

0002012a <mcp2515_tx_done>:
{
   2012a:	b570      	push	{r4, r5, r6, lr}
	struct mcp2515_data *dev_data = dev->data;
   2012c:	6904      	ldr	r4, [r0, #16]
{
   2012e:	460d      	mov	r5, r1
   20130:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
   20134:	4611      	mov	r1, r2
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
   20136:	f8d6 30c4 	ldr.w	r3, [r6, #196]	; 0xc4
	if (callback != NULL) {
   2013a:	b1fb      	cbz	r3, 2017c <mcp2515_tx_done+0x52>
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
   2013c:	f8d6 20c8 	ldr.w	r2, [r6, #200]	; 0xc8
   20140:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
   20142:	2300      	movs	r3, #0
   20144:	f8c6 30c4 	str.w	r3, [r6, #196]	; 0xc4
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
   20148:	f504 7696 	add.w	r6, r4, #300	; 0x12c
   2014c:	4630      	mov	r0, r6
   2014e:	f04f 32ff 	mov.w	r2, #4294967295
   20152:	f04f 33ff 	mov.w	r3, #4294967295
   20156:	f7ff ffe4 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
   2015a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
   2015e:	2201      	movs	r2, #1
   20160:	40aa      	lsls	r2, r5
   20162:	ea23 0302 	bic.w	r3, r3, r2
   20166:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
		k_mutex_unlock(&dev_data->mutex);
   2016a:	4630      	mov	r0, r6
   2016c:	f7ff ffdb 	bl	20126 <k_mutex_unlock.isra.0>
	z_impl_k_sem_give(sem);
   20170:	f104 00ac 	add.w	r0, r4, #172	; 0xac
}
   20174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   20178:	f7fc b93c 	b.w	1c3f4 <z_impl_k_sem_give>
   2017c:	bd70      	pop	{r4, r5, r6, pc}

0002017e <mcp2515_rx>:
{
   2017e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   20182:	0089      	lsls	r1, r1, #2
{
   20184:	b093      	sub	sp, #76	; 0x4c
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   20186:	f061 016f 	orn	r1, r1, #111	; 0x6f
	struct spi_buf tx_buf[] = {
   2018a:	ab01      	add	r3, sp, #4
   2018c:	2400      	movs	r4, #0
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
   2018e:	f88d 1004 	strb.w	r1, [sp, #4]
	struct spi_buf tx_buf[] = {
   20192:	2101      	movs	r1, #1
   20194:	e9cd 140b 	strd	r1, r4, [sp, #44]	; 0x2c
	struct spi_buf rx_buf[] = {
   20198:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
	struct spi_buf tx_buf[] = {
   2019c:	930a      	str	r3, [sp, #40]	; 0x28
   2019e:	220d      	movs	r2, #13
	const struct spi_buf_set tx = {
   201a0:	2302      	movs	r3, #2
	struct spi_buf rx_buf[] = {
   201a2:	a906      	add	r1, sp, #24
	const struct spi_buf_set rx = {
   201a4:	ae0e      	add	r6, sp, #56	; 0x38
	struct spi_buf rx_buf[] = {
   201a6:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
	const struct spi_buf_set rx = {
   201aa:	e9cd 6304 	strd	r6, r3, [sp, #16]
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   201ae:	6841      	ldr	r1, [r0, #4]
	struct spi_buf tx_buf[] = {
   201b0:	920d      	str	r2, [sp, #52]	; 0x34
	const struct spi_buf_set tx = {
   201b2:	ad0a      	add	r5, sp, #40	; 0x28
   201b4:	9502      	str	r5, [sp, #8]
   201b6:	9303      	str	r3, [sp, #12]
{
   201b8:	4607      	mov	r7, r0
   201ba:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   201be:	6883      	ldr	r3, [r0, #8]
   201c0:	aa02      	add	r2, sp, #8
   201c2:	f8d3 8000 	ldr.w	r8, [r3]
   201c6:	ab04      	add	r3, sp, #16
   201c8:	47c0      	blx	r8
	memset(target, 0, sizeof(*target));
   201ca:	2210      	movs	r2, #16
   201cc:	4621      	mov	r1, r4
   201ce:	4628      	mov	r0, r5
   201d0:	f7fe fae1 	bl	1e796 <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
   201d4:	f89d 2019 	ldrb.w	r2, [sp, #25]
   201d8:	f89d 0018 	ldrb.w	r0, [sp, #24]
   201dc:	f012 0f08 	tst.w	r2, #8
   201e0:	ea4f 1152 	mov.w	r1, r2, lsr #5
   201e4:	d05f      	beq.n	202a6 <mcp2515_rx+0x128>
		target->flags |= CAN_FRAME_IDE;
   201e6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   201ea:	f043 0301 	orr.w	r3, r3, #1
   201ee:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   201f2:	f89d 301a 	ldrb.w	r3, [sp, #26]
   201f6:	021b      	lsls	r3, r3, #8
   201f8:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
			source[MCP2515_FRAME_OFFSET_EID0];
   201fc:	f89d 001b 	ldrb.w	r0, [sp, #27]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   20200:	0412      	lsls	r2, r2, #16
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   20202:	4303      	orrs	r3, r0
   20204:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
   20208:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
   2020c:	4313      	orrs	r3, r2
		target->id =
   2020e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20210:	f363 021c 	bfi	r2, r3, #0, #29
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   20214:	f89d 301c 	ldrb.w	r3, [sp, #28]
		target->id =
   20218:	920a      	str	r2, [sp, #40]	; 0x28
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
   2021a:	f003 020f 	and.w	r2, r3, #15
   2021e:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
   20222:	065a      	lsls	r2, r3, #25
		target->flags |= CAN_FRAME_RTR;
   20224:	bf42      	ittt	mi
   20226:	f89d 302d 	ldrbmi.w	r3, [sp, #45]	; 0x2d
   2022a:	f043 0302 	orrmi.w	r3, r3, #2
   2022e:	f88d 302d 	strbmi.w	r3, [sp, #45]	; 0x2d
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   20232:	aa07      	add	r2, sp, #28
   20234:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
{
   20238:	2408      	movs	r4, #8
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   2023a:	3c01      	subs	r4, #1
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
   2023c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   20240:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
   20244:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   20248:	d1f7      	bne.n	2023a <mcp2515_rx+0xbc>
	struct mcp2515_data *dev_data = dev->data;
   2024a:	f8d7 8010 	ldr.w	r8, [r7, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2024e:	f508 7a96 	add.w	sl, r8, #300	; 0x12c
   20252:	f04f 32ff 	mov.w	r2, #4294967295
   20256:	f04f 33ff 	mov.w	r3, #4294967295
   2025a:	4650      	mov	r0, sl
   2025c:	f7ff ff61 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   20260:	f108 09d4 	add.w	r9, r8, #212	; 0xd4
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
   20264:	f8d8 30d0 	ldr.w	r3, [r8, #208]	; 0xd0
   20268:	40e3      	lsrs	r3, r4
   2026a:	07db      	lsls	r3, r3, #31
   2026c:	d510      	bpl.n	20290 <mcp2515_rx+0x112>
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
   2026e:	f104 031f 	add.w	r3, r4, #31
   20272:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   20276:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
   2027a:	7ad2      	ldrb	r2, [r2, #11]
   2027c:	07c8      	lsls	r0, r1, #31
   2027e:	ea4f 1252 	mov.w	r2, r2, lsr #5
   20282:	d501      	bpl.n	20288 <mcp2515_rx+0x10a>
   20284:	07d0      	lsls	r0, r2, #31
   20286:	d503      	bpl.n	20290 <mcp2515_rx+0x112>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
   20288:	0789      	lsls	r1, r1, #30
   2028a:	d40f      	bmi.n	202ac <mcp2515_rx+0x12e>
   2028c:	2a03      	cmp	r2, #3
   2028e:	d80f      	bhi.n	202b0 <mcp2515_rx+0x132>
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
   20290:	3401      	adds	r4, #1
   20292:	2c05      	cmp	r4, #5
   20294:	f109 0904 	add.w	r9, r9, #4
   20298:	d1e4      	bne.n	20264 <mcp2515_rx+0xe6>
	k_mutex_unlock(&dev_data->mutex);
   2029a:	4650      	mov	r0, sl
   2029c:	f7ff ff43 	bl	20126 <k_mutex_unlock.isra.0>
}
   202a0:	b013      	add	sp, #76	; 0x4c
   202a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
   202a6:	ea41 03c0 	orr.w	r3, r1, r0, lsl #3
   202aa:	e7b0      	b.n	2020e <mcp2515_rx+0x90>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
   202ac:	0792      	lsls	r2, r2, #30
   202ae:	d5ef      	bpl.n	20290 <mcp2515_rx+0x112>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
   202b0:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   202b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   202b6:	685a      	ldr	r2, [r3, #4]
   202b8:	689b      	ldr	r3, [r3, #8]
   202ba:	404a      	eors	r2, r1
   202bc:	f3c3 031c 	ubfx	r3, r3, #0, #29
   202c0:	421a      	tst	r2, r3
   202c2:	d1e5      	bne.n	20290 <mcp2515_rx+0x112>
		tmp_frame = *frame;
   202c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
		callback = dev_data->rx_cb[filter_id];
   202c8:	f8d9 b000 	ldr.w	fp, [r9]
		tmp_frame = *frame;
   202cc:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
   202d0:	4631      	mov	r1, r6
   202d2:	f8d9 2014 	ldr.w	r2, [r9, #20]
   202d6:	4638      	mov	r0, r7
   202d8:	47d8      	blx	fp
   202da:	e7d9      	b.n	20290 <mcp2515_rx+0x112>

000202dc <mcp2515_add_rx_filter>:
{
   202dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct mcp2515_data *dev_data = dev->data;
   202e0:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   202e2:	f505 7896 	add.w	r8, r5, #300	; 0x12c
{
   202e6:	4616      	mov	r6, r2
   202e8:	4699      	mov	r9, r3
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   202ea:	f04f 32ff 	mov.w	r2, #4294967295
   202ee:	f04f 33ff 	mov.w	r3, #4294967295
   202f2:	4640      	mov	r0, r8
{
   202f4:	460f      	mov	r7, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   202f6:	f7ff ff14 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	while ((BIT(filter_id) & dev_data->filter_usage)
   202fa:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
	int filter_id = 0;
   202fe:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
   20300:	fa23 f204 	lsr.w	r2, r3, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
   20304:	07d2      	lsls	r2, r2, #31
   20306:	d506      	bpl.n	20316 <mcp2515_add_rx_filter+0x3a>
   20308:	2c05      	cmp	r4, #5
   2030a:	d102      	bne.n	20312 <mcp2515_add_rx_filter+0x36>
		filter_id = -ENOSPC;
   2030c:	f06f 041b 	mvn.w	r4, #27
   20310:	e015      	b.n	2033e <mcp2515_add_rx_filter+0x62>
		filter_id++;
   20312:	3401      	adds	r4, #1
   20314:	e7f4      	b.n	20300 <mcp2515_add_rx_filter+0x24>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
   20316:	2c05      	cmp	r4, #5
   20318:	d0f8      	beq.n	2030c <mcp2515_add_rx_filter+0x30>
		dev_data->filter_usage |= BIT(filter_id);
   2031a:	2001      	movs	r0, #1
   2031c:	40a0      	lsls	r0, r4
   2031e:	4318      	orrs	r0, r3
   20320:	f8c5 00d0 	str.w	r0, [r5, #208]	; 0xd0
		dev_data->filter[filter_id] = *filter;
   20324:	e899 0003 	ldmia.w	r9, {r0, r1}
   20328:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   2032c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
   20330:	33fc      	adds	r3, #252	; 0xfc
   20332:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
   20336:	f8c5 70d4 	str.w	r7, [r5, #212]	; 0xd4
		dev_data->cb_arg[filter_id] = cb_arg;
   2033a:	f8c5 60e8 	str.w	r6, [r5, #232]	; 0xe8
	k_mutex_unlock(&dev_data->mutex);
   2033e:	4640      	mov	r0, r8
   20340:	f7ff fef1 	bl	20126 <k_mutex_unlock.isra.0>
}
   20344:	4620      	mov	r0, r4
   20346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002034a <mcp2515_remove_rx_filter>:
{
   2034a:	b570      	push	{r4, r5, r6, lr}
	struct mcp2515_data *dev_data = dev->data;
   2034c:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2034e:	f504 7696 	add.w	r6, r4, #300	; 0x12c
   20352:	4630      	mov	r0, r6
   20354:	f04f 33ff 	mov.w	r3, #4294967295
   20358:	f04f 32ff 	mov.w	r2, #4294967295
{
   2035c:	460d      	mov	r5, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
   2035e:	f7ff fee0 	bl	20122 <k_mutex_lock.constprop.0.isra.0>
	dev_data->filter_usage &= ~BIT(filter_id);
   20362:	2301      	movs	r3, #1
   20364:	fa03 f105 	lsl.w	r1, r3, r5
   20368:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   2036c:	ea23 0301 	bic.w	r3, r3, r1
   20370:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
	k_mutex_unlock(&dev_data->mutex);
   20374:	4630      	mov	r0, r6
}
   20376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&dev_data->mutex);
   2037a:	f7ff bed4 	b.w	20126 <k_mutex_unlock.isra.0>

0002037e <mcp2515_int_gpio_callback>:
   2037e:	f101 0094 	add.w	r0, r1, #148	; 0x94
   20382:	f7fc b837 	b.w	1c3f4 <z_impl_k_sem_give>

00020386 <mcp2515_cmd_read_reg.isra.0>:
static int mcp2515_cmd_read_reg(const struct device *dev, uint8_t reg_addr,
   20386:	b530      	push	{r4, r5, lr}
   20388:	b08f      	sub	sp, #60	; 0x3c
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   2038a:	2403      	movs	r4, #3
   2038c:	f88d 1005 	strb.w	r1, [sp, #5]
	struct spi_buf tx_buf[] = {
   20390:	a901      	add	r1, sp, #4
	struct spi_buf rx_buf[] = {
   20392:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
   20396:	f88d 4004 	strb.w	r4, [sp, #4]
	struct spi_buf tx_buf[] = {
   2039a:	9106      	str	r1, [sp, #24]
   2039c:	2400      	movs	r4, #0
   2039e:	2102      	movs	r1, #2
   203a0:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
   203a2:	ad06      	add	r5, sp, #24
	const struct spi_buf_set rx = {
   203a4:	ab0a      	add	r3, sp, #40	; 0x28
	struct spi_buf tx_buf[] = {
   203a6:	e9cd 1407 	strd	r1, r4, [sp, #28]
	const struct spi_buf_set tx = {
   203aa:	e9cd 5102 	strd	r5, r1, [sp, #8]
	struct spi_buf rx_buf[] = {
   203ae:	e9cd 410a 	strd	r4, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
   203b2:	e9cd 3104 	strd	r3, r1, [sp, #16]
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
   203b6:	4601      	mov	r1, r0
   203b8:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   203bc:	6883      	ldr	r3, [r0, #8]
   203be:	aa02      	add	r2, sp, #8
   203c0:	681c      	ldr	r4, [r3, #0]
   203c2:	ab04      	add	r3, sp, #16
   203c4:	47a0      	blx	r4
}
   203c6:	b00f      	add	sp, #60	; 0x3c
   203c8:	bd30      	pop	{r4, r5, pc}

000203ca <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
   203ca:	b410      	push	{r4}
   203cc:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
   203ce:	4601      	mov	r1, r0
   203d0:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   203d4:	6883      	ldr	r3, [r0, #8]
   203d6:	681c      	ldr	r4, [r3, #0]
   203d8:	2300      	movs	r3, #0
   203da:	46a4      	mov	ip, r4
}
   203dc:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
   203de:	4760      	bx	ip

000203e0 <mcp2515_cmd_bit_modify.isra.0>:
static int mcp2515_cmd_bit_modify(const struct device *dev, uint8_t reg_addr,
   203e0:	b510      	push	{r4, lr}
   203e2:	b086      	sub	sp, #24
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   203e4:	2405      	movs	r4, #5
   203e6:	f88d 3007 	strb.w	r3, [sp, #7]
	const struct spi_buf tx_buf = {
   203ea:	ab01      	add	r3, sp, #4
   203ec:	9302      	str	r3, [sp, #8]
   203ee:	2304      	movs	r3, #4
   203f0:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
   203f2:	ab02      	add	r3, sp, #8
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   203f4:	f88d 1005 	strb.w	r1, [sp, #5]
	const struct spi_buf_set tx = {
   203f8:	9304      	str	r3, [sp, #16]
	return spi_write_dt(&dev_cfg->bus, &tx);
   203fa:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
   203fc:	2301      	movs	r3, #1
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
   203fe:	f88d 4004 	strb.w	r4, [sp, #4]
   20402:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf_set tx = {
   20406:	9305      	str	r3, [sp, #20]
	return spi_write_dt(&dev_cfg->bus, &tx);
   20408:	f7ff ffdf 	bl	203ca <spi_write_dt>
}
   2040c:	b006      	add	sp, #24
   2040e:	bd10      	pop	{r4, pc}

00020410 <entropy_bt_init>:

static int entropy_bt_init(const struct device *dev)
{
	/* Nothing to do */
	return 0;
}
   20410:	2000      	movs	r0, #0
   20412:	4770      	bx	lr

00020414 <entropy_bt_get_entropy>:

static int entropy_bt_get_entropy(const struct device *dev,
				  uint8_t *buffer, uint16_t length)
{
   20414:	b538      	push	{r3, r4, r5, lr}
   20416:	460c      	mov	r4, r1
   20418:	4615      	mov	r5, r2
	if (!bt_is_ready()) {
   2041a:	f7f4 fc27 	bl	14c6c <bt_is_ready>
   2041e:	b128      	cbz	r0, 2042c <entropy_bt_get_entropy+0x18>
		return -EAGAIN;
	}

	return bt_hci_le_rand(buffer, length);
   20420:	4629      	mov	r1, r5
   20422:	4620      	mov	r0, r4
}
   20424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_le_rand(buffer, length);
   20428:	f7f3 bd20 	b.w	13e6c <bt_hci_le_rand>
}
   2042c:	f06f 000a 	mvn.w	r0, #10
   20430:	bd38      	pop	{r3, r4, r5, pc}

00020432 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   20432:	4770      	bx	lr

00020434 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20434:	f100 0350 	add.w	r3, r0, #80	; 0x50
   20438:	009b      	lsls	r3, r3, #2
   2043a:	b29b      	uxth	r3, r3
   2043c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20440:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   20444:	2200      	movs	r2, #0
   20446:	601a      	str	r2, [r3, #0]
   20448:	681b      	ldr	r3, [r3, #0]
}
   2044a:	4770      	bx	lr

0002044c <sys_clock_cycle_get_32>:
{
   2044c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2044e:	f7f9 fc49 	bl	19ce4 <z_nrf_rtc_timer_read>
}
   20452:	bd08      	pop	{r3, pc}

00020454 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
   20454:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
   20456:	6843      	ldr	r3, [r0, #4]
   20458:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
   2045a:	7a05      	ldrb	r5, [r0, #8]
   2045c:	6844      	ldr	r4, [r0, #4]
   2045e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   20462:	42a3      	cmp	r3, r4
   20464:	d302      	bcc.n	2046c <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
   20466:	f06f 0001 	mvn.w	r0, #1
}
   2046a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
   2046c:	795c      	ldrb	r4, [r3, #5]
   2046e:	428c      	cmp	r4, r1
   20470:	d001      	beq.n	20476 <pinctrl_lookup_state+0x22>
		(*state)++;
   20472:	3308      	adds	r3, #8
   20474:	e7f0      	b.n	20458 <pinctrl_lookup_state+0x4>
			return 0;
   20476:	2000      	movs	r0, #0
   20478:	e7f7      	b.n	2046a <pinctrl_lookup_state+0x16>

0002047a <hci_driver_close>:
{
   2047a:	b510      	push	{r4, lr}
		hci_ecdh_uninit();
   2047c:	f7fa fcb6 	bl	1adec <hci_ecdh_uninit>
	err = MULTITHREADING_LOCK_ACQUIRE();
   20480:	f04f 30ff 	mov.w	r0, #4294967295
   20484:	f04f 31ff 	mov.w	r1, #4294967295
   20488:	f7f9 fe1a 	bl	1a0c0 <multithreading_lock_acquire>
	if (err) {
   2048c:	4604      	mov	r4, r0
   2048e:	b920      	cbnz	r0, 2049a <hci_driver_close+0x20>
	err = sdc_disable();
   20490:	f7e0 fa64 	bl	95c <sdc_disable>
	if (err) {
   20494:	4604      	mov	r4, r0
	MULTITHREADING_LOCK_RELEASE();
   20496:	f7f9 fe1b 	bl	1a0d0 <multithreading_lock_release>
}
   2049a:	4620      	mov	r0, r4
   2049c:	bd10      	pop	{r4, pc}

0002049e <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2049e:	b510      	push	{r4, lr}
   204a0:	b086      	sub	sp, #24
	va_start(ap, fmt);
   204a2:	a80b      	add	r0, sp, #44	; 0x2c
   204a4:	9005      	str	r0, [sp, #20]
   204a6:	9003      	str	r0, [sp, #12]
   204a8:	980a      	ldr	r0, [sp, #40]	; 0x28
   204aa:	9c08      	ldr	r4, [sp, #32]
   204ac:	9002      	str	r0, [sp, #8]
   204ae:	2000      	movs	r0, #0
   204b0:	9001      	str	r0, [sp, #4]
   204b2:	9400      	str	r4, [sp, #0]
   204b4:	f7f1 fc8e 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   204b8:	b006      	add	sp, #24
   204ba:	bd10      	pop	{r4, pc}

000204bc <rand_prio_high_vector_get>:
static uint8_t rand_prio_high_vector_get(uint8_t *p_buff, uint8_t length)
   204bc:	f7f9 bf22 	b.w	1a304 <rand_prio_low_vector_get>

000204c0 <hci_driver_send>:
{
   204c0:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   204c2:	8a03      	ldrh	r3, [r0, #16]
{
   204c4:	4605      	mov	r5, r0
	if (!buf->len) {
   204c6:	b373      	cbz	r3, 20526 <hci_driver_send+0x66>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   204c8:	7e03      	ldrb	r3, [r0, #24]
	switch (type) {
   204ca:	b1a3      	cbz	r3, 204f6 <hci_driver_send+0x36>
   204cc:	2b02      	cmp	r3, #2
   204ce:	d12a      	bne.n	20526 <hci_driver_send+0x66>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   204d0:	f04f 30ff 	mov.w	r0, #4294967295
   204d4:	f04f 31ff 	mov.w	r1, #4294967295
   204d8:	f7f9 fdf2 	bl	1a0c0 <multithreading_lock_acquire>
	if (!errcode) {
   204dc:	4604      	mov	r4, r0
   204de:	b940      	cbnz	r0, 204f2 <hci_driver_send+0x32>
		errcode = sdc_hci_data_put(acl->data);
   204e0:	68e8      	ldr	r0, [r5, #12]
   204e2:	f7ec fd60 	bl	cfa6 <sdc_hci_data_put>
   204e6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   204e8:	f7f9 fdf2 	bl	1a0d0 <multithreading_lock_release>
		if (errcode) {
   204ec:	b1b4      	cbz	r4, 2051c <hci_driver_send+0x5c>
			receive_signal_raise();
   204ee:	f7f9 ff1d 	bl	1a32c <receive_signal_raise>
}
   204f2:	4620      	mov	r0, r4
   204f4:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   204f6:	f04f 30ff 	mov.w	r0, #4294967295
   204fa:	f04f 31ff 	mov.w	r1, #4294967295
   204fe:	f7f9 fddf 	bl	1a0c0 <multithreading_lock_acquire>
	if (!errcode) {
   20502:	4604      	mov	r4, r0
   20504:	2800      	cmp	r0, #0
   20506:	d1f4      	bne.n	204f2 <hci_driver_send+0x32>
		errcode = hci_internal_cmd_put(cmd->data);
   20508:	68e8      	ldr	r0, [r5, #12]
   2050a:	f7f9 ff9b 	bl	1a444 <hci_internal_cmd_put>
   2050e:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   20510:	f7f9 fdde 	bl	1a0d0 <multithreading_lock_release>
	if (errcode) {
   20514:	2c00      	cmp	r4, #0
   20516:	d1ec      	bne.n	204f2 <hci_driver_send+0x32>
	receive_signal_raise();
   20518:	f7f9 ff08 	bl	1a32c <receive_signal_raise>
		net_buf_unref(buf);
   2051c:	4628      	mov	r0, r5
   2051e:	f7f7 ff2f 	bl	18380 <net_buf_unref>
   20522:	2400      	movs	r4, #0
   20524:	e7e5      	b.n	204f2 <hci_driver_send+0x32>
	switch (type) {
   20526:	f06f 0415 	mvn.w	r4, #21
   2052a:	e7e2      	b.n	204f2 <hci_driver_send+0x32>

0002052c <receive_work_handler>:
	hci_driver_receive_process();
   2052c:	f7f9 bf12 	b.w	1a354 <hci_driver_receive_process>

00020530 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   20530:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   20532:	ab0b      	add	r3, sp, #44	; 0x2c
   20534:	9305      	str	r3, [sp, #20]
   20536:	9303      	str	r3, [sp, #12]
   20538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2053a:	9302      	str	r3, [sp, #8]
   2053c:	2300      	movs	r3, #0
   2053e:	e9cd 3300 	strd	r3, r3, [sp]
   20542:	4618      	mov	r0, r3
   20544:	f7f1 fc46 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   20548:	b007      	add	sp, #28
   2054a:	f85d fb04 	ldr.w	pc, [sp], #4

0002054e <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2054e:	f101 0320 	add.w	r3, r1, #32
   20552:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   20554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   20558:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2055c:	428b      	cmp	r3, r1
   2055e:	d1f9      	bne.n	20554 <sys_memcpy_swap.constprop.0+0x6>
}
   20560:	4770      	bx	lr

00020562 <hci_cmd_le_generate_dhkey>:

uint8_t hci_cmd_le_generate_dhkey(struct bt_hci_cp_le_generate_dhkey *p_params)
{
	return cmd_le_generate_dhkey(p_params->key,
   20562:	2100      	movs	r1, #0
   20564:	f7fa bc64 	b.w	1ae30 <cmd_le_generate_dhkey>

00020568 <hci_cmd_le_generate_dhkey_v2>:
				     BT_HCI_LE_KEY_TYPE_GENERATED);
}

uint8_t hci_cmd_le_generate_dhkey_v2(struct bt_hci_cp_le_generate_dhkey_v2 *p_params)
{
	if (p_params->key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
   20568:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
   2056c:	2901      	cmp	r1, #1
   2056e:	d801      	bhi.n	20574 <hci_cmd_le_generate_dhkey_v2+0xc>
		return BT_HCI_ERR_INVALID_PARAM;
	}

	return cmd_le_generate_dhkey(p_params->key, p_params->key_type);
   20570:	f7fa bc5e 	b.w	1ae30 <cmd_le_generate_dhkey>
}
   20574:	2012      	movs	r0, #18
   20576:	4770      	bx	lr

00020578 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   20578:	4668      	mov	r0, sp
   2057a:	f020 0107 	bic.w	r1, r0, #7
   2057e:	468d      	mov	sp, r1
   20580:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   20582:	f7ea feeb 	bl	b35c <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   20586:	f7f2 f8dd 	bl	12744 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2058a:	f7f2 f9c5 	bl	12918 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2058e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   20592:	4685      	mov	sp, r0
   20594:	4770      	bx	lr

00020596 <mpsl_low_prio_work_handler>:
{
   20596:	b508      	push	{r3, lr}
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   20598:	f04f 31ff 	mov.w	r1, #4294967295
   2059c:	f04f 30ff 	mov.w	r0, #4294967295
   205a0:	f7f9 fd8e 	bl	1a0c0 <multithreading_lock_acquire>
	mpsl_low_priority_process();
   205a4:	f7ef ff8f 	bl	104c6 <mpsl_low_priority_process>
}
   205a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MULTITHREADING_LOCK_RELEASE();
   205ac:	f7f9 bd90 	b.w	1a0d0 <multithreading_lock_release>

000205b0 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   205b0:	4668      	mov	r0, sp
   205b2:	f020 0107 	bic.w	r1, r0, #7
   205b6:	468d      	mov	sp, r1
   205b8:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   205ba:	f7ea fe45 	bl	b248 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   205be:	f7f2 f8c1 	bl	12744 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   205c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   205c6:	4685      	mov	sp, r0
   205c8:	4770      	bx	lr

000205ca <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   205ca:	4668      	mov	r0, sp
   205cc:	f020 0107 	bic.w	r1, r0, #7
   205d0:	468d      	mov	sp, r1
   205d2:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   205d4:	f7e8 fb7a 	bl	8ccc <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   205d8:	f7f2 f8b4 	bl	12744 <_arch_isr_direct_pm>
   205dc:	f7f2 f99c 	bl	12918 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   205e0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   205e4:	4685      	mov	sp, r0
   205e6:	4770      	bx	lr

000205e8 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(const struct device *dev)
{
   205e8:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	mpsl_fem_init();
   205ea:	f7f0 f945 	bl	10878 <mpsl_fem_init>

	return 0;
}
   205ee:	2000      	movs	r0, #0
   205f0:	bd08      	pop	{r3, pc}

000205f2 <nrfx_clock_stop>:
	switch (domain) {
   205f2:	2801      	cmp	r0, #1
   205f4:	d101      	bne.n	205fa <nrfx_clock_stop+0x8>
		mpsl_clock_hfclk_release();
   205f6:	f7eb bd45 	b.w	c084 <mpsl_clock_hfclk_release>
}
   205fa:	4770      	bx	lr

000205fc <nrfx_clock_enable>:
}
   205fc:	4770      	bx	lr

000205fe <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   205fe:	f7eb bb4b 	b.w	bc98 <MPSL_IRQ_CLOCK_Handler>

00020602 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   20602:	4700      	bx	r0

00020604 <nrf_gpio_reconfigure>:
{
   20604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20606:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20608:	a801      	add	r0, sp, #4
{
   2060a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2060e:	4616      	mov	r6, r2
   20610:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20612:	f7fa fdd1 	bl	1b1b8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20616:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   20618:	f1b6 0c00 	subs.w	ip, r6, #0
   2061c:	bf18      	it	ne
   2061e:	f04f 0c01 	movne.w	ip, #1
   20622:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20626:	1e0b      	subs	r3, r1, #0
   20628:	bf18      	it	ne
   2062a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2062c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2062e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   20632:	bf14      	ite	ne
   20634:	f04f 0c0c 	movne.w	ip, #12
   20638:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2063c:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2063e:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   20642:	bf14      	ite	ne
   20644:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   20648:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2064c:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2064e:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   20652:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   20656:	bf14      	ite	ne
   20658:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   2065c:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   20660:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   20664:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   20668:	b101      	cbz	r1, 2066c <nrf_gpio_reconfigure+0x68>
   2066a:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2066c:	b10e      	cbz	r6, 20672 <nrf_gpio_reconfigure+0x6e>
   2066e:	7836      	ldrb	r6, [r6, #0]
   20670:	0076      	lsls	r6, r6, #1
   20672:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   20674:	b10d      	cbz	r5, 2067a <nrf_gpio_reconfigure+0x76>
   20676:	782d      	ldrb	r5, [r5, #0]
   20678:	00ad      	lsls	r5, r5, #2
   2067a:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2067c:	b10c      	cbz	r4, 20682 <nrf_gpio_reconfigure+0x7e>
   2067e:	7824      	ldrb	r4, [r4, #0]
   20680:	0224      	lsls	r4, r4, #8
   20682:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   20684:	b10f      	cbz	r7, 2068a <nrf_gpio_reconfigure+0x86>
   20686:	783f      	ldrb	r7, [r7, #0]
   20688:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2068a:	430c      	orrs	r4, r1
   2068c:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2068e:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   20692:	b003      	add	sp, #12
   20694:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020696 <nrf_gpio_cfg_sense_set>:
{
   20696:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   20698:	f10d 030f 	add.w	r3, sp, #15
   2069c:	9301      	str	r3, [sp, #4]
   2069e:	2300      	movs	r3, #0
{
   206a0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   206a4:	9300      	str	r3, [sp, #0]
   206a6:	461a      	mov	r2, r3
   206a8:	4619      	mov	r1, r3
   206aa:	f7ff ffab 	bl	20604 <nrf_gpio_reconfigure>
}
   206ae:	b005      	add	sp, #20
   206b0:	f85d fb04 	ldr.w	pc, [sp], #4

000206b4 <nrf_gpio_cfg_default>:
{
   206b4:	b507      	push	{r0, r1, r2, lr}
   206b6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   206b8:	a801      	add	r0, sp, #4
   206ba:	f7fb f8e5 	bl	1b888 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   206be:	9b01      	ldr	r3, [sp, #4]
   206c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   206c4:	2202      	movs	r2, #2
   206c6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   206ca:	b003      	add	sp, #12
   206cc:	f85d fb04 	ldr.w	pc, [sp], #4

000206d0 <nrf_gpio_pin_set>:
{
   206d0:	b507      	push	{r0, r1, r2, lr}
   206d2:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   206d4:	a801      	add	r0, sp, #4
   206d6:	f7fb f8d7 	bl	1b888 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   206da:	9a01      	ldr	r2, [sp, #4]
   206dc:	2301      	movs	r3, #1
   206de:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   206e0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   206e4:	b003      	add	sp, #12
   206e6:	f85d fb04 	ldr.w	pc, [sp], #4

000206ea <nrf_gpio_pin_clear>:
{
   206ea:	b507      	push	{r0, r1, r2, lr}
   206ec:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   206ee:	a801      	add	r0, sp, #4
   206f0:	f7fb f8ca 	bl	1b888 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   206f4:	9a01      	ldr	r2, [sp, #4]
   206f6:	2301      	movs	r3, #1
   206f8:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   206fa:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   206fe:	b003      	add	sp, #12
   20700:	f85d fb04 	ldr.w	pc, [sp], #4

00020704 <transfer_byte>:
{
   20704:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   20706:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2070a:	698a      	ldr	r2, [r1, #24]
   2070c:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   2070e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   20712:	6a0b      	ldr	r3, [r1, #32]
   20714:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   20716:	bf3e      	ittt	cc
   20718:	694a      	ldrcc	r2, [r1, #20]
   2071a:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   2071e:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   20720:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
   20722:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   20726:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
   20728:	1c5a      	adds	r2, r3, #1
   2072a:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   2072c:	3302      	adds	r3, #2
    if (p_cb->abort)
   2072e:	b135      	cbz	r5, 2073e <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   20730:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   20732:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   20734:	bf38      	it	cc
   20736:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   20738:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   2073a:	bf88      	it	hi
   2073c:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   2073e:	690d      	ldr	r5, [r1, #16]
   20740:	429d      	cmp	r5, r3
   20742:	d905      	bls.n	20750 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   20744:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
   20746:	5cd3      	ldrb	r3, [r2, r3]
   20748:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2074c:	2001      	movs	r0, #1
   2074e:	e00a      	b.n	20766 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   20750:	698c      	ldr	r4, [r1, #24]
   20752:	429c      	cmp	r4, r3
   20754:	d901      	bls.n	2075a <transfer_byte+0x56>
   20756:	7fcb      	ldrb	r3, [r1, #31]
   20758:	e7f6      	b.n	20748 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2075a:	42aa      	cmp	r2, r5
   2075c:	d3f6      	bcc.n	2074c <transfer_byte+0x48>
   2075e:	42a2      	cmp	r2, r4
   20760:	bf2c      	ite	cs
   20762:	2000      	movcs	r0, #0
   20764:	2001      	movcc	r0, #1
}
   20766:	b003      	add	sp, #12
   20768:	bd30      	pop	{r4, r5, pc}

0002076a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2076a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2076c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2076e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   20770:	bf9c      	itt	ls
   20772:	6881      	ldrls	r1, [r0, #8]
   20774:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
   20776:	3b01      	subs	r3, #1
   20778:	1a98      	subs	r0, r3, r2
}
   2077a:	4770      	bx	lr

0002077c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2077c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
   20780:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20784:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   20786:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2078a:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
   2078c:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2078e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   20790:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
   20792:	4414      	add	r4, r2
  if (Rem > NumBytes) {
   20794:	d904      	bls.n	207a0 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   20796:	f7fd fff3 	bl	1e780 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
   2079a:	60ec      	str	r4, [r5, #12]
}
   2079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   207a0:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   207a2:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
   207a6:	f7fd ffeb 	bl	1e780 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
   207aa:	6868      	ldr	r0, [r5, #4]
   207ac:	4622      	mov	r2, r4
   207ae:	19b9      	adds	r1, r7, r6
   207b0:	e7f1      	b.n	20796 <_WriteNoCheck+0x1a>

000207b2 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   207b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   207b6:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   207b8:	4606      	mov	r6, r0
   207ba:	4689      	mov	r9, r1
   207bc:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   207be:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   207c2:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   207c4:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   207c6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   207c8:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   207ca:	bf28      	it	cs
   207cc:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   207ce:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   207d0:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   207d2:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   207d6:	bf28      	it	cs
   207d8:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   207da:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   207dc:	429c      	cmp	r4, r3
   207de:	bf28      	it	cs
   207e0:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
   207e2:	4649      	mov	r1, r9
   207e4:	4428      	add	r0, r5
   207e6:	4622      	mov	r2, r4
   207e8:	f7fd ffca 	bl	1e780 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   207ec:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   207ee:	4425      	add	r5, r4
      WrOff = 0u;
   207f0:	42ab      	cmp	r3, r5
   207f2:	bf08      	it	eq
   207f4:	2500      	moveq	r5, #0
  } while (NumBytes);
   207f6:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   207f8:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   207fa:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   207fc:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   207fe:	d1e0      	bne.n	207c2 <_WriteBlocking+0x10>
}
   20800:	4640      	mov	r0, r8
   20802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020806 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   20806:	f7fb b9d1 	b.w	1bbac <_DoInit>

0002080a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2080a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2080c:	f7ff fffb 	bl	20806 <SEGGER_RTT_Init>

	return 0;
}
   20810:	2000      	movs	r0, #0
   20812:	bd08      	pop	{r3, pc}

00020814 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
   20814:	4770      	bx	lr

00020816 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   20816:	b140      	cbz	r0, 2082a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   20818:	68c3      	ldr	r3, [r0, #12]
   2081a:	7858      	ldrb	r0, [r3, #1]
   2081c:	f010 0001 	ands.w	r0, r0, #1
   20820:	bf1e      	ittt	ne
   20822:	7818      	ldrbne	r0, [r3, #0]
   20824:	fab0 f080 	clzne	r0, r0
   20828:	0940      	lsrne	r0, r0, #5
}
   2082a:	4770      	bx	lr

0002082c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
   2082c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2082e:	ab0b      	add	r3, sp, #44	; 0x2c
   20830:	9305      	str	r3, [sp, #20]
   20832:	9303      	str	r3, [sp, #12]
   20834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   20836:	9302      	str	r3, [sp, #8]
   20838:	2300      	movs	r3, #0
   2083a:	e9cd 3300 	strd	r3, r3, [sp]
   2083e:	2201      	movs	r2, #1
   20840:	4618      	mov	r0, r3
   20842:	f7f1 fac7 	bl	11dd4 <z_impl_z_log_msg_runtime_vcreate>
}
   20846:	b007      	add	sp, #28
   20848:	f85d fb04 	ldr.w	pc, [sp], #4

0002084c <z_early_memset>:
	(void) memset(dst, c, n);
   2084c:	f7fd bfa3 	b.w	1e796 <memset>

00020850 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
   20850:	f7fd bf96 	b.w	1e780 <memcpy>

00020854 <k_heap_init>:
{
   20854:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   20856:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2085a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2085e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   20860:	f7fd bae4 	b.w	1de2c <sys_heap_init>

00020864 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20868:	b085      	sub	sp, #20
   2086a:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
   2086e:	4607      	mov	r7, r0
   20870:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20872:	4650      	mov	r0, sl
   20874:	4621      	mov	r1, r4
{
   20876:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20878:	f000 fba4 	bl	20fc4 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2087c:	f1b4 3fff 	cmp.w	r4, #4294967295
   20880:	bf08      	it	eq
   20882:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20886:	4605      	mov	r5, r0
   20888:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
   2088a:	bf04      	itt	eq
   2088c:	f04f 35ff 	moveq.w	r5, #4294967295
   20890:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20894:	f107 0a14 	add.w	sl, r7, #20
	__asm__ volatile(
   20898:	f04f 0340 	mov.w	r3, #64	; 0x40
   2089c:	f3ef 8411 	mrs	r4, BASEPRI
   208a0:	f383 8812 	msr	BASEPRI_MAX, r3
   208a4:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   208a8:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   208ac:	464a      	mov	r2, r9
   208ae:	4641      	mov	r1, r8
   208b0:	4638      	mov	r0, r7
   208b2:	f7fd fa54 	bl	1dd5e <sys_heap_aligned_alloc>
   208b6:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   208b8:	f7fc fc6e 	bl	1d198 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   208bc:	9b03      	ldr	r3, [sp, #12]
   208be:	b13b      	cbz	r3, 208d0 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
   208c0:	f384 8811 	msr	BASEPRI, r4
   208c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   208c8:	4618      	mov	r0, r3
   208ca:	b005      	add	sp, #20
   208cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   208d0:	1a28      	subs	r0, r5, r0
   208d2:	eb66 0101 	sbc.w	r1, r6, r1
   208d6:	2801      	cmp	r0, #1
   208d8:	f171 0200 	sbcs.w	r2, r1, #0
   208dc:	dbf0      	blt.n	208c0 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   208de:	e9cd 0100 	strd	r0, r1, [sp]
   208e2:	465a      	mov	r2, fp
   208e4:	4621      	mov	r1, r4
   208e6:	4650      	mov	r0, sl
   208e8:	f7fc f8e6 	bl	1cab8 <z_pend_curr>
	__asm__ volatile(
   208ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   208f0:	f3ef 8411 	mrs	r4, BASEPRI
   208f4:	f383 8812 	msr	BASEPRI_MAX, r3
   208f8:	f3bf 8f6f 	isb	sy
	return k;
   208fc:	e7d6      	b.n	208ac <k_heap_aligned_alloc+0x48>

000208fe <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   208fe:	b538      	push	{r3, r4, r5, lr}
   20900:	4604      	mov	r4, r0
   20902:	f04f 0340 	mov.w	r3, #64	; 0x40
   20906:	f3ef 8511 	mrs	r5, BASEPRI
   2090a:	f383 8812 	msr	BASEPRI_MAX, r3
   2090e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20912:	f7fd f9ec 	bl	1dcee <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   20916:	f104 000c 	add.w	r0, r4, #12
   2091a:	f000 fad6 	bl	20eca <z_unpend_all>
   2091e:	b130      	cbz	r0, 2092e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20920:	4629      	mov	r1, r5
   20922:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2092a:	f7fc b929 	b.w	1cb80 <z_reschedule>
	__asm__ volatile(
   2092e:	f385 8811 	msr	BASEPRI, r5
   20932:	f3bf 8f6f 	isb	sy
}
   20936:	bd38      	pop	{r3, r4, r5, pc}

00020938 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20938:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
   2093c:	4313      	orrs	r3, r2
   2093e:	f013 0303 	ands.w	r3, r3, #3
   20942:	d10c      	bne.n	2095e <create_free_list+0x26>
	slab->free_list = NULL;
   20944:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20946:	6881      	ldr	r1, [r0, #8]
   20948:	4299      	cmp	r1, r3
   2094a:	d801      	bhi.n	20950 <create_free_list+0x18>
	return 0;
   2094c:	2000      	movs	r0, #0
   2094e:	4770      	bx	lr
		*(char **)p = slab->free_list;
   20950:	6941      	ldr	r1, [r0, #20]
   20952:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
   20954:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
   20956:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20958:	3301      	adds	r3, #1
		p += slab->block_size;
   2095a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   2095c:	e7f3      	b.n	20946 <create_free_list+0xe>
		return -EINVAL;
   2095e:	f06f 0015 	mvn.w	r0, #21
}
   20962:	4770      	bx	lr

00020964 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   20964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20966:	4604      	mov	r4, r0
   20968:	460d      	mov	r5, r1
	__asm__ volatile(
   2096a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2096e:	f3ef 8611 	mrs	r6, BASEPRI
   20972:	f383 8812 	msr	BASEPRI_MAX, r3
   20976:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2097a:	6947      	ldr	r7, [r0, #20]
   2097c:	b977      	cbnz	r7, 2099c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2097e:	f000 fa5e 	bl	20e3e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20982:	b158      	cbz	r0, 2099c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20984:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20986:	6142      	str	r2, [r0, #20]
   20988:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2098a:	f000 fa48 	bl	20e1e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2098e:	4631      	mov	r1, r6
   20990:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20994:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20998:	f7fc b8f2 	b.w	1cb80 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2099c:	682b      	ldr	r3, [r5, #0]
   2099e:	6962      	ldr	r2, [r4, #20]
   209a0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   209a2:	682b      	ldr	r3, [r5, #0]
   209a4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   209a6:	69a3      	ldr	r3, [r4, #24]
   209a8:	3b01      	subs	r3, #1
   209aa:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   209ac:	f386 8811 	msr	BASEPRI, r6
   209b0:	f3bf 8f6f 	isb	sy
}
   209b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000209b6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   209b6:	f3ef 8005 	mrs	r0, IPSR
}
   209ba:	3800      	subs	r0, #0
   209bc:	bf18      	it	ne
   209be:	2001      	movne	r0, #1
   209c0:	4770      	bx	lr

000209c2 <z_impl_k_thread_name_set>:
}
   209c2:	f06f 0057 	mvn.w	r0, #87	; 0x57
   209c6:	4770      	bx	lr

000209c8 <k_thread_name_get>:
}
   209c8:	2000      	movs	r0, #0
   209ca:	4770      	bx	lr

000209cc <z_impl_k_thread_start>:
	z_sched_start(thread);
   209cc:	f7fc b8ea 	b.w	1cba4 <z_sched_start>

000209d0 <z_pm_save_idle_exit>:
{
   209d0:	b508      	push	{r3, lr}
	pm_system_resume();
   209d2:	f7f1 fc95 	bl	12300 <pm_system_resume>
}
   209d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   209da:	f7ff bd2a 	b.w	20432 <sys_clock_idle_exit>

000209de <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   209de:	f990 300e 	ldrsb.w	r3, [r0, #14]
   209e2:	428b      	cmp	r3, r1
   209e4:	d001      	beq.n	209ea <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   209e6:	f7fc b885 	b.w	1caf4 <z_set_prio>
}
   209ea:	2000      	movs	r0, #0
   209ec:	4770      	bx	lr

000209ee <z_impl_k_mutex_init>:
{
   209ee:	4603      	mov	r3, r0
	mutex->owner = NULL;
   209f0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   209f2:	e9c3 0002 	strd	r0, r0, [r3, #8]
   209f6:	e9c3 3300 	strd	r3, r3, [r3]
}
   209fa:	4770      	bx	lr

000209fc <queue_insert>:
{
   209fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20a00:	4699      	mov	r9, r3
   20a02:	4604      	mov	r4, r0
   20a04:	f89d 3020 	ldrb.w	r3, [sp, #32]
   20a08:	460d      	mov	r5, r1
   20a0a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20a0c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20a10:	f04f 0240 	mov.w	r2, #64	; 0x40
   20a14:	f3ef 8711 	mrs	r7, BASEPRI
   20a18:	f382 8812 	msr	BASEPRI_MAX, r2
   20a1c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   20a20:	b103      	cbz	r3, 20a24 <queue_insert+0x28>
	return list->tail;
   20a22:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20a24:	4630      	mov	r0, r6
   20a26:	f000 fa0a 	bl	20e3e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20a2a:	b158      	cbz	r0, 20a44 <queue_insert+0x48>
   20a2c:	2300      	movs	r3, #0
   20a2e:	67c3      	str	r3, [r0, #124]	; 0x7c
   20a30:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20a34:	f000 f9f3 	bl	20e1e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20a38:	4630      	mov	r0, r6
   20a3a:	4639      	mov	r1, r7
   20a3c:	f7fc f8a0 	bl	1cb80 <z_reschedule>
		return 0;
   20a40:	2000      	movs	r0, #0
   20a42:	e00c      	b.n	20a5e <queue_insert+0x62>
	if (alloc) {
   20a44:	f1b9 0f00 	cmp.w	r9, #0
   20a48:	d01b      	beq.n	20a82 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   20a4a:	2108      	movs	r1, #8
   20a4c:	f7fc fc42 	bl	1d2d4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   20a50:	b938      	cbnz	r0, 20a62 <queue_insert+0x66>
	__asm__ volatile(
   20a52:	f387 8811 	msr	BASEPRI, r7
   20a56:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20a5a:	f06f 000b 	mvn.w	r0, #11
}
   20a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   20a62:	2201      	movs	r2, #1
		anode->data = data;
   20a64:	f8c0 8004 	str.w	r8, [r0, #4]
   20a68:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20a6a:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a6c:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
   20a70:	b95d      	cbnz	r5, 20a8a <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a72:	6822      	ldr	r2, [r4, #0]
   20a74:	430a      	orrs	r2, r1
   20a76:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20a78:	6862      	ldr	r2, [r4, #4]
	list->head = node;
   20a7a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20a7c:	b96a      	cbnz	r2, 20a9a <queue_insert+0x9e>
	list->tail = node;
   20a7e:	6060      	str	r0, [r4, #4]
}
   20a80:	e00b      	b.n	20a9a <queue_insert+0x9e>
	node->next_and_flags = flags;
   20a82:	f8c8 9000 	str.w	r9, [r8]
}
   20a86:	4640      	mov	r0, r8
   20a88:	e7ef      	b.n	20a6a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20a8a:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20a8c:	2a03      	cmp	r2, #3
   20a8e:	d810      	bhi.n	20ab2 <queue_insert+0xb6>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20a90:	6001      	str	r1, [r0, #0]
	return list->tail;
   20a92:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20a94:	b939      	cbnz	r1, 20aa6 <queue_insert+0xaa>
	list->head = node;
   20a96:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20a9a:	2104      	movs	r1, #4
   20a9c:	f104 0010 	add.w	r0, r4, #16
   20aa0:	f000 fbf2 	bl	21288 <z_handle_obj_poll_events>
   20aa4:	e7c8      	b.n	20a38 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20aa6:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20aa8:	f002 0203 	and.w	r2, r2, #3
   20aac:	4302      	orrs	r2, r0
   20aae:	600a      	str	r2, [r1, #0]
   20ab0:	e7e5      	b.n	20a7e <queue_insert+0x82>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20ab2:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   20ab6:	430a      	orrs	r2, r1
   20ab8:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20aba:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20abc:	f002 0203 	and.w	r2, r2, #3
   20ac0:	ea40 0302 	orr.w	r3, r0, r2
   20ac4:	602b      	str	r3, [r5, #0]
}
   20ac6:	e7e8      	b.n	20a9a <queue_insert+0x9e>

00020ac8 <z_queue_node_peek>:
{
   20ac8:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20aca:	4604      	mov	r4, r0
   20acc:	b130      	cbz	r0, 20adc <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20ace:	6802      	ldr	r2, [r0, #0]
   20ad0:	0793      	lsls	r3, r2, #30
   20ad2:	d003      	beq.n	20adc <z_queue_node_peek+0x14>
		ret = anode->data;
   20ad4:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20ad6:	b109      	cbz	r1, 20adc <z_queue_node_peek+0x14>
			k_free(anode);
   20ad8:	f000 fbec 	bl	212b4 <k_free>
}
   20adc:	4620      	mov	r0, r4
   20ade:	bd10      	pop	{r4, pc}

00020ae0 <z_impl_k_queue_init>:
	list->head = NULL;
   20ae0:	2300      	movs	r3, #0
	list->tail = NULL;
   20ae2:	e9c0 3300 	strd	r3, r3, [r0]
   20ae6:	f100 0308 	add.w	r3, r0, #8
   20aea:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   20aee:	f100 0310 	add.w	r3, r0, #16
   20af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   20af6:	4770      	bx	lr

00020af8 <k_queue_append>:
{
   20af8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   20afa:	2301      	movs	r3, #1
   20afc:	9300      	str	r3, [sp, #0]
   20afe:	2300      	movs	r3, #0
{
   20b00:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   20b02:	4619      	mov	r1, r3
   20b04:	f7ff ff7a 	bl	209fc <queue_insert>
}
   20b08:	b003      	add	sp, #12
   20b0a:	f85d fb04 	ldr.w	pc, [sp], #4

00020b0e <k_queue_prepend>:
{
   20b0e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   20b10:	2300      	movs	r3, #0
{
   20b12:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   20b14:	9300      	str	r3, [sp, #0]
   20b16:	4619      	mov	r1, r3
   20b18:	f7ff ff70 	bl	209fc <queue_insert>
}
   20b1c:	b003      	add	sp, #12
   20b1e:	f85d fb04 	ldr.w	pc, [sp], #4

00020b22 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20b22:	b15a      	cbz	r2, 20b3c <z_impl_k_sem_init+0x1a>
   20b24:	428a      	cmp	r2, r1
   20b26:	d309      	bcc.n	20b3c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   20b28:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   20b2c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   20b30:	e9c0 0000 	strd	r0, r0, [r0]
   20b34:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   20b38:	2000      	movs	r0, #0
   20b3a:	4770      	bx	lr
		return -EINVAL;
   20b3c:	f06f 0015 	mvn.w	r0, #21
}
   20b40:	4770      	bx	lr

00020b42 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   20b42:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   20b44:	2301      	movs	r3, #1
   20b46:	408b      	lsls	r3, r1
   20b48:	ea22 0303 	bic.w	r3, r2, r3
   20b4c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   20b4e:	fa22 f001 	lsr.w	r0, r2, r1
}
   20b52:	f000 0001 	and.w	r0, r0, #1
   20b56:	4770      	bx	lr

00020b58 <unschedule_locked>:
{
   20b58:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20b5a:	2103      	movs	r1, #3
{
   20b5c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20b5e:	300c      	adds	r0, #12
   20b60:	f7ff ffef 	bl	20b42 <flag_test_and_clear>
   20b64:	4604      	mov	r4, r0
   20b66:	b118      	cbz	r0, 20b70 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   20b68:	f105 0010 	add.w	r0, r5, #16
   20b6c:	f000 f9e0 	bl	20f30 <z_abort_timeout>
}
   20b70:	4620      	mov	r0, r4
   20b72:	bd38      	pop	{r3, r4, r5, pc}

00020b74 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   20b74:	b120      	cbz	r0, 20b80 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   20b76:	2200      	movs	r2, #0
   20b78:	4611      	mov	r1, r2
   20b7a:	3088      	adds	r0, #136	; 0x88
   20b7c:	f000 b9b5 	b.w	20eea <z_sched_wake>
}
   20b80:	4770      	bx	lr

00020b82 <cancel_async_locked>:
{
   20b82:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   20b84:	68c3      	ldr	r3, [r0, #12]
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20b86:	f3c3 0640 	ubfx	r6, r3, #1, #1
   20b8a:	079b      	lsls	r3, r3, #30
{
   20b8c:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20b8e:	d416      	bmi.n	20bbe <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   20b90:	6885      	ldr	r5, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   20b92:	2102      	movs	r1, #2
   20b94:	300c      	adds	r0, #12
   20b96:	f7ff ffd4 	bl	20b42 <flag_test_and_clear>
   20b9a:	b180      	cbz	r0, 20bbe <cancel_async_locked+0x3c>
	return list->head;
   20b9c:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20ba0:	b16a      	cbz	r2, 20bbe <cancel_async_locked+0x3c>
   20ba2:	4294      	cmp	r4, r2
   20ba4:	d11d      	bne.n	20be2 <cancel_async_locked+0x60>
	return node->next;
   20ba6:	6822      	ldr	r2, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20ba8:	b99e      	cbnz	r6, 20bd2 <cancel_async_locked+0x50>
   20baa:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
	list->head = node;
   20bae:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   20bb2:	429c      	cmp	r4, r3
   20bb4:	d101      	bne.n	20bba <cancel_async_locked+0x38>
	list->tail = node;
   20bb6:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	parent->next = child;
   20bba:	2300      	movs	r3, #0
   20bbc:	6023      	str	r3, [r4, #0]
	return *flagp;
   20bbe:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   20bc0:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   20bc4:	bf1e      	ittt	ne
   20bc6:	f043 0302 	orrne.w	r3, r3, #2
   20bca:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   20bcc:	f040 0002 	orrne.w	r0, r0, #2
}
   20bd0:	bd70      	pop	{r4, r5, r6, pc}
   20bd2:	6032      	str	r2, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   20bd4:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
   20bd8:	4294      	cmp	r4, r2
	list->tail = node;
   20bda:	bf08      	it	eq
   20bdc:	f8c5 6084 	streq.w	r6, [r5, #132]	; 0x84
}
   20be0:	e7eb      	b.n	20bba <cancel_async_locked+0x38>
	return node->next;
   20be2:	4616      	mov	r6, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20be4:	6812      	ldr	r2, [r2, #0]
   20be6:	e7db      	b.n	20ba0 <cancel_async_locked+0x1e>

00020be8 <work_timeout>:
{
   20be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20bea:	4604      	mov	r4, r0
	__asm__ volatile(
   20bec:	f04f 0340 	mov.w	r3, #64	; 0x40
   20bf0:	f3ef 8511 	mrs	r5, BASEPRI
   20bf4:	f383 8812 	msr	BASEPRI_MAX, r3
   20bf8:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   20bfc:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20bfe:	f1a0 0610 	sub.w	r6, r0, #16
   20c02:	2103      	movs	r1, #3
   20c04:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   20c06:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   20c08:	f7ff ff9b 	bl	20b42 <flag_test_and_clear>
   20c0c:	b128      	cbz	r0, 20c1a <work_timeout+0x32>
		queue = dw->queue;
   20c0e:	69a3      	ldr	r3, [r4, #24]
   20c10:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20c12:	a901      	add	r1, sp, #4
   20c14:	4630      	mov	r0, r6
   20c16:	f7fb fd0f 	bl	1c638 <submit_to_queue_locked>
	__asm__ volatile(
   20c1a:	f385 8811 	msr	BASEPRI, r5
   20c1e:	f3bf 8f6f 	isb	sy
}
   20c22:	b002      	add	sp, #8
   20c24:	bd70      	pop	{r4, r5, r6, pc}

00020c26 <k_work_init>:
{
   20c26:	b538      	push	{r3, r4, r5, lr}
   20c28:	4604      	mov	r4, r0
   20c2a:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   20c2c:	2210      	movs	r2, #16
   20c2e:	2100      	movs	r1, #0
   20c30:	f7fd fdb1 	bl	1e796 <memset>
   20c34:	6065      	str	r5, [r4, #4]
}
   20c36:	bd38      	pop	{r3, r4, r5, pc}

00020c38 <k_work_busy_get>:
	__asm__ volatile(
   20c38:	f04f 0240 	mov.w	r2, #64	; 0x40
   20c3c:	f3ef 8311 	mrs	r3, BASEPRI
   20c40:	f382 8812 	msr	BASEPRI_MAX, r2
   20c44:	f3bf 8f6f 	isb	sy
	return flags_get(&work->flags) & K_WORK_MASK;
   20c48:	68c0      	ldr	r0, [r0, #12]
   20c4a:	f000 000f 	and.w	r0, r0, #15
	__asm__ volatile(
   20c4e:	f383 8811 	msr	BASEPRI, r3
   20c52:	f3bf 8f6f 	isb	sy
}
   20c56:	4770      	bx	lr

00020c58 <z_work_submit_to_queue>:
{
   20c58:	b513      	push	{r0, r1, r4, lr}
   20c5a:	9001      	str	r0, [sp, #4]
   20c5c:	4608      	mov	r0, r1
	__asm__ volatile(
   20c5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c62:	f3ef 8411 	mrs	r4, BASEPRI
   20c66:	f383 8812 	msr	BASEPRI_MAX, r3
   20c6a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20c6e:	a901      	add	r1, sp, #4
   20c70:	f7fb fce2 	bl	1c638 <submit_to_queue_locked>
	__asm__ volatile(
   20c74:	f384 8811 	msr	BASEPRI, r4
   20c78:	f3bf 8f6f 	isb	sy
}
   20c7c:	b002      	add	sp, #8
   20c7e:	bd10      	pop	{r4, pc}

00020c80 <k_work_submit_to_queue>:
{
   20c80:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
   20c82:	f7ff ffe9 	bl	20c58 <z_work_submit_to_queue>
	if (ret > 0) {
   20c86:	1e04      	subs	r4, r0, #0
   20c88:	dd09      	ble.n	20c9e <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
   20c8a:	f04f 0340 	mov.w	r3, #64	; 0x40
   20c8e:	f3ef 8011 	mrs	r0, BASEPRI
   20c92:	f383 8812 	msr	BASEPRI_MAX, r3
   20c96:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20c9a:	f000 f900 	bl	20e9e <z_reschedule_irqlock>
}
   20c9e:	4620      	mov	r0, r4
   20ca0:	bd10      	pop	{r4, pc}

00020ca2 <k_work_queue_init>:
{
   20ca2:	b508      	push	{r3, lr}
	*queue = (struct k_work_q) {
   20ca4:	22a0      	movs	r2, #160	; 0xa0
   20ca6:	2100      	movs	r1, #0
   20ca8:	f7fd fd75 	bl	1e796 <memset>
}
   20cac:	bd08      	pop	{r3, pc}

00020cae <k_work_init_delayable>:
{
   20cae:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   20cb0:	2230      	movs	r2, #48	; 0x30
{
   20cb2:	4604      	mov	r4, r0
   20cb4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   20cb6:	2100      	movs	r1, #0
   20cb8:	f7fd fd6d 	bl	1e796 <memset>
   20cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
   20cc0:	6065      	str	r5, [r4, #4]
   20cc2:	60e3      	str	r3, [r4, #12]
}
   20cc4:	bd38      	pop	{r3, r4, r5, pc}

00020cc6 <k_work_delayable_busy_get>:
int k_work_delayable_busy_get(const struct k_work_delayable *dwork)
   20cc6:	f7ff bfb7 	b.w	20c38 <k_work_busy_get>

00020cca <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   20cca:	b538      	push	{r3, r4, r5, lr}
   20ccc:	4604      	mov	r4, r0
   20cce:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cd2:	f3ef 8511 	mrs	r5, BASEPRI
   20cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   20cda:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   20cde:	f7ff ff3b 	bl	20b58 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20ce2:	4620      	mov	r0, r4
   20ce4:	f7ff ff4d 	bl	20b82 <cancel_async_locked>
	__asm__ volatile(
   20ce8:	f385 8811 	msr	BASEPRI, r5
   20cec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   20cf0:	bd38      	pop	{r3, r4, r5, pc}

00020cf2 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   20cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cf4:	4604      	mov	r4, r0
   20cf6:	460d      	mov	r5, r1
	__asm__ volatile(
   20cf8:	f04f 0340 	mov.w	r3, #64	; 0x40
   20cfc:	f3ef 8611 	mrs	r6, BASEPRI
   20d00:	f383 8812 	msr	BASEPRI_MAX, r3
   20d04:	f3bf 8f6f 	isb	sy
	return *flagp;
   20d08:	68c3      	ldr	r3, [r0, #12]
   20d0a:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   20d0e:	2b00      	cmp	r3, #0
   20d10:	bf14      	ite	ne
   20d12:	2701      	movne	r7, #1
   20d14:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   20d16:	d105      	bne.n	20d24 <k_work_cancel_delayable_sync+0x32>
	__asm__ volatile(
   20d18:	f386 8811 	msr	BASEPRI, r6
   20d1c:	f3bf 8f6f 	isb	sy
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20d20:	4638      	mov	r0, r7
   20d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	(void)unschedule_locked(dwork);
   20d24:	f7ff ff18 	bl	20b58 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20d28:	4620      	mov	r0, r4
   20d2a:	f7ff ff2a 	bl	20b82 <cancel_async_locked>
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   20d2e:	4629      	mov	r1, r5
   20d30:	4620      	mov	r0, r4
   20d32:	f7fb fc63 	bl	1c5fc <cancel_sync_locked>
   20d36:	f386 8811 	msr	BASEPRI, r6
   20d3a:	f3bf 8f6f 	isb	sy
	if (need_wait) {
   20d3e:	2800      	cmp	r0, #0
   20d40:	d0ee      	beq.n	20d20 <k_work_cancel_delayable_sync+0x2e>
	return z_impl_k_sem_take(sem, timeout);
   20d42:	f04f 32ff 	mov.w	r2, #4294967295
   20d46:	f04f 33ff 	mov.w	r3, #4294967295
   20d4a:	f105 0008 	add.w	r0, r5, #8
   20d4e:	f7fb fb77 	bl	1c440 <z_impl_k_sem_take>
   20d52:	e7e5      	b.n	20d20 <k_work_cancel_delayable_sync+0x2e>

00020d54 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   20d54:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20d58:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20d5a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20d5c:	2300      	movs	r3, #0
	node->prev = NULL;
   20d5e:	e9c0 3300 	strd	r3, r3, [r0]
}
   20d62:	4770      	bx	lr

00020d64 <unpend_thread_no_timeout>:
{
   20d64:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   20d66:	f7ff fff5 	bl	20d54 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   20d6a:	7b43      	ldrb	r3, [r0, #13]
   20d6c:	f023 0302 	bic.w	r3, r3, #2
   20d70:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   20d72:	2300      	movs	r3, #0
   20d74:	6083      	str	r3, [r0, #8]
}
   20d76:	bd08      	pop	{r3, pc}

00020d78 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20d78:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   20d7c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20d80:	4283      	cmp	r3, r0
		return b2 - b1;
   20d82:	bf14      	ite	ne
   20d84:	1ac0      	subne	r0, r0, r3
	return 0;
   20d86:	2000      	moveq	r0, #0
}
   20d88:	4770      	bx	lr

00020d8a <z_thread_timeout>:
{
   20d8a:	b510      	push	{r4, lr}
   20d8c:	4601      	mov	r1, r0
	__asm__ volatile(
   20d8e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20d92:	f3ef 8411 	mrs	r4, BASEPRI
   20d96:	f383 8812 	msr	BASEPRI_MAX, r3
   20d9a:	f3bf 8f6f 	isb	sy
		if (!killed) {
   20d9e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   20da2:	f013 0f28 	tst.w	r3, #40	; 0x28
   20da6:	d10d      	bne.n	20dc4 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   20da8:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20dac:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   20dae:	b10b      	cbz	r3, 20db4 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   20db0:	f7ff ffd8 	bl	20d64 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20db4:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   20db8:	f023 0314 	bic.w	r3, r3, #20
   20dbc:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   20dc0:	f7fb fda2 	bl	1c908 <ready_thread>
	__asm__ volatile(
   20dc4:	f384 8811 	msr	BASEPRI, r4
   20dc8:	f3bf 8f6f 	isb	sy
}
   20dcc:	bd10      	pop	{r4, pc}

00020dce <add_to_waitq_locked>:
{
   20dce:	b538      	push	{r3, r4, r5, lr}
   20dd0:	4604      	mov	r4, r0
   20dd2:	460d      	mov	r5, r1
	unready_thread(thread);
   20dd4:	f7fb fdcc 	bl	1c970 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   20dd8:	7b63      	ldrb	r3, [r4, #13]
   20dda:	f043 0302 	orr.w	r3, r3, #2
   20dde:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   20de0:	b1e5      	cbz	r5, 20e1c <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
   20de2:	60a5      	str	r5, [r4, #8]
	return list->head == list;
   20de4:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20de6:	429d      	cmp	r5, r3
   20de8:	d109      	bne.n	20dfe <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
   20dea:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   20dec:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20df0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20df2:	606c      	str	r4, [r5, #4]
}
   20df4:	e012      	b.n	20e1c <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
   20df6:	686a      	ldr	r2, [r5, #4]
   20df8:	4293      	cmp	r3, r2
   20dfa:	d0f6      	beq.n	20dea <add_to_waitq_locked+0x1c>
   20dfc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20dfe:	2b00      	cmp	r3, #0
   20e00:	d0f3      	beq.n	20dea <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
   20e02:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   20e06:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   20e0a:	428a      	cmp	r2, r1
   20e0c:	d0f3      	beq.n	20df6 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
   20e0e:	4291      	cmp	r1, r2
   20e10:	ddf1      	ble.n	20df6 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
   20e12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   20e14:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   20e18:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20e1a:	605c      	str	r4, [r3, #4]
}
   20e1c:	bd38      	pop	{r3, r4, r5, pc}

00020e1e <z_ready_thread>:
{
   20e1e:	b510      	push	{r4, lr}
	__asm__ volatile(
   20e20:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e24:	f3ef 8411 	mrs	r4, BASEPRI
   20e28:	f383 8812 	msr	BASEPRI_MAX, r3
   20e2c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   20e30:	f7fb fd6a 	bl	1c908 <ready_thread>
	__asm__ volatile(
   20e34:	f384 8811 	msr	BASEPRI, r4
   20e38:	f3bf 8f6f 	isb	sy
}
   20e3c:	bd10      	pop	{r4, pc}

00020e3e <z_unpend_first_thread>:
{
   20e3e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   20e40:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e44:	f3ef 8511 	mrs	r5, BASEPRI
   20e48:	f383 8812 	msr	BASEPRI_MAX, r3
   20e4c:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20e50:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20e52:	42a0      	cmp	r0, r4
   20e54:	d00d      	beq.n	20e72 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
   20e56:	b134      	cbz	r4, 20e66 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
   20e58:	4620      	mov	r0, r4
   20e5a:	f7ff ff83 	bl	20d64 <unpend_thread_no_timeout>
   20e5e:	f104 0018 	add.w	r0, r4, #24
   20e62:	f000 f865 	bl	20f30 <z_abort_timeout>
	__asm__ volatile(
   20e66:	f385 8811 	msr	BASEPRI, r5
   20e6a:	f3bf 8f6f 	isb	sy
}
   20e6e:	4620      	mov	r0, r4
   20e70:	bd38      	pop	{r3, r4, r5, pc}
   20e72:	2400      	movs	r4, #0
   20e74:	e7f7      	b.n	20e66 <z_unpend_first_thread+0x28>

00020e76 <z_unpend_thread>:
{
   20e76:	b510      	push	{r4, lr}
	__asm__ volatile(
   20e78:	f04f 0340 	mov.w	r3, #64	; 0x40
   20e7c:	f3ef 8411 	mrs	r4, BASEPRI
   20e80:	f383 8812 	msr	BASEPRI_MAX, r3
   20e84:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   20e88:	f7ff ff6c 	bl	20d64 <unpend_thread_no_timeout>
	__asm__ volatile(
   20e8c:	f384 8811 	msr	BASEPRI, r4
   20e90:	f3bf 8f6f 	isb	sy
}
   20e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20e98:	3018      	adds	r0, #24
   20e9a:	f000 b849 	b.w	20f30 <z_abort_timeout>

00020e9e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20e9e:	4603      	mov	r3, r0
   20ea0:	b920      	cbnz	r0, 20eac <z_reschedule_irqlock+0xe>
   20ea2:	f3ef 8205 	mrs	r2, IPSR
   20ea6:	b90a      	cbnz	r2, 20eac <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   20ea8:	f7f1 bc7a 	b.w	127a0 <arch_swap>
   20eac:	f383 8811 	msr	BASEPRI, r3
   20eb0:	f3bf 8f6f 	isb	sy
}
   20eb4:	4770      	bx	lr

00020eb6 <z_reschedule_unlocked>:
	__asm__ volatile(
   20eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   20eba:	f3ef 8011 	mrs	r0, BASEPRI
   20ebe:	f383 8812 	msr	BASEPRI_MAX, r3
   20ec2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   20ec6:	f7ff bfea 	b.w	20e9e <z_reschedule_irqlock>

00020eca <z_unpend_all>:
{
   20eca:	b538      	push	{r3, r4, r5, lr}
   20ecc:	4605      	mov	r5, r0
	int need_sched = 0;
   20ece:	2000      	movs	r0, #0
	return list->head == list;
   20ed0:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20ed2:	42a5      	cmp	r5, r4
   20ed4:	d000      	beq.n	20ed8 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   20ed6:	b904      	cbnz	r4, 20eda <z_unpend_all+0x10>
}
   20ed8:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   20eda:	4620      	mov	r0, r4
   20edc:	f7ff ffcb 	bl	20e76 <z_unpend_thread>
		z_ready_thread(thread);
   20ee0:	4620      	mov	r0, r4
   20ee2:	f7ff ff9c 	bl	20e1e <z_ready_thread>
		need_sched = 1;
   20ee6:	2001      	movs	r0, #1
   20ee8:	e7f2      	b.n	20ed0 <z_unpend_all+0x6>

00020eea <z_sched_wake>:
{
   20eea:	b538      	push	{r3, r4, r5, lr}
   20eec:	f04f 0340 	mov.w	r3, #64	; 0x40
   20ef0:	f3ef 8511 	mrs	r5, BASEPRI
   20ef4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ef8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   20efc:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20efe:	42a0      	cmp	r0, r4
   20f00:	d012      	beq.n	20f28 <z_sched_wake+0x3e>
		if (thread != NULL) {
   20f02:	b19c      	cbz	r4, 20f2c <z_sched_wake+0x42>
   20f04:	67e1      	str	r1, [r4, #124]	; 0x7c
	thread->base.swap_data = data;
   20f06:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
   20f08:	4620      	mov	r0, r4
   20f0a:	f7ff ff2b 	bl	20d64 <unpend_thread_no_timeout>
   20f0e:	f104 0018 	add.w	r0, r4, #24
   20f12:	f000 f80d 	bl	20f30 <z_abort_timeout>
			ready_thread(thread);
   20f16:	4620      	mov	r0, r4
   20f18:	f7fb fcf6 	bl	1c908 <ready_thread>
			ret = true;
   20f1c:	2001      	movs	r0, #1
	__asm__ volatile(
   20f1e:	f385 8811 	msr	BASEPRI, r5
   20f22:	f3bf 8f6f 	isb	sy
}
   20f26:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
   20f28:	2000      	movs	r0, #0
   20f2a:	e7f8      	b.n	20f1e <z_sched_wake+0x34>
   20f2c:	4620      	mov	r0, r4
   20f2e:	e7f6      	b.n	20f1e <z_sched_wake+0x34>

00020f30 <z_abort_timeout>:
{
   20f30:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f32:	f04f 0240 	mov.w	r2, #64	; 0x40
   20f36:	f3ef 8411 	mrs	r4, BASEPRI
   20f3a:	f382 8812 	msr	BASEPRI_MAX, r2
   20f3e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20f42:	6803      	ldr	r3, [r0, #0]
   20f44:	b13b      	cbz	r3, 20f56 <z_abort_timeout+0x26>
			remove_timeout(to);
   20f46:	f7fc f833 	bl	1cfb0 <remove_timeout>
			ret = 0;
   20f4a:	2000      	movs	r0, #0
	__asm__ volatile(
   20f4c:	f384 8811 	msr	BASEPRI, r4
   20f50:	f3bf 8f6f 	isb	sy
}
   20f54:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   20f56:	f06f 0015 	mvn.w	r0, #21
   20f5a:	e7f7      	b.n	20f4c <z_abort_timeout+0x1c>

00020f5c <z_get_next_timeout_expiry>:
{
   20f5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   20f5e:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f62:	f3ef 8411 	mrs	r4, BASEPRI
   20f66:	f383 8812 	msr	BASEPRI_MAX, r3
   20f6a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20f6e:	f7fb fff7 	bl	1cf60 <next_timeout>
	__asm__ volatile(
   20f72:	f384 8811 	msr	BASEPRI, r4
   20f76:	f3bf 8f6f 	isb	sy
}
   20f7a:	bd10      	pop	{r4, pc}

00020f7c <z_set_timeout_expiry>:
{
   20f7c:	b570      	push	{r4, r5, r6, lr}
   20f7e:	4604      	mov	r4, r0
   20f80:	460d      	mov	r5, r1
	__asm__ volatile(
   20f82:	f04f 0340 	mov.w	r3, #64	; 0x40
   20f86:	f3ef 8611 	mrs	r6, BASEPRI
   20f8a:	f383 8812 	msr	BASEPRI_MAX, r3
   20f8e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20f92:	f7fb ffe5 	bl	1cf60 <next_timeout>
			      || (ticks <= next_to);
   20f96:	2801      	cmp	r0, #1
   20f98:	dd07      	ble.n	20faa <z_set_timeout_expiry+0x2e>
   20f9a:	42a0      	cmp	r0, r4
   20f9c:	db05      	blt.n	20faa <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   20f9e:	42a0      	cmp	r0, r4
   20fa0:	4629      	mov	r1, r5
   20fa2:	bfa8      	it	ge
   20fa4:	4620      	movge	r0, r4
   20fa6:	f7f8 ffef 	bl	19f88 <sys_clock_set_timeout>
	__asm__ volatile(
   20faa:	f386 8811 	msr	BASEPRI, r6
   20fae:	f3bf 8f6f 	isb	sy
}
   20fb2:	bd70      	pop	{r4, r5, r6, pc}

00020fb4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   20fb4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   20fb6:	f7fc f8ef 	bl	1d198 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   20fba:	bd08      	pop	{r3, pc}

00020fbc <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   20fbc:	b108      	cbz	r0, 20fc2 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   20fbe:	f7f2 b921 	b.w	13204 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   20fc2:	4770      	bx	lr

00020fc4 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20fc4:	f1b1 3fff 	cmp.w	r1, #4294967295
   20fc8:	bf08      	it	eq
   20fca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   20fce:	b538      	push	{r3, r4, r5, lr}
   20fd0:	460c      	mov	r4, r1
   20fd2:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20fd4:	d014      	beq.n	21000 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20fd6:	4308      	orrs	r0, r1
   20fd8:	d103      	bne.n	20fe2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   20fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   20fde:	f7fc b8db 	b.w	1d198 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   20fe2:	f06f 0001 	mvn.w	r0, #1
   20fe6:	1b40      	subs	r0, r0, r5
   20fe8:	f04f 33ff 	mov.w	r3, #4294967295
   20fec:	eb63 0101 	sbc.w	r1, r3, r1
   20ff0:	2900      	cmp	r1, #0
   20ff2:	da04      	bge.n	20ffe <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
   20ff4:	f7fc f8d0 	bl	1d198 <sys_clock_tick_get>
   20ff8:	1940      	adds	r0, r0, r5
   20ffa:	eb41 0104 	adc.w	r1, r1, r4
}
   20ffe:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   21000:	f04f 30ff 	mov.w	r0, #4294967295
   21004:	4601      	mov	r1, r0
   21006:	e7fa      	b.n	20ffe <sys_clock_timeout_end_calc+0x3a>

00021008 <add_event>:
{
   21008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2100a:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2100c:	e9d0 1300 	ldrd	r1, r3, [r0]
   21010:	4288      	cmp	r0, r1
   21012:	4604      	mov	r4, r0
   21014:	d105      	bne.n	21022 <add_event+0x1a>
	sys_dnode_t *const tail = list->tail;
   21016:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   21018:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2101c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2101e:	6065      	str	r5, [r4, #4]
   21020:	e01d      	b.n	2105e <add_event+0x56>
	if ((pending == NULL) ||
   21022:	2b00      	cmp	r3, #0
   21024:	d0f7      	beq.n	21016 <add_event+0xe>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   21026:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21028:	b100      	cbz	r0, 2102c <add_event+0x24>
   2102a:	3860      	subs	r0, #96	; 0x60
   2102c:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   21030:	4639      	mov	r1, r7
   21032:	f7ff fea1 	bl	20d78 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   21036:	2800      	cmp	r0, #0
   21038:	dced      	bgt.n	21016 <add_event+0xe>
	return list->head == list;
   2103a:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2103c:	42b4      	cmp	r4, r6
   2103e:	d0ea      	beq.n	21016 <add_event+0xe>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   21040:	2e00      	cmp	r6, #0
   21042:	d0e8      	beq.n	21016 <add_event+0xe>
		if (z_sched_prio_cmp(poller_thread(poller),
   21044:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   21046:	b101      	cbz	r1, 2104a <add_event+0x42>
   21048:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2104a:	4638      	mov	r0, r7
   2104c:	f7ff fe94 	bl	20d78 <z_sched_prio_cmp>
   21050:	2800      	cmp	r0, #0
   21052:	dd05      	ble.n	21060 <add_event+0x58>
	sys_dnode_t *const prev = successor->prev;
   21054:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   21056:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2105a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2105c:	6075      	str	r5, [r6, #4]
}
   2105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   21060:	6863      	ldr	r3, [r4, #4]
   21062:	429e      	cmp	r6, r3
   21064:	d0d7      	beq.n	21016 <add_event+0xe>
   21066:	6836      	ldr	r6, [r6, #0]
   21068:	e7ea      	b.n	21040 <add_event+0x38>

0002106a <register_events>:
{
   2106a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2106e:	2500      	movs	r5, #0
{
   21070:	468b      	mov	fp, r1
   21072:	4614      	mov	r4, r2
   21074:	461f      	mov	r7, r3
   21076:	4682      	mov	sl, r0
	int events_registered = 0;
   21078:	462e      	mov	r6, r5
	event->poller = NULL;
   2107a:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2107c:	455d      	cmp	r5, fp
   2107e:	db02      	blt.n	21086 <register_events+0x1c>
}
   21080:	4630      	mov	r0, r6
   21082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__asm__ volatile(
   21086:	f04f 0340 	mov.w	r3, #64	; 0x40
   2108a:	f3ef 8911 	mrs	r9, BASEPRI
   2108e:	f383 8812 	msr	BASEPRI_MAX, r3
   21092:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   21096:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2109a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2109e:	3b01      	subs	r3, #1
   210a0:	2b07      	cmp	r3, #7
   210a2:	d80f      	bhi.n	210c4 <register_events+0x5a>
   210a4:	e8df f003 	tbb	[pc, r3]
   210a8:	0a0e041e 	.word	0x0a0e041e
   210ac:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   210b0:	f8da 3010 	ldr.w	r3, [sl, #16]
   210b4:	689b      	ldr	r3, [r3, #8]
   210b6:	b12b      	cbz	r3, 210c4 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   210b8:	2302      	movs	r3, #2
   210ba:	e020      	b.n	210fe <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   210bc:	f8da 3010 	ldr.w	r3, [sl, #16]
   210c0:	681b      	ldr	r3, [r3, #0]
   210c2:	bb8b      	cbnz	r3, 21128 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   210c4:	bb47      	cbnz	r7, 21118 <register_events+0xae>
   210c6:	7823      	ldrb	r3, [r4, #0]
   210c8:	b333      	cbz	r3, 21118 <register_events+0xae>
	switch (event->type) {
   210ca:	f89a 300d 	ldrb.w	r3, [sl, #13]
   210ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   210d2:	3b01      	subs	r3, #1
   210d4:	2b07      	cmp	r3, #7
   210d6:	d830      	bhi.n	2113a <register_events+0xd0>
   210d8:	e8df f003 	tbb	[pc, r3]
   210dc:	282f2833 	.word	0x282f2833
   210e0:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   210e4:	f8da 3010 	ldr.w	r3, [sl, #16]
   210e8:	689b      	ldr	r3, [r3, #8]
   210ea:	2b00      	cmp	r3, #0
   210ec:	d0ea      	beq.n	210c4 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   210ee:	2301      	movs	r3, #1
   210f0:	e005      	b.n	210fe <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   210f2:	f8da 3010 	ldr.w	r3, [sl, #16]
   210f6:	6a1b      	ldr	r3, [r3, #32]
   210f8:	2b00      	cmp	r3, #0
   210fa:	d0e3      	beq.n	210c4 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   210fc:	2310      	movs	r3, #16
	event->state |= state;
   210fe:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   21102:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   21106:	f3c2 3186 	ubfx	r1, r2, #14, #7
   2110a:	430b      	orrs	r3, r1
   2110c:	f363 3294 	bfi	r2, r3, #14, #7
   21110:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   21114:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   21118:	f389 8811 	msr	BASEPRI, r9
   2111c:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21120:	3501      	adds	r5, #1
   21122:	f10a 0a14 	add.w	sl, sl, #20
   21126:	e7a9      	b.n	2107c <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   21128:	2304      	movs	r3, #4
   2112a:	e7e8      	b.n	210fe <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2112c:	f8da 0010 	ldr.w	r0, [sl, #16]
   21130:	4622      	mov	r2, r4
   21132:	4651      	mov	r1, sl
   21134:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   21136:	f7ff ff67 	bl	21008 <add_event>
	event->poller = poller;
   2113a:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2113e:	3601      	adds	r6, #1
   21140:	e7ea      	b.n	21118 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   21142:	f8da 0010 	ldr.w	r0, [sl, #16]
   21146:	4622      	mov	r2, r4
   21148:	4651      	mov	r1, sl
   2114a:	e7f4      	b.n	21136 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2114c:	f8da 0010 	ldr.w	r0, [sl, #16]
   21150:	4622      	mov	r2, r4
   21152:	4651      	mov	r1, sl
   21154:	3024      	adds	r0, #36	; 0x24
   21156:	e7ee      	b.n	21136 <register_events+0xcc>

00021158 <signal_poll_event>:
{
   21158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2115c:	6884      	ldr	r4, [r0, #8]
{
   2115e:	4605      	mov	r5, r0
   21160:	460e      	mov	r6, r1
	if (poller != NULL) {
   21162:	b144      	cbz	r4, 21176 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   21164:	7863      	ldrb	r3, [r4, #1]
   21166:	2b01      	cmp	r3, #1
   21168:	d12e      	bne.n	211c8 <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
   2116a:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2116e:	f013 0302 	ands.w	r3, r3, #2
   21172:	d10a      	bne.n	2118a <signal_poll_event+0x32>
		poller->is_polling = false;
   21174:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   21176:	68eb      	ldr	r3, [r5, #12]
   21178:	f3c3 3286 	ubfx	r2, r3, #14, #7
   2117c:	4316      	orrs	r6, r2
	event->poller = NULL;
   2117e:	2000      	movs	r0, #0
	event->state |= state;
   21180:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
   21184:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   21186:	60eb      	str	r3, [r5, #12]
	return retcode;
   21188:	e03e      	b.n	21208 <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
   2118a:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2118e:	f1b3 3fff 	cmp.w	r3, #4294967295
   21192:	bf08      	it	eq
   21194:	f112 0f02 	cmneq.w	r2, #2
   21198:	d032      	beq.n	21200 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2119a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2119e:	4640      	mov	r0, r8
   211a0:	f7ff fe69 	bl	20e76 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   211a4:	2e08      	cmp	r6, #8
   211a6:	bf0c      	ite	eq
   211a8:	f06f 0303 	mvneq.w	r3, #3
   211ac:	2300      	movne	r3, #0
   211ae:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   211b0:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   211b4:	06db      	lsls	r3, r3, #27
   211b6:	d109      	bne.n	211cc <signal_poll_event+0x74>
   211b8:	f854 7c48 	ldr.w	r7, [r4, #-72]
   211bc:	b937      	cbnz	r7, 211cc <signal_poll_event+0x74>
	z_ready_thread(thread);
   211be:	4640      	mov	r0, r8
   211c0:	f7ff fe2d 	bl	20e1e <z_ready_thread>
		poller->is_polling = false;
   211c4:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   211c6:	e7d6      	b.n	21176 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   211c8:	2b02      	cmp	r3, #2
   211ca:	d001      	beq.n	211d0 <signal_poll_event+0x78>
		poller->is_polling = false;
   211cc:	2300      	movs	r3, #0
   211ce:	e7d1      	b.n	21174 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   211d0:	7823      	ldrb	r3, [r4, #0]
   211d2:	2b00      	cmp	r3, #0
   211d4:	d0cf      	beq.n	21176 <signal_poll_event+0x1e>
   211d6:	f854 7c04 	ldr.w	r7, [r4, #-4]
   211da:	2f00      	cmp	r7, #0
   211dc:	d0f2      	beq.n	211c4 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   211de:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   211e2:	f1a4 0914 	sub.w	r9, r4, #20
   211e6:	f104 0014 	add.w	r0, r4, #20
   211ea:	f7ff fea1 	bl	20f30 <z_abort_timeout>
		twork->poll_result = 0;
   211ee:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
   211f2:	4649      	mov	r1, r9
   211f4:	4638      	mov	r0, r7
   211f6:	f7ff fd2f 	bl	20c58 <z_work_submit_to_queue>
		poller->is_polling = false;
   211fa:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   211fe:	e7ba      	b.n	21176 <signal_poll_event+0x1e>
		poller->is_polling = false;
   21200:	2300      	movs	r3, #0
   21202:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   21204:	f06f 000a 	mvn.w	r0, #10
}
   21208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002120c <clear_event_registrations>:
	while (num_events--) {
   2120c:	2314      	movs	r3, #20
{
   2120e:	b5f0      	push	{r4, r5, r6, r7, lr}
   21210:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   21214:	2400      	movs	r4, #0
	switch (event->type) {
   21216:	f44f 768b 	mov.w	r6, #278	; 0x116
	while (num_events--) {
   2121a:	b901      	cbnz	r1, 2121e <clear_event_registrations+0x12>
}
   2121c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2121e:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   21222:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   21226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2122a:	2b08      	cmp	r3, #8
   2122c:	f1a0 0714 	sub.w	r7, r0, #20
   21230:	d80c      	bhi.n	2124c <clear_event_registrations+0x40>
   21232:	fa26 f303 	lsr.w	r3, r6, r3
   21236:	07db      	lsls	r3, r3, #31
   21238:	d508      	bpl.n	2124c <clear_event_registrations+0x40>
	return node->next != NULL;
   2123a:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2123e:	b12b      	cbz	r3, 2124c <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   21240:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   21244:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   21246:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   21248:	e940 4405 	strd	r4, r4, [r0, #-20]
   2124c:	f382 8811 	msr	BASEPRI, r2
   21250:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   21254:	f04f 0340 	mov.w	r3, #64	; 0x40
   21258:	f3ef 8211 	mrs	r2, BASEPRI
   2125c:	f383 8812 	msr	BASEPRI_MAX, r3
   21260:	f3bf 8f6f 	isb	sy
   21264:	3901      	subs	r1, #1
   21266:	4638      	mov	r0, r7
   21268:	e7d7      	b.n	2121a <clear_event_registrations+0xe>

0002126a <k_poll_event_init>:
{
   2126a:	b510      	push	{r4, lr}
	event->type = type;
   2126c:	0552      	lsls	r2, r2, #21
   2126e:	0209      	lsls	r1, r1, #8
   21270:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
   21274:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
   21278:	430a      	orrs	r2, r1
   2127a:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2127c:	2400      	movs	r4, #0
	event->type = type;
   2127e:	430a      	orrs	r2, r1
	event->obj = obj;
   21280:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   21284:	6084      	str	r4, [r0, #8]
}
   21286:	bd10      	pop	{r4, pc}

00021288 <z_handle_obj_poll_events>:
{
   21288:	4603      	mov	r3, r0
	return list->head == list;
   2128a:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2128c:	4283      	cmp	r3, r0
   2128e:	d008      	beq.n	212a2 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   21290:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   21294:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   21296:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   21298:	2300      	movs	r3, #0
	node->prev = NULL;
   2129a:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2129e:	f7ff bf5b 	b.w	21158 <signal_poll_event>
}
   212a2:	4770      	bx	lr

000212a4 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   212a4:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   212a6:	e9c0 0000 	strd	r0, r0, [r0]
   212aa:	6083      	str	r3, [r0, #8]
}
   212ac:	4770      	bx	lr

000212ae <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   212ae:	2300      	movs	r3, #0
   212b0:	6083      	str	r3, [r0, #8]
}
   212b2:	4770      	bx	lr

000212b4 <k_free>:
	if (ptr != NULL) {
   212b4:	b120      	cbz	r0, 212c0 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   212b6:	1f01      	subs	r1, r0, #4
   212b8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   212bc:	f7ff bb1f 	b.w	208fe <k_heap_free>
}
   212c0:	4770      	bx	lr

000212c2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   212c2:	4770      	bx	lr
