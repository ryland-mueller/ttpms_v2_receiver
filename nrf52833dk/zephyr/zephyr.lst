
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 1b 00 20 39 2b 00 00 bd 6c 00 00 0d 2b 00 00     ... 9+...l...+..
  10:	0d 2b 00 00 0d 2b 00 00 0d 2b 00 00 00 00 00 00     .+...+...+......
	...
  2c:	c9 23 00 00 0d 2b 00 00 00 00 00 00 39 23 00 00     .#...+......9#..
  3c:	0d 2b 00 00                                         .+..

00000040 <_irq_vector_table>:
  40:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  50:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  60:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  70:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  80:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  90:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  a0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  b0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  c0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  d0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  e0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..
  f0:	39 25 00 00 39 25 00 00 39 25 00 00 39 25 00 00     9%..9%..9%..9%..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <__data_size+0x60>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x48>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <__data_size+0x58>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295
     208:	d204      	bcs.n	214 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x14>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x14>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <__data_size+0x5c>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295
     234:	d204      	bcs.n	240 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x40>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x40>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <__data_size+0x50>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295
     280:	d204      	bcs.n	28c <__data_size+0x1c>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <__data_size+0x1c>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <__data_size+0x54>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295
     2ac:	d204      	bcs.n	2b8 <__data_size+0x48>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <__data_size+0x48>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <__data_size+0x1c>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <__data_size+0x48>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x14>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_CAN_MCP2515_INT_THREAD_STACK_SIZE+0x40>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <__data_size+0x72>
     2d4:	b916      	cbnz	r6, 2dc <__data_size+0x6c>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <__data_size+0x66>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <__data_size+0x9c>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <__data_size+0x80>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <__data_size+0x92>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <__data_size+0x96>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <__data_size+0x8c>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <__data_size+0x8e>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <__data_size+0x15c>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295
     350:	d204      	bcs.n	35c <__data_size+0xec>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <__data_size+0xec>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <__data_size+0x160>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295
     37c:	d204      	bcs.n	388 <__data_size+0x118>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <__data_size+0x118>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <__data_size+0x132>
     39c:	d106      	bne.n	3ac <__data_size+0x13c>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <__data_size+0x13c>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <__data_size+0x8e>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <__data_size+0x8e>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <__data_size+0xec>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <__data_size+0x118>
     3d4:	0000      	movs	r0, r0
	...

000003d8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3dc:	b09f      	sub	sp, #124	; 0x7c
     3de:	4682      	mov	sl, r0
     3e0:	9103      	str	r1, [sp, #12]
     3e2:	4616      	mov	r6, r2
     3e4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     3e6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     3e8:	7830      	ldrb	r0, [r6, #0]
     3ea:	b910      	cbnz	r0, 3f2 <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     3ec:	4628      	mov	r0, r5
     3ee:	f000 bd85 	b.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
			OUTC(*fp++);
     3f2:	1c73      	adds	r3, r6, #1
		if (*fp != '%') {
     3f4:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     3f6:	9306      	str	r3, [sp, #24]
		if (*fp != '%') {
     3f8:	d006      	beq.n	408 <CONFIG_MAIN_STACK_SIZE+0x8>
			OUTC(*fp++);
     3fa:	9903      	ldr	r1, [sp, #12]
			OUTC('%');
     3fc:	47d0      	blx	sl
     3fe:	2800      	cmp	r0, #0
     400:	f2c0 857c 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     404:	3501      	adds	r5, #1
		if (bps == NULL) {
     406:	e227      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		} state = {
     408:	2218      	movs	r2, #24
     40a:	2100      	movs	r1, #0
     40c:	a810      	add	r0, sp, #64	; 0x40
     40e:	f006 fca1 	bl	6d54 <memset>
	if (*sp == '%') {
     412:	7873      	ldrb	r3, [r6, #1]
     414:	2b25      	cmp	r3, #37	; 0x25
     416:	d07d      	beq.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     418:	2300      	movs	r3, #0
     41a:	1c70      	adds	r0, r6, #1
     41c:	4698      	mov	r8, r3
     41e:	469e      	mov	lr, r3
     420:	469c      	mov	ip, r3
     422:	461f      	mov	r7, r3
     424:	4601      	mov	r1, r0
		switch (*sp) {
     426:	f810 2b01 	ldrb.w	r2, [r0], #1
     42a:	2a2b      	cmp	r2, #43	; 0x2b
     42c:	f000 80a1 	beq.w	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     430:	f200 8098 	bhi.w	564 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7c>
     434:	2a20      	cmp	r2, #32
     436:	f000 809f 	beq.w	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     43a:	2a23      	cmp	r2, #35	; 0x23
     43c:	f000 809f 	beq.w	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
     440:	b12b      	cbz	r3, 44e <CONFIG_MAIN_STACK_SIZE+0x4e>
     442:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     44a:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     44e:	f1b8 0f00 	cmp.w	r8, #0
     452:	d005      	beq.n	460 <CONFIG_MAIN_STACK_SIZE+0x60>
     454:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     458:	f043 0320 	orr.w	r3, r3, #32
     45c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     460:	f1be 0f00 	cmp.w	lr, #0
     464:	d005      	beq.n	472 <CONFIG_MAIN_STACK_SIZE+0x72>
     466:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     46a:	f043 0310 	orr.w	r3, r3, #16
     46e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     472:	f1bc 0f00 	cmp.w	ip, #0
     476:	d005      	beq.n	484 <CONFIG_MAIN_STACK_SIZE+0x84>
     478:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     47c:	f043 0308 	orr.w	r3, r3, #8
     480:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
     484:	b12f      	cbz	r7, 492 <CONFIG_MAIN_STACK_SIZE+0x92>
     486:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     48a:	f043 0304 	orr.w	r3, r3, #4
     48e:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (conv->flag_zero && conv->flag_dash) {
     492:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     496:	f003 0044 	and.w	r0, r3, #68	; 0x44
     49a:	2844      	cmp	r0, #68	; 0x44
     49c:	d103      	bne.n	4a6 <CONFIG_MAIN_STACK_SIZE+0xa6>
		conv->flag_zero = false;
     49e:	f36f 1386 	bfc	r3, #6, #1
     4a2:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	conv->width_present = true;
     4a6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     4aa:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     4b0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	if (*sp == '*') {
     4b4:	d17f      	bne.n	5b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xce>
		conv->width_star = true;
     4b6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     4ba:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
     4be:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     4c0:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	conv->prec_present = (*sp == '.');
     4c4:	781a      	ldrb	r2, [r3, #0]
     4c6:	2a2e      	cmp	r2, #46	; 0x2e
     4c8:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     4cc:	bf0c      	ite	eq
     4ce:	2101      	moveq	r1, #1
     4d0:	2100      	movne	r1, #0
     4d2:	f361 0241 	bfi	r2, r1, #1, #1
     4d6:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
	if (!conv->prec_present) {
     4da:	d178      	bne.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
	if (*sp == '*') {
     4dc:	785a      	ldrb	r2, [r3, #1]
     4de:	2a2a      	cmp	r2, #42	; 0x2a
     4e0:	d06e      	beq.n	5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>
	++sp;
     4e2:	3301      	adds	r3, #1
	size_t val = 0;
     4e4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     4e6:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     4ea:	4619      	mov	r1, r3
     4ec:	f811 0b01 	ldrb.w	r0, [r1], #1
     4f0:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     4f4:	2f09      	cmp	r7, #9
     4f6:	f240 80ad 	bls.w	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
	conv->unsupported |= ((conv->prec_value < 0)
     4fa:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
	conv->prec_value = prec;
     4fe:	9214      	str	r2, [sp, #80]	; 0x50
	conv->unsupported |= ((conv->prec_value < 0)
     500:	f3c1 0040 	ubfx	r0, r1, #1, #1
     504:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     508:	460a      	mov	r2, r1
     50a:	f360 0241 	bfi	r2, r0, #1, #1
     50e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     512:	e05c      	b.n	5ce <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe6>
		conv->specifier = *sp++;
     514:	1cb2      	adds	r2, r6, #2
     516:	9206      	str	r2, [sp, #24]
     518:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
		if (conv->width_star) {
     51c:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     520:	07d9      	lsls	r1, r3, #31
     522:	f140 8150 	bpl.w	7c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2de>
			width = va_arg(ap, int);
     526:	f854 2b04 	ldr.w	r2, [r4], #4
     52a:	9204      	str	r2, [sp, #16]
			if (width < 0) {
     52c:	2a00      	cmp	r2, #0
     52e:	da08      	bge.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
				conv->flag_dash = true;
     530:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     534:	f042 0204 	orr.w	r2, r2, #4
     538:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				width = -width;
     53c:	9a04      	ldr	r2, [sp, #16]
     53e:	4252      	negs	r2, r2
		int width = -1;
     540:	9204      	str	r2, [sp, #16]
		if (conv->prec_star) {
     542:	075a      	lsls	r2, r3, #29
     544:	f140 8147 	bpl.w	7d6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2ee>
			int arg = va_arg(ap, int);
     548:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
     54c:	2f00      	cmp	r7, #0
     54e:	f280 8146 	bge.w	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
				conv->prec_present = false;
     552:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     556:	f36f 0341 	bfc	r3, #1, #1
     55a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
		int precision = -1;
     55e:	f04f 37ff 	mov.w	r7, #4294967295
     562:	e13c      	b.n	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
		switch (*sp) {
     564:	2a2d      	cmp	r2, #45	; 0x2d
     566:	d00d      	beq.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     568:	2a30      	cmp	r2, #48	; 0x30
     56a:	f47f af69 	bne.w	440 <CONFIG_MAIN_STACK_SIZE+0x40>
     56e:	2301      	movs	r3, #1
	} while (loop);
     570:	e758      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
		switch (*sp) {
     572:	f04f 0c01 	mov.w	ip, #1
     576:	e755      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     578:	f04f 0e01 	mov.w	lr, #1
     57c:	e752      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     57e:	f04f 0801 	mov.w	r8, #1
     582:	e74f      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
     584:	2701      	movs	r7, #1
     586:	e74d      	b.n	424 <CONFIG_MAIN_STACK_SIZE+0x24>
		val = 10U * val + *sp++ - '0';
     588:	fb0e 7202 	mla	r2, lr, r2, r7
     58c:	3a30      	subs	r2, #48	; 0x30
     58e:	4603      	mov	r3, r0
     590:	4618      	mov	r0, r3
     592:	f810 7b01 	ldrb.w	r7, [r0], #1
     596:	f1a7 0c30 	sub.w	ip, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     59a:	f1bc 0f09 	cmp.w	ip, #9
     59e:	d9f3      	bls.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
	if (sp != wp) {
     5a0:	4299      	cmp	r1, r3
     5a2:	d08f      	beq.n	4c4 <CONFIG_MAIN_STACK_SIZE+0xc4>
		conv->unsupported |= ((conv->width_value < 0)
     5a4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
		conv->width_value = width;
     5a8:	9213      	str	r2, [sp, #76]	; 0x4c
				      || (width != (size_t)conv->width_value));
     5aa:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     5ac:	f362 0141 	bfi	r1, r2, #1, #1
     5b0:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
     5b4:	e786      	b.n	4c4 <CONFIG_MAIN_STACK_SIZE+0xc4>
     5b6:	460b      	mov	r3, r1
	size_t val = 0;
     5b8:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     5ba:	f04f 0e0a 	mov.w	lr, #10
     5be:	e7e7      	b.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
		conv->prec_star = true;
     5c0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     5c4:	f042 0204 	orr.w	r2, r2, #4
     5c8:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		return ++sp;
     5cc:	3302      	adds	r3, #2
	switch (*sp) {
     5ce:	781a      	ldrb	r2, [r3, #0]
     5d0:	2a6c      	cmp	r2, #108	; 0x6c
     5d2:	d05f      	beq.n	694 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ac>
     5d4:	d843      	bhi.n	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
     5d6:	2a68      	cmp	r2, #104	; 0x68
     5d8:	d049      	beq.n	66e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x186>
     5da:	2a6a      	cmp	r2, #106	; 0x6a
     5dc:	d063      	beq.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
     5de:	2a4c      	cmp	r2, #76	; 0x4c
     5e0:	d069      	beq.n	6b6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ce>
	conv->specifier = *sp++;
     5e2:	f813 2b01 	ldrb.w	r2, [r3], #1
     5e6:	9306      	str	r3, [sp, #24]
	switch (conv->specifier) {
     5e8:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     5ea:	f88d 204b 	strb.w	r2, [sp, #75]	; 0x4b
	switch (conv->specifier) {
     5ee:	f200 80a9 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     5f2:	2a6d      	cmp	r2, #109	; 0x6d
     5f4:	d86c      	bhi.n	6d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1e8>
     5f6:	2a69      	cmp	r2, #105	; 0x69
     5f8:	f200 80a4 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     5fc:	2a57      	cmp	r2, #87	; 0x57
     5fe:	f200 8084 	bhi.w	70a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x222>
     602:	2a41      	cmp	r2, #65	; 0x41
     604:	d004      	beq.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     606:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
     60a:	2b02      	cmp	r3, #2
     60c:	f200 809a 	bhi.w	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_FP;
     610:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     614:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
     618:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
     61a:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
     61e:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
     622:	427a      	negs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
     624:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
		conv->specifier_cat = SPECIFIER_FP;
     628:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
			|| (conv->specifier == 'A');
     62c:	417a      	adcs	r2, r7
		conv->specifier_a = (conv->specifier == 'a')
     62e:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
     632:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
     634:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
		if (conv->specifier_a
     638:	b2cb      	uxtb	r3, r1
     63a:	f100 80c2 	bmi.w	7c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2da>
		if (conv->length_mod == LENGTH_L) {
     63e:	f003 0278 	and.w	r2, r3, #120	; 0x78
     642:	2a18      	cmp	r2, #24
     644:	f040 80ac 	bne.w	7a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b8>
			conv->length_mod = LENGTH_NONE;
     648:	f36f 03c6 	bfc	r3, #3, #4
     64c:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
	bool unsupported = false;
     650:	2300      	movs	r3, #0
     652:	e09b      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
		val = 10U * val + *sp++ - '0';
     654:	fb0c 0202 	mla	r2, ip, r2, r0
     658:	3a30      	subs	r2, #48	; 0x30
     65a:	460b      	mov	r3, r1
     65c:	e745      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
	switch (*sp) {
     65e:	2a74      	cmp	r2, #116	; 0x74
     660:	d025      	beq.n	6ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c6>
     662:	2a7a      	cmp	r2, #122	; 0x7a
     664:	d1bd      	bne.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
		conv->length_mod = LENGTH_Z;
     666:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     66a:	2106      	movs	r1, #6
     66c:	e00c      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		if (*++sp == 'h') {
     66e:	785a      	ldrb	r2, [r3, #1]
     670:	2a68      	cmp	r2, #104	; 0x68
     672:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     676:	d106      	bne.n	686 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19e>
			conv->length_mod = LENGTH_HH;
     678:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     67a:	f361 02c6 	bfi	r2, r1, #3, #4
     67e:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
			++sp;
     682:	3302      	adds	r3, #2
     684:	e7ad      	b.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
			conv->length_mod = LENGTH_H;
     686:	2102      	movs	r1, #2
     688:	f361 02c6 	bfi	r2, r1, #3, #4
     68c:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
		if (*++sp == 'h') {
     690:	3301      	adds	r3, #1
     692:	e7a6      	b.n	5e2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xfa>
		if (*++sp == 'l') {
     694:	785a      	ldrb	r2, [r3, #1]
     696:	2a6c      	cmp	r2, #108	; 0x6c
     698:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     69c:	d101      	bne.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
			conv->length_mod = LENGTH_LL;
     69e:	2104      	movs	r1, #4
     6a0:	e7eb      	b.n	67a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x192>
			conv->length_mod = LENGTH_L;
     6a2:	2103      	movs	r1, #3
     6a4:	e7f0      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->length_mod = LENGTH_J;
     6a6:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     6aa:	2105      	movs	r1, #5
     6ac:	e7ec      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->length_mod = LENGTH_T;
     6ae:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     6b2:	2107      	movs	r1, #7
     6b4:	e7e8      	b.n	688 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a0>
		conv->unsupported = true;
     6b6:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
     6ba:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     6be:	f022 0202 	bic.w	r2, r2, #2
     6c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     6c6:	f042 0202 	orr.w	r2, r2, #2
     6ca:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
		break;
     6ce:	e7df      	b.n	690 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1a8>
	switch (conv->specifier) {
     6d0:	3a6e      	subs	r2, #110	; 0x6e
     6d2:	b2d3      	uxtb	r3, r2
     6d4:	2201      	movs	r2, #1
     6d6:	409a      	lsls	r2, r3
     6d8:	f240 4382 	movw	r3, #1154	; 0x482
     6dc:	421a      	tst	r2, r3
     6de:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     6e2:	d136      	bne.n	752 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26a>
     6e4:	f012 0f24 	tst.w	r2, #36	; 0x24
     6e8:	d15e      	bne.n	7a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c0>
     6ea:	07d1      	lsls	r1, r2, #31
     6ec:	d52a      	bpl.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_PTR;
     6ee:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     6f2:	f003 0378 	and.w	r3, r3, #120	; 0x78
     6f6:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     6fa:	2103      	movs	r1, #3
     6fc:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     700:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     702:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     706:	4143      	adcs	r3, r0
     708:	e040      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
	switch (conv->specifier) {
     70a:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     70e:	b2c9      	uxtb	r1, r1
     710:	2001      	movs	r0, #1
     712:	fa00 f101 	lsl.w	r1, r0, r1
     716:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     71a:	f47f af79 	bne.w	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
     71e:	f640 0301 	movw	r3, #2049	; 0x801
     722:	4219      	tst	r1, r3
     724:	f89d 3049 	ldrb.w	r3, [sp, #73]	; 0x49
     728:	d119      	bne.n	75e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x276>
     72a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     72e:	d009      	beq.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
		conv->specifier_cat = SPECIFIER_SINT;
     730:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     734:	f360 0202 	bfi	r2, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     738:	f003 0378 	and.w	r3, r3, #120	; 0x78
     73c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     73e:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod == LENGTH_UPPER_L) {
     742:	d185      	bne.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->invalid = true;
     744:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     748:	f043 0301 	orr.w	r3, r3, #1
     74c:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		break;
     750:	e77e      	b.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_UINT;
     752:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     756:	2102      	movs	r1, #2
     758:	f361 0202 	bfi	r2, r1, #0, #3
     75c:	e7ec      	b.n	738 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x250>
     75e:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     762:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
     764:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     768:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     76c:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     76e:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			conv->invalid = true;
     772:	bf02      	ittt	eq
     774:	f89d 1048 	ldrbeq.w	r1, [sp, #72]	; 0x48
     778:	f041 0101 	orreq.w	r1, r1, #1
     77c:	f88d 1048 	strbeq.w	r1, [sp, #72]	; 0x48
		if (conv->specifier == 'c') {
     780:	2a63      	cmp	r2, #99	; 0x63
     782:	f47f af65 	bne.w	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
			unsupported = (conv->length_mod != LENGTH_NONE);
     786:	3b00      	subs	r3, #0
     788:	bf18      	it	ne
     78a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     78c:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
     790:	f3c2 0140 	ubfx	r1, r2, #1, #1
     794:	430b      	orrs	r3, r1
     796:	f363 0241 	bfi	r2, r3, #1, #1
     79a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
	return sp;
     79e:	e6bd      	b.n	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
		} else if ((conv->length_mod != LENGTH_NONE)
     7a0:	f013 0f38 	tst.w	r3, #56	; 0x38
     7a4:	d1ce      	bne.n	744 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x25c>
     7a6:	e753      	b.n	650 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x168>
		conv->specifier_cat = SPECIFIER_PTR;
     7a8:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     7ac:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     7ae:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     7b2:	f361 0202 	bfi	r2, r1, #0, #3
     7b6:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
		if (conv->length_mod != LENGTH_NONE) {
     7ba:	bf14      	ite	ne
     7bc:	2301      	movne	r3, #1
     7be:	2300      	moveq	r3, #0
     7c0:	e7e4      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
			unsupported = true;
     7c2:	2301      	movs	r3, #1
     7c4:	e7e2      	b.n	78c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a4>
		} else if (conv->width_present) {
     7c6:	f99d 2048 	ldrsb.w	r2, [sp, #72]	; 0x48
     7ca:	2a00      	cmp	r2, #0
			width = conv->width_value;
     7cc:	bfb4      	ite	lt
     7ce:	9a13      	ldrlt	r2, [sp, #76]	; 0x4c
		int width = -1;
     7d0:	f04f 32ff 	movge.w	r2, #4294967295
     7d4:	e6b4      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
		} else if (conv->prec_present) {
     7d6:	079f      	lsls	r7, r3, #30
     7d8:	f57f aec1 	bpl.w	55e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x76>
			precision = conv->prec_value;
     7dc:	9f14      	ldr	r7, [sp, #80]	; 0x50
		conv->pad0_value = 0;
     7de:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     7e0:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
		    && (conv->specifier_cat == SPECIFIER_FP)
     7e4:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
     7e8:	f003 0207 	and.w	r2, r3, #7
     7ec:	2a04      	cmp	r2, #4
     7ee:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
     7f2:	d107      	bne.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		    && !conv->prec_present) {
     7f4:	0790      	lsls	r0, r2, #30
     7f6:	d405      	bmi.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
			if (conv->specifier_a) {
     7f8:	f99d 1049 	ldrsb.w	r1, [sp, #73]	; 0x49
				precision = FRACTION_HEX;
     7fc:	2900      	cmp	r1, #0
     7fe:	bfac      	ite	ge
     800:	2706      	movge	r7, #6
     802:	270d      	movlt	r7, #13
		enum specifier_cat_enum specifier_cat
     804:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     808:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     80a:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     80e:	d133      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
			switch (length_mod) {
     810:	1ed3      	subs	r3, r2, #3
     812:	2b04      	cmp	r3, #4
     814:	d804      	bhi.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     816:	e8df f003 	tbb	[pc, r3]
     81a:	4621      	.short	0x4621
     81c:	2146      	.short	0x2146
     81e:	21          	.byte	0x21
     81f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     820:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     822:	2a01      	cmp	r2, #1
				value->sint = va_arg(ap, int);
     824:	ea4f 71e3 	mov.w	r1, r3, asr #31
     828:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     82c:	d11c      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
				value->sint = (signed char)value->sint;
     82e:	f99d 3040 	ldrsb.w	r3, [sp, #64]	; 0x40
     832:	17d9      	asrs	r1, r3, #31
     834:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
				value->sint = va_arg(ap, int);
     838:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     83a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     83e:	9307      	str	r3, [sp, #28]
     840:	0799      	lsls	r1, r3, #30
     842:	d050      	beq.n	8e6 <__z_interrupt_stack_SIZEOF+0x66>
			OUTS(sp, fp);
     844:	9b06      	ldr	r3, [sp, #24]
     846:	9903      	ldr	r1, [sp, #12]
     848:	4632      	mov	r2, r6
     84a:	4650      	mov	r0, sl
     84c:	f006 f986 	bl	6b5c <outs>
     850:	2800      	cmp	r0, #0
     852:	f2c0 8353 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     856:	4405      	add	r5, r0
			continue;
     858:	9e06      	ldr	r6, [sp, #24]
     85a:	e5c5      	b.n	3e8 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     85c:	f854 3b04 	ldr.w	r3, [r4], #4
     860:	17d9      	asrs	r1, r3, #31
				value->uint = (unsigned char)value->uint;
     862:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
     866:	e7e8      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			} else if (length_mod == LENGTH_H) {
     868:	2a02      	cmp	r2, #2
     86a:	d1e5      	bne.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
				value->sint = (short)value->sint;
     86c:	b219      	sxth	r1, r3
     86e:	f343 33c0 	sbfx	r3, r3, #15, #1
     872:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
     876:	e7df      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
		} else if (specifier_cat == SPECIFIER_UINT) {
     878:	2b02      	cmp	r3, #2
     87a:	d124      	bne.n	8c6 <__z_interrupt_stack_SIZEOF+0x46>
			switch (length_mod) {
     87c:	1ed3      	subs	r3, r2, #3
     87e:	2b04      	cmp	r3, #4
     880:	d804      	bhi.n	88c <__z_interrupt_stack_SIZEOF+0xc>
     882:	e8df f003 	tbb	[pc, r3]
     886:	1018      	.short	0x1018
     888:	1810      	.short	0x1810
     88a:	18          	.byte	0x18
     88b:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     88c:	2a01      	cmp	r2, #1
				value->uint = va_arg(ap, unsigned int);
     88e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     892:	f04f 0100 	mov.w	r1, #0
     896:	d014      	beq.n	8c2 <__z_interrupt_stack_SIZEOF+0x42>
			} else if (length_mod == LENGTH_H) {
     898:	2a02      	cmp	r2, #2
				value->uint = va_arg(ap, unsigned int);
     89a:	e9cd 3110 	strd	r3, r1, [sp, #64]	; 0x40
			} else if (length_mod == LENGTH_H) {
     89e:	d1cc      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
				value->uint = (unsigned short)value->uint;
     8a0:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     8a2:	9310      	str	r3, [sp, #64]	; 0x40
     8a4:	e7c9      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
					(uint_value_type)va_arg(ap,
     8a6:	3407      	adds	r4, #7
     8a8:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     8ac:	e8f4 0102 	ldrd	r0, r1, [r4], #8
     8b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
			if (length_mod == LENGTH_HH) {
     8b4:	e7c1      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
					(uint_value_type)va_arg(ap, size_t);
     8b6:	f854 3b04 	ldr.w	r3, [r4], #4
     8ba:	9310      	str	r3, [sp, #64]	; 0x40
     8bc:	2300      	movs	r3, #0
     8be:	9311      	str	r3, [sp, #68]	; 0x44
			} else if (length_mod == LENGTH_H) {
     8c0:	e7bb      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
				value->uint = (unsigned char)value->uint;
     8c2:	b2db      	uxtb	r3, r3
     8c4:	e7cd      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
		} else if (specifier_cat == SPECIFIER_FP) {
     8c6:	2b04      	cmp	r3, #4
     8c8:	d108      	bne.n	8dc <__z_interrupt_stack_SIZEOF+0x5c>
					(sint_value_type)va_arg(ap, long long);
     8ca:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     8cc:	f024 0407 	bic.w	r4, r4, #7
     8d0:	e9d4 0100 	ldrd	r0, r1, [r4]
     8d4:	3408      	adds	r4, #8
     8d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     8da:	e7ae      	b.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     8dc:	2b03      	cmp	r3, #3
     8de:	d1ac      	bne.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
			value->ptr = va_arg(ap, void *);
     8e0:	f854 3b04 	ldr.w	r3, [r4], #4
     8e4:	e7dd      	b.n	8a2 <__z_interrupt_stack_SIZEOF+0x22>
		switch (conv->specifier) {
     8e6:	f89d b04b 	ldrb.w	fp, [sp, #75]	; 0x4b
     8ea:	f1bb 0f78 	cmp.w	fp, #120	; 0x78
     8ee:	d8b3      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     8f0:	f1bb 0f57 	cmp.w	fp, #87	; 0x57
     8f4:	d849      	bhi.n	98a <__z_interrupt_stack_SIZEOF+0x10a>
     8f6:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
     8fa:	f000 8091 	beq.w	a20 <__z_interrupt_stack_SIZEOF+0x1a0>
     8fe:	f1bb 0f24 	cmp.w	fp, #36	; 0x24
     902:	d9a9      	bls.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     904:	f1bb 0f41 	cmp.w	fp, #65	; 0x41
     908:	d003      	beq.n	912 <__z_interrupt_stack_SIZEOF+0x92>
     90a:	f1ab 0245 	sub.w	r2, fp, #69	; 0x45
     90e:	2a02      	cmp	r2, #2
     910:	d8a2      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
	} u = {
     912:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
	if ((u.u64 & SIGN_MASK) != 0U) {
     916:	2a00      	cmp	r2, #0
     918:	f2c0 8136 	blt.w	b88 <__z_interrupt_stack_SIZEOF+0x308>
	} else if (conv->flag_plus) {
     91c:	9b07      	ldr	r3, [sp, #28]
     91e:	071e      	lsls	r6, r3, #28
     920:	f100 8135 	bmi.w	b8e <__z_interrupt_stack_SIZEOF+0x30e>
	} else if (conv->flag_space) {
     924:	f3c3 1900 	ubfx	r9, r3, #4, #1
     928:	ea4f 1949 	mov.w	r9, r9, lsl #5
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     92c:	f3c2 500a 	ubfx	r0, r2, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
     930:	f3c2 0213 	ubfx	r2, r2, #0, #20
	bool is_subnormal = (expo == 0) && (fract != 0);
     934:	2800      	cmp	r0, #0
     936:	f040 812d 	bne.w	b94 <__z_interrupt_stack_SIZEOF+0x314>
     93a:	ea51 0602 	orrs.w	r6, r1, r2
     93e:	bf14      	ite	ne
     940:	2601      	movne	r6, #1
     942:	2600      	moveq	r6, #0
	fract <<= EXPONENT_BITS;
     944:	02d2      	lsls	r2, r2, #11
     946:	ea42 5251 	orr.w	r2, r2, r1, lsr #21
     94a:	02c9      	lsls	r1, r1, #11
		c = 'f';
     94c:	f1bb 0f46 	cmp.w	fp, #70	; 0x46
	if ((expo | fract) != 0) {
     950:	ea40 0e01 	orr.w	lr, r0, r1
     954:	ea42 7ce0 	orr.w	ip, r2, r0, asr #31
		c = 'f';
     958:	bf08      	it	eq
     95a:	f04f 0b66 	moveq.w	fp, #102	; 0x66
	if ((expo | fract) != 0) {
     95e:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
     962:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	if ((expo | fract) != 0) {
     966:	f000 8197 	beq.w	c98 <__z_interrupt_stack_SIZEOF+0x418>
		if (is_subnormal) {
     96a:	2e00      	cmp	r6, #0
     96c:	f040 8144 	bne.w	bf8 <__z_interrupt_stack_SIZEOF+0x378>
		fract |= BIT_63;
     970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     972:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
     976:	f2a0 38fe 	subw	r8, r0, #1022	; 0x3fe
		fract |= BIT_63;
     97a:	920d      	str	r2, [sp, #52]	; 0x34
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     97c:	2000      	movs	r0, #0
     97e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
     982:	4606      	mov	r6, r0
		fract *= 5U;
     984:	f04f 0c05 	mov.w	ip, #5
     988:	e150      	b.n	c2c <__z_interrupt_stack_SIZEOF+0x3ac>
		switch (conv->specifier) {
     98a:	f1ab 0158 	sub.w	r1, fp, #88	; 0x58
     98e:	2920      	cmp	r1, #32
     990:	f63f af62 	bhi.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     994:	a001      	add	r0, pc, #4	; (adr r0, 99c <__z_interrupt_stack_SIZEOF+0x11c>)
     996:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     99a:	bf00      	nop
     99c:	00000b27 	.word	0x00000b27
     9a0:	00000859 	.word	0x00000859
     9a4:	00000859 	.word	0x00000859
     9a8:	00000859 	.word	0x00000859
     9ac:	00000859 	.word	0x00000859
     9b0:	00000859 	.word	0x00000859
     9b4:	00000859 	.word	0x00000859
     9b8:	00000859 	.word	0x00000859
     9bc:	00000859 	.word	0x00000859
     9c0:	00000913 	.word	0x00000913
     9c4:	00000859 	.word	0x00000859
     9c8:	00000aab 	.word	0x00000aab
     9cc:	00000abf 	.word	0x00000abf
     9d0:	00000913 	.word	0x00000913
     9d4:	00000913 	.word	0x00000913
     9d8:	00000913 	.word	0x00000913
     9dc:	00000859 	.word	0x00000859
     9e0:	00000abf 	.word	0x00000abf
     9e4:	00000859 	.word	0x00000859
     9e8:	00000859 	.word	0x00000859
     9ec:	00000859 	.word	0x00000859
     9f0:	00000859 	.word	0x00000859
     9f4:	00000b61 	.word	0x00000b61
     9f8:	00000b27 	.word	0x00000b27
     9fc:	00000b2d 	.word	0x00000b2d
     a00:	00000859 	.word	0x00000859
     a04:	00000859 	.word	0x00000859
     a08:	00000a27 	.word	0x00000a27
     a0c:	00000859 	.word	0x00000859
     a10:	00000b27 	.word	0x00000b27
     a14:	00000859 	.word	0x00000859
     a18:	00000859 	.word	0x00000859
     a1c:	00000b27 	.word	0x00000b27
			OUTC('%');
     a20:	9903      	ldr	r1, [sp, #12]
     a22:	4658      	mov	r0, fp
     a24:	e4ea      	b.n	3fc <z_cbvprintf_impl+0x24>
			if (precision >= 0) {
     a26:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
     a28:	9e10      	ldr	r6, [sp, #64]	; 0x40
			if (precision >= 0) {
     a2a:	db3a      	blt.n	aa2 <__z_interrupt_stack_SIZEOF+0x222>
				len = strnlen(bps, precision);
     a2c:	4639      	mov	r1, r7
     a2e:	4630      	mov	r0, r6
     a30:	f006 f97c 	bl	6d2c <strnlen>
			bpe = bps + len;
     a34:	1837      	adds	r7, r6, r0
		if (bps == NULL) {
     a36:	2e00      	cmp	r6, #0
     a38:	f43f af0e 	beq.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
		char sign = 0;
     a3c:	f04f 0900 	mov.w	r9, #0
		if (conv->altform_0c) {
     a40:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     a44:	f013 0210 	ands.w	r2, r3, #16
     a48:	9205      	str	r2, [sp, #20]
     a4a:	f000 824c 	beq.w	ee6 <__z_interrupt_stack_SIZEOF+0x666>
			nj_len += 2U;
     a4e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     a50:	f013 0340 	ands.w	r3, r3, #64	; 0x40
		nj_len += conv->pad0_value;
     a54:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
		if (conv->pad_fp) {
     a58:	9308      	str	r3, [sp, #32]
			nj_len += conv->pad0_pre_exp;
     a5a:	bf18      	it	ne
     a5c:	9b14      	ldrne	r3, [sp, #80]	; 0x50
		nj_len += conv->pad0_value;
     a5e:	f8cd 801c 	str.w	r8, [sp, #28]
     a62:	4440      	add	r0, r8
			nj_len += conv->pad0_pre_exp;
     a64:	bf18      	it	ne
     a66:	18c0      	addne	r0, r0, r3
		if (width > 0) {
     a68:	9b04      	ldr	r3, [sp, #16]
     a6a:	2b00      	cmp	r3, #0
     a6c:	f340 8256 	ble.w	f1c <__z_interrupt_stack_SIZEOF+0x69c>
			if (!conv->flag_dash) {
     a70:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
			width -= (int)nj_len;
     a74:	1a1b      	subs	r3, r3, r0
     a76:	9304      	str	r3, [sp, #16]
			if (!conv->flag_dash) {
     a78:	0753      	lsls	r3, r2, #29
     a7a:	f3c2 0b80 	ubfx	fp, r2, #2, #1
     a7e:	f100 824d 	bmi.w	f1c <__z_interrupt_stack_SIZEOF+0x69c>
				if (conv->flag_zero) {
     a82:	0650      	lsls	r0, r2, #25
     a84:	f140 823d 	bpl.w	f02 <__z_interrupt_stack_SIZEOF+0x682>
					if (sign != 0) {
     a88:	f1b9 0f00 	cmp.w	r9, #0
     a8c:	d007      	beq.n	a9e <__z_interrupt_stack_SIZEOF+0x21e>
						OUTC(sign);
     a8e:	9903      	ldr	r1, [sp, #12]
     a90:	4648      	mov	r0, r9
     a92:	47d0      	blx	sl
     a94:	2800      	cmp	r0, #0
     a96:	f2c0 8231 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
     a9a:	3501      	adds	r5, #1
						sign = 0;
     a9c:	46d9      	mov	r9, fp
					pad = '0';
     a9e:	2230      	movs	r2, #48	; 0x30
     aa0:	e230      	b.n	f04 <__z_interrupt_stack_SIZEOF+0x684>
				len = strlen(bps);
     aa2:	4630      	mov	r0, r6
     aa4:	f006 f93b 	bl	6d1e <strlen>
     aa8:	e7c4      	b.n	a34 <__z_interrupt_stack_SIZEOF+0x1b4>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     aaa:	9b10      	ldr	r3, [sp, #64]	; 0x40
     aac:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		char sign = 0;
     ab0:	f04f 0900 	mov.w	r9, #0
			bpe = buf + 1;
     ab4:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
			bps = buf;
     ab8:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     aba:	2001      	movs	r0, #1
     abc:	e7c0      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			if (conv->flag_plus) {
     abe:	9b07      	ldr	r3, [sp, #28]
     ac0:	071a      	lsls	r2, r3, #28
			} else if (conv->flag_space) {
     ac2:	bf58      	it	pl
     ac4:	f3c3 1900 	ubfxpl	r9, r3, #4, #1
			sint = value->sint;
     ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
			} else if (conv->flag_space) {
     acc:	bf54      	ite	pl
     ace:	ea4f 1949 	movpl.w	r9, r9, lsl #5
				sign = '+';
     ad2:	f04f 092b 	movmi.w	r9, #43	; 0x2b
			if (sint < 0) {
     ad6:	2b00      	cmp	r3, #0
     ad8:	da06      	bge.n	ae8 <__z_interrupt_stack_SIZEOF+0x268>
				value->uint = (uint_value_type)-sint;
     ada:	4252      	negs	r2, r2
     adc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ae0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
				sign = '-';
     ae4:	f04f 092d 	mov.w	r9, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
     ae8:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     aec:	9300      	str	r3, [sp, #0]
     aee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
     af2:	ab17      	add	r3, sp, #92	; 0x5c
     af4:	aa12      	add	r2, sp, #72	; 0x48
     af6:	f005 ffeb 	bl	6ad0 <encode_uint>
     afa:	4606      	mov	r6, r0
			if (precision >= 0) {
     afc:	2f00      	cmp	r7, #0
     afe:	db0c      	blt.n	b1a <__z_interrupt_stack_SIZEOF+0x29a>
				conv->flag_zero = false;
     b00:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
				size_t len = bpe - bps;
     b04:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     b08:	1b9b      	subs	r3, r3, r6
				conv->flag_zero = false;
     b0a:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b0e:	429f      	cmp	r7, r3
				conv->flag_zero = false;
     b10:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
				if (len < (size_t)precision) {
     b14:	d901      	bls.n	b1a <__z_interrupt_stack_SIZEOF+0x29a>
					conv->pad0_value = precision - (int)len;
     b16:	1afb      	subs	r3, r7, r3
     b18:	9313      	str	r3, [sp, #76]	; 0x4c
		if (bps == NULL) {
     b1a:	2e00      	cmp	r6, #0
     b1c:	f43f ae9c 	beq.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     b20:	f10d 0775 	add.w	r7, sp, #117	; 0x75
     b24:	e056      	b.n	bd4 <__z_interrupt_stack_SIZEOF+0x354>
		switch (conv->specifier) {
     b26:	f04f 0900 	mov.w	r9, #0
     b2a:	e7dd      	b.n	ae8 <__z_interrupt_stack_SIZEOF+0x268>
			if (value->ptr != NULL) {
     b2c:	9810      	ldr	r0, [sp, #64]	; 0x40
     b2e:	2800      	cmp	r0, #0
     b30:	f000 81d4 	beq.w	edc <__z_interrupt_stack_SIZEOF+0x65c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b34:	f10d 0375 	add.w	r3, sp, #117	; 0x75
     b38:	9300      	str	r3, [sp, #0]
     b3a:	aa12      	add	r2, sp, #72	; 0x48
     b3c:	ab17      	add	r3, sp, #92	; 0x5c
     b3e:	2100      	movs	r1, #0
     b40:	f005 ffc6 	bl	6ad0 <encode_uint>
				conv->altform_0c = true;
     b44:	f8bd 304a 	ldrh.w	r3, [sp, #74]	; 0x4a
     b48:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     b4c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     b50:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b54:	4606      	mov	r6, r0
				conv->altform_0c = true;
     b56:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
		char sign = 0;
     b5a:	f04f 0900 	mov.w	r9, #0
				goto prec_int_pad0;
     b5e:	e7cd      	b.n	afc <__z_interrupt_stack_SIZEOF+0x27c>
				store_count(conv, value->ptr, count);
     b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
	switch ((enum length_mod_enum)conv->length_mod) {
     b62:	2a07      	cmp	r2, #7
     b64:	f63f ae78 	bhi.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
     b68:	e8df f002 	tbb	[pc, r2]
     b6c:	0c06040c 	.word	0x0c06040c
     b70:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
     b74:	701d      	strb	r5, [r3, #0]
		break;
     b76:	e66f      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(short *)dp = (short)count;
     b78:	801d      	strh	r5, [r3, #0]
		break;
     b7a:	e66d      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(intmax_t *)dp = (intmax_t)count;
     b7c:	17ea      	asrs	r2, r5, #31
     b7e:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     b82:	e669      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     b84:	601d      	str	r5, [r3, #0]
		break;
     b86:	e667      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
		*sign = '-';
     b88:	f04f 092d 	mov.w	r9, #45	; 0x2d
     b8c:	e6ce      	b.n	92c <__z_interrupt_stack_SIZEOF+0xac>
		*sign = '+';
     b8e:	f04f 092b 	mov.w	r9, #43	; 0x2b
     b92:	e6cb      	b.n	92c <__z_interrupt_stack_SIZEOF+0xac>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
     b94:	f240 76ff 	movw	r6, #2047	; 0x7ff
     b98:	42b0      	cmp	r0, r6
     b9a:	d12a      	bne.n	bf2 <__z_interrupt_stack_SIZEOF+0x372>
		if (fract == 0) {
     b9c:	430a      	orrs	r2, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
     b9e:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
     ba2:	d11e      	bne.n	be2 <__z_interrupt_stack_SIZEOF+0x362>
			if (isupper((unsigned char)c)) {
     ba4:	2b1a      	cmp	r3, #26
     ba6:	bf35      	itete	cc
     ba8:	2349      	movcc	r3, #73	; 0x49
     baa:	2369      	movcs	r3, #105	; 0x69
     bac:	214e      	movcc	r1, #78	; 0x4e
     bae:	216e      	movcs	r1, #110	; 0x6e
     bb0:	bf34      	ite	cc
     bb2:	2246      	movcc	r2, #70	; 0x46
     bb4:	2266      	movcs	r2, #102	; 0x66
				*buf++ = 'I';
     bb6:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		conv->flag_zero = false;
     bba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
				*buf++ = 'N';
     bbe:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
		conv->flag_zero = false;
     bc2:	f36f 1386 	bfc	r3, #6, #1
				*buf++ = 'F';
     bc6:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
		conv->flag_zero = false;
     bca:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
		*bpe = buf;
     bce:	f10d 075f 	add.w	r7, sp, #95	; 0x5f
				bps = encode_float(value->dbl, conv, precision,
     bd2:	ae17      	add	r6, sp, #92	; 0x5c
		size_t nj_len = (bpe - bps);
     bd4:	1bb8      	subs	r0, r7, r6
		if (sign != 0) {
     bd6:	f1b9 0f00 	cmp.w	r9, #0
     bda:	f43f af31 	beq.w	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			nj_len += 1U;
     bde:	3001      	adds	r0, #1
     be0:	e72e      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
			if (isupper((unsigned char)c)) {
     be2:	2b19      	cmp	r3, #25
     be4:	bf8b      	itete	hi
     be6:	236e      	movhi	r3, #110	; 0x6e
     be8:	234e      	movls	r3, #78	; 0x4e
     bea:	2161      	movhi	r1, #97	; 0x61
     bec:	2141      	movls	r1, #65	; 0x41
     bee:	461a      	mov	r2, r3
     bf0:	e7e1      	b.n	bb6 <__z_interrupt_stack_SIZEOF+0x336>
	bool is_subnormal = (expo == 0) && (fract != 0);
     bf2:	2600      	movs	r6, #0
     bf4:	e6a6      	b.n	944 <__z_interrupt_stack_SIZEOF+0xc4>
				expo--;
     bf6:	3801      	subs	r0, #1
			while (((fract <<= 1) & BIT_63) == 0) {
     bf8:	1849      	adds	r1, r1, r1
     bfa:	4152      	adcs	r2, r2
     bfc:	2a00      	cmp	r2, #0
     bfe:	dafa      	bge.n	bf6 <__z_interrupt_stack_SIZEOF+0x376>
     c00:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
     c04:	e6b4      	b.n	970 <__z_interrupt_stack_SIZEOF+0xf0>
			fract >>= 1;
     c06:	0849      	lsrs	r1, r1, #1
     c08:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
     c0c:	0852      	lsrs	r2, r2, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     c0e:	f1b2 3f33 	cmp.w	r2, #858993459	; 0x33333333
     c12:	4640      	mov	r0, r8
			expo++;
     c14:	f108 0801 	add.w	r8, r8, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
     c18:	d2f5      	bcs.n	c06 <__z_interrupt_stack_SIZEOF+0x386>
		fract *= 5U;
     c1a:	fb0c fe02 	mul.w	lr, ip, r2
     c1e:	fba1 120c 	umull	r1, r2, r1, ip
		expo++;
     c22:	f100 0802 	add.w	r8, r0, #2
		fract *= 5U;
     c26:	4472      	add	r2, lr
		decexp--;
     c28:	3e01      	subs	r6, #1
     c2a:	2001      	movs	r0, #1
	while (expo < -2) {
     c2c:	f118 0f02 	cmn.w	r8, #2
     c30:	dbe9      	blt.n	c06 <__z_interrupt_stack_SIZEOF+0x386>
     c32:	b108      	cbz	r0, c38 <__z_interrupt_stack_SIZEOF+0x3b8>
     c34:	e9cd 120c 	strd	r1, r2, [sp, #48]	; 0x30
	while (expo > 0) {
     c38:	f1b8 0f00 	cmp.w	r8, #0
		fract += 2;
     c3c:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
	while (expo > 0) {
     c40:	dc2d      	bgt.n	c9e <__z_interrupt_stack_SIZEOF+0x41e>
	fract >>= (4 - expo);
     c42:	f1c8 0004 	rsb	r0, r8, #4
     c46:	f1a0 0c20 	sub.w	ip, r0, #32
     c4a:	f108 081c 	add.w	r8, r8, #28
     c4e:	40c2      	lsrs	r2, r0
     c50:	fa01 f808 	lsl.w	r8, r1, r8
     c54:	fa21 fc0c 	lsr.w	ip, r1, ip
     c58:	40c1      	lsrs	r1, r0
	if ((c == 'g') || (c == 'G')) {
     c5a:	f00b 00df 	and.w	r0, fp, #223	; 0xdf
	fract >>= (4 - expo);
     c5e:	ea42 0208 	orr.w	r2, r2, r8
	if ((c == 'g') || (c == 'G')) {
     c62:	2847      	cmp	r0, #71	; 0x47
	fract >>= (4 - expo);
     c64:	ea42 020c 	orr.w	r2, r2, ip
	if ((c == 'g') || (c == 'G')) {
     c68:	d13a      	bne.n	ce0 <__z_interrupt_stack_SIZEOF+0x460>
		if (decexp < (-4 + 1) || decexp > precision) {
     c6a:	1cf0      	adds	r0, r6, #3
     c6c:	db01      	blt.n	c72 <__z_interrupt_stack_SIZEOF+0x3f2>
     c6e:	42b7      	cmp	r7, r6
     c70:	da2b      	bge.n	cca <__z_interrupt_stack_SIZEOF+0x44a>
			c += 'e' - 'g';  /* e or E */
     c72:	f1ab 0302 	sub.w	r3, fp, #2
			if (precision > 0) {
     c76:	2f00      	cmp	r7, #0
			c += 'e' - 'g';  /* e or E */
     c78:	fa5f fb83 	uxtb.w	fp, r3
			if (precision > 0) {
     c7c:	dd7d      	ble.n	d7a <__z_interrupt_stack_SIZEOF+0x4fa>
		if (!conv->flag_hash && (precision > 0)) {
     c7e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
     c82:	0683      	lsls	r3, r0, #26
				precision--;
     c84:	f107 37ff 	add.w	r7, r7, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
     c88:	d477      	bmi.n	d7a <__z_interrupt_stack_SIZEOF+0x4fa>
     c8a:	1e3b      	subs	r3, r7, #0
     c8c:	bf18      	it	ne
     c8e:	2301      	movne	r3, #1
	bool prune_zero = false;
     c90:	9305      	str	r3, [sp, #20]
		decimals = precision + 1;
     c92:	f107 0801 	add.w	r8, r7, #1
     c96:	e02d      	b.n	cf4 <__z_interrupt_stack_SIZEOF+0x474>
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
     c98:	f04f 0800 	mov.w	r8, #0
     c9c:	e66e      	b.n	97c <__z_interrupt_stack_SIZEOF+0xfc>
		fract += 2;
     c9e:	3202      	adds	r2, #2
     ca0:	f141 0100 	adc.w	r1, r1, #0
		_ldiv5(&fract);
     ca4:	a80c      	add	r0, sp, #48	; 0x30
		fract += 2;
     ca6:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		_ldiv5(&fract);
     caa:	f005 fee2 	bl	6a72 <_ldiv5>
		expo--;
     cae:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
     cb2:	f108 38ff 	add.w	r8, r8, #4294967295
		decexp++;
     cb6:	3601      	adds	r6, #1
			fract <<= 1;
     cb8:	1892      	adds	r2, r2, r2
     cba:	4149      	adcs	r1, r1
		} while (!(fract & BIT_63));
     cbc:	2900      	cmp	r1, #0
			expo--;
     cbe:	f108 38ff 	add.w	r8, r8, #4294967295
		} while (!(fract & BIT_63));
     cc2:	daf9      	bge.n	cb8 <__z_interrupt_stack_SIZEOF+0x438>
     cc4:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
     cc8:	e7b6      	b.n	c38 <__z_interrupt_stack_SIZEOF+0x3b8>
		if (!conv->flag_hash && (precision > 0)) {
     cca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
     cce:	0698      	lsls	r0, r3, #26
			precision -= decexp;
     cd0:	eba7 0706 	sub.w	r7, r7, r6
		if (!conv->flag_hash && (precision > 0)) {
     cd4:	d44f      	bmi.n	d76 <__z_interrupt_stack_SIZEOF+0x4f6>
     cd6:	1e3b      	subs	r3, r7, #0
     cd8:	bf18      	it	ne
     cda:	2301      	movne	r3, #1
	bool prune_zero = false;
     cdc:	9305      	str	r3, [sp, #20]
     cde:	e004      	b.n	cea <__z_interrupt_stack_SIZEOF+0x46a>
     ce0:	2300      	movs	r3, #0
	if (c == 'f') {
     ce2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
	bool prune_zero = false;
     ce6:	9305      	str	r3, [sp, #20]
	if (c == 'f') {
     ce8:	d1d3      	bne.n	c92 <__z_interrupt_stack_SIZEOF+0x412>
		if (decimals < 0) {
     cea:	eb17 0806 	adds.w	r8, r7, r6
     cee:	f04f 0b66 	mov.w	fp, #102	; 0x66
     cf2:	d444      	bmi.n	d7e <__z_interrupt_stack_SIZEOF+0x4fe>
	if (decimals > 16) {
     cf4:	f1b8 0f10 	cmp.w	r8, #16
     cf8:	bfa8      	it	ge
     cfa:	f04f 0810 	movge.w	r8, #16
	uint64_t round = BIT64(59); /* 0.5 */
     cfe:	ed9f 7bb2 	vldr	d7, [pc, #712]	; fc8 <__z_interrupt_stack_SIZEOF+0x748>
     d02:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
     d06:	2010      	movs	r0, #16
     d08:	900b      	str	r0, [sp, #44]	; 0x2c
	*v >>= 1;
     d0a:	e9dd 030e 	ldrd	r0, r3, [sp, #56]	; 0x38
	while (decimals--) {
     d0e:	f1b8 0f00 	cmp.w	r8, #0
     d12:	d137      	bne.n	d84 <__z_interrupt_stack_SIZEOF+0x504>
	fract += round;
     d14:	1812      	adds	r2, r2, r0
     d16:	eb41 0103 	adc.w	r1, r1, r3
	if (fract >= BIT64(60)) {
     d1a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
     d1e:	d241      	bcs.n	da4 <__z_interrupt_stack_SIZEOF+0x524>
	fract += round;
     d20:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		if (conv->flag_hash || (precision > 0)) {
     d24:	9b07      	ldr	r3, [sp, #28]
	if (c == 'f') {
     d26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
		if (conv->flag_hash || (precision > 0)) {
     d2a:	f003 0220 	and.w	r2, r3, #32
	if (c == 'f') {
     d2e:	f040 80b4 	bne.w	e9a <__z_interrupt_stack_SIZEOF+0x61a>
		if (decexp > 0) {
     d32:	2e00      	cmp	r6, #0
     d34:	dc41      	bgt.n	dba <__z_interrupt_stack_SIZEOF+0x53a>
			*buf++ = '0';
     d36:	2130      	movs	r1, #48	; 0x30
     d38:	f88d 105c 	strb.w	r1, [sp, #92]	; 0x5c
		if (conv->flag_hash || (precision > 0)) {
     d3c:	2a00      	cmp	r2, #0
     d3e:	d165      	bne.n	e0c <__z_interrupt_stack_SIZEOF+0x58c>
     d40:	2f00      	cmp	r7, #0
     d42:	f340 81b2 	ble.w	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
			*buf++ = '.';
     d46:	222e      	movs	r2, #46	; 0x2e
     d48:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
     d4c:	b186      	cbz	r6, d70 <__z_interrupt_stack_SIZEOF+0x4f0>
			conv->pad0_value = -decexp;
     d4e:	4272      	negs	r2, r6
     d50:	42ba      	cmp	r2, r7
     d52:	bfa8      	it	ge
     d54:	463a      	movge	r2, r7
			conv->pad_postdp = (conv->pad0_value > 0);
     d56:	f89d 104a 	ldrb.w	r1, [sp, #74]	; 0x4a
     d5a:	9213      	str	r2, [sp, #76]	; 0x4c
     d5c:	2a00      	cmp	r2, #0
			precision -= conv->pad0_value;
     d5e:	eba7 0702 	sub.w	r7, r7, r2
			conv->pad_postdp = (conv->pad0_value > 0);
     d62:	bfd4      	ite	le
     d64:	2200      	movle	r2, #0
     d66:	2201      	movgt	r2, #1
     d68:	f362 1145 	bfi	r1, r2, #5, #1
     d6c:	f88d 104a 	strb.w	r1, [sp, #74]	; 0x4a
			*buf++ = '.';
     d70:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
     d74:	e039      	b.n	dea <__z_interrupt_stack_SIZEOF+0x56a>
	bool prune_zero = false;
     d76:	2300      	movs	r3, #0
     d78:	e7b0      	b.n	cdc <__z_interrupt_stack_SIZEOF+0x45c>
     d7a:	2300      	movs	r3, #0
     d7c:	e788      	b.n	c90 <__z_interrupt_stack_SIZEOF+0x410>
			decimals = 0;
     d7e:	f04f 0800 	mov.w	r8, #0
     d82:	e7bc      	b.n	cfe <__z_interrupt_stack_SIZEOF+0x47e>
	*v >>= 1;
     d84:	0840      	lsrs	r0, r0, #1
     d86:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
     d8a:	085b      	lsrs	r3, r3, #1
     d8c:	e9cd 030e 	strd	r0, r3, [sp, #56]	; 0x38
	_ldiv5(v);
     d90:	a80e      	add	r0, sp, #56	; 0x38
     d92:	e9cd 2108 	strd	r2, r1, [sp, #32]
     d96:	f108 38ff 	add.w	r8, r8, #4294967295
     d9a:	f005 fe6a 	bl	6a72 <_ldiv5>
     d9e:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
}
     da2:	e7b2      	b.n	d0a <__z_interrupt_stack_SIZEOF+0x48a>
	*v >>= 1;
     da4:	0852      	lsrs	r2, r2, #1
     da6:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
	_ldiv5(v);
     daa:	a80c      	add	r0, sp, #48	; 0x30
	*v >>= 1;
     dac:	0849      	lsrs	r1, r1, #1
     dae:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
		decexp++;
     db2:	3601      	adds	r6, #1
	_ldiv5(v);
     db4:	f005 fe5d 	bl	6a72 <_ldiv5>
		decexp++;
     db8:	e7b4      	b.n	d24 <__z_interrupt_stack_SIZEOF+0x4a4>
	char *buf = bps;
     dba:	f10d 085c 	add.w	r8, sp, #92	; 0x5c
			while (decexp > 0 && digit_count > 0) {
     dbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
     dc0:	2900      	cmp	r1, #0
     dc2:	dd09      	ble.n	dd8 <__z_interrupt_stack_SIZEOF+0x558>
				*buf++ = _get_digit(&fract, &digit_count);
     dc4:	a90b      	add	r1, sp, #44	; 0x2c
     dc6:	a80c      	add	r0, sp, #48	; 0x30
     dc8:	9207      	str	r2, [sp, #28]
     dca:	f005 fe6a 	bl	6aa2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
     dce:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
     dd0:	f808 0b01 	strb.w	r0, [r8], #1
			while (decexp > 0 && digit_count > 0) {
     dd4:	9a07      	ldr	r2, [sp, #28]
     dd6:	d1f2      	bne.n	dbe <__z_interrupt_stack_SIZEOF+0x53e>
			conv->pad0_value = decexp;
     dd8:	9613      	str	r6, [sp, #76]	; 0x4c
		if (conv->flag_hash || (precision > 0)) {
     dda:	b99a      	cbnz	r2, e04 <__z_interrupt_stack_SIZEOF+0x584>
     ddc:	2f00      	cmp	r7, #0
     dde:	f340 8162 	ble.w	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
			*buf++ = '.';
     de2:	212e      	movs	r1, #46	; 0x2e
     de4:	f808 1b01 	strb.w	r1, [r8], #1
     de8:	2600      	movs	r6, #0
	while (precision > 0 && digit_count > 0) {
     dea:	2f00      	cmp	r7, #0
     dec:	dd17      	ble.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
     dee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
     df0:	2a00      	cmp	r2, #0
     df2:	dd14      	ble.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
		*buf++ = _get_digit(&fract, &digit_count);
     df4:	a90b      	add	r1, sp, #44	; 0x2c
     df6:	a80c      	add	r0, sp, #48	; 0x30
     df8:	f005 fe53 	bl	6aa2 <_get_digit>
		precision--;
     dfc:	3f01      	subs	r7, #1
		*buf++ = _get_digit(&fract, &digit_count);
     dfe:	f808 0b01 	strb.w	r0, [r8], #1
		precision--;
     e02:	e7f2      	b.n	dea <__z_interrupt_stack_SIZEOF+0x56a>
			*buf++ = '.';
     e04:	222e      	movs	r2, #46	; 0x2e
     e06:	f808 2b01 	strb.w	r2, [r8], #1
     e0a:	e7ed      	b.n	de8 <__z_interrupt_stack_SIZEOF+0x568>
     e0c:	222e      	movs	r2, #46	; 0x2e
     e0e:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
		if (decexp < 0 && precision > 0) {
     e12:	2e00      	cmp	r6, #0
     e14:	d0ac      	beq.n	d70 <__z_interrupt_stack_SIZEOF+0x4f0>
     e16:	2f00      	cmp	r7, #0
     e18:	dc99      	bgt.n	d4e <__z_interrupt_stack_SIZEOF+0x4ce>
			*buf++ = '.';
     e1a:	f10d 085e 	add.w	r8, sp, #94	; 0x5e
	if (prune_zero) {
     e1e:	9b05      	ldr	r3, [sp, #20]
     e20:	2b00      	cmp	r3, #0
     e22:	d14e      	bne.n	ec2 <__z_interrupt_stack_SIZEOF+0x642>
	conv->pad0_pre_exp = precision;
     e24:	9714      	str	r7, [sp, #80]	; 0x50
     e26:	4647      	mov	r7, r8
	if ((c == 'e') || (c == 'E')) {
     e28:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
     e2c:	2a45      	cmp	r2, #69	; 0x45
     e2e:	d123      	bne.n	e78 <__z_interrupt_stack_SIZEOF+0x5f8>
		if (decexp < 0) {
     e30:	2e00      	cmp	r6, #0
			decexp = -decexp;
     e32:	bfba      	itte	lt
     e34:	4276      	neglt	r6, r6
			*buf++ = '-';
     e36:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
     e38:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
     e3a:	2e63      	cmp	r6, #99	; 0x63
			*buf++ = (decexp / 100) + '0';
     e3c:	bfc8      	it	gt
     e3e:	2164      	movgt	r1, #100	; 0x64
     e40:	707b      	strb	r3, [r7, #1]
			*buf++ = '-';
     e42:	bfd1      	iteee	le
     e44:	1cba      	addle	r2, r7, #2
			*buf++ = (decexp / 100) + '0';
     e46:	fbb6 f3f1 	udivgt	r3, r6, r1
     e4a:	1cfa      	addgt	r2, r7, #3
     e4c:	f103 0030 	addgt.w	r0, r3, #48	; 0x30
			decexp %= 100;
     e50:	bfc8      	it	gt
     e52:	fb01 6613 	mlsgt	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
     e56:	f04f 010a 	mov.w	r1, #10
			*buf++ = (decexp / 100) + '0';
     e5a:	bfc8      	it	gt
     e5c:	70b8      	strbgt	r0, [r7, #2]
		*buf++ = c;
     e5e:	f887 b000 	strb.w	fp, [r7]
		*buf++ = (decexp / 10) + '0';
     e62:	fbb6 f3f1 	udiv	r3, r6, r1
     e66:	4617      	mov	r7, r2
     e68:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
     e6c:	fb01 6313 	mls	r3, r1, r3, r6
     e70:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
     e72:	f807 0b02 	strb.w	r0, [r7], #2
		*buf++ = (decexp % 10) + '0';
     e76:	7053      	strb	r3, [r2, #1]
		|| (conv->pad0_pre_exp > 0);
     e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     e7a:	2b00      	cmp	r3, #0
     e7c:	dc2c      	bgt.n	ed8 <__z_interrupt_stack_SIZEOF+0x658>
     e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
     e80:	2b00      	cmp	r3, #0
     e82:	bfd4      	ite	le
     e84:	2300      	movle	r3, #0
     e86:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
     e88:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
     e8c:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
     e90:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
     e92:	f88d 204a 	strb.w	r2, [sp, #74]	; 0x4a
	*buf = 0;
     e96:	703b      	strb	r3, [r7, #0]
	return bps;
     e98:	e69b      	b.n	bd2 <__z_interrupt_stack_SIZEOF+0x352>
		*buf = _get_digit(&fract, &digit_count);
     e9a:	a90b      	add	r1, sp, #44	; 0x2c
     e9c:	a80c      	add	r0, sp, #48	; 0x30
     e9e:	9207      	str	r2, [sp, #28]
     ea0:	f005 fdff 	bl	6aa2 <_get_digit>
		if (*buf++ != '0') {
     ea4:	9a07      	ldr	r2, [sp, #28]
		*buf = _get_digit(&fract, &digit_count);
     ea6:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
		if (*buf++ != '0') {
     eaa:	2830      	cmp	r0, #48	; 0x30
			decexp--;
     eac:	bf18      	it	ne
     eae:	f106 36ff 	addne.w	r6, r6, #4294967295
		if (conv->flag_hash || (precision > 0)) {
     eb2:	b912      	cbnz	r2, eba <__z_interrupt_stack_SIZEOF+0x63a>
     eb4:	2f00      	cmp	r7, #0
     eb6:	f340 80f8 	ble.w	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
			*buf++ = '.';
     eba:	222e      	movs	r2, #46	; 0x2e
     ebc:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
     ec0:	e756      	b.n	d70 <__z_interrupt_stack_SIZEOF+0x4f0>
		while (*--buf == '0') {
     ec2:	4647      	mov	r7, r8
     ec4:	f108 38ff 	add.w	r8, r8, #4294967295
     ec8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
     ecc:	2a30      	cmp	r2, #48	; 0x30
     ece:	d0f8      	beq.n	ec2 <__z_interrupt_stack_SIZEOF+0x642>
     ed0:	2a2e      	cmp	r2, #46	; 0x2e
     ed2:	bf08      	it	eq
     ed4:	4647      	moveq	r7, r8
     ed6:	e7a7      	b.n	e28 <__z_interrupt_stack_SIZEOF+0x5a8>
		|| (conv->pad0_pre_exp > 0);
     ed8:	2301      	movs	r3, #1
     eda:	e7d5      	b.n	e88 <__z_interrupt_stack_SIZEOF+0x608>
			bpe = bps + 5;
     edc:	4f3c      	ldr	r7, [pc, #240]	; (fd0 <__z_interrupt_stack_SIZEOF+0x750>)
		char sign = 0;
     ede:	4681      	mov	r9, r0
			bps = "(nil)";
     ee0:	1f7e      	subs	r6, r7, #5
		size_t nj_len = (bpe - bps);
     ee2:	2005      	movs	r0, #5
     ee4:	e5ac      	b.n	a40 <__z_interrupt_stack_SIZEOF+0x1c0>
		} else if (conv->altform_0) {
     ee6:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     ee8:	bf48      	it	mi
     eea:	3001      	addmi	r0, #1
     eec:	e5b0      	b.n	a50 <__z_interrupt_stack_SIZEOF+0x1d0>
					OUTC(pad);
     eee:	4610      	mov	r0, r2
     ef0:	9209      	str	r2, [sp, #36]	; 0x24
     ef2:	9903      	ldr	r1, [sp, #12]
     ef4:	47d0      	blx	sl
     ef6:	2800      	cmp	r0, #0
     ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
     efa:	da05      	bge.n	f08 <__z_interrupt_stack_SIZEOF+0x688>
#undef OUTS
#undef OUTC
}
     efc:	b01f      	add	sp, #124	; 0x7c
     efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     f02:	2220      	movs	r2, #32
					pad = '0';
     f04:	f8dd b010 	ldr.w	fp, [sp, #16]
				while (width-- > 0) {
     f08:	4659      	mov	r1, fp
     f0a:	2900      	cmp	r1, #0
     f0c:	f10b 3bff 	add.w	fp, fp, #4294967295
     f10:	dced      	bgt.n	eee <__z_interrupt_stack_SIZEOF+0x66e>
     f12:	9b04      	ldr	r3, [sp, #16]
     f14:	f8cd b010 	str.w	fp, [sp, #16]
     f18:	442b      	add	r3, r5
     f1a:	1a5d      	subs	r5, r3, r1
		if (sign != 0) {
     f1c:	f1b9 0f00 	cmp.w	r9, #0
     f20:	d005      	beq.n	f2e <__z_interrupt_stack_SIZEOF+0x6ae>
			OUTC(sign);
     f22:	9903      	ldr	r1, [sp, #12]
     f24:	4648      	mov	r0, r9
     f26:	47d0      	blx	sl
     f28:	2800      	cmp	r0, #0
     f2a:	dbe7      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
     f2c:	3501      	adds	r5, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
     f2e:	9b08      	ldr	r3, [sp, #32]
     f30:	2b00      	cmp	r3, #0
     f32:	d07d      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
			if (conv->specifier_a) {
     f34:	f99d 3049 	ldrsb.w	r3, [sp, #73]	; 0x49
     f38:	2b00      	cmp	r3, #0
     f3a:	db28      	blt.n	f8e <__z_interrupt_stack_SIZEOF+0x70e>
     f3c:	46b3      	mov	fp, r6
				while (isdigit((unsigned char)*cp)) {
     f3e:	f89b 0000 	ldrb.w	r0, [fp]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     f46:	2b09      	cmp	r3, #9
     f48:	46d9      	mov	r9, fp
     f4a:	f10b 0b01 	add.w	fp, fp, #1
     f4e:	d946      	bls.n	fde <__z_interrupt_stack_SIZEOF+0x75e>
				if (!conv->pad_postdp) {
     f50:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
     f54:	1bae      	subs	r6, r5, r6
     f56:	0699      	lsls	r1, r3, #26
     f58:	444e      	add	r6, r9
     f5a:	d407      	bmi.n	f6c <__z_interrupt_stack_SIZEOF+0x6ec>
					while (pad_len-- > 0) {
     f5c:	4642      	mov	r2, r8
     f5e:	2a00      	cmp	r2, #0
     f60:	f108 38ff 	add.w	r8, r8, #4294967295
     f64:	dc40      	bgt.n	fe8 <__z_interrupt_stack_SIZEOF+0x768>
     f66:	9b07      	ldr	r3, [sp, #28]
     f68:	4433      	add	r3, r6
     f6a:	1a9e      	subs	r6, r3, r2
				if (*cp == '.') {
     f6c:	f899 0000 	ldrb.w	r0, [r9]
     f70:	282e      	cmp	r0, #46	; 0x2e
     f72:	d10a      	bne.n	f8a <__z_interrupt_stack_SIZEOF+0x70a>
					OUTC(*cp++);
     f74:	9903      	ldr	r1, [sp, #12]
     f76:	47d0      	blx	sl
						OUTC('0');
     f78:	2800      	cmp	r0, #0
     f7a:	dbbf      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
					while (pad_len-- > 0) {
     f7c:	f1b8 0f00 	cmp.w	r8, #0
						OUTC('0');
     f80:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
     f84:	dc36      	bgt.n	ff4 <__z_interrupt_stack_SIZEOF+0x774>
					OUTC(*cp++);
     f86:	f109 0901 	add.w	r9, r9, #1
			if (conv->specifier_a) {
     f8a:	464d      	mov	r5, r9
     f8c:	e03d      	b.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
     f8e:	46b1      	mov	r9, r6
				while (*cp != 'p') {
     f90:	f899 0000 	ldrb.w	r0, [r9]
     f94:	2870      	cmp	r0, #112	; 0x70
     f96:	46c8      	mov	r8, r9
     f98:	f109 0901 	add.w	r9, r9, #1
     f9c:	d11a      	bne.n	fd4 <__z_interrupt_stack_SIZEOF+0x754>
     f9e:	1bae      	subs	r6, r5, r6
     fa0:	9d14      	ldr	r5, [sp, #80]	; 0x50
     fa2:	4446      	add	r6, r8
			while (pad_len-- > 0) {
     fa4:	4435      	add	r5, r6
     fa6:	1bab      	subs	r3, r5, r6
     fa8:	2b00      	cmp	r3, #0
     faa:	dc39      	bgt.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			OUTS(cp, bpe);
     fac:	9903      	ldr	r1, [sp, #12]
     fae:	463b      	mov	r3, r7
     fb0:	4642      	mov	r2, r8
     fb2:	4650      	mov	r0, sl
     fb4:	f005 fdd2 	bl	6b5c <outs>
     fb8:	2800      	cmp	r0, #0
     fba:	db9f      	blt.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
     fbc:	4430      	add	r0, r6
     fbe:	9e04      	ldr	r6, [sp, #16]
			while (pad_len-- > 0) {
     fc0:	4605      	mov	r5, r0
     fc2:	4406      	add	r6, r0
     fc4:	e06a      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
     fc6:	bf00      	nop
     fc8:	00000000 	.word	0x00000000
     fcc:	08000000 	.word	0x08000000
     fd0:	00007fdc 	.word	0x00007fdc
					OUTC(*cp++);
     fd4:	9903      	ldr	r1, [sp, #12]
     fd6:	47d0      	blx	sl
     fd8:	2800      	cmp	r0, #0
     fda:	dad9      	bge.n	f90 <__z_interrupt_stack_SIZEOF+0x710>
     fdc:	e78e      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
					OUTC(*cp++);
     fde:	9903      	ldr	r1, [sp, #12]
     fe0:	47d0      	blx	sl
     fe2:	2800      	cmp	r0, #0
     fe4:	daab      	bge.n	f3e <__z_interrupt_stack_SIZEOF+0x6be>
     fe6:	e789      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
						OUTC('0');
     fe8:	9903      	ldr	r1, [sp, #12]
     fea:	2030      	movs	r0, #48	; 0x30
     fec:	47d0      	blx	sl
     fee:	2800      	cmp	r0, #0
     ff0:	dab4      	bge.n	f5c <__z_interrupt_stack_SIZEOF+0x6dc>
     ff2:	e783      	b.n	efc <__z_interrupt_stack_SIZEOF+0x67c>
						OUTC('0');
     ff4:	9903      	ldr	r1, [sp, #12]
     ff6:	2030      	movs	r0, #48	; 0x30
     ff8:	47d0      	blx	sl
     ffa:	f108 38ff 	add.w	r8, r8, #4294967295
     ffe:	e7bb      	b.n	f78 <__z_interrupt_stack_SIZEOF+0x6f8>
					OUTC(*cp++);
    1000:	9903      	ldr	r1, [sp, #12]
    1002:	47d0      	blx	sl
    1004:	2800      	cmp	r0, #0
    1006:	f6ff af79 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
				while (isdigit((unsigned char)*cp)) {
    100a:	7828      	ldrb	r0, [r5, #0]
    100c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    1010:	2b09      	cmp	r3, #9
    1012:	46a8      	mov	r8, r5
    1014:	f105 0501 	add.w	r5, r5, #1
    1018:	d9f2      	bls.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
    101a:	eba6 0609 	sub.w	r6, r6, r9
    101e:	e7bf      	b.n	fa0 <__z_interrupt_stack_SIZEOF+0x720>
				OUTC('0');
    1020:	9903      	ldr	r1, [sp, #12]
    1022:	2030      	movs	r0, #48	; 0x30
    1024:	47d0      	blx	sl
    1026:	2800      	cmp	r0, #0
    1028:	f6ff af68 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    102c:	3601      	adds	r6, #1
    102e:	e7ba      	b.n	fa6 <__z_interrupt_stack_SIZEOF+0x726>
			if (conv->altform_0c | conv->altform_0) {
    1030:	f89d 304a 	ldrb.w	r3, [sp, #74]	; 0x4a
    1034:	06da      	lsls	r2, r3, #27
    1036:	d401      	bmi.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
    1038:	071b      	lsls	r3, r3, #28
    103a:	d506      	bpl.n	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
				OUTC('0');
    103c:	9903      	ldr	r1, [sp, #12]
    103e:	2030      	movs	r0, #48	; 0x30
    1040:	47d0      	blx	sl
    1042:	2800      	cmp	r0, #0
    1044:	f6ff af5a 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    1048:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    104a:	9b05      	ldr	r3, [sp, #20]
    104c:	b13b      	cbz	r3, 105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
				OUTC(conv->specifier);
    104e:	9903      	ldr	r1, [sp, #12]
    1050:	f89d 004b 	ldrb.w	r0, [sp, #75]	; 0x4b
    1054:	47d0      	blx	sl
    1056:	2800      	cmp	r0, #0
    1058:	f6ff af50 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    105c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    105e:	44a8      	add	r8, r5
    1060:	e006      	b.n	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
				OUTC('0');
    1062:	9903      	ldr	r1, [sp, #12]
    1064:	2030      	movs	r0, #48	; 0x30
    1066:	47d0      	blx	sl
    1068:	2800      	cmp	r0, #0
    106a:	f6ff af47 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    106e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1070:	eba8 0305 	sub.w	r3, r8, r5
    1074:	2b00      	cmp	r3, #0
    1076:	dcf4      	bgt.n	1062 <CONFIG_FPROTECT_BLOCK_SIZE+0x62>
			OUTS(bps, bpe);
    1078:	9903      	ldr	r1, [sp, #12]
    107a:	463b      	mov	r3, r7
    107c:	4632      	mov	r2, r6
    107e:	4650      	mov	r0, sl
    1080:	f005 fd6c 	bl	6b5c <outs>
    1084:	2800      	cmp	r0, #0
    1086:	f6ff af39 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    108a:	4428      	add	r0, r5
    108c:	e797      	b.n	fbe <__z_interrupt_stack_SIZEOF+0x73e>
			OUTC(' ');
    108e:	9903      	ldr	r1, [sp, #12]
    1090:	2020      	movs	r0, #32
    1092:	47d0      	blx	sl
    1094:	2800      	cmp	r0, #0
    1096:	f6ff af31 	blt.w	efc <__z_interrupt_stack_SIZEOF+0x67c>
    109a:	3501      	adds	r5, #1
		while (width > 0) {
    109c:	1b73      	subs	r3, r6, r5
    109e:	2b00      	cmp	r3, #0
    10a0:	dcf5      	bgt.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
    10a2:	f7ff bbd9 	b.w	858 <CONFIG_ISR_STACK_SIZE+0x58>
			decexp = 0;
    10a6:	4616      	mov	r6, r2
    10a8:	e6b9      	b.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>
		if (*buf++ != '0') {
    10aa:	f10d 085d 	add.w	r8, sp, #93	; 0x5d
	while (precision > 0 && digit_count > 0) {
    10ae:	e6b6      	b.n	e1e <__z_interrupt_stack_SIZEOF+0x59e>

000010b0 <tx_irq_callback>:
#define CANBUS_NODE DT_CHOSEN(zephyr_canbus)

LOG_MODULE_REGISTER(ttpms);

void tx_irq_callback(const struct device *dev, int error, void *arg)
{
    10b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	char *sender = (char *)arg;

	ARG_UNUSED(dev);

	if (error != 0) {
    10b2:	b159      	cbz	r1, 10cc <tx_irq_callback+0x1c>
		LOG_WRN("Callback! error-code: %d\nSender: %s\n",
    10b4:	4b07      	ldr	r3, [pc, #28]	; (10d4 <tx_irq_callback+0x24>)
    10b6:	9302      	str	r3, [sp, #8]
    10b8:	2300      	movs	r3, #0
    10ba:	e9cd 1203 	strd	r1, r2, [sp, #12]
    10be:	e9cd 3300 	strd	r3, r3, [sp]
    10c2:	4905      	ldr	r1, [pc, #20]	; (10d8 <tx_irq_callback+0x28>)
    10c4:	2202      	movs	r2, #2
    10c6:	4618      	mov	r0, r3
    10c8:	f005 fb3c 	bl	6744 <z_log_msg_runtime_create.constprop.0>
		       error, sender);
	}
}
    10cc:	b007      	add	sp, #28
    10ce:	f85d fb04 	ldr.w	pc, [sp], #4
    10d2:	bf00      	nop
    10d4:	00007f38 	.word	0x00007f38
    10d8:	00007cf8 	.word	0x00007cf8

000010dc <main>:

void main(void)
{
    10dc:	b570      	push	{r4, r5, r6, lr}
    10de:	b088      	sub	sp, #32
	LOG_INF("Running ttpms_v2_receiver");
    10e0:	2400      	movs	r4, #0
    10e2:	4b23      	ldr	r3, [pc, #140]	; (1170 <main+0x94>)
    10e4:	9302      	str	r3, [sp, #8]
    10e6:	e9cd 4400 	strd	r4, r4, [sp]
    10ea:	4623      	mov	r3, r4
    10ec:	4921      	ldr	r1, [pc, #132]	; (1174 <main+0x98>)
    10ee:	2203      	movs	r2, #3
    10f0:	4620      	mov	r0, r4
    10f2:	f005 fb27 	bl	6744 <z_log_msg_runtime_create.constprop.0>

	const struct device *can_dev = DEVICE_DT_GET(CANBUS_NODE);
	struct k_sem tx_queue_sem;

	struct can_frame test_frame = {
    10f6:	2602      	movs	r6, #2
    10f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    10fc:	e9cd 3604 	strd	r3, r6, [sp, #16]
    1100:	f244 2369 	movw	r3, #17001	; 0x4269
    1104:	e9cd 3406 	strd	r3, r4, [sp, #24]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1108:	4d1b      	ldr	r5, [pc, #108]	; (1178 <main+0x9c>)
    110a:	4628      	mov	r0, r5
    110c:	f006 fb3b 	bl	7786 <z_device_is_ready>
    1110:	4603      	mov	r3, r0
		.data = {0x69, 0x42}
	};

	int err;

	if (!device_is_ready(can_dev)) {
    1112:	b948      	cbnz	r0, 1128 <main+0x4c>
		LOG_WRN("CAN device not ready");
    1114:	4a19      	ldr	r2, [pc, #100]	; (117c <main+0xa0>)
    1116:	4917      	ldr	r1, [pc, #92]	; (1174 <main+0x98>)
    1118:	9000      	str	r0, [sp, #0]
    111a:	e9cd 0201 	strd	r0, r2, [sp, #4]
    111e:	4632      	mov	r2, r6
    1120:	f005 fb10 	bl	6744 <z_log_msg_runtime_create.constprop.0>
	while (1) {
		can_send(can_dev, &test_frame, K_FOREVER, tx_irq_callback, "Test message");
		k_sleep(K_MSEC(1000));
	}

}
    1124:	b008      	add	sp, #32
    1126:	bd70      	pop	{r4, r5, r6, pc}

static inline int z_impl_can_start(const struct device *dev)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;

	return api->start(dev);
    1128:	68ab      	ldr	r3, [r5, #8]
    112a:	4628      	mov	r0, r5
    112c:	685b      	ldr	r3, [r3, #4]
    112e:	4798      	blx	r3
	if (err != 0) {
    1130:	b988      	cbnz	r0, 1156 <main+0x7a>
		union { uintptr_t x; void * val; } parm4 = { .val = user_data };
		return (int) arch_syscall_invoke6(parm0.x, parm1.x, parm2.split.lo, parm2.split.hi, parm3.x, parm4.x, K_SYSCALL_CAN_SEND);
	}
#endif
	compiler_barrier();
	return z_impl_can_send(dev, frame, timeout, callback, user_data);
    1132:	4e13      	ldr	r6, [pc, #76]	; (1180 <main+0xa4>)
    1134:	4c13      	ldr	r4, [pc, #76]	; (1184 <main+0xa8>)
    1136:	f04f 32ff 	mov.w	r2, #4294967295
    113a:	e9cd 4600 	strd	r4, r6, [sp]
    113e:	f04f 33ff 	mov.w	r3, #4294967295
    1142:	a904      	add	r1, sp, #16
    1144:	4628      	mov	r0, r5
    1146:	f002 fbf5 	bl	3934 <z_impl_can_send>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    114a:	2100      	movs	r1, #0
    114c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1150:	f005 f8ec 	bl	632c <z_impl_k_sleep>
	while (1) {
    1154:	e7ef      	b.n	1136 <main+0x5a>
		LOG_WRN("Error starting CAN controller (err %d)", err);
    1156:	4b0c      	ldr	r3, [pc, #48]	; (1188 <main+0xac>)
    1158:	9003      	str	r0, [sp, #12]
    115a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    115e:	4905      	ldr	r1, [pc, #20]	; (1174 <main+0x98>)
    1160:	9400      	str	r4, [sp, #0]
    1162:	4623      	mov	r3, r4
    1164:	4632      	mov	r2, r6
    1166:	4620      	mov	r0, r4
    1168:	f005 faec 	bl	6744 <z_log_msg_runtime_create.constprop.0>
		return;
    116c:	e7da      	b.n	1124 <main+0x48>
    116e:	bf00      	nop
    1170:	00007f5d 	.word	0x00007f5d
    1174:	00007cf8 	.word	0x00007cf8
    1178:	00007abc 	.word	0x00007abc
    117c:	00007f77 	.word	0x00007f77
    1180:	00007fb3 	.word	0x00007fb3
    1184:	000010b1 	.word	0x000010b1
    1188:	00007f8c 	.word	0x00007f8c

0000118c <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    118c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1190:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1192:	0784      	lsls	r4, r0, #30
{
    1194:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1196:	f002 0304 	and.w	r3, r2, #4
    119a:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    119c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    11a0:	f103 0301 	add.w	r3, r3, #1
    11a4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    11a8:	9203      	str	r2, [sp, #12]
    11aa:	4605      	mov	r5, r0
    11ac:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    11ae:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    11b0:	f040 81be 	bne.w	1530 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    11b4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    11b6:	b130      	cbz	r0, 11c6 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    11b8:	2907      	cmp	r1, #7
    11ba:	d809      	bhi.n	11d0 <cbvprintf_package+0x44>
		return -ENOSPC;
    11bc:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    11c0:	b011      	add	sp, #68	; 0x44
    11c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    11c6:	f001 0607 	and.w	r6, r1, #7
    11ca:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    11cc:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    11d0:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    11d2:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    11d6:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    11d8:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    11dc:	f04f 33ff 	mov.w	r3, #4294967295
    11e0:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    11e2:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    11e6:	464f      	mov	r7, r9
	bool parsing = false;
    11e8:	46cb      	mov	fp, r9
	size = sizeof(char *);
    11ea:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    11ec:	b10d      	cbz	r5, 11f2 <cbvprintf_package+0x66>
				*(const char **)buf = s;
    11ee:	9800      	ldr	r0, [sp, #0]
    11f0:	6020      	str	r0, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    11f2:	9805      	ldr	r0, [sp, #20]
    11f4:	2800      	cmp	r0, #0
    11f6:	f300 80eb 	bgt.w	13d0 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    11fa:	489a      	ldr	r0, [pc, #616]	; (1464 <cbvprintf_package+0x2d8>)
    11fc:	9a00      	ldr	r2, [sp, #0]
    11fe:	4282      	cmp	r2, r0
    1200:	d303      	bcc.n	120a <cbvprintf_package+0x7e>
    1202:	4899      	ldr	r0, [pc, #612]	; (1468 <cbvprintf_package+0x2dc>)
    1204:	4282      	cmp	r2, r0
    1206:	f0c0 80e3 	bcc.w	13d0 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    120a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    120c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1210:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1212:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1216:	f100 8106 	bmi.w	1426 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    121a:	2f0f      	cmp	r7, #15
    121c:	f200 80b4 	bhi.w	1388 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1220:	2d00      	cmp	r5, #0
    1222:	f000 8108 	beq.w	1436 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1226:	f107 0240 	add.w	r2, r7, #64	; 0x40
    122a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    122e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1230:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1234:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    1238:	9804      	ldr	r0, [sp, #16]
    123a:	3001      	adds	r0, #1
    123c:	9004      	str	r0, [sp, #16]
    123e:	e0ea      	b.n	1416 <cbvprintf_package+0x28a>
			switch (*fmt) {
    1240:	287a      	cmp	r0, #122	; 0x7a
    1242:	d860      	bhi.n	1306 <cbvprintf_package+0x17a>
    1244:	284b      	cmp	r0, #75	; 0x4b
    1246:	d80e      	bhi.n	1266 <cbvprintf_package+0xda>
    1248:	2847      	cmp	r0, #71	; 0x47
    124a:	d85c      	bhi.n	1306 <cbvprintf_package+0x17a>
    124c:	2829      	cmp	r0, #41	; 0x29
    124e:	d82f      	bhi.n	12b0 <cbvprintf_package+0x124>
    1250:	2825      	cmp	r0, #37	; 0x25
    1252:	d055      	beq.n	1300 <cbvprintf_package+0x174>
    1254:	d857      	bhi.n	1306 <cbvprintf_package+0x17a>
    1256:	2820      	cmp	r0, #32
    1258:	d07d      	beq.n	1356 <cbvprintf_package+0x1ca>
    125a:	3823      	subs	r0, #35	; 0x23
    125c:	f1d0 0b00 	rsbs	fp, r0, #0
    1260:	eb4b 0b00 	adc.w	fp, fp, r0
    1264:	e077      	b.n	1356 <cbvprintf_package+0x1ca>
    1266:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    126a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    126e:	d84a      	bhi.n	1306 <cbvprintf_package+0x17a>
    1270:	e8df f00c 	tbb	[pc, ip]
    1274:	49494971 	.word	0x49494971
    1278:	49494949 	.word	0x49494949
    127c:	49494949 	.word	0x49494949
    1280:	4949494c 	.word	0x4949494c
    1284:	49494949 	.word	0x49494949
    1288:	4c495a49 	.word	0x4c495a49
    128c:	5a5a5a4c 	.word	0x5a5a5a4c
    1290:	496e4c71 	.word	0x496e4c71
    1294:	4c184971 	.word	0x4c184971
    1298:	83494918 	.word	0x83494918
    129c:	49494c80 	.word	0x49494c80
    12a0:	494c      	.short	0x494c
    12a2:	80          	.byte	0x80
    12a3:	00          	.byte	0x00
    12a4:	2000      	movs	r0, #0
    12a6:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    12aa:	f04f 0a04 	mov.w	sl, #4
    12ae:	e039      	b.n	1324 <cbvprintf_package+0x198>
			switch (*fmt) {
    12b0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    12b4:	fa5f fc8c 	uxtb.w	ip, ip
    12b8:	2201      	movs	r2, #1
    12ba:	fa02 fc0c 	lsl.w	ip, r2, ip
    12be:	ea1c 0f0e 	tst.w	ip, lr
    12c2:	d148      	bne.n	1356 <cbvprintf_package+0x1ca>
    12c4:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    12c8:	d12e      	bne.n	1328 <cbvprintf_package+0x19c>
    12ca:	ea1c 0b02 	ands.w	fp, ip, r2
    12ce:	d042      	beq.n	1356 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    12d0:	3c01      	subs	r4, #1
    12d2:	4454      	add	r4, sl
    12d4:	f1ca 0c00 	rsb	ip, sl, #0
    12d8:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    12dc:	2d00      	cmp	r5, #0
    12de:	d061      	beq.n	13a4 <cbvprintf_package+0x218>
    12e0:	eba3 0c05 	sub.w	ip, r3, r5
    12e4:	44a4      	add	ip, r4
    12e6:	45b4      	cmp	ip, r6
    12e8:	f63f af68 	bhi.w	11bc <cbvprintf_package+0x30>
		if (is_str_arg) {
    12ec:	2800      	cmp	r0, #0
    12ee:	d168      	bne.n	13c2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    12f0:	2b04      	cmp	r3, #4
    12f2:	d147      	bne.n	1384 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    12f4:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    12f8:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    12fa:	3404      	adds	r4, #4
    12fc:	2304      	movs	r3, #4
    12fe:	e02a      	b.n	1356 <cbvprintf_package+0x1ca>
				arg_idx--;
    1300:	9a01      	ldr	r2, [sp, #4]
    1302:	3a01      	subs	r2, #1
    1304:	9201      	str	r2, [sp, #4]
				parsing = false;
    1306:	f04f 0b00 	mov.w	fp, #0
				continue;
    130a:	e024      	b.n	1356 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    130c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1310:	286c      	cmp	r0, #108	; 0x6c
    1312:	d134      	bne.n	137e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1314:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1318:	2000      	movs	r0, #0
    131a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    131c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    131e:	d1c4      	bne.n	12aa <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1320:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1324:	4653      	mov	r3, sl
    1326:	e7d3      	b.n	12d0 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1328:	f108 0807 	add.w	r8, r8, #7
    132c:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    1330:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    1332:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    1336:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    133a:	b135      	cbz	r5, 134a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    133c:	9806      	ldr	r0, [sp, #24]
    133e:	4420      	add	r0, r4
    1340:	42b0      	cmp	r0, r6
    1342:	f63f af3b 	bhi.w	11bc <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    1346:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    134a:	3408      	adds	r4, #8
				parsing = false;
    134c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    1350:	f04f 0a08 	mov.w	sl, #8
    1354:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    1356:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    135a:	2800      	cmp	r0, #0
    135c:	d078      	beq.n	1450 <cbvprintf_package+0x2c4>
			if (!parsing) {
    135e:	f1bb 0f00 	cmp.w	fp, #0
    1362:	f47f af6d 	bne.w	1240 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    1366:	2825      	cmp	r0, #37	; 0x25
    1368:	d1f5      	bne.n	1356 <cbvprintf_package+0x1ca>
					arg_idx++;
    136a:	9b01      	ldr	r3, [sp, #4]
    136c:	3301      	adds	r3, #1
    136e:	9301      	str	r3, [sp, #4]
					parsing = true;
    1370:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    1374:	f04f 0a04 	mov.w	sl, #4
    1378:	e7ec      	b.n	1354 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    137a:	4658      	mov	r0, fp
    137c:	e793      	b.n	12a6 <cbvprintf_package+0x11a>
    137e:	2000      	movs	r0, #0
				parsing = false;
    1380:	4683      	mov	fp, r0
    1382:	e7a5      	b.n	12d0 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    1384:	2b08      	cmp	r3, #8
    1386:	d002      	beq.n	138e <cbvprintf_package+0x202>
					return -EINVAL;
    1388:	f06f 0015 	mvn.w	r0, #21
    138c:	e718      	b.n	11c0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    138e:	f108 0807 	add.w	r8, r8, #7
    1392:	f028 0807 	bic.w	r8, r8, #7
    1396:	ecb8 7b02 	vldmia	r8!, {d7}
					*(long long *)buf = v;
    139a:	ed84 7b00 	vstr	d7, [r4]
			buf += sizeof(long long);
    139e:	3408      	adds	r4, #8
    13a0:	2308      	movs	r3, #8
    13a2:	e7d8      	b.n	1356 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    13a4:	b968      	cbnz	r0, 13c2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    13a6:	2b04      	cmp	r3, #4
    13a8:	d102      	bne.n	13b0 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    13aa:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    13ae:	e7a4      	b.n	12fa <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    13b0:	2b08      	cmp	r3, #8
    13b2:	d1e9      	bne.n	1388 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    13b4:	f108 0807 	add.w	r8, r8, #7
    13b8:	f028 0807 	bic.w	r8, r8, #7
    13bc:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    13c0:	e7ed      	b.n	139e <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    13c2:	9805      	ldr	r0, [sp, #20]
    13c4:	3801      	subs	r0, #1
    13c6:	9005      	str	r0, [sp, #20]
			s = va_arg(ap, char *);
    13c8:	f858 0b04 	ldr.w	r0, [r8], #4
    13cc:	9000      	str	r0, [sp, #0]
    13ce:	e70d      	b.n	11ec <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    13d0:	9a03      	ldr	r2, [sp, #12]
    13d2:	0790      	lsls	r0, r2, #30
    13d4:	d520      	bpl.n	1418 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    13d6:	eba4 0e05 	sub.w	lr, r4, r5
    13da:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    13de:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    13e2:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    13e6:	d2cf      	bcs.n	1388 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    13e8:	2f0f      	cmp	r7, #15
    13ea:	d8cd      	bhi.n	1388 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    13ec:	b1f5      	cbz	r5, 142c <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    13ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
    13f2:	eb0d 0e02 	add.w	lr, sp, r2
    13f6:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    13f8:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    13fa:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    13fe:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    1402:	f1bc 0f00 	cmp.w	ip, #0
    1406:	f43f af17 	beq.w	1238 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    140a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    140e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    1412:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    1416:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1418:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    141c:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    141e:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1420:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1424:	e797      	b.n	1356 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1426:	f04f 0c00 	mov.w	ip, #0
    142a:	e7da      	b.n	13e2 <cbvprintf_package+0x256>
				} else if (is_ro) {
    142c:	f1bc 0f00 	cmp.w	ip, #0
    1430:	d001      	beq.n	1436 <cbvprintf_package+0x2aa>
					len += 1;
    1432:	3601      	adds	r6, #1
    1434:	e7ef      	b.n	1416 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    1436:	9a02      	ldr	r2, [sp, #8]
					len += 2;
    1438:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    143a:	2a00      	cmp	r2, #0
    143c:	d1eb      	bne.n	1416 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    143e:	9800      	ldr	r0, [sp, #0]
    1440:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1444:	f005 fc6b 	bl	6d1e <strlen>
    1448:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    144c:	4406      	add	r6, r0
    144e:	e7e2      	b.n	1416 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1450:	1b63      	subs	r3, r4, r5
    1452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1456:	d297      	bcs.n	1388 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    1458:	b945      	cbnz	r5, 146c <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    145a:	f1a6 0408 	sub.w	r4, r6, #8
    145e:	18e0      	adds	r0, r4, r3
    1460:	e6ae      	b.n	11c0 <cbvprintf_package+0x34>
    1462:	bf00      	nop
    1464:	00007a04 	.word	0x00007a04
    1468:	00008af4 	.word	0x00008af4
	if (rws_pos_en) {
    146c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    146e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1470:	089b      	lsrs	r3, r3, #2
    1472:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1474:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1478:	b1c2      	cbz	r2, 14ac <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    147a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    147c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1480:	f1b9 0f00 	cmp.w	r9, #0
    1484:	d005      	beq.n	1492 <cbvprintf_package+0x306>
    1486:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1488:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    148a:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    148e:	4297      	cmp	r7, r2
    1490:	d10e      	bne.n	14b0 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    1492:	f1c5 0301 	rsb	r3, r5, #1
    1496:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    149a:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    149e:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    14a0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    14a4:	4557      	cmp	r7, sl
    14a6:	d112      	bne.n	14ce <cbvprintf_package+0x342>
	return BUF_OFFSET;
    14a8:	1b60      	subs	r0, r4, r5
    14aa:	e689      	b.n	11c0 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    14ac:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    14ae:	e7e5      	b.n	147c <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    14b0:	f810 3b01 	ldrb.w	r3, [r0], #1
    14b4:	0619      	lsls	r1, r3, #24
    14b6:	d508      	bpl.n	14ca <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    14b8:	eb04 0e0c 	add.w	lr, r4, ip
    14bc:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    14be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    14c2:	f63f ae7b 	bhi.w	11bc <cbvprintf_package+0x30>
			*buf++ = pos;
    14c6:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    14ca:	3201      	adds	r2, #1
    14cc:	e7df      	b.n	148e <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    14ce:	f1b9 0f00 	cmp.w	r9, #0
    14d2:	d003      	beq.n	14dc <cbvprintf_package+0x350>
    14d4:	f998 2000 	ldrsb.w	r2, [r8]
    14d8:	2a00      	cmp	r2, #0
    14da:	db17      	blt.n	150c <cbvprintf_package+0x380>
		if (rws_pos_en) {
    14dc:	9b02      	ldr	r3, [sp, #8]
    14de:	b1d3      	cbz	r3, 1516 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    14e0:	f81a 200b 	ldrb.w	r2, [sl, fp]
    14e4:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    14e8:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    14ea:	9b01      	ldr	r3, [sp, #4]
    14ec:	1898      	adds	r0, r3, r2
    14ee:	4420      	add	r0, r4
    14f0:	42b0      	cmp	r0, r6
    14f2:	f63f ae63 	bhi.w	11bc <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    14f6:	f898 0000 	ldrb.w	r0, [r8]
    14fa:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    14fe:	9900      	ldr	r1, [sp, #0]
    1500:	9203      	str	r2, [sp, #12]
    1502:	4620      	mov	r0, r4
    1504:	f005 fc1b 	bl	6d3e <memcpy>
		buf += size;
    1508:	9a03      	ldr	r2, [sp, #12]
    150a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    150c:	f10a 0a01 	add.w	sl, sl, #1
    1510:	f108 0801 	add.w	r8, r8, #1
    1514:	e7c6      	b.n	14a4 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1516:	f898 2000 	ldrb.w	r2, [r8]
    151a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    151e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1520:	9b02      	ldr	r3, [sp, #8]
    1522:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1526:	9800      	ldr	r0, [sp, #0]
    1528:	f005 fbf9 	bl	6d1e <strlen>
    152c:	1c42      	adds	r2, r0, #1
    152e:	e7dc      	b.n	14ea <cbvprintf_package+0x35e>
		return -EFAULT;
    1530:	f06f 000d 	mvn.w	r0, #13
    1534:	e644      	b.n	11c0 <cbvprintf_package+0x34>
    1536:	bf00      	nop

00001538 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1538:	4b01      	ldr	r3, [pc, #4]	; (1540 <__printk_hook_install+0x8>)
    153a:	6018      	str	r0, [r3, #0]
}
    153c:	4770      	bx	lr
    153e:	bf00      	nop
    1540:	20000178 	.word	0x20000178

00001544 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1548:	8b05      	ldrh	r5, [r0, #24]
{
    154a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    154c:	0728      	lsls	r0, r5, #28
{
    154e:	4690      	mov	r8, r2
	if (processing) {
    1550:	d411      	bmi.n	1576 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1552:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1554:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1558:	f040 80cd 	bne.w	16f6 <process_event+0x1b2>
			evt = process_recheck(mgr);
    155c:	4620      	mov	r0, r4
    155e:	f005 f9ae 	bl	68be <process_recheck>
		}

		if (evt == EVT_NOP) {
    1562:	b178      	cbz	r0, 1584 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1564:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1566:	8b21      	ldrh	r1, [r4, #24]
    1568:	2804      	cmp	r0, #4
    156a:	d811      	bhi.n	1590 <process_event+0x4c>
    156c:	e8df f000 	tbb	[pc, r0]
    1570:	856d10c3 	.word	0x856d10c3
    1574:	95          	.byte	0x95
    1575:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    1576:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1578:	bf0c      	ite	eq
    157a:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    157e:	f045 0520 	orrne.w	r5, r5, #32
    1582:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1584:	f388 8811 	msr	BASEPRI, r8
    1588:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    158c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1590:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1594:	45aa      	cmp	sl, r5
    1596:	f000 80a6 	beq.w	16e6 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    159a:	2700      	movs	r7, #0
    159c:	46b9      	mov	r9, r7
    159e:	463e      	mov	r6, r7
    15a0:	68a3      	ldr	r3, [r4, #8]
    15a2:	2b00      	cmp	r3, #0
    15a4:	f000 80bd 	beq.w	1722 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15a8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    15ac:	8321      	strh	r1, [r4, #24]
    15ae:	f388 8811 	msr	BASEPRI, r8
    15b2:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    15b6:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15b8:	2900      	cmp	r1, #0
    15ba:	f000 80bb 	beq.w	1734 <process_event+0x1f0>
	return node->next;
    15be:	680d      	ldr	r5, [r1, #0]
    15c0:	2900      	cmp	r1, #0
    15c2:	f000 80b7 	beq.w	1734 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    15c6:	f8d1 8004 	ldr.w	r8, [r1, #4]
    15ca:	4633      	mov	r3, r6
    15cc:	4652      	mov	r2, sl
    15ce:	4620      	mov	r0, r4
    15d0:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    15d2:	2d00      	cmp	r5, #0
    15d4:	d076      	beq.n	16c4 <process_event+0x180>
    15d6:	682b      	ldr	r3, [r5, #0]
    15d8:	4629      	mov	r1, r5
    15da:	461d      	mov	r5, r3
    15dc:	e7f0      	b.n	15c0 <process_event+0x7c>
    15de:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    15e2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    15e4:	2a01      	cmp	r2, #1
    15e6:	d81b      	bhi.n	1620 <process_event+0xdc>
	list->head = NULL;
    15e8:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15ea:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    15ee:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    15f0:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15f2:	b289      	uxth	r1, r1
	list->tail = NULL;
    15f4:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    15f8:	d109      	bne.n	160e <process_event+0xca>
    15fa:	463b      	mov	r3, r7
    15fc:	e003      	b.n	1606 <process_event+0xc2>
				mgr->refs += 1U;
    15fe:	8b62      	ldrh	r2, [r4, #26]
    1600:	3201      	adds	r2, #1
    1602:	8362      	strh	r2, [r4, #26]
	return node->next;
    1604:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1606:	2b00      	cmp	r3, #0
    1608:	d1f9      	bne.n	15fe <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    160a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    160e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1610:	4620      	mov	r0, r4
    1612:	f005 f954 	bl	68be <process_recheck>
    1616:	2800      	cmp	r0, #0
    1618:	d07b      	beq.n	1712 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    161a:	f041 0120 	orr.w	r1, r1, #32
    161e:	e077      	b.n	1710 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1620:	2b04      	cmp	r3, #4
    1622:	d10a      	bne.n	163a <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1624:	f021 0107 	bic.w	r1, r1, #7
    1628:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    162a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    162c:	4620      	mov	r0, r4
    162e:	f005 f946 	bl	68be <process_recheck>
    1632:	b110      	cbz	r0, 163a <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1634:	f041 0120 	orr.w	r1, r1, #32
    1638:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    163a:	8b21      	ldrh	r1, [r4, #24]
    163c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1640:	45aa      	cmp	sl, r5
    1642:	d050      	beq.n	16e6 <process_event+0x1a2>
    1644:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1646:	46b9      	mov	r9, r7
    1648:	e7aa      	b.n	15a0 <process_event+0x5c>
			transit = mgr->transitions->start;
    164a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    164c:	f021 0107 	bic.w	r1, r1, #7
    1650:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1654:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1656:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    165a:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    165c:	d12d      	bne.n	16ba <process_event+0x176>
		    || (transit != NULL)) {
    165e:	f1b9 0f00 	cmp.w	r9, #0
    1662:	d040      	beq.n	16e6 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1664:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1668:	8321      	strh	r1, [r4, #24]
    166a:	f388 8811 	msr	BASEPRI, r8
    166e:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1672:	493a      	ldr	r1, [pc, #232]	; (175c <process_event+0x218>)
    1674:	4620      	mov	r0, r4
    1676:	47c8      	blx	r9
    1678:	e029      	b.n	16ce <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    167a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    167e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1680:	f041 0104 	orr.w	r1, r1, #4
    1684:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1686:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1688:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    168c:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    168e:	d0e6      	beq.n	165e <process_event+0x11a>
    1690:	2700      	movs	r7, #0
		res = 0;
    1692:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1694:	f04f 0a04 	mov.w	sl, #4
    1698:	e782      	b.n	15a0 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    169a:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    169e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16a0:	f041 0105 	orr.w	r1, r1, #5
    16a4:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    16a6:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    16a8:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    16ac:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    16ae:	d0d6      	beq.n	165e <process_event+0x11a>
    16b0:	2700      	movs	r7, #0
		res = 0;
    16b2:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16b4:	f04f 0a05 	mov.w	sl, #5
    16b8:	e772      	b.n	15a0 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    16ba:	2700      	movs	r7, #0
		res = 0;
    16bc:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    16be:	f04f 0a06 	mov.w	sl, #6
    16c2:	e76d      	b.n	15a0 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    16c4:	462b      	mov	r3, r5
    16c6:	e787      	b.n	15d8 <process_event+0x94>
			if (transit != NULL) {
    16c8:	f1b9 0f00 	cmp.w	r9, #0
    16cc:	d1d1      	bne.n	1672 <process_event+0x12e>
	__asm__ volatile(
    16ce:	f04f 0320 	mov.w	r3, #32
    16d2:	f3ef 8811 	mrs	r8, BASEPRI
    16d6:	f383 8812 	msr	BASEPRI_MAX, r3
    16da:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    16de:	8b23      	ldrh	r3, [r4, #24]
    16e0:	f023 0308 	bic.w	r3, r3, #8
    16e4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    16e6:	8b25      	ldrh	r5, [r4, #24]
    16e8:	06ea      	lsls	r2, r5, #27
    16ea:	d52e      	bpl.n	174a <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    16ec:	f025 0310 	bic.w	r3, r5, #16
    16f0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    16f2:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    16f6:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    16f8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    16fa:	2e00      	cmp	r6, #0
    16fc:	f6bf af6f 	bge.w	15de <process_event+0x9a>
	list->head = NULL;
    1700:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1702:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1704:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1708:	f021 0107 	bic.w	r1, r1, #7
    170c:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1710:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1712:	8b21      	ldrh	r1, [r4, #24]
    1714:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1718:	45aa      	cmp	sl, r5
    171a:	f04f 0900 	mov.w	r9, #0
    171e:	f47f af3f 	bne.w	15a0 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1722:	2f00      	cmp	r7, #0
    1724:	d09b      	beq.n	165e <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1726:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    172a:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    172c:	f388 8811 	msr	BASEPRI, r8
    1730:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1734:	2f00      	cmp	r7, #0
    1736:	d0c7      	beq.n	16c8 <process_event+0x184>
	return node->next;
    1738:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    173a:	4639      	mov	r1, r7
    173c:	4633      	mov	r3, r6
    173e:	4652      	mov	r2, sl
    1740:	4620      	mov	r0, r4
    1742:	f005 f8e8 	bl	6916 <notify_one>
	list->head = node;
    1746:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1748:	e7f4      	b.n	1734 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    174a:	06ab      	lsls	r3, r5, #26
    174c:	f57f af1a 	bpl.w	1584 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1750:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1754:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1756:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    175a:	e6ff      	b.n	155c <process_event+0x18>
    175c:	00006943 	.word	0x00006943

00001760 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1760:	f003 b902 	b.w	4968 <SystemInit>

00001764 <z_log_init.isra.0>:
	}

	return mask;
}

static uint32_t z_log_init(bool blocking, bool can_sleep)
    1764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1768:	4681      	mov	r9, r0
		return 0;
	}

	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);

	if (atomic_inc(&initialized) != 0) {
    176a:	482f      	ldr	r0, [pc, #188]	; (1828 <z_log_init.isra.0+0xc4>)
static uint32_t z_log_init(bool blocking, bool can_sleep)
    176c:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    176e:	f005 fa11 	bl	6b94 <atomic_inc>
    1772:	4606      	mov	r6, r0
    1774:	b970      	cbnz	r0, 1794 <z_log_init.isra.0+0x30>
		z_log_links_initiate();
	}


	/* Assign ids to backends. */
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1776:	4c2d      	ldr	r4, [pc, #180]	; (182c <z_log_init.isra.0+0xc8>)
    1778:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1830 <z_log_init.isra.0+0xcc>
	uint32_t mask = 0;
    177c:	4605      	mov	r5, r0
    177e:	46a0      	mov	r8, r4
			if (log_backend_is_ready(backend) == 0) {
				log_backend_enable(backend,
						   backend->cb->ctx,
						   CONFIG_LOG_MAX_LEVEL);
			} else {
				mask |= BIT(i);
    1780:	f04f 0b01 	mov.w	fp, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1784:	4554      	cmp	r4, sl
    1786:	d307      	bcc.n	1798 <z_log_init.isra.0+0x34>
			i++;
		}
	}

	/* If blocking init, wait until all backends are activated. */
	if (blocking) {
    1788:	f1b9 0f00 	cmp.w	r9, #0
    178c:	d002      	beq.n	1794 <z_log_init.isra.0+0x30>
		mask_cpy &= ~BIT(i);
    178e:	f04f 0a01 	mov.w	sl, #1
		while (mask) {
    1792:	b9e5      	cbnz	r5, 17ce <z_log_init.isra.0+0x6a>
			}
		}
	}

	return mask;
}
    1794:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (backend->autostart) {
    1798:	7b23      	ldrb	r3, [r4, #12]
    179a:	b173      	cbz	r3, 17ba <z_log_init.isra.0+0x56>
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_init(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->init) {
    179c:	6823      	ldr	r3, [r4, #0]
    179e:	68db      	ldr	r3, [r3, #12]
    17a0:	b10b      	cbz	r3, 17a6 <z_log_init.isra.0+0x42>
		backend->api->init(backend);
    17a2:	4620      	mov	r0, r4
    17a4:	4798      	blx	r3
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    17a6:	6823      	ldr	r3, [r4, #0]
    17a8:	691b      	ldr	r3, [r3, #16]
    17aa:	b943      	cbnz	r3, 17be <z_log_init.isra.0+0x5a>
				log_backend_enable(backend,
    17ac:	6863      	ldr	r3, [r4, #4]
    17ae:	2204      	movs	r2, #4
    17b0:	6819      	ldr	r1, [r3, #0]
    17b2:	4620      	mov	r0, r4
    17b4:	f000 f8c4 	bl	1940 <log_backend_enable>
			i++;
    17b8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    17ba:	3410      	adds	r4, #16
    17bc:	e7e2      	b.n	1784 <z_log_init.isra.0+0x20>
		return backend->api->is_ready(backend);
    17be:	4620      	mov	r0, r4
    17c0:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    17c2:	2800      	cmp	r0, #0
    17c4:	d0f2      	beq.n	17ac <z_log_init.isra.0+0x48>
				mask |= BIT(i);
    17c6:	fa0b f306 	lsl.w	r3, fp, r6
    17ca:	431d      	orrs	r5, r3
    17cc:	e7f4      	b.n	17b8 <z_log_init.isra.0+0x54>
    17ce:	46a9      	mov	r9, r5
		uint32_t i = __builtin_ctz(mask_cpy);
    17d0:	fa95 f4a5 	rbit	r4, r5
    17d4:	fab4 f484 	clz	r4, r4
		mask_cpy &= ~BIT(i);
    17d8:	fa0a f304 	lsl.w	r3, sl, r4
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17dc:	0126      	lsls	r6, r4, #4
    17de:	eb08 1404 	add.w	r4, r8, r4, lsl #4
		mask_cpy &= ~BIT(i);
    17e2:	ea6f 0b03 	mvn.w	fp, r3
    17e6:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    17ea:	7b23      	ldrb	r3, [r4, #12]
    17ec:	b163      	cbz	r3, 1808 <z_log_init.isra.0+0xa4>
	if (backend->api->is_ready != NULL) {
    17ee:	f858 3006 	ldr.w	r3, [r8, r6]
    17f2:	691b      	ldr	r3, [r3, #16]
    17f4:	b993      	cbnz	r3, 181c <z_log_init.isra.0+0xb8>
					   backend->cb->ctx,
    17f6:	4446      	add	r6, r8
			log_backend_enable(backend,
    17f8:	2204      	movs	r2, #4
    17fa:	6873      	ldr	r3, [r6, #4]
    17fc:	4620      	mov	r0, r4
    17fe:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    1800:	ea09 090b 	and.w	r9, r9, fp
			log_backend_enable(backend,
    1804:	f000 f89c 	bl	1940 <log_backend_enable>
	while (mask_cpy) {
    1808:	2d00      	cmp	r5, #0
    180a:	d1e1      	bne.n	17d0 <z_log_init.isra.0+0x6c>
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    180c:	b127      	cbz	r7, 1818 <z_log_init.isra.0+0xb4>
    180e:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1812:	2100      	movs	r1, #0
    1814:	f004 fd8a 	bl	632c <z_impl_k_sleep>
    1818:	464d      	mov	r5, r9
    181a:	e7ba      	b.n	1792 <z_log_init.isra.0+0x2e>
		return backend->api->is_ready(backend);
    181c:	4620      	mov	r0, r4
    181e:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1820:	2800      	cmp	r0, #0
    1822:	d1f1      	bne.n	1808 <z_log_init.isra.0+0xa4>
    1824:	e7e7      	b.n	17f6 <z_log_init.isra.0+0x92>
    1826:	bf00      	nop
    1828:	20000448 	.word	0x20000448
    182c:	00007d00 	.word	0x00007d00
    1830:	00007d10 	.word	0x00007d10

00001834 <log_format_func_t_get>:
}
    1834:	4b01      	ldr	r3, [pc, #4]	; (183c <log_format_func_t_get+0x8>)
    1836:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    183a:	4770      	bx	lr
    183c:	00007d18 	.word	0x00007d18

00001840 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    1840:	b508      	push	{r3, lr}
    1842:	4603      	mov	r3, r0
    1844:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1846:	b12b      	cbz	r3, 1854 <log_set_timestamp_func+0x14>
		return -EINVAL;
	}

	timestamp_func = timestamp_getter;
    1848:	4a04      	ldr	r2, [pc, #16]	; (185c <log_set_timestamp_func+0x1c>)
    184a:	6013      	str	r3, [r2, #0]
	if (CONFIG_LOG_PROCESSING_LATENCY_US) {
		proc_latency = (freq * CONFIG_LOG_PROCESSING_LATENCY_US) / 1000000;
	}

	if (IS_ENABLED(CONFIG_LOG_OUTPUT)) {
		log_output_timestamp_freq_set(freq);
    184c:	f000 fa7e 	bl	1d4c <log_output_timestamp_freq_set>
	}

	return 0;
    1850:	2000      	movs	r0, #0
}
    1852:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1854:	f06f 0015 	mvn.w	r0, #21
    1858:	e7fb      	b.n	1852 <log_set_timestamp_func+0x12>
    185a:	bf00      	nop
    185c:	2000017c 	.word	0x2000017c

00001860 <log_core_init>:
	panic_mode = false;
    1860:	4a04      	ldr	r2, [pc, #16]	; (1874 <log_core_init+0x14>)
		log_set_timestamp_func(default_get_timestamp,
    1862:	4805      	ldr	r0, [pc, #20]	; (1878 <log_core_init+0x18>)
	panic_mode = false;
    1864:	2300      	movs	r3, #0
    1866:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1868:	4a04      	ldr	r2, [pc, #16]	; (187c <log_core_init+0x1c>)
		log_set_timestamp_func(default_get_timestamp,
    186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dropped_cnt = 0;
    186e:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1870:	f7ff bfe6 	b.w	1840 <log_set_timestamp_func>
    1874:	20000640 	.word	0x20000640
    1878:	00006b91 	.word	0x00006b91
    187c:	20000440 	.word	0x20000440

00001880 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    1880:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1882:	4d0b      	ldr	r5, [pc, #44]	; (18b0 <z_impl_log_panic+0x30>)
    1884:	7829      	ldrb	r1, [r5, #0]
    1886:	b941      	cbnz	r1, 189a <z_impl_log_panic+0x1a>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	(void)z_log_init(true, false);
    1888:	2001      	movs	r0, #1
    188a:	f7ff ff6b 	bl	1764 <z_log_init.isra.0>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY)) {
			goto out;
		}
	}

	STRUCT_SECTION_FOREACH(log_backend, backend) {
    188e:	4c09      	ldr	r4, [pc, #36]	; (18b4 <z_impl_log_panic+0x34>)
    1890:	4e09      	ldr	r6, [pc, #36]	; (18b8 <z_impl_log_panic+0x38>)
    1892:	42b4      	cmp	r4, r6
    1894:	d302      	bcc.n	189c <z_impl_log_panic+0x1c>
		while (log_process() == true) {
		}
	}

out:
	panic_mode = true;
    1896:	2301      	movs	r3, #1
    1898:	702b      	strb	r3, [r5, #0]
}
    189a:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    189c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    189e:	795b      	ldrb	r3, [r3, #5]
    18a0:	b11b      	cbz	r3, 18aa <z_impl_log_panic+0x2a>
	backend->api->panic(backend);
    18a2:	6823      	ldr	r3, [r4, #0]
    18a4:	4620      	mov	r0, r4
    18a6:	689b      	ldr	r3, [r3, #8]
    18a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18aa:	3410      	adds	r4, #16
    18ac:	e7f1      	b.n	1892 <z_impl_log_panic+0x12>
    18ae:	bf00      	nop
    18b0:	20000640 	.word	0x20000640
    18b4:	00007d00 	.word	0x00007d00
    18b8:	00007d10 	.word	0x00007d10

000018bc <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    18bc:	b510      	push	{r4, lr}
    18be:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    18c0:	4808      	ldr	r0, [pc, #32]	; (18e4 <z_log_dropped+0x28>)
    18c2:	f005 f967 	bl	6b94 <atomic_inc>
	if (buffered) {
    18c6:	b15c      	cbz	r4, 18e0 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    18c8:	f3bf 8f5b 	dmb	ish
    18cc:	4b06      	ldr	r3, [pc, #24]	; (18e8 <z_log_dropped+0x2c>)
    18ce:	e853 1f00 	ldrex	r1, [r3]
    18d2:	3901      	subs	r1, #1
    18d4:	e843 1200 	strex	r2, r1, [r3]
    18d8:	2a00      	cmp	r2, #0
    18da:	d1f8      	bne.n	18ce <z_log_dropped+0x12>
    18dc:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    18e0:	bd10      	pop	{r4, pc}
    18e2:	bf00      	nop
    18e4:	20000440 	.word	0x20000440
    18e8:	20000444 	.word	0x20000444

000018ec <z_log_msg_commit>:
	mpsc_pbuf_commit(buffer, &m->buf);
	z_log_msg_post_finalize();
}

void z_log_msg_commit(struct log_msg *msg)
{
    18ec:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    18ee:	4b0a      	ldr	r3, [pc, #40]	; (1918 <z_log_msg_commit+0x2c>)
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18f0:	4c0a      	ldr	r4, [pc, #40]	; (191c <z_log_msg_commit+0x30>)
	msg->hdr.timestamp = timestamp_func();
    18f2:	681b      	ldr	r3, [r3, #0]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18f4:	4e0a      	ldr	r6, [pc, #40]	; (1920 <z_log_msg_commit+0x34>)
{
    18f6:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
    18f8:	4798      	blx	r3
    18fa:	60a8      	str	r0, [r5, #8]
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    18fc:	42b4      	cmp	r4, r6
    18fe:	d300      	bcc.n	1902 <z_log_msg_commit+0x16>
	msg_commit(&log_buffer, msg);
}
    1900:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1902:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1904:	795b      	ldrb	r3, [r3, #5]
    1906:	b123      	cbz	r3, 1912 <z_log_msg_commit+0x26>
	backend->api->process(backend, msg);
    1908:	6823      	ldr	r3, [r4, #0]
    190a:	4629      	mov	r1, r5
    190c:	681b      	ldr	r3, [r3, #0]
    190e:	4620      	mov	r0, r4
    1910:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1912:	3410      	adds	r4, #16
    1914:	e7f2      	b.n	18fc <z_log_msg_commit+0x10>
    1916:	bf00      	nop
    1918:	2000017c 	.word	0x2000017c
    191c:	00007d00 	.word	0x00007d00
    1920:	00007d10 	.word	0x00007d10

00001924 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1924:	4a04      	ldr	r2, [pc, #16]	; (1938 <log_source_name_get+0x14>)
    1926:	4b05      	ldr	r3, [pc, #20]	; (193c <log_source_name_get+0x18>)
    1928:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    192a:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    192e:	bf34      	ite	cc
    1930:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1934:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1936:	4770      	bx	lr
    1938:	00007c80 	.word	0x00007c80
    193c:	00007d00 	.word	0x00007d00

00001940 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1940:	4b08      	ldr	r3, [pc, #32]	; (1964 <log_backend_enable+0x24>)
    1942:	1ac3      	subs	r3, r0, r3
{
    1944:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1946:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1948:	6844      	ldr	r4, [r0, #4]
    194a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    194c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    194e:	6843      	ldr	r3, [r0, #4]
    1950:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1952:	6843      	ldr	r3, [r0, #4]
    1954:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1956:	6843      	ldr	r3, [r0, #4]
    1958:	2201      	movs	r2, #1
    195a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    195c:	f85d 4b04 	ldr.w	r4, [sp], #4
	z_log_notify_backend_enabled();
    1960:	f005 b93a 	b.w	6bd8 <z_log_notify_backend_enabled>
    1964:	00007d00 	.word	0x00007d00

00001968 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    196c:	b085      	sub	sp, #20
    196e:	af02      	add	r7, sp, #8
    1970:	e9d7 a90e 	ldrd	sl, r9, [r7, #56]	; 0x38
    1974:	6b3d      	ldr	r5, [r7, #48]	; 0x30
    1976:	4604      	mov	r4, r0
    1978:	460e      	mov	r6, r1
    197a:	4693      	mov	fp, r2
    197c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    197e:	f1ba 0f00 	cmp.w	sl, #0
    1982:	d035      	beq.n	19f0 <z_impl_z_log_msg_runtime_vcreate+0x88>
		va_list ap2;

		va_copy(ap2, ap);
    1984:	f8c7 9004 	str.w	r9, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1988:	f8cd 9000 	str.w	r9, [sp]
    198c:	2110      	movs	r1, #16
    198e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1990:	4653      	mov	r3, sl
    1992:	2000      	movs	r0, #0
    1994:	f7ff fbfa 	bl	118c <cbvprintf_package>
    1998:	4601      	mov	r1, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    199a:	4a16      	ldr	r2, [pc, #88]	; (19f4 <z_impl_z_log_msg_runtime_vcreate+0x8c>)
    199c:	f004 0407 	and.w	r4, r4, #7
    19a0:	f00b 0b07 	and.w	fp, fp, #7
    19a4:	00e4      	lsls	r4, r4, #3
    19a6:	ea02 2241 	and.w	r2, r2, r1, lsl #9
    19aa:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
    19ae:	4314      	orrs	r4, r2
    19b0:	4a11      	ldr	r2, [pc, #68]	; (19f8 <z_impl_z_log_msg_runtime_vcreate+0x90>)
    19b2:	ea02 42c5 	and.w	r2, r2, r5, lsl #19
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    19b6:	3517      	adds	r5, #23
    19b8:	440d      	add	r5, r1
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    19ba:	f025 0507 	bic.w	r5, r5, #7
    19be:	ebad 0d05 	sub.w	sp, sp, r5
	struct log_msg_desc desc =
    19c2:	4314      	orrs	r4, r2
		msg = alloca(msg_wlen * sizeof(int));
    19c4:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    19c6:	f1ba 0f00 	cmp.w	sl, #0
    19ca:	d007      	beq.n	19dc <z_impl_z_log_msg_runtime_vcreate+0x74>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    19cc:	f8cd 9000 	str.w	r9, [sp]
    19d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    19d2:	4653      	mov	r3, sl
    19d4:	f105 0010 	add.w	r0, r5, #16
    19d8:	f7ff fbd8 	bl	118c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    19dc:	4643      	mov	r3, r8
    19de:	4622      	mov	r2, r4
    19e0:	4631      	mov	r1, r6
    19e2:	4628      	mov	r0, r5
    19e4:	f005 f8fb 	bl	6bde <z_log_msg_finalize>
	}
}
    19e8:	370c      	adds	r7, #12
    19ea:	46bd      	mov	sp, r7
    19ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    19f0:	4651      	mov	r1, sl
    19f2:	e7d2      	b.n	199a <z_impl_z_log_msg_runtime_vcreate+0x32>
    19f4:	0007fe00 	.word	0x0007fe00
    19f8:	7ff80000 	.word	0x7ff80000

000019fc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    19fc:	b40e      	push	{r1, r2, r3}
    19fe:	b503      	push	{r0, r1, lr}
    1a00:	ab03      	add	r3, sp, #12
    1a02:	4601      	mov	r1, r0
    1a04:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a08:	4804      	ldr	r0, [pc, #16]	; (1a1c <print_formatted+0x20>)
	va_start(args, fmt);
    1a0a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a0c:	f005 f92a 	bl	6c64 <cbvprintf>
	va_end(args);

	return length;
}
    1a10:	b002      	add	sp, #8
    1a12:	f85d eb04 	ldr.w	lr, [sp], #4
    1a16:	b003      	add	sp, #12
    1a18:	4770      	bx	lr
    1a1a:	bf00      	nop
    1a1c:	00006c13 	.word	0x00006c13

00001a20 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a20:	06ca      	lsls	r2, r1, #27
    1a22:	d405      	bmi.n	1a30 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a24:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    1a26:	bf4c      	ite	mi
    1a28:	4902      	ldrmi	r1, [pc, #8]	; (1a34 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    1a2a:	4903      	ldrpl	r1, [pc, #12]	; (1a38 <newline_print+0x18>)
    1a2c:	f7ff bfe6 	b.w	19fc <print_formatted>
	}
}
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	00007feb 	.word	0x00007feb
    1a38:	00007fea 	.word	0x00007fea

00001a3c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    1a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a40:	b08b      	sub	sp, #44	; 0x2c
    1a42:	469b      	mov	fp, r3
    1a44:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
    1a48:	9305      	str	r3, [sp, #20]
    1a4a:	e9dd 9315 	ldrd	r9, r3, [sp, #84]	; 0x54
    1a4e:	9306      	str	r3, [sp, #24]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    1a50:	9b05      	ldr	r3, [sp, #20]
{
    1a52:	9208      	str	r2, [sp, #32]
    1a54:	e9dd 7617 	ldrd	r7, r6, [sp, #92]	; 0x5c
    1a58:	4604      	mov	r4, r0
    1a5a:	460d      	mov	r5, r1
	if (!raw_string) {
    1a5c:	2b00      	cmp	r3, #0
    1a5e:	f000 8087 	beq.w	1b70 <log_output_process+0x134>
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1a62:	f006 0301 	and.w	r3, r6, #1
    1a66:	9309      	str	r3, [sp, #36]	; 0x24
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1a68:	f006 0308 	and.w	r3, r6, #8
    1a6c:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1a6e:	f005 f8b4 	bl	6bda <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1a72:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    1a76:	4602      	mov	r2, r0
    1a78:	2800      	cmp	r0, #0
    1a7a:	d049      	beq.n	1b10 <log_output_process+0xd4>
		length += print_formatted(output, "%s ", tag);
    1a7c:	4984      	ldr	r1, [pc, #528]	; (1c90 <log_output_process+0x254>)
    1a7e:	4620      	mov	r0, r4
    1a80:	f7ff ffbc 	bl	19fc <print_formatted>
    1a84:	4680      	mov	r8, r0
	if (stamp) {
    1a86:	f1ba 0f00 	cmp.w	sl, #0
    1a8a:	d008      	beq.n	1a9e <log_output_process+0x62>
	if (!format) {
    1a8c:	f016 0f44 	tst.w	r6, #68	; 0x44
    1a90:	d140      	bne.n	1b14 <log_output_process+0xd8>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1a92:	4980      	ldr	r1, [pc, #512]	; (1c94 <log_output_process+0x258>)
    1a94:	462a      	mov	r2, r5
    1a96:	4620      	mov	r0, r4
    1a98:	f7ff ffb0 	bl	19fc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1a9c:	4480      	add	r8, r0
	if (color) {
    1a9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1aa0:	b15b      	cbz	r3, 1aba <log_output_process+0x7e>
		const char *log_color = start && (colors[level] != NULL) ?
    1aa2:	4b7d      	ldr	r3, [pc, #500]	; (1c98 <log_output_process+0x25c>)
    1aa4:	9a05      	ldr	r2, [sp, #20]
		print_formatted(output, "%s", log_color);
    1aa6:	497d      	ldr	r1, [pc, #500]	; (1c9c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    1aa8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    1aac:	4b7c      	ldr	r3, [pc, #496]	; (1ca0 <log_output_process+0x264>)
    1aae:	4620      	mov	r0, r4
    1ab0:	2a00      	cmp	r2, #0
    1ab2:	bf08      	it	eq
    1ab4:	461a      	moveq	r2, r3
    1ab6:	f7ff ffa1 	bl	19fc <print_formatted>
	if (level_on) {
    1aba:	9b07      	ldr	r3, [sp, #28]
    1abc:	2b00      	cmp	r3, #0
    1abe:	d055      	beq.n	1b6c <log_output_process+0x130>
		total += print_formatted(output, "<%s> ", severity[level]);
    1ac0:	4b78      	ldr	r3, [pc, #480]	; (1ca4 <log_output_process+0x268>)
    1ac2:	9a05      	ldr	r2, [sp, #20]
    1ac4:	4978      	ldr	r1, [pc, #480]	; (1ca8 <log_output_process+0x26c>)
    1ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1aca:	4620      	mov	r0, r4
    1acc:	f7ff ff96 	bl	19fc <print_formatted>
    1ad0:	4605      	mov	r5, r0
	if (domain) {
    1ad2:	9b08      	ldr	r3, [sp, #32]
    1ad4:	b12b      	cbz	r3, 1ae2 <log_output_process+0xa6>
		total += print_formatted(output, "%s/", domain);
    1ad6:	4975      	ldr	r1, [pc, #468]	; (1cac <log_output_process+0x270>)
    1ad8:	461a      	mov	r2, r3
    1ada:	4620      	mov	r0, r4
    1adc:	f7ff ff8e 	bl	19fc <print_formatted>
    1ae0:	4405      	add	r5, r0
	if (source) {
    1ae2:	f1bb 0f00 	cmp.w	fp, #0
    1ae6:	d005      	beq.n	1af4 <log_output_process+0xb8>
		total += print_formatted(output,
    1ae8:	4971      	ldr	r1, [pc, #452]	; (1cb0 <log_output_process+0x274>)
    1aea:	465a      	mov	r2, fp
    1aec:	4620      	mov	r0, r4
    1aee:	f7ff ff85 	bl	19fc <print_formatted>
    1af2:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    1af4:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    1af6:	f1b9 0f00 	cmp.w	r9, #0
    1afa:	d148      	bne.n	1b8e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    1afc:	2f00      	cmp	r7, #0
    1afe:	d14e      	bne.n	1b9e <log_output_process+0x162>
	if (color) {
    1b00:	07f3      	lsls	r3, r6, #31
    1b02:	f100 80bf 	bmi.w	1c84 <log_output_process+0x248>
	newline_print(output, flags);
    1b06:	4631      	mov	r1, r6
    1b08:	4620      	mov	r0, r4
    1b0a:	f7ff ff89 	bl	1a20 <newline_print>
}
    1b0e:	e0b3      	b.n	1c78 <log_output_process+0x23c>
	uint32_t length = 0U;
    1b10:	4680      	mov	r8, r0
    1b12:	e7b8      	b.n	1a86 <log_output_process+0x4a>
	} else if (freq != 0U) {
    1b14:	4b67      	ldr	r3, [pc, #412]	; (1cb4 <log_output_process+0x278>)
    1b16:	6818      	ldr	r0, [r3, #0]
    1b18:	2800      	cmp	r0, #0
    1b1a:	d0bf      	beq.n	1a9c <log_output_process+0x60>
		timestamp /= timestamp_div;
    1b1c:	4b66      	ldr	r3, [pc, #408]	; (1cb8 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    1b1e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1b22:	681b      	ldr	r3, [r3, #0]
    1b24:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    1b28:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    1b2c:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    1b30:	fb00 5513 	mls	r5, r0, r3, r5
    1b34:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    1b38:	fb0e f505 	mul.w	r5, lr, r5
    1b3c:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    1b40:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b42:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    1b46:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b4a:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    1b4e:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b52:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    1b56:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1b58:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    1b5c:	4957      	ldr	r1, [pc, #348]	; (1cbc <log_output_process+0x280>)
    1b5e:	e9cd c501 	strd	ip, r5, [sp, #4]
    1b62:	4652      	mov	r2, sl
    1b64:	4620      	mov	r0, r4
    1b66:	f7ff ff49 	bl	19fc <print_formatted>
    1b6a:	e797      	b.n	1a9c <log_output_process+0x60>
	int total = 0;
    1b6c:	9d07      	ldr	r5, [sp, #28]
    1b6e:	e7b0      	b.n	1ad2 <log_output_process+0x96>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1b70:	f1bb 0f01 	cmp.w	fp, #1
    1b74:	d106      	bne.n	1b84 <log_output_process+0x148>
	if (package) {
    1b76:	f1b9 0f00 	cmp.w	r9, #0
    1b7a:	d164      	bne.n	1c46 <log_output_process+0x20a>
	if (data_len) {
    1b7c:	2f00      	cmp	r7, #0
    1b7e:	d07b      	beq.n	1c78 <log_output_process+0x23c>
		prefix_offset = 0;
    1b80:	2500      	movs	r5, #0
    1b82:	e00c      	b.n	1b9e <log_output_process+0x162>
	if (package) {
    1b84:	f1b9 0f00 	cmp.w	r9, #0
    1b88:	d0f8      	beq.n	1b7c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1b8a:	484d      	ldr	r0, [pc, #308]	; (1cc0 <log_output_process+0x284>)
    1b8c:	e05c      	b.n	1c48 <log_output_process+0x20c>
		cb = out_func;
    1b8e:	484d      	ldr	r0, [pc, #308]	; (1cc4 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1b90:	494d      	ldr	r1, [pc, #308]	; (1cc8 <log_output_process+0x28c>)
    1b92:	464b      	mov	r3, r9
    1b94:	4622      	mov	r2, r4
    1b96:	f004 fde4 	bl	6762 <cbpprintf_external>
	if (data_len) {
    1b9a:	2f00      	cmp	r7, #0
    1b9c:	d068      	beq.n	1c70 <log_output_process+0x234>
		print_formatted(output, " ");
    1b9e:	f8df 9138 	ldr.w	r9, [pc, #312]	; 1cd8 <log_output_process+0x29c>
			print_formatted(output, "%02x ", data[i]);
    1ba2:	f8df a138 	ldr.w	sl, [pc, #312]	; 1cdc <log_output_process+0x2a0>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1ba6:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    1ba8:	4631      	mov	r1, r6
    1baa:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1bac:	46b8      	mov	r8, r7
    1bae:	bf28      	it	cs
    1bb0:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    1bb4:	f7ff ff34 	bl	1a20 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    1bb8:	f04f 0b00 	mov.w	fp, #0
    1bbc:	455d      	cmp	r5, fp
    1bbe:	dc45      	bgt.n	1c4c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    1bc0:	9b06      	ldr	r3, [sp, #24]
    1bc2:	4651      	mov	r1, sl
    1bc4:	781a      	ldrb	r2, [r3, #0]
    1bc6:	4620      	mov	r0, r4
    1bc8:	f7ff ff18 	bl	19fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1bcc:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    1bd0:	f01b 0f07 	tst.w	fp, #7
    1bd4:	d103      	bne.n	1bde <log_output_process+0x1a2>
			print_formatted(output, " ");
    1bd6:	4649      	mov	r1, r9
    1bd8:	4620      	mov	r0, r4
    1bda:	f7ff ff0f 	bl	19fc <print_formatted>
		if (i < length) {
    1bde:	45d8      	cmp	r8, fp
    1be0:	d93b      	bls.n	1c5a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    1be2:	9b06      	ldr	r3, [sp, #24]
    1be4:	4651      	mov	r1, sl
    1be6:	f813 200b 	ldrb.w	r2, [r3, fp]
    1bea:	4620      	mov	r0, r4
    1bec:	f7ff ff06 	bl	19fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1bf0:	f10b 0b01 	add.w	fp, fp, #1
    1bf4:	f1bb 0f10 	cmp.w	fp, #16
    1bf8:	d1ea      	bne.n	1bd0 <log_output_process+0x194>
	print_formatted(output, "|");
    1bfa:	4934      	ldr	r1, [pc, #208]	; (1ccc <log_output_process+0x290>)
    1bfc:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1bfe:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    1c02:	f7ff fefb 	bl	19fc <print_formatted>
		if (i < length) {
    1c06:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    1c08:	9b06      	ldr	r3, [sp, #24]
    1c0a:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    1c0c:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    1c10:	295f      	cmp	r1, #95	; 0x5f
    1c12:	bf28      	it	cs
    1c14:	222e      	movcs	r2, #46	; 0x2e
    1c16:	492e      	ldr	r1, [pc, #184]	; (1cd0 <log_output_process+0x294>)
    1c18:	4620      	mov	r0, r4
    1c1a:	f7ff feef 	bl	19fc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c1e:	f10b 0b01 	add.w	fp, fp, #1
    1c22:	f1bb 0f10 	cmp.w	fp, #16
    1c26:	d01d      	beq.n	1c64 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    1c28:	f01b 0f07 	tst.w	fp, #7
    1c2c:	d103      	bne.n	1c36 <log_output_process+0x1fa>
			print_formatted(output, " ");
    1c2e:	4649      	mov	r1, r9
    1c30:	4620      	mov	r0, r4
    1c32:	f7ff fee3 	bl	19fc <print_formatted>
		if (i < length) {
    1c36:	45d8      	cmp	r8, fp
    1c38:	465a      	mov	r2, fp
    1c3a:	d8e5      	bhi.n	1c08 <log_output_process+0x1cc>
			print_formatted(output, " ");
    1c3c:	4649      	mov	r1, r9
    1c3e:	4620      	mov	r0, r4
    1c40:	f7ff fedc 	bl	19fc <print_formatted>
    1c44:	e7eb      	b.n	1c1e <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    1c46:	481f      	ldr	r0, [pc, #124]	; (1cc4 <log_output_process+0x288>)
		prefix_offset = 0;
    1c48:	9d05      	ldr	r5, [sp, #20]
    1c4a:	e7a1      	b.n	1b90 <log_output_process+0x154>
		print_formatted(output, " ");
    1c4c:	4649      	mov	r1, r9
    1c4e:	4620      	mov	r0, r4
    1c50:	f7ff fed4 	bl	19fc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1c54:	f10b 0b01 	add.w	fp, fp, #1
    1c58:	e7b0      	b.n	1bbc <log_output_process+0x180>
			print_formatted(output, "   ");
    1c5a:	491e      	ldr	r1, [pc, #120]	; (1cd4 <log_output_process+0x298>)
    1c5c:	4620      	mov	r0, r4
    1c5e:	f7ff fecd 	bl	19fc <print_formatted>
    1c62:	e7c5      	b.n	1bf0 <log_output_process+0x1b4>
		data += length;
    1c64:	9b06      	ldr	r3, [sp, #24]
	} while (len);
    1c66:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    1c6a:	4443      	add	r3, r8
    1c6c:	9306      	str	r3, [sp, #24]
	} while (len);
    1c6e:	d19a      	bne.n	1ba6 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    1c70:	9b05      	ldr	r3, [sp, #20]
    1c72:	2b00      	cmp	r3, #0
    1c74:	f47f af44 	bne.w	1b00 <log_output_process+0xc4>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    1c78:	4620      	mov	r0, r4
}
    1c7a:	b00b      	add	sp, #44	; 0x2c
    1c7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    1c80:	f004 bff7 	b.w	6c72 <log_output_flush>
		print_formatted(output, "%s", log_color);
    1c84:	4a06      	ldr	r2, [pc, #24]	; (1ca0 <log_output_process+0x264>)
    1c86:	4905      	ldr	r1, [pc, #20]	; (1c9c <log_output_process+0x260>)
    1c88:	4620      	mov	r0, r4
    1c8a:	f7ff feb7 	bl	19fc <print_formatted>
}
    1c8e:	e73a      	b.n	1b06 <log_output_process+0xca>
    1c90:	00007ff2 	.word	0x00007ff2
    1c94:	00007ff6 	.word	0x00007ff6
    1c98:	00007d28 	.word	0x00007d28
    1c9c:	000085b7 	.word	0x000085b7
    1ca0:	00007fed 	.word	0x00007fed
    1ca4:	00007d3c 	.word	0x00007d3c
    1ca8:	0000801b 	.word	0x0000801b
    1cac:	00008021 	.word	0x00008021
    1cb0:	00008025 	.word	0x00008025
    1cb4:	20000450 	.word	0x20000450
    1cb8:	2000044c 	.word	0x2000044c
    1cbc:	00007fff 	.word	0x00007fff
    1cc0:	00006c2f 	.word	0x00006c2f
    1cc4:	00006c13 	.word	0x00006c13
    1cc8:	00006c65 	.word	0x00006c65
    1ccc:	00008034 	.word	0x00008034
    1cd0:	00008036 	.word	0x00008036
    1cd4:	00008030 	.word	0x00008030
    1cd8:	00008032 	.word	0x00008032
    1cdc:	0000802a 	.word	0x0000802a

00001ce0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    1ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    1ce4:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    1ce6:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    1ce8:	688e      	ldr	r6, [r1, #8]
    1cea:	b086      	sub	sp, #24
    1cec:	4605      	mov	r5, r0
    1cee:	460c      	mov	r4, r1
    1cf0:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    1cf2:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    1cf6:	b15b      	cbz	r3, 1d10 <log_output_msg_process+0x30>
    1cf8:	4a13      	ldr	r2, [pc, #76]	; (1d48 <log_output_msg_process+0x68>)
    1cfa:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    1cfc:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1d00:	2900      	cmp	r1, #0
    1d02:	db1f      	blt.n	1d44 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    1d04:	7820      	ldrb	r0, [r4, #0]
    1d06:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1d0a:	f7ff fe0b 	bl	1924 <log_source_name_get>
    1d0e:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    1d10:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    1d12:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    1d14:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    1d18:	9700      	str	r7, [sp, #0]
    1d1a:	f3c2 2249 	ubfx	r2, r2, #9, #10
    1d1e:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    1d20:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    1d24:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    1d28:	bf08      	it	eq
    1d2a:	2100      	moveq	r1, #0
    1d2c:	e9cd 0803 	strd	r0, r8, [sp, #12]
    1d30:	e9cd 1401 	strd	r1, r4, [sp, #4]
    1d34:	2200      	movs	r2, #0
    1d36:	4631      	mov	r1, r6
    1d38:	4628      	mov	r0, r5
    1d3a:	f7ff fe7f 	bl	1a3c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    1d3e:	b006      	add	sp, #24
    1d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    1d44:	2300      	movs	r3, #0
    1d46:	e7e3      	b.n	1d10 <log_output_msg_process+0x30>
    1d48:	00007c80 	.word	0x00007c80

00001d4c <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1d4c:	4a07      	ldr	r2, [pc, #28]	; (1d6c <log_output_timestamp_freq_set+0x20>)
    1d4e:	2100      	movs	r1, #0
    1d50:	2301      	movs	r3, #1
    1d52:	4290      	cmp	r0, r2
    1d54:	d806      	bhi.n	1d64 <log_output_timestamp_freq_set+0x18>
    1d56:	4a06      	ldr	r2, [pc, #24]	; (1d70 <log_output_timestamp_freq_set+0x24>)
    1d58:	b901      	cbnz	r1, 1d5c <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    1d5a:	2301      	movs	r3, #1
    1d5c:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1d5e:	4b05      	ldr	r3, [pc, #20]	; (1d74 <log_output_timestamp_freq_set+0x28>)
    1d60:	6018      	str	r0, [r3, #0]
}
    1d62:	4770      	bx	lr
		frequency /= 2U;
    1d64:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1d66:	005b      	lsls	r3, r3, #1
    1d68:	2101      	movs	r1, #1
    1d6a:	e7f2      	b.n	1d52 <log_output_timestamp_freq_set+0x6>
    1d6c:	000f4240 	.word	0x000f4240
    1d70:	2000044c 	.word	0x2000044c
    1d74:	20000450 	.word	0x20000450

00001d78 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1d78:	4b01      	ldr	r3, [pc, #4]	; (1d80 <log_backend_rtt_init+0x8>)
    1d7a:	2201      	movs	r2, #1
    1d7c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1d7e:	4770      	bx	lr
    1d80:	20000641 	.word	0x20000641

00001d84 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1d84:	4b01      	ldr	r3, [pc, #4]	; (1d8c <format_set+0x8>)
	return 0;
}
    1d86:	2000      	movs	r0, #0
	log_format_current = log_type;
    1d88:	6019      	str	r1, [r3, #0]
}
    1d8a:	4770      	bx	lr
    1d8c:	20000468 	.word	0x20000468

00001d90 <panic>:
	panic_mode = true;
    1d90:	4b02      	ldr	r3, [pc, #8]	; (1d9c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1d92:	4803      	ldr	r0, [pc, #12]	; (1da0 <panic+0x10>)
    1d94:	2201      	movs	r2, #1
    1d96:	701a      	strb	r2, [r3, #0]
    1d98:	f004 bf6b 	b.w	6c72 <log_output_flush>
    1d9c:	20000642 	.word	0x20000642
    1da0:	00007d6c 	.word	0x00007d6c

00001da4 <process>:
{
    1da4:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1da6:	4b06      	ldr	r3, [pc, #24]	; (1dc0 <process+0x1c>)
    1da8:	6818      	ldr	r0, [r3, #0]
{
    1daa:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1dac:	f7ff fd42 	bl	1834 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1db0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1db2:	4603      	mov	r3, r0
}
    1db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1db8:	4802      	ldr	r0, [pc, #8]	; (1dc4 <process+0x20>)
    1dba:	220f      	movs	r2, #15
    1dbc:	4718      	bx	r3
    1dbe:	bf00      	nop
    1dc0:	20000468 	.word	0x20000468
    1dc4:	00007d6c 	.word	0x00007d6c

00001dc8 <data_out_block_mode>:
{
    1dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dca:	4d19      	ldr	r5, [pc, #100]	; (1e30 <data_out_block_mode+0x68>)
    1dcc:	4607      	mov	r7, r0
    1dce:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1dd0:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1dd2:	4632      	mov	r2, r6
    1dd4:	4639      	mov	r1, r7
    1dd6:	2000      	movs	r0, #0
    1dd8:	f003 fc2a 	bl	5630 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    1ddc:	b1c8      	cbz	r0, 1e12 <data_out_block_mode+0x4a>
	host_present = true;
    1dde:	2301      	movs	r3, #1
    1de0:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    1de2:	4b14      	ldr	r3, [pc, #80]	; (1e34 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	b92b      	cbnz	r3, 1df4 <data_out_block_mode+0x2c>
}
    1de8:	4630      	mov	r0, r6
    1dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    1dec:	b95c      	cbnz	r4, 1e06 <data_out_block_mode+0x3e>
		host_present = false;
    1dee:	702c      	strb	r4, [r5, #0]
    1df0:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1df4:	2000      	movs	r0, #0
    1df6:	f003 fc8f 	bl	5718 <SEGGER_RTT_HasDataUp>
    1dfa:	2800      	cmp	r0, #0
    1dfc:	d0f4      	beq.n	1de8 <data_out_block_mode+0x20>
    1dfe:	782b      	ldrb	r3, [r5, #0]
    1e00:	2b00      	cmp	r3, #0
    1e02:	d1f3      	bne.n	1dec <data_out_block_mode+0x24>
    1e04:	e7f0      	b.n	1de8 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    1e06:	3c01      	subs	r4, #1
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1e08:	f241 3088 	movw	r0, #5000	; 0x1388
    1e0c:	f005 fde8 	bl	79e0 <z_impl_k_busy_wait>
}
    1e10:	e7f0      	b.n	1df4 <data_out_block_mode+0x2c>
		} else if (host_present) {
    1e12:	782b      	ldrb	r3, [r5, #0]
    1e14:	b113      	cbz	r3, 1e1c <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    1e16:	3c01      	subs	r4, #1
    1e18:	d104      	bne.n	1e24 <data_out_block_mode+0x5c>
		host_present = false;
    1e1a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1e1c:	782b      	ldrb	r3, [r5, #0]
    1e1e:	2b00      	cmp	r3, #0
    1e20:	d1d7      	bne.n	1dd2 <data_out_block_mode+0xa>
    1e22:	e7e1      	b.n	1de8 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    1e24:	f241 3088 	movw	r0, #5000	; 0x1388
    1e28:	f005 fdda 	bl	79e0 <z_impl_k_busy_wait>
    1e2c:	e7f6      	b.n	1e1c <data_out_block_mode+0x54>
    1e2e:	bf00      	nop
    1e30:	20000641 	.word	0x20000641
    1e34:	20000642 	.word	0x20000642

00001e38 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1e3c:	4605      	mov	r5, r0
	__asm__ volatile(
    1e3e:	f04f 0320 	mov.w	r3, #32
    1e42:	f3ef 8611 	mrs	r6, BASEPRI
    1e46:	f383 8812 	msr	BASEPRI_MAX, r3
    1e4a:	f3bf 8f6f 	isb	sy
	return list->head;
    1e4e:	4b0e      	ldr	r3, [pc, #56]	; (1e88 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e50:	4f0e      	ldr	r7, [pc, #56]	; (1e8c <pm_state_notify+0x54>)
    1e52:	681c      	ldr	r4, [r3, #0]
    1e54:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1e90 <pm_state_notify+0x58>
    1e58:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1e5c:	b92c      	cbnz	r4, 1e6a <pm_state_notify+0x32>
	__asm__ volatile(
    1e5e:	f386 8811 	msr	BASEPRI, r6
    1e62:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    1e6a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    1e6e:	2d00      	cmp	r5, #0
    1e70:	bf18      	it	ne
    1e72:	4613      	movne	r3, r2
		if (callback) {
    1e74:	b12b      	cbz	r3, 1e82 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1e76:	f898 2014 	ldrb.w	r2, [r8, #20]
    1e7a:	fb09 f202 	mul.w	r2, r9, r2
    1e7e:	5cb8      	ldrb	r0, [r7, r2]
    1e80:	4798      	blx	r3
	return node->next;
    1e82:	6824      	ldr	r4, [r4, #0]
    1e84:	e7ea      	b.n	1e5c <pm_state_notify+0x24>
    1e86:	bf00      	nop
    1e88:	20000484 	.word	0x20000484
    1e8c:	20000478 	.word	0x20000478
    1e90:	20000600 	.word	0x20000600

00001e94 <pm_system_resume>:

void pm_system_resume(void)
{
    1e94:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    1e96:	4b19      	ldr	r3, [pc, #100]	; (1efc <pm_system_resume+0x68>)
    1e98:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1e9a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1e9e:	f004 031f 	and.w	r3, r4, #31
    1ea2:	2201      	movs	r2, #1
    1ea4:	409a      	lsls	r2, r3
    1ea6:	4b16      	ldr	r3, [pc, #88]	; (1f00 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ea8:	0961      	lsrs	r1, r4, #5
    1eaa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1eae:	43d0      	mvns	r0, r2
    1eb0:	e853 1f00 	ldrex	r1, [r3]
    1eb4:	ea01 0500 	and.w	r5, r1, r0
    1eb8:	e843 5600 	strex	r6, r5, [r3]
    1ebc:	2e00      	cmp	r6, #0
    1ebe:	d1f7      	bne.n	1eb0 <pm_system_resume+0x1c>
    1ec0:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1ec4:	420a      	tst	r2, r1
    1ec6:	d013      	beq.n	1ef0 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    1ec8:	4b0e      	ldr	r3, [pc, #56]	; (1f04 <pm_system_resume+0x70>)
    1eca:	4d0f      	ldr	r5, [pc, #60]	; (1f08 <pm_system_resume+0x74>)
    1ecc:	b18b      	cbz	r3, 1ef2 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1ece:	230c      	movs	r3, #12
    1ed0:	4363      	muls	r3, r4
    1ed2:	18ea      	adds	r2, r5, r3
    1ed4:	5ce8      	ldrb	r0, [r5, r3]
    1ed6:	7851      	ldrb	r1, [r2, #1]
    1ed8:	f004 ff54 	bl	6d84 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1edc:	2000      	movs	r0, #0
    1ede:	f7ff ffab 	bl	1e38 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1ee2:	230c      	movs	r3, #12
    1ee4:	435c      	muls	r4, r3
    1ee6:	192a      	adds	r2, r5, r4
    1ee8:	2300      	movs	r3, #0
    1eea:	512b      	str	r3, [r5, r4]
    1eec:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1ef0:	bd70      	pop	{r4, r5, r6, pc}
    1ef2:	f383 8811 	msr	BASEPRI, r3
    1ef6:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1efa:	e7ef      	b.n	1edc <pm_system_resume+0x48>
    1efc:	20000600 	.word	0x20000600
    1f00:	2000048c 	.word	0x2000048c
    1f04:	00006d85 	.word	0x00006d85
    1f08:	20000478 	.word	0x20000478

00001f0c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    1f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    1f10:	4b35      	ldr	r3, [pc, #212]	; (1fe8 <pm_system_suspend+0xdc>)
{
    1f12:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    1f14:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    1f16:	f04f 0320 	mov.w	r3, #32
    1f1a:	f3ef 8811 	mrs	r8, BASEPRI
    1f1e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    1f26:	240c      	movs	r4, #12
    1f28:	4b30      	ldr	r3, [pc, #192]	; (1fec <pm_system_suspend+0xe0>)
    1f2a:	4e31      	ldr	r6, [pc, #196]	; (1ff0 <pm_system_suspend+0xe4>)
    1f2c:	436c      	muls	r4, r5
    1f2e:	191a      	adds	r2, r3, r4
    1f30:	5d19      	ldrb	r1, [r3, r4]
    1f32:	2900      	cmp	r1, #0
    1f34:	d04c      	beq.n	1fd0 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    1f36:	ca07      	ldmia	r2, {r0, r1, r2}
    1f38:	eb06 0c04 	add.w	ip, r6, r4
    1f3c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    1f40:	2200      	movs	r2, #0
    1f42:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    1f44:	f388 8811 	msr	BASEPRI, r8
    1f48:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1f4c:	230c      	movs	r3, #12
    1f4e:	436b      	muls	r3, r5
    1f50:	18f2      	adds	r2, r6, r3
    1f52:	5cf0      	ldrb	r0, [r6, r3]
    1f54:	2800      	cmp	r0, #0
    1f56:	d039      	beq.n	1fcc <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1f58:	1c7b      	adds	r3, r7, #1
    1f5a:	d010      	beq.n	1f7e <pm_system_suspend+0x72>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1f5c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1f60:	4c24      	ldr	r4, [pc, #144]	; (1ff4 <pm_system_suspend+0xe8>)
    1f62:	4a25      	ldr	r2, [pc, #148]	; (1ff8 <pm_system_suspend+0xec>)
    1f64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1f68:	2100      	movs	r1, #0
    1f6a:	fbec 4100 	umlal	r4, r1, ip, r0
    1f6e:	2300      	movs	r3, #0
    1f70:	4620      	mov	r0, r4
    1f72:	f7fe f8c5 	bl	100 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1f76:	2101      	movs	r1, #1
    1f78:	1a38      	subs	r0, r7, r0
    1f7a:	f005 fd11 	bl	79a0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1f7e:	f004 f917 	bl	61b0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1f82:	2001      	movs	r0, #1
    1f84:	f7ff ff58 	bl	1e38 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f88:	f3bf 8f5b 	dmb	ish
    1f8c:	4b1b      	ldr	r3, [pc, #108]	; (1ffc <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1f8e:	096a      	lsrs	r2, r5, #5
    1f90:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f94:	f005 011f 	and.w	r1, r5, #31
    1f98:	2201      	movs	r2, #1
    1f9a:	408a      	lsls	r2, r1
    1f9c:	e853 0f00 	ldrex	r0, [r3]
    1fa0:	4310      	orrs	r0, r2
    1fa2:	e843 0100 	strex	r1, r0, [r3]
    1fa6:	2900      	cmp	r1, #0
    1fa8:	d1f8      	bne.n	1f9c <pm_system_suspend+0x90>
    1faa:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1fae:	4b14      	ldr	r3, [pc, #80]	; (2000 <pm_system_suspend+0xf4>)
    1fb0:	b13b      	cbz	r3, 1fc2 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    1fb2:	230c      	movs	r3, #12
    1fb4:	fb03 f005 	mul.w	r0, r3, r5
    1fb8:	1833      	adds	r3, r6, r0
    1fba:	5c30      	ldrb	r0, [r6, r0]
    1fbc:	7859      	ldrb	r1, [r3, #1]
    1fbe:	f004 fed5 	bl	6d6c <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1fc2:	f7ff ff67 	bl	1e94 <pm_system_resume>
	k_sched_unlock();
    1fc6:	f004 f907 	bl	61d8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1fca:	2001      	movs	r0, #1
}
    1fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    1fd0:	4601      	mov	r1, r0
    1fd2:	4628      	mov	r0, r5
    1fd4:	f000 f816 	bl	2004 <pm_policy_next_state>
		if (info != NULL) {
    1fd8:	2800      	cmp	r0, #0
    1fda:	d0b3      	beq.n	1f44 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1fdc:	c807      	ldmia	r0, {r0, r1, r2}
    1fde:	4434      	add	r4, r6
    1fe0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1fe4:	e7ae      	b.n	1f44 <pm_system_suspend+0x38>
    1fe6:	bf00      	nop
    1fe8:	20000600 	.word	0x20000600
    1fec:	2000046c 	.word	0x2000046c
    1ff0:	20000478 	.word	0x20000478
    1ff4:	000f423f 	.word	0x000f423f
    1ff8:	000f4240 	.word	0x000f4240
    1ffc:	2000048c 	.word	0x2000048c
    2000:	00006d6d 	.word	0x00006d6d

00002004 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2008:	b085      	sub	sp, #20
    200a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    200c:	a903      	add	r1, sp, #12
    200e:	f000 f843 	bl	2098 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2012:	4b1e      	ldr	r3, [pc, #120]	; (208c <pm_policy_next_state+0x88>)
    2014:	9d03      	ldr	r5, [sp, #12]
    2016:	f8d3 a000 	ldr.w	sl, [r3]
    201a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2094 <pm_policy_next_state+0x90>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    201e:	1e43      	subs	r3, r0, #1
    2020:	b21b      	sxth	r3, r3
    2022:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2026:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2028:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    202c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2030:	f04f 0b00 	mov.w	fp, #0
    2034:	b924      	cbnz	r4, 2040 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2036:	46a1      	mov	r9, r4
}
    2038:	4648      	mov	r0, r9
    203a:	b005      	add	sp, #20
    203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2040:	6868      	ldr	r0, [r5, #4]
    2042:	4a13      	ldr	r2, [pc, #76]	; (2090 <pm_policy_next_state+0x8c>)
    2044:	46c4      	mov	ip, r8
    2046:	4659      	mov	r1, fp
    2048:	fbe0 c107 	umlal	ip, r1, r0, r7
    204c:	2300      	movs	r3, #0
    204e:	4660      	mov	r0, ip
    2050:	f7fe f856 	bl	100 <__aeabi_uldivmod>
    2054:	9001      	str	r0, [sp, #4]
    2056:	68a8      	ldr	r0, [r5, #8]
    2058:	4a0d      	ldr	r2, [pc, #52]	; (2090 <pm_policy_next_state+0x8c>)
    205a:	46c4      	mov	ip, r8
    205c:	4659      	mov	r1, fp
    205e:	fbe0 c107 	umlal	ip, r1, r0, r7
    2062:	2300      	movs	r3, #0
    2064:	4660      	mov	r0, ip
    2066:	f7fe f84b 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    206a:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    206e:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2070:	d001      	beq.n	2076 <pm_policy_next_state+0x72>
    2072:	4582      	cmp	sl, r0
    2074:	d905      	bls.n	2082 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    2076:	1c73      	adds	r3, r6, #1
    2078:	d0de      	beq.n	2038 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    207a:	9b01      	ldr	r3, [sp, #4]
    207c:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    207e:	42b0      	cmp	r0, r6
    2080:	d9da      	bls.n	2038 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2082:	3c01      	subs	r4, #1
    2084:	b2a4      	uxth	r4, r4
    2086:	3d0c      	subs	r5, #12
    2088:	e7d4      	b.n	2034 <pm_policy_next_state+0x30>
    208a:	bf00      	nop
    208c:	20000180 	.word	0x20000180
    2090:	000f4240 	.word	0x000f4240
    2094:	000f423f 	.word	0x000f423f

00002098 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2098:	b908      	cbnz	r0, 209e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    209a:	4b02      	ldr	r3, [pc, #8]	; (20a4 <pm_state_cpu_get_all+0xc>)
    209c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    209e:	2000      	movs	r0, #0
    20a0:	4770      	bx	lr
    20a2:	bf00      	nop
    20a4:	00007d7c 	.word	0x00007d7c

000020a8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    20a8:	4901      	ldr	r1, [pc, #4]	; (20b0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    20aa:	2210      	movs	r2, #16
	str	r2, [r1]
    20ac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    20ae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    20b0:	e000ed10 	.word	0xe000ed10

000020b4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    20b4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    20b6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    20b8:	f380 8811 	msr	BASEPRI, r0
	isb
    20bc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    20c0:	f3bf 8f4f 	dsb	sy
    20c4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    20c6:	b662      	cpsie	i
	isb
    20c8:	f3bf 8f6f 	isb	sy

	bx	lr
    20cc:	4770      	bx	lr
    20ce:	bf00      	nop

000020d0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    20d0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    20d2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    20d4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    20d8:	f3bf 8f4f 	dsb	sy
    20dc:	bf20      	wfe

	msr	BASEPRI, r0
    20de:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    20e2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    20e4:	4770      	bx	lr
    20e6:	bf00      	nop

000020e8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    20e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    20ec:	4680      	mov	r8, r0
    20ee:	b08c      	sub	sp, #48	; 0x30

	if (esf != NULL) {
    20f0:	460d      	mov	r5, r1
    20f2:	2900      	cmp	r1, #0
    20f4:	d077      	beq.n	21e6 <z_arm_fatal_error+0xfe>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    20f6:	688b      	ldr	r3, [r1, #8]
    20f8:	9305      	str	r3, [sp, #20]
    20fa:	684b      	ldr	r3, [r1, #4]
    20fc:	9304      	str	r3, [sp, #16]
    20fe:	680b      	ldr	r3, [r1, #0]
    2100:	9303      	str	r3, [sp, #12]
    2102:	2400      	movs	r4, #0
    2104:	4b3b      	ldr	r3, [pc, #236]	; (21f4 <z_arm_fatal_error+0x10c>)
    2106:	493c      	ldr	r1, [pc, #240]	; (21f8 <z_arm_fatal_error+0x110>)
    2108:	9302      	str	r3, [sp, #8]
    210a:	2201      	movs	r2, #1
    210c:	4623      	mov	r3, r4
    210e:	4620      	mov	r0, r4
    2110:	e9cd 4400 	strd	r4, r4, [sp]
    2114:	f004 fdba 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2118:	696b      	ldr	r3, [r5, #20]
    211a:	9305      	str	r3, [sp, #20]
    211c:	692b      	ldr	r3, [r5, #16]
    211e:	9304      	str	r3, [sp, #16]
    2120:	68eb      	ldr	r3, [r5, #12]
    2122:	9303      	str	r3, [sp, #12]
    2124:	4b35      	ldr	r3, [pc, #212]	; (21fc <z_arm_fatal_error+0x114>)
    2126:	4934      	ldr	r1, [pc, #208]	; (21f8 <z_arm_fatal_error+0x110>)
    2128:	9400      	str	r4, [sp, #0]
    212a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    212e:	2201      	movs	r2, #1
    2130:	4623      	mov	r3, r4
    2132:	4620      	mov	r0, r4
    2134:	f004 fdaa 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2138:	69eb      	ldr	r3, [r5, #28]
    213a:	9303      	str	r3, [sp, #12]
    213c:	4b30      	ldr	r3, [pc, #192]	; (2200 <z_arm_fatal_error+0x118>)
    213e:	492e      	ldr	r1, [pc, #184]	; (21f8 <z_arm_fatal_error+0x110>)
    2140:	9400      	str	r4, [sp, #0]
    2142:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2146:	2201      	movs	r2, #1
    2148:	4623      	mov	r3, r4
    214a:	4620      	mov	r0, r4
    214c:	f004 fd9e 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    2150:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 220c <z_arm_fatal_error+0x124>
    2154:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 21f8 <z_arm_fatal_error+0x110>
    2158:	462f      	mov	r7, r5
    215a:	4626      	mov	r6, r4
    215c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    2160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2164:	1ce3      	adds	r3, r4, #3
    2166:	9309      	str	r3, [sp, #36]	; 0x24
    2168:	edcd 7a0a 	vstr	s15, [sp, #40]	; 0x28
    216c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
    2170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2174:	1ca3      	adds	r3, r4, #2
    2176:	9307      	str	r3, [sp, #28]
    2178:	edcd 7a08 	vstr	s15, [sp, #32]
    217c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    2180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2184:	1c63      	adds	r3, r4, #1
    2186:	9305      	str	r3, [sp, #20]
    2188:	edcd 7a06 	vstr	s15, [sp, #24]
    218c:	edd7 7a08 	vldr	s15, [r7, #32]
    2190:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2194:	2300      	movs	r3, #0
    2196:	e9cd 9402 	strd	r9, r4, [sp, #8]
    219a:	e9cd 6600 	strd	r6, r6, [sp]
    219e:	edcd 7a04 	vstr	s15, [sp, #16]
    21a2:	2201      	movs	r2, #1
    21a4:	4651      	mov	r1, sl
    21a6:	4618      	mov	r0, r3
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    21a8:	3404      	adds	r4, #4
		LOG_ERR("s[%2d]:  0x%08x  s[%2d]:  0x%08x"
    21aa:	f004 fd6f 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
	for (int i = 0; i < ARRAY_SIZE(esf->fpu.s); i += 4) {
    21ae:	2c10      	cmp	r4, #16
    21b0:	f107 0710 	add.w	r7, r7, #16
    21b4:	d1d2      	bne.n	215c <z_arm_fatal_error+0x74>
	LOG_ERR("fpscr:  0x%08x", esf->fpu.fpscr);
    21b6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    21b8:	9303      	str	r3, [sp, #12]
    21ba:	4b12      	ldr	r3, [pc, #72]	; (2204 <z_arm_fatal_error+0x11c>)
    21bc:	490e      	ldr	r1, [pc, #56]	; (21f8 <z_arm_fatal_error+0x110>)
    21be:	9600      	str	r6, [sp, #0]
    21c0:	e9cd 6301 	strd	r6, r3, [sp, #4]
    21c4:	2300      	movs	r3, #0
    21c6:	4618      	mov	r0, r3
    21c8:	2201      	movs	r2, #1
    21ca:	f004 fd5f 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    21ce:	69ab      	ldr	r3, [r5, #24]
    21d0:	9303      	str	r3, [sp, #12]
    21d2:	4b0d      	ldr	r3, [pc, #52]	; (2208 <z_arm_fatal_error+0x120>)
    21d4:	4908      	ldr	r1, [pc, #32]	; (21f8 <z_arm_fatal_error+0x110>)
    21d6:	9600      	str	r6, [sp, #0]
    21d8:	e9cd 6301 	strd	r6, r3, [sp, #4]
    21dc:	2300      	movs	r3, #0
    21de:	2201      	movs	r2, #1
    21e0:	4618      	mov	r0, r3
    21e2:	f004 fd53 	bl	6c8c <z_log_msg_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    21e6:	4629      	mov	r1, r5
    21e8:	4640      	mov	r0, r8
}
    21ea:	b00c      	add	sp, #48	; 0x30
    21ec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_fatal_error(reason, esf);
    21f0:	f003 baac 	b.w	574c <z_fatal_error>
    21f4:	0000806c 	.word	0x0000806c
    21f8:	00007cd8 	.word	0x00007cd8
    21fc:	0000809b 	.word	0x0000809b
    2200:	000080ca 	.word	0x000080ca
    2204:	0000811c 	.word	0x0000811c
    2208:	0000812b 	.word	0x0000812b
    220c:	000080d9 	.word	0x000080d9

00002210 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2210:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2212:	2800      	cmp	r0, #0
    2214:	db07      	blt.n	2226 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2216:	4a04      	ldr	r2, [pc, #16]	; (2228 <arch_irq_enable+0x18>)
    2218:	0941      	lsrs	r1, r0, #5
    221a:	2301      	movs	r3, #1
    221c:	f000 001f 	and.w	r0, r0, #31
    2220:	4083      	lsls	r3, r0
    2222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2226:	4770      	bx	lr
    2228:	e000e100 	.word	0xe000e100

0000222c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    222c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    222e:	2800      	cmp	r0, #0
    2230:	db0c      	blt.n	224c <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2232:	0943      	lsrs	r3, r0, #5
    2234:	4906      	ldr	r1, [pc, #24]	; (2250 <arch_irq_disable+0x24>)
    2236:	f000 001f 	and.w	r0, r0, #31
    223a:	3320      	adds	r3, #32
    223c:	2201      	movs	r2, #1
    223e:	4082      	lsls	r2, r0
    2240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2244:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2248:	f3bf 8f6f 	isb	sy
}
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	e000e100 	.word	0xe000e100

00002254 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2254:	4b05      	ldr	r3, [pc, #20]	; (226c <arch_irq_is_enabled+0x18>)
    2256:	0942      	lsrs	r2, r0, #5
    2258:	f000 001f 	and.w	r0, r0, #31
    225c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2260:	2301      	movs	r3, #1
    2262:	fa03 f000 	lsl.w	r0, r3, r0
}
    2266:	4010      	ands	r0, r2
    2268:	4770      	bx	lr
    226a:	bf00      	nop
    226c:	e000e100 	.word	0xe000e100

00002270 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2270:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2272:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2274:	bfa8      	it	ge
    2276:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    227a:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    227e:	bfb8      	it	lt
    2280:	4b06      	ldrlt	r3, [pc, #24]	; (229c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2282:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2286:	bfac      	ite	ge
    2288:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    228c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2290:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2292:	bfb4      	ite	lt
    2294:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2296:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
}
    229a:	4770      	bx	lr
    229c:	e000ed14 	.word	0xe000ed14

000022a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    22a0:	bf30      	wfi
    b z_SysNmiOnReset
    22a2:	f7ff bffd 	b.w	22a0 <z_SysNmiOnReset>
    22a6:	bf00      	nop

000022a8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    22a8:	4a14      	ldr	r2, [pc, #80]	; (22fc <z_arm_prep_c+0x54>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    22aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    22ac:	4b14      	ldr	r3, [pc, #80]	; (2300 <z_arm_prep_c+0x58>)
    22ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    22b2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    22b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    22bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    22c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    22c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
    22c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    22cc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
    22d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
    22d4:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
    22d8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
    22dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22e0:	f3bf 8f6f 	isb	sy
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
    22e4:	2300      	movs	r3, #0
    22e6:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    22ea:	f003 facf 	bl	588c <z_bss_zero>
	z_data_copy();
    22ee:	f004 f8b7 	bl	6460 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    22f2:	f000 fc15 	bl	2b20 <z_arm_interrupt_init>
	z_cstart();
    22f6:	f003 fb0d 	bl	5914 <z_cstart>
    22fa:	bf00      	nop
    22fc:	00000000 	.word	0x00000000
    2300:	e000ed00 	.word	0xe000ed00

00002304 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2304:	4a09      	ldr	r2, [pc, #36]	; (232c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2306:	490a      	ldr	r1, [pc, #40]	; (2330 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2308:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    230a:	6809      	ldr	r1, [r1, #0]
    230c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    230e:	4909      	ldr	r1, [pc, #36]	; (2334 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2310:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2312:	684b      	ldr	r3, [r1, #4]
    2314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2318:	604b      	str	r3, [r1, #4]
    231a:	2300      	movs	r3, #0
    231c:	f383 8811 	msr	BASEPRI, r3
    2320:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2324:	6893      	ldr	r3, [r2, #8]
}
    2326:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2328:	4770      	bx	lr
    232a:	bf00      	nop
    232c:	20000600 	.word	0x20000600
    2330:	00007f08 	.word	0x00007f08
    2334:	e000ed00 	.word	0xe000ed00

00002338 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2338:	4921      	ldr	r1, [pc, #132]	; (23c0 <in_fp_endif+0x2a>)
    ldr r2, [r1, #_kernel_offset_to_current]
    233a:	688a      	ldr	r2, [r1, #8]

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
    233c:	f882 e0bd 	strb.w	lr, [r2, #189]	; 0xbd
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2340:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2344:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2346:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    234a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    234e:	f01e 0f10 	tst.w	lr, #16
    bne out_fp_endif
    2352:	d103      	bne.n	235c <out_fp_endif>
    /* FP context active: set FP state and store callee-saved registers.
     * Note: if Lazy FP stacking is enabled, storing the callee-saved
     * registers will automatically trigger FP state preservation in
     * the thread's stack. This will also clear the FPCCR.LSPACT flag.
     */
    add r0, r2, #_thread_offset_to_preempt_float
    2354:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vstmia r0, {s16-s31}
    2358:	ec80 8a10 	vstmia	r0, {s16-s31}

0000235c <out_fp_endif>:

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    235c:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    235e:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2362:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2366:	4f17      	ldr	r7, [pc, #92]	; (23c4 <in_fp_endif+0x2e>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2368:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    236c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
    236e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2370:	603e      	str	r6, [r7, #0]

#endif

#if defined(CONFIG_ARM_STORE_EXC_RETURN)
    /* Restore EXC_RETURN value. */
    ldrsb lr, [r2, #_thread_offset_to_mode_exc_return]
    2372:	f992 e0bd 	ldrsb.w	lr, [r2, #189]	; 0xbd

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2376:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2378:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    237a:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    237c:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FPU_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    tst lr, #_EXC_RETURN_FTYPE_Msk
    2380:	f01e 0f10 	tst.w	lr, #16
    beq in_fp_active
    2384:	d003      	beq.n	238e <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
    2386:	2300      	movs	r3, #0
    vmsr fpscr, r3
    2388:	eee1 3a10 	vmsr	fpscr, r3
    b in_fp_endif
    238c:	e003      	b.n	2396 <in_fp_endif>

0000238e <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    add r0, r2, #_thread_offset_to_preempt_float
    238e:	f102 007c 	add.w	r0, r2, #124	; 0x7c
    vldmia r0, {s16-s31}
    2392:	ec90 8a10 	vldmia	r0, {s16-s31}

00002396 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
    2396:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #_CONTROL_FPCA_Msk
    239a:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
    239e:	f383 8814 	msr	CONTROL, r3
    isb
    23a2:	f3bf 8f6f 	isb	sy
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    23a6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    23a8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    23aa:	f000 fc55 	bl	2c58 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    23ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    23b2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    23b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    23ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    23be:	4770      	bx	lr
    ldr r1, =_kernel
    23c0:	20000600 	.word	0x20000600
    ldr v4, =_SCS_ICSR
    23c4:	e000ed04 	.word	0xe000ed04

000023c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    23c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    23cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    23ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    23d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    23d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    23d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    23dc:	2902      	cmp	r1, #2
    beq _oops
    23de:	d0ff      	beq.n	23e0 <_oops>

000023e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    23e0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    23e2:	f004 fc63 	bl	6cac <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    23e6:	bd01      	pop	{r0, pc}

000023e8 <arch_new_thread>:
		thread->stack_info.start += MPU_GUARD_ALIGN_AND_SIZE;
		thread->stack_info.size -= MPU_GUARD_ALIGN_AND_SIZE;
	}
#endif /* CONFIG_USERSPACE */
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    23e8:	7b01      	ldrb	r1, [r0, #12]
    23ea:	0789      	lsls	r1, r1, #30
    23ec:	d505      	bpl.n	23fa <arch_new_thread+0x12>
		/* Larger guard needed due to lazy stacking of FP regs may
		 * overshoot the guard area without writing anything. We
		 * carve it out of the stack buffer as-needed instead of
		 * unconditionally reserving it.
		 */
		thread->stack_info.start += FP_GUARD_EXTRA_SIZE;
    23ee:	6e41      	ldr	r1, [r0, #100]	; 0x64
    23f0:	3140      	adds	r1, #64	; 0x40
    23f2:	6641      	str	r1, [r0, #100]	; 0x64
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
    23f4:	6e81      	ldr	r1, [r0, #104]	; 0x68
    23f6:	3940      	subs	r1, #64	; 0x40
    23f8:	6681      	str	r1, [r0, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    23fa:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    23fe:	9b00      	ldr	r3, [sp, #0]
    2400:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2404:	490f      	ldr	r1, [pc, #60]	; (2444 <arch_new_thread+0x5c>)
	iframe->a3 = (uint32_t)p2;
    2406:	9b01      	ldr	r3, [sp, #4]
    2408:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    240c:	9b02      	ldr	r3, [sp, #8]
    240e:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2412:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    241a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    241e:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2422:	2300      	movs	r3, #0
    2424:	6743      	str	r3, [r0, #116]	; 0x74
	thread->arch.mode = 0;
#if defined(CONFIG_ARM_STORE_EXC_RETURN)
	thread->arch.mode_exc_return = DEFAULT_EXC_RETURN;
#endif
#if FP_GUARD_EXTRA_SIZE > 0
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    2426:	7b03      	ldrb	r3, [r0, #12]
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    2428:	f013 0f02 	tst.w	r3, #2
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    242c:	f1a2 0220 	sub.w	r2, r2, #32
		thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    2430:	f64f 5308 	movw	r3, #64776	; 0xfd08
    2434:	bf08      	it	eq
    2436:	f44f 437d 	moveq.w	r3, #64768	; 0xfd00
	thread->callee_saved.psp = (uint32_t)iframe;
    243a:	6502      	str	r2, [r0, #80]	; 0x50
	if ((thread->base.user_options & K_FP_REGS) != 0) {
    243c:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2440:	4770      	bx	lr
    2442:	bf00      	nop
    2444:	000067e3 	.word	0x000067e3

00002448 <z_arm_mpu_stack_guard_and_fpu_adjust>:
 * policy and the stack_info values for the thread that is
 * being switched in.
 */
uint32_t z_arm_mpu_stack_guard_and_fpu_adjust(struct k_thread *thread)
{
	if (((thread->base.user_options & K_FP_REGS) != 0) ||
    2448:	7b03      	ldrb	r3, [r0, #12]
    244a:	f013 0f02 	tst.w	r3, #2
    244e:	4b19      	ldr	r3, [pc, #100]	; (24b4 <z_arm_mpu_stack_guard_and_fpu_adjust+0x6c>)
    2450:	d103      	bne.n	245a <z_arm_mpu_stack_guard_and_fpu_adjust+0x12>
    2452:	f890 20bd 	ldrb.w	r2, [r0, #189]	; 0xbd
    2456:	06d2      	lsls	r2, r2, #27
    2458:	d417      	bmi.n	248a <z_arm_mpu_stack_guard_and_fpu_adjust+0x42>
		 * The thread is not pre-tagged with K_FP_REGS, but it has
		 * generated an FP context. Activate lazy stacking and
		 * program a large MPU guard to detect privilege thread
		 * stack overflows.
		 */
		FPU->FPCCR |= FPU_FPCCR_LSPEN_Msk;
    245a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    245c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    2460:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    2462:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    2466:	0719      	lsls	r1, r3, #28
    2468:	d409      	bmi.n	247e <z_arm_mpu_stack_guard_and_fpu_adjust+0x36>
			thread->arch.mode |= Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    246a:	f043 0308 	orr.w	r3, r3, #8
    246e:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start +=
    2472:	6e43      	ldr	r3, [r0, #100]	; 0x64
    2474:	3340      	adds	r3, #64	; 0x40
    2476:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size -=
    2478:	6e83      	ldr	r3, [r0, #104]	; 0x68
    247a:	3b40      	subs	r3, #64	; 0x40
    247c:	6683      	str	r3, [r0, #104]	; 0x68

		z_arm_thread_stack_info_adjust(thread, true);

		/* Tag the thread with K_FP_REGS */
		thread->base.user_options |= K_FP_REGS;
    247e:	7b03      	ldrb	r3, [r0, #12]
    2480:	f043 0302 	orr.w	r3, r3, #2
    2484:	7303      	strb	r3, [r0, #12]

		return MPU_GUARD_ALIGN_AND_SIZE_FLOAT;
    2486:	2080      	movs	r0, #128	; 0x80
    2488:	4770      	bx	lr
	/* Thread is not pre-tagged with K_FP_REGS, and it has
	 * not been using the FPU. Since there is no active FPU
	 * context, de-activate lazy stacking and program the
	 * default MPU guard size.
	 */
	FPU->FPCCR &= (~FPU_FPCCR_LSPEN_Msk);
    248a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    248c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
    2490:	635a      	str	r2, [r3, #52]	; 0x34
		if ((thread->arch.mode &
    2492:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    2496:	071a      	lsls	r2, r3, #28
    2498:	d401      	bmi.n	249e <z_arm_mpu_stack_guard_and_fpu_adjust+0x56>

	z_arm_thread_stack_info_adjust(thread, false);

	return MPU_GUARD_ALIGN_AND_SIZE;
    249a:	2040      	movs	r0, #64	; 0x40
}
    249c:	4770      	bx	lr
			thread->arch.mode &= ~Z_ARM_MODE_MPU_GUARD_FLOAT_Msk;
    249e:	f023 0308 	bic.w	r3, r3, #8
    24a2:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
				thread->stack_info.start -=
    24a6:	6e43      	ldr	r3, [r0, #100]	; 0x64
    24a8:	3b40      	subs	r3, #64	; 0x40
    24aa:	6643      	str	r3, [r0, #100]	; 0x64
				thread->stack_info.size +=
    24ac:	6e83      	ldr	r3, [r0, #104]	; 0x68
    24ae:	3340      	adds	r3, #64	; 0x40
    24b0:	6683      	str	r3, [r0, #104]	; 0x68
    24b2:	e7f2      	b.n	249a <z_arm_mpu_stack_guard_and_fpu_adjust+0x52>
    24b4:	e000ef00 	.word	0xe000ef00

000024b8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    24b8:	4a0c      	ldr	r2, [pc, #48]	; (24ec <z_check_thread_stack_fail+0x34>)
{
    24ba:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    24bc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    24be:	b1a0      	cbz	r0, 24ea <z_check_thread_stack_fail+0x32>
#endif

#if (defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)) && \
	defined(CONFIG_MPU_STACK_GUARD)
	uint32_t guard_len =
		((_current->arch.mode & Z_ARM_MODE_MPU_GUARD_FLOAT_Msk) != 0) ?
    24c0:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    24c4:	6e40      	ldr	r0, [r0, #100]	; 0x64
		MPU_GUARD_ALIGN_AND_SIZE_FLOAT : MPU_GUARD_ALIGN_AND_SIZE;
    24c6:	f012 0f08 	tst.w	r2, #8
    24ca:	bf0c      	ite	eq
    24cc:	2240      	moveq	r2, #64	; 0x40
    24ce:	2280      	movne	r2, #128	; 0x80
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    24d0:	f113 0f16 	cmn.w	r3, #22
    24d4:	d004      	beq.n	24e0 <z_check_thread_stack_fail+0x28>
    24d6:	1a82      	subs	r2, r0, r2
    24d8:	429a      	cmp	r2, r3
    24da:	d805      	bhi.n	24e8 <z_check_thread_stack_fail+0x30>
    24dc:	4283      	cmp	r3, r0
    24de:	d203      	bcs.n	24e8 <z_check_thread_stack_fail+0x30>
		return 0;
    24e0:	4281      	cmp	r1, r0
    24e2:	bf28      	it	cs
    24e4:	2000      	movcs	r0, #0
    24e6:	4770      	bx	lr
    24e8:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    24ea:	4770      	bx	lr
    24ec:	20000600 	.word	0x20000600

000024f0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    24f0:	b508      	push	{r3, lr}
    24f2:	4614      	mov	r4, r2
    24f4:	460d      	mov	r5, r1
    24f6:	2200      	movs	r2, #0
    24f8:	eee1 2a10 	vmsr	fpscr, r2
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    24fc:	f3ef 8214 	mrs	r2, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    2500:	f022 0204 	bic.w	r2, r2, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    2504:	f382 8814 	msr	CONTROL, r2
  __ASM volatile ("isb 0xF":::"memory");
    2508:	f3bf 8f6f 	isb	sy
    250c:	f3bf 8f6f 	isb	sy
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2510:	4a08      	ldr	r2, [pc, #32]	; (2534 <arch_switch_to_main_thread+0x44>)
    2512:	6090      	str	r0, [r2, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2514:	f000 fba0 	bl	2c58 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2518:	4620      	mov	r0, r4
    251a:	f385 8809 	msr	PSP, r5
    251e:	2100      	movs	r1, #0
    2520:	b663      	cpsie	if
    2522:	f381 8811 	msr	BASEPRI, r1
    2526:	f3bf 8f6f 	isb	sy
    252a:	2200      	movs	r2, #0
    252c:	2300      	movs	r3, #0
    252e:	f004 f958 	bl	67e2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2532:	bf00      	nop
    2534:	20000600 	.word	0x20000600

00002538 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2538:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    253a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    253c:	4a0b      	ldr	r2, [pc, #44]	; (256c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    253e:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
    2540:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2542:	bf1e      	ittt	ne
	movne	r1, #0
    2544:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2546:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
    2548:	f005 f944 	blne	77d4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    254c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    254e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2552:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2556:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    255a:	4905      	ldr	r1, [pc, #20]	; (2570 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    255c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    255e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2560:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2562:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2566:	4903      	ldr	r1, [pc, #12]	; (2574 <_isr_wrapper+0x3c>)
	bx r1
    2568:	4708      	bx	r1
    256a:	0000      	.short	0x0000
	ldr r2, =_kernel
    256c:	20000600 	.word	0x20000600
	ldr r1, =_sw_isr_table
    2570:	00007ad4 	.word	0x00007ad4
	ldr r1, =z_arm_int_exit
    2574:	00002579 	.word	0x00002579

00002578 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2578:	4b04      	ldr	r3, [pc, #16]	; (258c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    257a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    257c:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
    257e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2580:	d003      	beq.n	258a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2582:	4903      	ldr	r1, [pc, #12]	; (2590 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2588:	600a      	str	r2, [r1, #0]

0000258a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    258a:	4770      	bx	lr
	ldr r3, =_kernel
    258c:	20000600 	.word	0x20000600
	ldr r1, =_SCS_ICSR
    2590:	e000ed04 	.word	0xe000ed04

00002594 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2594:	b5f0      	push	{r4, r5, r6, r7, lr}
    2596:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2598:	2400      	movs	r4, #0
    259a:	4b3b      	ldr	r3, [pc, #236]	; (2688 <bus_fault.constprop.0+0xf4>)
    259c:	9302      	str	r3, [sp, #8]
    259e:	e9cd 4400 	strd	r4, r4, [sp]
    25a2:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25a4:	4607      	mov	r7, r0
    25a6:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    25a8:	2201      	movs	r2, #1
    25aa:	4938      	ldr	r1, [pc, #224]	; (268c <bus_fault.constprop.0+0xf8>)
    25ac:	4620      	mov	r0, r4
    25ae:	f004 fb8c 	bl	6cca <z_log_msg_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25b2:	4b37      	ldr	r3, [pc, #220]	; (2690 <bus_fault.constprop.0+0xfc>)
    25b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25b6:	04db      	lsls	r3, r3, #19
    25b8:	d509      	bpl.n	25ce <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    25ba:	4b36      	ldr	r3, [pc, #216]	; (2694 <bus_fault.constprop.0+0x100>)
    25bc:	4933      	ldr	r1, [pc, #204]	; (268c <bus_fault.constprop.0+0xf8>)
    25be:	9400      	str	r4, [sp, #0]
    25c0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    25c4:	2201      	movs	r2, #1
    25c6:	4623      	mov	r3, r4
    25c8:	4620      	mov	r0, r4
    25ca:	f004 fb7e 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    25ce:	4b30      	ldr	r3, [pc, #192]	; (2690 <bus_fault.constprop.0+0xfc>)
    25d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25d2:	051d      	lsls	r5, r3, #20
    25d4:	d509      	bpl.n	25ea <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    25d6:	4b30      	ldr	r3, [pc, #192]	; (2698 <bus_fault.constprop.0+0x104>)
    25d8:	9302      	str	r3, [sp, #8]
    25da:	2300      	movs	r3, #0
    25dc:	e9cd 3300 	strd	r3, r3, [sp]
    25e0:	492a      	ldr	r1, [pc, #168]	; (268c <bus_fault.constprop.0+0xf8>)
    25e2:	2201      	movs	r2, #1
    25e4:	4618      	mov	r0, r3
    25e6:	f004 fb70 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    25ea:	4d29      	ldr	r5, [pc, #164]	; (2690 <bus_fault.constprop.0+0xfc>)
    25ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25ee:	059c      	lsls	r4, r3, #22
    25f0:	d51e      	bpl.n	2630 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    25f2:	2400      	movs	r4, #0
    25f4:	4b29      	ldr	r3, [pc, #164]	; (269c <bus_fault.constprop.0+0x108>)
    25f6:	9302      	str	r3, [sp, #8]
    25f8:	2201      	movs	r2, #1
    25fa:	4623      	mov	r3, r4
    25fc:	4620      	mov	r0, r4
    25fe:	e9cd 4400 	strd	r4, r4, [sp]
    2602:	4922      	ldr	r1, [pc, #136]	; (268c <bus_fault.constprop.0+0xf8>)
    2604:	f004 fb61 	bl	6cca <z_log_msg_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2608:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    260a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    260c:	0410      	lsls	r0, r2, #16
    260e:	d50f      	bpl.n	2630 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2610:	9303      	str	r3, [sp, #12]
    2612:	4b23      	ldr	r3, [pc, #140]	; (26a0 <bus_fault.constprop.0+0x10c>)
    2614:	491d      	ldr	r1, [pc, #116]	; (268c <bus_fault.constprop.0+0xf8>)
    2616:	9400      	str	r4, [sp, #0]
    2618:	e9cd 4301 	strd	r4, r3, [sp, #4]
    261c:	2201      	movs	r2, #1
    261e:	4623      	mov	r3, r4
    2620:	4620      	mov	r0, r4
    2622:	f004 fb52 	bl	6cca <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    2626:	b11f      	cbz	r7, 2630 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2628:	6aab      	ldr	r3, [r5, #40]	; 0x28
    262a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    262e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2630:	4b17      	ldr	r3, [pc, #92]	; (2690 <bus_fault.constprop.0+0xfc>)
    2632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2634:	0559      	lsls	r1, r3, #21
    2636:	d509      	bpl.n	264c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2638:	4b1a      	ldr	r3, [pc, #104]	; (26a4 <bus_fault.constprop.0+0x110>)
    263a:	9302      	str	r3, [sp, #8]
    263c:	2300      	movs	r3, #0
    263e:	e9cd 3300 	strd	r3, r3, [sp]
    2642:	4912      	ldr	r1, [pc, #72]	; (268c <bus_fault.constprop.0+0xf8>)
    2644:	2201      	movs	r2, #1
    2646:	4618      	mov	r0, r3
    2648:	f004 fb3f 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    264c:	4a10      	ldr	r2, [pc, #64]	; (2690 <bus_fault.constprop.0+0xfc>)
    264e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2650:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    2654:	d012      	beq.n	267c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    2656:	4b14      	ldr	r3, [pc, #80]	; (26a8 <bus_fault.constprop.0+0x114>)
    2658:	9302      	str	r3, [sp, #8]
    265a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    265c:	e9cd 3300 	strd	r3, r3, [sp]
    2660:	490a      	ldr	r1, [pc, #40]	; (268c <bus_fault.constprop.0+0xf8>)
    2662:	2201      	movs	r2, #1
    2664:	4618      	mov	r0, r3
    2666:	f004 fb30 	bl	6cca <z_log_msg_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    266a:	4a09      	ldr	r2, [pc, #36]	; (2690 <bus_fault.constprop.0+0xfc>)
    266c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    266e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2670:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2674:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2676:	7030      	strb	r0, [r6, #0]

	return reason;
}
    2678:	b005      	add	sp, #20
    267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    267c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    267e:	0492      	lsls	r2, r2, #18
    2680:	d5f3      	bpl.n	266a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2682:	4a0a      	ldr	r2, [pc, #40]	; (26ac <bus_fault.constprop.0+0x118>)
    2684:	9202      	str	r2, [sp, #8]
    2686:	e7e9      	b.n	265c <bus_fault.constprop.0+0xc8>
    2688:	00008159 	.word	0x00008159
    268c:	00007cd8 	.word	0x00007cd8
    2690:	e000ed00 	.word	0xe000ed00
    2694:	0000816f 	.word	0x0000816f
    2698:	00008180 	.word	0x00008180
    269c:	00008193 	.word	0x00008193
    26a0:	000081ac 	.word	0x000081ac
    26a4:	000081c1 	.word	0x000081c1
    26a8:	000081dc 	.word	0x000081dc
    26ac:	000081f4 	.word	0x000081f4

000026b0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    26b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    26b2:	2400      	movs	r4, #0
    26b4:	4b33      	ldr	r3, [pc, #204]	; (2784 <usage_fault.constprop.0+0xd4>)
    26b6:	9302      	str	r3, [sp, #8]
    26b8:	e9cd 4400 	strd	r4, r4, [sp]
    26bc:	4623      	mov	r3, r4
    26be:	4932      	ldr	r1, [pc, #200]	; (2788 <usage_fault.constprop.0+0xd8>)
    26c0:	2201      	movs	r2, #1
    26c2:	4620      	mov	r0, r4
    26c4:	f004 fb01 	bl	6cca <z_log_msg_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    26c8:	4b30      	ldr	r3, [pc, #192]	; (278c <usage_fault.constprop.0+0xdc>)
    26ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26cc:	019b      	lsls	r3, r3, #6
    26ce:	d509      	bpl.n	26e4 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    26d0:	4b2f      	ldr	r3, [pc, #188]	; (2790 <usage_fault.constprop.0+0xe0>)
    26d2:	492d      	ldr	r1, [pc, #180]	; (2788 <usage_fault.constprop.0+0xd8>)
    26d4:	9400      	str	r4, [sp, #0]
    26d6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    26da:	2201      	movs	r2, #1
    26dc:	4623      	mov	r3, r4
    26de:	4620      	mov	r0, r4
    26e0:	f004 faf3 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    26e4:	4b29      	ldr	r3, [pc, #164]	; (278c <usage_fault.constprop.0+0xdc>)
    26e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26e8:	01dc      	lsls	r4, r3, #7
    26ea:	d509      	bpl.n	2700 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    26ec:	4b29      	ldr	r3, [pc, #164]	; (2794 <usage_fault.constprop.0+0xe4>)
    26ee:	9302      	str	r3, [sp, #8]
    26f0:	2300      	movs	r3, #0
    26f2:	e9cd 3300 	strd	r3, r3, [sp]
    26f6:	4924      	ldr	r1, [pc, #144]	; (2788 <usage_fault.constprop.0+0xd8>)
    26f8:	2201      	movs	r2, #1
    26fa:	4618      	mov	r0, r3
    26fc:	f004 fae5 	bl	6cca <z_log_msg_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2700:	4b22      	ldr	r3, [pc, #136]	; (278c <usage_fault.constprop.0+0xdc>)
    2702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2704:	0318      	lsls	r0, r3, #12
    2706:	d509      	bpl.n	271c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    2708:	4b23      	ldr	r3, [pc, #140]	; (2798 <usage_fault.constprop.0+0xe8>)
    270a:	9302      	str	r3, [sp, #8]
    270c:	2300      	movs	r3, #0
    270e:	e9cd 3300 	strd	r3, r3, [sp]
    2712:	491d      	ldr	r1, [pc, #116]	; (2788 <usage_fault.constprop.0+0xd8>)
    2714:	2201      	movs	r2, #1
    2716:	4618      	mov	r0, r3
    2718:	f004 fad7 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    271c:	4b1b      	ldr	r3, [pc, #108]	; (278c <usage_fault.constprop.0+0xdc>)
    271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2720:	0359      	lsls	r1, r3, #13
    2722:	d509      	bpl.n	2738 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2724:	4b1d      	ldr	r3, [pc, #116]	; (279c <usage_fault.constprop.0+0xec>)
    2726:	9302      	str	r3, [sp, #8]
    2728:	2300      	movs	r3, #0
    272a:	e9cd 3300 	strd	r3, r3, [sp]
    272e:	4916      	ldr	r1, [pc, #88]	; (2788 <usage_fault.constprop.0+0xd8>)
    2730:	2201      	movs	r2, #1
    2732:	4618      	mov	r0, r3
    2734:	f004 fac9 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2738:	4b14      	ldr	r3, [pc, #80]	; (278c <usage_fault.constprop.0+0xdc>)
    273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    273c:	039a      	lsls	r2, r3, #14
    273e:	d509      	bpl.n	2754 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2740:	4b17      	ldr	r3, [pc, #92]	; (27a0 <usage_fault.constprop.0+0xf0>)
    2742:	9302      	str	r3, [sp, #8]
    2744:	2300      	movs	r3, #0
    2746:	e9cd 3300 	strd	r3, r3, [sp]
    274a:	490f      	ldr	r1, [pc, #60]	; (2788 <usage_fault.constprop.0+0xd8>)
    274c:	2201      	movs	r2, #1
    274e:	4618      	mov	r0, r3
    2750:	f004 fabb 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2754:	4b0d      	ldr	r3, [pc, #52]	; (278c <usage_fault.constprop.0+0xdc>)
    2756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2758:	03db      	lsls	r3, r3, #15
    275a:	d509      	bpl.n	2770 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    275c:	4b11      	ldr	r3, [pc, #68]	; (27a4 <usage_fault.constprop.0+0xf4>)
    275e:	9302      	str	r3, [sp, #8]
    2760:	2300      	movs	r3, #0
    2762:	e9cd 3300 	strd	r3, r3, [sp]
    2766:	4908      	ldr	r1, [pc, #32]	; (2788 <usage_fault.constprop.0+0xd8>)
    2768:	2201      	movs	r2, #1
    276a:	4618      	mov	r0, r3
    276c:	f004 faad 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2770:	4a06      	ldr	r2, [pc, #24]	; (278c <usage_fault.constprop.0+0xdc>)
    2772:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2774:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2778:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    277c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    277e:	6293      	str	r3, [r2, #40]	; 0x28
}
    2780:	b004      	add	sp, #16
    2782:	bd10      	pop	{r4, pc}
    2784:	00008223 	.word	0x00008223
    2788:	00007cd8 	.word	0x00007cd8
    278c:	e000ed00 	.word	0xe000ed00
    2790:	0000823b 	.word	0x0000823b
    2794:	0000824e 	.word	0x0000824e
    2798:	00008268 	.word	0x00008268
    279c:	00008286 	.word	0x00008286
    27a0:	000082ab 	.word	0x000082ab
    27a4:	000082c5 	.word	0x000082c5

000027a8 <mem_manage_fault>:
{
    27a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    27ac:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    27ae:	2400      	movs	r4, #0
    27b0:	4b49      	ldr	r3, [pc, #292]	; (28d8 <mem_manage_fault+0x130>)
    27b2:	9302      	str	r3, [sp, #8]
    27b4:	e9cd 4400 	strd	r4, r4, [sp]
    27b8:	4623      	mov	r3, r4
{
    27ba:	4680      	mov	r8, r0
    27bc:	4689      	mov	r9, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    27be:	4620      	mov	r0, r4
    27c0:	4946      	ldr	r1, [pc, #280]	; (28dc <mem_manage_fault+0x134>)
{
    27c2:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    27c4:	2201      	movs	r2, #1
    27c6:	f004 fa80 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    27ca:	4b45      	ldr	r3, [pc, #276]	; (28e0 <mem_manage_fault+0x138>)
    27cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27ce:	06d8      	lsls	r0, r3, #27
    27d0:	d509      	bpl.n	27e6 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    27d2:	4b44      	ldr	r3, [pc, #272]	; (28e4 <mem_manage_fault+0x13c>)
    27d4:	4941      	ldr	r1, [pc, #260]	; (28dc <mem_manage_fault+0x134>)
    27d6:	9400      	str	r4, [sp, #0]
    27d8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    27dc:	2201      	movs	r2, #1
    27de:	4623      	mov	r3, r4
    27e0:	4620      	mov	r0, r4
    27e2:	f004 fa72 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    27e6:	4b3e      	ldr	r3, [pc, #248]	; (28e0 <mem_manage_fault+0x138>)
    27e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    27ea:	0719      	lsls	r1, r3, #28
    27ec:	d509      	bpl.n	2802 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    27ee:	4b3e      	ldr	r3, [pc, #248]	; (28e8 <mem_manage_fault+0x140>)
    27f0:	9302      	str	r3, [sp, #8]
    27f2:	2300      	movs	r3, #0
    27f4:	e9cd 3300 	strd	r3, r3, [sp]
    27f8:	4938      	ldr	r1, [pc, #224]	; (28dc <mem_manage_fault+0x134>)
    27fa:	2201      	movs	r2, #1
    27fc:	4618      	mov	r0, r3
    27fe:	f004 fa64 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2802:	4d37      	ldr	r5, [pc, #220]	; (28e0 <mem_manage_fault+0x138>)
    2804:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2806:	079a      	lsls	r2, r3, #30
    2808:	d436      	bmi.n	2878 <mem_manage_fault+0xd0>
	uint32_t mmfar = -EINVAL;
    280a:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    280e:	4b34      	ldr	r3, [pc, #208]	; (28e0 <mem_manage_fault+0x138>)
    2810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2812:	07dd      	lsls	r5, r3, #31
    2814:	d509      	bpl.n	282a <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    2816:	4b35      	ldr	r3, [pc, #212]	; (28ec <mem_manage_fault+0x144>)
    2818:	9302      	str	r3, [sp, #8]
    281a:	2300      	movs	r3, #0
    281c:	e9cd 3300 	strd	r3, r3, [sp]
    2820:	492e      	ldr	r1, [pc, #184]	; (28dc <mem_manage_fault+0x134>)
    2822:	2201      	movs	r2, #1
    2824:	4618      	mov	r0, r3
    2826:	f004 fa50 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    282a:	4b2d      	ldr	r3, [pc, #180]	; (28e0 <mem_manage_fault+0x138>)
    282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    282e:	069c      	lsls	r4, r3, #26
    2830:	d509      	bpl.n	2846 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    2832:	4b2f      	ldr	r3, [pc, #188]	; (28f0 <mem_manage_fault+0x148>)
    2834:	9302      	str	r3, [sp, #8]
    2836:	2300      	movs	r3, #0
    2838:	e9cd 3300 	strd	r3, r3, [sp]
    283c:	4927      	ldr	r1, [pc, #156]	; (28dc <mem_manage_fault+0x134>)
    283e:	2201      	movs	r2, #1
    2840:	4618      	mov	r0, r3
    2842:	f004 fa42 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2846:	4c26      	ldr	r4, [pc, #152]	; (28e0 <mem_manage_fault+0x138>)
    2848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    284a:	06d8      	lsls	r0, r3, #27
    284c:	d436      	bmi.n	28bc <mem_manage_fault+0x114>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    284e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2850:	0799      	lsls	r1, r3, #30
    2852:	d433      	bmi.n	28bc <mem_manage_fault+0x114>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2854:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2858:	4a21      	ldr	r2, [pc, #132]	; (28e0 <mem_manage_fault+0x138>)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    285a:	069b      	lsls	r3, r3, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    285c:	bf42      	ittt	mi
    285e:	6a63      	ldrmi	r3, [r4, #36]	; 0x24
    2860:	f423 5300 	bicmi.w	r3, r3, #8192	; 0x2000
    2864:	6263      	strmi	r3, [r4, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2866:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2868:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    286c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    286e:	2300      	movs	r3, #0
    2870:	7033      	strb	r3, [r6, #0]
}
    2872:	b005      	add	sp, #20
    2874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2878:	2400      	movs	r4, #0
    287a:	4b1e      	ldr	r3, [pc, #120]	; (28f4 <mem_manage_fault+0x14c>)
    287c:	9302      	str	r3, [sp, #8]
    287e:	e9cd 4400 	strd	r4, r4, [sp]
    2882:	4623      	mov	r3, r4
    2884:	4915      	ldr	r1, [pc, #84]	; (28dc <mem_manage_fault+0x134>)
    2886:	2201      	movs	r2, #1
    2888:	4620      	mov	r0, r4
    288a:	f004 fa1e 	bl	6cca <z_log_msg_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    288e:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2890:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2892:	061b      	lsls	r3, r3, #24
    2894:	d5b9      	bpl.n	280a <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2896:	4b18      	ldr	r3, [pc, #96]	; (28f8 <mem_manage_fault+0x150>)
    2898:	4910      	ldr	r1, [pc, #64]	; (28dc <mem_manage_fault+0x134>)
    289a:	9703      	str	r7, [sp, #12]
    289c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    28a0:	9400      	str	r4, [sp, #0]
    28a2:	4623      	mov	r3, r4
    28a4:	2201      	movs	r2, #1
    28a6:	4620      	mov	r0, r4
    28a8:	f004 fa0f 	bl	6cca <z_log_msg_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    28ac:	f1b9 0f00 	cmp.w	r9, #0
    28b0:	d0ad      	beq.n	280e <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    28b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    28b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    28b8:	62ab      	str	r3, [r5, #40]	; 0x28
    28ba:	e7a8      	b.n	280e <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    28bc:	6863      	ldr	r3, [r4, #4]
    28be:	051a      	lsls	r2, r3, #20
    28c0:	d5c8      	bpl.n	2854 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    28c2:	4641      	mov	r1, r8
    28c4:	4638      	mov	r0, r7
    28c6:	f7ff fdf7 	bl	24b8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    28ca:	2800      	cmp	r0, #0
    28cc:	d0c2      	beq.n	2854 <mem_manage_fault+0xac>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    28ce:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    28d2:	2002      	movs	r0, #2
    28d4:	e7bf      	b.n	2856 <mem_manage_fault+0xae>
    28d6:	bf00      	nop
    28d8:	000082f0 	.word	0x000082f0
    28dc:	00007cd8 	.word	0x00007cd8
    28e0:	e000ed00 	.word	0xe000ed00
    28e4:	00008306 	.word	0x00008306
    28e8:	00008180 	.word	0x00008180
    28ec:	00008367 	.word	0x00008367
    28f0:	000081f4 	.word	0x000081f4
    28f4:	00008339 	.word	0x00008339
    28f8:	00008351 	.word	0x00008351

000028fc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    28fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2900:	4b72      	ldr	r3, [pc, #456]	; (2acc <z_arm_fault+0x1d0>)
    2902:	685f      	ldr	r7, [r3, #4]
{
    2904:	b0a2      	sub	sp, #136	; 0x88
    2906:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2908:	f3c7 0408 	ubfx	r4, r7, #0, #9
    290c:	2300      	movs	r3, #0
    290e:	f383 8811 	msr	BASEPRI, r3
    2912:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2916:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    291a:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    291e:	d10c      	bne.n	293a <z_arm_fault+0x3e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2920:	f002 000c 	and.w	r0, r2, #12
    2924:	2808      	cmp	r0, #8
    2926:	d119      	bne.n	295c <z_arm_fault+0x60>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2928:	4a69      	ldr	r2, [pc, #420]	; (2ad0 <z_arm_fault+0x1d4>)
    292a:	496a      	ldr	r1, [pc, #424]	; (2ad4 <z_arm_fault+0x1d8>)
    292c:	9300      	str	r3, [sp, #0]
    292e:	e9cd 3201 	strd	r3, r2, [sp, #4]
    2932:	4618      	mov	r0, r3
    2934:	2201      	movs	r2, #1
    2936:	f004 f9c8 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	*nested_exc = false;
    293a:	2600      	movs	r6, #0
		return NULL;
    293c:	4635      	mov	r5, r6
	*recoverable = false;
    293e:	f04f 0800 	mov.w	r8, #0
	switch (fault) {
    2942:	1ee3      	subs	r3, r4, #3
	*recoverable = false;
    2944:	f88d 801f 	strb.w	r8, [sp, #31]
	switch (fault) {
    2948:	2b09      	cmp	r3, #9
    294a:	f200 80a5 	bhi.w	2a98 <z_arm_fault+0x19c>
    294e:	e8df f003 	tbb	[pc, r3]
    2952:	990b      	.short	0x990b
    2954:	a3a3959d 	.word	0xa3a3959d
    2958:	a1a3a3a3 	.word	0xa1a3a3a3
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    295c:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    295e:	bf46      	itte	mi
    2960:	460d      	movmi	r5, r1
	*nested_exc = false;
    2962:	461e      	movmi	r6, r3
			*nested_exc = true;
    2964:	2601      	movpl	r6, #1
    2966:	e7ea      	b.n	293e <z_arm_fault+0x42>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2968:	4b5b      	ldr	r3, [pc, #364]	; (2ad8 <z_arm_fault+0x1dc>)
    296a:	495a      	ldr	r1, [pc, #360]	; (2ad4 <z_arm_fault+0x1d8>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    296c:	4f57      	ldr	r7, [pc, #348]	; (2acc <z_arm_fault+0x1d0>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    296e:	f8cd 8000 	str.w	r8, [sp]
    2972:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2976:	2300      	movs	r3, #0
    2978:	2201      	movs	r2, #1
    297a:	4618      	mov	r0, r3
    297c:	f004 f9a5 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	*recoverable = false;
    2980:	f88d 801f 	strb.w	r8, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2984:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    2986:	f014 0402 	ands.w	r4, r4, #2
    298a:	d005      	beq.n	2998 <z_arm_fault+0x9c>
		PR_EXC("  Bus fault on vector table read");
    298c:	4b53      	ldr	r3, [pc, #332]	; (2adc <z_arm_fault+0x1e0>)
	PR_FAULT_INFO(
    298e:	f8cd 8000 	str.w	r8, [sp]
    2992:	e9cd 8301 	strd	r8, r3, [sp, #4]
    2996:	e006      	b.n	29a6 <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    299a:	2b00      	cmp	r3, #0
    299c:	da0b      	bge.n	29b6 <z_arm_fault+0xba>
		PR_EXC("  Debug event");
    299e:	4b50      	ldr	r3, [pc, #320]	; (2ae0 <z_arm_fault+0x1e4>)
    29a0:	9400      	str	r4, [sp, #0]
    29a2:	e9cd 4301 	strd	r4, r3, [sp, #4]
	PR_FAULT_INFO(
    29a6:	2300      	movs	r3, #0
    29a8:	494a      	ldr	r1, [pc, #296]	; (2ad4 <z_arm_fault+0x1d8>)
    29aa:	2201      	movs	r2, #1
    29ac:	4618      	mov	r0, r3
    29ae:	f004 f98c 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    29b2:	2400      	movs	r4, #0
    29b4:	e03a      	b.n	2a2c <z_arm_fault+0x130>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    29b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    29b8:	005b      	lsls	r3, r3, #1
    29ba:	d5fa      	bpl.n	29b2 <z_arm_fault+0xb6>
		PR_EXC("  Fault escalation (see below)");
    29bc:	4b49      	ldr	r3, [pc, #292]	; (2ae4 <z_arm_fault+0x1e8>)
    29be:	4945      	ldr	r1, [pc, #276]	; (2ad4 <z_arm_fault+0x1d8>)
    29c0:	9400      	str	r4, [sp, #0]
    29c2:	e9cd 4301 	strd	r4, r3, [sp, #4]
    29c6:	2201      	movs	r2, #1
    29c8:	4623      	mov	r3, r4
    29ca:	4620      	mov	r0, r4
    29cc:	f004 f97d 	bl	6cca <z_log_msg_runtime_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    29d0:	697b      	ldr	r3, [r7, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    29d2:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    29d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    29d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    29da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29de:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    29e2:	697b      	ldr	r3, [r7, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    29e4:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    29e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    29ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    29ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29f2:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    29f6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    29fa:	429a      	cmp	r2, r3
    29fc:	d009      	beq.n	2a12 <z_arm_fault+0x116>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    29fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a00:	b2db      	uxtb	r3, r3
    2a02:	b36b      	cbz	r3, 2a60 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
    2a04:	f10d 021f 	add.w	r2, sp, #31
    2a08:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2a0a:	4628      	mov	r0, r5
    2a0c:	f7ff fecc 	bl	27a8 <mem_manage_fault>
    2a10:	e036      	b.n	2a80 <z_arm_fault+0x184>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2a12:	682b      	ldr	r3, [r5, #0]
    2a14:	9303      	str	r3, [sp, #12]
    2a16:	4b34      	ldr	r3, [pc, #208]	; (2ae8 <z_arm_fault+0x1ec>)
    2a18:	9400      	str	r4, [sp, #0]
    2a1a:	e9cd 4301 	strd	r4, r3, [sp, #4]
    2a1e:	4620      	mov	r0, r4
    2a20:	4623      	mov	r3, r4
    2a22:	492c      	ldr	r1, [pc, #176]	; (2ad4 <z_arm_fault+0x1d8>)
    2a24:	2201      	movs	r2, #1
    2a26:	f004 f950 	bl	6cca <z_log_msg_runtime_create.constprop.0>
			reason = esf->basic.r0;
    2a2a:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2a2c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2a30:	b99b      	cbnz	r3, 2a5a <z_arm_fault+0x15e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2a32:	2268      	movs	r2, #104	; 0x68
    2a34:	4629      	mov	r1, r5
    2a36:	a808      	add	r0, sp, #32
    2a38:	f004 f981 	bl	6d3e <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2a3e:	2e00      	cmp	r6, #0
    2a40:	d03e      	beq.n	2ac0 <z_arm_fault+0x1c4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2a42:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2a46:	b922      	cbnz	r2, 2a52 <z_arm_fault+0x156>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2a48:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2a4c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a50:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    2a52:	a908      	add	r1, sp, #32
    2a54:	4620      	mov	r0, r4
    2a56:	f7ff fb47 	bl	20e8 <z_arm_fatal_error>
}
    2a5a:	b022      	add	sp, #136	; 0x88
    2a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    2a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a62:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    2a66:	d005      	beq.n	2a74 <z_arm_fault+0x178>
			reason = bus_fault(esf, 1, recoverable);
    2a68:	f10d 011f 	add.w	r1, sp, #31
    2a6c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2a6e:	f7ff fd91 	bl	2594 <bus_fault.constprop.0>
    2a72:	e005      	b.n	2a80 <z_arm_fault+0x184>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    2a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    2a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    2a7a:	d39a      	bcc.n	29b2 <z_arm_fault+0xb6>
			reason = usage_fault(esf);
    2a7c:	f7ff fe18 	bl	26b0 <usage_fault.constprop.0>
    2a80:	4604      	mov	r4, r0
    2a82:	e7d3      	b.n	2a2c <z_arm_fault+0x130>
		reason = mem_manage_fault(esf, 0, recoverable);
    2a84:	f10d 021f 	add.w	r2, sp, #31
    2a88:	2100      	movs	r1, #0
    2a8a:	e7be      	b.n	2a0a <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    2a8c:	f10d 011f 	add.w	r1, sp, #31
    2a90:	2000      	movs	r0, #0
    2a92:	e7ec      	b.n	2a6e <z_arm_fault+0x172>
	PR_FAULT_INFO(
    2a94:	4b15      	ldr	r3, [pc, #84]	; (2aec <z_arm_fault+0x1f0>)
    2a96:	e77a      	b.n	298e <z_arm_fault+0x92>
	PR_FAULT_INFO("***** %s %d) *****",
    2a98:	4a15      	ldr	r2, [pc, #84]	; (2af0 <z_arm_fault+0x1f4>)
    2a9a:	4b16      	ldr	r3, [pc, #88]	; (2af4 <z_arm_fault+0x1f8>)
    2a9c:	490d      	ldr	r1, [pc, #52]	; (2ad4 <z_arm_fault+0x1d8>)
    2a9e:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    2aa2:	bf18      	it	ne
    2aa4:	4613      	movne	r3, r2
    2aa6:	3c10      	subs	r4, #16
    2aa8:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2aac:	4b12      	ldr	r3, [pc, #72]	; (2af8 <z_arm_fault+0x1fc>)
    2aae:	9302      	str	r3, [sp, #8]
    2ab0:	2300      	movs	r3, #0
    2ab2:	e9cd 3300 	strd	r3, r3, [sp]
    2ab6:	2201      	movs	r2, #1
    2ab8:	4618      	mov	r0, r3
    2aba:	f004 f906 	bl	6cca <z_log_msg_runtime_create.constprop.0>
}
    2abe:	e778      	b.n	29b2 <z_arm_fault+0xb6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2ac0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2ac4:	f023 0301 	bic.w	r3, r3, #1
    2ac8:	e7c2      	b.n	2a50 <z_arm_fault+0x154>
    2aca:	bf00      	nop
    2acc:	e000ed00 	.word	0xe000ed00
    2ad0:	000083b4 	.word	0x000083b4
    2ad4:	00007cd8 	.word	0x00007cd8
    2ad8:	000083df 	.word	0x000083df
    2adc:	000083f6 	.word	0x000083f6
    2ae0:	00008417 	.word	0x00008417
    2ae4:	00008425 	.word	0x00008425
    2ae8:	00008444 	.word	0x00008444
    2aec:	00008460 	.word	0x00008460
    2af0:	0000839b 	.word	0x0000839b
    2af4:	00008386 	.word	0x00008386
    2af8:	00008484 	.word	0x00008484

00002afc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2afc:	4a02      	ldr	r2, [pc, #8]	; (2b08 <z_arm_fault_init+0xc>)
    2afe:	6953      	ldr	r3, [r2, #20]
    2b00:	f043 0310 	orr.w	r3, r3, #16
    2b04:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2b06:	4770      	bx	lr
    2b08:	e000ed00 	.word	0xe000ed00

00002b0c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2b0c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2b10:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2b14:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2b16:	4672      	mov	r2, lr
	bl z_arm_fault
    2b18:	f7ff fef0 	bl	28fc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2b1c:	bd01      	pop	{r0, pc}
    2b1e:	bf00      	nop

00002b20 <z_arm_interrupt_init>:
    2b20:	4804      	ldr	r0, [pc, #16]	; (2b34 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2b22:	2300      	movs	r3, #0
    2b24:	2120      	movs	r1, #32
    2b26:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2b28:	3301      	adds	r3, #1
    2b2a:	2b30      	cmp	r3, #48	; 0x30
    2b2c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2b30:	d1f9      	bne.n	2b26 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2b32:	4770      	bx	lr
    2b34:	e000e100 	.word	0xe000e100

00002b38 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2b38:	2000      	movs	r0, #0
    msr CONTROL, r0
    2b3a:	f380 8814 	msr	CONTROL, r0
    isb
    2b3e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2b42:	f7fe fe0d 	bl	1760 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2b46:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2b48:	490d      	ldr	r1, [pc, #52]	; (2b80 <__start+0x48>)
    str r0, [r1]
    2b4a:	6008      	str	r0, [r1, #0]
    dsb
    2b4c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2b50:	480c      	ldr	r0, [pc, #48]	; (2b84 <__start+0x4c>)
    msr msp, r0
    2b52:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2b56:	f000 f82b 	bl	2bb0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b5a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2b5c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2b60:	4809      	ldr	r0, [pc, #36]	; (2b88 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2b62:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    2b66:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2b68:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2b6c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2b70:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2b72:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2b74:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2b78:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2b7c:	f7ff fb94 	bl	22a8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2b80:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2b84:	20001b00 	.word	0x20001b00
    ldr r0, =z_interrupt_stacks
    2b88:	20000d00 	.word	0x20000d00

00002b8c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2b8c:	4907      	ldr	r1, [pc, #28]	; (2bac <z_arm_clear_arm_mpu_config+0x20>)
    2b8e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2b92:	2300      	movs	r3, #0
	int num_regions =
    2b94:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2b98:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2b9a:	4293      	cmp	r3, r2
    2b9c:	db00      	blt.n	2ba0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2b9e:	4770      	bx	lr
  MPU->RNR = rnr;
    2ba0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2ba4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2ba8:	3301      	adds	r3, #1
    2baa:	e7f6      	b.n	2b9a <z_arm_clear_arm_mpu_config+0xe>
    2bac:	e000ed00 	.word	0xe000ed00

00002bb0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2bb0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2bb2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2bb4:	2300      	movs	r3, #0
    2bb6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2bba:	f7ff ffe7 	bl	2b8c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2bbe:	4b14      	ldr	r3, [pc, #80]	; (2c10 <z_arm_init_arch_hw_at_boot+0x60>)
    2bc0:	f04f 32ff 	mov.w	r2, #4294967295
    2bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2bc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2bd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2bd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2bd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2bdc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2be4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2be8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2bec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2bf0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2bf4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2bf8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2bfc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2c00:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2c04:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2c06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c0a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2c0e:	bd08      	pop	{r3, pc}
    2c10:	e000e100 	.word	0xe000e100

00002c14 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2c14:	4b08      	ldr	r3, [pc, #32]	; (2c38 <z_impl_k_thread_abort+0x24>)
    2c16:	689b      	ldr	r3, [r3, #8]
    2c18:	4283      	cmp	r3, r0
    2c1a:	d10b      	bne.n	2c34 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2c1c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2c20:	b143      	cbz	r3, 2c34 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c22:	4b06      	ldr	r3, [pc, #24]	; (2c3c <z_impl_k_thread_abort+0x28>)
    2c24:	685a      	ldr	r2, [r3, #4]
    2c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2c2a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2c32:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2c34:	f003 bbb4 	b.w	63a0 <z_thread_abort>
    2c38:	20000600 	.word	0x20000600
    2c3c:	e000ed00 	.word	0xe000ed00

00002c40 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2c40:	4b02      	ldr	r3, [pc, #8]	; (2c4c <z_arm_configure_static_mpu_regions+0xc>)
    2c42:	4a03      	ldr	r2, [pc, #12]	; (2c50 <z_arm_configure_static_mpu_regions+0x10>)
    2c44:	4803      	ldr	r0, [pc, #12]	; (2c54 <z_arm_configure_static_mpu_regions+0x14>)
    2c46:	2101      	movs	r1, #1
    2c48:	f000 b88c 	b.w	2d64 <arm_core_mpu_configure_static_mpu_regions>
    2c4c:	20020000 	.word	0x20020000
    2c50:	20000000 	.word	0x20000000
    2c54:	00007d7c 	.word	0x00007d7c

00002c58 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2c58:	b510      	push	{r4, lr}
    2c5a:	4604      	mov	r4, r0
	/* Privileged stack guard */
	uintptr_t guard_start;
	size_t guard_size = MPU_GUARD_ALIGN_AND_SIZE;

#if defined(CONFIG_FPU) && defined(CONFIG_FPU_SHARING)
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    2c5c:	f7ff fbf4 	bl	2448 <z_arm_mpu_stack_guard_and_fpu_adjust>
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2c60:	6e62      	ldr	r2, [r4, #100]	; 0x64
	guard_size = z_arm_mpu_stack_guard_and_fpu_adjust(thread);
    2c62:	4603      	mov	r3, r0
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2c64:	4805      	ldr	r0, [pc, #20]	; (2c7c <z_arm_configure_dynamic_mpu_regions+0x24>)
		guard_start = thread->stack_info.start - guard_size;
    2c66:	1ad2      	subs	r2, r2, r3
	dynamic_regions[region_num].size = guard_size;
    2c68:	e9c0 2300 	strd	r2, r3, [r0]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2c6c:	4b04      	ldr	r3, [pc, #16]	; (2c80 <z_arm_configure_dynamic_mpu_regions+0x28>)
    2c6e:	6083      	str	r3, [r0, #8]
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    2c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2c74:	2101      	movs	r1, #1
    2c76:	f000 b87f 	b.w	2d78 <arm_core_mpu_configure_dynamic_mpu_regions>
    2c7a:	bf00      	nop
    2c7c:	20000490 	.word	0x20000490
    2c80:	150b0000 	.word	0x150b0000

00002c84 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2c84:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2c86:	4e28      	ldr	r6, [pc, #160]	; (2d28 <mpu_configure_regions+0xa4>)
    2c88:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2c8a:	2500      	movs	r5, #0
    2c8c:	428d      	cmp	r5, r1
    2c8e:	da15      	bge.n	2cbc <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    2c90:	6844      	ldr	r4, [r0, #4]
    2c92:	2c00      	cmp	r4, #0
    2c94:	d045      	beq.n	2d22 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2c96:	b1d3      	cbz	r3, 2cce <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2c98:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2c9c:	ea14 0f0c 	tst.w	r4, ip
    2ca0:	d00f      	beq.n	2cc2 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2ca2:	4b22      	ldr	r3, [pc, #136]	; (2d2c <mpu_configure_regions+0xa8>)
    2ca4:	9503      	str	r5, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2ca6:	9302      	str	r3, [sp, #8]
    2ca8:	2300      	movs	r3, #0
    2caa:	2201      	movs	r2, #1
    2cac:	e9cd 3300 	strd	r3, r3, [sp]
    2cb0:	491f      	ldr	r1, [pc, #124]	; (2d30 <mpu_configure_regions+0xac>)
    2cb2:	4618      	mov	r0, r3
    2cb4:	f004 f819 	bl	6cea <z_log_msg_runtime_create.constprop.0>
			return -EINVAL;
    2cb8:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2cbc:	4610      	mov	r0, r2
    2cbe:	b005      	add	sp, #20
    2cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    2cc2:	2c1f      	cmp	r4, #31
    2cc4:	d9ed      	bls.n	2ca2 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    2cc6:	6807      	ldr	r7, [r0, #0]
		&&
    2cc8:	ea1c 0f07 	tst.w	ip, r7
    2ccc:	d1e9      	bne.n	2ca2 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2cce:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2cd0:	6807      	ldr	r7, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2cd2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2cd6:	fa5f fe82 	uxtb.w	lr, r2
	if (size <= 32U) {
    2cda:	d910      	bls.n	2cfe <mpu_configure_regions+0x7a>
	if (size > (1UL << 31)) {
    2cdc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2ce0:	d80f      	bhi.n	2d02 <mpu_configure_regions+0x7e>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2ce2:	3c01      	subs	r4, #1
    2ce4:	fab4 f484 	clz	r4, r4
    2ce8:	f1c4 041f 	rsb	r4, r4, #31
    2cec:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2cee:	f1be 0f07 	cmp.w	lr, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2cf2:	ea4c 0c04 	orr.w	ip, ip, r4
    2cf6:	d906      	bls.n	2d06 <mpu_configure_regions+0x82>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2cf8:	4b0e      	ldr	r3, [pc, #56]	; (2d34 <mpu_configure_regions+0xb0>)
    2cfa:	9203      	str	r2, [sp, #12]
    2cfc:	e7d3      	b.n	2ca6 <mpu_configure_regions+0x22>
		return REGION_32B;
    2cfe:	2408      	movs	r4, #8
    2d00:	e7f5      	b.n	2cee <mpu_configure_regions+0x6a>
		return REGION_4G;
    2d02:	243e      	movs	r4, #62	; 0x3e
    2d04:	e7f3      	b.n	2cee <mpu_configure_regions+0x6a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d06:	f027 041f 	bic.w	r4, r7, #31
				| MPU_RBAR_VALID_Msk | index;
    2d0a:	4314      	orrs	r4, r2
    2d0c:	f044 0410 	orr.w	r4, r4, #16
    2d10:	f8c6 2098 	str.w	r2, [r6, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d14:	f8c6 409c 	str.w	r4, [r6, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d18:	f04c 0401 	orr.w	r4, ip, #1
    2d1c:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
		reg_index++;
    2d20:	3201      	adds	r2, #1
	for (i = 0; i < regions_num; i++) {
    2d22:	3501      	adds	r5, #1
    2d24:	300c      	adds	r0, #12
    2d26:	e7b1      	b.n	2c8c <mpu_configure_regions+0x8>
    2d28:	e000ed00 	.word	0xe000ed00
    2d2c:	0000849b 	.word	0x0000849b
    2d30:	00007cd0 	.word	0x00007cd0
    2d34:	000084be 	.word	0x000084be

00002d38 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2d38:	4b04      	ldr	r3, [pc, #16]	; (2d4c <arm_core_mpu_enable+0x14>)
    2d3a:	2205      	movs	r2, #5
    2d3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2d40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d44:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2d48:	4770      	bx	lr
    2d4a:	bf00      	nop
    2d4c:	e000ed00 	.word	0xe000ed00

00002d50 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2d50:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2d54:	4b02      	ldr	r3, [pc, #8]	; (2d60 <arm_core_mpu_disable+0x10>)
    2d56:	2200      	movs	r2, #0
    2d58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2d5c:	4770      	bx	lr
    2d5e:	bf00      	nop
    2d60:	e000ed00 	.word	0xe000ed00

00002d64 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2d64:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2d66:	4c03      	ldr	r4, [pc, #12]	; (2d74 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2d68:	2301      	movs	r3, #1
    2d6a:	7822      	ldrb	r2, [r4, #0]
    2d6c:	f7ff ff8a 	bl	2c84 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2d70:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2d72:	bd10      	pop	{r4, pc}
    2d74:	20000644 	.word	0x20000644

00002d78 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    2d78:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2d7a:	4a09      	ldr	r2, [pc, #36]	; (2da0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2d7c:	2300      	movs	r3, #0
    2d7e:	7812      	ldrb	r2, [r2, #0]
    2d80:	f7ff ff80 	bl	2c84 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2d84:	f110 0f16 	cmn.w	r0, #22
    2d88:	d003      	beq.n	2d92 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2d8a:	4b06      	ldr	r3, [pc, #24]	; (2da4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2d8c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2d8e:	2807      	cmp	r0, #7
    2d90:	dd00      	ble.n	2d94 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2d92:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2d94:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2d98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2d9c:	3001      	adds	r0, #1
    2d9e:	e7f6      	b.n	2d8e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2da0:	20000644 	.word	0x20000644
    2da4:	e000ed00 	.word	0xe000ed00

00002da8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2da8:	4914      	ldr	r1, [pc, #80]	; (2dfc <z_arm_mpu_init+0x54>)
    2daa:	6808      	ldr	r0, [r1, #0]
    2dac:	2808      	cmp	r0, #8
{
    2dae:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2db0:	d821      	bhi.n	2df6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2db2:	f7ff ffcd 	bl	2d50 <arm_core_mpu_disable>
    2db6:	4c12      	ldr	r4, [pc, #72]	; (2e00 <z_arm_mpu_init+0x58>)
    2db8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2dba:	2200      	movs	r2, #0
    2dbc:	4290      	cmp	r0, r2
    2dbe:	f101 010c 	add.w	r1, r1, #12
    2dc2:	d105      	bne.n	2dd0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2dc4:	4b0f      	ldr	r3, [pc, #60]	; (2e04 <z_arm_mpu_init+0x5c>)
    2dc6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2dc8:	f7ff ffb6 	bl	2d38 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2dcc:	2000      	movs	r0, #0
}
    2dce:	bd10      	pop	{r4, pc}
    2dd0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2dd4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2dd8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2ddc:	4313      	orrs	r3, r2
    2dde:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2de2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2dea:	f043 0301 	orr.w	r3, r3, #1
    2dee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2df2:	3201      	adds	r2, #1
    2df4:	e7e2      	b.n	2dbc <z_arm_mpu_init+0x14>
		return -1;
    2df6:	f04f 30ff 	mov.w	r0, #4294967295
    2dfa:	e7e8      	b.n	2dce <z_arm_mpu_init+0x26>
    2dfc:	00007d88 	.word	0x00007d88
    2e00:	e000ed00 	.word	0xe000ed00
    2e04:	20000644 	.word	0x20000644

00002e08 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    2e08:	4b01      	ldr	r3, [pc, #4]	; (2e10 <__stdout_hook_install+0x8>)
    2e0a:	6018      	str	r0, [r3, #0]
}
    2e0c:	4770      	bx	lr
    2e0e:	bf00      	nop
    2e10:	20000184 	.word	0x20000184

00002e14 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2e14:	f04f 0320 	mov.w	r3, #32
    2e18:	f3ef 8211 	mrs	r2, BASEPRI
    2e1c:	f383 8812 	msr	BASEPRI_MAX, r3
    2e20:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2e24:	4906      	ldr	r1, [pc, #24]	; (2e40 <nordicsemi_nrf52_init+0x2c>)
    2e26:	2301      	movs	r3, #1
    2e28:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2e2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2e30:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2e34:	f382 8811 	msr	BASEPRI, r2
    2e38:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2e3c:	2000      	movs	r0, #0
    2e3e:	4770      	bx	lr
    2e40:	4001e000 	.word	0x4001e000

00002e44 <sys_arch_reboot>:
    *p_gpregret = val;
    2e44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e48:	b2c0      	uxtb	r0, r0
    2e4a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2e4e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e52:	4905      	ldr	r1, [pc, #20]	; (2e68 <sys_arch_reboot+0x24>)
    2e54:	4b05      	ldr	r3, [pc, #20]	; (2e6c <sys_arch_reboot+0x28>)
    2e56:	68ca      	ldr	r2, [r1, #12]
    2e58:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e5c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e5e:	60cb      	str	r3, [r1, #12]
    2e60:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e64:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e66:	e7fd      	b.n	2e64 <sys_arch_reboot+0x20>
    2e68:	e000ed00 	.word	0xe000ed00
    2e6c:	05fa0004 	.word	0x05fa0004

00002e70 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2e70:	b120      	cbz	r0, 2e7c <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2e72:	4b03      	ldr	r3, [pc, #12]	; (2e80 <arch_busy_wait+0x10>)
    2e74:	0180      	lsls	r0, r0, #6
    2e76:	f043 0301 	orr.w	r3, r3, #1
    2e7a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2e7c:	4770      	bx	lr
    2e7e:	bf00      	nop
    2e80:	00007d10 	.word	0x00007d10

00002e84 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2e84:	4b08      	ldr	r3, [pc, #32]	; (2ea8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e86:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2e88:	1ac3      	subs	r3, r0, r3
{
    2e8a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e8c:	4907      	ldr	r1, [pc, #28]	; (2eac <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2e8e:	109b      	asrs	r3, r3, #2
{
    2e90:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e92:	4359      	muls	r1, r3
    2e94:	4806      	ldr	r0, [pc, #24]	; (2eb0 <onoff_stop+0x2c>)
    2e96:	2240      	movs	r2, #64	; 0x40
    2e98:	f003 ff96 	bl	6dc8 <stop>
	notify(mgr, res);
    2e9c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e9e:	4601      	mov	r1, r0
	notify(mgr, res);
    2ea0:	4620      	mov	r0, r4
}
    2ea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2ea6:	4718      	bx	r3
    2ea8:	200004b0 	.word	0x200004b0
    2eac:	b6db6db7 	.word	0xb6db6db7
    2eb0:	00007a5c 	.word	0x00007a5c

00002eb4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2eb4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2eb6:	4c0c      	ldr	r4, [pc, #48]	; (2ee8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2eb8:	4a0c      	ldr	r2, [pc, #48]	; (2eec <onoff_start+0x38>)
    2eba:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2ebc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ebe:	9300      	str	r3, [sp, #0]
{
    2ec0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ec2:	460b      	mov	r3, r1
    2ec4:	490a      	ldr	r1, [pc, #40]	; (2ef0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2ec6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ec8:	4361      	muls	r1, r4
{
    2eca:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ecc:	4809      	ldr	r0, [pc, #36]	; (2ef4 <onoff_start+0x40>)
    2ece:	f003 ffa7 	bl	6e20 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2ed2:	1e01      	subs	r1, r0, #0
    2ed4:	da05      	bge.n	2ee2 <onoff_start+0x2e>
		notify(mgr, err);
    2ed6:	4630      	mov	r0, r6
    2ed8:	462b      	mov	r3, r5
	}
}
    2eda:	b002      	add	sp, #8
    2edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2ee0:	4718      	bx	r3
}
    2ee2:	b002      	add	sp, #8
    2ee4:	bd70      	pop	{r4, r5, r6, pc}
    2ee6:	bf00      	nop
    2ee8:	200004b0 	.word	0x200004b0
    2eec:	00006e8b 	.word	0x00006e8b
    2ef0:	b6db6db7 	.word	0xb6db6db7
    2ef4:	00007a5c 	.word	0x00007a5c

00002ef8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2ef8:	2200      	movs	r2, #0
{
    2efa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2efc:	2101      	movs	r1, #1
{
    2efe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f00:	4610      	mov	r0, r2
    2f02:	f7ff f9b5 	bl	2270 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2f06:	480f      	ldr	r0, [pc, #60]	; (2f44 <clk_init+0x4c>)
    2f08:	f001 fe24 	bl	4b54 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2f0c:	4b0e      	ldr	r3, [pc, #56]	; (2f48 <clk_init+0x50>)
    2f0e:	4298      	cmp	r0, r3
    2f10:	d115      	bne.n	2f3e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2f12:	f004 fae4 	bl	74de <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2f16:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f18:	490c      	ldr	r1, [pc, #48]	; (2f4c <clk_init+0x54>)
    2f1a:	4630      	mov	r0, r6
    2f1c:	f003 fd20 	bl	6960 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2f20:	2800      	cmp	r0, #0
    2f22:	db0b      	blt.n	2f3c <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2f24:	2501      	movs	r5, #1
    2f26:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    2f28:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f2a:	4908      	ldr	r1, [pc, #32]	; (2f4c <clk_init+0x54>)
    2f2c:	f104 001c 	add.w	r0, r4, #28
    2f30:	f003 fd16 	bl	6960 <onoff_manager_init>
		if (err < 0) {
    2f34:	2800      	cmp	r0, #0
    2f36:	db01      	blt.n	2f3c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2f38:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2f3a:	2000      	movs	r0, #0
}
    2f3c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2f3e:	f06f 0004 	mvn.w	r0, #4
    2f42:	e7fb      	b.n	2f3c <clk_init+0x44>
    2f44:	00002f85 	.word	0x00002f85
    2f48:	0bad0000 	.word	0x0bad0000
    2f4c:	00007da8 	.word	0x00007da8

00002f50 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2f50:	b570      	push	{r4, r5, r6, lr}
    2f52:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2f54:	230c      	movs	r3, #12
    2f56:	4809      	ldr	r0, [pc, #36]	; (2f7c <clkstarted_handle.constprop.0+0x2c>)
    2f58:	434b      	muls	r3, r1
    2f5a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2f5c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2f60:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2f62:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2f64:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2f66:	4418      	add	r0, r3
    2f68:	f003 ff1b 	bl	6da2 <set_on_state>
	if (callback) {
    2f6c:	b12d      	cbz	r5, 2f7a <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f6e:	4632      	mov	r2, r6
    2f70:	462b      	mov	r3, r5
    2f72:	4803      	ldr	r0, [pc, #12]	; (2f80 <clkstarted_handle.constprop.0+0x30>)
}
    2f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f78:	4718      	bx	r3
}
    2f7a:	bd70      	pop	{r4, r5, r6, pc}
    2f7c:	200004b0 	.word	0x200004b0
    2f80:	00007a5c 	.word	0x00007a5c

00002f84 <clock_event_handler>:
	switch (event) {
    2f84:	b110      	cbz	r0, 2f8c <clock_event_handler+0x8>
    2f86:	2801      	cmp	r0, #1
    2f88:	d004      	beq.n	2f94 <clock_event_handler+0x10>
    2f8a:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2f8c:	4b03      	ldr	r3, [pc, #12]	; (2f9c <clock_event_handler+0x18>)
    2f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f90:	075b      	lsls	r3, r3, #29
    2f92:	d101      	bne.n	2f98 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2f94:	f7ff bfdc 	b.w	2f50 <clkstarted_handle.constprop.0>
}
    2f98:	4770      	bx	lr
    2f9a:	bf00      	nop
    2f9c:	200004b0 	.word	0x200004b0

00002fa0 <generic_hfclk_start>:
{
    2fa0:	b508      	push	{r3, lr}
	__asm__ volatile(
    2fa2:	f04f 0320 	mov.w	r3, #32
    2fa6:	f3ef 8111 	mrs	r1, BASEPRI
    2faa:	f383 8812 	msr	BASEPRI_MAX, r3
    2fae:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2fb2:	4a12      	ldr	r2, [pc, #72]	; (2ffc <generic_hfclk_start+0x5c>)
    2fb4:	6813      	ldr	r3, [r2, #0]
    2fb6:	f043 0002 	orr.w	r0, r3, #2
    2fba:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2fbc:	07da      	lsls	r2, r3, #31
    2fbe:	d408      	bmi.n	2fd2 <generic_hfclk_start+0x32>
	__asm__ volatile(
    2fc0:	f381 8811 	msr	BASEPRI, r1
    2fc4:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2fc8:	2001      	movs	r0, #1
}
    2fca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    2fce:	f004 ba93 	b.w	74f8 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fd6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2fda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2fde:	07d3      	lsls	r3, r2, #31
    2fe0:	d5ee      	bpl.n	2fc0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    2fe2:	4807      	ldr	r0, [pc, #28]	; (3000 <generic_hfclk_start+0x60>)
    2fe4:	f003 fedd 	bl	6da2 <set_on_state>
    2fe8:	f381 8811 	msr	BASEPRI, r1
    2fec:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    2ff0:	2000      	movs	r0, #0
}
    2ff2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2ff6:	f7ff bfab 	b.w	2f50 <clkstarted_handle.constprop.0>
    2ffa:	bf00      	nop
    2ffc:	20000500 	.word	0x20000500
    3000:	200004f0 	.word	0x200004f0

00003004 <api_blocking_start>:
{
    3004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3006:	2200      	movs	r2, #0
    3008:	2301      	movs	r3, #1
    300a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    300e:	4a09      	ldr	r2, [pc, #36]	; (3034 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3010:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3014:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3016:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    301a:	f003 ff2f 	bl	6e7c <api_start>
	if (err < 0) {
    301e:	2800      	cmp	r0, #0
    3020:	db05      	blt.n	302e <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    3022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3026:	2300      	movs	r3, #0
    3028:	4668      	mov	r0, sp
    302a:	f002 fe8f 	bl	5d4c <z_impl_k_sem_take>
}
    302e:	b005      	add	sp, #20
    3030:	f85d fb04 	ldr.w	pc, [sp], #4
    3034:	00006eab 	.word	0x00006eab

00003038 <generic_hfclk_stop>:
{
    3038:	b510      	push	{r4, lr}
	__asm__ volatile(
    303a:	f04f 0320 	mov.w	r3, #32
    303e:	f3ef 8411 	mrs	r4, BASEPRI
    3042:	f383 8812 	msr	BASEPRI_MAX, r3
    3046:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    304a:	4a07      	ldr	r2, [pc, #28]	; (3068 <generic_hfclk_stop+0x30>)
    304c:	6813      	ldr	r3, [r2, #0]
    304e:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    3052:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    3054:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    3056:	d402      	bmi.n	305e <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3058:	2001      	movs	r0, #1
    305a:	f004 fa89 	bl	7570 <nrfx_clock_stop>
	__asm__ volatile(
    305e:	f384 8811 	msr	BASEPRI, r4
    3062:	f3bf 8f6f 	isb	sy
}
    3066:	bd10      	pop	{r4, pc}
    3068:	20000500 	.word	0x20000500

0000306c <z_nrf_clock_control_lf_on>:
{
    306c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3070:	4938      	ldr	r1, [pc, #224]	; (3154 <z_nrf_clock_control_lf_on+0xe8>)
    3072:	f3bf 8f5b 	dmb	ish
    3076:	4607      	mov	r7, r0
    3078:	2201      	movs	r2, #1
    307a:	e851 3f00 	ldrex	r3, [r1]
    307e:	e841 2000 	strex	r0, r2, [r1]
    3082:	2800      	cmp	r0, #0
    3084:	d1f9      	bne.n	307a <z_nrf_clock_control_lf_on+0xe>
    3086:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    308a:	b933      	cbnz	r3, 309a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    308c:	4932      	ldr	r1, [pc, #200]	; (3158 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    308e:	4833      	ldr	r0, [pc, #204]	; (315c <z_nrf_clock_control_lf_on+0xf0>)
    3090:	604b      	str	r3, [r1, #4]
    3092:	60cb      	str	r3, [r1, #12]
    3094:	608a      	str	r2, [r1, #8]
    3096:	f003 fc76 	bl	6986 <onoff_request>
	switch (start_mode) {
    309a:	1e7b      	subs	r3, r7, #1
    309c:	2b01      	cmp	r3, #1
    309e:	d82b      	bhi.n	30f8 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    30a0:	2f01      	cmp	r7, #1
    30a2:	d107      	bne.n	30b4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    30a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30a8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    30ac:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    30b0:	2b01      	cmp	r3, #1
    30b2:	d021      	beq.n	30f8 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30b4:	f004 fb86 	bl	77c4 <k_is_in_isr>
    30b8:	4605      	mov	r5, r0
    30ba:	b9f8      	cbnz	r0, 30fc <z_nrf_clock_control_lf_on+0x90>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    30bc:	4b28      	ldr	r3, [pc, #160]	; (3160 <z_nrf_clock_control_lf_on+0xf4>)
    30be:	781b      	ldrb	r3, [r3, #0]
    30c0:	b1e3      	cbz	r3, 30fc <z_nrf_clock_control_lf_on+0x90>
    p_reg->INTENCLR = mask;
    30c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30c6:	2202      	movs	r2, #2
    30c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    30cc:	4606      	mov	r6, r0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    30ce:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3164 <z_nrf_clock_control_lf_on+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30d2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    30d6:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30da:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    30de:	03d2      	lsls	r2, r2, #15
    30e0:	d516      	bpl.n	3110 <z_nrf_clock_control_lf_on+0xa4>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    30e2:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    30e6:	2b01      	cmp	r3, #1
    30e8:	d001      	beq.n	30ee <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    30ea:	2f01      	cmp	r7, #1
    30ec:	d110      	bne.n	3110 <z_nrf_clock_control_lf_on+0xa4>
	if (isr_mode) {
    30ee:	b35d      	cbz	r5, 3148 <z_nrf_clock_control_lf_on+0xdc>
    30f0:	f386 8811 	msr	BASEPRI, r6
    30f4:	f3bf 8f6f 	isb	sy
}
    30f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    30fc:	f04f 0320 	mov.w	r3, #32
    3100:	f3ef 8611 	mrs	r6, BASEPRI
    3104:	f383 8812 	msr	BASEPRI_MAX, r3
    3108:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    310c:	2501      	movs	r5, #1
    310e:	e7de      	b.n	30ce <z_nrf_clock_control_lf_on+0x62>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3110:	b1ad      	cbz	r5, 313e <z_nrf_clock_control_lf_on+0xd2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3112:	4630      	mov	r0, r6
    3114:	f7fe ffdc 	bl	20d0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3118:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    311c:	2b00      	cmp	r3, #0
    311e:	d1da      	bne.n	30d6 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3120:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3124:	2a00      	cmp	r2, #0
    3126:	d0d6      	beq.n	30d6 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3128:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    312c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3130:	2301      	movs	r3, #1
    3132:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
    3136:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    313a:	60a3      	str	r3, [r4, #8]
}
    313c:	e7cb      	b.n	30d6 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    313e:	2100      	movs	r1, #0
    3140:	2021      	movs	r0, #33	; 0x21
    3142:	f003 f8f3 	bl	632c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3146:	e7e7      	b.n	3118 <z_nrf_clock_control_lf_on+0xac>
    p_reg->INTENSET = mask;
    3148:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    314c:	2202      	movs	r2, #2
    314e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3152:	e7d1      	b.n	30f8 <z_nrf_clock_control_lf_on+0x8c>
    3154:	200004ac 	.word	0x200004ac
    3158:	2000049c 	.word	0x2000049c
    315c:	200004cc 	.word	0x200004cc
    3160:	20000a56 	.word	0x20000a56
    3164:	e000e100 	.word	0xe000e100

00003168 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    3168:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    316a:	4c04      	ldr	r4, [pc, #16]	; (317c <rtt_console_init+0x14>)
    316c:	4620      	mov	r0, r4
    316e:	f7fe f9e3 	bl	1538 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    3172:	4620      	mov	r0, r4
    3174:	f7ff fe48 	bl	2e08 <__stdout_hook_install>

	return 0;
}
    3178:	2000      	movs	r0, #0
    317a:	bd10      	pop	{r4, pc}
    317c:	00003181 	.word	0x00003181

00003180 <rtt_console_out>:
{
    3180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3182:	4e13      	ldr	r6, [pc, #76]	; (31d0 <rtt_console_out+0x50>)
	char c = (char)character;
    3184:	f88d 0007 	strb.w	r0, [sp, #7]
{
    3188:	4604      	mov	r4, r0
	char c = (char)character;
    318a:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    318c:	f002 face 	bl	572c <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3190:	2201      	movs	r2, #1
    3192:	f10d 0107 	add.w	r1, sp, #7
    3196:	2000      	movs	r0, #0
    3198:	f002 fa92 	bl	56c0 <SEGGER_RTT_WriteNoLock>
    319c:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    319e:	f002 facf 	bl	5740 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    31a2:	b127      	cbz	r7, 31ae <rtt_console_out+0x2e>
			host_present = true;
    31a4:	2301      	movs	r3, #1
    31a6:	7033      	strb	r3, [r6, #0]
}
    31a8:	4620      	mov	r0, r4
    31aa:	b003      	add	sp, #12
    31ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    31ae:	7833      	ldrb	r3, [r6, #0]
    31b0:	2b00      	cmp	r3, #0
    31b2:	d0f9      	beq.n	31a8 <rtt_console_out+0x28>
			if (max_cnt) {
    31b4:	3d01      	subs	r5, #1
    31b6:	d008      	beq.n	31ca <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    31b8:	f004 fb04 	bl	77c4 <k_is_in_isr>
    31bc:	2800      	cmp	r0, #0
    31be:	d1e5      	bne.n	318c <rtt_console_out+0xc>
    31c0:	2100      	movs	r1, #0
    31c2:	2042      	movs	r0, #66	; 0x42
    31c4:	f003 f8b2 	bl	632c <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    31c8:	e7e0      	b.n	318c <rtt_console_out+0xc>
				host_present = false;
    31ca:	7035      	strb	r5, [r6, #0]
    31cc:	e7ec      	b.n	31a8 <rtt_console_out+0x28>
    31ce:	bf00      	nop
    31d0:	20000645 	.word	0x20000645

000031d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    31d4:	b530      	push	{r4, r5, lr}
	return port->config;
    31d6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    31d8:	7b05      	ldrb	r5, [r0, #12]
    31da:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    31de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    31e2:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    31e4:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    31e8:	d105      	bne.n	31f6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    31ea:	4620      	mov	r0, r4
    31ec:	f001 ff34 	bl	5058 <nrfx_gpiote_trigger_disable>

		return 0;
    31f0:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    31f2:	b005      	add	sp, #20
    31f4:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    31f6:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    31f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    31fc:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3200:	d114      	bne.n	322c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3206:	bf0c      	ite	eq
    3208:	2304      	moveq	r3, #4
    320a:	2305      	movne	r3, #5
    320c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3210:	2300      	movs	r3, #0
    3212:	4619      	mov	r1, r3
    3214:	aa02      	add	r2, sp, #8
    3216:	4620      	mov	r0, r4
    3218:	f001 fd5c 	bl	4cd4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    321c:	4b1f      	ldr	r3, [pc, #124]	; (329c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    321e:	4298      	cmp	r0, r3
    3220:	d139      	bne.n	3296 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3222:	2101      	movs	r1, #1
    3224:	4620      	mov	r0, r4
    3226:	f001 fecf 	bl	4fc8 <nrfx_gpiote_trigger_enable>
	return 0;
    322a:	e7e1      	b.n	31f0 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    322c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3230:	d026      	beq.n	3280 <gpio_nrfx_pin_interrupt_configure+0xac>
    3232:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3236:	bf14      	ite	ne
    3238:	2301      	movne	r3, #1
    323a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    323c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3240:	6883      	ldr	r3, [r0, #8]
    3242:	40cb      	lsrs	r3, r1
    3244:	07d9      	lsls	r1, r3, #31
    3246:	d4e3      	bmi.n	3210 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3248:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    324c:	d1e0      	bne.n	3210 <gpio_nrfx_pin_interrupt_configure+0x3c>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    324e:	0962      	lsrs	r2, r4, #5
        case 1: return NRF_P1;
    3250:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3252:	f004 031f 	and.w	r3, r4, #31
        case 1: return NRF_P1;
    3256:	4a12      	ldr	r2, [pc, #72]	; (32a0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3258:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    325c:	bf18      	it	ne
    325e:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3266:	07db      	lsls	r3, r3, #31
    3268:	d4d2      	bmi.n	3210 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    326a:	f10d 0507 	add.w	r5, sp, #7
    326e:	4629      	mov	r1, r5
    3270:	4620      	mov	r0, r4
    3272:	f001 fe55 	bl	4f20 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3276:	4b0b      	ldr	r3, [pc, #44]	; (32a4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3278:	4298      	cmp	r0, r3
    327a:	d003      	beq.n	3284 <gpio_nrfx_pin_interrupt_configure+0xb0>
		trigger_config.p_in_channel = &ch;
    327c:	9503      	str	r5, [sp, #12]
    327e:	e7c7      	b.n	3210 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3280:	2303      	movs	r3, #3
    3282:	e7db      	b.n	323c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3284:	4628      	mov	r0, r5
    3286:	f001 fe99 	bl	4fbc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    328a:	4b04      	ldr	r3, [pc, #16]	; (329c <gpio_nrfx_pin_interrupt_configure+0xc8>)
    328c:	4298      	cmp	r0, r3
    328e:	d0f5      	beq.n	327c <gpio_nrfx_pin_interrupt_configure+0xa8>
				return -ENOMEM;
    3290:	f06f 000b 	mvn.w	r0, #11
    3294:	e7ad      	b.n	31f2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3296:	f06f 0015 	mvn.w	r0, #21
    329a:	e7aa      	b.n	31f2 <gpio_nrfx_pin_interrupt_configure+0x1e>
    329c:	0bad0000 	.word	0x0bad0000
    32a0:	50000300 	.word	0x50000300
    32a4:	0bad0004 	.word	0x0bad0004

000032a8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    32a8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    32aa:	f001 fe77 	bl	4f9c <nrfx_gpiote_is_init>
    32ae:	4604      	mov	r4, r0
    32b0:	b968      	cbnz	r0, 32ce <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    32b2:	f001 fe4b 	bl	4f4c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    32b6:	4b08      	ldr	r3, [pc, #32]	; (32d8 <gpio_nrfx_init+0x30>)
    32b8:	4298      	cmp	r0, r3
    32ba:	d10a      	bne.n	32d2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    32bc:	4807      	ldr	r0, [pc, #28]	; (32dc <gpio_nrfx_init+0x34>)
    32be:	4621      	mov	r1, r4
    32c0:	f001 fe28 	bl	4f14 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    32c4:	4622      	mov	r2, r4
    32c6:	2105      	movs	r1, #5
    32c8:	2006      	movs	r0, #6
    32ca:	f7fe ffd1 	bl	2270 <z_arm_irq_priority_set>
		return 0;
    32ce:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    32d0:	bd10      	pop	{r4, pc}
		return -EIO;
    32d2:	f06f 0004 	mvn.w	r0, #4
    32d6:	e7fb      	b.n	32d0 <gpio_nrfx_init+0x28>
    32d8:	0bad0000 	.word	0x0bad0000
    32dc:	000032e1 	.word	0x000032e1

000032e0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    32e0:	0942      	lsrs	r2, r0, #5
{
    32e2:	b570      	push	{r4, r5, r6, lr}
    32e4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    32e6:	d002      	beq.n	32ee <nrfx_gpio_handler+0xe>
    32e8:	2a01      	cmp	r2, #1
    32ea:	d017      	beq.n	331c <nrfx_gpio_handler+0x3c>
}
    32ec:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    32ee:	4e0d      	ldr	r6, [pc, #52]	; (3324 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    32f0:	6932      	ldr	r2, [r6, #16]
    32f2:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    32f4:	2900      	cmp	r1, #0
    32f6:	d0f9      	beq.n	32ec <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    32f8:	f003 031f 	and.w	r3, r3, #31
    32fc:	2501      	movs	r5, #1
    32fe:	680c      	ldr	r4, [r1, #0]
    3300:	409d      	lsls	r5, r3
    3302:	2900      	cmp	r1, #0
    3304:	d0f2      	beq.n	32ec <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    3306:	688a      	ldr	r2, [r1, #8]
    3308:	402a      	ands	r2, r5
    330a:	d002      	beq.n	3312 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    330c:	684b      	ldr	r3, [r1, #4]
    330e:	4630      	mov	r0, r6
    3310:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3312:	b12c      	cbz	r4, 3320 <nrfx_gpio_handler+0x40>
    3314:	6823      	ldr	r3, [r4, #0]
    3316:	4621      	mov	r1, r4
    3318:	461c      	mov	r4, r3
    331a:	e7f2      	b.n	3302 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    331c:	4e02      	ldr	r6, [pc, #8]	; (3328 <nrfx_gpio_handler+0x48>)
    331e:	e7e7      	b.n	32f0 <nrfx_gpio_handler+0x10>
    3320:	4623      	mov	r3, r4
    3322:	e7f8      	b.n	3316 <nrfx_gpio_handler+0x36>
    3324:	00007a8c 	.word	0x00007a8c
    3328:	00007a74 	.word	0x00007a74

0000332c <gpio_nrfx_pin_configure>:
{
    332c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3330:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3332:	7b3b      	ldrb	r3, [r7, #12]
    3334:	f001 051f 	and.w	r5, r1, #31
    3338:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    333c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    333e:	4628      	mov	r0, r5
    3340:	f10d 0103 	add.w	r1, sp, #3
{
    3344:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3346:	f001 fdeb 	bl	4f20 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    334a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    334e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3350:	d10b      	bne.n	336a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3352:	4628      	mov	r0, r5
    3354:	f001 fea8 	bl	50a8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3358:	4b3d      	ldr	r3, [pc, #244]	; (3450 <gpio_nrfx_pin_configure+0x124>)
    335a:	4598      	cmp	r8, r3
    335c:	d103      	bne.n	3366 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    335e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3362:	f001 fe25 	bl	4fb0 <nrfx_gpiote_channel_free>
		return 0;
    3366:	2000      	movs	r0, #0
    3368:	e00c      	b.n	3384 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    336a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    336c:	4619      	mov	r1, r3
    336e:	aa02      	add	r2, sp, #8
    3370:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3372:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3376:	f001 fcad 	bl	4cd4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    337a:	4b35      	ldr	r3, [pc, #212]	; (3450 <gpio_nrfx_pin_configure+0x124>)
    337c:	4298      	cmp	r0, r3
    337e:	d004      	beq.n	338a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3380:	f06f 0015 	mvn.w	r0, #21
}
    3384:	b004      	add	sp, #16
    3386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    338a:	4580      	cmp	r8, r0
    338c:	d103      	bne.n	3396 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    338e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3392:	f001 fe0d 	bl	4fb0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3396:	03a3      	lsls	r3, r4, #14
    3398:	d54b      	bpl.n	3432 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    339a:	f240 3306 	movw	r3, #774	; 0x306
    339e:	4023      	ands	r3, r4
    33a0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    33a4:	d019      	beq.n	33da <gpio_nrfx_pin_configure+0xae>
    33a6:	d80c      	bhi.n	33c2 <gpio_nrfx_pin_configure+0x96>
    33a8:	2b06      	cmp	r3, #6
    33aa:	d017      	beq.n	33dc <gpio_nrfx_pin_configure+0xb0>
    33ac:	d804      	bhi.n	33b8 <gpio_nrfx_pin_configure+0x8c>
    33ae:	b1ab      	cbz	r3, 33dc <gpio_nrfx_pin_configure+0xb0>
    33b0:	2b02      	cmp	r3, #2
    33b2:	d1e5      	bne.n	3380 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    33b4:	2304      	movs	r3, #4
    33b6:	e011      	b.n	33dc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    33b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    33bc:	d1e0      	bne.n	3380 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    33be:	2301      	movs	r3, #1
    33c0:	e00c      	b.n	33dc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    33c2:	f240 2202 	movw	r2, #514	; 0x202
    33c6:	4293      	cmp	r3, r2
    33c8:	d027      	beq.n	341a <gpio_nrfx_pin_configure+0xee>
    33ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    33ce:	d026      	beq.n	341e <gpio_nrfx_pin_configure+0xf2>
    33d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    33d4:	d1d4      	bne.n	3380 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    33d6:	2302      	movs	r3, #2
    33d8:	e000      	b.n	33dc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    33da:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    33dc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    33e0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    33e4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    33e8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    33ea:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    33ee:	bf54      	ite	pl
    33f0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    33f4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    33f6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    33f8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    33fc:	d511      	bpl.n	3422 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    33fe:	687a      	ldr	r2, [r7, #4]
    3400:	2301      	movs	r3, #1
    3402:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3404:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3408:	2200      	movs	r2, #0
    340a:	a901      	add	r1, sp, #4
    340c:	4628      	mov	r0, r5
    340e:	f001 fd0f 	bl	4e30 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3412:	4b0f      	ldr	r3, [pc, #60]	; (3450 <gpio_nrfx_pin_configure+0x124>)
    3414:	4298      	cmp	r0, r3
    3416:	d0a6      	beq.n	3366 <gpio_nrfx_pin_configure+0x3a>
    3418:	e7b2      	b.n	3380 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    341a:	2305      	movs	r3, #5
    341c:	e7de      	b.n	33dc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    341e:	2303      	movs	r3, #3
    3420:	e7dc      	b.n	33dc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3422:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3424:	bf41      	itttt	mi
    3426:	2301      	movmi	r3, #1
    3428:	687a      	ldrmi	r2, [r7, #4]
    342a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    342c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    3430:	e7ea      	b.n	3408 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    3432:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3434:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    3438:	bf54      	ite	pl
    343a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    343e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3440:	461a      	mov	r2, r3
    3442:	a901      	add	r1, sp, #4
    3444:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3446:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    344a:	f001 fc43 	bl	4cd4 <nrfx_gpiote_input_configure>
    344e:	e7e0      	b.n	3412 <gpio_nrfx_pin_configure+0xe6>
    3450:	0bad0000 	.word	0x0bad0000

00003454 <spi_nrfx_init>:
	return ret;
}
#endif /* CONFIG_PM_DEVICE */

static int spi_nrfx_init(const struct device *dev)
{
    3454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
    3458:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    345a:	6905      	ldr	r5, [r0, #16]
	int err;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    345c:	6a26      	ldr	r6, [r4, #32]
{
    345e:	b088      	sub	sp, #32
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3460:	aa07      	add	r2, sp, #28
    3462:	2100      	movs	r1, #0
    3464:	4630      	mov	r0, r6
    3466:	f003 ffca 	bl	73fe <pinctrl_lookup_state>
	if (ret < 0) {
    346a:	2800      	cmp	r0, #0
    346c:	db2a      	blt.n	34c4 <spi_nrfx_init+0x70>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    346e:	9b07      	ldr	r3, [sp, #28]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3470:	6832      	ldr	r2, [r6, #0]
    3472:	7919      	ldrb	r1, [r3, #4]
    3474:	6818      	ldr	r0, [r3, #0]
    3476:	f001 f9e7 	bl	4848 <pinctrl_configure_pins>
	if (err < 0) {
    347a:	2800      	cmp	r0, #0
    347c:	db22      	blt.n	34c4 <spi_nrfx_init+0x70>
		return err;
	}
#endif

	dev_config->irq_connect();
    347e:	69e3      	ldr	r3, [r4, #28]
    3480:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3482:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3484:	2601      	movs	r6, #1
    3486:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    348a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    348e:	429c      	cmp	r4, r3
    3490:	d304      	bcc.n	349c <spi_nrfx_init+0x48>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    3492:	4628      	mov	r0, r5
    3494:	f003 fdbf 	bl	7016 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    3498:	2000      	movs	r0, #0

	return 0;
    349a:	e013      	b.n	34c4 <spi_nrfx_init+0x70>
		if (!device_is_ready(cs_gpio->port)) {
    349c:	6820      	ldr	r0, [r4, #0]
    349e:	f004 f972 	bl	7786 <z_device_is_ready>
    34a2:	4603      	mov	r3, r0
    34a4:	b988      	cbnz	r0, 34ca <spi_nrfx_init+0x76>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    34a6:	7922      	ldrb	r2, [r4, #4]
    34a8:	9204      	str	r2, [sp, #16]
    34aa:	6822      	ldr	r2, [r4, #0]
    34ac:	4918      	ldr	r1, [pc, #96]	; (3510 <spi_nrfx_init+0xbc>)
    34ae:	6812      	ldr	r2, [r2, #0]
    34b0:	9203      	str	r2, [sp, #12]
    34b2:	4a18      	ldr	r2, [pc, #96]	; (3514 <spi_nrfx_init+0xc0>)
    34b4:	9000      	str	r0, [sp, #0]
    34b6:	e9cd 0201 	strd	r0, r2, [sp, #4]
    34ba:	2201      	movs	r2, #1
    34bc:	f003 fd65 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
    34c0:	f06f 0012 	mvn.w	r0, #18
}
    34c4:	b008      	add	sp, #32
    34c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    34ca:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    34cc:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    34ce:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    34d0:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    34d4:	f8d0 8008 	ldr.w	r8, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    34d8:	f8dc 7000 	ldr.w	r7, [ip]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    34dc:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    34de:	bf54      	ite	pl
    34e0:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    34e4:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    34e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    34ec:	fa06 fe01 	lsl.w	lr, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    34f0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    34f2:	bf4c      	ite	mi
    34f4:	ea47 070e 	orrmi.w	r7, r7, lr
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    34f8:	ea27 070e 	bicpl.w	r7, r7, lr
    34fc:	f8cc 7000 	str.w	r7, [ip]
	return api->pin_configure(port, pin, flags);
    3500:	f8d8 3000 	ldr.w	r3, [r8]
    3504:	4798      	blx	r3
		if (ret < 0) {
    3506:	2800      	cmp	r0, #0
    3508:	dbdc      	blt.n	34c4 <spi_nrfx_init+0x70>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    350a:	3408      	adds	r4, #8
    350c:	e7bb      	b.n	3486 <spi_nrfx_init+0x32>
    350e:	bf00      	nop
    3510:	00007cf0 	.word	0x00007cf0
    3514:	0000853c 	.word	0x0000853c

00003518 <transfer_next_chunk>:
{
    3518:	b530      	push	{r4, r5, lr}
    351a:	4603      	mov	r3, r0
    351c:	b085      	sub	sp, #20
	struct spi_nrfx_data *dev_data = dev->data;
    351e:	691d      	ldr	r5, [r3, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    3520:	6840      	ldr	r0, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3522:	6caa      	ldr	r2, [r5, #72]	; 0x48
		return ctx->rx_len;
    3524:	6d2b      	ldr	r3, [r5, #80]	; 0x50
	if (!ctx->tx_len) {
    3526:	bb2a      	cbnz	r2, 3574 <transfer_next_chunk+0x5c>
	if (chunk_len > 0) {
    3528:	b38b      	cbz	r3, 358e <transfer_next_chunk+0x76>
		xfer.p_tx_buffer = ctx->tx_buf;
    352a:	6c69      	ldr	r1, [r5, #68]	; 0x44
		dev_data->chunk_len = chunk_len;
    352c:	65ab      	str	r3, [r5, #88]	; 0x58
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    352e:	4614      	mov	r4, r2
		xfer.p_tx_buffer = ctx->tx_buf;
    3530:	461a      	mov	r2, r3
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3532:	e9cd 1400 	strd	r1, r4, [sp]
		xfer.p_rx_buffer = ctx->rx_buf;
    3536:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    3538:	9102      	str	r1, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    353a:	b331      	cbz	r1, 358a <transfer_next_chunk+0x72>
    353c:	2b00      	cmp	r3, #0
    353e:	bf18      	it	ne
    3540:	4613      	movne	r3, r2
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    3542:	2200      	movs	r2, #0
    3544:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3546:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    3548:	f001 ffa4 	bl	5494 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    354c:	4b11      	ldr	r3, [pc, #68]	; (3594 <transfer_next_chunk+0x7c>)
    354e:	4298      	cmp	r0, r3
    3550:	d00e      	beq.n	3570 <transfer_next_chunk+0x58>
		error = -EIO;
    3552:	f06f 0404 	mvn.w	r4, #4
	_spi_context_cs_control(ctx, on, false);
    3556:	2200      	movs	r2, #0
    3558:	4611      	mov	r1, r2
    355a:	4628      	mov	r0, r5
    355c:	f003 fd39 	bl	6fd2 <_spi_context_cs_control>
	ctx->sync_status = status;
    3560:	632c      	str	r4, [r5, #48]	; 0x30
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3562:	f105 0020 	add.w	r0, r5, #32
    3566:	f002 fbd1 	bl	5d0c <z_impl_k_sem_give>
	dev_data->busy = false;
    356a:	2300      	movs	r3, #0
    356c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    3570:	b005      	add	sp, #20
    3572:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
    3574:	6c69      	ldr	r1, [r5, #68]	; 0x44
    3576:	b113      	cbz	r3, 357e <transfer_next_chunk+0x66>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    3578:	429a      	cmp	r2, r3
    357a:	bf28      	it	cs
    357c:	461a      	movcs	r2, r3
		return ctx->tx_len;
    357e:	2900      	cmp	r1, #0
		dev_data->chunk_len = chunk_len;
    3580:	65aa      	str	r2, [r5, #88]	; 0x58
    3582:	bf14      	ite	ne
    3584:	4614      	movne	r4, r2
    3586:	2400      	moveq	r4, #0
    3588:	e7d3      	b.n	3532 <transfer_next_chunk+0x1a>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    358a:	460b      	mov	r3, r1
    358c:	e7d9      	b.n	3542 <transfer_next_chunk+0x2a>
	int error = 0;
    358e:	461c      	mov	r4, r3
    3590:	e7e1      	b.n	3556 <transfer_next_chunk+0x3e>
    3592:	bf00      	nop
    3594:	0bad0000 	.word	0x0bad0000

00003598 <event_handler>:
{
    3598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    359a:	7803      	ldrb	r3, [r0, #0]
{
    359c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    359e:	2b00      	cmp	r3, #0
    35a0:	d154      	bne.n	364c <event_handler+0xb4>
	if (!ctx->tx_len) {
    35a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    35a4:	6d89      	ldr	r1, [r1, #88]	; 0x58
    35a6:	b152      	cbz	r2, 35be <event_handler+0x26>
	if (len > ctx->tx_len) {
    35a8:	4291      	cmp	r1, r2
    35aa:	d91d      	bls.n	35e8 <event_handler+0x50>
		LOG_ERR("Update exceeds current buffer");
    35ac:	4a28      	ldr	r2, [pc, #160]	; (3650 <event_handler+0xb8>)
    35ae:	4929      	ldr	r1, [pc, #164]	; (3654 <event_handler+0xbc>)
    35b0:	9300      	str	r3, [sp, #0]
    35b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
    35b6:	4618      	mov	r0, r3
    35b8:	2201      	movs	r2, #1
    35ba:	f003 fce6 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
	if (!ctx->rx_len) {
    35be:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    35c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
    35c2:	b15b      	cbz	r3, 35dc <event_handler+0x44>
	if (len > ctx->rx_len) {
    35c4:	429a      	cmp	r2, r3
    35c6:	d928      	bls.n	361a <event_handler+0x82>
		LOG_ERR("Update exceeds current buffer");
    35c8:	4b21      	ldr	r3, [pc, #132]	; (3650 <event_handler+0xb8>)
    35ca:	9302      	str	r3, [sp, #8]
    35cc:	2300      	movs	r3, #0
    35ce:	e9cd 3300 	strd	r3, r3, [sp]
    35d2:	4920      	ldr	r1, [pc, #128]	; (3654 <event_handler+0xbc>)
    35d4:	2201      	movs	r2, #1
    35d6:	4618      	mov	r0, r3
    35d8:	f003 fcd7 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    35dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    35de:	b004      	add	sp, #16
    35e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    35e4:	f7ff bf98 	b.w	3518 <transfer_next_chunk>
	ctx->tx_len -= len;
    35e8:	1a52      	subs	r2, r2, r1
    35ea:	64a2      	str	r2, [r4, #72]	; 0x48
	if (!ctx->tx_len) {
    35ec:	b97a      	cbnz	r2, 360e <event_handler+0x76>
		++ctx->current_tx;
    35ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    35f0:	3308      	adds	r3, #8
    35f2:	6363      	str	r3, [r4, #52]	; 0x34
		--ctx->tx_count;
    35f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    35f6:	3b01      	subs	r3, #1
    35f8:	63a3      	str	r3, [r4, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    35fa:	f104 0248 	add.w	r2, r4, #72	; 0x48
    35fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3602:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3606:	f003 fcad 	bl	6f64 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    360a:	6460      	str	r0, [r4, #68]	; 0x44
    360c:	e7d7      	b.n	35be <event_handler+0x26>
	} else if (ctx->tx_buf) {
    360e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3610:	2b00      	cmp	r3, #0
    3612:	d0d4      	beq.n	35be <event_handler+0x26>
		ctx->tx_buf += dfs * len;
    3614:	440b      	add	r3, r1
    3616:	6463      	str	r3, [r4, #68]	; 0x44
    3618:	e7d1      	b.n	35be <event_handler+0x26>
	ctx->rx_len -= len;
    361a:	1a9b      	subs	r3, r3, r2
    361c:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    361e:	b97b      	cbnz	r3, 3640 <event_handler+0xa8>
		++ctx->current_rx;
    3620:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3622:	3308      	adds	r3, #8
    3624:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    3626:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3628:	3b01      	subs	r3, #1
    362a:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    362c:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3630:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3634:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3638:	f003 fc94 	bl	6f64 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    363c:	64e0      	str	r0, [r4, #76]	; 0x4c
    363e:	e7cd      	b.n	35dc <event_handler+0x44>
	} else if (ctx->rx_buf) {
    3640:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3642:	2b00      	cmp	r3, #0
    3644:	d0ca      	beq.n	35dc <event_handler+0x44>
		ctx->rx_buf += dfs * len;
    3646:	4413      	add	r3, r2
    3648:	64e3      	str	r3, [r4, #76]	; 0x4c
    364a:	e7c7      	b.n	35dc <event_handler+0x44>
}
    364c:	b004      	add	sp, #16
    364e:	bd10      	pop	{r4, pc}
    3650:	00008560 	.word	0x00008560
    3654:	00007cf0 	.word	0x00007cf0

00003658 <spi_nrfx_transceive>:
{
    3658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    365c:	4699      	mov	r9, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    365e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3660:	6904      	ldr	r4, [r0, #16]
{
    3662:	460f      	mov	r7, r1
    3664:	0499      	lsls	r1, r3, #18
    3666:	b08d      	sub	sp, #52	; 0x34
    3668:	4680      	mov	r8, r0
    366a:	4692      	mov	sl, r2
    366c:	d434      	bmi.n	36d8 <spi_nrfx_transceive+0x80>
	return z_impl_k_sem_take(sem, timeout);
    366e:	f04f 32ff 	mov.w	r2, #4294967295
    3672:	f04f 33ff 	mov.w	r3, #4294967295
    3676:	f104 0010 	add.w	r0, r4, #16
    367a:	f002 fb67 	bl	5d4c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    367e:	6067      	str	r7, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3680:	f8d8 b010 	ldr.w	fp, [r8, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    3684:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3688:	9304      	str	r3, [sp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    368a:	f89b 305d 	ldrb.w	r3, [fp, #93]	; 0x5d
    368e:	9305      	str	r3, [sp, #20]
    3690:	b123      	cbz	r3, 369c <spi_nrfx_transceive+0x44>
    3692:	f8db 3000 	ldr.w	r3, [fp]
    3696:	429f      	cmp	r7, r3
    3698:	f000 80bd 	beq.w	3816 <spi_nrfx_transceive+0x1be>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    369c:	88be      	ldrh	r6, [r7, #4]
    369e:	f416 6300 	ands.w	r3, r6, #2048	; 0x800
    36a2:	d020      	beq.n	36e6 <spi_nrfx_transceive+0x8e>
		LOG_ERR("Half-duplex not supported");
    36a4:	4b92      	ldr	r3, [pc, #584]	; (38f0 <spi_nrfx_transceive+0x298>)
    36a6:	9302      	str	r3, [sp, #8]
    36a8:	2300      	movs	r3, #0
    36aa:	e9cd 3300 	strd	r3, r3, [sp]
    36ae:	4991      	ldr	r1, [pc, #580]	; (38f4 <spi_nrfx_transceive+0x29c>)
    36b0:	2201      	movs	r2, #1
    36b2:	4618      	mov	r0, r3
    36b4:	f003 fc69 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
    36b8:	f06f 0585 	mvn.w	r5, #133	; 0x85
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    36bc:	6823      	ldr	r3, [r4, #0]
    36be:	889b      	ldrh	r3, [r3, #4]
    36c0:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    36c4:	d104      	bne.n	36d0 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    36c6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    36c8:	f104 0010 	add.w	r0, r4, #16
    36cc:	f002 fb1e 	bl	5d0c <z_impl_k_sem_give>
}
    36d0:	4628      	mov	r0, r5
    36d2:	b00d      	add	sp, #52	; 0x34
    36d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    36d8:	69a3      	ldr	r3, [r4, #24]
    36da:	2b00      	cmp	r3, #0
    36dc:	d1c7      	bne.n	366e <spi_nrfx_transceive+0x16>
		(k_sem_count_get(&ctx->lock) == 0) &&
    36de:	6863      	ldr	r3, [r4, #4]
    36e0:	429f      	cmp	r7, r3
    36e2:	d1c4      	bne.n	366e <spi_nrfx_transceive+0x16>
    36e4:	e7cc      	b.n	3680 <spi_nrfx_transceive+0x28>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    36e6:	f016 0201 	ands.w	r2, r6, #1
    36ea:	d00e      	beq.n	370a <spi_nrfx_transceive+0xb2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    36ec:	f8d8 2000 	ldr.w	r2, [r8]
    36f0:	9203      	str	r2, [sp, #12]
    36f2:	4a81      	ldr	r2, [pc, #516]	; (38f8 <spi_nrfx_transceive+0x2a0>)
    36f4:	497f      	ldr	r1, [pc, #508]	; (38f4 <spi_nrfx_transceive+0x29c>)
    36f6:	9300      	str	r3, [sp, #0]
    36f8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    36fc:	4618      	mov	r0, r3
    36fe:	2201      	movs	r2, #1
    3700:	f003 fc43 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    3704:	f06f 0515 	mvn.w	r5, #21
    3708:	e7d8      	b.n	36bc <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    370a:	f016 0308 	ands.w	r3, r6, #8
    370e:	d00a      	beq.n	3726 <spi_nrfx_transceive+0xce>
		LOG_ERR("Loopback mode is not supported");
    3710:	4b7a      	ldr	r3, [pc, #488]	; (38fc <spi_nrfx_transceive+0x2a4>)
    3712:	9200      	str	r2, [sp, #0]
    3714:	e9cd 2301 	strd	r2, r3, [sp, #4]
    3718:	4613      	mov	r3, r2
		LOG_ERR("Word sizes other than 8 bits are not supported");
    371a:	4976      	ldr	r1, [pc, #472]	; (38f4 <spi_nrfx_transceive+0x29c>)
    371c:	2201      	movs	r2, #1
    371e:	4618      	mov	r0, r3
    3720:	f003 fc33 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
	if (error == 0) {
    3724:	e7ee      	b.n	3704 <spi_nrfx_transceive+0xac>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    3726:	f3c6 1245 	ubfx	r2, r6, #5, #6
    372a:	2a08      	cmp	r2, #8
    372c:	d004      	beq.n	3738 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    372e:	4a74      	ldr	r2, [pc, #464]	; (3900 <spi_nrfx_transceive+0x2a8>)
    3730:	9300      	str	r3, [sp, #0]
    3732:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3736:	e7f0      	b.n	371a <spi_nrfx_transceive+0xc2>
	if (spi_cfg->frequency < 125000) {
    3738:	683d      	ldr	r5, [r7, #0]
    373a:	4a72      	ldr	r2, [pc, #456]	; (3904 <spi_nrfx_transceive+0x2ac>)
    373c:	4295      	cmp	r5, r2
    373e:	d801      	bhi.n	3744 <spi_nrfx_transceive+0xec>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3740:	4a71      	ldr	r2, [pc, #452]	; (3908 <spi_nrfx_transceive+0x2b0>)
    3742:	e7f5      	b.n	3730 <spi_nrfx_transceive+0xd8>
	config = dev_config->def_config;
    3744:	9b04      	ldr	r3, [sp, #16]
    3746:	f103 0e08 	add.w	lr, r3, #8
    374a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    374e:	f10d 0c1c 	add.w	ip, sp, #28
    3752:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    3756:	f8de 3000 	ldr.w	r3, [lr]
    375a:	f8cc 3000 	str.w	r3, [ip]
	if (frequency < 250000) {
    375e:	4b6b      	ldr	r3, [pc, #428]	; (390c <spi_nrfx_transceive+0x2b4>)
    3760:	429d      	cmp	r5, r3
    3762:	d940      	bls.n	37e6 <spi_nrfx_transceive+0x18e>
	} else if (frequency < 500000) {
    3764:	4b6a      	ldr	r3, [pc, #424]	; (3910 <spi_nrfx_transceive+0x2b8>)
    3766:	429d      	cmp	r5, r3
    3768:	d940      	bls.n	37ec <spi_nrfx_transceive+0x194>
	} else if (frequency < 1000000) {
    376a:	4b6a      	ldr	r3, [pc, #424]	; (3914 <spi_nrfx_transceive+0x2bc>)
    376c:	429d      	cmp	r5, r3
    376e:	d940      	bls.n	37f2 <spi_nrfx_transceive+0x19a>
	} else if (frequency < 2000000) {
    3770:	4b69      	ldr	r3, [pc, #420]	; (3918 <spi_nrfx_transceive+0x2c0>)
    3772:	429d      	cmp	r5, r3
    3774:	d940      	bls.n	37f8 <spi_nrfx_transceive+0x1a0>
	} else if (frequency < 4000000) {
    3776:	4b69      	ldr	r3, [pc, #420]	; (391c <spi_nrfx_transceive+0x2c4>)
    3778:	429d      	cmp	r5, r3
    377a:	d940      	bls.n	37fe <spi_nrfx_transceive+0x1a6>
		return NRF_SPI_FREQ_4M;
    377c:	4b68      	ldr	r3, [pc, #416]	; (3920 <spi_nrfx_transceive+0x2c8>)
    377e:	429d      	cmp	r5, r3
    3780:	bf2c      	ite	cs
    3782:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    3786:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    378a:	07b2      	lsls	r2, r6, #30
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    378c:	9509      	str	r5, [sp, #36]	; 0x24
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    378e:	f006 0304 	and.w	r3, r6, #4
    3792:	d537      	bpl.n	3804 <spi_nrfx_transceive+0x1ac>
			return NRF_SPI_MODE_2;
    3794:	2b00      	cmp	r3, #0
    3796:	bf14      	ite	ne
    3798:	2303      	movne	r3, #3
    379a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    379c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	if (dev_data->initialized) {
    37a0:	9b05      	ldr	r3, [sp, #20]
	if (operation & SPI_TRANSFER_LSB) {
    37a2:	f3c6 1600 	ubfx	r6, r6, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    37a6:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
	if (dev_data->initialized) {
    37aa:	b12b      	cbz	r3, 37b8 <spi_nrfx_transceive+0x160>
		nrfx_spi_uninit(&dev_config->spi);
    37ac:	9804      	ldr	r0, [sp, #16]
    37ae:	f001 fe39 	bl	5424 <nrfx_spi_uninit>
		dev_data->initialized = false;
    37b2:	2300      	movs	r3, #0
    37b4:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    37b8:	465b      	mov	r3, fp
    37ba:	4a5a      	ldr	r2, [pc, #360]	; (3924 <spi_nrfx_transceive+0x2cc>)
    37bc:	9804      	ldr	r0, [sp, #16]
    37be:	a907      	add	r1, sp, #28
    37c0:	f001 fd82 	bl	52c8 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    37c4:	4b58      	ldr	r3, [pc, #352]	; (3928 <spi_nrfx_transceive+0x2d0>)
    37c6:	4298      	cmp	r0, r3
    37c8:	d020      	beq.n	380c <spi_nrfx_transceive+0x1b4>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    37ca:	4b58      	ldr	r3, [pc, #352]	; (392c <spi_nrfx_transceive+0x2d4>)
    37cc:	9302      	str	r3, [sp, #8]
    37ce:	2300      	movs	r3, #0
    37d0:	9003      	str	r0, [sp, #12]
    37d2:	e9cd 3300 	strd	r3, r3, [sp]
    37d6:	4947      	ldr	r1, [pc, #284]	; (38f4 <spi_nrfx_transceive+0x29c>)
    37d8:	2201      	movs	r2, #1
    37da:	4618      	mov	r0, r3
    37dc:	f003 fbd5 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    37e0:	f06f 0504 	mvn.w	r5, #4
    37e4:	e76a      	b.n	36bc <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
    37e6:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    37ea:	e7ce      	b.n	378a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_250K;
    37ec:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    37f0:	e7cb      	b.n	378a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_500K;
    37f2:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    37f6:	e7c8      	b.n	378a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_1M;
    37f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    37fc:	e7c5      	b.n	378a <spi_nrfx_transceive+0x132>
		return NRF_SPI_FREQ_2M;
    37fe:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    3802:	e7c2      	b.n	378a <spi_nrfx_transceive+0x132>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    3804:	3b00      	subs	r3, #0
    3806:	bf18      	it	ne
    3808:	2301      	movne	r3, #1
    380a:	e7c7      	b.n	379c <spi_nrfx_transceive+0x144>
	dev_data->initialized = true;
    380c:	2301      	movs	r3, #1
    380e:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
	ctx->config = spi_cfg;
    3812:	f8cb 7000 	str.w	r7, [fp]
		dev_data->busy = true;
    3816:	2301      	movs	r3, #1
    3818:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    381c:	f1ba 0f00 	cmp.w	sl, #0
    3820:	d154      	bne.n	38cc <spi_nrfx_transceive+0x274>
    3822:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3826:	2300      	movs	r3, #0
    3828:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    382a:	f104 0248 	add.w	r2, r4, #72	; 0x48
    382e:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3832:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3836:	f003 fb95 	bl	6f64 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    383a:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    383c:	f1b9 0f00 	cmp.w	r9, #0
    3840:	d14c      	bne.n	38dc <spi_nrfx_transceive+0x284>
    3842:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3846:	2300      	movs	r3, #0
    3848:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    384a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    384e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3852:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3856:	f003 fb85 	bl	6f64 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    385a:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    385c:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    385e:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    3860:	2101      	movs	r1, #1
    3862:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3864:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3866:	f003 fbb4 	bl	6fd2 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    386a:	4640      	mov	r0, r8
    386c:	f7ff fe54 	bl	3518 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3870:	6d25      	ldr	r5, [r4, #80]	; 0x50
    3872:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    3874:	4627      	mov	r7, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3876:	429d      	cmp	r5, r3
    3878:	bf38      	it	cc
    387a:	461d      	movcc	r5, r3
    387c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    3880:	435d      	muls	r5, r3
			     ctx->config->frequency;
    3882:	f857 3b20 	ldr.w	r3, [r7], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3886:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    388a:	681b      	ldr	r3, [r3, #0]
    388c:	fbb5 f5f3 	udiv	r5, r5, r3
    3890:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3892:	35c8      	adds	r5, #200	; 0xc8
    3894:	f240 30e7 	movw	r0, #999	; 0x3e7
    3898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    389c:	2300      	movs	r3, #0
    389e:	fbe5 010c 	umlal	r0, r1, r5, ip
    38a2:	f7fc fc2d 	bl	100 <__aeabi_uldivmod>
    38a6:	4602      	mov	r2, r0
    38a8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    38aa:	4638      	mov	r0, r7
    38ac:	f002 fa4e 	bl	5d4c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    38b0:	b1e0      	cbz	r0, 38ec <spi_nrfx_transceive+0x294>
		LOG_ERR("Timeout waiting for transfer complete");
    38b2:	4b1f      	ldr	r3, [pc, #124]	; (3930 <spi_nrfx_transceive+0x2d8>)
    38b4:	490f      	ldr	r1, [pc, #60]	; (38f4 <spi_nrfx_transceive+0x29c>)
    38b6:	9600      	str	r6, [sp, #0]
    38b8:	e9cd 6301 	strd	r6, r3, [sp, #4]
    38bc:	2201      	movs	r2, #1
    38be:	4633      	mov	r3, r6
    38c0:	4630      	mov	r0, r6
    38c2:	f003 fb62 	bl	6f8a <z_log_msg_runtime_create.constprop.0>
		return -ETIMEDOUT;
    38c6:	f06f 0573 	mvn.w	r5, #115	; 0x73
    38ca:	e6f7      	b.n	36bc <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    38cc:	f8da 3000 	ldr.w	r3, [sl]
    38d0:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    38d2:	2b00      	cmp	r3, #0
    38d4:	d0a7      	beq.n	3826 <spi_nrfx_transceive+0x1ce>
    38d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    38da:	e7a5      	b.n	3828 <spi_nrfx_transceive+0x1d0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    38dc:	f8d9 3000 	ldr.w	r3, [r9]
    38e0:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    38e2:	2b00      	cmp	r3, #0
    38e4:	d0af      	beq.n	3846 <spi_nrfx_transceive+0x1ee>
    38e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    38ea:	e7ad      	b.n	3848 <spi_nrfx_transceive+0x1f0>
	status = ctx->sync_status;
    38ec:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    38ee:	e6e5      	b.n	36bc <spi_nrfx_transceive+0x64>
    38f0:	0000857e 	.word	0x0000857e
    38f4:	00007cf0 	.word	0x00007cf0
    38f8:	00008598 	.word	0x00008598
    38fc:	000085ba 	.word	0x000085ba
    3900:	000085d9 	.word	0x000085d9
    3904:	0001e847 	.word	0x0001e847
    3908:	00008608 	.word	0x00008608
    390c:	0003d08f 	.word	0x0003d08f
    3910:	0007a11f 	.word	0x0007a11f
    3914:	000f423f 	.word	0x000f423f
    3918:	001e847f 	.word	0x001e847f
    391c:	003d08ff 	.word	0x003d08ff
    3920:	007a1200 	.word	0x007a1200
    3924:	00003599 	.word	0x00003599
    3928:	0bad0000 	.word	0x0bad0000
    392c:	00008639 	.word	0x00008639
    3930:	00008660 	.word	0x00008660

00003934 <z_impl_can_send>:
}

int z_impl_can_send(const struct device *dev, const struct can_frame *frame,
		    k_timeout_t timeout, can_tx_callback_t callback,
		    void *user_data)
{
    3934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3938:	b089      	sub	sp, #36	; 0x24
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
    393a:	f8d0 9008 	ldr.w	r9, [r0, #8]
{
    393e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    3942:	4604      	mov	r4, r0
    3944:	460e      	mov	r6, r1
    3946:	4690      	mov	r8, r2
    3948:	461f      	mov	r7, r3

	if (callback == NULL) {
    394a:	f1bc 0f00 	cmp.w	ip, #0
    394e:	d11b      	bne.n	3988 <z_impl_can_send+0x54>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3950:	ad03      	add	r5, sp, #12
    3952:	2201      	movs	r2, #1
    3954:	4661      	mov	r1, ip
    3956:	4628      	mov	r0, r5
    3958:	f003 ff52 	bl	7800 <z_impl_k_sem_init>
		struct can_tx_default_cb_ctx ctx;
		int err;

		k_sem_init(&ctx.done, 0, 1);

		err = api->send(dev, frame, timeout, can_tx_default_cb, &ctx);
    395c:	4b0e      	ldr	r3, [pc, #56]	; (3998 <z_impl_can_send+0x64>)
    395e:	9300      	str	r3, [sp, #0]
    3960:	9501      	str	r5, [sp, #4]
    3962:	f8d9 9014 	ldr.w	r9, [r9, #20]
    3966:	4642      	mov	r2, r8
    3968:	463b      	mov	r3, r7
    396a:	4631      	mov	r1, r6
    396c:	4620      	mov	r0, r4
    396e:	47c8      	blx	r9
		if (err != 0) {
    3970:	b938      	cbnz	r0, 3982 <z_impl_can_send+0x4e>
	return z_impl_k_sem_take(sem, timeout);
    3972:	f04f 32ff 	mov.w	r2, #4294967295
    3976:	f04f 33ff 	mov.w	r3, #4294967295
    397a:	4628      	mov	r0, r5
    397c:	f002 f9e6 	bl	5d4c <z_impl_k_sem_take>
			return err;
		}

		k_sem_take(&ctx.done, K_FOREVER);

		return ctx.status;
    3980:	9807      	ldr	r0, [sp, #28]
	}

	return api->send(dev, frame, timeout, callback, user_data);
}
    3982:	b009      	add	sp, #36	; 0x24
    3984:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return api->send(dev, frame, timeout, callback, user_data);
    3988:	f8d9 4014 	ldr.w	r4, [r9, #20]
    398c:	46a4      	mov	ip, r4
}
    398e:	b009      	add	sp, #36	; 0x24
    3990:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return api->send(dev, frame, timeout, callback, user_data);
    3994:	4760      	bx	ip
    3996:	bf00      	nop
    3998:	0000705b 	.word	0x0000705b

0000399c <z_impl_can_calc_timing>:
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
}

int z_impl_can_calc_timing(const struct device *dev, struct can_timing *res,
			   uint32_t bitrate, uint16_t sample_pnt)
{
    399c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    39a0:	4689      	mov	r9, r1
    39a2:	b087      	sub	sp, #28
    39a4:	4690      	mov	r8, r2
    39a6:	469a      	mov	sl, r3
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
    39a8:	6883      	ldr	r3, [r0, #8]
    39aa:	9301      	str	r3, [sp, #4]
	const struct can_timing *min = can_get_timing_min(dev);
	const struct can_timing *max = can_get_timing_max(dev);
	uint32_t core_clock;
	int ret;

	if (bitrate > 1000000) {
    39ac:	4b53      	ldr	r3, [pc, #332]	; (3afc <z_impl_can_calc_timing+0x160>)
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;
    39ae:	6887      	ldr	r7, [r0, #8]
    39b0:	429a      	cmp	r2, r3
    39b2:	f200 809f 	bhi.w	3af4 <z_impl_can_calc_timing+0x158>
	return api->get_core_clock(dev, rate);
    39b6:	6883      	ldr	r3, [r0, #8]
    39b8:	a905      	add	r1, sp, #20
    39ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    39bc:	4798      	blx	r3
		return -EINVAL;
	}

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
    39be:	2800      	cmp	r0, #0
    39c0:	f040 8093 	bne.w	3aea <z_impl_can_calc_timing+0x14e>
		return ret;
	}

	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
    39c4:	9b05      	ldr	r3, [sp, #20]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
    39c6:	f8b7 4040 	ldrh.w	r4, [r7, #64]	; 0x40
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
    39ca:	9300      	str	r3, [sp, #0]
	uint32_t ts = max->prop_seg + max->phase_seg1 + max->phase_seg2 +
    39cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
    39d0:	441c      	add	r4, r3
    39d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
    39d6:	441c      	add	r4, r3
    39d8:	3401      	adds	r4, #1
	if (bitrate == 0 || sp >= 1000) {
    39da:	f1b8 0f00 	cmp.w	r8, #0
    39de:	f000 8089 	beq.w	3af4 <z_impl_can_calc_timing+0x158>
    39e2:	f5ba 7f7a 	cmp.w	sl, #1000	; 0x3e8
    39e6:	f080 8085 	bcs.w	3af4 <z_impl_can_calc_timing+0x158>
	for (int prescaler = MAX(core_clock / (ts * bitrate), 1);
    39ea:	9b00      	ldr	r3, [sp, #0]
    39ec:	fb04 f408 	mul.w	r4, r4, r8
    39f0:	fbb3 f4f4 	udiv	r4, r3, r4
    39f4:	2c01      	cmp	r4, #1
    39f6:	bf38      	it	cc
    39f8:	2401      	movcc	r4, #1
    39fa:	fb04 f108 	mul.w	r1, r4, r8
	uint16_t sp_err_min = UINT16_MAX;
    39fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
	     prescaler <= max->prescaler; ++prescaler) {
    3a02:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
    3a06:	429c      	cmp	r4, r3
    3a08:	dd06      	ble.n	3a18 <z_impl_can_calc_timing+0x7c>
	return sp_err_min == UINT16_MAX ? -ENOTSUP : (int)sp_err_min;
    3a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3a0e:	4298      	cmp	r0, r3
    3a10:	d16b      	bne.n	3aea <z_impl_can_calc_timing+0x14e>
    3a12:	f06f 0085 	mvn.w	r0, #133	; 0x85
	return can_calc_timing_int(core_clock, res, min, max, bitrate, sample_pnt);
    3a16:	e068      	b.n	3aea <z_impl_can_calc_timing+0x14e>
		if (core_clock % (prescaler * bitrate)) {
    3a18:	9b00      	ldr	r3, [sp, #0]
    3a1a:	fbb3 fef1 	udiv	lr, r3, r1
    3a1e:	fb01 331e 	mls	r3, r1, lr, r3
    3a22:	bb83      	cbnz	r3, 3a86 <z_impl_can_calc_timing+0xea>
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
    3a24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
    3a28:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
    3a2c:	9302      	str	r3, [sp, #8]
    3a2e:	441d      	add	r5, r3
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
    3a30:	9b01      	ldr	r3, [sp, #4]
    3a32:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    3a34:	9303      	str	r3, [sp, #12]
    3a36:	9b01      	ldr	r3, [sp, #4]
	ts2 = ts - (ts * sp) / 1000;
    3a38:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    3a3c:	fb0a fc0e 	mul.w	ip, sl, lr
    3a40:	fbbc fcf6 	udiv	ip, ip, r6
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
    3a44:	9e01      	ldr	r6, [sp, #4]
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
    3a46:	8eda      	ldrh	r2, [r3, #54]	; 0x36
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
    3a48:	f8b6 b03a 	ldrh.w	fp, [r6, #58]	; 0x3a
	ts2 = ts - (ts * sp) / 1000;
    3a4c:	fa1f f38e 	uxth.w	r3, lr
    3a50:	eba3 0c0c 	sub.w	ip, r3, ip
    3a54:	fa1f fc8c 	uxth.w	ip, ip
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
    3a58:	45dc      	cmp	ip, fp
	uint16_t ts1_max = max->phase_seg1 + max->prop_seg;
    3a5a:	b2ad      	uxth	r5, r5
	ts2 = CLAMP(ts2, min->phase_seg2, max->phase_seg2);
    3a5c:	d916      	bls.n	3a8c <z_impl_can_calc_timing+0xf0>
    3a5e:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
    3a62:	4566      	cmp	r6, ip
    3a64:	bf28      	it	cs
    3a66:	4666      	movcs	r6, ip
	ts1 = ts - CAN_SYNC_SEG - ts2;
    3a68:	f103 3cff 	add.w	ip, r3, #4294967295
    3a6c:	ebac 0c06 	sub.w	ip, ip, r6
    3a70:	fa1f fc8c 	uxth.w	ip, ip
	if (ts1 > ts1_max) {
    3a74:	4565      	cmp	r5, ip
    3a76:	d20b      	bcs.n	3a90 <z_impl_can_calc_timing+0xf4>
		ts2 = ts - CAN_SYNC_SEG - ts1;
    3a78:	1b5e      	subs	r6, r3, r5
    3a7a:	3e01      	subs	r6, #1
		if (ts2 > max->phase_seg2) {
    3a7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
		ts2 = ts - CAN_SYNC_SEG - ts1;
    3a80:	b2b6      	uxth	r6, r6
		if (ts2 > max->phase_seg2) {
    3a82:	42b3      	cmp	r3, r6
    3a84:	d20d      	bcs.n	3aa2 <z_impl_can_calc_timing+0x106>
	     prescaler <= max->prescaler; ++prescaler) {
    3a86:	3401      	adds	r4, #1
    3a88:	4441      	add	r1, r8
    3a8a:	e7ba      	b.n	3a02 <z_impl_can_calc_timing+0x66>
    3a8c:	465e      	mov	r6, fp
    3a8e:	e7eb      	b.n	3a68 <z_impl_can_calc_timing+0xcc>
	uint16_t ts1_min = min->phase_seg1 + min->prop_seg;
    3a90:	9d03      	ldr	r5, [sp, #12]
    3a92:	4415      	add	r5, r2
    3a94:	b2ad      	uxth	r5, r5
	} else if (ts1 < ts1_min) {
    3a96:	4565      	cmp	r5, ip
    3a98:	d92a      	bls.n	3af0 <z_impl_can_calc_timing+0x154>
		ts2 = ts - ts1;
    3a9a:	1b5b      	subs	r3, r3, r5
    3a9c:	b29e      	uxth	r6, r3
		if (ts2 < min->phase_seg2) {
    3a9e:	45b3      	cmp	fp, r6
    3aa0:	d8f1      	bhi.n	3a86 <z_impl_can_calc_timing+0xea>
	res->prop_seg = CLAMP(ts1 / 2, min->prop_seg, max->prop_seg);
    3aa2:	ebb2 0f55 	cmp.w	r2, r5, lsr #1
    3aa6:	ea4f 0355 	mov.w	r3, r5, lsr #1
    3aaa:	d203      	bcs.n	3ab4 <z_impl_can_calc_timing+0x118>
    3aac:	9a02      	ldr	r2, [sp, #8]
    3aae:	429a      	cmp	r2, r3
    3ab0:	bf28      	it	cs
    3ab2:	461a      	movcs	r2, r3
	sp_calc = (CAN_SYNC_SEG + ts1) * 1000 / ts;
    3ab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3ab8:	fb05 3303 	mla	r3, r5, r3, r3
    3abc:	fbb3 f3fe 	udiv	r3, r3, lr
	return sp_calc > sp ? sp_calc - sp : sp - sp_calc;
    3ac0:	459a      	cmp	sl, r3
    3ac2:	bf34      	ite	cc
    3ac4:	eba3 030a 	subcc.w	r3, r3, sl
    3ac8:	ebaa 0303 	subcs.w	r3, sl, r3
		if (sp_err < sp_err_min) {
    3acc:	4298      	cmp	r0, r3
    3ace:	d9da      	bls.n	3a86 <z_impl_can_calc_timing+0xea>
	res->phase_seg1 = ts1 - res->prop_seg;
    3ad0:	1aad      	subs	r5, r5, r2
			sp_err_min = sp_err;
    3ad2:	b298      	uxth	r0, r3
			res->prop_seg = tmp_res.prop_seg;
    3ad4:	f8a9 2002 	strh.w	r2, [r9, #2]
			res->phase_seg1 = tmp_res.phase_seg1;
    3ad8:	f8a9 5004 	strh.w	r5, [r9, #4]
			res->phase_seg2 = tmp_res.phase_seg2;
    3adc:	f8a9 6006 	strh.w	r6, [r9, #6]
			res->prescaler = (uint16_t)prescaler;
    3ae0:	f8a9 4008 	strh.w	r4, [r9, #8]
			if (sp_err == 0) {
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	d1ce      	bne.n	3a86 <z_impl_can_calc_timing+0xea>
			sp_err_min = sp_err;
    3ae8:	4618      	mov	r0, r3
}
    3aea:	b007      	add	sp, #28
    3aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3af0:	4665      	mov	r5, ip
    3af2:	e7d6      	b.n	3aa2 <z_impl_can_calc_timing+0x106>
		return -EINVAL;
    3af4:	f06f 0015 	mvn.w	r0, #21
    3af8:	e7f7      	b.n	3aea <z_impl_can_calc_timing+0x14e>
    3afa:	bf00      	nop
    3afc:	000f4240 	.word	0x000f4240

00003b00 <mcp2515_set_mode>:

	return 0;
}

static int mcp2515_set_mode(const struct device *dev, can_mode_t mode)
{
    3b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct mcp2515_data *dev_data = dev->data;
    3b02:	6902      	ldr	r2, [r0, #16]

	if (dev_data->started) {
    3b04:	f892 3172 	ldrb.w	r3, [r2, #370]	; 0x172
    3b08:	b9db      	cbnz	r3, 3b42 <mcp2515_set_mode+0x42>
		return -EBUSY;
	}

	switch (mode) {
    3b0a:	2901      	cmp	r1, #1
    3b0c:	d008      	beq.n	3b20 <mcp2515_set_mode+0x20>
    3b0e:	2902      	cmp	r1, #2
    3b10:	d008      	beq.n	3b24 <mcp2515_set_mode+0x24>
    3b12:	b949      	cbnz	r1, 3b28 <mcp2515_set_mode+0x28>
	case CAN_MODE_NORMAL:
		dev_data->mcp2515_mode = MCP2515_MODE_NORMAL;
    3b14:	f882 1171 	strb.w	r1, [r2, #369]	; 0x171
	default:
		LOG_ERR("Unsupported CAN Mode %u", mode);
		return -ENOTSUP;
	}

	return 0;
    3b18:	2000      	movs	r0, #0
}
    3b1a:	b005      	add	sp, #20
    3b1c:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (mode) {
    3b20:	2102      	movs	r1, #2
    3b22:	e7f7      	b.n	3b14 <mcp2515_set_mode+0x14>
    3b24:	2103      	movs	r1, #3
    3b26:	e7f5      	b.n	3b14 <mcp2515_set_mode+0x14>
		LOG_ERR("Unsupported CAN Mode %u", mode);
    3b28:	4a07      	ldr	r2, [pc, #28]	; (3b48 <mcp2515_set_mode+0x48>)
    3b2a:	9103      	str	r1, [sp, #12]
    3b2c:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3b30:	4618      	mov	r0, r3
    3b32:	4906      	ldr	r1, [pc, #24]	; (3b4c <mcp2515_set_mode+0x4c>)
    3b34:	9300      	str	r3, [sp, #0]
    3b36:	2201      	movs	r2, #1
    3b38:	f003 fac8 	bl	70cc <z_log_msg_runtime_create.constprop.0>
    3b3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b40:	e7eb      	b.n	3b1a <mcp2515_set_mode+0x1a>
		return -EBUSY;
    3b42:	f06f 000f 	mvn.w	r0, #15
    3b46:	e7e8      	b.n	3b1a <mcp2515_set_mode+0x1a>
    3b48:	000086ab 	.word	0x000086ab
    3b4c:	00007ca0 	.word	0x00007ca0

00003b50 <mcp2515_get_state>:
	mcp2515_rx_filter(dev, &frame);
}

static int mcp2515_get_state(const struct device *dev, enum can_state *state,
			     struct can_bus_err_cnt *err_cnt)
{
    3b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b52:	b087      	sub	sp, #28
	struct mcp2515_data *dev_data = dev->data;
    3b54:	6907      	ldr	r7, [r0, #16]
{
    3b56:	4606      	mov	r6, r0
    3b58:	460c      	mov	r4, r1
	uint8_t eflg;
	uint8_t err_cnt_buf[2];
	int ret;

	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
    3b5a:	6840      	ldr	r0, [r0, #4]
{
    3b5c:	4615      	mov	r5, r2
	ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_EFLG, &eflg, sizeof(eflg));
    3b5e:	2301      	movs	r3, #1
    3b60:	f10d 0213 	add.w	r2, sp, #19
    3b64:	212d      	movs	r1, #45	; 0x2d
    3b66:	f003 fbf3 	bl	7350 <mcp2515_cmd_read_reg.isra.0>
	if (ret < 0) {
    3b6a:	2800      	cmp	r0, #0
    3b6c:	da0d      	bge.n	3b8a <mcp2515_get_state+0x3a>
		LOG_ERR("Failed to read error register [%d]", ret);
    3b6e:	4b1d      	ldr	r3, [pc, #116]	; (3be4 <mcp2515_get_state+0x94>)
    3b70:	9003      	str	r0, [sp, #12]

	if (err_cnt != NULL) {
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
					   sizeof(err_cnt_buf));
		if (ret < 0) {
			LOG_ERR("Failed to read error counters [%d]", ret);
    3b72:	9302      	str	r3, [sp, #8]
    3b74:	2300      	movs	r3, #0
    3b76:	4618      	mov	r0, r3
    3b78:	e9cd 3300 	strd	r3, r3, [sp]
    3b7c:	491a      	ldr	r1, [pc, #104]	; (3be8 <mcp2515_get_state+0x98>)
    3b7e:	2201      	movs	r2, #1
    3b80:	f003 faa4 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    3b84:	f06f 0004 	mvn.w	r0, #4
    3b88:	e007      	b.n	3b9a <mcp2515_get_state+0x4a>
	if (state != NULL) {
    3b8a:	b124      	cbz	r4, 3b96 <mcp2515_get_state+0x46>
		if (!dev_data->started) {
    3b8c:	f897 3172 	ldrb.w	r3, [r7, #370]	; 0x172
    3b90:	b92b      	cbnz	r3, 3b9e <mcp2515_get_state+0x4e>
			*state = CAN_STATE_STOPPED;
    3b92:	2304      	movs	r3, #4
			*state = CAN_STATE_ERROR_ACTIVE;
    3b94:	7023      	strb	r3, [r4, #0]
	if (err_cnt != NULL) {
    3b96:	b995      	cbnz	r5, 3bbe <mcp2515_get_state+0x6e>

		err_cnt->tx_err_cnt = err_cnt_buf[0];
		err_cnt->rx_err_cnt = err_cnt_buf[1];
	}

	return 0;
    3b98:	2000      	movs	r0, #0
}
    3b9a:	b007      	add	sp, #28
    3b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (eflg & MCP2515_EFLG_TXBO) {
    3b9e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3ba2:	069a      	lsls	r2, r3, #26
    3ba4:	d501      	bpl.n	3baa <mcp2515_get_state+0x5a>
			*state = CAN_STATE_BUS_OFF;
    3ba6:	2303      	movs	r3, #3
    3ba8:	e7f4      	b.n	3b94 <mcp2515_get_state+0x44>
		} else if ((eflg & MCP2515_EFLG_RXEP) || (eflg & MCP2515_EFLG_TXEP)) {
    3baa:	f013 0f18 	tst.w	r3, #24
    3bae:	d001      	beq.n	3bb4 <mcp2515_get_state+0x64>
			*state = CAN_STATE_ERROR_PASSIVE;
    3bb0:	2302      	movs	r3, #2
    3bb2:	e7ef      	b.n	3b94 <mcp2515_get_state+0x44>
		} else if (eflg & MCP2515_EFLG_EWARN) {
    3bb4:	f013 0301 	ands.w	r3, r3, #1
			*state = CAN_STATE_ERROR_WARNING;
    3bb8:	bf18      	it	ne
    3bba:	2301      	movne	r3, #1
    3bbc:	e7ea      	b.n	3b94 <mcp2515_get_state+0x44>
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_TEC, err_cnt_buf,
    3bbe:	6870      	ldr	r0, [r6, #4]
    3bc0:	2302      	movs	r3, #2
    3bc2:	aa05      	add	r2, sp, #20
    3bc4:	211c      	movs	r1, #28
    3bc6:	f003 fbc3 	bl	7350 <mcp2515_cmd_read_reg.isra.0>
		if (ret < 0) {
    3bca:	2800      	cmp	r0, #0
    3bcc:	da02      	bge.n	3bd4 <mcp2515_get_state+0x84>
			LOG_ERR("Failed to read error counters [%d]", ret);
    3bce:	4b07      	ldr	r3, [pc, #28]	; (3bec <mcp2515_get_state+0x9c>)
    3bd0:	9003      	str	r0, [sp, #12]
    3bd2:	e7ce      	b.n	3b72 <mcp2515_get_state+0x22>
		err_cnt->tx_err_cnt = err_cnt_buf[0];
    3bd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3bd8:	702b      	strb	r3, [r5, #0]
		err_cnt->rx_err_cnt = err_cnt_buf[1];
    3bda:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3bde:	706b      	strb	r3, [r5, #1]
    3be0:	e7da      	b.n	3b98 <mcp2515_get_state+0x48>
    3be2:	bf00      	nop
    3be4:	000086c3 	.word	0x000086c3
    3be8:	00007ca0 	.word	0x00007ca0
    3bec:	000086e6 	.word	0x000086e6

00003bf0 <mcp2515_send>:
{
    3bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3bf4:	460d      	mov	r5, r1
	if (frame->dlc > CAN_MAX_DLC) {
    3bf6:	7909      	ldrb	r1, [r1, #4]
	struct mcp2515_data *dev_data = dev->data;
    3bf8:	6907      	ldr	r7, [r0, #16]
	if (frame->dlc > CAN_MAX_DLC) {
    3bfa:	2908      	cmp	r1, #8
{
    3bfc:	b093      	sub	sp, #76	; 0x4c
    3bfe:	4606      	mov	r6, r0
	if (frame->dlc > CAN_MAX_DLC) {
    3c00:	d912      	bls.n	3c28 <mcp2515_send+0x38>
		LOG_ERR("DLC of %d exceeds maximum (%d)",
    3c02:	2308      	movs	r3, #8
    3c04:	e9cd 1303 	strd	r1, r3, [sp, #12]
    3c08:	4b5a      	ldr	r3, [pc, #360]	; (3d74 <mcp2515_send+0x184>)
    3c0a:	9302      	str	r3, [sp, #8]
    3c0c:	2300      	movs	r3, #0
    3c0e:	e9cd 3300 	strd	r3, r3, [sp]
    3c12:	4959      	ldr	r1, [pc, #356]	; (3d78 <mcp2515_send+0x188>)
    3c14:	2201      	movs	r2, #1
    3c16:	4618      	mov	r0, r3
    3c18:	f003 fa58 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    3c1c:	f06f 0415 	mvn.w	r4, #21
}
    3c20:	4620      	mov	r0, r4
    3c22:	b013      	add	sp, #76	; 0x4c
    3c24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if ((frame->flags & ~(CAN_FRAME_IDE | CAN_FRAME_RTR)) != 0) {
    3c28:	7969      	ldrb	r1, [r5, #5]
    3c2a:	2903      	cmp	r1, #3
    3c2c:	d90d      	bls.n	3c4a <mcp2515_send+0x5a>
		LOG_ERR("unsupported CAN frame flags 0x%02x", frame->flags);
    3c2e:	4b53      	ldr	r3, [pc, #332]	; (3d7c <mcp2515_send+0x18c>)
    3c30:	9302      	str	r3, [sp, #8]
    3c32:	2300      	movs	r3, #0
    3c34:	9103      	str	r1, [sp, #12]
    3c36:	e9cd 3300 	strd	r3, r3, [sp]
    3c3a:	494f      	ldr	r1, [pc, #316]	; (3d78 <mcp2515_send+0x188>)
    3c3c:	2201      	movs	r2, #1
    3c3e:	4618      	mov	r0, r3
    3c40:	f003 fa44 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -ENOTSUP;
    3c44:	f06f 0485 	mvn.w	r4, #133	; 0x85
    3c48:	e7ea      	b.n	3c20 <mcp2515_send+0x30>
	if (!dev_data->started) {
    3c4a:	f897 1172 	ldrb.w	r1, [r7, #370]	; 0x172
    3c4e:	2900      	cmp	r1, #0
    3c50:	f000 8089 	beq.w	3d66 <mcp2515_send+0x176>
    3c54:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
    3c58:	f002 f878 	bl	5d4c <z_impl_k_sem_take>
	if (k_sem_take(&dev_data->tx_sem, timeout) != 0) {
    3c5c:	4604      	mov	r4, r0
    3c5e:	2800      	cmp	r0, #0
    3c60:	f040 8084 	bne.w	3d6c <mcp2515_send+0x17c>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    3c64:	f507 78ae 	add.w	r8, r7, #348	; 0x15c
    3c68:	f04f 32ff 	mov.w	r2, #4294967295
    3c6c:	f04f 33ff 	mov.w	r3, #4294967295
    3c70:	4640      	mov	r0, r8
    3c72:	f003 fa3a 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
		if ((BIT(tx_idx) & dev_data->tx_busy_map) == 0) {
    3c76:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
    3c7a:	07da      	lsls	r2, r3, #31
    3c7c:	d419      	bmi.n	3cb2 <mcp2515_send+0xc2>
			dev_data->tx_busy_map |= BIT(tx_idx);
    3c7e:	f043 0301 	orr.w	r3, r3, #1
    3c82:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	k_mutex_unlock(&dev_data->mutex);
    3c86:	4640      	mov	r0, r8
    3c88:	f003 fa31 	bl	70ee <k_mutex_unlock.isra.0>
	dev_data->tx_cb[tx_idx].cb = callback;
    3c8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    3c8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	dev_data->tx_cb[tx_idx].cb_arg = user_data;
    3c92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    3c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	if ((source->flags & CAN_FRAME_IDE) != 0) {
    3c98:	796a      	ldrb	r2, [r5, #5]
    3c9a:	682b      	ldr	r3, [r5, #0]
    3c9c:	f012 0f01 	tst.w	r2, #1
    3ca0:	d117      	bne.n	3cd2 <mcp2515_send+0xe2>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
    3ca2:	f3c3 01d9 	ubfx	r1, r3, #3, #26
			(source->id & 0x07) << 5;
    3ca6:	015b      	lsls	r3, r3, #5
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 3;
    3ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
		target[MCP2515_FRAME_OFFSET_SIDL] =
    3cac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    3cb0:	e023      	b.n	3cfa <mcp2515_send+0x10a>
	k_mutex_unlock(&dev_data->mutex);
    3cb2:	4640      	mov	r0, r8
    3cb4:	f003 fa1b 	bl	70ee <k_mutex_unlock.isra.0>
		LOG_WRN("no free tx slot available");
    3cb8:	4b31      	ldr	r3, [pc, #196]	; (3d80 <mcp2515_send+0x190>)
    3cba:	9400      	str	r4, [sp, #0]
    3cbc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3cc0:	4620      	mov	r0, r4
    3cc2:	4623      	mov	r3, r4
    3cc4:	492c      	ldr	r1, [pc, #176]	; (3d78 <mcp2515_send+0x188>)
    3cc6:	2202      	movs	r2, #2
    3cc8:	f003 fa00 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    3ccc:	f06f 0404 	mvn.w	r4, #4
    3cd0:	e7a6      	b.n	3c20 <mcp2515_send+0x30>
		target[MCP2515_FRAME_OFFSET_SIDH] = source->id >> 21;
    3cd2:	f3c3 5147 	ubfx	r1, r3, #21, #8
    3cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
    3cda:	f3c3 408a 	ubfx	r0, r3, #18, #11
			((source->id >> 16) & 0x03);
    3cde:	f3c3 4101 	ubfx	r1, r3, #16, #2
			(((source->id >> 18) & 0x07) << 5) | (BIT(3)) |
    3ce2:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    3ce6:	f041 0108 	orr.w	r1, r1, #8
		target[MCP2515_FRAME_OFFSET_SIDL] =
    3cea:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
		target[MCP2515_FRAME_OFFSET_EID8] = source->id >> 8;
    3cee:	f3c3 2114 	ubfx	r1, r3, #8, #21
    3cf2:	f88d 102a 	strb.w	r1, [sp, #42]	; 0x2a
		target[MCP2515_FRAME_OFFSET_EID0] = source->id;
    3cf6:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
	dlc = (source->dlc) & 0x0F;
    3cfa:	792b      	ldrb	r3, [r5, #4]
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
    3cfc:	0152      	lsls	r2, r2, #5
	dlc = (source->dlc) & 0x0F;
    3cfe:	f003 010f 	and.w	r1, r3, #15
	rtr = (source->flags & CAN_FRAME_RTR) != 0 ? BIT(6) : 0;
    3d02:	f002 0240 	and.w	r2, r2, #64	; 0x40
	target[MCP2515_FRAME_OFFSET_DLC] = rtr | dlc;
    3d06:	430a      	orrs	r2, r1
    3d08:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    3d0c:	a90b      	add	r1, sp, #44	; 0x2c
    3d0e:	1dea      	adds	r2, r5, #7
    3d10:	350f      	adds	r5, #15
		target[MCP2515_FRAME_OFFSET_D0 + data_idx] =
    3d12:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    3d16:	f801 0f01 	strb.w	r0, [r1, #1]!
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    3d1a:	42aa      	cmp	r2, r5
    3d1c:	d1f9      	bne.n	3d12 <mcp2515_send+0x122>
	len = sizeof(tx_frame) - CAN_MAX_DLC + frame->dlc;
    3d1e:	3305      	adds	r3, #5
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d20:	f10d 0920 	add.w	r9, sp, #32
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
    3d24:	2240      	movs	r2, #64	; 0x40
	struct spi_buf tx_buf[] = {
    3d26:	b2db      	uxtb	r3, r3
    3d28:	2701      	movs	r7, #1
	uint8_t cmd_buf[] = { MCP2515_OPCODE_LOAD_TX_BUFFER | abc };
    3d2a:	f88d 201c 	strb.w	r2, [sp, #28]
	struct spi_buf tx_buf[] = {
    3d2e:	ad07      	add	r5, sp, #28
    3d30:	aa0a      	add	r2, sp, #40	; 0x28
    3d32:	9311      	str	r3, [sp, #68]	; 0x44
	const struct spi_buf_set tx = {
    3d34:	f10d 0838 	add.w	r8, sp, #56	; 0x38
    3d38:	2302      	movs	r3, #2
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d3a:	4649      	mov	r1, r9
    3d3c:	6870      	ldr	r0, [r6, #4]
	const struct spi_buf_set tx = {
    3d3e:	9309      	str	r3, [sp, #36]	; 0x24
	struct spi_buf tx_buf[] = {
    3d40:	950e      	str	r5, [sp, #56]	; 0x38
    3d42:	970f      	str	r7, [sp, #60]	; 0x3c
    3d44:	9210      	str	r2, [sp, #64]	; 0x40
	const struct spi_buf_set tx = {
    3d46:	f8cd 8020 	str.w	r8, [sp, #32]
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d4a:	f003 fb23 	bl	7394 <spi_write_dt>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
    3d4e:	2381      	movs	r3, #129	; 0x81
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d50:	6870      	ldr	r0, [r6, #4]
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RTS | nnn };
    3d52:	f88d 301c 	strb.w	r3, [sp, #28]
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d56:	4641      	mov	r1, r8
	struct spi_buf tx_buf[] = {
    3d58:	e9cd 5708 	strd	r5, r7, [sp, #32]
	const struct spi_buf_set tx = {
    3d5c:	e9cd 970e 	strd	r9, r7, [sp, #56]	; 0x38
	return spi_write_dt(&dev_cfg->bus, &tx);
    3d60:	f003 fb18 	bl	7394 <spi_write_dt>
    3d64:	e75c      	b.n	3c20 <mcp2515_send+0x30>
		return -ENETDOWN;
    3d66:	f06f 0472 	mvn.w	r4, #114	; 0x72
    3d6a:	e759      	b.n	3c20 <mcp2515_send+0x30>
		return -EAGAIN;
    3d6c:	f06f 040a 	mvn.w	r4, #10
    3d70:	e756      	b.n	3c20 <mcp2515_send+0x30>
    3d72:	bf00      	nop
    3d74:	00008709 	.word	0x00008709
    3d78:	00007ca0 	.word	0x00007ca0
    3d7c:	00008728 	.word	0x00008728
    3d80:	0000874b 	.word	0x0000874b

00003d84 <mcp2515_int_thread>:
		}
	}
}

static void mcp2515_int_thread(const struct device *dev)
{
    3d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			LOG_ERR("Couldn't read INTF register %d", ret);
    3d88:	f8df b174 	ldr.w	fp, [pc, #372]	; 3f00 <mcp2515_int_thread+0x17c>
	struct mcp2515_data *dev_data = dev->data;
    3d8c:	f8d0 a010 	ldr.w	sl, [r0, #16]
{
    3d90:	b089      	sub	sp, #36	; 0x24
    3d92:	4604      	mov	r4, r0
    3d94:	f04f 32ff 	mov.w	r2, #4294967295
    3d98:	f04f 33ff 	mov.w	r3, #4294967295
    3d9c:	f10a 00d4 	add.w	r0, sl, #212	; 0xd4
    3da0:	f001 ffd4 	bl	5d4c <z_impl_k_sem_take>
			LOG_ERR("Couldn't read INT pin");
    3da4:	4e53      	ldr	r6, [pc, #332]	; (3ef4 <mcp2515_int_thread+0x170>)
	const struct mcp2515_config *dev_cfg = dev->config;
    3da6:	6867      	ldr	r7, [r4, #4]
		ret = mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANINTF,
    3da8:	6860      	ldr	r0, [r4, #4]
    3daa:	212c      	movs	r1, #44	; 0x2c
    3dac:	2301      	movs	r3, #1
    3dae:	f10d 021a 	add.w	r2, sp, #26
    3db2:	f003 facd 	bl	7350 <mcp2515_cmd_read_reg.isra.0>
		if (ret != 0) {
    3db6:	4601      	mov	r1, r0
    3db8:	b150      	cbz	r0, 3dd0 <mcp2515_int_thread+0x4c>
			LOG_ERR("Couldn't read INTF register %d", ret);
    3dba:	2300      	movs	r3, #0
    3dbc:	e9cd b002 	strd	fp, r0, [sp, #8]
    3dc0:	e9cd 3300 	strd	r3, r3, [sp]
    3dc4:	2201      	movs	r2, #1
    3dc6:	4631      	mov	r1, r6
    3dc8:	4618      	mov	r0, r3
    3dca:	f003 f97f 	bl	70cc <z_log_msg_runtime_create.constprop.0>
			continue;
    3dce:	e7eb      	b.n	3da8 <mcp2515_int_thread+0x24>
		if (canintf == 0) {
    3dd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3dd4:	2b00      	cmp	r3, #0
    3dd6:	d0dd      	beq.n	3d94 <mcp2515_int_thread+0x10>
		if (canintf & MCP2515_CANINTF_RX0IF) {
    3dd8:	07db      	lsls	r3, r3, #31
    3dda:	d508      	bpl.n	3dee <mcp2515_int_thread+0x6a>
			mcp2515_rx(dev, 0);
    3ddc:	4620      	mov	r0, r4
    3dde:	f003 f9b2 	bl	7146 <mcp2515_rx>
			canintf &= ~MCP2515_CANINTF_RX0IF;
    3de2:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3de6:	f023 0301 	bic.w	r3, r3, #1
    3dea:	f88d 301a 	strb.w	r3, [sp, #26]
		if (canintf & MCP2515_CANINTF_RX1IF) {
    3dee:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3df2:	079d      	lsls	r5, r3, #30
    3df4:	d509      	bpl.n	3e0a <mcp2515_int_thread+0x86>
			mcp2515_rx(dev, 1);
    3df6:	2101      	movs	r1, #1
    3df8:	4620      	mov	r0, r4
    3dfa:	f003 f9a4 	bl	7146 <mcp2515_rx>
			canintf &= ~MCP2515_CANINTF_RX1IF;
    3dfe:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3e02:	f023 0302 	bic.w	r3, r3, #2
    3e06:	f88d 301a 	strb.w	r3, [sp, #26]
		if (canintf & MCP2515_CANINTF_TX0IF) {
    3e0a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3e0e:	0758      	lsls	r0, r3, #29
    3e10:	d504      	bpl.n	3e1c <mcp2515_int_thread+0x98>
			mcp2515_tx_done(dev, 0, 0);
    3e12:	2200      	movs	r2, #0
    3e14:	4611      	mov	r1, r2
    3e16:	4620      	mov	r0, r4
    3e18:	f003 f96b 	bl	70f2 <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_TX1IF) {
    3e1c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3e20:	0719      	lsls	r1, r3, #28
    3e22:	d504      	bpl.n	3e2e <mcp2515_int_thread+0xaa>
			mcp2515_tx_done(dev, 1, 0);
    3e24:	2200      	movs	r2, #0
    3e26:	2101      	movs	r1, #1
    3e28:	4620      	mov	r0, r4
    3e2a:	f003 f962 	bl	70f2 <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_TX2IF) {
    3e2e:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3e32:	06db      	lsls	r3, r3, #27
    3e34:	d504      	bpl.n	3e40 <mcp2515_int_thread+0xbc>
			mcp2515_tx_done(dev, 2, 0);
    3e36:	2200      	movs	r2, #0
    3e38:	2102      	movs	r1, #2
    3e3a:	4620      	mov	r0, r4
    3e3c:	f003 f959 	bl	70f2 <mcp2515_tx_done>
		if (canintf & MCP2515_CANINTF_ERRIF) {
    3e40:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3e44:	f013 0f20 	tst.w	r3, #32
    3e48:	f10d 081c 	add.w	r8, sp, #28
    3e4c:	d01a      	beq.n	3e84 <mcp2515_int_thread+0x100>
	struct mcp2515_data *dev_data = dev->data;
    3e4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
	void *state_change_cb_data = dev_data->state_change_cb_data;
    3e52:	e9d9 5355 	ldrd	r5, r3, [r9, #340]	; 0x154
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
    3e56:	2d00      	cmp	r5, #0
    3e58:	bf14      	ite	ne
    3e5a:	4642      	movne	r2, r8
    3e5c:	2200      	moveq	r2, #0
    3e5e:	f10d 011b 	add.w	r1, sp, #27
    3e62:	4620      	mov	r0, r4
	void *state_change_cb_data = dev_data->state_change_cb_data;
    3e64:	9305      	str	r3, [sp, #20]
	err = mcp2515_get_state(dev, &state, state_change_cb ? &err_cnt : NULL);
    3e66:	f7ff fe73 	bl	3b50 <mcp2515_get_state>
	if (err != 0) {
    3e6a:	9b05      	ldr	r3, [sp, #20]
    3e6c:	b350      	cbz	r0, 3ec4 <mcp2515_int_thread+0x140>
		LOG_ERR("Failed to get CAN controller state [%d]", err);
    3e6e:	4b22      	ldr	r3, [pc, #136]	; (3ef8 <mcp2515_int_thread+0x174>)
    3e70:	9302      	str	r3, [sp, #8]
    3e72:	2300      	movs	r3, #0
    3e74:	9003      	str	r0, [sp, #12]
    3e76:	e9cd 3300 	strd	r3, r3, [sp]
    3e7a:	491e      	ldr	r1, [pc, #120]	; (3ef4 <mcp2515_int_thread+0x170>)
    3e7c:	2201      	movs	r2, #1
    3e7e:	4618      	mov	r0, r3
    3e80:	f003 f924 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		if (canintf != 0) {
    3e84:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3e88:	b12a      	cbz	r2, 3e96 <mcp2515_int_thread+0x112>
			mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANINTF,
    3e8a:	43d3      	mvns	r3, r2
    3e8c:	6860      	ldr	r0, [r4, #4]
    3e8e:	b2db      	uxtb	r3, r3
    3e90:	212c      	movs	r1, #44	; 0x2c
    3e92:	f003 fa8b 	bl	73ac <mcp2515_cmd_bit_modify.isra.0>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
    3e96:	6938      	ldr	r0, [r7, #16]
    3e98:	7d3d      	ldrb	r5, [r7, #20]
	const struct gpio_driver_data *const data =
    3e9a:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return api->port_get_raw(port, value);
    3e9e:	6882      	ldr	r2, [r0, #8]
    3ea0:	4641      	mov	r1, r8
    3ea2:	6852      	ldr	r2, [r2, #4]
    3ea4:	4790      	blx	r2
	if (ret == 0) {
    3ea6:	2800      	cmp	r0, #0
    3ea8:	d01a      	beq.n	3ee0 <mcp2515_int_thread+0x15c>
		if (ret < 0) {
    3eaa:	f6bf af7d 	bge.w	3da8 <mcp2515_int_thread+0x24>
			LOG_ERR("Couldn't read INT pin");
    3eae:	4b13      	ldr	r3, [pc, #76]	; (3efc <mcp2515_int_thread+0x178>)
    3eb0:	9302      	str	r3, [sp, #8]
    3eb2:	2300      	movs	r3, #0
    3eb4:	e9cd 3300 	strd	r3, r3, [sp]
    3eb8:	2201      	movs	r2, #1
    3eba:	4631      	mov	r1, r6
    3ebc:	4618      	mov	r0, r3
    3ebe:	f003 f905 	bl	70cc <z_log_msg_runtime_create.constprop.0>
    3ec2:	e771      	b.n	3da8 <mcp2515_int_thread+0x24>
	if (state_change_cb && dev_data->old_state != state) {
    3ec4:	2d00      	cmp	r5, #0
    3ec6:	d0dd      	beq.n	3e84 <mcp2515_int_thread+0x100>
    3ec8:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3ecc:	f899 2170 	ldrb.w	r2, [r9, #368]	; 0x170
    3ed0:	428a      	cmp	r2, r1
    3ed2:	d0d7      	beq.n	3e84 <mcp2515_int_thread+0x100>
		dev_data->old_state = state;
    3ed4:	f889 1170 	strb.w	r1, [r9, #368]	; 0x170
		state_change_cb(dev, state, err_cnt, state_change_cb_data);
    3ed8:	9a07      	ldr	r2, [sp, #28]
    3eda:	4620      	mov	r0, r4
    3edc:	47a8      	blx	r5
    3ede:	e7d1      	b.n	3e84 <mcp2515_int_thread+0x100>
		*value ^= data->invert;
    3ee0:	9b07      	ldr	r3, [sp, #28]
    3ee2:	f8d9 2000 	ldr.w	r2, [r9]
    3ee6:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    3ee8:	2301      	movs	r3, #1
    3eea:	40ab      	lsls	r3, r5
		} else if (ret == 0) {
    3eec:	421a      	tst	r2, r3
    3eee:	f47f af5b 	bne.w	3da8 <mcp2515_int_thread+0x24>
    3ef2:	e74f      	b.n	3d94 <mcp2515_int_thread+0x10>
    3ef4:	00007ca0 	.word	0x00007ca0
    3ef8:	00008784 	.word	0x00008784
    3efc:	000087ac 	.word	0x000087ac
    3f00:	00008765 	.word	0x00008765

00003f04 <mcp2515_set_timing>:
{
    3f04:	b570      	push	{r4, r5, r6, lr}
    3f06:	4605      	mov	r5, r0
	struct mcp2515_data *dev_data = dev->data;
    3f08:	6906      	ldr	r6, [r0, #16]
{
    3f0a:	b08c      	sub	sp, #48	; 0x30
	if (!timing) {
    3f0c:	2900      	cmp	r1, #0
    3f0e:	d067      	beq.n	3fe0 <mcp2515_set_timing+0xdc>
	if (dev_data->started) {
    3f10:	f896 2172 	ldrb.w	r2, [r6, #370]	; 0x172
    3f14:	2a00      	cmp	r2, #0
    3f16:	d166      	bne.n	3fe6 <mcp2515_set_timing+0xe2>
	uint8_t brp = timing->prescaler - 1;
    3f18:	890a      	ldrh	r2, [r1, #8]
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
    3f1a:	8808      	ldrh	r0, [r1, #0]
	uint8_t brp = timing->prescaler - 1;
    3f1c:	3a01      	subs	r2, #1
    3f1e:	b2d2      	uxtb	r2, r2
	if (timing->sjw != CAN_SJW_NO_CHANGE) {
    3f20:	b118      	cbz	r0, 3f2a <mcp2515_set_timing+0x26>
		dev_data->sjw = (timing->sjw - 1) << 6;
    3f22:	3801      	subs	r0, #1
    3f24:	0180      	lsls	r0, r0, #6
    3f26:	f886 0173 	strb.w	r0, [r6, #371]	; 0x173
	uint8_t cnf1 = dev_data->sjw | brp;
    3f2a:	f896 0173 	ldrb.w	r0, [r6, #371]	; 0x173
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
    3f2e:	888c      	ldrh	r4, [r1, #4]
	uint8_t cnf1 = dev_data->sjw | brp;
    3f30:	4302      	orrs	r2, r0
	const uint8_t prseg = (timing->prop_seg - 1);
    3f32:	8848      	ldrh	r0, [r1, #2]
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
    3f34:	88c9      	ldrh	r1, [r1, #6]
	config_buf[2] = cnf1;
    3f36:	f88d 2016 	strb.w	r2, [sp, #22]
	const uint8_t phseg1 = (timing->phase_seg1 - 1) << 3;
    3f3a:	3c01      	subs	r4, #1
	const uint8_t prseg = (timing->prop_seg - 1);
    3f3c:	3801      	subs	r0, #1
	const uint8_t cnf2 = btlmode | sam | phseg1 | prseg;
    3f3e:	ea40 00c4 	orr.w	r0, r0, r4, lsl #3
    3f42:	f060 007f 	orn	r0, r0, #127	; 0x7f
	config_buf[3] = caninte;
    3f46:	223f      	movs	r2, #63	; 0x3f
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    3f48:	f506 76ae 	add.w	r6, r6, #348	; 0x15c
	const uint8_t phseg2 = (timing->phase_seg2 - 1);
    3f4c:	3901      	subs	r1, #1
	config_buf[1] = cnf2;
    3f4e:	f88d 0015 	strb.w	r0, [sp, #21]
	config_buf[3] = caninte;
    3f52:	f88d 2017 	strb.w	r2, [sp, #23]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    3f56:	f04f 33ff 	mov.w	r3, #4294967295
    3f5a:	f04f 32ff 	mov.w	r2, #4294967295
    3f5e:	4630      	mov	r0, r6
	config_buf[0] = cnf3;
    3f60:	f88d 1014 	strb.w	r1, [sp, #20]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    3f64:	f003 f8c1 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
    3f68:	f642 0302 	movw	r3, #10242	; 0x2802
	struct spi_buf tx_buf[] = {
    3f6c:	aa05      	add	r2, sp, #20
	uint8_t cmd_buf[] = { MCP2515_OPCODE_WRITE, reg_addr };
    3f6e:	f8ad 3010 	strh.w	r3, [sp, #16]
	struct spi_buf tx_buf[] = {
    3f72:	920a      	str	r2, [sp, #40]	; 0x28
    3f74:	ab04      	add	r3, sp, #16
    3f76:	2204      	movs	r2, #4
    3f78:	9308      	str	r3, [sp, #32]
    3f7a:	920b      	str	r2, [sp, #44]	; 0x2c
    3f7c:	2302      	movs	r3, #2
	const struct spi_buf_set tx = {
    3f7e:	aa08      	add	r2, sp, #32
	return spi_write_dt(&dev_cfg->bus, &tx);
    3f80:	6868      	ldr	r0, [r5, #4]
	struct spi_buf tx_buf[] = {
    3f82:	9309      	str	r3, [sp, #36]	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
    3f84:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    3f86:	e9cd 2306 	strd	r2, r3, [sp, #24]
	return spi_write_dt(&dev_cfg->bus, &tx);
    3f8a:	f003 fa03 	bl	7394 <spi_write_dt>
	if (ret < 0) {
    3f8e:	1e04      	subs	r4, r0, #0
    3f90:	da10      	bge.n	3fb4 <mcp2515_set_timing+0xb0>
		LOG_ERR("Failed to write the configuration [%d]", ret);
    3f92:	4b16      	ldr	r3, [pc, #88]	; (3fec <mcp2515_set_timing+0xe8>)
    3f94:	9403      	str	r4, [sp, #12]
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
    3f96:	9302      	str	r3, [sp, #8]
    3f98:	2300      	movs	r3, #0
    3f9a:	e9cd 3300 	strd	r3, r3, [sp]
    3f9e:	4914      	ldr	r1, [pc, #80]	; (3ff0 <mcp2515_set_timing+0xec>)
    3fa0:	2201      	movs	r2, #1
    3fa2:	4618      	mov	r0, r3
    3fa4:	f003 f892 	bl	70cc <z_log_msg_runtime_create.constprop.0>
	k_mutex_unlock(&dev_data->mutex);
    3fa8:	4630      	mov	r0, r6
    3faa:	f003 f8a0 	bl	70ee <k_mutex_unlock.isra.0>
}
    3fae:	4620      	mov	r0, r4
    3fb0:	b00c      	add	sp, #48	; 0x30
    3fb2:	bd70      	pop	{r4, r5, r6, pc}
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB0CTRL, rx0_ctrl,
    3fb4:	2364      	movs	r3, #100	; 0x64
    3fb6:	6868      	ldr	r0, [r5, #4]
    3fb8:	461a      	mov	r2, r3
    3fba:	2160      	movs	r1, #96	; 0x60
    3fbc:	f003 f9f6 	bl	73ac <mcp2515_cmd_bit_modify.isra.0>
	if (ret < 0) {
    3fc0:	1e04      	subs	r4, r0, #0
    3fc2:	da02      	bge.n	3fca <mcp2515_set_timing+0xc6>
		LOG_ERR("Failed to write RXB0CTRL [%d]", ret);
    3fc4:	4b0b      	ldr	r3, [pc, #44]	; (3ff4 <mcp2515_set_timing+0xf0>)
    3fc6:	9403      	str	r4, [sp, #12]
    3fc8:	e7e5      	b.n	3f96 <mcp2515_set_timing+0x92>
	ret = mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_RXB1CTRL, rx1_ctrl,
    3fca:	2360      	movs	r3, #96	; 0x60
    3fcc:	6868      	ldr	r0, [r5, #4]
    3fce:	461a      	mov	r2, r3
    3fd0:	2170      	movs	r1, #112	; 0x70
    3fd2:	f003 f9eb 	bl	73ac <mcp2515_cmd_bit_modify.isra.0>
	if (ret < 0) {
    3fd6:	1e04      	subs	r4, r0, #0
    3fd8:	dae6      	bge.n	3fa8 <mcp2515_set_timing+0xa4>
		LOG_ERR("Failed to write RXB1CTRL [%d]", ret);
    3fda:	4b07      	ldr	r3, [pc, #28]	; (3ff8 <mcp2515_set_timing+0xf4>)
    3fdc:	9403      	str	r4, [sp, #12]
    3fde:	e7da      	b.n	3f96 <mcp2515_set_timing+0x92>
		return -EINVAL;
    3fe0:	f06f 0415 	mvn.w	r4, #21
    3fe4:	e7e3      	b.n	3fae <mcp2515_set_timing+0xaa>
		return -EBUSY;
    3fe6:	f06f 040f 	mvn.w	r4, #15
    3fea:	e7e0      	b.n	3fae <mcp2515_set_timing+0xaa>
    3fec:	000087c2 	.word	0x000087c2
    3ff0:	00007ca0 	.word	0x00007ca0
    3ff4:	000087e9 	.word	0x000087e9
    3ff8:	00008807 	.word	0x00008807

00003ffc <mcp2515_init>:
	}
};


static int mcp2515_init(const struct device *dev)
{
    3ffc:	e92d 4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    4000:	4605      	mov	r5, r0
	const struct mcp2515_config *dev_cfg = dev->config;
    4002:	6844      	ldr	r4, [r0, #4]
	struct mcp2515_data *dev_data = dev->data;
    4004:	6907      	ldr	r7, [r0, #16]
{
    4006:	b08e      	sub	sp, #56	; 0x38
	return z_impl_k_sem_init(sem, initial_count, limit);
    4008:	2201      	movs	r2, #1
    400a:	2100      	movs	r1, #0
    400c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    4010:	f003 fbf6 	bl	7800 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    4014:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
    4018:	f003 fbeb 	bl	77f2 <z_impl_k_mutex_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    401c:	2201      	movs	r2, #1
    401e:	4611      	mov	r1, r2
    4020:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
    4024:	f003 fbec 	bl	7800 <z_impl_k_sem_init>

	k_sem_init(&dev_data->int_sem, 0, 1);
	k_mutex_init(&dev_data->mutex);
	k_sem_init(&dev_data->tx_sem, MCP2515_TX_CNT, MCP2515_TX_CNT);

	if (dev_cfg->phy != NULL) {
    4028:	6b20      	ldr	r0, [r4, #48]	; 0x30
    402a:	b180      	cbz	r0, 404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
    402c:	f003 fbab 	bl	7786 <z_device_is_ready>
    4030:	4603      	mov	r3, r0
		if (!device_is_ready(dev_cfg->phy)) {
    4032:	b960      	cbnz	r0, 404e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4e>
			LOG_ERR("CAN transceiver not ready");
    4034:	4a7c      	ldr	r2, [pc, #496]	; (4228 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x228>)
    4036:	497d      	ldr	r1, [pc, #500]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    4038:	9300      	str	r3, [sp, #0]
    403a:	e9cd 3201 	strd	r3, r2, [sp, #4]
    403e:	2201      	movs	r2, #1
    4040:	f003 f844 	bl	70cc <z_log_msg_runtime_create.constprop.0>
			return -ENODEV;
    4044:	f06f 0012 	mvn.w	r0, #18
	}

	ret = can_set_mode(dev, CAN_MODE_NORMAL);

	return ret;
}
    4048:	b00e      	add	sp, #56	; 0x38
    404a:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
    404e:	6820      	ldr	r0, [r4, #0]
    4050:	f003 fb99 	bl	7786 <z_device_is_ready>
    4054:	b968      	cbnz	r0, 4072 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x72>
		LOG_ERR("SPI bus %s not ready", dev_cfg->bus.bus->name);
    4056:	6823      	ldr	r3, [r4, #0]
    4058:	4974      	ldr	r1, [pc, #464]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    405a:	681b      	ldr	r3, [r3, #0]
    405c:	9303      	str	r3, [sp, #12]
    405e:	4b74      	ldr	r3, [pc, #464]	; (4230 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x230>)
    4060:	9302      	str	r3, [sp, #8]
    4062:	2300      	movs	r3, #0
    4064:	e9cd 3300 	strd	r3, r3, [sp]
    4068:	2201      	movs	r2, #1
    406a:	4618      	mov	r0, r3
    406c:	f003 f82e 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -ENODEV;
    4070:	e7e8      	b.n	4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
    4072:	68e3      	ldr	r3, [r4, #12]
    4074:	b123      	cbz	r3, 4080 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x80>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    4076:	6818      	ldr	r0, [r3, #0]
    4078:	f003 fb85 	bl	7786 <z_device_is_ready>
	if (spec->config.cs &&
    407c:	2800      	cmp	r0, #0
    407e:	d0ea      	beq.n	4056 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x56>
	uint8_t cmd_buf[] = { MCP2515_OPCODE_RESET };
    4080:	23c0      	movs	r3, #192	; 0xc0
    4082:	f88d 3020 	strb.w	r3, [sp, #32]
	const struct spi_buf tx_buf = {
    4086:	ab08      	add	r3, sp, #32
    4088:	2601      	movs	r6, #1
    408a:	9309      	str	r3, [sp, #36]	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
    408c:	6868      	ldr	r0, [r5, #4]
	const struct spi_buf tx_buf = {
    408e:	960a      	str	r6, [sp, #40]	; 0x28
	const struct spi_buf_set tx = {
    4090:	ab09      	add	r3, sp, #36	; 0x24
	return spi_write_dt(&dev_cfg->bus, &tx);
    4092:	a90b      	add	r1, sp, #44	; 0x2c
	const struct spi_buf_set tx = {
    4094:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	return spi_write_dt(&dev_cfg->bus, &tx);
    4098:	f003 f97c 	bl	7394 <spi_write_dt>
	if (mcp2515_cmd_soft_reset(dev)) {
    409c:	b160      	cbz	r0, 40b8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xb8>
		LOG_ERR("Soft-reset failed");
    409e:	4b65      	ldr	r3, [pc, #404]	; (4234 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x234>)
    40a0:	9302      	str	r3, [sp, #8]
    40a2:	2300      	movs	r3, #0
    40a4:	e9cd 3300 	strd	r3, r3, [sp]
    40a8:	4632      	mov	r2, r6
			LOG_ERR("Can't find timing for given param");
    40aa:	4618      	mov	r0, r3
    40ac:	495f      	ldr	r1, [pc, #380]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    40ae:	f003 f80d 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -EIO;
    40b2:	f06f 0004 	mvn.w	r0, #4
    40b6:	e7c7      	b.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
	if (!device_is_ready(dev_cfg->int_gpio.port)) {
    40b8:	6920      	ldr	r0, [r4, #16]
    40ba:	f003 fb64 	bl	7786 <z_device_is_ready>
    40be:	4603      	mov	r3, r0
    40c0:	b908      	cbnz	r0, 40c6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xc6>
		LOG_ERR("Interrupt GPIO port not ready");
    40c2:	4a5d      	ldr	r2, [pc, #372]	; (4238 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x238>)
    40c4:	e7b7      	b.n	4036 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x36>
				  spec->dt_flags | extra_flags);
    40c6:	8ae3      	ldrh	r3, [r4, #22]
	return gpio_pin_configure(spec->port,
    40c8:	6920      	ldr	r0, [r4, #16]
				  spec->pin,
    40ca:	7d21      	ldrb	r1, [r4, #20]
	return gpio_pin_configure(spec->port,
    40cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
    40d0:	f8d0 c010 	ldr.w	ip, [r0, #16]
	const struct gpio_driver_api *api =
    40d4:	f8d0 e008 	ldr.w	lr, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    40d8:	f013 0f01 	tst.w	r3, #1
    40dc:	f8dc 3000 	ldr.w	r3, [ip]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    40e0:	fa06 f601 	lsl.w	r6, r6, r1
    40e4:	bf14      	ite	ne
    40e6:	4333      	orrne	r3, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    40e8:	43b3      	biceq	r3, r6
    40ea:	f8cc 3000 	str.w	r3, [ip]
	return api->pin_configure(port, pin, flags);
    40ee:	f8de 3000 	ldr.w	r3, [lr]
    40f2:	4798      	blx	r3
	if (gpio_pin_configure_dt(&dev_cfg->int_gpio, GPIO_INPUT)) {
    40f4:	b160      	cbz	r0, 4110 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x110>
		LOG_ERR("Unable to configure interrupt GPIO");
    40f6:	4b51      	ldr	r3, [pc, #324]	; (423c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x23c>)
    40f8:	9302      	str	r3, [sp, #8]
    40fa:	2300      	movs	r3, #0
    40fc:	e9cd 3300 	strd	r3, r3, [sp]
    4100:	494a      	ldr	r1, [pc, #296]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    4102:	2201      	movs	r2, #1
    4104:	4618      	mov	r0, r3
    4106:	f002 ffe1 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		return -EINVAL;
    410a:	f06f 0015 	mvn.w	r0, #21
    410e:	e79b      	b.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
			   BIT(dev_cfg->int_gpio.pin));
    4110:	7d23      	ldrb	r3, [r4, #20]
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    4112:	4a4b      	ldr	r2, [pc, #300]	; (4240 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x240>)
    4114:	f04f 0801 	mov.w	r8, #1
    4118:	fa08 f303 	lsl.w	r3, r8, r3
	callback->pin_mask = pin_mask;
    411c:	e9c7 2301 	strd	r2, r3, [r7, #4]
	if (gpio_add_callback(dev_cfg->int_gpio.port,
    4120:	6920      	ldr	r0, [r4, #16]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    4122:	6883      	ldr	r3, [r0, #8]
    4124:	69db      	ldr	r3, [r3, #28]
    4126:	2b00      	cmp	r3, #0
    4128:	d0ef      	beq.n	410a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10a>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    412a:	4642      	mov	r2, r8
    412c:	4639      	mov	r1, r7
    412e:	4798      	blx	r3
    4130:	2800      	cmp	r0, #0
    4132:	d1ea      	bne.n	410a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10a>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    4134:	6920      	ldr	r0, [r4, #16]
    4136:	7d21      	ldrb	r1, [r4, #20]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    4138:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    413a:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    413c:	6812      	ldr	r2, [r2, #0]
    413e:	fa08 f601 	lsl.w	r6, r8, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4142:	4216      	tst	r6, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4144:	699e      	ldr	r6, [r3, #24]
    4146:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
    414a:	bf14      	ite	ne
    414c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
    4150:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
    4154:	47b0      	blx	r6
	if (gpio_pin_interrupt_configure_dt(&dev_cfg->int_gpio,
    4156:	4606      	mov	r6, r0
    4158:	2800      	cmp	r0, #0
    415a:	d1d6      	bne.n	410a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10a>
	k_thread_create(&dev_data->int_thread, dev_data->int_thread_stack,
    415c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    4160:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
    4164:	3b10      	subs	r3, #16
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4166:	f04f 0a00 	mov.w	sl, #0
    416a:	f04f 0b00 	mov.w	fp, #0
    416e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    4172:	e9cd 0001 	strd	r0, r0, [sp, #4]
    4176:	4b33      	ldr	r3, [pc, #204]	; (4244 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x244>)
    4178:	9500      	str	r5, [sp, #0]
    417a:	f107 0010 	add.w	r0, r7, #16
    417e:	e9cd ab06 	strd	sl, fp, [sp, #24]
    4182:	f001 fc69 	bl	5a58 <z_impl_k_thread_create>
	(void)memset(dev_data->rx_cb, 0, sizeof(dev_data->rx_cb));
    4186:	2214      	movs	r2, #20
    4188:	4631      	mov	r1, r6
    418a:	f507 7082 	add.w	r0, r7, #260	; 0x104
    418e:	f002 fde1 	bl	6d54 <memset>
	(void)memset(dev_data->filter, 0, sizeof(dev_data->filter));
    4192:	f507 7096 	add.w	r0, r7, #300	; 0x12c
    4196:	2228      	movs	r2, #40	; 0x28
    4198:	4631      	mov	r1, r6
    419a:	f002 fddb 	bl	6d54 <memset>
	dev_data->old_state = CAN_STATE_ERROR_ACTIVE;
    419e:	f887 6170 	strb.w	r6, [r7, #368]	; 0x170
	timing.sjw = dev_cfg->tq_sjw;
    41a2:	f894 3020 	ldrb.w	r3, [r4, #32]
    41a6:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	if (dev_cfg->sample_point && USE_SP_ALGO) {
    41aa:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
    41ac:	b177      	cbz	r7, 41cc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1cc>
		ret = can_calc_timing(dev, &timing, dev_cfg->bus_speed,
    41ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
	return z_impl_can_calc_timing(dev, res, bitrate, sample_pnt);
    41b0:	463b      	mov	r3, r7
    41b2:	a90b      	add	r1, sp, #44	; 0x2c
    41b4:	4628      	mov	r0, r5
    41b6:	f7ff fbf1 	bl	399c <z_impl_can_calc_timing>
		if (ret == -EINVAL) {
    41ba:	3016      	adds	r0, #22
    41bc:	d123      	bne.n	4206 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x206>
			LOG_ERR("Can't find timing for given param");
    41be:	4b22      	ldr	r3, [pc, #136]	; (4248 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x248>)
    41c0:	9600      	str	r6, [sp, #0]
    41c2:	e9cd 6301 	strd	r6, r3, [sp, #4]
    41c6:	4642      	mov	r2, r8
    41c8:	4633      	mov	r3, r6
    41ca:	e76e      	b.n	40aa <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xaa>
		timing.prop_seg = dev_cfg->tq_prop;
    41cc:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    41d0:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
		timing.phase_seg1 = dev_cfg->tq_bs1;
    41d4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
    41d8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		timing.phase_seg2 = dev_cfg->tq_bs2;
    41dc:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    41e0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		ret = can_calc_prescaler(dev, &timing, dev_cfg->bus_speed);
    41e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    41e6:	a90b      	add	r1, sp, #44	; 0x2c
    41e8:	4628      	mov	r0, r5
    41ea:	f002 ff3a 	bl	7062 <can_calc_prescaler>
		if (ret) {
    41ee:	b150      	cbz	r0, 4206 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x206>
			LOG_WRN("Bitrate error: %d", ret);
    41f0:	4b16      	ldr	r3, [pc, #88]	; (424c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x24c>)
    41f2:	9003      	str	r0, [sp, #12]
    41f4:	e9cd 7301 	strd	r7, r3, [sp, #4]
    41f8:	490c      	ldr	r1, [pc, #48]	; (422c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22c>)
    41fa:	9700      	str	r7, [sp, #0]
    41fc:	463b      	mov	r3, r7
    41fe:	2202      	movs	r2, #2
    4200:	4638      	mov	r0, r7
    4202:	f002 ff63 	bl	70cc <z_log_msg_runtime_create.constprop.0>
	return z_impl_k_usleep(us);
    4206:	2080      	movs	r0, #128	; 0x80
    4208:	f002 f8aa 	bl	6360 <z_impl_k_usleep>
	return api->set_timing(dev, timing);
    420c:	68ab      	ldr	r3, [r5, #8]
    420e:	a90b      	add	r1, sp, #44	; 0x2c
    4210:	691b      	ldr	r3, [r3, #16]
    4212:	4628      	mov	r0, r5
    4214:	4798      	blx	r3
	if (ret) {
    4216:	2800      	cmp	r0, #0
    4218:	f47f af16 	bne.w	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>

static inline int z_impl_can_set_mode(const struct device *dev, can_mode_t mode)
{
	const struct can_driver_api *api = (const struct can_driver_api *)dev->api;

	return api->set_mode(dev, mode);
    421c:	68ab      	ldr	r3, [r5, #8]
    421e:	4601      	mov	r1, r0
    4220:	68db      	ldr	r3, [r3, #12]
    4222:	4628      	mov	r0, r5
    4224:	4798      	blx	r3
	return ret;
    4226:	e70f      	b.n	4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>
    4228:	00008825 	.word	0x00008825
    422c:	00007ca0 	.word	0x00007ca0
    4230:	0000883f 	.word	0x0000883f
    4234:	00008854 	.word	0x00008854
    4238:	00008866 	.word	0x00008866
    423c:	00008884 	.word	0x00008884
    4240:	00007349 	.word	0x00007349
    4244:	00003d85 	.word	0x00003d85
    4248:	000088a7 	.word	0x000088a7
    424c:	000088c9 	.word	0x000088c9

00004250 <mcp2515_set_mode_int>:
{
    4250:	b570      	push	{r4, r5, r6, lr}
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
    4252:	014b      	lsls	r3, r1, #5
{
    4254:	4605      	mov	r5, r0
    4256:	b086      	sub	sp, #24
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
    4258:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
    425c:	22e0      	movs	r2, #224	; 0xe0
    425e:	6840      	ldr	r0, [r0, #4]
{
    4260:	460e      	mov	r6, r1
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_CANCTRL,
    4262:	210f      	movs	r1, #15
    4264:	f003 f8a2 	bl	73ac <mcp2515_cmd_bit_modify.isra.0>
	mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
    4268:	6868      	ldr	r0, [r5, #4]
    426a:	2301      	movs	r3, #1
    426c:	f10d 0217 	add.w	r2, sp, #23
    4270:	210e      	movs	r1, #14
    4272:	f003 f86d 	bl	7350 <mcp2515_cmd_read_reg.isra.0>
	while (((canstat & MCP2515_CANSTAT_MODE_MASK) >> MCP2515_CANSTAT_MODE_POS)
    4276:	2465      	movs	r4, #101	; 0x65
    4278:	f89d 3017 	ldrb.w	r3, [sp, #23]
		!= mcp2515_mode) {
    427c:	ebb6 1f53 	cmp.w	r6, r3, lsr #5
    4280:	d101      	bne.n	4286 <mcp2515_set_mode_int+0x36>
	return 0;
    4282:	2000      	movs	r0, #0
    4284:	e00d      	b.n	42a2 <mcp2515_set_mode_int+0x52>
		if (--retries < 0) {
    4286:	3c01      	subs	r4, #1
    4288:	d10d      	bne.n	42a6 <mcp2515_set_mode_int+0x56>
			LOG_ERR("Timeout trying to set MCP2515 operation mode");
    428a:	4b0d      	ldr	r3, [pc, #52]	; (42c0 <mcp2515_set_mode_int+0x70>)
    428c:	490d      	ldr	r1, [pc, #52]	; (42c4 <mcp2515_set_mode_int+0x74>)
    428e:	9400      	str	r4, [sp, #0]
    4290:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4294:	4620      	mov	r0, r4
    4296:	4623      	mov	r3, r4
    4298:	2201      	movs	r2, #1
    429a:	f002 ff17 	bl	70cc <z_log_msg_runtime_create.constprop.0>
			return -EIO;
    429e:	f06f 0004 	mvn.w	r0, #4
}
    42a2:	b006      	add	sp, #24
    42a4:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sleep(timeout);
    42a6:	2100      	movs	r1, #0
    42a8:	2001      	movs	r0, #1
    42aa:	f002 f83f 	bl	632c <z_impl_k_sleep>
		mcp2515_cmd_read_reg(dev, MCP2515_ADDR_CANSTAT, &canstat, 1);
    42ae:	6868      	ldr	r0, [r5, #4]
    42b0:	2301      	movs	r3, #1
    42b2:	f10d 0217 	add.w	r2, sp, #23
    42b6:	210e      	movs	r1, #14
    42b8:	f003 f84a 	bl	7350 <mcp2515_cmd_read_reg.isra.0>
    42bc:	e7dc      	b.n	4278 <mcp2515_set_mode_int+0x28>
    42be:	bf00      	nop
    42c0:	000088db 	.word	0x000088db
    42c4:	00007ca0 	.word	0x00007ca0

000042c8 <mcp2515_stop>:
{
    42c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct mcp2515_data *dev_data = dev->data;
    42cc:	f8d0 8010 	ldr.w	r8, [r0, #16]
	const struct mcp2515_config *dev_cfg = dev->config;
    42d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
	if (!dev_data->started) {
    42d4:	f898 3172 	ldrb.w	r3, [r8, #370]	; 0x172
{
    42d8:	b085      	sub	sp, #20
    42da:	4606      	mov	r6, r0
	if (!dev_data->started) {
    42dc:	2b00      	cmp	r3, #0
    42de:	d048      	beq.n	4372 <mcp2515_stop+0xaa>
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    42e0:	f508 77ae 	add.w	r7, r8, #348	; 0x15c
    42e4:	f04f 32ff 	mov.w	r2, #4294967295
    42e8:	f04f 33ff 	mov.w	r3, #4294967295
    42ec:	4638      	mov	r0, r7
    42ee:	f002 fefc 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	mcp2515_cmd_bit_modify(dev, MCP2515_ADDR_TXB0CTRL,
    42f2:	2300      	movs	r3, #0
    42f4:	2208      	movs	r2, #8
    42f6:	2130      	movs	r1, #48	; 0x30
    42f8:	6870      	ldr	r0, [r6, #4]
    42fa:	f003 f857 	bl	73ac <mcp2515_cmd_bit_modify.isra.0>
	ret = mcp2515_set_mode_int(dev, MCP2515_MODE_CONFIGURATION);
    42fe:	2104      	movs	r1, #4
    4300:	4630      	mov	r0, r6
    4302:	f7ff ffa5 	bl	4250 <mcp2515_set_mode_int>
	if (ret < 0) {
    4306:	1e04      	subs	r4, r0, #0
    4308:	f04f 0500 	mov.w	r5, #0
    430c:	da11      	bge.n	4332 <mcp2515_stop+0x6a>
		LOG_ERR("Failed to enter configuration mode [%d]", ret);
    430e:	4b1b      	ldr	r3, [pc, #108]	; (437c <mcp2515_stop+0xb4>)
    4310:	491b      	ldr	r1, [pc, #108]	; (4380 <mcp2515_stop+0xb8>)
    4312:	9403      	str	r4, [sp, #12]
    4314:	e9cd 5301 	strd	r5, r3, [sp, #4]
    4318:	4628      	mov	r0, r5
    431a:	9500      	str	r5, [sp, #0]
    431c:	462b      	mov	r3, r5
    431e:	2201      	movs	r2, #1
    4320:	f002 fed4 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		k_mutex_unlock(&dev_data->mutex);
    4324:	4638      	mov	r0, r7
    4326:	f002 fee2 	bl	70ee <k_mutex_unlock.isra.0>
}
    432a:	4620      	mov	r0, r4
    432c:	b005      	add	sp, #20
    432e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_mutex_unlock(&dev_data->mutex);
    4332:	4638      	mov	r0, r7
	dev_data->started = false;
    4334:	f888 5172 	strb.w	r5, [r8, #370]	; 0x172
	k_mutex_unlock(&dev_data->mutex);
    4338:	f002 fed9 	bl	70ee <k_mutex_unlock.isra.0>
		mcp2515_tx_done(dev, i, -ENETDOWN);
    433c:	4630      	mov	r0, r6
    433e:	f06f 0272 	mvn.w	r2, #114	; 0x72
    4342:	4629      	mov	r1, r5
    4344:	f002 fed5 	bl	70f2 <mcp2515_tx_done>
	if (dev_cfg->phy != NULL) {
    4348:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
    434c:	b1a0      	cbz	r0, 4378 <mcp2515_stop+0xb0>
static inline int can_transceiver_disable(const struct device *dev)
{
	const struct can_transceiver_driver_api *api =
		(const struct can_transceiver_driver_api *)dev->api;

	return api->disable(dev);
    434e:	6883      	ldr	r3, [r0, #8]
    4350:	685b      	ldr	r3, [r3, #4]
    4352:	4798      	blx	r3
		if (ret != 0) {
    4354:	4604      	mov	r4, r0
    4356:	2800      	cmp	r0, #0
    4358:	d0e7      	beq.n	432a <mcp2515_stop+0x62>
			LOG_ERR("Failed to disable CAN transceiver [%d]", ret);
    435a:	4b0a      	ldr	r3, [pc, #40]	; (4384 <mcp2515_stop+0xbc>)
    435c:	9003      	str	r0, [sp, #12]
    435e:	e9cd 5301 	strd	r5, r3, [sp, #4]
    4362:	4907      	ldr	r1, [pc, #28]	; (4380 <mcp2515_stop+0xb8>)
    4364:	9500      	str	r5, [sp, #0]
    4366:	462b      	mov	r3, r5
    4368:	2201      	movs	r2, #1
    436a:	4628      	mov	r0, r5
    436c:	f002 feae 	bl	70cc <z_log_msg_runtime_create.constprop.0>
			return ret;
    4370:	e7db      	b.n	432a <mcp2515_stop+0x62>
		return -EALREADY;
    4372:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4376:	e7d8      	b.n	432a <mcp2515_stop+0x62>
	return 0;
    4378:	4604      	mov	r4, r0
    437a:	e7d6      	b.n	432a <mcp2515_stop+0x62>
    437c:	00008908 	.word	0x00008908
    4380:	00007ca0 	.word	0x00007ca0
    4384:	00008930 	.word	0x00008930

00004388 <mcp2515_start>:
{
    4388:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct mcp2515_data *dev_data = dev->data;
    438c:	6907      	ldr	r7, [r0, #16]
	const struct mcp2515_config *dev_cfg = dev->config;
    438e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (dev_data->started) {
    4392:	f897 6172 	ldrb.w	r6, [r7, #370]	; 0x172
{
    4396:	4605      	mov	r5, r0
	if (dev_data->started) {
    4398:	2e00      	cmp	r6, #0
    439a:	d13f      	bne.n	441c <mcp2515_start+0x94>
	if (dev_cfg->phy != NULL) {
    439c:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
    43a0:	b198      	cbz	r0, 43ca <mcp2515_start+0x42>
	return api->enable(dev);
    43a2:	6883      	ldr	r3, [r0, #8]
    43a4:	681b      	ldr	r3, [r3, #0]
    43a6:	4798      	blx	r3
		if (ret != 0) {
    43a8:	4604      	mov	r4, r0
    43aa:	b170      	cbz	r0, 43ca <mcp2515_start+0x42>
			LOG_ERR("Failed to enable CAN transceiver [%d]", ret);
    43ac:	4b1d      	ldr	r3, [pc, #116]	; (4424 <mcp2515_start+0x9c>)
    43ae:	9003      	str	r0, [sp, #12]
    43b0:	e9cd 6301 	strd	r6, r3, [sp, #4]
    43b4:	491c      	ldr	r1, [pc, #112]	; (4428 <mcp2515_start+0xa0>)
    43b6:	9600      	str	r6, [sp, #0]
    43b8:	4633      	mov	r3, r6
    43ba:	2201      	movs	r2, #1
    43bc:	4630      	mov	r0, r6
    43be:	f002 fe85 	bl	70cc <z_log_msg_runtime_create.constprop.0>
}
    43c2:	4620      	mov	r0, r4
    43c4:	b004      	add	sp, #16
    43c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    43ca:	f507 76ae 	add.w	r6, r7, #348	; 0x15c
    43ce:	f04f 32ff 	mov.w	r2, #4294967295
    43d2:	f04f 33ff 	mov.w	r3, #4294967295
    43d6:	4630      	mov	r0, r6
    43d8:	f002 fe87 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	ret = mcp2515_set_mode_int(dev, dev_data->mcp2515_mode);
    43dc:	f897 1171 	ldrb.w	r1, [r7, #369]	; 0x171
    43e0:	4628      	mov	r0, r5
    43e2:	f7ff ff35 	bl	4250 <mcp2515_set_mode_int>
	if (ret < 0) {
    43e6:	1e04      	subs	r4, r0, #0
    43e8:	da14      	bge.n	4414 <mcp2515_start+0x8c>
		LOG_ERR("Failed to set the mode [%d]", ret);
    43ea:	4b10      	ldr	r3, [pc, #64]	; (442c <mcp2515_start+0xa4>)
    43ec:	9302      	str	r3, [sp, #8]
    43ee:	2300      	movs	r3, #0
    43f0:	4618      	mov	r0, r3
    43f2:	e9cd 3300 	strd	r3, r3, [sp]
    43f6:	490c      	ldr	r1, [pc, #48]	; (4428 <mcp2515_start+0xa0>)
    43f8:	9403      	str	r4, [sp, #12]
    43fa:	2201      	movs	r2, #1
    43fc:	f002 fe66 	bl	70cc <z_log_msg_runtime_create.constprop.0>
		if (dev_cfg->phy != NULL) {
    4400:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
    4404:	b110      	cbz	r0, 440c <mcp2515_start+0x84>
	return api->disable(dev);
    4406:	6883      	ldr	r3, [r0, #8]
    4408:	685b      	ldr	r3, [r3, #4]
    440a:	4798      	blx	r3
	k_mutex_unlock(&dev_data->mutex);
    440c:	4630      	mov	r0, r6
    440e:	f002 fe6e 	bl	70ee <k_mutex_unlock.isra.0>
	return ret;
    4412:	e7d6      	b.n	43c2 <mcp2515_start+0x3a>
		dev_data->started = true;
    4414:	2301      	movs	r3, #1
    4416:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
    441a:	e7f7      	b.n	440c <mcp2515_start+0x84>
		return -EALREADY;
    441c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4420:	e7cf      	b.n	43c2 <mcp2515_start+0x3a>
    4422:	bf00      	nop
    4424:	00008957 	.word	0x00008957
    4428:	00007ca0 	.word	0x00007ca0
    442c:	0000897d 	.word	0x0000897d

00004430 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4430:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4432:	2301      	movs	r3, #1
    4434:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4436:	4a0e      	ldr	r2, [pc, #56]	; (4470 <compare_int_lock+0x40>)
    4438:	f3bf 8f5b 	dmb	ish
    443c:	43dc      	mvns	r4, r3
    443e:	e852 1f00 	ldrex	r1, [r2]
    4442:	ea01 0504 	and.w	r5, r1, r4
    4446:	e842 5600 	strex	r6, r5, [r2]
    444a:	2e00      	cmp	r6, #0
    444c:	d1f7      	bne.n	443e <compare_int_lock+0xe>
    444e:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4456:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4458:	4806      	ldr	r0, [pc, #24]	; (4474 <compare_int_lock+0x44>)
    445a:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    445e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4462:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4466:	420b      	tst	r3, r1
}
    4468:	bf14      	ite	ne
    446a:	2001      	movne	r0, #1
    446c:	2000      	moveq	r0, #0
    446e:	bd70      	pop	{r4, r5, r6, pc}
    4470:	20000520 	.word	0x20000520
    4474:	40011000 	.word	0x40011000

00004478 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    4478:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    447a:	490e      	ldr	r1, [pc, #56]	; (44b4 <sys_clock_timeout_handler+0x3c>)
    447c:	e9d1 3400 	ldrd	r3, r4, [r1]
    4480:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    4482:	18c3      	adds	r3, r0, r3
    4484:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    4488:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    448c:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4490:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    4494:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4498:	d209      	bcs.n	44ae <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    449a:	4b07      	ldr	r3, [pc, #28]	; (44b8 <sys_clock_timeout_handler+0x40>)
    449c:	681b      	ldr	r3, [r3, #0]
    449e:	0a1a      	lsrs	r2, r3, #8
    44a0:	061b      	lsls	r3, r3, #24
    44a2:	199c      	adds	r4, r3, r6
    44a4:	4b05      	ldr	r3, [pc, #20]	; (44bc <sys_clock_timeout_handler+0x44>)
    44a6:	f142 0500 	adc.w	r5, r2, #0
    44aa:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    44ae:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    44b0:	f002 b8bc 	b.w	662c <sys_clock_announce>
    44b4:	200002a8 	.word	0x200002a8
    44b8:	20000524 	.word	0x20000524
    44bc:	200002b0 	.word	0x200002b0

000044c0 <compare_int_unlock>:
	if (key) {
    44c0:	b311      	cbz	r1, 4508 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    44c2:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    44c6:	2301      	movs	r3, #1
    44c8:	4a10      	ldr	r2, [pc, #64]	; (450c <compare_int_unlock+0x4c>)
    44ca:	4083      	lsls	r3, r0
    44cc:	e852 cf00 	ldrex	ip, [r2]
    44d0:	ea4c 0c03 	orr.w	ip, ip, r3
    44d4:	e842 c100 	strex	r1, ip, [r2]
    44d8:	2900      	cmp	r1, #0
    44da:	d1f7      	bne.n	44cc <compare_int_unlock+0xc>
    44dc:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    44e0:	4a0b      	ldr	r2, [pc, #44]	; (4510 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    44e6:	4083      	lsls	r3, r0
    44e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    44ec:	4b09      	ldr	r3, [pc, #36]	; (4514 <compare_int_unlock+0x54>)
    44ee:	f3bf 8f5b 	dmb	ish
    44f2:	681b      	ldr	r3, [r3, #0]
    44f4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    44f8:	40c3      	lsrs	r3, r0
    44fa:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    44fc:	bf42      	ittt	mi
    44fe:	4b06      	ldrmi	r3, [pc, #24]	; (4518 <compare_int_unlock+0x58>)
    4500:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4504:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4508:	4770      	bx	lr
    450a:	bf00      	nop
    450c:	20000520 	.word	0x20000520
    4510:	40011000 	.word	0x40011000
    4514:	2000051c 	.word	0x2000051c
    4518:	e000e100 	.word	0xe000e100

0000451c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    451c:	4b0d      	ldr	r3, [pc, #52]	; (4554 <z_nrf_rtc_timer_read+0x38>)
    451e:	6818      	ldr	r0, [r3, #0]
    4520:	0a01      	lsrs	r1, r0, #8
    4522:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4524:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4528:	4b0b      	ldr	r3, [pc, #44]	; (4558 <z_nrf_rtc_timer_read+0x3c>)
    452a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    452e:	1818      	adds	r0, r3, r0
    4530:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4538:	d20a      	bcs.n	4550 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    453a:	4b08      	ldr	r3, [pc, #32]	; (455c <z_nrf_rtc_timer_read+0x40>)
    453c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4540:	4290      	cmp	r0, r2
    4542:	eb71 0303 	sbcs.w	r3, r1, r3
    4546:	d203      	bcs.n	4550 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4548:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    454c:	f141 0100 	adc.w	r1, r1, #0
}
    4550:	4770      	bx	lr
    4552:	bf00      	nop
    4554:	20000524 	.word	0x20000524
    4558:	40011000 	.word	0x40011000
    455c:	200002b0 	.word	0x200002b0

00004560 <compare_set>:
{
    4560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4564:	4616      	mov	r6, r2
    4566:	461f      	mov	r7, r3
    4568:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    456a:	f7ff ff61 	bl	4430 <compare_int_lock>
    456e:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4570:	f7ff ffd4 	bl	451c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4574:	42b0      	cmp	r0, r6
    4576:	eb71 0307 	sbcs.w	r3, r1, r7
    457a:	d251      	bcs.n	4620 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    457c:	4b3a      	ldr	r3, [pc, #232]	; (4668 <compare_set+0x108>)
    457e:	1a30      	subs	r0, r6, r0
    4580:	eb67 0101 	sbc.w	r1, r7, r1
    4584:	4298      	cmp	r0, r3
    4586:	f171 0100 	sbcs.w	r1, r1, #0
    458a:	d26a      	bcs.n	4662 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    458c:	4b37      	ldr	r3, [pc, #220]	; (466c <compare_set+0x10c>)
    458e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4592:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4596:	429f      	cmp	r7, r3
    4598:	bf08      	it	eq
    459a:	4296      	cmpeq	r6, r2
    459c:	d04e      	beq.n	463c <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    459e:	4934      	ldr	r1, [pc, #208]	; (4670 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45a0:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    45a4:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    45a8:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    45ac:	00ad      	lsls	r5, r5, #2
    45ae:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    45b2:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45b4:	b2ad      	uxth	r5, r5
    45b6:	f002 ff12 	bl	73de <event_clear>
	return absolute_time & COUNTER_MAX;
    45ba:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    45be:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    45c2:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    45c6:	4a2b      	ldr	r2, [pc, #172]	; (4674 <compare_set+0x114>)
    45c8:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45ca:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    45ce:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    45d0:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    45d4:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    45d6:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    45da:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    45de:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    45e2:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    45e6:	f06f 0002 	mvn.w	r0, #2
    45ea:	eba0 0008 	sub.w	r0, r0, r8
    45ee:	4460      	add	r0, ip
    45f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    45f4:	4290      	cmp	r0, r2
    45f6:	d921      	bls.n	463c <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    45f8:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    45fa:	b160      	cbz	r0, 4616 <compare_set+0xb6>
     return p_reg->COUNTER;
    45fc:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4600:	eba8 000b 	sub.w	r0, r8, fp
    4604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    4608:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    460c:	d916      	bls.n	463c <compare_set+0xdc>
					event_clear(chan);
    460e:	4620      	mov	r0, r4
    4610:	f002 fee5 	bl	73de <event_clear>
    4614:	4a17      	ldr	r2, [pc, #92]	; (4674 <compare_set+0x114>)
			cc_val = now + cc_inc;
    4616:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    461a:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    461e:	e7d9      	b.n	45d4 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    4620:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4622:	4a15      	ldr	r2, [pc, #84]	; (4678 <compare_set+0x118>)
    4624:	f3bf 8f5b 	dmb	ish
    4628:	40a3      	lsls	r3, r4
    462a:	e852 0f00 	ldrex	r0, [r2]
    462e:	4318      	orrs	r0, r3
    4630:	e842 0100 	strex	r1, r0, [r2]
    4634:	2900      	cmp	r1, #0
    4636:	d1f8      	bne.n	462a <compare_set+0xca>
    4638:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    463c:	490b      	ldr	r1, [pc, #44]	; (466c <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    463e:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    4640:	0123      	lsls	r3, r4, #4
    4642:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    4646:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    464a:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    464c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    464e:	6053      	str	r3, [r2, #4]
	return ret;
    4650:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    4652:	4620      	mov	r0, r4
    4654:	9900      	ldr	r1, [sp, #0]
    4656:	f7ff ff33 	bl	44c0 <compare_int_unlock>
}
    465a:	4628      	mov	r0, r5
    465c:	b003      	add	sp, #12
    465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4662:	f06f 0515 	mvn.w	r5, #21
    4666:	e7f4      	b.n	4652 <compare_set+0xf2>
    4668:	00800001 	.word	0x00800001
    466c:	20000298 	.word	0x20000298
    4670:	40011000 	.word	0x40011000
    4674:	007ffffd 	.word	0x007ffffd
    4678:	2000051c 	.word	0x2000051c

0000467c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    467c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    467e:	4b19      	ldr	r3, [pc, #100]	; (46e4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4680:	4d19      	ldr	r5, [pc, #100]	; (46e8 <sys_clock_driver_init+0x6c>)
    4682:	2400      	movs	r4, #0
    4684:	f04f 30ff 	mov.w	r0, #4294967295
    4688:	f04f 31ff 	mov.w	r1, #4294967295
    468c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4690:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    4694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4698:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    469c:	4b13      	ldr	r3, [pc, #76]	; (46ec <sys_clock_driver_init+0x70>)
    469e:	2602      	movs	r6, #2
    46a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    46a4:	2101      	movs	r1, #1
    46a6:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    46aa:	2011      	movs	r0, #17
    46ac:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    46b0:	4622      	mov	r2, r4
    46b2:	f7fd fddd 	bl	2270 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    46b6:	2011      	movs	r0, #17
    46b8:	f7fd fdaa 	bl	2210 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    46bc:	4a0c      	ldr	r2, [pc, #48]	; (46f0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    46be:	2301      	movs	r3, #1
    46c0:	60ab      	str	r3, [r5, #8]
    46c2:	602b      	str	r3, [r5, #0]
    46c4:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    46c6:	4b0b      	ldr	r3, [pc, #44]	; (46f4 <sys_clock_driver_init+0x78>)
    46c8:	4a0b      	ldr	r2, [pc, #44]	; (46f8 <sys_clock_driver_init+0x7c>)
    46ca:	9300      	str	r3, [sp, #0]
    46cc:	9401      	str	r4, [sp, #4]
    46ce:	2300      	movs	r3, #0
    46d0:	4620      	mov	r0, r4
    46d2:	f7ff ff45 	bl	4560 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    46d6:	4630      	mov	r0, r6
    46d8:	f7fe fcc8 	bl	306c <z_nrf_clock_control_lf_on>

	return 0;
}
    46dc:	4620      	mov	r0, r4
    46de:	b002      	add	sp, #8
    46e0:	bd70      	pop	{r4, r5, r6, pc}
    46e2:	bf00      	nop
    46e4:	20000298 	.word	0x20000298
    46e8:	40011000 	.word	0x40011000
    46ec:	e000e100 	.word	0xe000e100
    46f0:	20000520 	.word	0x20000520
    46f4:	00004479 	.word	0x00004479
    46f8:	007fffff 	.word	0x007fffff

000046fc <rtc_nrf_isr>:
{
    46fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4700:	4c2f      	ldr	r4, [pc, #188]	; (47c0 <rtc_nrf_isr+0xc4>)
    4702:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4706:	0799      	lsls	r1, r3, #30
    4708:	d50b      	bpl.n	4722 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    470a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    470e:	b143      	cbz	r3, 4722 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4710:	4a2c      	ldr	r2, [pc, #176]	; (47c4 <rtc_nrf_isr+0xc8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4712:	2300      	movs	r3, #0
    4714:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4718:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    471c:	6813      	ldr	r3, [r2, #0]
    471e:	3301      	adds	r3, #1
    4720:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4722:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4726:	03da      	lsls	r2, r3, #15
    4728:	d52a      	bpl.n	4780 <rtc_nrf_isr+0x84>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    472a:	f3bf 8f5b 	dmb	ish
    472e:	4b26      	ldr	r3, [pc, #152]	; (47c8 <rtc_nrf_isr+0xcc>)
    4730:	e853 2f00 	ldrex	r2, [r3]
    4734:	f022 0101 	bic.w	r1, r2, #1
    4738:	e843 1000 	strex	r0, r1, [r3]
    473c:	2800      	cmp	r0, #0
    473e:	d1f7      	bne.n	4730 <rtc_nrf_isr+0x34>
    4740:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    4744:	07d3      	lsls	r3, r2, #31
    4746:	d402      	bmi.n	474e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4748:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    474c:	b1c3      	cbz	r3, 4780 <rtc_nrf_isr+0x84>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    474e:	2500      	movs	r5, #0
    4750:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4754:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    4758:	f7ff fee0 	bl	451c <z_nrf_rtc_timer_read>
    475c:	f04f 0320 	mov.w	r3, #32
    4760:	f3ef 8211 	mrs	r2, BASEPRI
    4764:	f383 8812 	msr	BASEPRI_MAX, r3
    4768:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    476c:	4b17      	ldr	r3, [pc, #92]	; (47cc <rtc_nrf_isr+0xd0>)
    476e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4772:	42b0      	cmp	r0, r6
    4774:	41b9      	sbcs	r1, r7
    4776:	d206      	bcs.n	4786 <rtc_nrf_isr+0x8a>
	__asm__ volatile(
    4778:	f382 8811 	msr	BASEPRI, r2
    477c:	f3bf 8f6f 	isb	sy
}
    4780:	b003      	add	sp, #12
    4782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4786:	f04f 38ff 	mov.w	r8, #4294967295
    478a:	f04f 39ff 	mov.w	r9, #4294967295
    478e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    4792:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    4796:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    4798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    479c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    47a0:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    47a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    47a8:	f382 8811 	msr	BASEPRI, r2
    47ac:	f3bf 8f6f 	isb	sy
		if (handler) {
    47b0:	2900      	cmp	r1, #0
    47b2:	d0e5      	beq.n	4780 <rtc_nrf_isr+0x84>
			handler(chan, expire_time, user_context);
    47b4:	9000      	str	r0, [sp, #0]
    47b6:	4632      	mov	r2, r6
    47b8:	463b      	mov	r3, r7
    47ba:	4628      	mov	r0, r5
    47bc:	4788      	blx	r1
    47be:	e7df      	b.n	4780 <rtc_nrf_isr+0x84>
    47c0:	40011000 	.word	0x40011000
    47c4:	20000524 	.word	0x20000524
    47c8:	2000051c 	.word	0x2000051c
    47cc:	20000298 	.word	0x20000298

000047d0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    47d0:	1c43      	adds	r3, r0, #1
{
    47d2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    47d4:	d022      	beq.n	481c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    47d6:	2801      	cmp	r0, #1
    47d8:	dd22      	ble.n	4820 <sys_clock_set_timeout+0x50>
    47da:	4a12      	ldr	r2, [pc, #72]	; (4824 <sys_clock_set_timeout+0x54>)
    47dc:	4b12      	ldr	r3, [pc, #72]	; (4828 <sys_clock_set_timeout+0x58>)
    47de:	4290      	cmp	r0, r2
    47e0:	bfd4      	ite	le
    47e2:	4604      	movle	r4, r0
    47e4:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    47e6:	f7ff fe99 	bl	451c <z_nrf_rtc_timer_read>
    47ea:	4b10      	ldr	r3, [pc, #64]	; (482c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    47ec:	490e      	ldr	r1, [pc, #56]	; (4828 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    47ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    47f2:	1a80      	subs	r0, r0, r2
		cyc = 0;
    47f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    47f8:	bf28      	it	cs
    47fa:	2400      	movcs	r4, #0
	cyc += unannounced;
    47fc:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    47fe:	428c      	cmp	r4, r1
    4800:	bf28      	it	cs
    4802:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    4804:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4806:	490a      	ldr	r1, [pc, #40]	; (4830 <sys_clock_set_timeout+0x60>)
    4808:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    480a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    480e:	9001      	str	r0, [sp, #4]
    4810:	f143 0300 	adc.w	r3, r3, #0
    4814:	f7ff fea4 	bl	4560 <compare_set>
}
    4818:	b002      	add	sp, #8
    481a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    481c:	4c02      	ldr	r4, [pc, #8]	; (4828 <sys_clock_set_timeout+0x58>)
    481e:	e7e2      	b.n	47e6 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    4820:	2401      	movs	r4, #1
    4822:	e7e0      	b.n	47e6 <sys_clock_set_timeout+0x16>
    4824:	007ffffe 	.word	0x007ffffe
    4828:	007fffff 	.word	0x007fffff
    482c:	200002a8 	.word	0x200002a8
    4830:	00004479 	.word	0x00004479

00004834 <sys_clock_elapsed>:
{
    4834:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4836:	f7ff fe71 	bl	451c <z_nrf_rtc_timer_read>
    483a:	4b02      	ldr	r3, [pc, #8]	; (4844 <sys_clock_elapsed+0x10>)
    483c:	681b      	ldr	r3, [r3, #0]
}
    483e:	1ac0      	subs	r0, r0, r3
    4840:	bd08      	pop	{r3, pc}
    4842:	bf00      	nop
    4844:	200002a8 	.word	0x200002a8

00004848 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        case 1: return NRF_P1;
    484c:	4e2d      	ldr	r6, [pc, #180]	; (4904 <pinctrl_configure_pins+0xbc>)
    484e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4852:	2701      	movs	r7, #1
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4854:	4281      	cmp	r1, r0
    4856:	d102      	bne.n	485e <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    4858:	2000      	movs	r0, #0
}
    485a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    485e:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4860:	f005 037f 	and.w	r3, r5, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    4864:	2b7f      	cmp	r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4866:	f3c5 2443 	ubfx	r4, r5, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    486a:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    486e:	bf08      	it	eq
    4870:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    4874:	2d05      	cmp	r5, #5
    4876:	d017      	beq.n	48a8 <pinctrl_configure_pins+0x60>
    4878:	2d06      	cmp	r5, #6
    487a:	d019      	beq.n	48b0 <pinctrl_configure_pins+0x68>
    487c:	2d04      	cmp	r5, #4
    487e:	d13d      	bne.n	48fc <pinctrl_configure_pins+0xb4>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4880:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4884:	2500      	movs	r5, #0
    return pin_number >> 5;
    4886:	ea4f 1e53 	mov.w	lr, r3, lsr #5
        case 1: return NRF_P1;
    488a:	f1be 0f01 	cmp.w	lr, #1
    488e:	bf14      	ite	ne
    4890:	f04f 4ea0 	movne.w	lr, #1342177280	; 0x50000000
    4894:	46b6      	moveq	lr, r6
    *p_pin = pin_number & 0x1F;
    4896:	f003 0c1f 	and.w	ip, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    489a:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    489e:	f8ce c50c 	str.w	ip, [lr, #1292]	; 0x50c
    48a2:	f04f 0e01 	mov.w	lr, #1
    48a6:	e007      	b.n	48b8 <pinctrl_configure_pins+0x70>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    48a8:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    48ac:	2501      	movs	r5, #1
    48ae:	e7ea      	b.n	4886 <pinctrl_configure_pins+0x3e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    48b0:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, MISO) = pin;
    48b2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
    48b6:	46ae      	mov	lr, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    48b8:	f850 9b04 	ldr.w	r9, [r0], #4
    48bc:	f409 5800 	and.w	r8, r9, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    48c0:	f1b8 0f00 	cmp.w	r8, #0
    *p_pin = pin_number & 0x1F;
    48c4:	f003 0c1f 	and.w	ip, r3, #31
    return pin_number >> 5;
    48c8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    48cc:	bf1c      	itt	ne
    48ce:	2501      	movne	r5, #1
    48d0:	f04f 0e00 	movne.w	lr, #0
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    48d4:	f3c9 19c1 	ubfx	r9, r9, #7, #2
        case 0: return NRF_P0;
    48d8:	2b01      	cmp	r3, #1
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    48da:	ea4f 2304 	mov.w	r3, r4, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48de:	ea43 0389 	orr.w	r3, r3, r9, lsl #2
        case 0: return NRF_P0;
    48e2:	bf0c      	ite	eq
    48e4:	46b0      	moveq	r8, r6
    48e6:	f04f 48a0 	movne.w	r8, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48ea:	ea43 030e 	orr.w	r3, r3, lr
    reg->PIN_CNF[pin_number] = cnf;
    48ee:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48f2:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    48f6:	f848 302c 	str.w	r3, [r8, ip, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    48fa:	e7ab      	b.n	4854 <pinctrl_configure_pins+0xc>
		switch (NRF_GET_FUN(pins[i])) {
    48fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4900:	e7ab      	b.n	485a <pinctrl_configure_pins+0x12>
    4902:	bf00      	nop
    4904:	50000300 	.word	0x50000300

00004908 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    4908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    490a:	ab0b      	add	r3, sp, #44	; 0x2c
    490c:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    490e:	9303      	str	r3, [sp, #12]
    4910:	4b05      	ldr	r3, [pc, #20]	; (4928 <z_log_msg_runtime_create.constprop.0+0x20>)
    4912:	9302      	str	r3, [sp, #8]
    4914:	2300      	movs	r3, #0
    4916:	e9cd 3300 	strd	r3, r3, [sp]
    491a:	2201      	movs	r2, #1
    491c:	4618      	mov	r0, r3
    491e:	f7fd f823 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    4922:	b007      	add	sp, #28
    4924:	f85d fb04 	ldr.w	pc, [sp], #4
    4928:	000089ac 	.word	0x000089ac

0000492c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    492e:	f7fc ffa7 	bl	1880 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    4932:	2400      	movs	r4, #0
    4934:	4b06      	ldr	r3, [pc, #24]	; (4950 <k_sys_fatal_error_handler+0x24>)
    4936:	9302      	str	r3, [sp, #8]
    4938:	4620      	mov	r0, r4
    493a:	e9cd 4400 	strd	r4, r4, [sp]
    493e:	4905      	ldr	r1, [pc, #20]	; (4954 <k_sys_fatal_error_handler+0x28>)
    4940:	4623      	mov	r3, r4
    4942:	2201      	movs	r2, #1
    4944:	f7ff ffe0 	bl	4908 <z_log_msg_runtime_create.constprop.0>
		sys_arch_reboot(0);
    4948:	4620      	mov	r0, r4
    494a:	f7fe fa7b 	bl	2e44 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    494e:	bf00      	nop
    4950:	000089ac 	.word	0x000089ac
    4954:	00007cb8 	.word	0x00007cb8

00004958 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4958:	4a02      	ldr	r2, [pc, #8]	; (4964 <nvmc_wait+0xc>)
    495a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    495e:	2b00      	cmp	r3, #0
    4960:	d0fb      	beq.n	495a <nvmc_wait+0x2>
}
    4962:	4770      	bx	lr
    4964:	4001e000 	.word	0x4001e000

00004968 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4968:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    496a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    496e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4972:	2a0d      	cmp	r2, #13
    4974:	d155      	bne.n	4a22 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    4976:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    497a:	2200      	movs	r2, #0
    497c:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4980:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4984:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    4988:	4a4c      	ldr	r2, [pc, #304]	; (4abc <SystemInit+0x154>)
    498a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    498e:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    4992:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    4996:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    499a:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    499e:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    49a2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    49a6:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    49aa:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    49ae:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    49b2:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    49b6:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    49ba:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    49be:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    49c2:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    49c6:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    49ca:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    49ce:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    49d2:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    49d6:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    49da:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    49de:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    49e2:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    49e6:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    49ea:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    49ee:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    49f2:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    49f6:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    49fa:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    49fe:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4a02:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    4a06:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4a0a:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    4a0e:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    4a12:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    4a16:	07db      	lsls	r3, r3, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4a18:	bf44      	itt	mi
    4a1a:	f06f 0301 	mvnmi.w	r3, #1
    4a1e:	f8c1 3400 	strmi.w	r3, [r1, #1024]	; 0x400

    /* Enable the FPU if the compiler used floating point unit instructions. __FPU_USED is a MACRO defined by the
     * compiler. Since the FPU consumes energy, remember to disable FPU use in the compiler if floating point unit
     * operations are not used in your code. */
    #if (__FPU_USED == 1)
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    4a22:	4a27      	ldr	r2, [pc, #156]	; (4ac0 <SystemInit+0x158>)
    4a24:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    4a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    4a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
    4a30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4a34:	f3bf 8f6f 	isb	sy
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    4a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    4a3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4a40:	2a0d      	cmp	r2, #13
    4a42:	d10a      	bne.n	4a5a <SystemInit+0xf2>
            {
                switch(var2)
    4a44:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    4a48:	b13b      	cbz	r3, 4a5a <SystemInit+0xf2>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    4a4a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4a4e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    4a52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a56:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4a5a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4a5e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4a62:	2a00      	cmp	r2, #0
    4a64:	db03      	blt.n	4a6e <SystemInit+0x106>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4a66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	da22      	bge.n	4ab4 <SystemInit+0x14c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4a6e:	4915      	ldr	r1, [pc, #84]	; (4ac4 <SystemInit+0x15c>)
    4a70:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4a72:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4a76:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4a7a:	2412      	movs	r4, #18
    nvmc_wait();
    4a7c:	f7ff ff6c 	bl	4958 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4a80:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4a84:	f7ff ff68 	bl	4958 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4a88:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4a8c:	f7ff ff64 	bl	4958 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4a90:	2300      	movs	r3, #0
    4a92:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4a96:	f7ff ff5f 	bl	4958 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4a9a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4a9e:	4908      	ldr	r1, [pc, #32]	; (4ac0 <SystemInit+0x158>)
    4aa0:	4b09      	ldr	r3, [pc, #36]	; (4ac8 <SystemInit+0x160>)
    4aa2:	68ca      	ldr	r2, [r1, #12]
    4aa4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4aa8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4aaa:	60cb      	str	r3, [r1, #12]
    4aac:	f3bf 8f4f 	dsb	sy
    __NOP();
    4ab0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4ab2:	e7fd      	b.n	4ab0 <SystemInit+0x148>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4ab4:	4b05      	ldr	r3, [pc, #20]	; (4acc <SystemInit+0x164>)
    4ab6:	4a06      	ldr	r2, [pc, #24]	; (4ad0 <SystemInit+0x168>)
    4ab8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4aba:	bd10      	pop	{r4, pc}
    4abc:	4000c000 	.word	0x4000c000
    4ac0:	e000ed00 	.word	0xe000ed00
    4ac4:	4001e000 	.word	0x4001e000
    4ac8:	05fa0004 	.word	0x05fa0004
    4acc:	200001f4 	.word	0x200001f4
    4ad0:	03d09000 	.word	0x03d09000

00004ad4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4ad4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4ad6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4ad8:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4ada:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    4ade:	fab2 f382 	clz	r3, r2
    4ae2:	f1c3 031f 	rsb	r3, r3, #31
    4ae6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4ae8:	fa05 f403 	lsl.w	r4, r5, r3
    4aec:	ea22 0404 	bic.w	r4, r2, r4
    4af0:	e850 6f00 	ldrex	r6, [r0]
    4af4:	4296      	cmp	r6, r2
    4af6:	d104      	bne.n	4b02 <nrfx_flag32_alloc+0x2e>
    4af8:	e840 4c00 	strex	ip, r4, [r0]
    4afc:	f1bc 0f00 	cmp.w	ip, #0
    4b00:	d1f6      	bne.n	4af0 <nrfx_flag32_alloc+0x1c>
    4b02:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4b06:	d1e7      	bne.n	4ad8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    4b08:	4801      	ldr	r0, [pc, #4]	; (4b10 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    4b0a:	700b      	strb	r3, [r1, #0]
}
    4b0c:	bd70      	pop	{r4, r5, r6, pc}
    4b0e:	bf00      	nop
    4b10:	0bad0000 	.word	0x0bad0000

00004b14 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    4b14:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4b16:	6803      	ldr	r3, [r0, #0]
    4b18:	40cb      	lsrs	r3, r1
    4b1a:	07db      	lsls	r3, r3, #31
    4b1c:	d414      	bmi.n	4b48 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4b1e:	2301      	movs	r3, #1
    4b20:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    4b22:	6802      	ldr	r2, [r0, #0]
    4b24:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4b28:	ea43 0102 	orr.w	r1, r3, r2
    4b2c:	e850 4f00 	ldrex	r4, [r0]
    4b30:	4294      	cmp	r4, r2
    4b32:	d104      	bne.n	4b3e <nrfx_flag32_free+0x2a>
    4b34:	e840 1c00 	strex	ip, r1, [r0]
    4b38:	f1bc 0f00 	cmp.w	ip, #0
    4b3c:	d1f6      	bne.n	4b2c <nrfx_flag32_free+0x18>
    4b3e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4b42:	d1ee      	bne.n	4b22 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    4b44:	4801      	ldr	r0, [pc, #4]	; (4b4c <nrfx_flag32_free+0x38>)
}
    4b46:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4b48:	4801      	ldr	r0, [pc, #4]	; (4b50 <nrfx_flag32_free+0x3c>)
    4b4a:	e7fc      	b.n	4b46 <nrfx_flag32_free+0x32>
    4b4c:	0bad0000 	.word	0x0bad0000
    4b50:	0bad0004 	.word	0x0bad0004

00004b54 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4b54:	4b04      	ldr	r3, [pc, #16]	; (4b68 <nrfx_clock_init+0x14>)
    4b56:	791a      	ldrb	r2, [r3, #4]
    4b58:	b922      	cbnz	r2, 4b64 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4b5a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    4b5c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    4b5e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    4b60:	4802      	ldr	r0, [pc, #8]	; (4b6c <nrfx_clock_init+0x18>)
    4b62:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4b64:	4802      	ldr	r0, [pc, #8]	; (4b70 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4b66:	4770      	bx	lr
    4b68:	20000528 	.word	0x20000528
    4b6c:	0bad0000 	.word	0x0bad0000
    4b70:	0bad000c 	.word	0x0bad000c

00004b74 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4b74:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b7a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4b7e:	b152      	cbz	r2, 4b96 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b80:	2000      	movs	r0, #0
    4b82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    4b86:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    4b8a:	2201      	movs	r2, #1
    4b8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4b90:	4b10      	ldr	r3, [pc, #64]	; (4bd4 <nrfx_power_clock_irq_handler+0x60>)
    4b92:	681b      	ldr	r3, [r3, #0]
    4b94:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4b9e:	b172      	cbz	r2, 4bbe <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ba0:	2200      	movs	r2, #0
    4ba2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4ba6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4baa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4bae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4bb2:	0792      	lsls	r2, r2, #30
    4bb4:	d104      	bne.n	4bc0 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4bb6:	2201      	movs	r2, #1
    4bb8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4bbc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4bbe:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4bc0:	2202      	movs	r2, #2
    4bc2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4bc6:	4b03      	ldr	r3, [pc, #12]	; (4bd4 <nrfx_power_clock_irq_handler+0x60>)
}
    4bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4bcc:	681b      	ldr	r3, [r3, #0]
    4bce:	2001      	movs	r0, #1
    4bd0:	4718      	bx	r3
    4bd2:	bf00      	nop
    4bd4:	20000528 	.word	0x20000528

00004bd8 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    4bd8:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    4bda:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4bde:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    4be0:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4be2:	6002      	str	r2, [r0, #0]
}
    4be4:	4802      	ldr	r0, [pc, #8]	; (4bf0 <nrf_gpio_pin_port_decode+0x18>)
    4be6:	bf18      	it	ne
    4be8:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4bec:	4770      	bx	lr
    4bee:	bf00      	nop
    4bf0:	50000300 	.word	0x50000300

00004bf4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4bf4:	4b03      	ldr	r3, [pc, #12]	; (4c04 <pin_in_use_by_te+0x10>)
    4bf6:	3008      	adds	r0, #8
    4bf8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4bfc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4c00:	4770      	bx	lr
    4c02:	bf00      	nop
    4c04:	200001f8 	.word	0x200001f8

00004c08 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4c08:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c0a:	f100 0308 	add.w	r3, r0, #8
    4c0e:	4c0c      	ldr	r4, [pc, #48]	; (4c40 <call_handler+0x38>)
    4c10:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4c14:	05da      	lsls	r2, r3, #23
{
    4c16:	4605      	mov	r5, r0
    4c18:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c1a:	d507      	bpl.n	4c2c <call_handler+0x24>
    4c1c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4c20:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4c24:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4c28:	6852      	ldr	r2, [r2, #4]
    4c2a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4c2c:	68a3      	ldr	r3, [r4, #8]
    4c2e:	b12b      	cbz	r3, 4c3c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4c30:	68e2      	ldr	r2, [r4, #12]
    4c32:	4631      	mov	r1, r6
    4c34:	4628      	mov	r0, r5
    }
}
    4c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4c3a:	4718      	bx	r3
}
    4c3c:	bd70      	pop	{r4, r5, r6, pc}
    4c3e:	bf00      	nop
    4c40:	200001f8 	.word	0x200001f8

00004c44 <release_handler>:
{
    4c44:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4c46:	4a13      	ldr	r2, [pc, #76]	; (4c94 <release_handler+0x50>)
    4c48:	3008      	adds	r0, #8
    4c4a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4c4e:	05d9      	lsls	r1, r3, #23
    4c50:	d51c      	bpl.n	4c8c <release_handler+0x48>
    4c52:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4c56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4c5a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4c5e:	f102 040e 	add.w	r4, r2, #14
    4c62:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4c64:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    4c68:	f413 7f80 	tst.w	r3, #256	; 0x100
    4c6c:	d003      	beq.n	4c76 <release_handler+0x32>
    4c6e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4c72:	4299      	cmp	r1, r3
    4c74:	d00a      	beq.n	4c8c <release_handler+0x48>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4c76:	3001      	adds	r0, #1
    4c78:	282a      	cmp	r0, #42	; 0x2a
    4c7a:	d1f3      	bne.n	4c64 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4c7c:	2300      	movs	r3, #0
    4c7e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4c82:	4805      	ldr	r0, [pc, #20]	; (4c98 <release_handler+0x54>)
}
    4c84:	f85d 4b04 	ldr.w	r4, [sp], #4
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4c88:	f7ff bf44 	b.w	4b14 <nrfx_flag32_free>
}
    4c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop
    4c94:	200001f8 	.word	0x200001f8
    4c98:	20000260 	.word	0x20000260

00004c9c <pin_handler_trigger_uninit>:
{
    4c9c:	b538      	push	{r3, r4, r5, lr}
    4c9e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4ca0:	f7ff ffa8 	bl	4bf4 <pin_in_use_by_te>
    4ca4:	4c09      	ldr	r4, [pc, #36]	; (4ccc <pin_handler_trigger_uninit+0x30>)
    4ca6:	f102 0508 	add.w	r5, r2, #8
    4caa:	b140      	cbz	r0, 4cbe <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4cac:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4cb0:	4907      	ldr	r1, [pc, #28]	; (4cd0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4cb2:	0b5b      	lsrs	r3, r3, #13
    4cb4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4cb8:	2000      	movs	r0, #0
    4cba:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    4cbe:	4610      	mov	r0, r2
    4cc0:	f7ff ffc0 	bl	4c44 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4cc4:	2300      	movs	r3, #0
    4cc6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4cca:	bd38      	pop	{r3, r4, r5, pc}
    4ccc:	200001f8 	.word	0x200001f8
    4cd0:	40006000 	.word	0x40006000

00004cd4 <nrfx_gpiote_input_configure>:
{
    4cd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4cd8:	4604      	mov	r4, r0
    4cda:	4616      	mov	r6, r2
    4cdc:	461d      	mov	r5, r3
    if (p_input_config)
    4cde:	b301      	cbz	r1, 4d22 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4ce0:	4f4e      	ldr	r7, [pc, #312]	; (4e1c <nrfx_gpiote_input_configure+0x148>)
    4ce2:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4ce6:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4cea:	079b      	lsls	r3, r3, #30
    4cec:	d502      	bpl.n	4cf4 <nrfx_gpiote_input_configure+0x20>
    4cee:	f7ff ff81 	bl	4bf4 <pin_in_use_by_te>
    4cf2:	bb10      	cbnz	r0, 4d3a <nrfx_gpiote_input_configure+0x66>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4cf4:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4cf6:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4cfa:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4cfe:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4d02:	f10d 020f 	add.w	r2, sp, #15
    4d06:	460b      	mov	r3, r1
    4d08:	4620      	mov	r0, r4
    4d0a:	f10d 010e 	add.w	r1, sp, #14
    4d0e:	f002 fc31 	bl	7574 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4d12:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
    4d16:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4d1a:	f043 0301 	orr.w	r3, r3, #1
    4d1e:	f827 3018 	strh.w	r3, [r7, r8, lsl #1]
    if (p_trigger_config)
    4d22:	b346      	cbz	r6, 4d76 <nrfx_gpiote_input_configure+0xa2>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d24:	4b3d      	ldr	r3, [pc, #244]	; (4e1c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4d26:	f896 c000 	ldrb.w	ip, [r6]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4d2a:	6872      	ldr	r2, [r6, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d2c:	f104 0708 	add.w	r7, r4, #8
    4d30:	f833 1017 	ldrh.w	r1, [r3, r7, lsl #1]
        if (pin_is_output(pin))
    4d34:	0788      	lsls	r0, r1, #30
    4d36:	d502      	bpl.n	4d3e <nrfx_gpiote_input_configure+0x6a>
            if (use_evt)
    4d38:	b1aa      	cbz	r2, 4d66 <nrfx_gpiote_input_configure+0x92>
            return NRFX_ERROR_INVALID_PARAM;
    4d3a:	4839      	ldr	r0, [pc, #228]	; (4e20 <nrfx_gpiote_input_configure+0x14c>)
    4d3c:	e01d      	b.n	4d7a <nrfx_gpiote_input_configure+0xa6>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4d3e:	f021 0120 	bic.w	r1, r1, #32
    4d42:	04c9      	lsls	r1, r1, #19
    4d44:	0cc9      	lsrs	r1, r1, #19
    4d46:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
            if (use_evt)
    4d4a:	b162      	cbz	r2, 4d66 <nrfx_gpiote_input_configure+0x92>
                if (!edge)
    4d4c:	f1bc 0f03 	cmp.w	ip, #3
    4d50:	d8f3      	bhi.n	4d3a <nrfx_gpiote_input_configure+0x66>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4d52:	6872      	ldr	r2, [r6, #4]
    4d54:	7816      	ldrb	r6, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4d56:	f1bc 0f00 	cmp.w	ip, #0
    4d5a:	d111      	bne.n	4d80 <nrfx_gpiote_input_configure+0xac>
    4d5c:	4a31      	ldr	r2, [pc, #196]	; (4e24 <nrfx_gpiote_input_configure+0x150>)
    4d5e:	f506 76a2 	add.w	r6, r6, #324	; 0x144
    4d62:	f842 c026 	str.w	ip, [r2, r6, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4d66:	f833 2017 	ldrh.w	r2, [r3, r7, lsl #1]
    4d6a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4d6e:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
    4d72:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
    if (p_handler_config)
    4d76:	bb45      	cbnz	r5, 4dca <nrfx_gpiote_input_configure+0xf6>
        err = NRFX_SUCCESS;
    4d78:	482b      	ldr	r0, [pc, #172]	; (4e28 <nrfx_gpiote_input_configure+0x154>)
}
    4d7a:	b004      	add	sp, #16
    4d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4d80:	00b2      	lsls	r2, r6, #2
    4d82:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4d86:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d8a:	ea41 3146 	orr.w	r1, r1, r6, lsl #13
    4d8e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4d92:	f020 0003 	bic.w	r0, r0, #3
    4d96:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4d9a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4d9e:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    4da2:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    4da6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4daa:	0220      	lsls	r0, r4, #8
    4dac:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4db0:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    4db4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4db8:	ea40 000e 	orr.w	r0, r0, lr
    4dbc:	f041 0120 	orr.w	r1, r1, #32
    4dc0:	f823 1017 	strh.w	r1, [r3, r7, lsl #1]
    4dc4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    4dc8:	e7cd      	b.n	4d66 <nrfx_gpiote_input_configure+0x92>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4dca:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4dce:	4620      	mov	r0, r4
    4dd0:	f7ff ff38 	bl	4c44 <release_handler>
    if (!handler)
    4dd4:	2e00      	cmp	r6, #0
    4dd6:	d0cf      	beq.n	4d78 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4dd8:	4d10      	ldr	r5, [pc, #64]	; (4e1c <nrfx_gpiote_input_configure+0x148>)
    4dda:	e9d5 2300 	ldrd	r2, r3, [r5]
    4dde:	4296      	cmp	r6, r2
    4de0:	d101      	bne.n	4de6 <nrfx_gpiote_input_configure+0x112>
    4de2:	429f      	cmp	r7, r3
    4de4:	d018      	beq.n	4e18 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4de6:	4811      	ldr	r0, [pc, #68]	; (4e2c <nrfx_gpiote_input_configure+0x158>)
    4de8:	f10d 010f 	add.w	r1, sp, #15
    4dec:	f7ff fe72 	bl	4ad4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4df0:	4b0d      	ldr	r3, [pc, #52]	; (4e28 <nrfx_gpiote_input_configure+0x154>)
    4df2:	4298      	cmp	r0, r3
    4df4:	d1c1      	bne.n	4d7a <nrfx_gpiote_input_configure+0xa6>
        handler_id = (int32_t)id;
    4df6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4dfa:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4dfe:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4e02:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4e04:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4e06:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4e0a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4e12:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    4e16:	e7af      	b.n	4d78 <nrfx_gpiote_input_configure+0xa4>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4e18:	2200      	movs	r2, #0
    4e1a:	e7ee      	b.n	4dfa <nrfx_gpiote_input_configure+0x126>
    4e1c:	200001f8 	.word	0x200001f8
    4e20:	0bad0004 	.word	0x0bad0004
    4e24:	40006000 	.word	0x40006000
    4e28:	0bad0000 	.word	0x0bad0000
    4e2c:	20000260 	.word	0x20000260

00004e30 <nrfx_gpiote_output_configure>:
{
    4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e32:	4604      	mov	r4, r0
    4e34:	b085      	sub	sp, #20
    4e36:	4615      	mov	r5, r2
    if (p_config)
    4e38:	b319      	cbz	r1, 4e82 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e3a:	4e33      	ldr	r6, [pc, #204]	; (4f08 <nrfx_gpiote_output_configure+0xd8>)
    4e3c:	f100 0708 	add.w	r7, r0, #8
    4e40:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4e44:	0793      	lsls	r3, r2, #30
    4e46:	d403      	bmi.n	4e50 <nrfx_gpiote_output_configure+0x20>
    4e48:	f7ff fed4 	bl	4bf4 <pin_in_use_by_te>
    4e4c:	2800      	cmp	r0, #0
    4e4e:	d158      	bne.n	4f02 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4e50:	f012 0f1c 	tst.w	r2, #28
    4e54:	d002      	beq.n	4e5c <nrfx_gpiote_output_configure+0x2c>
    4e56:	784b      	ldrb	r3, [r1, #1]
    4e58:	2b01      	cmp	r3, #1
    4e5a:	d052      	beq.n	4f02 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4e5c:	2301      	movs	r3, #1
    4e5e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4e62:	2300      	movs	r3, #0
    4e64:	e9cd 1300 	strd	r1, r3, [sp]
    4e68:	1c4a      	adds	r2, r1, #1
    4e6a:	1c8b      	adds	r3, r1, #2
    4e6c:	4620      	mov	r0, r4
    4e6e:	f10d 010f 	add.w	r1, sp, #15
    4e72:	f002 fb7f 	bl	7574 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4e76:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4e7a:	f043 0303 	orr.w	r3, r3, #3
    4e7e:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4e82:	b915      	cbnz	r5, 4e8a <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    4e84:	4821      	ldr	r0, [pc, #132]	; (4f0c <nrfx_gpiote_output_configure+0xdc>)
}
    4e86:	b005      	add	sp, #20
    4e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e8a:	4e1f      	ldr	r6, [pc, #124]	; (4f08 <nrfx_gpiote_output_configure+0xd8>)
    4e8c:	f104 0708 	add.w	r7, r4, #8
    4e90:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4e94:	0783      	lsls	r3, r0, #30
    4e96:	d534      	bpl.n	4f02 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4e98:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4e9c:	4661      	mov	r1, ip
    4e9e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4ea0:	f020 0020 	bic.w	r0, r0, #32
    4ea4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4ea8:	04c0      	lsls	r0, r0, #19
    4eaa:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4eae:	0cc0      	lsrs	r0, r0, #19
    4eb0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4eb4:	2300      	movs	r3, #0
    4eb6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4eba:	786a      	ldrb	r2, [r5, #1]
    4ebc:	2a00      	cmp	r2, #0
    4ebe:	d0e1      	beq.n	4e84 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4ec0:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    4ec4:	78ad      	ldrb	r5, [r5, #2]
    4ec6:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4eca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4ece:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ed2:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4ed6:	0223      	lsls	r3, r4, #8
    4ed8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4edc:	0412      	lsls	r2, r2, #16
    4ede:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ee2:	ea43 030e 	orr.w	r3, r3, lr
    4ee6:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4ee8:	052a      	lsls	r2, r5, #20
    4eea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4eee:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ef2:	4313      	orrs	r3, r2
    4ef4:	f040 0020 	orr.w	r0, r0, #32
    4ef8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4efc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4f00:	e7c0      	b.n	4e84 <nrfx_gpiote_output_configure+0x54>
{
    4f02:	4803      	ldr	r0, [pc, #12]	; (4f10 <nrfx_gpiote_output_configure+0xe0>)
    4f04:	e7bf      	b.n	4e86 <nrfx_gpiote_output_configure+0x56>
    4f06:	bf00      	nop
    4f08:	200001f8 	.word	0x200001f8
    4f0c:	0bad0000 	.word	0x0bad0000
    4f10:	0bad0004 	.word	0x0bad0004

00004f14 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4f14:	4b01      	ldr	r3, [pc, #4]	; (4f1c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4f16:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4f1a:	4770      	bx	lr
    4f1c:	200001f8 	.word	0x200001f8

00004f20 <nrfx_gpiote_channel_get>:
{
    4f20:	b508      	push	{r3, lr}
    4f22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4f24:	f7ff fe66 	bl	4bf4 <pin_in_use_by_te>
    4f28:	b138      	cbz	r0, 4f3a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f2a:	4b05      	ldr	r3, [pc, #20]	; (4f40 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4f2c:	4805      	ldr	r0, [pc, #20]	; (4f44 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f2e:	3208      	adds	r2, #8
    4f30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4f34:	0b5b      	lsrs	r3, r3, #13
    4f36:	700b      	strb	r3, [r1, #0]
}
    4f38:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4f3a:	4803      	ldr	r0, [pc, #12]	; (4f48 <nrfx_gpiote_channel_get+0x28>)
    4f3c:	e7fc      	b.n	4f38 <nrfx_gpiote_channel_get+0x18>
    4f3e:	bf00      	nop
    4f40:	200001f8 	.word	0x200001f8
    4f44:	0bad0000 	.word	0x0bad0000
    4f48:	0bad0004 	.word	0x0bad0004

00004f4c <nrfx_gpiote_init>:
{
    4f4c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4f4e:	4c0f      	ldr	r4, [pc, #60]	; (4f8c <nrfx_gpiote_init+0x40>)
    4f50:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
    4f54:	b9bd      	cbnz	r5, 4f86 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4f56:	2254      	movs	r2, #84	; 0x54
    4f58:	4629      	mov	r1, r5
    4f5a:	f104 0010 	add.w	r0, r4, #16
    4f5e:	f001 fef9 	bl	6d54 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4f62:	2006      	movs	r0, #6
    4f64:	f7fd f954 	bl	2210 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f68:	4b09      	ldr	r3, [pc, #36]	; (4f90 <nrfx_gpiote_init+0x44>)
    return err_code;
    4f6a:	480a      	ldr	r0, [pc, #40]	; (4f94 <nrfx_gpiote_init+0x48>)
    4f6c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4f70:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4f74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4f78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4f7c:	2301      	movs	r3, #1
    4f7e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4f82:	66a3      	str	r3, [r4, #104]	; 0x68
}
    4f84:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4f86:	4804      	ldr	r0, [pc, #16]	; (4f98 <nrfx_gpiote_init+0x4c>)
    4f88:	e7fc      	b.n	4f84 <nrfx_gpiote_init+0x38>
    4f8a:	bf00      	nop
    4f8c:	200001f8 	.word	0x200001f8
    4f90:	40006000 	.word	0x40006000
    4f94:	0bad0000 	.word	0x0bad0000
    4f98:	0bad0005 	.word	0x0bad0005

00004f9c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4f9c:	4b03      	ldr	r3, [pc, #12]	; (4fac <nrfx_gpiote_is_init+0x10>)
    4f9e:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
    4fa2:	3800      	subs	r0, #0
    4fa4:	bf18      	it	ne
    4fa6:	2001      	movne	r0, #1
    4fa8:	4770      	bx	lr
    4faa:	bf00      	nop
    4fac:	200001f8 	.word	0x200001f8

00004fb0 <nrfx_gpiote_channel_free>:
{
    4fb0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4fb2:	4801      	ldr	r0, [pc, #4]	; (4fb8 <nrfx_gpiote_channel_free+0x8>)
    4fb4:	f7ff bdae 	b.w	4b14 <nrfx_flag32_free>
    4fb8:	2000025c 	.word	0x2000025c

00004fbc <nrfx_gpiote_channel_alloc>:
{
    4fbc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4fbe:	4801      	ldr	r0, [pc, #4]	; (4fc4 <nrfx_gpiote_channel_alloc+0x8>)
    4fc0:	f7ff bd88 	b.w	4ad4 <nrfx_flag32_alloc>
    4fc4:	2000025c 	.word	0x2000025c

00004fc8 <nrfx_gpiote_trigger_enable>:
{
    4fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4fca:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4fcc:	f7ff fe12 	bl	4bf4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4fd0:	f104 0208 	add.w	r2, r4, #8
    4fd4:	4b1e      	ldr	r3, [pc, #120]	; (5050 <nrfx_gpiote_trigger_enable+0x88>)
    4fd6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4fda:	b1e8      	cbz	r0, 5018 <nrfx_gpiote_trigger_enable+0x50>
    4fdc:	f013 0502 	ands.w	r5, r3, #2
    4fe0:	d11a      	bne.n	5018 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4fe2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4fe4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4fe6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4fea:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4fee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4ff2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ff6:	6005      	str	r5, [r0, #0]
    4ff8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4ffa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4ffe:	f040 0001 	orr.w	r0, r0, #1
    5002:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5006:	b129      	cbz	r1, 5014 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5008:	2201      	movs	r2, #1
    500a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    500e:	4a11      	ldr	r2, [pc, #68]	; (5054 <nrfx_gpiote_trigger_enable+0x8c>)
    5010:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5014:	b003      	add	sp, #12
    5016:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5018:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    501c:	2b04      	cmp	r3, #4
    501e:	d012      	beq.n	5046 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5020:	2b05      	cmp	r3, #5
    5022:	d012      	beq.n	504a <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5024:	a801      	add	r0, sp, #4
    5026:	9401      	str	r4, [sp, #4]
    5028:	f7ff fdd6 	bl	4bd8 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    502c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    502e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5032:	40d9      	lsrs	r1, r3
    5034:	f001 0101 	and.w	r1, r1, #1
    5038:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    503a:	4620      	mov	r0, r4
}
    503c:	b003      	add	sp, #12
    503e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5042:	f002 bae0 	b.w	7606 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5046:	2103      	movs	r1, #3
    5048:	e7f7      	b.n	503a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    504a:	2102      	movs	r1, #2
    504c:	e7f5      	b.n	503a <nrfx_gpiote_trigger_enable+0x72>
    504e:	bf00      	nop
    5050:	200001f8 	.word	0x200001f8
    5054:	40006000 	.word	0x40006000

00005058 <nrfx_gpiote_trigger_disable>:
{
    5058:	b508      	push	{r3, lr}
    505a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    505c:	f7ff fdca 	bl	4bf4 <pin_in_use_by_te>
    5060:	b1c0      	cbz	r0, 5094 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5062:	f102 0108 	add.w	r1, r2, #8
    5066:	4b0e      	ldr	r3, [pc, #56]	; (50a0 <nrfx_gpiote_trigger_disable+0x48>)
    5068:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    506c:	0799      	lsls	r1, r3, #30
    506e:	d411      	bmi.n	5094 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5070:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5072:	2201      	movs	r2, #1
    5074:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5076:	009b      	lsls	r3, r3, #2
    5078:	490a      	ldr	r1, [pc, #40]	; (50a4 <nrfx_gpiote_trigger_disable+0x4c>)
    507a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    507e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5082:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5086:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    508a:	f022 0203 	bic.w	r2, r2, #3
    508e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5092:	bd08      	pop	{r3, pc}
    5094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5098:	2100      	movs	r1, #0
    509a:	4610      	mov	r0, r2
    509c:	f002 bab3 	b.w	7606 <nrf_gpio_cfg_sense_set>
    50a0:	200001f8 	.word	0x200001f8
    50a4:	40006000 	.word	0x40006000

000050a8 <nrfx_gpiote_pin_uninit>:
{
    50a8:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    50aa:	4b0e      	ldr	r3, [pc, #56]	; (50e4 <nrfx_gpiote_pin_uninit+0x3c>)
    50ac:	f100 0208 	add.w	r2, r0, #8
{
    50b0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    50b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    50b6:	07db      	lsls	r3, r3, #31
    50b8:	d511      	bpl.n	50de <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    50ba:	f7ff ffcd 	bl	5058 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    50be:	4620      	mov	r0, r4
    50c0:	f7ff fdec 	bl	4c9c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50c4:	a801      	add	r0, sp, #4
    50c6:	9401      	str	r4, [sp, #4]
    50c8:	f7ff fd86 	bl	4bd8 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    50cc:	9b01      	ldr	r3, [sp, #4]
    50ce:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    50d2:	2202      	movs	r2, #2
    50d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    50d8:	4803      	ldr	r0, [pc, #12]	; (50e8 <nrfx_gpiote_pin_uninit+0x40>)
}
    50da:	b002      	add	sp, #8
    50dc:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    50de:	4803      	ldr	r0, [pc, #12]	; (50ec <nrfx_gpiote_pin_uninit+0x44>)
    50e0:	e7fb      	b.n	50da <nrfx_gpiote_pin_uninit+0x32>
    50e2:	bf00      	nop
    50e4:	200001f8 	.word	0x200001f8
    50e8:	0bad0000 	.word	0x0bad0000
    50ec:	0bad0004 	.word	0x0bad0004

000050f0 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    50f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50f4:	4b68      	ldr	r3, [pc, #416]	; (5298 <nrfx_gpiote_irq_handler+0x1a8>)
    return p_reg->INTENSET & mask;
    50f6:	4869      	ldr	r0, [pc, #420]	; (529c <nrfx_gpiote_irq_handler+0x1ac>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    50f8:	4969      	ldr	r1, [pc, #420]	; (52a0 <nrfx_gpiote_irq_handler+0x1b0>)
    uint32_t status = 0;
    50fa:	2600      	movs	r6, #0
{
    50fc:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    50fe:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5100:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5102:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5104:	b135      	cbz	r5, 5114 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5106:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    510a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    510c:	bf1e      	ittt	ne
    510e:	601c      	strne	r4, [r3, #0]
    5110:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5112:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5114:	3304      	adds	r3, #4
    5116:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5118:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    511c:	d1f1      	bne.n	5102 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    511e:	f8df 917c 	ldr.w	r9, [pc, #380]	; 529c <nrfx_gpiote_irq_handler+0x1ac>
    5122:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5126:	2b00      	cmp	r3, #0
    5128:	f000 8099 	beq.w	525e <nrfx_gpiote_irq_handler+0x16e>
        *p_masks = gpio_regs[i]->LATCH;
    512c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5130:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5134:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5136:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    513a:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    513e:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5140:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5144:	f04f 0800 	mov.w	r8, #0
            while (latch[i])
    5148:	f10d 0a10 	add.w	sl, sp, #16
    514c:	ea4f 1348 	mov.w	r3, r8, lsl #5
    5150:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5152:	f04f 0b01 	mov.w	fp, #1
    5156:	e049      	b.n	51ec <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5158:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    515a:	4a52      	ldr	r2, [pc, #328]	; (52a4 <nrfx_gpiote_irq_handler+0x1b4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    515c:	fa94 f4a4 	rbit	r4, r4
    5160:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5164:	441c      	add	r4, r3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5166:	08e0      	lsrs	r0, r4, #3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5168:	f104 0308 	add.w	r3, r4, #8
    516c:	9403      	str	r4, [sp, #12]
    516e:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5172:	f81a 3000 	ldrb.w	r3, [sl, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5176:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    517a:	fa0b f202 	lsl.w	r2, fp, r2
    517e:	ea23 0302 	bic.w	r3, r3, r2
    5182:	f80a 3000 	strb.w	r3, [sl, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5186:	a803      	add	r0, sp, #12
    5188:	f7ff fd26 	bl	4bd8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    518c:	9b03      	ldr	r3, [sp, #12]
    518e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5192:	08b9      	lsrs	r1, r7, #2
    5194:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    5198:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    519c:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    519e:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    51a0:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    51a4:	d52c      	bpl.n	5200 <nrfx_gpiote_irq_handler+0x110>
        call_handler(pin, trigger);
    51a6:	4620      	mov	r0, r4
    51a8:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    51aa:	b2dd      	uxtb	r5, r3
    51ac:	f7ff fd2c 	bl	4c08 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    51b0:	a803      	add	r0, sp, #12
    51b2:	9403      	str	r4, [sp, #12]
    51b4:	f7ff fd10 	bl	4bd8 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    51b8:	9b03      	ldr	r3, [sp, #12]
    51ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    51be:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    51c2:	f3c3 4301 	ubfx	r3, r3, #16, #2
    51c6:	429d      	cmp	r5, r3
    51c8:	d107      	bne.n	51da <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    51ca:	2100      	movs	r1, #0
    51cc:	4620      	mov	r0, r4
    51ce:	f002 fa1a 	bl	7606 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    51d2:	4629      	mov	r1, r5
    51d4:	4620      	mov	r0, r4
    51d6:	f002 fa16 	bl	7606 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    51da:	a803      	add	r0, sp, #12
    51dc:	9403      	str	r4, [sp, #12]
    51de:	f7ff fcfb 	bl	4bd8 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    51e2:	9b03      	ldr	r3, [sp, #12]
    51e4:	fa0b f303 	lsl.w	r3, fp, r3
    51e8:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    51ec:	f85a 4028 	ldr.w	r4, [sl, r8, lsl #2]
    51f0:	2c00      	cmp	r4, #0
    51f2:	d1b1      	bne.n	5158 <nrfx_gpiote_irq_handler+0x68>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    51f4:	f1b8 0f00 	cmp.w	r8, #0
    51f8:	d11d      	bne.n	5236 <nrfx_gpiote_irq_handler+0x146>
    51fa:	f04f 0801 	mov.w	r8, #1
    51fe:	e7a5      	b.n	514c <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5200:	2b02      	cmp	r3, #2
    5202:	d10c      	bne.n	521e <nrfx_gpiote_irq_handler+0x12e>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5204:	2103      	movs	r1, #3
    5206:	4620      	mov	r0, r4
    5208:	f002 f9fd 	bl	7606 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    520c:	f005 0305 	and.w	r3, r5, #5
    5210:	2b01      	cmp	r3, #1
    5212:	d1e2      	bne.n	51da <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    5214:	4639      	mov	r1, r7
    5216:	4620      	mov	r0, r4
    5218:	f7ff fcf6 	bl	4c08 <call_handler>
    521c:	e7dd      	b.n	51da <nrfx_gpiote_irq_handler+0xea>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    521e:	2102      	movs	r1, #2
    5220:	4620      	mov	r0, r4
    5222:	9301      	str	r3, [sp, #4]
    5224:	f002 f9ef 	bl	7606 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5228:	2d03      	cmp	r5, #3
    522a:	d0f3      	beq.n	5214 <nrfx_gpiote_irq_handler+0x124>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    522c:	9b01      	ldr	r3, [sp, #4]
    522e:	2b03      	cmp	r3, #3
    5230:	d1d3      	bne.n	51da <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5232:	2d02      	cmp	r5, #2
    5234:	e7ed      	b.n	5212 <nrfx_gpiote_irq_handler+0x122>
        *p_masks = gpio_regs[i]->LATCH;
    5236:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    523a:	f8c9 417c 	str.w	r4, [r9, #380]	; 0x17c
    523e:	f8d9 317c 	ldr.w	r3, [r9, #380]	; 0x17c
    5242:	4919      	ldr	r1, [pc, #100]	; (52a8 <nrfx_gpiote_irq_handler+0x1b8>)
    5244:	f8d2 3520 	ldr.w	r3, [r2, #1312]	; 0x520
    5248:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    524a:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    524e:	f8d1 2520 	ldr.w	r2, [r1, #1312]	; 0x520
    5252:	9205      	str	r2, [sp, #20]
        if (latch[port_idx])
    5254:	4313      	orrs	r3, r2
        gpio_regs[i]->LATCH = *p_masks;
    5256:	f8c1 2520 	str.w	r2, [r1, #1312]	; 0x520
    525a:	f47f af73 	bne.w	5144 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    525e:	2401      	movs	r4, #1
    while (mask)
    5260:	b916      	cbnz	r6, 5268 <nrfx_gpiote_irq_handler+0x178>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5262:	b007      	add	sp, #28
    5264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    5268:	fa96 f3a6 	rbit	r3, r6
    526c:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5270:	fa04 f203 	lsl.w	r2, r4, r3
    5274:	009b      	lsls	r3, r3, #2
    5276:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    527a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    527e:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5282:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5286:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    528a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    528e:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5292:	f7ff fcb9 	bl	4c08 <call_handler>
    5296:	e7e3      	b.n	5260 <nrfx_gpiote_irq_handler+0x170>
    5298:	40006100 	.word	0x40006100
    529c:	40006000 	.word	0x40006000
    52a0:	40006120 	.word	0x40006120
    52a4:	200001f8 	.word	0x200001f8
    52a8:	50000300 	.word	0x50000300

000052ac <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    52ac:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    52ae:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    52b2:	095b      	lsrs	r3, r3, #5
        case 0: return NRF_P0;
    52b4:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    52b6:	6002      	str	r2, [r0, #0]
}
    52b8:	4802      	ldr	r0, [pc, #8]	; (52c4 <nrf_gpio_pin_port_decode+0x18>)
    52ba:	bf18      	it	ne
    52bc:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    52c0:	4770      	bx	lr
    52c2:	bf00      	nop
    52c4:	50000300 	.word	0x50000300

000052c8 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    52c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    52cc:	7907      	ldrb	r7, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    52ce:	4c52      	ldr	r4, [pc, #328]	; (5418 <nrfx_spi_init+0x150>)
    52d0:	f04f 0c28 	mov.w	ip, #40	; 0x28
    52d4:	fb0c fc07 	mul.w	ip, ip, r7
{
    52d8:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    52da:	eb04 000c 	add.w	r0, r4, ip
    52de:	7f05      	ldrb	r5, [r0, #28]
    52e0:	2d00      	cmp	r5, #0
    52e2:	f040 8096 	bne.w	5412 <nrfx_spi_init+0x14a>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    52e6:	6835      	ldr	r5, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    52e8:	f844 200c 	str.w	r2, [r4, ip]
    p_cb->p_context = p_context;
    52ec:	6043      	str	r3, [r0, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    52ee:	7bcb      	ldrb	r3, [r1, #15]
    52f0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    52f4:	78cb      	ldrb	r3, [r1, #3]
    52f6:	7783      	strb	r3, [r0, #30]
    p_cb->orc = p_config->orc;
    52f8:	794b      	ldrb	r3, [r1, #5]
    52fa:	77c3      	strb	r3, [r0, #31]
    if (!p_config->skip_gpio_cfg)
    52fc:	7bcb      	ldrb	r3, [r1, #15]
    52fe:	2b00      	cmp	r3, #0
    5300:	d140      	bne.n	5384 <nrfx_spi_init+0xbc>
    if (value == 0)
    5302:	7b0b      	ldrb	r3, [r1, #12]
        nrf_gpio_pin_write(p_config->sck_pin,
    5304:	7808      	ldrb	r0, [r1, #0]
    5306:	2b01      	cmp	r3, #1
    5308:	d87a      	bhi.n	5400 <nrfx_spi_init+0x138>
        nrf_gpio_pin_clear(pin_number);
    530a:	f002 f9a6 	bl	765a <nrf_gpio_pin_clear>
        nrf_gpio_cfg(p_config->sck_pin,
    530e:	780b      	ldrb	r3, [r1, #0]
    5310:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5312:	a801      	add	r0, sp, #4
    5314:	f7ff ffca 	bl	52ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5318:	9b01      	ldr	r3, [sp, #4]
    531a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    531e:	2201      	movs	r2, #1
    5320:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    5324:	7848      	ldrb	r0, [r1, #1]
    5326:	28ff      	cmp	r0, #255	; 0xff
    5328:	d00c      	beq.n	5344 <nrfx_spi_init+0x7c>
        nrf_gpio_pin_clear(pin_number);
    532a:	f002 f996 	bl	765a <nrf_gpio_pin_clear>
            nrf_gpio_cfg_output(p_config->mosi_pin);
    532e:	784b      	ldrb	r3, [r1, #1]
    5330:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5332:	a801      	add	r0, sp, #4
    5334:	f7ff ffba 	bl	52ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5338:	9b01      	ldr	r3, [sp, #4]
    533a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    533e:	2203      	movs	r2, #3
    5340:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    5344:	788b      	ldrb	r3, [r1, #2]
    5346:	2bff      	cmp	r3, #255	; 0xff
    5348:	d00c      	beq.n	5364 <nrfx_spi_init+0x9c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    534a:	a801      	add	r0, sp, #4
            nrf_gpio_cfg_input(p_config->miso_pin, p_config->miso_pull);
    534c:	f891 800e 	ldrb.w	r8, [r1, #14]
    5350:	9301      	str	r3, [sp, #4]
    5352:	f7ff ffab 	bl	52ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5356:	9b01      	ldr	r3, [sp, #4]
    5358:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    535c:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    5360:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5364:	78c8      	ldrb	r0, [r1, #3]
    5366:	28ff      	cmp	r0, #255	; 0xff
    5368:	d00c      	beq.n	5384 <nrfx_spi_init+0xbc>
        nrf_gpio_pin_set(pin_number);
    536a:	f002 f969 	bl	7640 <nrf_gpio_pin_set>
            nrf_gpio_cfg_output(p_config->ss_pin);
    536e:	78cb      	ldrb	r3, [r1, #3]
    5370:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5372:	a801      	add	r0, sp, #4
    5374:	f7ff ff9a 	bl	52ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5378:	9b01      	ldr	r3, [sp, #4]
    537a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    537e:	2203      	movs	r2, #3
    5380:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    5384:	7c0b      	ldrb	r3, [r1, #16]
    5386:	b993      	cbnz	r3, 53ae <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    5388:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    538a:	7808      	ldrb	r0, [r1, #0]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    538c:	2bff      	cmp	r3, #255	; 0xff
    538e:	bf18      	it	ne
    5390:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    5392:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       sck_pin,
                                        uint32_t       mosi_pin,
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
    5394:	f8c5 0508 	str.w	r0, [r5, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5398:	bf08      	it	eq
    539a:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    539e:	2bff      	cmp	r3, #255	; 0xff
    53a0:	bf08      	it	eq
    53a2:	f04f 33ff 	moveq.w	r3, #4294967295
#else
    p_reg->PSELSCK  = sck_pin;
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
    53a6:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
#else
    p_reg->PSELMOSI = mosi_pin;
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
    53aa:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    53ae:	688b      	ldr	r3, [r1, #8]
    53b0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    53b4:	7b4b      	ldrb	r3, [r1, #13]

    configure_pins(p_spi, p_config);

    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
    53b6:	7b0a      	ldrb	r2, [r1, #12]
    53b8:	3b00      	subs	r3, #0
    53ba:	bf18      	it	ne
    53bc:	2301      	movne	r3, #1
    switch (spi_mode)
    53be:	2a02      	cmp	r2, #2
    53c0:	d021      	beq.n	5406 <nrfx_spi_init+0x13e>
    53c2:	2a03      	cmp	r2, #3
    53c4:	d022      	beq.n	540c <nrfx_spi_init+0x144>
    53c6:	2a01      	cmp	r2, #1
    53c8:	d101      	bne.n	53ce <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    53ca:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    53ce:	f8c5 3554 	str.w	r3, [r5, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    53d2:	2301      	movs	r3, #1
    53d4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    53d8:	2328      	movs	r3, #40	; 0x28
    53da:	437b      	muls	r3, r7
    53dc:	58e3      	ldr	r3, [r4, r3]
    53de:	b123      	cbz	r3, 53ea <nrfx_spi_init+0x122>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    53e0:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    53e2:	f340 3007 	sbfx	r0, r0, #12, #8
    53e6:	f7fc ff13 	bl	2210 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    53ea:	2328      	movs	r3, #40	; 0x28
    53ec:	fb03 4407 	mla	r4, r3, r7, r4
    53f0:	2300      	movs	r3, #0
    53f2:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    53f4:	4809      	ldr	r0, [pc, #36]	; (541c <nrfx_spi_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    53f6:	2301      	movs	r3, #1
    53f8:	7723      	strb	r3, [r4, #28]
}
    53fa:	b002      	add	sp, #8
    53fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_set(pin_number);
    5400:	f002 f91e 	bl	7640 <nrf_gpio_pin_set>
    5404:	e783      	b.n	530e <nrfx_spi_init+0x46>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    5406:	f043 0304 	orr.w	r3, r3, #4
        break;
    540a:	e7e0      	b.n	53ce <nrfx_spi_init+0x106>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    540c:	f043 0306 	orr.w	r3, r3, #6
        break;
    5410:	e7dd      	b.n	53ce <nrfx_spi_init+0x106>
        return err_code;
    5412:	4803      	ldr	r0, [pc, #12]	; (5420 <nrfx_spi_init+0x158>)
    5414:	e7f1      	b.n	53fa <nrfx_spi_init+0x132>
    5416:	bf00      	nop
    5418:	20000530 	.word	0x20000530
    541c:	0bad0000 	.word	0x0bad0000
    5420:	0bad0005 	.word	0x0bad0005

00005424 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    5424:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5426:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    5428:	4c19      	ldr	r4, [pc, #100]	; (5490 <nrfx_spi_uninit+0x6c>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    542a:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    542c:	2328      	movs	r3, #40	; 0x28
    542e:	4373      	muls	r3, r6
    5430:	58e3      	ldr	r3, [r4, r3]
    5432:	b133      	cbz	r3, 5442 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    5434:	f345 3007 	sbfx	r0, r5, #12, #8
    5438:	f7fc fef8 	bl	222c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    543c:	2304      	movs	r3, #4
    543e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    5442:	2300      	movs	r3, #0
    5444:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    5448:	2328      	movs	r3, #40	; 0x28
    544a:	fb03 4306 	mla	r3, r3, r6, r4
    544e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5452:	b9bb      	cbnz	r3, 5484 <nrfx_spi_uninit+0x60>
    return p_reg->PSEL.SCK;
    5454:	f8d5 0508 	ldr.w	r0, [r5, #1288]	; 0x508
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));
    5458:	f002 f8e4 	bl	7624 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MISO;
    545c:	f8d5 0510 	ldr.w	r0, [r5, #1296]	; 0x510

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    5460:	1c42      	adds	r2, r0, #1
    5462:	d001      	beq.n	5468 <nrfx_spi_uninit+0x44>
        {
            nrf_gpio_cfg_default(miso_pin);
    5464:	f002 f8de 	bl	7624 <nrf_gpio_cfg_default>
    return p_reg->PSEL.MOSI;
    5468:	f8d5 050c 	ldr.w	r0, [r5, #1292]	; 0x50c
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    546c:	1c43      	adds	r3, r0, #1
    546e:	d001      	beq.n	5474 <nrfx_spi_uninit+0x50>
        {
            nrf_gpio_cfg_default(mosi_pin);
    5470:	f002 f8d8 	bl	7624 <nrf_gpio_cfg_default>
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5474:	2328      	movs	r3, #40	; 0x28
    5476:	fb03 4306 	mla	r3, r3, r6, r4
    547a:	7f98      	ldrb	r0, [r3, #30]
    547c:	28ff      	cmp	r0, #255	; 0xff
    547e:	d001      	beq.n	5484 <nrfx_spi_uninit+0x60>
        {
            nrf_gpio_cfg_default(p_cb->ss_pin);
    5480:	f002 f8d0 	bl	7624 <nrf_gpio_cfg_default>

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    5484:	2328      	movs	r3, #40	; 0x28
    5486:	fb03 4406 	mla	r4, r3, r6, r4
    548a:	2300      	movs	r3, #0
    548c:	7723      	strb	r3, [r4, #28]
}
    548e:	bd70      	pop	{r4, r5, r6, pc}
    5490:	20000530 	.word	0x20000530

00005494 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    5494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5498:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    549a:	4c39      	ldr	r4, [pc, #228]	; (5580 <nrfx_spi_xfer+0xec>)
    549c:	2328      	movs	r3, #40	; 0x28
    549e:	437b      	muls	r3, r7
{
    54a0:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
    54a2:	18e2      	adds	r2, r4, r3
{
    54a4:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    54a6:	7f51      	ldrb	r1, [r2, #29]
{
    54a8:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
    54aa:	2900      	cmp	r1, #0
    54ac:	d166      	bne.n	557c <nrfx_spi_xfer+0xe8>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    54ae:	58e3      	ldr	r3, [r4, r3]
    54b0:	b10b      	cbz	r3, 54b6 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
    54b2:	2301      	movs	r3, #1
    54b4:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    54b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    54ba:	2528      	movs	r5, #40	; 0x28
    54bc:	fb05 4507 	mla	r5, r5, r7, r4
    54c0:	f105 0c0c 	add.w	ip, r5, #12
    54c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    54c8:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
    54ca:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    54cc:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
    54ce:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    54d2:	d001      	beq.n	54d8 <nrfx_spi_xfer+0x44>
        nrf_gpio_pin_clear(pin_number);
    54d4:	f002 f8c1 	bl	765a <nrf_gpio_pin_clear>
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    54d8:	2328      	movs	r3, #40	; 0x28
    54da:	f1b8 0f00 	cmp.w	r8, #0
    54de:	d006      	beq.n	54ee <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
    54e0:	fb03 4307 	mla	r3, r3, r7, r4
    54e4:	2200      	movs	r2, #0
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    54e6:	4827      	ldr	r0, [pc, #156]	; (5584 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
    54e8:	775a      	strb	r2, [r3, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    54ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    54ee:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
    54f2:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
    54f6:	2204      	movs	r2, #4
    54f8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
    54fc:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5500:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
    5504:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
    nrf_spi_txd_set(p_spi,
    5508:	6872      	ldr	r2, [r6, #4]
    550a:	b19a      	cbz	r2, 5534 <nrfx_spi_xfer+0xa0>
    550c:	6833      	ldr	r3, [r6, #0]
    550e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    5510:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    5514:	6873      	ldr	r3, [r6, #4]
    5516:	2b01      	cmp	r3, #1
    5518:	d90e      	bls.n	5538 <nrfx_spi_xfer+0xa4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    551a:	6833      	ldr	r3, [r6, #0]
    551c:	785b      	ldrb	r3, [r3, #1]
    551e:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
    5522:	2328      	movs	r3, #40	; 0x28
    5524:	437b      	muls	r3, r7
    5526:	58e6      	ldr	r6, [r4, r3]
    5528:	b176      	cbz	r6, 5548 <nrfx_spi_xfer+0xb4>
    p_reg->INTENSET = mask;
    552a:	2304      	movs	r3, #4
    552c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    5530:	4815      	ldr	r0, [pc, #84]	; (5588 <nrfx_spi_xfer+0xf4>)
    5532:	e7da      	b.n	54ea <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
    5534:	7fdb      	ldrb	r3, [r3, #31]
    5536:	e7eb      	b.n	5510 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
    5538:	68f3      	ldr	r3, [r6, #12]
    553a:	2b01      	cmp	r3, #1
    553c:	d9f1      	bls.n	5522 <nrfx_spi_xfer+0x8e>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    553e:	2328      	movs	r3, #40	; 0x28
    5540:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
    5544:	7fdb      	ldrb	r3, [r3, #31]
    5546:	e7ea      	b.n	551e <nrfx_spi_xfer+0x8a>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5548:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    554c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5550:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    5554:	2b00      	cmp	r3, #0
    5556:	d0fb      	beq.n	5550 <nrfx_spi_xfer+0xbc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5558:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    555c:	4628      	mov	r0, r5
    555e:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    5562:	f002 f887 	bl	7674 <transfer_byte>
    5566:	2800      	cmp	r0, #0
    5568:	d1f2      	bne.n	5550 <nrfx_spi_xfer+0xbc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    556a:	2328      	movs	r3, #40	; 0x28
    556c:	fb03 4407 	mla	r4, r3, r7, r4
    5570:	7fa0      	ldrb	r0, [r4, #30]
    5572:	28ff      	cmp	r0, #255	; 0xff
    5574:	d0dc      	beq.n	5530 <nrfx_spi_xfer+0x9c>
        nrf_gpio_pin_set(pin_number);
    5576:	f002 f863 	bl	7640 <nrf_gpio_pin_set>
    557a:	e7d9      	b.n	5530 <nrfx_spi_xfer+0x9c>
        return err_code;
    557c:	4803      	ldr	r0, [pc, #12]	; (558c <nrfx_spi_xfer+0xf8>)
    557e:	e7b4      	b.n	54ea <nrfx_spi_xfer+0x56>
    5580:	20000530 	.word	0x20000530
    5584:	0bad0003 	.word	0x0bad0003
    5588:	0bad0000 	.word	0x0bad0000
    558c:	0bad000b 	.word	0x0bad000b

00005590 <nrfx_spi_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    5590:	b510      	push	{r4, lr}
    5592:	480c      	ldr	r0, [pc, #48]	; (55c4 <nrfx_spi_0_irq_handler+0x34>)
    if (!transfer_byte(p_spi, p_cb))
    5594:	490c      	ldr	r1, [pc, #48]	; (55c8 <nrfx_spi_0_irq_handler+0x38>)
    5596:	2300      	movs	r3, #0
    5598:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    559c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    55a0:	f002 f868 	bl	7674 <transfer_byte>
    55a4:	b968      	cbnz	r0, 55c2 <nrfx_spi_0_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    55a6:	7f88      	ldrb	r0, [r1, #30]
    55a8:	28ff      	cmp	r0, #255	; 0xff
    55aa:	d001      	beq.n	55b0 <nrfx_spi_0_irq_handler+0x20>
    55ac:	f002 f848 	bl	7640 <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
    55b0:	2300      	movs	r3, #0
    55b2:	774b      	strb	r3, [r1, #29]
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    55b4:	720b      	strb	r3, [r1, #8]
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
}
    55b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    55ba:	e9d1 3100 	ldrd	r3, r1, [r1]
    55be:	4803      	ldr	r0, [pc, #12]	; (55cc <nrfx_spi_0_irq_handler+0x3c>)
    55c0:	4718      	bx	r3
}
    55c2:	bd10      	pop	{r4, pc}
    55c4:	40003000 	.word	0x40003000
    55c8:	20000530 	.word	0x20000530
    55cc:	20000538 	.word	0x20000538

000055d0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    55d0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    55d2:	4c11      	ldr	r4, [pc, #68]	; (5618 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    55d4:	4a11      	ldr	r2, [pc, #68]	; (561c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    55d6:	4912      	ldr	r1, [pc, #72]	; (5620 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    55d8:	2303      	movs	r3, #3
    55da:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    55dc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    55de:	4b11      	ldr	r3, [pc, #68]	; (5624 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    55e0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    55e2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    55e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    55e8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    55ea:	2300      	movs	r3, #0
    55ec:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    55ee:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    55f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    55f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    55f4:	4a0c      	ldr	r2, [pc, #48]	; (5628 <_DoInit+0x58>)
    55f6:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    55f8:	2210      	movs	r2, #16
    55fa:	66a2      	str	r2, [r4, #104]	; 0x68
  STRCPY((char*)&p->acID[7], "RTT");
    55fc:	1de0      	adds	r0, r4, #7
  p->aDown[0].RdOff         = 0u;
    55fe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5600:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5602:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5604:	f001 fb81 	bl	6d0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5608:	4908      	ldr	r1, [pc, #32]	; (562c <_DoInit+0x5c>)
    560a:	4620      	mov	r0, r4
    560c:	f001 fb7d 	bl	6d0a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5610:	2320      	movs	r3, #32
    5612:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5614:	bd10      	pop	{r4, pc}
    5616:	bf00      	nop
    5618:	20000558 	.word	0x20000558
    561c:	000089e9 	.word	0x000089e9
    5620:	000089f2 	.word	0x000089f2
    5624:	20000656 	.word	0x20000656
    5628:	20000646 	.word	0x20000646
    562c:	000089f6 	.word	0x000089f6

00005630 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5634:	4f21      	ldr	r7, [pc, #132]	; (56bc <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    5636:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    563a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    563c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5640:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5642:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5644:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5646:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5648:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    564a:	d831      	bhi.n	56b0 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    564c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5650:	ebaa 0905 	sub.w	r9, sl, r5
    5654:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    5658:	4294      	cmp	r4, r2
    565a:	d811      	bhi.n	5680 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    565c:	2318      	movs	r3, #24
    565e:	fb06 3303 	mla	r3, r6, r3, r3
    5662:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    5664:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5666:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5668:	4641      	mov	r1, r8
    566a:	4428      	add	r0, r5
    566c:	f001 fb67 	bl	6d3e <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    5670:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    5672:	2318      	movs	r3, #24
    5674:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    5678:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    567a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    567c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5680:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5682:	429c      	cmp	r4, r3
    5684:	d818      	bhi.n	56b8 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5686:	fb00 bb0b 	mla	fp, r0, fp, fp
    568a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    568c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    568e:	f8db 0004 	ldr.w	r0, [fp, #4]
    5692:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5694:	4428      	add	r0, r5
    5696:	f001 fb52 	bl	6d3e <memcpy>
      if (NumBytes) {
    569a:	ebb4 040a 	subs.w	r4, r4, sl
    569e:	d0e8      	beq.n	5672 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    56a0:	f8db 0004 	ldr.w	r0, [fp, #4]
    56a4:	4622      	mov	r2, r4
    56a6:	eb08 0109 	add.w	r1, r8, r9
    56aa:	f001 fb48 	bl	6d3e <memcpy>
      return 1;
    56ae:	e7e0      	b.n	5672 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    56b0:	3b01      	subs	r3, #1
    56b2:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    56b4:	42a3      	cmp	r3, r4
    56b6:	d2d1      	bcs.n	565c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    56b8:	2000      	movs	r0, #0
    56ba:	e7df      	b.n	567c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    56bc:	20000558 	.word	0x20000558

000056c0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    56c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    56c2:	4b14      	ldr	r3, [pc, #80]	; (5714 <SEGGER_RTT_WriteNoLock+0x54>)
    56c4:	2718      	movs	r7, #24
    56c6:	fb00 7507 	mla	r5, r0, r7, r7
    56ca:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    56cc:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    56d0:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    56d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    56d4:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    56d6:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    56d8:	d00a      	beq.n	56f0 <SEGGER_RTT_WriteNoLock+0x30>
    56da:	2b02      	cmp	r3, #2
    56dc:	d014      	beq.n	5708 <SEGGER_RTT_WriteNoLock+0x48>
    56de:	b923      	cbnz	r3, 56ea <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    56e0:	4628      	mov	r0, r5
    56e2:	f001 fffa 	bl	76da <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    56e6:	4284      	cmp	r4, r0
    56e8:	d908      	bls.n	56fc <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    56ea:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    56ec:	4620      	mov	r0, r4
    56ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    56f0:	4628      	mov	r0, r5
    56f2:	f001 fff2 	bl	76da <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    56f6:	4284      	cmp	r4, r0
    56f8:	bf28      	it	cs
    56fa:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    56fc:	4622      	mov	r2, r4
    56fe:	4631      	mov	r1, r6
    5700:	4628      	mov	r0, r5
    5702:	f001 fff3 	bl	76ec <_WriteNoCheck>
    break;
    5706:	e7f1      	b.n	56ec <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5708:	4628      	mov	r0, r5
}
    570a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    570e:	f002 b808 	b.w	7722 <_WriteBlocking>
    5712:	bf00      	nop
    5714:	20000558 	.word	0x20000558

00005718 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5718:	4b03      	ldr	r3, [pc, #12]	; (5728 <SEGGER_RTT_HasDataUp+0x10>)
    571a:	2218      	movs	r2, #24
    571c:	fb02 3300 	mla	r3, r2, r0, r3
    5720:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5722:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5724:	1a80      	subs	r0, r0, r2
    5726:	4770      	bx	lr
    5728:	20000558 	.word	0x20000558

0000572c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    572c:	4803      	ldr	r0, [pc, #12]	; (573c <zephyr_rtt_mutex_lock+0x10>)
    572e:	f04f 32ff 	mov.w	r2, #4294967295
    5732:	f04f 33ff 	mov.w	r3, #4294967295
    5736:	f000 ba33 	b.w	5ba0 <z_impl_k_mutex_lock>
    573a:	bf00      	nop
    573c:	20000280 	.word	0x20000280

00005740 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    5740:	4801      	ldr	r0, [pc, #4]	; (5748 <zephyr_rtt_mutex_unlock+0x8>)
    5742:	f000 baa7 	b.w	5c94 <z_impl_k_mutex_unlock>
    5746:	bf00      	nop
    5748:	20000280 	.word	0x20000280

0000574c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    574c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5750:	4606      	mov	r6, r0
    5752:	b086      	sub	sp, #24
    5754:	460f      	mov	r7, r1
	__asm__ volatile(
    5756:	f04f 0320 	mov.w	r3, #32
    575a:	f3ef 8811 	mrs	r8, BASEPRI
    575e:	f383 8812 	msr	BASEPRI_MAX, r3
    5762:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5766:	f000 fe15 	bl	6394 <z_impl_z_current_get>
    576a:	2e04      	cmp	r6, #4
    576c:	bf96      	itet	ls
    576e:	4b22      	ldrls	r3, [pc, #136]	; (57f8 <z_fatal_error+0xac>)
    5770:	4b22      	ldrhi	r3, [pc, #136]	; (57fc <z_fatal_error+0xb0>)
    5772:	f853 3026 	ldrls.w	r3, [r3, r6, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5776:	4922      	ldr	r1, [pc, #136]	; (5800 <z_fatal_error+0xb4>)
    5778:	9603      	str	r6, [sp, #12]
    577a:	2400      	movs	r4, #0
    577c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    5780:	4b20      	ldr	r3, [pc, #128]	; (5804 <z_fatal_error+0xb8>)
    5782:	9400      	str	r4, [sp, #0]
    5784:	e9cd 4301 	strd	r4, r3, [sp, #4]
    5788:	4605      	mov	r5, r0
    578a:	4623      	mov	r3, r4
    578c:	2201      	movs	r2, #1
    578e:	4620      	mov	r0, r4
    5790:	f002 f804 	bl	779c <z_log_msg_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5794:	b16f      	cbz	r7, 57b2 <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5796:	69fb      	ldr	r3, [r7, #28]
    5798:	f3c3 0308 	ubfx	r3, r3, #0, #9
    579c:	b14b      	cbz	r3, 57b2 <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    579e:	4b1a      	ldr	r3, [pc, #104]	; (5808 <z_fatal_error+0xbc>)
    57a0:	4917      	ldr	r1, [pc, #92]	; (5800 <z_fatal_error+0xb4>)
    57a2:	9400      	str	r4, [sp, #0]
    57a4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    57a8:	2201      	movs	r2, #1
    57aa:	4623      	mov	r3, r4
    57ac:	4620      	mov	r0, r4
    57ae:	f001 fff5 	bl	779c <z_log_msg_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    57b2:	b12d      	cbz	r5, 57c0 <z_fatal_error+0x74>
    57b4:	4628      	mov	r0, r5
    57b6:	f002 f80b 	bl	77d0 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    57ba:	b108      	cbz	r0, 57c0 <z_fatal_error+0x74>
    57bc:	7803      	ldrb	r3, [r0, #0]
    57be:	b903      	cbnz	r3, 57c2 <z_fatal_error+0x76>
		thread_name = "unknown";
    57c0:	4812      	ldr	r0, [pc, #72]	; (580c <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    57c2:	4b13      	ldr	r3, [pc, #76]	; (5810 <z_fatal_error+0xc4>)
    57c4:	9302      	str	r3, [sp, #8]
    57c6:	2300      	movs	r3, #0
    57c8:	e9cd 5003 	strd	r5, r0, [sp, #12]
    57cc:	e9cd 3300 	strd	r3, r3, [sp]
    57d0:	4618      	mov	r0, r3
    57d2:	2201      	movs	r2, #1
    57d4:	490a      	ldr	r1, [pc, #40]	; (5800 <z_fatal_error+0xb4>)
    57d6:	f001 ffe1 	bl	779c <z_log_msg_runtime_create.constprop.0>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    57da:	4639      	mov	r1, r7
    57dc:	4630      	mov	r0, r6
    57de:	f7ff f8a5 	bl	492c <k_sys_fatal_error_handler>
	__asm__ volatile(
    57e2:	f388 8811 	msr	BASEPRI, r8
    57e6:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    57ea:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    57ec:	b006      	add	sp, #24
    57ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    57f2:	f7fd ba0f 	b.w	2c14 <z_impl_k_thread_abort>
    57f6:	bf00      	nop
    57f8:	00007f0c 	.word	0x00007f0c
    57fc:	000089fd 	.word	0x000089fd
    5800:	00007cd8 	.word	0x00007cd8
    5804:	00008a13 	.word	0x00008a13
    5808:	00008a3b 	.word	0x00008a3b
    580c:	00008a0b 	.word	0x00008a0b
    5810:	00008a5c 	.word	0x00008a5c

00005814 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5814:	4b0f      	ldr	r3, [pc, #60]	; (5854 <z_sys_init_run_level+0x40>)
{
    5816:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5818:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    581c:	3001      	adds	r0, #1
    581e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5822:	42a6      	cmp	r6, r4
    5824:	d800      	bhi.n	5828 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5826:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5828:	e9d4 3500 	ldrd	r3, r5, [r4]
    582c:	4628      	mov	r0, r5
    582e:	4798      	blx	r3
		if (dev != NULL) {
    5830:	b16d      	cbz	r5, 584e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    5832:	b138      	cbz	r0, 5844 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5834:	2800      	cmp	r0, #0
    5836:	bfb8      	it	lt
    5838:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    583a:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    583c:	28ff      	cmp	r0, #255	; 0xff
    583e:	bfa8      	it	ge
    5840:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    5842:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5844:	68ea      	ldr	r2, [r5, #12]
    5846:	7853      	ldrb	r3, [r2, #1]
    5848:	f043 0301 	orr.w	r3, r3, #1
    584c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    584e:	3408      	adds	r4, #8
    5850:	e7e7      	b.n	5822 <z_sys_init_run_level+0xe>
    5852:	bf00      	nop
    5854:	00007f20 	.word	0x00007f20

00005858 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5858:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    585a:	4b0a      	ldr	r3, [pc, #40]	; (5884 <bg_thread_main+0x2c>)
    585c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    585e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    5860:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    5862:	f7ff ffd7 	bl	5814 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5866:	f000 ff55 	bl	6714 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    586a:	2004      	movs	r0, #4
    586c:	f7ff ffd2 	bl	5814 <z_sys_init_run_level>

	z_init_static_threads();
    5870:	f000 f91e 	bl	5ab0 <z_init_static_threads>
	extern int main(void);
#else
	extern void main(void);
#endif

	(void)main();
    5874:	f7fb fc32 	bl	10dc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5878:	4a03      	ldr	r2, [pc, #12]	; (5888 <bg_thread_main+0x30>)
    587a:	7b13      	ldrb	r3, [r2, #12]
    587c:	f023 0301 	bic.w	r3, r3, #1
    5880:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5882:	bd08      	pop	{r3, pc}
    5884:	20000a56 	.word	0x20000a56
    5888:	20000378 	.word	0x20000378

0000588c <z_bss_zero>:
{
    588c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    588e:	4803      	ldr	r0, [pc, #12]	; (589c <z_bss_zero+0x10>)
    5890:	4a03      	ldr	r2, [pc, #12]	; (58a0 <z_bss_zero+0x14>)
    5892:	2100      	movs	r1, #0
    5894:	1a12      	subs	r2, r2, r0
    5896:	f001 ff91 	bl	77bc <z_early_memset>
}
    589a:	bd08      	pop	{r3, pc}
    589c:	20000298 	.word	0x20000298
    58a0:	20000a58 	.word	0x20000a58

000058a4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    58a4:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
    58a6:	4e16      	ldr	r6, [pc, #88]	; (5900 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    58a8:	4d16      	ldr	r5, [pc, #88]	; (5904 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    58aa:	4917      	ldr	r1, [pc, #92]	; (5908 <z_init_cpu+0x64>)
	struct k_thread *thread = &z_idle_threads[i];
    58ac:	23c0      	movs	r3, #192	; 0xc0
{
    58ae:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    58b0:	fb03 6600 	mla	r6, r3, r0, r6
	z_setup_new_thread(thread, stack,
    58b4:	2201      	movs	r2, #1
    58b6:	2300      	movs	r3, #0
    58b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    58bc:	220f      	movs	r2, #15
    58be:	e9cd 3202 	strd	r3, r2, [sp, #8]
    58c2:	9301      	str	r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    58c4:	231c      	movs	r3, #28
    58c6:	fb03 5500 	mla	r5, r3, r0, r5
{
    58ca:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    58cc:	f44f 70c0 	mov.w	r0, #384	; 0x180
    58d0:	fb00 1104 	mla	r1, r0, r4, r1
    58d4:	4b0d      	ldr	r3, [pc, #52]	; (590c <z_init_cpu+0x68>)
    58d6:	9500      	str	r5, [sp, #0]
    58d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    58dc:	4630      	mov	r0, r6
    58de:	f000 f889 	bl	59f4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    58e2:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    58e4:	4a0a      	ldr	r2, [pc, #40]	; (5910 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    58e6:	60ee      	str	r6, [r5, #12]
    58e8:	f023 0304 	bic.w	r3, r3, #4
    58ec:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    58ee:	f44f 6308 	mov.w	r3, #2176	; 0x880
    58f2:	fb04 3303 	mla	r3, r4, r3, r3
    58f6:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    58f8:	752c      	strb	r4, [r5, #20]
	_kernel.cpus[id].irq_stack =
    58fa:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    58fc:	b006      	add	sp, #24
    58fe:	bd70      	pop	{r4, r5, r6, pc}
    5900:	200002b8 	.word	0x200002b8
    5904:	20000600 	.word	0x20000600
    5908:	20001580 	.word	0x20001580
    590c:	00005b69 	.word	0x00005b69
    5910:	20000d00 	.word	0x20000d00

00005914 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5914:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    5916:	2000      	movs	r0, #0
{
    5918:	b0b6      	sub	sp, #216	; 0xd8
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    591a:	f7ff ff7b 	bl	5814 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    591e:	4b2e      	ldr	r3, [pc, #184]	; (59d8 <z_cstart+0xc4>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5920:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5924:	4d2d      	ldr	r5, [pc, #180]	; (59dc <z_cstart+0xc8>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    5926:	4e2e      	ldr	r6, [pc, #184]	; (59e0 <z_cstart+0xcc>)
    5928:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    592a:	4f2e      	ldr	r7, [pc, #184]	; (59e4 <z_cstart+0xd0>)
    592c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    5930:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5932:	2400      	movs	r4, #0
    5934:	23e0      	movs	r3, #224	; 0xe0
    5936:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    593a:	77ec      	strb	r4, [r5, #31]
    593c:	762c      	strb	r4, [r5, #24]
    593e:	766c      	strb	r4, [r5, #25]
    5940:	76ac      	strb	r4, [r5, #26]
    5942:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5946:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5948:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    594c:	626b      	str	r3, [r5, #36]	; 0x24
    594e:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5952:	f7fd f8d3 	bl	2afc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5956:	f7fc fba7 	bl	20a8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    595a:	f04f 33ff 	mov.w	r3, #4294967295
    595e:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5960:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5962:	f7fd fa21 	bl	2da8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5966:	f7fd f96b 	bl	2c40 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    596a:	f7fb ff79 	bl	1860 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    596e:	f240 1301 	movw	r3, #257	; 0x101
    5972:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5976:	ab06      	add	r3, sp, #24
    5978:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    597a:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    597e:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5980:	f001 ff00 	bl	7784 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    5984:	2001      	movs	r0, #1
    5986:	f7ff ff45 	bl	5814 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    598a:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    598c:	4d16      	ldr	r5, [pc, #88]	; (59e8 <z_cstart+0xd4>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    598e:	f7ff ff41 	bl	5814 <z_sys_init_run_level>
	z_sched_init();
    5992:	f000 fc3d 	bl	6210 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5996:	4b15      	ldr	r3, [pc, #84]	; (59ec <z_cstart+0xd8>)
	_kernel.ready_q.cache = &z_main_thread;
    5998:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    599a:	9305      	str	r3, [sp, #20]
    599c:	2301      	movs	r3, #1
    599e:	4914      	ldr	r1, [pc, #80]	; (59f0 <z_cstart+0xdc>)
    59a0:	9400      	str	r4, [sp, #0]
    59a2:	e9cd 4303 	strd	r4, r3, [sp, #12]
    59a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    59aa:	463b      	mov	r3, r7
    59ac:	e9cd 4401 	strd	r4, r4, [sp, #4]
    59b0:	4628      	mov	r0, r5
    59b2:	f000 f81f 	bl	59f4 <z_setup_new_thread>
    59b6:	7b6a      	ldrb	r2, [r5, #13]
    59b8:	4606      	mov	r6, r0
    59ba:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    59be:	4628      	mov	r0, r5
    59c0:	736a      	strb	r2, [r5, #13]
    59c2:	f001 ff85 	bl	78d0 <z_ready_thread>
	z_init_cpu(0);
    59c6:	4620      	mov	r0, r4
    59c8:	f7ff ff6c 	bl	58a4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    59cc:	463a      	mov	r2, r7
    59ce:	4631      	mov	r1, r6
    59d0:	4628      	mov	r0, r5
    59d2:	f7fc fd8d 	bl	24f0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    59d6:	bf00      	nop
    59d8:	20001580 	.word	0x20001580
    59dc:	e000ed00 	.word	0xe000ed00
    59e0:	20000600 	.word	0x20000600
    59e4:	00005859 	.word	0x00005859
    59e8:	20000378 	.word	0x20000378
    59ec:	00008abe 	.word	0x00008abe
    59f0:	20001700 	.word	0x20001700

000059f4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    59f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    59f8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    59fa:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    59fc:	2604      	movs	r6, #4
    59fe:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5a00:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5a02:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5a04:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    5a08:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5a0a:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5a0c:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    5a12:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5a14:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    5a18:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    5a1a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5a1e:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5a22:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5a24:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    5a26:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5a28:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5a2c:	9202      	str	r2, [sp, #8]
    5a2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5a30:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5a32:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5a34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    5a36:	9200      	str	r2, [sp, #0]
    5a38:	4642      	mov	r2, r8
{
    5a3a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5a3c:	f7fc fcd4 	bl	23e8 <arch_new_thread>
	if (!_current) {
    5a40:	4b04      	ldr	r3, [pc, #16]	; (5a54 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    5a42:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5a44:	689b      	ldr	r3, [r3, #8]
    5a46:	b103      	cbz	r3, 5a4a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    5a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    5a4a:	6723      	str	r3, [r4, #112]	; 0x70
}
    5a4c:	4640      	mov	r0, r8
    5a4e:	b004      	add	sp, #16
    5a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a54:	20000600 	.word	0x20000600

00005a58 <z_impl_k_thread_create>:
{
    5a58:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a5a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5a5c:	2500      	movs	r5, #0
    5a5e:	9505      	str	r5, [sp, #20]
    5a60:	9d10      	ldr	r5, [sp, #64]	; 0x40
    5a62:	9504      	str	r5, [sp, #16]
    5a64:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    5a66:	9503      	str	r5, [sp, #12]
    5a68:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5a6a:	9502      	str	r5, [sp, #8]
{
    5a6c:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5a70:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    5a72:	9501      	str	r5, [sp, #4]
    5a74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    5a76:	9500      	str	r5, [sp, #0]
{
    5a78:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5a7a:	f7ff ffbb 	bl	59f4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5a7e:	f1b6 3fff 	cmp.w	r6, #4294967295
    5a82:	bf08      	it	eq
    5a84:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    5a88:	d005      	beq.n	5a96 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5a8a:	ea56 0307 	orrs.w	r3, r6, r7
    5a8e:	d105      	bne.n	5a9c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5a90:	4620      	mov	r0, r4
    5a92:	f000 fb3d 	bl	6110 <z_sched_start>
}
    5a96:	4620      	mov	r0, r4
    5a98:	b007      	add	sp, #28
    5a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5a9c:	4903      	ldr	r1, [pc, #12]	; (5aac <z_impl_k_thread_create+0x54>)
    5a9e:	463a      	mov	r2, r7
    5aa0:	4633      	mov	r3, r6
    5aa2:	f104 0018 	add.w	r0, r4, #24
    5aa6:	f000 fd43 	bl	6530 <z_add_timeout>
    5aaa:	e7f4      	b.n	5a96 <z_impl_k_thread_create+0x3e>
    5aac:	0000783d 	.word	0x0000783d

00005ab0 <z_init_static_threads>:
{
    5ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ab4:	4c29      	ldr	r4, [pc, #164]	; (5b5c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    5ab6:	4d2a      	ldr	r5, [pc, #168]	; (5b60 <z_init_static_threads+0xb0>)
{
    5ab8:	b087      	sub	sp, #28
    5aba:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5abc:	42ae      	cmp	r6, r5
    5abe:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5ac2:	d30f      	bcc.n	5ae4 <z_init_static_threads+0x34>
	k_sched_lock();
    5ac4:	f000 fb74 	bl	61b0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5ac8:	4c24      	ldr	r4, [pc, #144]	; (5b5c <z_init_static_threads+0xac>)
    5aca:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5b64 <z_init_static_threads+0xb4>
    5ace:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5ad2:	f240 37e7 	movw	r7, #999	; 0x3e7
    5ad6:	42ac      	cmp	r4, r5
    5ad8:	d320      	bcc.n	5b1c <z_init_static_threads+0x6c>
}
    5ada:	b007      	add	sp, #28
    5adc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5ae0:	f000 bb7a 	b.w	61d8 <k_sched_unlock>
		z_setup_new_thread(
    5ae4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5ae8:	9305      	str	r3, [sp, #20]
    5aea:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5aee:	9304      	str	r3, [sp, #16]
    5af0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5af4:	9303      	str	r3, [sp, #12]
    5af6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    5afa:	9302      	str	r3, [sp, #8]
    5afc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5b00:	9301      	str	r3, [sp, #4]
    5b02:	f854 3c20 	ldr.w	r3, [r4, #-32]
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5b0c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5b10:	f7ff ff70 	bl	59f4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5b14:	f854 3c30 	ldr.w	r3, [r4, #-48]
    5b18:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5b1a:	e7ce      	b.n	5aba <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5b1e:	1c5a      	adds	r2, r3, #1
    5b20:	d00d      	beq.n	5b3e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5b22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5b26:	2100      	movs	r1, #0
    5b28:	4638      	mov	r0, r7
    5b2a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5b2e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5b32:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5b36:	d104      	bne.n	5b42 <z_init_static_threads+0x92>
	z_sched_start(thread);
    5b38:	4640      	mov	r0, r8
    5b3a:	f000 fae9 	bl	6110 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5b3e:	3430      	adds	r4, #48	; 0x30
    5b40:	e7c9      	b.n	5ad6 <z_init_static_threads+0x26>
    5b42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5b46:	2300      	movs	r3, #0
    5b48:	f7fa fada 	bl	100 <__aeabi_uldivmod>
    5b4c:	4602      	mov	r2, r0
    5b4e:	460b      	mov	r3, r1
    5b50:	f108 0018 	add.w	r0, r8, #24
    5b54:	4649      	mov	r1, r9
    5b56:	f000 fceb 	bl	6530 <z_add_timeout>
    5b5a:	e7f0      	b.n	5b3e <z_init_static_threads+0x8e>
    5b5c:	00007c54 	.word	0x00007c54
    5b60:	00007c54 	.word	0x00007c54
    5b64:	0000783d 	.word	0x0000783d

00005b68 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5b68:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5b6a:	4c0b      	ldr	r4, [pc, #44]	; (5b98 <idle+0x30>)
	return !z_sys_post_kernel;
    5b6c:	4d0b      	ldr	r5, [pc, #44]	; (5b9c <idle+0x34>)
	__asm__ volatile(
    5b6e:	f04f 0220 	mov.w	r2, #32
    5b72:	f3ef 8311 	mrs	r3, BASEPRI
    5b76:	f382 8812 	msr	BASEPRI_MAX, r2
    5b7a:	f3bf 8f6f 	isb	sy
    5b7e:	f001 feff 	bl	7980 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5b82:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5b84:	61e0      	str	r0, [r4, #28]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5b86:	b913      	cbnz	r3, 5b8e <idle+0x26>
	arch_cpu_idle();
    5b88:	f7fc fa94 	bl	20b4 <arch_cpu_idle>
}
    5b8c:	e7ef      	b.n	5b6e <idle+0x6>
    5b8e:	f7fc f9bd 	bl	1f0c <pm_system_suspend>
    5b92:	2800      	cmp	r0, #0
    5b94:	d1eb      	bne.n	5b6e <idle+0x6>
    5b96:	e7f7      	b.n	5b88 <idle+0x20>
    5b98:	20000600 	.word	0x20000600
    5b9c:	20000a56 	.word	0x20000a56

00005ba0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5ba0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5ba4:	4604      	mov	r4, r0
    5ba6:	4617      	mov	r7, r2
    5ba8:	461e      	mov	r6, r3
    5baa:	f04f 0320 	mov.w	r3, #32
    5bae:	f3ef 8811 	mrs	r8, BASEPRI
    5bb2:	f383 8812 	msr	BASEPRI_MAX, r3
    5bb6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5bba:	68c3      	ldr	r3, [r0, #12]
    5bbc:	4a33      	ldr	r2, [pc, #204]	; (5c8c <z_impl_k_mutex_lock+0xec>)
    5bbe:	b17b      	cbz	r3, 5be0 <z_impl_k_mutex_lock+0x40>
    5bc0:	6880      	ldr	r0, [r0, #8]
    5bc2:	6891      	ldr	r1, [r2, #8]
    5bc4:	4288      	cmp	r0, r1
    5bc6:	d019      	beq.n	5bfc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5bc8:	ea57 0306 	orrs.w	r3, r7, r6
    5bcc:	d118      	bne.n	5c00 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5bce:	f388 8811 	msr	BASEPRI, r8
    5bd2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5bd6:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5bda:	b002      	add	sp, #8
    5bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5be0:	6891      	ldr	r1, [r2, #8]
    5be2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5be6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5be8:	3301      	adds	r3, #1
    5bea:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5bec:	6893      	ldr	r3, [r2, #8]
    5bee:	60a3      	str	r3, [r4, #8]
    5bf0:	f388 8811 	msr	BASEPRI, r8
    5bf4:	f3bf 8f6f 	isb	sy
		return 0;
    5bf8:	2000      	movs	r0, #0
    5bfa:	e7ee      	b.n	5bda <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    5bfc:	6921      	ldr	r1, [r4, #16]
    5bfe:	e7f2      	b.n	5be6 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5c00:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5c04:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    5c08:	4299      	cmp	r1, r3
    5c0a:	bfa8      	it	ge
    5c0c:	4619      	movge	r1, r3
    5c0e:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5c12:	4291      	cmp	r1, r2
    5c14:	bfb8      	it	lt
    5c16:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5c18:	428b      	cmp	r3, r1
    5c1a:	dd2e      	ble.n	5c7a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5c1c:	f001 fde1 	bl	77e2 <adjust_owner_prio.isra.0>
    5c20:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5c22:	e9cd 7600 	strd	r7, r6, [sp]
    5c26:	481a      	ldr	r0, [pc, #104]	; (5c90 <z_impl_k_mutex_lock+0xf0>)
    5c28:	4622      	mov	r2, r4
    5c2a:	4641      	mov	r1, r8
    5c2c:	f000 f9fa 	bl	6024 <z_pend_curr>
	if (got_mutex == 0) {
    5c30:	2800      	cmp	r0, #0
    5c32:	d0e1      	beq.n	5bf8 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    5c34:	f04f 0320 	mov.w	r3, #32
    5c38:	f3ef 8611 	mrs	r6, BASEPRI
    5c3c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c40:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    5c44:	68a0      	ldr	r0, [r4, #8]
    5c46:	b1d0      	cbz	r0, 5c7e <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5c48:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5c4a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c4c:	429c      	cmp	r4, r3
    5c4e:	d00a      	beq.n	5c66 <z_impl_k_mutex_lock+0xc6>
    5c50:	b14b      	cbz	r3, 5c66 <z_impl_k_mutex_lock+0xc6>
    5c52:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5c56:	4299      	cmp	r1, r3
    5c58:	bfa8      	it	ge
    5c5a:	4619      	movge	r1, r3
    5c5c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5c60:	4299      	cmp	r1, r3
    5c62:	bfb8      	it	lt
    5c64:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    5c66:	f001 fdbc 	bl	77e2 <adjust_owner_prio.isra.0>
    5c6a:	b140      	cbz	r0, 5c7e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5c6c:	4808      	ldr	r0, [pc, #32]	; (5c90 <z_impl_k_mutex_lock+0xf0>)
    5c6e:	4631      	mov	r1, r6
    5c70:	f000 fa3c 	bl	60ec <z_reschedule>
	return -EAGAIN;
    5c74:	f06f 000a 	mvn.w	r0, #10
    5c78:	e7af      	b.n	5bda <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    5c7a:	2500      	movs	r5, #0
    5c7c:	e7d1      	b.n	5c22 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    5c7e:	2d00      	cmp	r5, #0
    5c80:	d1f4      	bne.n	5c6c <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    5c82:	f386 8811 	msr	BASEPRI, r6
    5c86:	f3bf 8f6f 	isb	sy
    5c8a:	e7f3      	b.n	5c74 <z_impl_k_mutex_lock+0xd4>
    5c8c:	20000600 	.word	0x20000600
    5c90:	20000a57 	.word	0x20000a57

00005c94 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5c94:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5c96:	6883      	ldr	r3, [r0, #8]
{
    5c98:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5c9a:	b36b      	cbz	r3, 5cf8 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    5c9c:	4a19      	ldr	r2, [pc, #100]	; (5d04 <z_impl_k_mutex_unlock+0x70>)
    5c9e:	6892      	ldr	r2, [r2, #8]
    5ca0:	4293      	cmp	r3, r2
    5ca2:	d12c      	bne.n	5cfe <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5ca4:	68c3      	ldr	r3, [r0, #12]
    5ca6:	2b01      	cmp	r3, #1
    5ca8:	d903      	bls.n	5cb2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    5caa:	3b01      	subs	r3, #1
    5cac:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    5cae:	2000      	movs	r0, #0
}
    5cb0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    5cb2:	f04f 0320 	mov.w	r3, #32
    5cb6:	f3ef 8511 	mrs	r5, BASEPRI
    5cba:	f383 8812 	msr	BASEPRI_MAX, r3
    5cbe:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    5cc2:	6901      	ldr	r1, [r0, #16]
    5cc4:	6880      	ldr	r0, [r0, #8]
    5cc6:	f001 fd8c 	bl	77e2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5cca:	4620      	mov	r0, r4
    5ccc:	f001 fe10 	bl	78f0 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5cd0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    5cd2:	b158      	cbz	r0, 5cec <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    5cd4:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5cd8:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5cda:	2200      	movs	r2, #0
    5cdc:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5cde:	f001 fdf7 	bl	78d0 <z_ready_thread>
		z_reschedule(&lock, key);
    5ce2:	4809      	ldr	r0, [pc, #36]	; (5d08 <z_impl_k_mutex_unlock+0x74>)
    5ce4:	4629      	mov	r1, r5
    5ce6:	f000 fa01 	bl	60ec <z_reschedule>
    5cea:	e7e0      	b.n	5cae <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    5cec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5cee:	f385 8811 	msr	BASEPRI, r5
    5cf2:	f3bf 8f6f 	isb	sy
    5cf6:	e7da      	b.n	5cae <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    5cf8:	f06f 0015 	mvn.w	r0, #21
    5cfc:	e7d8      	b.n	5cb0 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    5cfe:	f04f 30ff 	mov.w	r0, #4294967295
    5d02:	e7d5      	b.n	5cb0 <z_impl_k_mutex_unlock+0x1c>
    5d04:	20000600 	.word	0x20000600
    5d08:	20000a57 	.word	0x20000a57

00005d0c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5d0c:	b538      	push	{r3, r4, r5, lr}
    5d0e:	4604      	mov	r4, r0
	__asm__ volatile(
    5d10:	f04f 0320 	mov.w	r3, #32
    5d14:	f3ef 8511 	mrs	r5, BASEPRI
    5d18:	f383 8812 	msr	BASEPRI_MAX, r3
    5d1c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5d20:	f001 fde6 	bl	78f0 <z_unpend_first_thread>

	if (thread != NULL) {
    5d24:	b148      	cbz	r0, 5d3a <z_impl_k_sem_give+0x2e>
    5d26:	2200      	movs	r2, #0
    5d28:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5d2a:	f001 fdd1 	bl	78d0 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    5d2e:	4629      	mov	r1, r5
    5d30:	4805      	ldr	r0, [pc, #20]	; (5d48 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5d36:	f000 b9d9 	b.w	60ec <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5d3a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    5d3e:	429a      	cmp	r2, r3
    5d40:	bf18      	it	ne
    5d42:	3301      	addne	r3, #1
    5d44:	60a3      	str	r3, [r4, #8]
}
    5d46:	e7f2      	b.n	5d2e <z_impl_k_sem_give+0x22>
    5d48:	20000a57 	.word	0x20000a57

00005d4c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5d4c:	b513      	push	{r0, r1, r4, lr}
    5d4e:	f04f 0420 	mov.w	r4, #32
    5d52:	f3ef 8111 	mrs	r1, BASEPRI
    5d56:	f384 8812 	msr	BASEPRI_MAX, r4
    5d5a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5d5e:	6884      	ldr	r4, [r0, #8]
    5d60:	b144      	cbz	r4, 5d74 <z_impl_k_sem_take+0x28>
		sem->count--;
    5d62:	3c01      	subs	r4, #1
    5d64:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5d66:	f381 8811 	msr	BASEPRI, r1
    5d6a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5d6e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5d70:	b002      	add	sp, #8
    5d72:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5d74:	ea52 0403 	orrs.w	r4, r2, r3
    5d78:	d106      	bne.n	5d88 <z_impl_k_sem_take+0x3c>
    5d7a:	f381 8811 	msr	BASEPRI, r1
    5d7e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5d82:	f06f 000f 	mvn.w	r0, #15
    5d86:	e7f3      	b.n	5d70 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5d88:	e9cd 2300 	strd	r2, r3, [sp]
    5d8c:	4602      	mov	r2, r0
    5d8e:	4802      	ldr	r0, [pc, #8]	; (5d98 <z_impl_k_sem_take+0x4c>)
    5d90:	f000 f948 	bl	6024 <z_pend_curr>
	return ret;
    5d94:	e7ec      	b.n	5d70 <z_impl_k_sem_take+0x24>
    5d96:	bf00      	nop
    5d98:	20000a57 	.word	0x20000a57

00005d9c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5d9c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5d9e:	4d07      	ldr	r5, [pc, #28]	; (5dbc <z_reset_time_slice+0x20>)
    5da0:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5da2:	b154      	cbz	r4, 5dba <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5da4:	f7fe fd46 	bl	4834 <sys_clock_elapsed>
    5da8:	4b05      	ldr	r3, [pc, #20]	; (5dc0 <z_reset_time_slice+0x24>)
    5daa:	4404      	add	r4, r0
    5dac:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5dae:	6828      	ldr	r0, [r5, #0]
    5db0:	2100      	movs	r1, #0
	}
}
    5db2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5db6:	f001 bdf3 	b.w	79a0 <z_set_timeout_expiry>
}
    5dba:	bd38      	pop	{r3, r4, r5, pc}
    5dbc:	20000638 	.word	0x20000638
    5dc0:	20000600 	.word	0x20000600

00005dc4 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    5dc4:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    5dc6:	4d0d      	ldr	r5, [pc, #52]	; (5dfc <update_cache+0x38>)
    5dc8:	462b      	mov	r3, r5
    5dca:	f853 4f24 	ldr.w	r4, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5dce:	429c      	cmp	r4, r3
    5dd0:	d000      	beq.n	5dd4 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5dd2:	b904      	cbnz	r4, 5dd6 <update_cache+0x12>
    5dd4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5dd6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5dd8:	b938      	cbnz	r0, 5dea <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    5dda:	7b5a      	ldrb	r2, [r3, #13]
    5ddc:	06d2      	lsls	r2, r2, #27
    5dde:	d104      	bne.n	5dea <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5de0:	69a2      	ldr	r2, [r4, #24]
    5de2:	b912      	cbnz	r2, 5dea <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    5de4:	89da      	ldrh	r2, [r3, #14]
    5de6:	2a7f      	cmp	r2, #127	; 0x7f
    5de8:	d805      	bhi.n	5df6 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    5dea:	429c      	cmp	r4, r3
    5dec:	d002      	beq.n	5df4 <update_cache+0x30>
			z_reset_time_slice(thread);
    5dee:	4620      	mov	r0, r4
    5df0:	f7ff ffd4 	bl	5d9c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    5df4:	4623      	mov	r3, r4
    5df6:	622b      	str	r3, [r5, #32]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    5df8:	bd38      	pop	{r3, r4, r5, pc}
    5dfa:	bf00      	nop
    5dfc:	20000600 	.word	0x20000600

00005e00 <move_thread_to_end_of_prio_q>:
{
    5e00:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5e02:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5e06:	7b43      	ldrb	r3, [r0, #13]
    5e08:	2a00      	cmp	r2, #0
{
    5e0a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5e0c:	da04      	bge.n	5e18 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e12:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5e14:	f001 fd00 	bl	7818 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5e18:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5e1a:	4a15      	ldr	r2, [pc, #84]	; (5e70 <move_thread_to_end_of_prio_q+0x70>)
    5e1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5e20:	4610      	mov	r0, r2
    5e22:	734b      	strb	r3, [r1, #13]
    5e24:	f850 3f24 	ldr.w	r3, [r0, #36]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5e28:	6a94      	ldr	r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e2a:	4283      	cmp	r3, r0
    5e2c:	bf08      	it	eq
    5e2e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e30:	b923      	cbnz	r3, 5e3c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    5e32:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    5e36:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5e38:	6291      	str	r1, [r2, #40]	; 0x28
}
    5e3a:	e00c      	b.n	5e56 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    5e3c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5e40:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5e44:	42b5      	cmp	r5, r6
    5e46:	d00e      	beq.n	5e66 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5e48:	42ae      	cmp	r6, r5
    5e4a:	dd0c      	ble.n	5e66 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5e4c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5e4e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5e52:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5e54:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5e56:	6890      	ldr	r0, [r2, #8]
    5e58:	1a43      	subs	r3, r0, r1
    5e5a:	4258      	negs	r0, r3
}
    5e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5e60:	4158      	adcs	r0, r3
    5e62:	f7ff bfaf 	b.w	5dc4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5e66:	429c      	cmp	r4, r3
    5e68:	d0e3      	beq.n	5e32 <move_thread_to_end_of_prio_q+0x32>
    5e6a:	681b      	ldr	r3, [r3, #0]
    5e6c:	e7e0      	b.n	5e30 <move_thread_to_end_of_prio_q+0x30>
    5e6e:	bf00      	nop
    5e70:	20000600 	.word	0x20000600

00005e74 <ready_thread>:
{
    5e74:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5e76:	f990 300d 	ldrsb.w	r3, [r0, #13]
    5e7a:	7b42      	ldrb	r2, [r0, #13]
    5e7c:	2b00      	cmp	r3, #0
    5e7e:	db29      	blt.n	5ed4 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5e80:	06d3      	lsls	r3, r2, #27
    5e82:	d127      	bne.n	5ed4 <ready_thread+0x60>
	return node->next != NULL;
    5e84:	6983      	ldr	r3, [r0, #24]
    5e86:	bb2b      	cbnz	r3, 5ed4 <ready_thread+0x60>
	return list->head == list;
    5e88:	4913      	ldr	r1, [pc, #76]	; (5ed8 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5e8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5e8e:	7342      	strb	r2, [r0, #13]
    5e90:	460a      	mov	r2, r1
    5e92:	f852 4f24 	ldr.w	r4, [r2, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e96:	4294      	cmp	r4, r2
    5e98:	bf18      	it	ne
    5e9a:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    5e9c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e9e:	b923      	cbnz	r3, 5eaa <ready_thread+0x36>
	node->prev = tail;
    5ea0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    5ea4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5ea6:	6288      	str	r0, [r1, #40]	; 0x28
}
    5ea8:	e00c      	b.n	5ec4 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    5eaa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5eae:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    5eb2:	42b5      	cmp	r5, r6
    5eb4:	d00a      	beq.n	5ecc <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    5eb6:	42ae      	cmp	r6, r5
    5eb8:	dd08      	ble.n	5ecc <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    5eba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5ebc:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5ec0:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5ec2:	6058      	str	r0, [r3, #4]
}
    5ec4:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5ec6:	2000      	movs	r0, #0
    5ec8:	f7ff bf7c 	b.w	5dc4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5ecc:	42a3      	cmp	r3, r4
    5ece:	d0e7      	beq.n	5ea0 <ready_thread+0x2c>
    5ed0:	681b      	ldr	r3, [r3, #0]
    5ed2:	e7e4      	b.n	5e9e <ready_thread+0x2a>
}
    5ed4:	bc70      	pop	{r4, r5, r6}
    5ed6:	4770      	bx	lr
    5ed8:	20000600 	.word	0x20000600

00005edc <unready_thread>:
{
    5edc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5ede:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5ee2:	7b43      	ldrb	r3, [r0, #13]
    5ee4:	2a00      	cmp	r2, #0
{
    5ee6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5ee8:	da04      	bge.n	5ef4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5eee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ef0:	f001 fc92 	bl	7818 <sys_dlist_remove>
	update_cache(thread == _current);
    5ef4:	4b04      	ldr	r3, [pc, #16]	; (5f08 <unready_thread+0x2c>)
    5ef6:	6898      	ldr	r0, [r3, #8]
    5ef8:	1a43      	subs	r3, r0, r1
    5efa:	4258      	negs	r0, r3
    5efc:	4158      	adcs	r0, r3
}
    5efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5f02:	f7ff bf5f 	b.w	5dc4 <update_cache>
    5f06:	bf00      	nop
    5f08:	20000600 	.word	0x20000600

00005f0c <pend_locked>:
{
    5f0c:	b570      	push	{r4, r5, r6, lr}
    5f0e:	4615      	mov	r5, r2
    5f10:	461c      	mov	r4, r3
    5f12:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    5f14:	f001 fcb4 	bl	7880 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5f18:	f1b4 3fff 	cmp.w	r4, #4294967295
    5f1c:	bf08      	it	eq
    5f1e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5f22:	d008      	beq.n	5f36 <pend_locked+0x2a>
    5f24:	462a      	mov	r2, r5
    5f26:	4623      	mov	r3, r4
    5f28:	f106 0018 	add.w	r0, r6, #24
    5f2c:	4902      	ldr	r1, [pc, #8]	; (5f38 <pend_locked+0x2c>)
}
    5f2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5f32:	f000 bafd 	b.w	6530 <z_add_timeout>
    5f36:	bd70      	pop	{r4, r5, r6, pc}
    5f38:	0000783d 	.word	0x0000783d

00005f3c <k_sched_time_slice_set>:
{
    5f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5f3e:	4604      	mov	r4, r0
    5f40:	460d      	mov	r5, r1
	__asm__ volatile(
    5f42:	f04f 0320 	mov.w	r3, #32
    5f46:	f3ef 8711 	mrs	r7, BASEPRI
    5f4a:	f383 8812 	msr	BASEPRI_MAX, r3
    5f4e:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    5f52:	2600      	movs	r6, #0
    5f54:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5f58:	f240 30e7 	movw	r0, #999	; 0x3e7
    5f5c:	4631      	mov	r1, r6
    5f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5f62:	2300      	movs	r3, #0
    5f64:	fbe4 010c 	umlal	r0, r1, r4, ip
    5f68:	f7fa f8ca 	bl	100 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5f6c:	42b4      	cmp	r4, r6
    5f6e:	dd02      	ble.n	5f76 <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    5f70:	2802      	cmp	r0, #2
    5f72:	bfb8      	it	lt
    5f74:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5f76:	4a07      	ldr	r2, [pc, #28]	; (5f94 <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    5f78:	4b07      	ldr	r3, [pc, #28]	; (5f98 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    5f7a:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    5f7c:	4a07      	ldr	r2, [pc, #28]	; (5f9c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5f7e:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    5f80:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    5f82:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    5f84:	f7ff ff0a 	bl	5d9c <z_reset_time_slice>
	__asm__ volatile(
    5f88:	f387 8811 	msr	BASEPRI, r7
    5f8c:	f3bf 8f6f 	isb	sy
}
    5f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5f92:	bf00      	nop
    5f94:	20000638 	.word	0x20000638
    5f98:	20000600 	.word	0x20000600
    5f9c:	20000634 	.word	0x20000634

00005fa0 <z_time_slice>:
{
    5fa0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5fa2:	f04f 0320 	mov.w	r3, #32
    5fa6:	f3ef 8511 	mrs	r5, BASEPRI
    5faa:	f383 8812 	msr	BASEPRI_MAX, r3
    5fae:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5fb2:	4b17      	ldr	r3, [pc, #92]	; (6010 <z_time_slice+0x70>)
    5fb4:	4a17      	ldr	r2, [pc, #92]	; (6014 <z_time_slice+0x74>)
    5fb6:	689c      	ldr	r4, [r3, #8]
    5fb8:	6811      	ldr	r1, [r2, #0]
    5fba:	428c      	cmp	r4, r1
    5fbc:	d107      	bne.n	5fce <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5fbe:	4620      	mov	r0, r4
    5fc0:	f7ff feec 	bl	5d9c <z_reset_time_slice>
	__asm__ volatile(
    5fc4:	f385 8811 	msr	BASEPRI, r5
    5fc8:	f3bf 8f6f 	isb	sy
}
    5fcc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5fce:	2100      	movs	r1, #0
    5fd0:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5fd2:	4a11      	ldr	r2, [pc, #68]	; (6018 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5fd4:	6812      	ldr	r2, [r2, #0]
    5fd6:	b1c2      	cbz	r2, 600a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5fd8:	89e2      	ldrh	r2, [r4, #14]
    5fda:	2a7f      	cmp	r2, #127	; 0x7f
    5fdc:	d815      	bhi.n	600a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5fde:	7b62      	ldrb	r2, [r4, #13]
    5fe0:	06d2      	lsls	r2, r2, #27
    5fe2:	d112      	bne.n	600a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5fe4:	4a0d      	ldr	r2, [pc, #52]	; (601c <z_time_slice+0x7c>)
    5fe6:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5fea:	6812      	ldr	r2, [r2, #0]
    5fec:	4291      	cmp	r1, r2
    5fee:	db0c      	blt.n	600a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5ff0:	4a0b      	ldr	r2, [pc, #44]	; (6020 <z_time_slice+0x80>)
    5ff2:	4294      	cmp	r4, r2
    5ff4:	d009      	beq.n	600a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5ff6:	691a      	ldr	r2, [r3, #16]
    5ff8:	4282      	cmp	r2, r0
    5ffa:	dc03      	bgt.n	6004 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5ffc:	4620      	mov	r0, r4
    5ffe:	f7ff feff 	bl	5e00 <move_thread_to_end_of_prio_q>
    6002:	e7dc      	b.n	5fbe <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    6004:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    6006:	611a      	str	r2, [r3, #16]
    6008:	e7dc      	b.n	5fc4 <z_time_slice+0x24>
    600a:	2200      	movs	r2, #0
    600c:	e7fb      	b.n	6006 <z_time_slice+0x66>
    600e:	bf00      	nop
    6010:	20000600 	.word	0x20000600
    6014:	20000630 	.word	0x20000630
    6018:	20000638 	.word	0x20000638
    601c:	20000634 	.word	0x20000634
    6020:	200002b8 	.word	0x200002b8

00006024 <z_pend_curr>:
{
    6024:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    6026:	480c      	ldr	r0, [pc, #48]	; (6058 <z_pend_curr+0x34>)
    6028:	4d0c      	ldr	r5, [pc, #48]	; (605c <z_pend_curr+0x38>)
    602a:	6886      	ldr	r6, [r0, #8]
    602c:	602e      	str	r6, [r5, #0]
{
    602e:	460c      	mov	r4, r1
    6030:	4611      	mov	r1, r2
    6032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    6036:	f04f 0620 	mov.w	r6, #32
    603a:	f3ef 8511 	mrs	r5, BASEPRI
    603e:	f386 8812 	msr	BASEPRI_MAX, r6
    6042:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    6046:	6880      	ldr	r0, [r0, #8]
    6048:	f7ff ff60 	bl	5f0c <pend_locked>
	ret = arch_swap(key);
    604c:	4620      	mov	r0, r4
}
    604e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6052:	f7fc b957 	b.w	2304 <arch_swap>
    6056:	bf00      	nop
    6058:	20000600 	.word	0x20000600
    605c:	20000630 	.word	0x20000630

00006060 <z_set_prio>:
{
    6060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6062:	4604      	mov	r4, r0
    6064:	f04f 0320 	mov.w	r3, #32
    6068:	f3ef 8611 	mrs	r6, BASEPRI
    606c:	f383 8812 	msr	BASEPRI_MAX, r3
    6070:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    6074:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6076:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    6078:	b249      	sxtb	r1, r1
    607a:	d119      	bne.n	60b0 <z_set_prio+0x50>
	return node->next != NULL;
    607c:	6985      	ldr	r5, [r0, #24]
    607e:	b9bd      	cbnz	r5, 60b0 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6084:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6086:	f001 fbc7 	bl	7818 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    608a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    608c:	4a16      	ldr	r2, [pc, #88]	; (60e8 <z_set_prio+0x88>)
				thread->base.prio = prio;
    608e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6090:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6094:	7343      	strb	r3, [r0, #13]
    6096:	4613      	mov	r3, r2
    6098:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    609c:	4298      	cmp	r0, r3
    609e:	bf18      	it	ne
    60a0:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    60a2:	6a90      	ldr	r0, [r2, #40]	; 0x28
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    60a4:	b95d      	cbnz	r5, 60be <z_set_prio+0x5e>
	node->prev = tail;
    60a6:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    60aa:	6004      	str	r4, [r0, #0]
	list->tail = node;
    60ac:	6294      	str	r4, [r2, #40]	; 0x28
}
    60ae:	e011      	b.n	60d4 <z_set_prio+0x74>
			thread->base.prio = prio;
    60b0:	73a1      	strb	r1, [r4, #14]
    60b2:	2000      	movs	r0, #0
	__asm__ volatile(
    60b4:	f386 8811 	msr	BASEPRI, r6
    60b8:	f3bf 8f6f 	isb	sy
}
    60bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    60be:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    60c2:	42b9      	cmp	r1, r7
    60c4:	d00b      	beq.n	60de <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    60c6:	428f      	cmp	r7, r1
    60c8:	dd09      	ble.n	60de <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    60ca:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    60cc:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    60d0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    60d2:	606c      	str	r4, [r5, #4]
			update_cache(1);
    60d4:	2001      	movs	r0, #1
    60d6:	f7ff fe75 	bl	5dc4 <update_cache>
    60da:	2001      	movs	r0, #1
    60dc:	e7ea      	b.n	60b4 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    60de:	42a8      	cmp	r0, r5
    60e0:	d0e1      	beq.n	60a6 <z_set_prio+0x46>
    60e2:	682d      	ldr	r5, [r5, #0]
    60e4:	e7de      	b.n	60a4 <z_set_prio+0x44>
    60e6:	bf00      	nop
    60e8:	20000600 	.word	0x20000600

000060ec <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    60ec:	b949      	cbnz	r1, 6102 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    60ee:	f3ef 8005 	mrs	r0, IPSR
    60f2:	b930      	cbnz	r0, 6102 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    60f4:	4b05      	ldr	r3, [pc, #20]	; (610c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    60f6:	6a1a      	ldr	r2, [r3, #32]
    60f8:	689b      	ldr	r3, [r3, #8]
    60fa:	429a      	cmp	r2, r3
    60fc:	d001      	beq.n	6102 <z_reschedule+0x16>
    60fe:	f7fc b901 	b.w	2304 <arch_swap>
    6102:	f381 8811 	msr	BASEPRI, r1
    6106:	f3bf 8f6f 	isb	sy
}
    610a:	4770      	bx	lr
    610c:	20000600 	.word	0x20000600

00006110 <z_sched_start>:
{
    6110:	b510      	push	{r4, lr}
	__asm__ volatile(
    6112:	f04f 0220 	mov.w	r2, #32
    6116:	f3ef 8411 	mrs	r4, BASEPRI
    611a:	f382 8812 	msr	BASEPRI_MAX, r2
    611e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6122:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    6124:	0751      	lsls	r1, r2, #29
    6126:	d404      	bmi.n	6132 <z_sched_start+0x22>
	__asm__ volatile(
    6128:	f384 8811 	msr	BASEPRI, r4
    612c:	f3bf 8f6f 	isb	sy
}
    6130:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6132:	f022 0204 	bic.w	r2, r2, #4
    6136:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    6138:	f7ff fe9c 	bl	5e74 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    613c:	4621      	mov	r1, r4
    613e:	4802      	ldr	r0, [pc, #8]	; (6148 <z_sched_start+0x38>)
}
    6140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6144:	f7ff bfd2 	b.w	60ec <z_reschedule>
    6148:	20000a57 	.word	0x20000a57

0000614c <z_impl_k_thread_suspend>:
{
    614c:	b570      	push	{r4, r5, r6, lr}
    614e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6150:	3018      	adds	r0, #24
    6152:	f001 fbff 	bl	7954 <z_abort_timeout>
	__asm__ volatile(
    6156:	f04f 0320 	mov.w	r3, #32
    615a:	f3ef 8611 	mrs	r6, BASEPRI
    615e:	f383 8812 	msr	BASEPRI_MAX, r3
    6162:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6166:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    616a:	7b63      	ldrb	r3, [r4, #13]
    616c:	2a00      	cmp	r2, #0
    616e:	da05      	bge.n	617c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6170:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6174:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6176:	4620      	mov	r0, r4
    6178:	f001 fb4e 	bl	7818 <sys_dlist_remove>
		update_cache(thread == _current);
    617c:	4d0b      	ldr	r5, [pc, #44]	; (61ac <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    617e:	7b63      	ldrb	r3, [r4, #13]
    6180:	68a8      	ldr	r0, [r5, #8]
    6182:	f043 0310 	orr.w	r3, r3, #16
    6186:	7363      	strb	r3, [r4, #13]
    6188:	1b03      	subs	r3, r0, r4
    618a:	4258      	negs	r0, r3
    618c:	4158      	adcs	r0, r3
    618e:	f7ff fe19 	bl	5dc4 <update_cache>
	__asm__ volatile(
    6192:	f386 8811 	msr	BASEPRI, r6
    6196:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    619a:	68ab      	ldr	r3, [r5, #8]
    619c:	42a3      	cmp	r3, r4
    619e:	d103      	bne.n	61a8 <z_impl_k_thread_suspend+0x5c>
}
    61a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    61a4:	f001 bbcc 	b.w	7940 <z_reschedule_unlocked>
}
    61a8:	bd70      	pop	{r4, r5, r6, pc}
    61aa:	bf00      	nop
    61ac:	20000600 	.word	0x20000600

000061b0 <k_sched_lock>:
	__asm__ volatile(
    61b0:	f04f 0320 	mov.w	r3, #32
    61b4:	f3ef 8111 	mrs	r1, BASEPRI
    61b8:	f383 8812 	msr	BASEPRI_MAX, r3
    61bc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    61c0:	4b04      	ldr	r3, [pc, #16]	; (61d4 <k_sched_lock+0x24>)
    61c2:	689a      	ldr	r2, [r3, #8]
    61c4:	7bd3      	ldrb	r3, [r2, #15]
    61c6:	3b01      	subs	r3, #1
    61c8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    61ca:	f381 8811 	msr	BASEPRI, r1
    61ce:	f3bf 8f6f 	isb	sy
}
    61d2:	4770      	bx	lr
    61d4:	20000600 	.word	0x20000600

000061d8 <k_sched_unlock>:
{
    61d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    61da:	f04f 0320 	mov.w	r3, #32
    61de:	f3ef 8411 	mrs	r4, BASEPRI
    61e2:	f383 8812 	msr	BASEPRI_MAX, r3
    61e6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    61ea:	4b08      	ldr	r3, [pc, #32]	; (620c <k_sched_unlock+0x34>)
    61ec:	689a      	ldr	r2, [r3, #8]
    61ee:	7bd3      	ldrb	r3, [r2, #15]
    61f0:	3301      	adds	r3, #1
    61f2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    61f4:	2000      	movs	r0, #0
    61f6:	f7ff fde5 	bl	5dc4 <update_cache>
	__asm__ volatile(
    61fa:	f384 8811 	msr	BASEPRI, r4
    61fe:	f3bf 8f6f 	isb	sy
}
    6202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6206:	f001 bb9b 	b.w	7940 <z_reschedule_unlocked>
    620a:	bf00      	nop
    620c:	20000600 	.word	0x20000600

00006210 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6210:	4b04      	ldr	r3, [pc, #16]	; (6224 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6212:	2100      	movs	r1, #0
    6214:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
    6218:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
    621c:	4608      	mov	r0, r1
    621e:	f7ff be8d 	b.w	5f3c <k_sched_time_slice_set>
    6222:	bf00      	nop
    6224:	20000600 	.word	0x20000600

00006228 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    6228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    622a:	f04f 0320 	mov.w	r3, #32
    622e:	f3ef 8511 	mrs	r5, BASEPRI
    6232:	f383 8812 	msr	BASEPRI_MAX, r3
    6236:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    623a:	4919      	ldr	r1, [pc, #100]	; (62a0 <z_impl_k_yield+0x78>)
    623c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    623e:	7b43      	ldrb	r3, [r0, #13]
    6240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6244:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6246:	f001 fae7 	bl	7818 <sys_dlist_remove>
	}
	queue_thread(_current);
    624a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    624c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    624e:	4608      	mov	r0, r1
    6250:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6254:	735a      	strb	r2, [r3, #13]
    6256:	f850 2f24 	ldr.w	r2, [r0, #36]!
	return (node == list->tail) ? NULL : node->next;
    625a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    625c:	4282      	cmp	r2, r0
    625e:	bf08      	it	eq
    6260:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6262:	b922      	cbnz	r2, 626e <z_impl_k_yield+0x46>
	node->prev = tail;
    6264:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    6268:	6023      	str	r3, [r4, #0]
	list->tail = node;
    626a:	628b      	str	r3, [r1, #40]	; 0x28
}
    626c:	e00c      	b.n	6288 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    626e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6272:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    6276:	42be      	cmp	r6, r7
    6278:	d00e      	beq.n	6298 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    627a:	42b7      	cmp	r7, r6
    627c:	dd0c      	ble.n	6298 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    627e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6280:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6284:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6286:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6288:	2001      	movs	r0, #1
    628a:	f7ff fd9b 	bl	5dc4 <update_cache>
    628e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6294:	f7fc b836 	b.w	2304 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6298:	42a2      	cmp	r2, r4
    629a:	d0e3      	beq.n	6264 <z_impl_k_yield+0x3c>
    629c:	6812      	ldr	r2, [r2, #0]
    629e:	e7e0      	b.n	6262 <z_impl_k_yield+0x3a>
    62a0:	20000600 	.word	0x20000600

000062a4 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    62a4:	ea50 0301 	orrs.w	r3, r0, r1
{
    62a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62ac:	4605      	mov	r5, r0
    62ae:	460e      	mov	r6, r1
	if (ticks == 0) {
    62b0:	d103      	bne.n	62ba <z_tick_sleep+0x16>
	z_impl_k_yield();
    62b2:	f7ff ffb9 	bl	6228 <z_impl_k_yield>
		k_yield();
		return 0;
    62b6:	2000      	movs	r0, #0
    62b8:	e02c      	b.n	6314 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    62ba:	1c83      	adds	r3, r0, #2
    62bc:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    62c0:	db2a      	blt.n	6318 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    62c2:	f001 fb89 	bl	79d8 <sys_clock_tick_get_32>
    62c6:	182c      	adds	r4, r5, r0
    62c8:	f04f 0320 	mov.w	r3, #32
    62cc:	f3ef 8811 	mrs	r8, BASEPRI
    62d0:	f383 8812 	msr	BASEPRI_MAX, r3
    62d4:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    62d8:	4f11      	ldr	r7, [pc, #68]	; (6320 <z_tick_sleep+0x7c>)
    62da:	4b12      	ldr	r3, [pc, #72]	; (6324 <z_tick_sleep+0x80>)
    62dc:	68b8      	ldr	r0, [r7, #8]
    62de:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    62e0:	f7ff fdfc 	bl	5edc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    62e4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    62e6:	4910      	ldr	r1, [pc, #64]	; (6328 <z_tick_sleep+0x84>)
    62e8:	462a      	mov	r2, r5
    62ea:	4633      	mov	r3, r6
    62ec:	3018      	adds	r0, #24
    62ee:	f000 f91f 	bl	6530 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    62f2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    62f4:	7b53      	ldrb	r3, [r2, #13]
    62f6:	f043 0310 	orr.w	r3, r3, #16
    62fa:	7353      	strb	r3, [r2, #13]
    62fc:	4640      	mov	r0, r8
    62fe:	f7fc f801 	bl	2304 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6302:	f001 fb69 	bl	79d8 <sys_clock_tick_get_32>
    6306:	1a20      	subs	r0, r4, r0
    6308:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    630c:	2801      	cmp	r0, #1
    630e:	f173 0300 	sbcs.w	r3, r3, #0
    6312:	dbd0      	blt.n	62b6 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    6314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    6318:	f06f 0401 	mvn.w	r4, #1
    631c:	1a24      	subs	r4, r4, r0
    631e:	e7d3      	b.n	62c8 <z_tick_sleep+0x24>
    6320:	20000600 	.word	0x20000600
    6324:	20000630 	.word	0x20000630
    6328:	0000783d 	.word	0x0000783d

0000632c <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    632c:	f1b1 3fff 	cmp.w	r1, #4294967295
    6330:	bf08      	it	eq
    6332:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6336:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6338:	d106      	bne.n	6348 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    633a:	4b08      	ldr	r3, [pc, #32]	; (635c <z_impl_k_sleep+0x30>)
    633c:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    633e:	f7ff ff05 	bl	614c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6342:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6346:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6348:	f7ff ffac 	bl	62a4 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    634c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6350:	fb80 0303 	smull	r0, r3, r0, r3
    6354:	0bc0      	lsrs	r0, r0, #15
    6356:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    635a:	e7f4      	b.n	6346 <z_impl_k_sleep+0x1a>
    635c:	20000600 	.word	0x20000600

00006360 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    6360:	b538      	push	{r3, r4, r5, lr}
    6362:	4c0a      	ldr	r4, [pc, #40]	; (638c <z_impl_k_usleep+0x2c>)
    6364:	4a0a      	ldr	r2, [pc, #40]	; (6390 <z_impl_k_usleep+0x30>)
    6366:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    636a:	2100      	movs	r1, #0
    636c:	fbc0 4105 	smlal	r4, r1, r0, r5
    6370:	2300      	movs	r3, #0
    6372:	4620      	mov	r0, r4
    6374:	f7f9 fec4 	bl	100 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    6378:	17c1      	asrs	r1, r0, #31
    637a:	f7ff ff93 	bl	62a4 <z_tick_sleep>
    637e:	4b04      	ldr	r3, [pc, #16]	; (6390 <z_impl_k_usleep+0x30>)
    6380:	fb80 0303 	smull	r0, r3, r0, r3
    6384:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    6386:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    638a:	bd38      	pop	{r3, r4, r5, pc}
    638c:	000f423f 	.word	0x000f423f
    6390:	000f4240 	.word	0x000f4240

00006394 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6394:	4b01      	ldr	r3, [pc, #4]	; (639c <z_impl_z_current_get+0x8>)
    6396:	6898      	ldr	r0, [r3, #8]
    6398:	4770      	bx	lr
    639a:	bf00      	nop
    639c:	20000600 	.word	0x20000600

000063a0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    63a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63a4:	4604      	mov	r4, r0
    63a6:	f04f 0320 	mov.w	r3, #32
    63aa:	f3ef 8611 	mrs	r6, BASEPRI
    63ae:	f383 8812 	msr	BASEPRI_MAX, r3
    63b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    63b6:	7b03      	ldrb	r3, [r0, #12]
    63b8:	07d9      	lsls	r1, r3, #31
    63ba:	d50b      	bpl.n	63d4 <z_thread_abort+0x34>
	__asm__ volatile(
    63bc:	f386 8811 	msr	BASEPRI, r6
    63c0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    63c4:	4040      	eors	r0, r0
    63c6:	f380 8811 	msr	BASEPRI, r0
    63ca:	f04f 0004 	mov.w	r0, #4
    63ce:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    63d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    63d4:	7b43      	ldrb	r3, [r0, #13]
    63d6:	071a      	lsls	r2, r3, #28
    63d8:	d504      	bpl.n	63e4 <z_thread_abort+0x44>
    63da:	f386 8811 	msr	BASEPRI, r6
    63de:	f3bf 8f6f 	isb	sy
    63e2:	e7f5      	b.n	63d0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    63e4:	f023 0220 	bic.w	r2, r3, #32
    63e8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    63ec:	09d2      	lsrs	r2, r2, #7
    63ee:	d120      	bne.n	6432 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    63f0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    63f2:	68a3      	ldr	r3, [r4, #8]
    63f4:	b113      	cbz	r3, 63fc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    63f6:	4620      	mov	r0, r4
    63f8:	f001 fa16 	bl	7828 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    63fc:	f104 0018 	add.w	r0, r4, #24
    6400:	f001 faa8 	bl	7954 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6404:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6408:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    640c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    640e:	42bd      	cmp	r5, r7
    6410:	d000      	beq.n	6414 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6412:	b9b5      	cbnz	r5, 6442 <z_thread_abort+0xa2>
		update_cache(1);
    6414:	2001      	movs	r0, #1
    6416:	f7ff fcd5 	bl	5dc4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    641a:	4b10      	ldr	r3, [pc, #64]	; (645c <z_thread_abort+0xbc>)
    641c:	689b      	ldr	r3, [r3, #8]
    641e:	42a3      	cmp	r3, r4
    6420:	d1db      	bne.n	63da <z_thread_abort+0x3a>
    6422:	f3ef 8305 	mrs	r3, IPSR
    6426:	2b00      	cmp	r3, #0
    6428:	d1d7      	bne.n	63da <z_thread_abort+0x3a>
    642a:	4630      	mov	r0, r6
    642c:	f7fb ff6a 	bl	2304 <arch_swap>
	return ret;
    6430:	e7d3      	b.n	63da <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6432:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6436:	f043 0308 	orr.w	r3, r3, #8
    643a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    643c:	f001 f9ec 	bl	7818 <sys_dlist_remove>
}
    6440:	e7d7      	b.n	63f2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    6442:	4628      	mov	r0, r5
    6444:	f001 f9f0 	bl	7828 <unpend_thread_no_timeout>
    6448:	f105 0018 	add.w	r0, r5, #24
    644c:	f001 fa82 	bl	7954 <z_abort_timeout>
    6450:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6454:	4628      	mov	r0, r5
    6456:	f7ff fd0d 	bl	5e74 <ready_thread>
    645a:	e7d7      	b.n	640c <z_thread_abort+0x6c>
    645c:	20000600 	.word	0x20000600

00006460 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6460:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6462:	4806      	ldr	r0, [pc, #24]	; (647c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6464:	4a06      	ldr	r2, [pc, #24]	; (6480 <z_data_copy+0x20>)
    6466:	4907      	ldr	r1, [pc, #28]	; (6484 <z_data_copy+0x24>)
    6468:	1a12      	subs	r2, r2, r0
    646a:	f001 f9a9 	bl	77c0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    646e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6472:	4a05      	ldr	r2, [pc, #20]	; (6488 <z_data_copy+0x28>)
    6474:	4905      	ldr	r1, [pc, #20]	; (648c <z_data_copy+0x2c>)
    6476:	4806      	ldr	r0, [pc, #24]	; (6490 <z_data_copy+0x30>)
    6478:	f001 b9a2 	b.w	77c0 <z_early_memcpy>
    647c:	20000000 	.word	0x20000000
    6480:	20000294 	.word	0x20000294
    6484:	00008af4 	.word	0x00008af4
    6488:	00000000 	.word	0x00000000
    648c:	00008af4 	.word	0x00008af4
    6490:	20000000 	.word	0x20000000

00006494 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6494:	4b03      	ldr	r3, [pc, #12]	; (64a4 <elapsed+0x10>)
    6496:	681b      	ldr	r3, [r3, #0]
    6498:	b90b      	cbnz	r3, 649e <elapsed+0xa>
    649a:	f7fe b9cb 	b.w	4834 <sys_clock_elapsed>
}
    649e:	2000      	movs	r0, #0
    64a0:	4770      	bx	lr
    64a2:	bf00      	nop
    64a4:	2000063c 	.word	0x2000063c

000064a8 <next_timeout>:

static int32_t next_timeout(void)
{
    64a8:	b510      	push	{r4, lr}
	return list->head == list;
    64aa:	4b11      	ldr	r3, [pc, #68]	; (64f0 <next_timeout+0x48>)
    64ac:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    64ae:	429c      	cmp	r4, r3
    64b0:	d10a      	bne.n	64c8 <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    64b2:	f7ff ffef 	bl	6494 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    64b6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    64ba:	4b0e      	ldr	r3, [pc, #56]	; (64f4 <next_timeout+0x4c>)
    64bc:	691b      	ldr	r3, [r3, #16]
    64be:	b113      	cbz	r3, 64c6 <next_timeout+0x1e>
    64c0:	4298      	cmp	r0, r3
    64c2:	bfa8      	it	ge
    64c4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    64c6:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    64c8:	f7ff ffe4 	bl	6494 <elapsed>
	if ((to == NULL) ||
    64cc:	2c00      	cmp	r4, #0
    64ce:	d0f2      	beq.n	64b6 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    64d0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    64d4:	1a1b      	subs	r3, r3, r0
    64d6:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    64da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    64de:	f172 0100 	sbcs.w	r1, r2, #0
    64e2:	dae8      	bge.n	64b6 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    64e4:	2a00      	cmp	r2, #0
    64e6:	bfac      	ite	ge
    64e8:	4618      	movge	r0, r3
    64ea:	2000      	movlt	r0, #0
    64ec:	e7e5      	b.n	64ba <next_timeout+0x12>
    64ee:	bf00      	nop
    64f0:	20000268 	.word	0x20000268
    64f4:	20000600 	.word	0x20000600

000064f8 <remove_timeout>:
{
    64f8:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    64fa:	b170      	cbz	r0, 651a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    64fc:	4b0b      	ldr	r3, [pc, #44]	; (652c <remove_timeout+0x34>)
    64fe:	685b      	ldr	r3, [r3, #4]
    6500:	4298      	cmp	r0, r3
    6502:	d00a      	beq.n	651a <remove_timeout+0x22>
    6504:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    6506:	b143      	cbz	r3, 651a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6508:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    650c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6510:	1912      	adds	r2, r2, r4
    6512:	eb41 0105 	adc.w	r1, r1, r5
    6516:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    651a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    651e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6520:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6522:	2300      	movs	r3, #0
	node->prev = NULL;
    6524:	e9c0 3300 	strd	r3, r3, [r0]
}
    6528:	bd30      	pop	{r4, r5, pc}
    652a:	bf00      	nop
    652c:	20000268 	.word	0x20000268

00006530 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6530:	f1b3 3fff 	cmp.w	r3, #4294967295
    6534:	bf08      	it	eq
    6536:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    653a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    653c:	4604      	mov	r4, r0
    653e:	461d      	mov	r5, r3
    6540:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6542:	d061      	beq.n	6608 <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6544:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6546:	f04f 0320 	mov.w	r3, #32
    654a:	f3ef 8711 	mrs	r7, BASEPRI
    654e:	f383 8812 	msr	BASEPRI_MAX, r3
    6552:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6556:	3201      	adds	r2, #1
    6558:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    655c:	da24      	bge.n	65a8 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    655e:	4930      	ldr	r1, [pc, #192]	; (6620 <z_add_timeout+0xf0>)
    6560:	e9d1 2000 	ldrd	r2, r0, [r1]
    6564:	f06f 0301 	mvn.w	r3, #1
    6568:	1a9b      	subs	r3, r3, r2
    656a:	f04f 32ff 	mov.w	r2, #4294967295
    656e:	eb62 0000 	sbc.w	r0, r2, r0
    6572:	1b9e      	subs	r6, r3, r6
    6574:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    6578:	2e01      	cmp	r6, #1
    657a:	f170 0300 	sbcs.w	r3, r0, #0
    657e:	da01      	bge.n	6584 <z_add_timeout+0x54>
    6580:	2601      	movs	r6, #1
    6582:	2000      	movs	r0, #0
    6584:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    6588:	4e26      	ldr	r6, [pc, #152]	; (6624 <z_add_timeout+0xf4>)
    658a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    658e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6590:	45b4      	cmp	ip, r6
    6592:	bf08      	it	eq
    6594:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    6598:	f1bc 0f00 	cmp.w	ip, #0
    659c:	d10d      	bne.n	65ba <z_add_timeout+0x8a>
	node->prev = tail;
    659e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    65a2:	602c      	str	r4, [r5, #0]
	list->tail = node;
    65a4:	6074      	str	r4, [r6, #4]
}
    65a6:	e01c      	b.n	65e2 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    65a8:	f7ff ff74 	bl	6494 <elapsed>
    65ac:	3601      	adds	r6, #1
    65ae:	f145 0500 	adc.w	r5, r5, #0
    65b2:	1836      	adds	r6, r6, r0
    65b4:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    65b8:	e7e4      	b.n	6584 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    65ba:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    65be:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    65c2:	4293      	cmp	r3, r2
    65c4:	eb71 0e00 	sbcs.w	lr, r1, r0
    65c8:	da1f      	bge.n	660a <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    65ca:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    65cc:	f8dc 3004 	ldr.w	r3, [ip, #4]
    65d0:	eb60 0001 	sbc.w	r0, r0, r1
    65d4:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    65d8:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    65dc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    65de:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    65e2:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    65e4:	42b3      	cmp	r3, r6
    65e6:	d00b      	beq.n	6600 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    65e8:	429c      	cmp	r4, r3
    65ea:	d109      	bne.n	6600 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    65ec:	f7ff ff5c 	bl	64a8 <next_timeout>

			if (next_time == 0 ||
    65f0:	b118      	cbz	r0, 65fa <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    65f2:	4b0d      	ldr	r3, [pc, #52]	; (6628 <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    65f4:	691b      	ldr	r3, [r3, #16]
    65f6:	4283      	cmp	r3, r0
    65f8:	d002      	beq.n	6600 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    65fa:	2100      	movs	r1, #0
    65fc:	f7fe f8e8 	bl	47d0 <sys_clock_set_timeout>
	__asm__ volatile(
    6600:	f387 8811 	msr	BASEPRI, r7
    6604:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    660a:	1a9b      	subs	r3, r3, r2
    660c:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    6610:	45ac      	cmp	ip, r5
    6612:	e9c4 3104 	strd	r3, r1, [r4, #16]
    6616:	d0c2      	beq.n	659e <z_add_timeout+0x6e>
    6618:	f8dc c000 	ldr.w	ip, [ip]
    661c:	e7bc      	b.n	6598 <z_add_timeout+0x68>
    661e:	bf00      	nop
    6620:	20000438 	.word	0x20000438
    6624:	20000268 	.word	0x20000268
    6628:	20000600 	.word	0x20000600

0000662c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6630:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6632:	f7ff fcb5 	bl	5fa0 <z_time_slice>
	__asm__ volatile(
    6636:	f04f 0320 	mov.w	r3, #32
    663a:	f3ef 8611 	mrs	r6, BASEPRI
    663e:	f383 8812 	msr	BASEPRI_MAX, r3
    6642:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6646:	4f23      	ldr	r7, [pc, #140]	; (66d4 <sys_clock_announce+0xa8>)
	return list->head == list;
    6648:	f8df 8090 	ldr.w	r8, [pc, #144]	; 66dc <sys_clock_announce+0xb0>
    664c:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6650:	4a21      	ldr	r2, [pc, #132]	; (66d8 <sys_clock_announce+0xac>)
	announce_remaining = ticks;
    6652:	603c      	str	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6654:	4540      	cmp	r0, r8
		curr_tick += dt;
    6656:	e9d2 3e00 	ldrd	r3, lr, [r2]
    665a:	ea4f 71e4 	mov.w	r1, r4, asr #31
    665e:	d00b      	beq.n	6678 <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6660:	b150      	cbz	r0, 6678 <sys_clock_announce+0x4c>
    6662:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    6666:	42ac      	cmp	r4, r5
    6668:	eb71 090c 	sbcs.w	r9, r1, ip
    666c:	da16      	bge.n	669c <sys_clock_announce+0x70>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    666e:	1b2d      	subs	r5, r5, r4
    6670:	eb6c 0c01 	sbc.w	ip, ip, r1
    6674:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    6678:	18e3      	adds	r3, r4, r3
    667a:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    667e:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    6680:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    6684:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    6686:	f7ff ff0f 	bl	64a8 <next_timeout>
    668a:	4621      	mov	r1, r4
    668c:	f7fe f8a0 	bl	47d0 <sys_clock_set_timeout>
	__asm__ volatile(
    6690:	f386 8811 	msr	BASEPRI, r6
    6694:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    669c:	18eb      	adds	r3, r5, r3
    669e:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    66a2:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    66a6:	2200      	movs	r2, #0
    66a8:	2300      	movs	r3, #0
    66aa:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    66ae:	f7ff ff23 	bl	64f8 <remove_timeout>
    66b2:	f386 8811 	msr	BASEPRI, r6
    66b6:	f3bf 8f6f 	isb	sy
		t->fn(t);
    66ba:	6883      	ldr	r3, [r0, #8]
    66bc:	4798      	blx	r3
	__asm__ volatile(
    66be:	f04f 0320 	mov.w	r3, #32
    66c2:	f3ef 8611 	mrs	r6, BASEPRI
    66c6:	f383 8812 	msr	BASEPRI_MAX, r3
    66ca:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    66ce:	683c      	ldr	r4, [r7, #0]
    66d0:	1b64      	subs	r4, r4, r5
    66d2:	e7bb      	b.n	664c <sys_clock_announce+0x20>
    66d4:	2000063c 	.word	0x2000063c
    66d8:	20000438 	.word	0x20000438
    66dc:	20000268 	.word	0x20000268

000066e0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    66e0:	b510      	push	{r4, lr}
    66e2:	f04f 0320 	mov.w	r3, #32
    66e6:	f3ef 8411 	mrs	r4, BASEPRI
    66ea:	f383 8812 	msr	BASEPRI_MAX, r3
    66ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    66f2:	f7ff fecf 	bl	6494 <elapsed>
    66f6:	4a06      	ldr	r2, [pc, #24]	; (6710 <sys_clock_tick_get+0x30>)
    66f8:	4603      	mov	r3, r0
    66fa:	e9d2 0100 	ldrd	r0, r1, [r2]
    66fe:	1818      	adds	r0, r3, r0
    6700:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    6704:	f384 8811 	msr	BASEPRI, r4
    6708:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    670c:	bd10      	pop	{r4, pc}
    670e:	bf00      	nop
    6710:	20000438 	.word	0x20000438

00006714 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    6714:	4801      	ldr	r0, [pc, #4]	; (671c <boot_banner+0x8>)
    6716:	f000 b857 	b.w	67c8 <printk>
    671a:	bf00      	nop
    671c:	00008ac6 	.word	0x00008ac6

00006720 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    6720:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6722:	4c06      	ldr	r4, [pc, #24]	; (673c <statics_init+0x1c>)
    6724:	4d06      	ldr	r5, [pc, #24]	; (6740 <statics_init+0x20>)
    6726:	42ac      	cmp	r4, r5
    6728:	d301      	bcc.n	672e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    672a:	2000      	movs	r0, #0
    672c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    672e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    6732:	4620      	mov	r0, r4
    6734:	f001 f958 	bl	79e8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    6738:	3414      	adds	r4, #20
    673a:	e7f4      	b.n	6726 <statics_init+0x6>
    673c:	20000280 	.word	0x20000280
    6740:	20000280 	.word	0x20000280

00006744 <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    6744:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6746:	ab0b      	add	r3, sp, #44	; 0x2c
    6748:	9305      	str	r3, [sp, #20]
    674a:	9303      	str	r3, [sp, #12]
    674c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    674e:	9302      	str	r3, [sp, #8]
    6750:	2300      	movs	r3, #0
    6752:	e9cd 3300 	strd	r3, r3, [sp]
    6756:	4618      	mov	r0, r3
    6758:	f7fb f906 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    675c:	b007      	add	sp, #28
    675e:	f85d fb04 	ldr.w	pc, [sp], #4

00006762 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_external_formatter_func formatter,
		       void *ctx, void *packaged)
{
    6762:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6766:	4606      	mov	r6, r0
    6768:	460d      	mov	r5, r1
    676a:	4617      	mov	r7, r2
	uint8_t *buf = packaged;
	struct cbprintf_package_hdr_ext *hdr = packaged;
	char *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    676c:	4698      	mov	r8, r3
    676e:	b32b      	cbz	r3, 67bc <cbpprintf_external+0x5a>
		return -EINVAL;
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = hdr->hdr.desc.len * sizeof(int);
    6770:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    6774:	f893 9001 	ldrb.w	r9, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6778:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    677a:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    677c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    6780:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    6784:	441c      	add	r4, r3
    6786:	4444      	add	r4, r8

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    6788:	f04f 0a00 	mov.w	sl, #0
    678c:	45ca      	cmp	sl, r9
    678e:	d309      	bcc.n	67a4 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    6790:	f8d8 2004 	ldr.w	r2, [r8, #4]
    6794:	f108 0308 	add.w	r3, r8, #8
    6798:	4639      	mov	r1, r7
    679a:	4630      	mov	r0, r6
    679c:	46ac      	mov	ip, r5
	/* Skip past the header */
	buf += sizeof(*hdr);

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
}
    679e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    67a2:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    67a4:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    67a8:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    67ac:	4620      	mov	r0, r4
    67ae:	f000 fab6 	bl	6d1e <strlen>
    67b2:	3001      	adds	r0, #1
    67b4:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    67b6:	f10a 0a01 	add.w	sl, sl, #1
    67ba:	e7e7      	b.n	678c <cbpprintf_external+0x2a>
}
    67bc:	f06f 0015 	mvn.w	r0, #21
    67c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000067c4 <arch_printk_char_out>:
}
    67c4:	2000      	movs	r0, #0
    67c6:	4770      	bx	lr

000067c8 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    67c8:	b40f      	push	{r0, r1, r2, r3}
    67ca:	b507      	push	{r0, r1, r2, lr}
    67cc:	a904      	add	r1, sp, #16
    67ce:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    67d2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    67d4:	f000 f9f2 	bl	6bbc <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    67d8:	b003      	add	sp, #12
    67da:	f85d eb04 	ldr.w	lr, [sp], #4
    67de:	b004      	add	sp, #16
    67e0:	4770      	bx	lr

000067e2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    67e2:	4604      	mov	r4, r0
    67e4:	b508      	push	{r3, lr}
    67e6:	4608      	mov	r0, r1
    67e8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    67ea:	461a      	mov	r2, r3
    67ec:	47a0      	blx	r4
	return z_impl_z_current_get();
    67ee:	f7ff fdd1 	bl	6394 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    67f2:	f7fc fa0f 	bl	2c14 <z_impl_k_thread_abort>

000067f6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    67f6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    67fa:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    67fc:	0840      	lsrs	r0, r0, #1
    67fe:	4770      	bx	lr

00006800 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    6800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6802:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    6804:	f7ff fff7 	bl	67f6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    6808:	fab0 f080 	clz	r0, r0
    680c:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    6810:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    6814:	00ca      	lsls	r2, r1, #3
    6816:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    681a:	1d17      	adds	r7, r2, #4
{
    681c:	460c      	mov	r4, r1
    681e:	3206      	adds	r2, #6
    6820:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    6822:	b956      	cbnz	r6, 683a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    6824:	2101      	movs	r1, #1
    6826:	fa01 f000 	lsl.w	r0, r1, r0
    682a:	68d9      	ldr	r1, [r3, #12]
    682c:	4301      	orrs	r1, r0
    682e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    6830:	f8cc 4010 	str.w	r4, [ip, #16]
    6834:	53dd      	strh	r5, [r3, r7]
    6836:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    6838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    683a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    683c:	3104      	adds	r1, #4
    683e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    6840:	53d8      	strh	r0, [r3, r7]
    6842:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6846:	529e      	strh	r6, [r3, r2]
    6848:	80c5      	strh	r5, [r0, #6]
    684a:	525d      	strh	r5, [r3, r1]
    684c:	e7f4      	b.n	6838 <free_list_add+0x38>

0000684e <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    684e:	3a04      	subs	r2, #4
{
    6850:	b4f0      	push	{r4, r5, r6, r7}
    6852:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6854:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    6856:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    6858:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    685c:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    6860:	1a0e      	subs	r6, r1, r0
    6862:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    6864:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    6866:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    686a:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    686c:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    6870:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    6872:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    6874:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    6876:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    687a:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    687c:	f1c2 0220 	rsb	r2, r2, #32
    6880:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    6882:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    6886:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    688a:	4294      	cmp	r4, r2
    688c:	d1fb      	bne.n	6886 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    688e:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    6890:	f042 0201 	orr.w	r2, r2, #1
    6894:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    6896:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    689a:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    689c:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    689e:	8007      	strh	r7, [r0, #0]
    68a0:	8065      	strh	r5, [r4, #2]
    68a2:	1984      	adds	r4, r0, r6
    68a4:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    68a8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    68ac:	8067      	strh	r7, [r4, #2]
    68ae:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    68b0:	885a      	ldrh	r2, [r3, #2]
    68b2:	f042 0201 	orr.w	r2, r2, #1
    68b6:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    68b8:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    68ba:	f7ff bfa1 	b.w	6800 <free_list_add>

000068be <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    68be:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    68c0:	f013 0307 	ands.w	r3, r3, #7
    68c4:	d105      	bne.n	68d2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    68c6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    68c8:	2b00      	cmp	r3, #0
    68ca:	bf0c      	ite	eq
    68cc:	2000      	moveq	r0, #0
    68ce:	2003      	movne	r0, #3
    68d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    68d2:	2b02      	cmp	r3, #2
    68d4:	d105      	bne.n	68e2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    68d6:	8b40      	ldrh	r0, [r0, #26]
    68d8:	fab0 f080 	clz	r0, r0
    68dc:	0940      	lsrs	r0, r0, #5
    68de:	0080      	lsls	r0, r0, #2
    68e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    68e2:	2b01      	cmp	r3, #1
    68e4:	d105      	bne.n	68f2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    68e6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    68e8:	2b00      	cmp	r3, #0
    68ea:	bf0c      	ite	eq
    68ec:	2000      	moveq	r0, #0
    68ee:	2005      	movne	r0, #5
    68f0:	4770      	bx	lr
	int evt = EVT_NOP;
    68f2:	2000      	movs	r0, #0
}
    68f4:	4770      	bx	lr

000068f6 <validate_args>:
{
    68f6:	b510      	push	{r4, lr}
    68f8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    68fa:	b100      	cbz	r0, 68fe <validate_args+0x8>
    68fc:	b911      	cbnz	r1, 6904 <validate_args+0xe>
		return -EINVAL;
    68fe:	f06f 0015 	mvn.w	r0, #21
}
    6902:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    6904:	1d08      	adds	r0, r1, #4
    6906:	f000 f896 	bl	6a36 <sys_notify_validate>
	if ((rv == 0)
    690a:	2800      	cmp	r0, #0
    690c:	d1f9      	bne.n	6902 <validate_args+0xc>
	    && ((cli->notify.flags
    690e:	68a3      	ldr	r3, [r4, #8]
    6910:	2b03      	cmp	r3, #3
    6912:	d9f6      	bls.n	6902 <validate_args+0xc>
    6914:	e7f3      	b.n	68fe <validate_args+0x8>

00006916 <notify_one>:
{
    6916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    691a:	460d      	mov	r5, r1
    691c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    691e:	4619      	mov	r1, r3
    6920:	1d28      	adds	r0, r5, #4
{
    6922:	4690      	mov	r8, r2
    6924:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6926:	f000 f897 	bl	6a58 <sys_notify_finalize>
	if (cb) {
    692a:	4604      	mov	r4, r0
    692c:	b138      	cbz	r0, 693e <notify_one+0x28>
		cb(mgr, cli, state, res);
    692e:	4633      	mov	r3, r6
    6930:	4642      	mov	r2, r8
    6932:	4629      	mov	r1, r5
    6934:	4638      	mov	r0, r7
    6936:	46a4      	mov	ip, r4
}
    6938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    693c:	4760      	bx	ip
}
    693e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006942 <transition_complete>:
{
    6942:	b410      	push	{r4}
	__asm__ volatile(
    6944:	f04f 0420 	mov.w	r4, #32
    6948:	f3ef 8211 	mrs	r2, BASEPRI
    694c:	f384 8812 	msr	BASEPRI_MAX, r4
    6950:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6954:	6141      	str	r1, [r0, #20]
}
    6956:	f85d 4b04 	ldr.w	r4, [sp], #4
	process_event(mgr, EVT_COMPLETE, key);
    695a:	2101      	movs	r1, #1
    695c:	f7fa bdf2 	b.w	1544 <process_event>

00006960 <onoff_manager_init>:
{
    6960:	b538      	push	{r3, r4, r5, lr}
    6962:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6964:	4605      	mov	r5, r0
    6966:	b158      	cbz	r0, 6980 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6968:	b151      	cbz	r1, 6980 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    696a:	680b      	ldr	r3, [r1, #0]
    696c:	b143      	cbz	r3, 6980 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    696e:	684b      	ldr	r3, [r1, #4]
    6970:	b133      	cbz	r3, 6980 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6972:	221c      	movs	r2, #28
    6974:	2100      	movs	r1, #0
    6976:	f000 f9ed 	bl	6d54 <memset>
    697a:	612c      	str	r4, [r5, #16]
	return 0;
    697c:	2000      	movs	r0, #0
}
    697e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6980:	f06f 0015 	mvn.w	r0, #21
    6984:	e7fb      	b.n	697e <onoff_manager_init+0x1e>

00006986 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6986:	b570      	push	{r4, r5, r6, lr}
    6988:	4605      	mov	r5, r0
    698a:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    698c:	f7ff ffb3 	bl	68f6 <validate_args>

	if (rv < 0) {
    6990:	1e04      	subs	r4, r0, #0
    6992:	db15      	blt.n	69c0 <onoff_request+0x3a>
    6994:	f04f 0320 	mov.w	r3, #32
    6998:	f3ef 8211 	mrs	r2, BASEPRI
    699c:	f383 8812 	msr	BASEPRI_MAX, r3
    69a0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    69a4:	8b6b      	ldrh	r3, [r5, #26]
    69a6:	8b2c      	ldrh	r4, [r5, #24]
    69a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    69ac:	428b      	cmp	r3, r1
    69ae:	f004 0407 	and.w	r4, r4, #7
    69b2:	d107      	bne.n	69c4 <onoff_request+0x3e>
	__asm__ volatile(
    69b4:	f382 8811 	msr	BASEPRI, r2
    69b8:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    69bc:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    69c0:	4620      	mov	r0, r4
    69c2:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    69c4:	2c02      	cmp	r4, #2
    69c6:	d10c      	bne.n	69e2 <onoff_request+0x5c>
		mgr->refs += 1U;
    69c8:	3301      	adds	r3, #1
    69ca:	836b      	strh	r3, [r5, #26]
    69cc:	f382 8811 	msr	BASEPRI, r2
    69d0:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    69d4:	2300      	movs	r3, #0
    69d6:	4622      	mov	r2, r4
    69d8:	4631      	mov	r1, r6
    69da:	4628      	mov	r0, r5
    69dc:	f7ff ff9b 	bl	6916 <notify_one>
    69e0:	e7ee      	b.n	69c0 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    69e2:	2c06      	cmp	r4, #6
    69e4:	d814      	bhi.n	6a10 <onoff_request+0x8a>
    69e6:	e8df f004 	tbb	[pc, r4]
    69ea:	1304      	.short	0x1304
    69ec:	1a041313 	.word	0x1a041313
    69f0:	04          	.byte	0x04
    69f1:	00          	.byte	0x00
	parent->next = child;
    69f2:	2300      	movs	r3, #0
    69f4:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    69f6:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    69f8:	b93b      	cbnz	r3, 6a0a <onoff_request+0x84>
	list->head = node;
    69fa:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    69fe:	b9ac      	cbnz	r4, 6a2c <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    6a00:	2102      	movs	r1, #2
    6a02:	4628      	mov	r0, r5
    6a04:	f7fa fd9e 	bl	1544 <process_event>
    6a08:	e7da      	b.n	69c0 <onoff_request+0x3a>
	parent->next = child;
    6a0a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6a0c:	606e      	str	r6, [r5, #4]
}
    6a0e:	e7f6      	b.n	69fe <onoff_request+0x78>
    6a10:	f382 8811 	msr	BASEPRI, r2
    6a14:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    6a18:	f06f 0404 	mvn.w	r4, #4
    6a1c:	e7d0      	b.n	69c0 <onoff_request+0x3a>
    6a1e:	f382 8811 	msr	BASEPRI, r2
    6a22:	f3bf 8f6f 	isb	sy
    6a26:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6a2a:	e7c9      	b.n	69c0 <onoff_request+0x3a>
    6a2c:	f382 8811 	msr	BASEPRI, r2
    6a30:	f3bf 8f6f 	isb	sy
		if (notify) {
    6a34:	e7c4      	b.n	69c0 <onoff_request+0x3a>

00006a36 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6a36:	4603      	mov	r3, r0
    6a38:	b158      	cbz	r0, 6a52 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6a3a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6a3c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6a40:	2a01      	cmp	r2, #1
    6a42:	d003      	beq.n	6a4c <sys_notify_validate+0x16>
    6a44:	2a03      	cmp	r2, #3
    6a46:	d104      	bne.n	6a52 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6a48:	6802      	ldr	r2, [r0, #0]
    6a4a:	b112      	cbz	r2, 6a52 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6a4c:	2000      	movs	r0, #0
    6a4e:	6098      	str	r0, [r3, #8]
    6a50:	4770      	bx	lr
    6a52:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6a56:	4770      	bx	lr

00006a58 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6a58:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6a5a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6a5c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6a60:	2a03      	cmp	r2, #3
    6a62:	f04f 0200 	mov.w	r2, #0
{
    6a66:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6a68:	bf0c      	ite	eq
    6a6a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6a6c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6a6e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6a70:	4770      	bx	lr

00006a72 <_ldiv5>:
	uint32_t v_lo = *v;
    6a72:	e9d0 2100 	ldrd	r2, r1, [r0]
{
    6a76:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
    6a78:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
    6a7c:	fba2 2403 	umull	r2, r4, r2, r3
    6a80:	18d5      	adds	r5, r2, r3
    6a82:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
    6a86:	fba1 1303 	umull	r1, r3, r1, r3
    6a8a:	1852      	adds	r2, r2, r1
    6a8c:	eb44 0403 	adc.w	r4, r4, r3
    6a90:	1952      	adds	r2, r2, r5
    6a92:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
    6a96:	1889      	adds	r1, r1, r2
    6a98:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
    6a9c:	e9c0 1300 	strd	r1, r3, [r0]
}
    6aa0:	bd30      	pop	{r4, r5, pc}

00006aa2 <_get_digit>:
{
    6aa2:	b510      	push	{r4, lr}
	if (*digit_count > 0) {
    6aa4:	680a      	ldr	r2, [r1, #0]
    6aa6:	2a00      	cmp	r2, #0
{
    6aa8:	4603      	mov	r3, r0
	if (*digit_count > 0) {
    6aaa:	dd0f      	ble.n	6acc <_get_digit+0x2a>
		--*digit_count;
    6aac:	3a01      	subs	r2, #1
    6aae:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
    6ab0:	681a      	ldr	r2, [r3, #0]
    6ab2:	6844      	ldr	r4, [r0, #4]
    6ab4:	200a      	movs	r0, #10
    6ab6:	fba2 1200 	umull	r1, r2, r2, r0
    6aba:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
    6abe:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
    6ac0:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
    6ac4:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
    6ac8:	3030      	adds	r0, #48	; 0x30
}
    6aca:	bd10      	pop	{r4, pc}
		rval = '0';
    6acc:	2030      	movs	r0, #48	; 0x30
    6ace:	e7fc      	b.n	6aca <_get_digit+0x28>

00006ad0 <encode_uint>:
{
    6ad0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ad4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6ad6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    6ad8:	2b6f      	cmp	r3, #111	; 0x6f
{
    6ada:	4680      	mov	r8, r0
    6adc:	460f      	mov	r7, r1
    6ade:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6ae0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6ae4:	d029      	beq.n	6b3a <encode_uint+0x6a>
    6ae6:	d824      	bhi.n	6b32 <encode_uint+0x62>
		return 10;
    6ae8:	2b58      	cmp	r3, #88	; 0x58
    6aea:	bf0c      	ite	eq
    6aec:	2610      	moveq	r6, #16
    6aee:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    6af0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6af4:	4632      	mov	r2, r6
    6af6:	2300      	movs	r3, #0
    6af8:	4640      	mov	r0, r8
    6afa:	4639      	mov	r1, r7
    6afc:	f7f9 fb00 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b00:	2a09      	cmp	r2, #9
    6b02:	b2d4      	uxtb	r4, r2
    6b04:	d81e      	bhi.n	6b44 <encode_uint+0x74>
    6b06:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    6b08:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b0a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6b0c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b10:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6b14:	d301      	bcc.n	6b1a <encode_uint+0x4a>
    6b16:	45d1      	cmp	r9, sl
    6b18:	d811      	bhi.n	6b3e <encode_uint+0x6e>
	if (conv->flag_hash) {
    6b1a:	782b      	ldrb	r3, [r5, #0]
    6b1c:	069b      	lsls	r3, r3, #26
    6b1e:	d505      	bpl.n	6b2c <encode_uint+0x5c>
		if (radix == 8) {
    6b20:	2e08      	cmp	r6, #8
    6b22:	d115      	bne.n	6b50 <encode_uint+0x80>
			conv->altform_0 = true;
    6b24:	78ab      	ldrb	r3, [r5, #2]
    6b26:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6b2a:	70ab      	strb	r3, [r5, #2]
}
    6b2c:	4648      	mov	r0, r9
    6b2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6b32:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    6b36:	2b70      	cmp	r3, #112	; 0x70
    6b38:	e7d7      	b.n	6aea <encode_uint+0x1a>
	switch (specifier) {
    6b3a:	2608      	movs	r6, #8
    6b3c:	e7d8      	b.n	6af0 <encode_uint+0x20>
		value /= radix;
    6b3e:	4680      	mov	r8, r0
    6b40:	460f      	mov	r7, r1
    6b42:	e7d7      	b.n	6af4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6b44:	f1bb 0f19 	cmp.w	fp, #25
    6b48:	bf94      	ite	ls
    6b4a:	3437      	addls	r4, #55	; 0x37
    6b4c:	3457      	addhi	r4, #87	; 0x57
    6b4e:	e7db      	b.n	6b08 <encode_uint+0x38>
		} else if (radix == 16) {
    6b50:	2e10      	cmp	r6, #16
    6b52:	d1eb      	bne.n	6b2c <encode_uint+0x5c>
			conv->altform_0c = true;
    6b54:	78ab      	ldrb	r3, [r5, #2]
    6b56:	f043 0310 	orr.w	r3, r3, #16
    6b5a:	e7e6      	b.n	6b2a <encode_uint+0x5a>

00006b5c <outs>:
{
    6b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b60:	4607      	mov	r7, r0
    6b62:	4688      	mov	r8, r1
    6b64:	4615      	mov	r5, r2
    6b66:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6b68:	4614      	mov	r4, r2
    6b6a:	42b4      	cmp	r4, r6
    6b6c:	d305      	bcc.n	6b7a <outs+0x1e>
    6b6e:	b10e      	cbz	r6, 6b74 <outs+0x18>
	return (int)count;
    6b70:	1b60      	subs	r0, r4, r5
    6b72:	e008      	b.n	6b86 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    6b74:	7823      	ldrb	r3, [r4, #0]
    6b76:	2b00      	cmp	r3, #0
    6b78:	d0fa      	beq.n	6b70 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    6b7a:	f814 0b01 	ldrb.w	r0, [r4], #1
    6b7e:	4641      	mov	r1, r8
    6b80:	47b8      	blx	r7
		if (rc < 0) {
    6b82:	2800      	cmp	r0, #0
    6b84:	daf1      	bge.n	6b6a <outs+0xe>
}
    6b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b8a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    6b8a:	4770      	bx	lr

00006b8c <dummy_timestamp>:
}
    6b8c:	2000      	movs	r0, #0
    6b8e:	4770      	bx	lr

00006b90 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6b90:	f000 bc31 	b.w	73f6 <sys_clock_cycle_get_32>

00006b94 <atomic_inc>:
{
    6b94:	4603      	mov	r3, r0
}
    6b96:	f3bf 8f5b 	dmb	ish
    6b9a:	e853 0f00 	ldrex	r0, [r3]
    6b9e:	1c42      	adds	r2, r0, #1
    6ba0:	e843 2100 	strex	r1, r2, [r3]
    6ba4:	2900      	cmp	r1, #0
    6ba6:	d1f8      	bne.n	6b9a <atomic_inc+0x6>
    6ba8:	f3bf 8f5b 	dmb	ish
    6bac:	4770      	bx	lr

00006bae <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    6bae:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		(void)z_log_init(false, false);
    6bb0:	2100      	movs	r1, #0
    6bb2:	4608      	mov	r0, r1
    6bb4:	f7fa fdd6 	bl	1764 <z_log_init.isra.0>
	}

	return 0;
}
    6bb8:	2000      	movs	r0, #0
    6bba:	bd08      	pop	{r3, pc}

00006bbc <z_log_vprintk>:
{
    6bbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6bbe:	2300      	movs	r3, #0
    6bc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6bc4:	e9cd 3300 	strd	r3, r3, [sp]
    6bc8:	461a      	mov	r2, r3
    6bca:	4619      	mov	r1, r3
    6bcc:	4618      	mov	r0, r3
    6bce:	f7fa fecb 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    6bd2:	b005      	add	sp, #20
    6bd4:	f85d fb04 	ldr.w	pc, [sp], #4

00006bd8 <z_log_notify_backend_enabled>:
}
    6bd8:	4770      	bx	lr

00006bda <z_log_get_tag>:
}
    6bda:	2000      	movs	r0, #0
    6bdc:	4770      	bx	lr

00006bde <z_log_msg_finalize>:
{
    6bde:	b570      	push	{r4, r5, r6, lr}
    6be0:	460e      	mov	r6, r1
    6be2:	4615      	mov	r5, r2
    6be4:	4619      	mov	r1, r3
	if (!msg) {
    6be6:	4604      	mov	r4, r0
    6be8:	b918      	cbnz	r0, 6bf2 <z_log_msg_finalize+0x14>
}
    6bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    6bee:	f7fa be65 	b.w	18bc <z_log_dropped>
	if (data) {
    6bf2:	b13b      	cbz	r3, 6c04 <z_log_msg_finalize+0x26>
		uint8_t *d = msg->data + desc.package_len;
    6bf4:	f3c2 2349 	ubfx	r3, r2, #9, #10
    6bf8:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    6bfa:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    6bfe:	4418      	add	r0, r3
    6c00:	f000 f89d 	bl	6d3e <memcpy>
	msg->hdr.source = source;
    6c04:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    6c08:	4620      	mov	r0, r4
}
    6c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    6c0e:	f7fa be6d 	b.w	18ec <z_log_msg_commit>

00006c12 <out_func>:
{
    6c12:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    6c14:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    6c18:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    6c1c:	6852      	ldr	r2, [r2, #4]
    6c1e:	2101      	movs	r1, #1
    6c20:	f10d 0007 	add.w	r0, sp, #7
    6c24:	4798      	blx	r3
}
    6c26:	2000      	movs	r0, #0
    6c28:	b003      	add	sp, #12
    6c2a:	f85d fb04 	ldr.w	pc, [sp], #4

00006c2e <cr_out_func>:
	if (c == '\n') {
    6c2e:	280a      	cmp	r0, #10
{
    6c30:	b538      	push	{r3, r4, r5, lr}
    6c32:	4604      	mov	r4, r0
    6c34:	460d      	mov	r5, r1
	if (c == '\n') {
    6c36:	d102      	bne.n	6c3e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    6c38:	200d      	movs	r0, #13
    6c3a:	f7ff ffea 	bl	6c12 <out_func>
	out_func(c, ctx);
    6c3e:	4629      	mov	r1, r5
    6c40:	4620      	mov	r0, r4
    6c42:	f7ff ffe6 	bl	6c12 <out_func>
}
    6c46:	2000      	movs	r0, #0
    6c48:	bd38      	pop	{r3, r4, r5, pc}

00006c4a <buffer_write>:
{
    6c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c4c:	4606      	mov	r6, r0
    6c4e:	460d      	mov	r5, r1
    6c50:	4614      	mov	r4, r2
    6c52:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6c54:	4621      	mov	r1, r4
    6c56:	4628      	mov	r0, r5
    6c58:	463a      	mov	r2, r7
    6c5a:	47b0      	blx	r6
	} while (len != 0);
    6c5c:	1a24      	subs	r4, r4, r0
		buf += processed;
    6c5e:	4405      	add	r5, r0
	} while (len != 0);
    6c60:	d1f8      	bne.n	6c54 <buffer_write+0xa>
}
    6c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006c64 <cbvprintf>:
{
    6c64:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    6c66:	2400      	movs	r4, #0
    6c68:	9400      	str	r4, [sp, #0]
    6c6a:	f7f9 fbb5 	bl	3d8 <z_cbvprintf_impl>
}
    6c6e:	b002      	add	sp, #8
    6c70:	bd10      	pop	{r4, pc}

00006c72 <log_output_flush>:
{
    6c72:	b510      	push	{r4, lr}
		     output->control_block->offset,
    6c74:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    6c76:	6881      	ldr	r1, [r0, #8]
{
    6c78:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6c7a:	e9d2 2300 	ldrd	r2, r3, [r2]
    6c7e:	6800      	ldr	r0, [r0, #0]
    6c80:	f7ff ffe3 	bl	6c4a <buffer_write>
	output->control_block->offset = 0;
    6c84:	6863      	ldr	r3, [r4, #4]
    6c86:	2200      	movs	r2, #0
    6c88:	601a      	str	r2, [r3, #0]
}
    6c8a:	bd10      	pop	{r4, pc}

00006c8c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    6c8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6c8e:	ab0b      	add	r3, sp, #44	; 0x2c
    6c90:	9305      	str	r3, [sp, #20]
    6c92:	9303      	str	r3, [sp, #12]
    6c94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6c96:	9302      	str	r3, [sp, #8]
    6c98:	2300      	movs	r3, #0
    6c9a:	e9cd 3300 	strd	r3, r3, [sp]
    6c9e:	2201      	movs	r2, #1
    6ca0:	4618      	mov	r0, r3
    6ca2:	f7fa fe61 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    6ca6:	b007      	add	sp, #28
    6ca8:	f85d fb04 	ldr.w	pc, [sp], #4

00006cac <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    6cac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6cae:	6800      	ldr	r0, [r0, #0]
    6cb0:	f7fb ba1a 	b.w	20e8 <z_arm_fatal_error>

00006cb4 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6cb4:	2100      	movs	r1, #0
    6cb6:	2001      	movs	r0, #1
    6cb8:	f7fb ba16 	b.w	20e8 <z_arm_fatal_error>

00006cbc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6cbc:	b508      	push	{r3, lr}
	handler();
    6cbe:	f7fb faef 	bl	22a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6cc6:	f7fb bc57 	b.w	2578 <z_arm_exc_exit>

00006cca <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    6cca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6ccc:	ab0b      	add	r3, sp, #44	; 0x2c
    6cce:	9305      	str	r3, [sp, #20]
    6cd0:	9303      	str	r3, [sp, #12]
    6cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6cd4:	9302      	str	r3, [sp, #8]
    6cd6:	2300      	movs	r3, #0
    6cd8:	e9cd 3300 	strd	r3, r3, [sp]
    6cdc:	2201      	movs	r2, #1
    6cde:	4618      	mov	r0, r3
    6ce0:	f7fa fe42 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    6ce4:	b007      	add	sp, #28
    6ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00006cea <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    6cea:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6cec:	ab0b      	add	r3, sp, #44	; 0x2c
    6cee:	9305      	str	r3, [sp, #20]
    6cf0:	9303      	str	r3, [sp, #12]
    6cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6cf4:	9302      	str	r3, [sp, #8]
    6cf6:	2300      	movs	r3, #0
    6cf8:	e9cd 3300 	strd	r3, r3, [sp]
    6cfc:	2201      	movs	r2, #1
    6cfe:	4618      	mov	r0, r3
    6d00:	f7fa fe32 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    6d04:	b007      	add	sp, #28
    6d06:	f85d fb04 	ldr.w	pc, [sp], #4

00006d0a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6d0a:	3901      	subs	r1, #1
    6d0c:	4603      	mov	r3, r0
    6d0e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6d12:	b90a      	cbnz	r2, 6d18 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6d14:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6d16:	4770      	bx	lr
		*d = *s;
    6d18:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6d1c:	e7f7      	b.n	6d0e <strcpy+0x4>

00006d1e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6d1e:	4603      	mov	r3, r0
	size_t n = 0;
    6d20:	2000      	movs	r0, #0

	while (*s != '\0') {
    6d22:	5c1a      	ldrb	r2, [r3, r0]
    6d24:	b902      	cbnz	r2, 6d28 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6d26:	4770      	bx	lr
		n++;
    6d28:	3001      	adds	r0, #1
    6d2a:	e7fa      	b.n	6d22 <strlen+0x4>

00006d2c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6d2c:	4603      	mov	r3, r0
	size_t n = 0;
    6d2e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6d30:	5c1a      	ldrb	r2, [r3, r0]
    6d32:	b10a      	cbz	r2, 6d38 <strnlen+0xc>
    6d34:	4288      	cmp	r0, r1
    6d36:	d100      	bne.n	6d3a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6d38:	4770      	bx	lr
		n++;
    6d3a:	3001      	adds	r0, #1
    6d3c:	e7f8      	b.n	6d30 <strnlen+0x4>

00006d3e <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6d3e:	b510      	push	{r4, lr}
    6d40:	1e43      	subs	r3, r0, #1
    6d42:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6d44:	4291      	cmp	r1, r2
    6d46:	d100      	bne.n	6d4a <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6d48:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
    6d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6d52:	e7f7      	b.n	6d44 <memcpy+0x6>

00006d54 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6d54:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6d56:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6d58:	4603      	mov	r3, r0
	while (n > 0) {
    6d5a:	4293      	cmp	r3, r2
    6d5c:	d100      	bne.n	6d60 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6d5e:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6d60:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6d64:	e7f9      	b.n	6d5a <memset+0x6>

00006d66 <_stdout_hook_default>:
}
    6d66:	f04f 30ff 	mov.w	r0, #4294967295
    6d6a:	4770      	bx	lr

00006d6c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6d6c:	2806      	cmp	r0, #6
    6d6e:	d108      	bne.n	6d82 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d74:	2201      	movs	r2, #1
    6d76:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6d7a:	f3bf 8f4f 	dsb	sy
        __WFE();
    6d7e:	bf20      	wfe
    while (true)
    6d80:	e7fd      	b.n	6d7e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6d82:	4770      	bx	lr

00006d84 <pm_state_exit_post_ops>:
    6d84:	2300      	movs	r3, #0
    6d86:	f383 8811 	msr	BASEPRI, r3
    6d8a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6d8e:	4770      	bx	lr

00006d90 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6d90:	6903      	ldr	r3, [r0, #16]
    6d92:	b2c9      	uxtb	r1, r1
    6d94:	220c      	movs	r2, #12
    6d96:	fb01 3302 	mla	r3, r1, r2, r3
    6d9a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6d9c:	f000 0007 	and.w	r0, r0, #7
    6da0:	4770      	bx	lr

00006da2 <set_on_state>:
	__asm__ volatile(
    6da2:	f04f 0320 	mov.w	r3, #32
    6da6:	f3ef 8211 	mrs	r2, BASEPRI
    6daa:	f383 8812 	msr	BASEPRI_MAX, r3
    6dae:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6db2:	6803      	ldr	r3, [r0, #0]
    6db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6db8:	f043 0302 	orr.w	r3, r3, #2
    6dbc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6dbe:	f382 8811 	msr	BASEPRI, r2
    6dc2:	f3bf 8f6f 	isb	sy
}
    6dc6:	4770      	bx	lr

00006dc8 <stop>:
{
    6dc8:	b570      	push	{r4, r5, r6, lr}
    6dca:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    6dcc:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    6dce:	f04f 0420 	mov.w	r4, #32
    6dd2:	f3ef 8511 	mrs	r5, BASEPRI
    6dd6:	f384 8812 	msr	BASEPRI_MAX, r4
    6dda:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6dde:	260c      	movs	r6, #12
    6de0:	fb06 3401 	mla	r4, r6, r1, r3
    6de4:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6de6:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6dea:	d008      	beq.n	6dfe <stop+0x36>
    6dec:	42a2      	cmp	r2, r4
    6dee:	d006      	beq.n	6dfe <stop+0x36>
	__asm__ volatile(
    6df0:	f385 8811 	msr	BASEPRI, r5
    6df4:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    6df8:	f04f 30ff 	mov.w	r0, #4294967295
}
    6dfc:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6dfe:	4371      	muls	r1, r6
    6e00:	440b      	add	r3, r1
    6e02:	2201      	movs	r2, #1
    6e04:	641a      	str	r2, [r3, #64]	; 0x40
    6e06:	f385 8811 	msr	BASEPRI, r5
    6e0a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    6e0e:	6843      	ldr	r3, [r0, #4]
    6e10:	440b      	add	r3, r1
    6e12:	685b      	ldr	r3, [r3, #4]
    6e14:	4798      	blx	r3
	return 0;
    6e16:	2000      	movs	r0, #0
    6e18:	e7f0      	b.n	6dfc <stop+0x34>

00006e1a <api_stop>:
	return stop(dev, subsys, CTX_API);
    6e1a:	2280      	movs	r2, #128	; 0x80
    6e1c:	f7ff bfd4 	b.w	6dc8 <stop>

00006e20 <async_start>:
{
    6e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e22:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6e24:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    6e26:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6e28:	f04f 0520 	mov.w	r5, #32
    6e2c:	f3ef 8611 	mrs	r6, BASEPRI
    6e30:	f385 8812 	msr	BASEPRI_MAX, r5
    6e34:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6e38:	250c      	movs	r5, #12
    6e3a:	4369      	muls	r1, r5
    6e3c:	440c      	add	r4, r1
    6e3e:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6e40:	f005 0c07 	and.w	ip, r5, #7
    6e44:	f1bc 0f01 	cmp.w	ip, #1
    6e48:	d10b      	bne.n	6e62 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6e4a:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    6e4c:	f386 8811 	msr	BASEPRI, r6
    6e50:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    6e54:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6e58:	6843      	ldr	r3, [r0, #4]
    6e5a:	585b      	ldr	r3, [r3, r1]
    6e5c:	4798      	blx	r3
	return 0;
    6e5e:	2000      	movs	r0, #0
}
    6e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6e62:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    6e66:	42af      	cmp	r7, r5
    6e68:	f386 8811 	msr	BASEPRI, r6
    6e6c:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    6e70:	bf0c      	ite	eq
    6e72:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    6e76:	f04f 30ff 	movne.w	r0, #4294967295
    6e7a:	e7f1      	b.n	6e60 <async_start+0x40>

00006e7c <api_start>:
{
    6e7c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6e7e:	2480      	movs	r4, #128	; 0x80
    6e80:	9400      	str	r4, [sp, #0]
    6e82:	f7ff ffcd 	bl	6e20 <async_start>
}
    6e86:	b002      	add	sp, #8
    6e88:	bd10      	pop	{r4, pc}

00006e8a <onoff_started_callback>:
{
    6e8a:	b410      	push	{r4}
	return &data->mgr[type];
    6e8c:	6900      	ldr	r0, [r0, #16]
    6e8e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6e90:	241c      	movs	r4, #28
    6e92:	fb03 0004 	mla	r0, r3, r4, r0
    6e96:	2100      	movs	r1, #0
}
    6e98:	f85d 4b04 	ldr.w	r4, [sp], #4
	notify(mgr, 0);
    6e9c:	4710      	bx	r2

00006e9e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6e9e:	2000      	movs	r0, #0
    6ea0:	f000 bb2a 	b.w	74f8 <nrfx_clock_start>

00006ea4 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6ea4:	2000      	movs	r0, #0
    6ea6:	f000 bb63 	b.w	7570 <nrfx_clock_stop>

00006eaa <blocking_start_callback>:
{
    6eaa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    6eac:	f7fe bf2e 	b.w	5d0c <z_impl_k_sem_give>

00006eb0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6eb0:	6843      	ldr	r3, [r0, #4]
    6eb2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6eb4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6eb8:	600b      	str	r3, [r1, #0]
}
    6eba:	2000      	movs	r0, #0
    6ebc:	4770      	bx	lr

00006ebe <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ebe:	6843      	ldr	r3, [r0, #4]
    6ec0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    6ec2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    6ec6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    6eca:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6ece:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    6ed2:	2000      	movs	r0, #0
    6ed4:	4770      	bx	lr

00006ed6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ed6:	6843      	ldr	r3, [r0, #4]
    6ed8:	685b      	ldr	r3, [r3, #4]
}
    6eda:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6edc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6ee0:	4770      	bx	lr

00006ee2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6ee2:	6843      	ldr	r3, [r0, #4]
    6ee4:	685b      	ldr	r3, [r3, #4]
}
    6ee6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6ee8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6eec:	4770      	bx	lr

00006eee <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6eee:	6843      	ldr	r3, [r0, #4]
    6ef0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6ef2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    6ef6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    6efa:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    6efc:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    6f00:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    6f04:	2000      	movs	r0, #0
    6f06:	4770      	bx	lr

00006f08 <gpio_nrfx_manage_callback>:
{
    6f08:	b510      	push	{r4, lr}
	return port->data;
    6f0a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6f0c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    6f0e:	b1f8      	cbz	r0, 6f50 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f10:	4288      	cmp	r0, r1
    6f12:	d119      	bne.n	6f48 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    6f14:	689c      	ldr	r4, [r3, #8]
	return node->next;
    6f16:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    6f18:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6f1a:	42a1      	cmp	r1, r4
    6f1c:	d100      	bne.n	6f20 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6f1e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6f20:	2000      	movs	r0, #0
    6f22:	6008      	str	r0, [r1, #0]
	if (set) {
    6f24:	b12a      	cbz	r2, 6f32 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    6f26:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    6f28:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    6f2a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    6f2c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6f2e:	b902      	cbnz	r2, 6f32 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    6f30:	6099      	str	r1, [r3, #8]
	return 0;
    6f32:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6f34:	e010      	b.n	6f58 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f36:	4281      	cmp	r1, r0
    6f38:	d106      	bne.n	6f48 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    6f3a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    6f3c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    6f3e:	6898      	ldr	r0, [r3, #8]
    6f40:	4281      	cmp	r1, r0
    6f42:	d1ed      	bne.n	6f20 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    6f44:	609c      	str	r4, [r3, #8]
}
    6f46:	e7eb      	b.n	6f20 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    6f48:	4604      	mov	r4, r0
    6f4a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f4c:	2800      	cmp	r0, #0
    6f4e:	d1f2      	bne.n	6f36 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    6f50:	2a00      	cmp	r2, #0
    6f52:	d1e8      	bne.n	6f26 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    6f54:	f06f 0015 	mvn.w	r0, #21
}
    6f58:	bd10      	pop	{r4, pc}

00006f5a <irq_connect0>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEFINE(0);
    6f5a:	2200      	movs	r2, #0
    6f5c:	2101      	movs	r1, #1
    6f5e:	2003      	movs	r0, #3
    6f60:	f7fb b986 	b.w	2270 <z_arm_irq_priority_set>

00006f64 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    6f64:	b510      	push	{r4, lr}
	while (*count) {
    6f66:	680b      	ldr	r3, [r1, #0]
    6f68:	b913      	cbnz	r3, 6f70 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    6f6a:	6013      	str	r3, [r2, #0]
	return NULL;
    6f6c:	4618      	mov	r0, r3
    6f6e:	e005      	b.n	6f7c <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    6f70:	6803      	ldr	r3, [r0, #0]
    6f72:	685c      	ldr	r4, [r3, #4]
    6f74:	b11c      	cbz	r4, 6f7e <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    6f76:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    6f78:	6803      	ldr	r3, [r0, #0]
    6f7a:	6818      	ldr	r0, [r3, #0]
}
    6f7c:	bd10      	pop	{r4, pc}
		++(*current);
    6f7e:	3308      	adds	r3, #8
    6f80:	6003      	str	r3, [r0, #0]
		--(*count);
    6f82:	680b      	ldr	r3, [r1, #0]
    6f84:	3b01      	subs	r3, #1
    6f86:	600b      	str	r3, [r1, #0]
    6f88:	e7ed      	b.n	6f66 <spi_context_get_next_buf.constprop.0+0x2>

00006f8a <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    6f8a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    6f8c:	ab0b      	add	r3, sp, #44	; 0x2c
    6f8e:	9305      	str	r3, [sp, #20]
    6f90:	9303      	str	r3, [sp, #12]
    6f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6f94:	9302      	str	r3, [sp, #8]
    6f96:	2300      	movs	r3, #0
    6f98:	e9cd 3300 	strd	r3, r3, [sp]
    6f9c:	2201      	movs	r2, #1
    6f9e:	4618      	mov	r0, r3
    6fa0:	f7fa fce2 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    6fa4:	b007      	add	sp, #28
    6fa6:	f85d fb04 	ldr.w	pc, [sp], #4

00006faa <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    6faa:	4603      	mov	r3, r0
    6fac:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    6fae:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6fb0:	7919      	ldrb	r1, [r3, #4]
    6fb2:	2301      	movs	r3, #1
    6fb4:	fa03 f101 	lsl.w	r1, r3, r1
    6fb8:	6903      	ldr	r3, [r0, #16]
    6fba:	681b      	ldr	r3, [r3, #0]
    6fbc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6fbe:	bf18      	it	ne
    6fc0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    6fc4:	b112      	cbz	r2, 6fcc <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    6fc6:	6883      	ldr	r3, [r0, #8]
    6fc8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6fca:	4718      	bx	r3
    6fcc:	6883      	ldr	r3, [r0, #8]
    6fce:	691b      	ldr	r3, [r3, #16]
    6fd0:	e7fb      	b.n	6fca <gpio_pin_set_dt.isra.0+0x20>

00006fd2 <_spi_context_cs_control>:
{
    6fd2:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6fd4:	6803      	ldr	r3, [r0, #0]
{
    6fd6:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    6fd8:	b1e3      	cbz	r3, 7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    6fda:	6898      	ldr	r0, [r3, #8]
    6fdc:	b1d0      	cbz	r0, 7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    6fde:	6805      	ldr	r5, [r0, #0]
    6fe0:	b1c5      	cbz	r5, 7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
		if (on) {
    6fe2:	b149      	cbz	r1, 6ff8 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    6fe4:	2101      	movs	r1, #1
    6fe6:	f7ff ffe0 	bl	6faa <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    6fea:	6823      	ldr	r3, [r4, #0]
    6fec:	689b      	ldr	r3, [r3, #8]
    6fee:	6898      	ldr	r0, [r3, #8]
}
    6ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6ff4:	f000 bcf4 	b.w	79e0 <z_impl_k_busy_wait>
			if (!force_off &&
    6ff8:	b912      	cbnz	r2, 7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>
    6ffa:	889b      	ldrh	r3, [r3, #4]
    6ffc:	04db      	lsls	r3, r3, #19
    6ffe:	d409      	bmi.n	7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
			k_busy_wait(ctx->config->cs->delay);
    7000:	6880      	ldr	r0, [r0, #8]
    7002:	f000 fced 	bl	79e0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7006:	6823      	ldr	r3, [r4, #0]
    7008:	2100      	movs	r1, #0
    700a:	6898      	ldr	r0, [r3, #8]
}
    700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7010:	f7ff bfcb 	b.w	6faa <gpio_pin_set_dt.isra.0>
}
    7014:	bd38      	pop	{r3, r4, r5, pc}

00007016 <spi_context_unlock_unconditionally>:
{
    7016:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    7018:	2201      	movs	r2, #1
    701a:	2100      	movs	r1, #0
{
    701c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    701e:	f7ff ffd8 	bl	6fd2 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    7022:	69a3      	ldr	r3, [r4, #24]
    7024:	b933      	cbnz	r3, 7034 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    7026:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7028:	f104 0010 	add.w	r0, r4, #16
}
    702c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7030:	f7fe be6c 	b.w	5d0c <z_impl_k_sem_give>
    7034:	bd10      	pop	{r4, pc}

00007036 <spi_nrfx_release>:
{
    7036:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    7038:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    703a:	6803      	ldr	r3, [r0, #0]
    703c:	428b      	cmp	r3, r1
    703e:	d106      	bne.n	704e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    7040:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    7044:	b934      	cbnz	r4, 7054 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    7046:	f7ff ffe6 	bl	7016 <spi_context_unlock_unconditionally>
	return 0;
    704a:	4620      	mov	r0, r4
}
    704c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    704e:	f06f 0015 	mvn.w	r0, #21
    7052:	e7fb      	b.n	704c <spi_nrfx_release+0x16>
		return -EBUSY;
    7054:	f06f 000f 	mvn.w	r0, #15
    7058:	e7f8      	b.n	704c <spi_nrfx_release+0x16>

0000705a <can_tx_default_cb>:
{
    705a:	4610      	mov	r0, r2
	ctx->status = error;
    705c:	6111      	str	r1, [r2, #16]
    705e:	f7fe be55 	b.w	5d0c <z_impl_k_sem_give>

00007062 <can_calc_prescaler>:
}
#endif /* CONFIG_CAN_FD_MODE */

int can_calc_prescaler(const struct device *dev, struct can_timing *timing,
		       uint32_t bitrate)
{
    7062:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7066:	460e      	mov	r6, r1
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
    7068:	884d      	ldrh	r5, [r1, #2]
    706a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
    706e:	88cf      	ldrh	r7, [r1, #6]
{
    7070:	4614      	mov	r4, r2
	return api->get_core_clock(dev, rate);
    7072:	6883      	ldr	r3, [r0, #8]
    7074:	a901      	add	r1, sp, #4
    7076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7078:	4798      	blx	r3
		   CAN_SYNC_SEG;
	uint32_t core_clock;
	int ret;

	ret = can_get_core_clock(dev, &core_clock);
	if (ret != 0) {
    707a:	b978      	cbnz	r0, 709c <can_calc_prescaler+0x3a>
	uint32_t ts = timing->prop_seg + timing->phase_seg1 + timing->phase_seg2 +
    707c:	eb05 0308 	add.w	r3, r5, r8
    7080:	443b      	add	r3, r7
		return ret;
	}

	timing->prescaler = core_clock / (bitrate * ts);
    7082:	9801      	ldr	r0, [sp, #4]
    7084:	fb03 4404 	mla	r4, r3, r4, r4
    7088:	fbb0 f4f4 	udiv	r4, r0, r4
    708c:	8134      	strh	r4, [r6, #8]

	return core_clock % (ts * timing->prescaler);
    708e:	b2a4      	uxth	r4, r4
    7090:	fb03 4404 	mla	r4, r3, r4, r4
    7094:	fbb0 f3f4 	udiv	r3, r0, r4
    7098:	fb04 0013 	mls	r0, r4, r3, r0
}
    709c:	b002      	add	sp, #8
    709e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000070a2 <mcp2515_get_core_clock>:
	*rate = dev_cfg->osc_freq / 2;
    70a2:	6843      	ldr	r3, [r0, #4]
    70a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    70a6:	085b      	lsrs	r3, r3, #1
    70a8:	600b      	str	r3, [r1, #0]
}
    70aa:	2000      	movs	r0, #0
    70ac:	4770      	bx	lr

000070ae <mcp2515_get_max_filters>:
}
    70ae:	2005      	movs	r0, #5
    70b0:	4770      	bx	lr

000070b2 <mcp2515_get_max_bitrate>:
	*max_bitrate = dev_cfg->max_bitrate;
    70b2:	6843      	ldr	r3, [r0, #4]
    70b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    70b6:	600b      	str	r3, [r1, #0]
}
    70b8:	2000      	movs	r0, #0
    70ba:	4770      	bx	lr

000070bc <mcp2515_get_capabilities>:
	*cap = CAN_MODE_NORMAL | CAN_MODE_LISTENONLY | CAN_MODE_LOOPBACK;
    70bc:	2303      	movs	r3, #3
    70be:	600b      	str	r3, [r1, #0]
}
    70c0:	2000      	movs	r0, #0
    70c2:	4770      	bx	lr

000070c4 <mcp2515_set_state_change_callback>:
	struct mcp2515_data *dev_data = dev->data;
    70c4:	6903      	ldr	r3, [r0, #16]
	dev_data->state_change_cb_data = user_data;
    70c6:	e9c3 1255 	strd	r1, r2, [r3, #340]	; 0x154
}
    70ca:	4770      	bx	lr

000070cc <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    70cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    70ce:	ab0b      	add	r3, sp, #44	; 0x2c
    70d0:	9305      	str	r3, [sp, #20]
    70d2:	9303      	str	r3, [sp, #12]
    70d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    70d6:	9302      	str	r3, [sp, #8]
    70d8:	2300      	movs	r3, #0
    70da:	e9cd 3300 	strd	r3, r3, [sp]
    70de:	4618      	mov	r0, r3
    70e0:	f7fa fc42 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    70e4:	b007      	add	sp, #28
    70e6:	f85d fb04 	ldr.w	pc, [sp], #4

000070ea <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    70ea:	f7fe bd59 	b.w	5ba0 <z_impl_k_mutex_lock>

000070ee <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    70ee:	f7fe bdd1 	b.w	5c94 <z_impl_k_mutex_unlock>

000070f2 <mcp2515_tx_done>:
{
    70f2:	b570      	push	{r4, r5, r6, lr}
	struct mcp2515_data *dev_data = dev->data;
    70f4:	6904      	ldr	r4, [r0, #16]
{
    70f6:	460d      	mov	r5, r1
    70f8:	eb04 06c5 	add.w	r6, r4, r5, lsl #3
    70fc:	4611      	mov	r1, r2
	can_tx_callback_t callback = dev_data->tx_cb[tx_idx].cb;
    70fe:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
	if (callback != NULL) {
    7102:	b1fb      	cbz	r3, 7144 <mcp2515_tx_done+0x52>
		callback(dev, status, dev_data->tx_cb[tx_idx].cb_arg);
    7104:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    7108:	4798      	blx	r3
		dev_data->tx_cb[tx_idx].cb = NULL;
    710a:	2300      	movs	r3, #0
    710c:	f8c6 30f4 	str.w	r3, [r6, #244]	; 0xf4
		k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7110:	f504 76ae 	add.w	r6, r4, #348	; 0x15c
    7114:	4630      	mov	r0, r6
    7116:	f04f 32ff 	mov.w	r2, #4294967295
    711a:	f04f 33ff 	mov.w	r3, #4294967295
    711e:	f7ff ffe4 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
		dev_data->tx_busy_map &= ~BIT(tx_idx);
    7122:	f894 30fc 	ldrb.w	r3, [r4, #252]	; 0xfc
    7126:	2201      	movs	r2, #1
    7128:	40aa      	lsls	r2, r5
    712a:	ea23 0302 	bic.w	r3, r3, r2
    712e:	f884 30fc 	strb.w	r3, [r4, #252]	; 0xfc
		k_mutex_unlock(&dev_data->mutex);
    7132:	4630      	mov	r0, r6
    7134:	f7ff ffdb 	bl	70ee <k_mutex_unlock.isra.0>
	z_impl_k_sem_give(sem);
    7138:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
}
    713c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7140:	f7fe bde4 	b.w	5d0c <z_impl_k_sem_give>
    7144:	bd70      	pop	{r4, r5, r6, pc}

00007146 <mcp2515_rx>:
{
    7146:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    714a:	0089      	lsls	r1, r1, #2
{
    714c:	b093      	sub	sp, #76	; 0x4c
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    714e:	f061 016f 	orn	r1, r1, #111	; 0x6f
	struct spi_buf tx_buf[] = {
    7152:	ab01      	add	r3, sp, #4
    7154:	2400      	movs	r4, #0
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ_RX_BUFFER | (nm << 1) };
    7156:	f88d 1004 	strb.w	r1, [sp, #4]
	struct spi_buf tx_buf[] = {
    715a:	2101      	movs	r1, #1
    715c:	e9cd 140b 	strd	r1, r4, [sp, #44]	; 0x2c
	struct spi_buf rx_buf[] = {
    7160:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
	struct spi_buf tx_buf[] = {
    7164:	930a      	str	r3, [sp, #40]	; 0x28
    7166:	220d      	movs	r2, #13
	const struct spi_buf_set tx = {
    7168:	2302      	movs	r3, #2
	struct spi_buf rx_buf[] = {
    716a:	a906      	add	r1, sp, #24
	const struct spi_buf_set rx = {
    716c:	ae0e      	add	r6, sp, #56	; 0x38
	struct spi_buf rx_buf[] = {
    716e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
	const struct spi_buf_set rx = {
    7172:	e9cd 6304 	strd	r6, r3, [sp, #16]
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
    7176:	6841      	ldr	r1, [r0, #4]
	struct spi_buf tx_buf[] = {
    7178:	920d      	str	r2, [sp, #52]	; 0x34
	const struct spi_buf_set tx = {
    717a:	ad0a      	add	r5, sp, #40	; 0x28
    717c:	9502      	str	r5, [sp, #8]
    717e:	9303      	str	r3, [sp, #12]
{
    7180:	4607      	mov	r7, r0
    7182:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7186:	6883      	ldr	r3, [r0, #8]
    7188:	aa02      	add	r2, sp, #8
    718a:	f8d3 8000 	ldr.w	r8, [r3]
    718e:	ab04      	add	r3, sp, #16
    7190:	47c0      	blx	r8
	memset(target, 0, sizeof(*target));
    7192:	2210      	movs	r2, #16
    7194:	4621      	mov	r1, r4
    7196:	4628      	mov	r0, r5
    7198:	f7ff fddc 	bl	6d54 <memset>
	if (source[MCP2515_FRAME_OFFSET_SIDL] & BIT(3)) {
    719c:	f89d 2019 	ldrb.w	r2, [sp, #25]
    71a0:	f89d 0018 	ldrb.w	r0, [sp, #24]
    71a4:	f012 0f08 	tst.w	r2, #8
    71a8:	ea4f 1152 	mov.w	r1, r2, lsr #5
    71ac:	d05f      	beq.n	726e <mcp2515_rx+0x128>
		target->flags |= CAN_FRAME_IDE;
    71ae:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    71b2:	f043 0301 	orr.w	r3, r3, #1
    71b6:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
    71ba:	f89d 301a 	ldrb.w	r3, [sp, #26]
    71be:	021b      	lsls	r3, r3, #8
    71c0:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
			source[MCP2515_FRAME_OFFSET_EID0];
    71c4:	f89d 001b 	ldrb.w	r0, [sp, #27]
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
    71c8:	0412      	lsls	r2, r2, #16
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
    71ca:	4303      	orrs	r3, r0
    71cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
			((source[MCP2515_FRAME_OFFSET_SIDL] & 0x03) << 16) |
    71d0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
			(source[MCP2515_FRAME_OFFSET_EID8] << 8) |
    71d4:	4313      	orrs	r3, r2
		target->id =
    71d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    71d8:	f363 021c 	bfi	r2, r3, #0, #29
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
    71dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
		target->id =
    71e0:	920a      	str	r2, [sp, #40]	; 0x28
	target->dlc = source[MCP2515_FRAME_OFFSET_DLC] & 0x0F;
    71e2:	f003 020f 	and.w	r2, r3, #15
    71e6:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
	if ((source[MCP2515_FRAME_OFFSET_DLC] & BIT(6)) != 0) {
    71ea:	065a      	lsls	r2, r3, #25
		target->flags |= CAN_FRAME_RTR;
    71ec:	bf42      	ittt	mi
    71ee:	f89d 302d 	ldrbmi.w	r3, [sp, #45]	; 0x2d
    71f2:	f043 0302 	orrmi.w	r3, r3, #2
    71f6:	f88d 302d 	strbmi.w	r3, [sp, #45]	; 0x2d
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    71fa:	aa07      	add	r2, sp, #28
    71fc:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
{
    7200:	2408      	movs	r4, #8
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    7202:	3c01      	subs	r4, #1
		target->data[data_idx] = source[MCP2515_FRAME_OFFSET_D0 +
    7204:	f812 1f01 	ldrb.w	r1, [r2, #1]!
    7208:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; data_idx < CAN_MAX_DLC; data_idx++) {
    720c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    7210:	d1f7      	bne.n	7202 <mcp2515_rx+0xbc>
	struct mcp2515_data *dev_data = dev->data;
    7212:	f8d7 8010 	ldr.w	r8, [r7, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7216:	f508 7aae 	add.w	sl, r8, #348	; 0x15c
    721a:	f04f 32ff 	mov.w	r2, #4294967295
    721e:	f04f 33ff 	mov.w	r3, #4294967295
    7222:	4650      	mov	r0, sl
    7224:	f7ff ff61 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
    7228:	f508 7982 	add.w	r9, r8, #260	; 0x104
		if (!(BIT(filter_id) & dev_data->filter_usage)) {
    722c:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
    7230:	40e3      	lsrs	r3, r4
    7232:	07db      	lsls	r3, r3, #31
    7234:	d510      	bpl.n	7258 <mcp2515_rx+0x112>
 * @return true if the CAN filter matches the CAN frame, false otherwise
 */
static inline bool can_utils_filter_match(const struct can_frame *frame,
					  struct can_filter *filter)
{
	if (((frame->flags & CAN_FRAME_IDE) != 0) && ((filter->flags & CAN_FILTER_IDE) == 0)) {
    7236:	f104 0325 	add.w	r3, r4, #37	; 0x25
    723a:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    723e:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    7242:	7ad2      	ldrb	r2, [r2, #11]
    7244:	07c8      	lsls	r0, r1, #31
    7246:	ea4f 1252 	mov.w	r2, r2, lsr #5
    724a:	d501      	bpl.n	7250 <mcp2515_rx+0x10a>
    724c:	07d0      	lsls	r0, r2, #31
    724e:	d503      	bpl.n	7258 <mcp2515_rx+0x112>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) == 0) && (filter->flags & CAN_FILTER_DATA) == 0) {
    7250:	0789      	lsls	r1, r1, #30
    7252:	d40f      	bmi.n	7274 <mcp2515_rx+0x12e>
    7254:	2a03      	cmp	r2, #3
    7256:	d80f      	bhi.n	7278 <mcp2515_rx+0x132>
	for (; filter_id < CONFIG_CAN_MAX_FILTER; filter_id++) {
    7258:	3401      	adds	r4, #1
    725a:	2c05      	cmp	r4, #5
    725c:	f109 0904 	add.w	r9, r9, #4
    7260:	d1e4      	bne.n	722c <mcp2515_rx+0xe6>
	k_mutex_unlock(&dev_data->mutex);
    7262:	4650      	mov	r0, sl
    7264:	f7ff ff43 	bl	70ee <k_mutex_unlock.isra.0>
}
    7268:	b013      	add	sp, #76	; 0x4c
    726a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		target->id = (source[MCP2515_FRAME_OFFSET_SIDH] << 3) |
    726e:	ea41 03c0 	orr.w	r3, r1, r0, lsl #3
    7272:	e7b0      	b.n	71d6 <mcp2515_rx+0x90>
		return false;
	}

	if (((frame->flags & CAN_FRAME_RTR) != 0) && (filter->flags & CAN_FILTER_RTR) == 0) {
    7274:	0792      	lsls	r2, r2, #30
    7276:	d5ef      	bpl.n	7258 <mcp2515_rx+0x112>
		return false;
	}

	if ((frame->id ^ filter->id) & filter->mask) {
    7278:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    727c:	990a      	ldr	r1, [sp, #40]	; 0x28
    727e:	685a      	ldr	r2, [r3, #4]
    7280:	689b      	ldr	r3, [r3, #8]
    7282:	404a      	eors	r2, r1
    7284:	f3c3 031c 	ubfx	r3, r3, #0, #29
    7288:	421a      	tst	r2, r3
    728a:	d1e5      	bne.n	7258 <mcp2515_rx+0x112>
		tmp_frame = *frame;
    728c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
		callback = dev_data->rx_cb[filter_id];
    7290:	f8d9 b000 	ldr.w	fp, [r9]
		tmp_frame = *frame;
    7294:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
		callback(dev, &tmp_frame, dev_data->cb_arg[filter_id]);
    7298:	4631      	mov	r1, r6
    729a:	f8d9 2014 	ldr.w	r2, [r9, #20]
    729e:	4638      	mov	r0, r7
    72a0:	47d8      	blx	fp
    72a2:	e7d9      	b.n	7258 <mcp2515_rx+0x112>

000072a4 <mcp2515_add_rx_filter>:
{
    72a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct mcp2515_data *dev_data = dev->data;
    72a8:	6905      	ldr	r5, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    72aa:	f505 78ae 	add.w	r8, r5, #348	; 0x15c
{
    72ae:	4616      	mov	r6, r2
    72b0:	4699      	mov	r9, r3
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    72b2:	f04f 32ff 	mov.w	r2, #4294967295
    72b6:	f04f 33ff 	mov.w	r3, #4294967295
    72ba:	4640      	mov	r0, r8
{
    72bc:	460f      	mov	r7, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    72be:	f7ff ff14 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	while ((BIT(filter_id) & dev_data->filter_usage)
    72c2:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
	int filter_id = 0;
    72c6:	2400      	movs	r4, #0
	while ((BIT(filter_id) & dev_data->filter_usage)
    72c8:	fa23 f204 	lsr.w	r2, r3, r4
	       && (filter_id < CONFIG_CAN_MAX_FILTER)) {
    72cc:	07d2      	lsls	r2, r2, #31
    72ce:	d506      	bpl.n	72de <mcp2515_add_rx_filter+0x3a>
    72d0:	2c05      	cmp	r4, #5
    72d2:	d102      	bne.n	72da <mcp2515_add_rx_filter+0x36>
		filter_id = -ENOSPC;
    72d4:	f06f 041b 	mvn.w	r4, #27
    72d8:	e016      	b.n	7308 <mcp2515_add_rx_filter+0x64>
		filter_id++;
    72da:	3401      	adds	r4, #1
    72dc:	e7f4      	b.n	72c8 <mcp2515_add_rx_filter+0x24>
	if (filter_id < CONFIG_CAN_MAX_FILTER) {
    72de:	2c05      	cmp	r4, #5
    72e0:	d0f8      	beq.n	72d4 <mcp2515_add_rx_filter+0x30>
		dev_data->filter_usage |= BIT(filter_id);
    72e2:	2001      	movs	r0, #1
    72e4:	40a0      	lsls	r0, r4
    72e6:	4318      	orrs	r0, r3
    72e8:	f8c5 0100 	str.w	r0, [r5, #256]	; 0x100
		dev_data->filter[filter_id] = *filter;
    72ec:	e899 0003 	ldmia.w	r9, {r0, r1}
    72f0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    72f4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    72f8:	f503 7396 	add.w	r3, r3, #300	; 0x12c
    72fc:	e883 0003 	stmia.w	r3, {r0, r1}
		dev_data->rx_cb[filter_id] = rx_cb;
    7300:	f8c5 7104 	str.w	r7, [r5, #260]	; 0x104
		dev_data->cb_arg[filter_id] = cb_arg;
    7304:	f8c5 6118 	str.w	r6, [r5, #280]	; 0x118
	k_mutex_unlock(&dev_data->mutex);
    7308:	4640      	mov	r0, r8
    730a:	f7ff fef0 	bl	70ee <k_mutex_unlock.isra.0>
}
    730e:	4620      	mov	r0, r4
    7310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007314 <mcp2515_remove_rx_filter>:
{
    7314:	b570      	push	{r4, r5, r6, lr}
	struct mcp2515_data *dev_data = dev->data;
    7316:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7318:	f504 76ae 	add.w	r6, r4, #348	; 0x15c
    731c:	4630      	mov	r0, r6
    731e:	f04f 33ff 	mov.w	r3, #4294967295
    7322:	f04f 32ff 	mov.w	r2, #4294967295
{
    7326:	460d      	mov	r5, r1
	k_mutex_lock(&dev_data->mutex, K_FOREVER);
    7328:	f7ff fedf 	bl	70ea <k_mutex_lock.constprop.0.isra.0>
	dev_data->filter_usage &= ~BIT(filter_id);
    732c:	2301      	movs	r3, #1
    732e:	fa03 f105 	lsl.w	r1, r3, r5
    7332:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    7336:	ea23 0301 	bic.w	r3, r3, r1
    733a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	k_mutex_unlock(&dev_data->mutex);
    733e:	4630      	mov	r0, r6
}
    7340:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_mutex_unlock(&dev_data->mutex);
    7344:	f7ff bed3 	b.w	70ee <k_mutex_unlock.isra.0>

00007348 <mcp2515_int_gpio_callback>:
    7348:	f101 00d4 	add.w	r0, r1, #212	; 0xd4
    734c:	f7fe bcde 	b.w	5d0c <z_impl_k_sem_give>

00007350 <mcp2515_cmd_read_reg.isra.0>:
static int mcp2515_cmd_read_reg(const struct device *dev, uint8_t reg_addr,
    7350:	b530      	push	{r4, r5, lr}
    7352:	b08f      	sub	sp, #60	; 0x3c
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
    7354:	2403      	movs	r4, #3
    7356:	f88d 1005 	strb.w	r1, [sp, #5]
	struct spi_buf tx_buf[] = {
    735a:	a901      	add	r1, sp, #4
	struct spi_buf rx_buf[] = {
    735c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
	uint8_t cmd_buf[] = { MCP2515_OPCODE_READ, reg_addr };
    7360:	f88d 4004 	strb.w	r4, [sp, #4]
	struct spi_buf tx_buf[] = {
    7364:	9106      	str	r1, [sp, #24]
    7366:	2400      	movs	r4, #0
    7368:	2102      	movs	r1, #2
    736a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set tx = {
    736c:	ad06      	add	r5, sp, #24
	const struct spi_buf_set rx = {
    736e:	ab0a      	add	r3, sp, #40	; 0x28
	struct spi_buf tx_buf[] = {
    7370:	e9cd 1407 	strd	r1, r4, [sp, #28]
	const struct spi_buf_set tx = {
    7374:	e9cd 5102 	strd	r5, r1, [sp, #8]
	struct spi_buf rx_buf[] = {
    7378:	e9cd 410a 	strd	r4, r1, [sp, #40]	; 0x28
	const struct spi_buf_set rx = {
    737c:	e9cd 3104 	strd	r3, r1, [sp, #16]
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
    7380:	4601      	mov	r1, r0
    7382:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7386:	6883      	ldr	r3, [r0, #8]
    7388:	aa02      	add	r2, sp, #8
    738a:	681c      	ldr	r4, [r3, #0]
    738c:	ab04      	add	r3, sp, #16
    738e:	47a0      	blx	r4
}
    7390:	b00f      	add	sp, #60	; 0x3c
    7392:	bd30      	pop	{r4, r5, pc}

00007394 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
    7394:	b410      	push	{r4}
    7396:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
    7398:	4601      	mov	r1, r0
    739a:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    739e:	6883      	ldr	r3, [r0, #8]
    73a0:	681c      	ldr	r4, [r3, #0]
    73a2:	2300      	movs	r3, #0
    73a4:	46a4      	mov	ip, r4
}
    73a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    73aa:	4760      	bx	ip

000073ac <mcp2515_cmd_bit_modify.isra.0>:
static int mcp2515_cmd_bit_modify(const struct device *dev, uint8_t reg_addr,
    73ac:	b510      	push	{r4, lr}
    73ae:	b086      	sub	sp, #24
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
    73b0:	2405      	movs	r4, #5
    73b2:	f88d 3007 	strb.w	r3, [sp, #7]
	const struct spi_buf tx_buf = {
    73b6:	ab01      	add	r3, sp, #4
    73b8:	9302      	str	r3, [sp, #8]
    73ba:	2304      	movs	r3, #4
    73bc:	9303      	str	r3, [sp, #12]
	const struct spi_buf_set tx = {
    73be:	ab02      	add	r3, sp, #8
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
    73c0:	f88d 1005 	strb.w	r1, [sp, #5]
	const struct spi_buf_set tx = {
    73c4:	9304      	str	r3, [sp, #16]
	return spi_write_dt(&dev_cfg->bus, &tx);
    73c6:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
    73c8:	2301      	movs	r3, #1
	uint8_t cmd_buf[] = { MCP2515_OPCODE_BIT_MODIFY, reg_addr, mask, data };
    73ca:	f88d 4004 	strb.w	r4, [sp, #4]
    73ce:	f88d 2006 	strb.w	r2, [sp, #6]
	const struct spi_buf_set tx = {
    73d2:	9305      	str	r3, [sp, #20]
	return spi_write_dt(&dev_cfg->bus, &tx);
    73d4:	f7ff ffde 	bl	7394 <spi_write_dt>
}
    73d8:	b006      	add	sp, #24
    73da:	bd10      	pop	{r4, pc}

000073dc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    73dc:	4770      	bx	lr

000073de <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    73de:	f100 0350 	add.w	r3, r0, #80	; 0x50
    73e2:	009b      	lsls	r3, r3, #2
    73e4:	b29b      	uxth	r3, r3
    73e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    73ea:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    73ee:	2200      	movs	r2, #0
    73f0:	601a      	str	r2, [r3, #0]
    73f2:	681b      	ldr	r3, [r3, #0]
}
    73f4:	4770      	bx	lr

000073f6 <sys_clock_cycle_get_32>:
{
    73f6:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    73f8:	f7fd f890 	bl	451c <z_nrf_rtc_timer_read>
}
    73fc:	bd08      	pop	{r3, pc}

000073fe <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    73fe:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7400:	6843      	ldr	r3, [r0, #4]
    7402:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    7404:	7a05      	ldrb	r5, [r0, #8]
    7406:	6844      	ldr	r4, [r0, #4]
    7408:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    740c:	42a3      	cmp	r3, r4
    740e:	d302      	bcc.n	7416 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    7410:	f06f 0001 	mvn.w	r0, #1
}
    7414:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7416:	795c      	ldrb	r4, [r3, #5]
    7418:	428c      	cmp	r4, r1
    741a:	d001      	beq.n	7420 <pinctrl_lookup_state+0x22>
		(*state)++;
    741c:	3308      	adds	r3, #8
    741e:	e7f0      	b.n	7402 <pinctrl_lookup_state+0x4>
			return 0;
    7420:	2000      	movs	r0, #0
    7422:	e7f7      	b.n	7414 <pinctrl_lookup_state+0x16>

00007424 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7424:	4700      	bx	r0

00007426 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7426:	f000 badb 	b.w	79e0 <z_impl_k_busy_wait>

0000742a <clock_stop>:
{
    742a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    742c:	4604      	mov	r4, r0
    742e:	b118      	cbz	r0, 7438 <clock_stop+0xe>
    7430:	2801      	cmp	r0, #1
    7432:	d020      	beq.n	7476 <clock_stop+0x4c>
}
    7434:	b003      	add	sp, #12
    7436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7438:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    743c:	2202      	movs	r2, #2
    743e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7442:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    7446:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    744a:	2201      	movs	r2, #1
    744c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    744e:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7450:	2301      	movs	r3, #1
    7452:	f88d 3007 	strb.w	r3, [sp, #7]
    7456:	f242 7510 	movw	r5, #10000	; 0x2710
    745a:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    745e:	b1bc      	cbz	r4, 7490 <clock_stop+0x66>
    7460:	2c01      	cmp	r4, #1
    7462:	d1e7      	bne.n	7434 <clock_stop+0xa>
            if (p_clk_src != NULL)
    7464:	b38f      	cbz	r7, 74ca <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7466:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    746a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    746e:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7470:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    7474:	e014      	b.n	74a0 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    7476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    747a:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    747c:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7480:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7484:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7488:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    748a:	f10d 0707 	add.w	r7, sp, #7
    748e:	e7df      	b.n	7450 <clock_stop+0x26>
            if (p_clk_src != NULL)
    7490:	b18f      	cbz	r7, 74b6 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7492:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7496:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    749a:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    749c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74a0:	03da      	lsls	r2, r3, #15
    74a2:	d5c7      	bpl.n	7434 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    74a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
    74a8:	2801      	cmp	r0, #1
    74aa:	d1c3      	bne.n	7434 <clock_stop+0xa>
    74ac:	f7ff ffbb 	bl	7426 <nrfx_busy_wait>
    74b0:	3d01      	subs	r5, #1
    74b2:	d1d4      	bne.n	745e <clock_stop+0x34>
    74b4:	e7be      	b.n	7434 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    74b6:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    74ba:	03d9      	lsls	r1, r3, #15
    74bc:	d5ba      	bpl.n	7434 <clock_stop+0xa>
    74be:	2001      	movs	r0, #1
    74c0:	f7ff ffb1 	bl	7426 <nrfx_busy_wait>
    74c4:	3d01      	subs	r5, #1
    74c6:	d1f6      	bne.n	74b6 <clock_stop+0x8c>
    74c8:	e7b4      	b.n	7434 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74ca:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    74ce:	03db      	lsls	r3, r3, #15
    74d0:	d5b0      	bpl.n	7434 <clock_stop+0xa>
    74d2:	2001      	movs	r0, #1
    74d4:	f7ff ffa7 	bl	7426 <nrfx_busy_wait>
    74d8:	3d01      	subs	r5, #1
    74da:	d1f6      	bne.n	74ca <clock_stop+0xa0>
    74dc:	e7aa      	b.n	7434 <clock_stop+0xa>

000074de <nrfx_clock_enable>:
{
    74de:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    74e0:	2000      	movs	r0, #0
    74e2:	f7fa feb7 	bl	2254 <arch_irq_is_enabled>
    74e6:	b908      	cbnz	r0, 74ec <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    74e8:	f7fa fe92 	bl	2210 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    74ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74f0:	2200      	movs	r2, #0
    74f2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    74f6:	bd08      	pop	{r3, pc}

000074f8 <nrfx_clock_start>:
{
    74f8:	b508      	push	{r3, lr}
    switch (domain)
    74fa:	b110      	cbz	r0, 7502 <nrfx_clock_start+0xa>
    74fc:	2801      	cmp	r0, #1
    74fe:	d02c      	beq.n	755a <nrfx_clock_start+0x62>
}
    7500:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7506:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    750a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    750e:	03c8      	lsls	r0, r1, #15
    7510:	d40b      	bmi.n	752a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    7512:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    7516:	07d9      	lsls	r1, r3, #31
    7518:	d50f      	bpl.n	753a <nrfx_clock_start+0x42>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    751a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    751e:	079b      	lsls	r3, r3, #30
    7520:	d408      	bmi.n	7534 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    7522:	2302      	movs	r3, #2
    7524:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    7528:	e7ea      	b.n	7500 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    752a:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    752e:	2b01      	cmp	r3, #1
    7530:	d004      	beq.n	753c <nrfx_clock_start+0x44>
    7532:	b113      	cbz	r3, 753a <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7534:	2000      	movs	r0, #0
    7536:	f7ff ff78 	bl	742a <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    753a:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    753c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7540:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7544:	2300      	movs	r3, #0
    7546:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    754a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    754e:	2302      	movs	r3, #2
    7550:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7554:	2301      	movs	r3, #1
    7556:	6093      	str	r3, [r2, #8]
}
    7558:	e7d2      	b.n	7500 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    755a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    755e:	2200      	movs	r2, #0
    7560:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7564:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    7568:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    756c:	6018      	str	r0, [r3, #0]
}
    756e:	e7c7      	b.n	7500 <nrfx_clock_start+0x8>

00007570 <nrfx_clock_stop>:
    clock_stop(domain);
    7570:	f7ff bf5b 	b.w	742a <clock_stop>

00007574 <nrf_gpio_reconfigure>:
{
    7574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7576:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7578:	a801      	add	r0, sp, #4
{
    757a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    757e:	4616      	mov	r6, r2
    7580:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7582:	f7fd fb29 	bl	4bd8 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7586:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7588:	f1b6 0c00 	subs.w	ip, r6, #0
    758c:	bf18      	it	ne
    758e:	f04f 0c01 	movne.w	ip, #1
    7592:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7596:	1e0b      	subs	r3, r1, #0
    7598:	bf18      	it	ne
    759a:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    759c:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    759e:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75a2:	bf14      	ite	ne
    75a4:	f04f 0c0c 	movne.w	ip, #12
    75a8:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    75ac:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    75ae:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    75b2:	bf14      	ite	ne
    75b4:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    75b8:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    75bc:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    75be:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    75c2:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    75c6:	bf14      	ite	ne
    75c8:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    75cc:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    75d0:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    75d4:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    75d8:	b101      	cbz	r1, 75dc <nrf_gpio_reconfigure+0x68>
    75da:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    75dc:	b10e      	cbz	r6, 75e2 <nrf_gpio_reconfigure+0x6e>
    75de:	7836      	ldrb	r6, [r6, #0]
    75e0:	0076      	lsls	r6, r6, #1
    75e2:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    75e4:	b10d      	cbz	r5, 75ea <nrf_gpio_reconfigure+0x76>
    75e6:	782d      	ldrb	r5, [r5, #0]
    75e8:	00ad      	lsls	r5, r5, #2
    75ea:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    75ec:	b10c      	cbz	r4, 75f2 <nrf_gpio_reconfigure+0x7e>
    75ee:	7824      	ldrb	r4, [r4, #0]
    75f0:	0224      	lsls	r4, r4, #8
    75f2:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    75f4:	b10f      	cbz	r7, 75fa <nrf_gpio_reconfigure+0x86>
    75f6:	783f      	ldrb	r7, [r7, #0]
    75f8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    75fa:	430c      	orrs	r4, r1
    75fc:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    75fe:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    7602:	b003      	add	sp, #12
    7604:	bdf0      	pop	{r4, r5, r6, r7, pc}

00007606 <nrf_gpio_cfg_sense_set>:
{
    7606:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7608:	f10d 030f 	add.w	r3, sp, #15
    760c:	9301      	str	r3, [sp, #4]
    760e:	2300      	movs	r3, #0
{
    7610:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    7614:	9300      	str	r3, [sp, #0]
    7616:	461a      	mov	r2, r3
    7618:	4619      	mov	r1, r3
    761a:	f7ff ffab 	bl	7574 <nrf_gpio_reconfigure>
}
    761e:	b005      	add	sp, #20
    7620:	f85d fb04 	ldr.w	pc, [sp], #4

00007624 <nrf_gpio_cfg_default>:
{
    7624:	b507      	push	{r0, r1, r2, lr}
    7626:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7628:	a801      	add	r0, sp, #4
    762a:	f7fd fe3f 	bl	52ac <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    762e:	9b01      	ldr	r3, [sp, #4]
    7630:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7634:	2202      	movs	r2, #2
    7636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
    763a:	b003      	add	sp, #12
    763c:	f85d fb04 	ldr.w	pc, [sp], #4

00007640 <nrf_gpio_pin_set>:
{
    7640:	b507      	push	{r0, r1, r2, lr}
    7642:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7644:	a801      	add	r0, sp, #4
    7646:	f7fd fe31 	bl	52ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    764a:	9a01      	ldr	r2, [sp, #4]
    764c:	2301      	movs	r3, #1
    764e:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    7650:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    7654:	b003      	add	sp, #12
    7656:	f85d fb04 	ldr.w	pc, [sp], #4

0000765a <nrf_gpio_pin_clear>:
{
    765a:	b507      	push	{r0, r1, r2, lr}
    765c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    765e:	a801      	add	r0, sp, #4
    7660:	f7fd fe24 	bl	52ac <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7664:	9a01      	ldr	r2, [sp, #4]
    7666:	2301      	movs	r3, #1
    7668:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    766a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    766e:	b003      	add	sp, #12
    7670:	f85d fb04 	ldr.w	pc, [sp], #4

00007674 <transfer_byte>:
{
    7674:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    7676:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    767a:	698a      	ldr	r2, [r1, #24]
    767c:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    767e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7682:	6a0b      	ldr	r3, [r1, #32]
    7684:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    7686:	bf3e      	ittt	cc
    7688:	694a      	ldrcc	r2, [r1, #20]
    768a:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    768e:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    7690:	6a0b      	ldr	r3, [r1, #32]
    if (p_cb->abort)
    7692:	f891 5024 	ldrb.w	r5, [r1, #36]	; 0x24
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    7696:	690c      	ldr	r4, [r1, #16]
    ++p_cb->bytes_transferred;
    7698:	1c5a      	adds	r2, r3, #1
    769a:	620a      	str	r2, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    769c:	3302      	adds	r3, #2
    if (p_cb->abort)
    769e:	b135      	cbz	r5, 76ae <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    76a0:	42a3      	cmp	r3, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    76a2:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    76a4:	bf38      	it	cc
    76a6:	610b      	strcc	r3, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    76a8:	429c      	cmp	r4, r3
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    76aa:	bf88      	it	hi
    76ac:	618b      	strhi	r3, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    76ae:	690d      	ldr	r5, [r1, #16]
    76b0:	429d      	cmp	r5, r3
    76b2:	d905      	bls.n	76c0 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    76b4:	68ca      	ldr	r2, [r1, #12]
    p_reg->TXD = data;
    76b6:	5cd3      	ldrb	r3, [r2, r3]
    76b8:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    76bc:	2001      	movs	r0, #1
    76be:	e00a      	b.n	76d6 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    76c0:	698c      	ldr	r4, [r1, #24]
    76c2:	429c      	cmp	r4, r3
    76c4:	d901      	bls.n	76ca <transfer_byte+0x56>
    76c6:	7fcb      	ldrb	r3, [r1, #31]
    76c8:	e7f6      	b.n	76b8 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    76ca:	42aa      	cmp	r2, r5
    76cc:	d3f6      	bcc.n	76bc <transfer_byte+0x48>
    76ce:	42a2      	cmp	r2, r4
    76d0:	bf2c      	ite	cs
    76d2:	2000      	movcs	r0, #0
    76d4:	2001      	movcc	r0, #1
}
    76d6:	b003      	add	sp, #12
    76d8:	bd30      	pop	{r4, r5, pc}

000076da <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    76da:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    76dc:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    76de:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    76e0:	bf9c      	itt	ls
    76e2:	6881      	ldrls	r1, [r0, #8]
    76e4:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    76e6:	3b01      	subs	r3, #1
    76e8:	1a98      	subs	r0, r3, r2
}
    76ea:	4770      	bx	lr

000076ec <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    76ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    76f0:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    76f4:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    76f6:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    76fa:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    76fc:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    76fe:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    7700:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    7702:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    7704:	d904      	bls.n	7710 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    7706:	f7ff fb1a 	bl	6d3e <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    770a:	60ec      	str	r4, [r5, #12]
}
    770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7710:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    7712:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    7716:	f7ff fb12 	bl	6d3e <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    771a:	6868      	ldr	r0, [r5, #4]
    771c:	4622      	mov	r2, r4
    771e:	19b9      	adds	r1, r7, r6
    7720:	e7f1      	b.n	7706 <_WriteNoCheck+0x1a>

00007722 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    7726:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    7728:	4606      	mov	r6, r0
    772a:	4689      	mov	r9, r1
    772c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    772e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    7732:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7734:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    7736:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    7738:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    773a:	bf28      	it	cs
    773c:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    773e:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7740:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    7742:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    7746:	bf28      	it	cs
    7748:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    774a:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    774c:	429c      	cmp	r4, r3
    774e:	bf28      	it	cs
    7750:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    7752:	4649      	mov	r1, r9
    7754:	4428      	add	r0, r5
    7756:	4622      	mov	r2, r4
    7758:	f7ff faf1 	bl	6d3e <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    775c:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    775e:	4425      	add	r5, r4
      WrOff = 0u;
    7760:	42ab      	cmp	r3, r5
    7762:	bf08      	it	eq
    7764:	2500      	moveq	r5, #0
  } while (NumBytes);
    7766:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    7768:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    776a:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    776c:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    776e:	d1e0      	bne.n	7732 <_WriteBlocking+0x10>
}
    7770:	4640      	mov	r0, r8
    7772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007776 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    7776:	f7fd bf2b 	b.w	55d0 <_DoInit>

0000777a <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    777a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    777c:	f7ff fffb 	bl	7776 <SEGGER_RTT_Init>

	return 0;
}
    7780:	2000      	movs	r0, #0
    7782:	bd08      	pop	{r3, pc}

00007784 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    7784:	4770      	bx	lr

00007786 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    7786:	b140      	cbz	r0, 779a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    7788:	68c3      	ldr	r3, [r0, #12]
    778a:	7858      	ldrb	r0, [r3, #1]
    778c:	f010 0001 	ands.w	r0, r0, #1
    7790:	bf1e      	ittt	ne
    7792:	7818      	ldrbne	r0, [r3, #0]
    7794:	fab0 f080 	clzne	r0, r0
    7798:	0940      	lsrne	r0, r0, #5
}
    779a:	4770      	bx	lr

0000779c <z_log_msg_runtime_create.constprop.0>:
static inline void z_log_msg_runtime_create(uint8_t domain_id,
    779c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    779e:	ab0b      	add	r3, sp, #44	; 0x2c
    77a0:	9305      	str	r3, [sp, #20]
    77a2:	9303      	str	r3, [sp, #12]
    77a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    77a6:	9302      	str	r3, [sp, #8]
    77a8:	2300      	movs	r3, #0
    77aa:	e9cd 3300 	strd	r3, r3, [sp]
    77ae:	2201      	movs	r2, #1
    77b0:	4618      	mov	r0, r3
    77b2:	f7fa f8d9 	bl	1968 <z_impl_z_log_msg_runtime_vcreate>
}
    77b6:	b007      	add	sp, #28
    77b8:	f85d fb04 	ldr.w	pc, [sp], #4

000077bc <z_early_memset>:
	(void) memset(dst, c, n);
    77bc:	f7ff baca 	b.w	6d54 <memset>

000077c0 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    77c0:	f7ff babd 	b.w	6d3e <memcpy>

000077c4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    77c4:	f3ef 8005 	mrs	r0, IPSR
}
    77c8:	3800      	subs	r0, #0
    77ca:	bf18      	it	ne
    77cc:	2001      	movne	r0, #1
    77ce:	4770      	bx	lr

000077d0 <k_thread_name_get>:
}
    77d0:	2000      	movs	r0, #0
    77d2:	4770      	bx	lr

000077d4 <z_pm_save_idle_exit>:
{
    77d4:	b508      	push	{r3, lr}
	pm_system_resume();
    77d6:	f7fa fb5d 	bl	1e94 <pm_system_resume>
}
    77da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    77de:	f7ff bdfd 	b.w	73dc <sys_clock_idle_exit>

000077e2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    77e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    77e6:	428b      	cmp	r3, r1
    77e8:	d001      	beq.n	77ee <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    77ea:	f7fe bc39 	b.w	6060 <z_set_prio>
}
    77ee:	2000      	movs	r0, #0
    77f0:	4770      	bx	lr

000077f2 <z_impl_k_mutex_init>:
{
    77f2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    77f4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    77f6:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    77fa:	e9c3 3300 	strd	r3, r3, [r3]
}
    77fe:	4770      	bx	lr

00007800 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    7800:	b13a      	cbz	r2, 7812 <z_impl_k_sem_init+0x12>
    7802:	428a      	cmp	r2, r1
    7804:	d305      	bcc.n	7812 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    7806:	e9c0 1202 	strd	r1, r2, [r0, #8]
    780a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    780e:	2000      	movs	r0, #0
    7810:	4770      	bx	lr
		return -EINVAL;
    7812:	f06f 0015 	mvn.w	r0, #21
}
    7816:	4770      	bx	lr

00007818 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    7818:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    781c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    781e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7820:	2300      	movs	r3, #0
	node->prev = NULL;
    7822:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    7826:	4770      	bx	lr

00007828 <unpend_thread_no_timeout>:
{
    7828:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    782a:	f7ff fff5 	bl	7818 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    782e:	7b43      	ldrb	r3, [r0, #13]
    7830:	f023 0302 	bic.w	r3, r3, #2
    7834:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7836:	2300      	movs	r3, #0
    7838:	6083      	str	r3, [r0, #8]
}
    783a:	bd08      	pop	{r3, pc}

0000783c <z_thread_timeout>:
{
    783c:	b510      	push	{r4, lr}
    783e:	4601      	mov	r1, r0
	__asm__ volatile(
    7840:	f04f 0320 	mov.w	r3, #32
    7844:	f3ef 8411 	mrs	r4, BASEPRI
    7848:	f383 8812 	msr	BASEPRI_MAX, r3
    784c:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7850:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7854:	f013 0f28 	tst.w	r3, #40	; 0x28
    7858:	d10d      	bne.n	7876 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    785a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    785e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7860:	b10b      	cbz	r3, 7866 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7862:	f7ff ffe1 	bl	7828 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7866:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    786a:	f023 0314 	bic.w	r3, r3, #20
    786e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7872:	f7fe faff 	bl	5e74 <ready_thread>
	__asm__ volatile(
    7876:	f384 8811 	msr	BASEPRI, r4
    787a:	f3bf 8f6f 	isb	sy
}
    787e:	bd10      	pop	{r4, pc}

00007880 <add_to_waitq_locked>:
{
    7880:	b538      	push	{r3, r4, r5, lr}
    7882:	4604      	mov	r4, r0
    7884:	460d      	mov	r5, r1
	unready_thread(thread);
    7886:	f7fe fb29 	bl	5edc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    788a:	7b63      	ldrb	r3, [r4, #13]
    788c:	f043 0302 	orr.w	r3, r3, #2
    7890:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7892:	b1e5      	cbz	r5, 78ce <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    7894:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    7896:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7898:	429d      	cmp	r5, r3
    789a:	d109      	bne.n	78b0 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    789c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    789e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    78a2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    78a4:	606c      	str	r4, [r5, #4]
}
    78a6:	e012      	b.n	78ce <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    78a8:	686a      	ldr	r2, [r5, #4]
    78aa:	4293      	cmp	r3, r2
    78ac:	d0f6      	beq.n	789c <add_to_waitq_locked+0x1c>
    78ae:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    78b0:	2b00      	cmp	r3, #0
    78b2:	d0f3      	beq.n	789c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    78b4:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    78b8:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    78bc:	428a      	cmp	r2, r1
    78be:	d0f3      	beq.n	78a8 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    78c0:	4291      	cmp	r1, r2
    78c2:	ddf1      	ble.n	78a8 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    78c4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    78c6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    78ca:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    78cc:	605c      	str	r4, [r3, #4]
}
    78ce:	bd38      	pop	{r3, r4, r5, pc}

000078d0 <z_ready_thread>:
{
    78d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    78d2:	f04f 0320 	mov.w	r3, #32
    78d6:	f3ef 8411 	mrs	r4, BASEPRI
    78da:	f383 8812 	msr	BASEPRI_MAX, r3
    78de:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    78e2:	f7fe fac7 	bl	5e74 <ready_thread>
	__asm__ volatile(
    78e6:	f384 8811 	msr	BASEPRI, r4
    78ea:	f3bf 8f6f 	isb	sy
}
    78ee:	bd10      	pop	{r4, pc}

000078f0 <z_unpend_first_thread>:
{
    78f0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    78f2:	f04f 0320 	mov.w	r3, #32
    78f6:	f3ef 8511 	mrs	r5, BASEPRI
    78fa:	f383 8812 	msr	BASEPRI_MAX, r3
    78fe:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7902:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7904:	42a0      	cmp	r0, r4
    7906:	d00d      	beq.n	7924 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    7908:	b134      	cbz	r4, 7918 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    790a:	4620      	mov	r0, r4
    790c:	f7ff ff8c 	bl	7828 <unpend_thread_no_timeout>
    7910:	f104 0018 	add.w	r0, r4, #24
    7914:	f000 f81e 	bl	7954 <z_abort_timeout>
	__asm__ volatile(
    7918:	f385 8811 	msr	BASEPRI, r5
    791c:	f3bf 8f6f 	isb	sy
}
    7920:	4620      	mov	r0, r4
    7922:	bd38      	pop	{r3, r4, r5, pc}
    7924:	2400      	movs	r4, #0
    7926:	e7f7      	b.n	7918 <z_unpend_first_thread+0x28>

00007928 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7928:	4603      	mov	r3, r0
    792a:	b920      	cbnz	r0, 7936 <z_reschedule_irqlock+0xe>
    792c:	f3ef 8205 	mrs	r2, IPSR
    7930:	b90a      	cbnz	r2, 7936 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7932:	f7fa bce7 	b.w	2304 <arch_swap>
    7936:	f383 8811 	msr	BASEPRI, r3
    793a:	f3bf 8f6f 	isb	sy
}
    793e:	4770      	bx	lr

00007940 <z_reschedule_unlocked>:
	__asm__ volatile(
    7940:	f04f 0320 	mov.w	r3, #32
    7944:	f3ef 8011 	mrs	r0, BASEPRI
    7948:	f383 8812 	msr	BASEPRI_MAX, r3
    794c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7950:	f7ff bfea 	b.w	7928 <z_reschedule_irqlock>

00007954 <z_abort_timeout>:
{
    7954:	b510      	push	{r4, lr}
    7956:	f04f 0220 	mov.w	r2, #32
    795a:	f3ef 8411 	mrs	r4, BASEPRI
    795e:	f382 8812 	msr	BASEPRI_MAX, r2
    7962:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7966:	6803      	ldr	r3, [r0, #0]
    7968:	b13b      	cbz	r3, 797a <z_abort_timeout+0x26>
			remove_timeout(to);
    796a:	f7fe fdc5 	bl	64f8 <remove_timeout>
			ret = 0;
    796e:	2000      	movs	r0, #0
	__asm__ volatile(
    7970:	f384 8811 	msr	BASEPRI, r4
    7974:	f3bf 8f6f 	isb	sy
}
    7978:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    797a:	f06f 0015 	mvn.w	r0, #21
    797e:	e7f7      	b.n	7970 <z_abort_timeout+0x1c>

00007980 <z_get_next_timeout_expiry>:
{
    7980:	b510      	push	{r4, lr}
	__asm__ volatile(
    7982:	f04f 0320 	mov.w	r3, #32
    7986:	f3ef 8411 	mrs	r4, BASEPRI
    798a:	f383 8812 	msr	BASEPRI_MAX, r3
    798e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7992:	f7fe fd89 	bl	64a8 <next_timeout>
	__asm__ volatile(
    7996:	f384 8811 	msr	BASEPRI, r4
    799a:	f3bf 8f6f 	isb	sy
}
    799e:	bd10      	pop	{r4, pc}

000079a0 <z_set_timeout_expiry>:
{
    79a0:	b570      	push	{r4, r5, r6, lr}
    79a2:	4604      	mov	r4, r0
    79a4:	460d      	mov	r5, r1
	__asm__ volatile(
    79a6:	f04f 0320 	mov.w	r3, #32
    79aa:	f3ef 8611 	mrs	r6, BASEPRI
    79ae:	f383 8812 	msr	BASEPRI_MAX, r3
    79b2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    79b6:	f7fe fd77 	bl	64a8 <next_timeout>
			      || (ticks <= next_to);
    79ba:	2801      	cmp	r0, #1
    79bc:	dd07      	ble.n	79ce <z_set_timeout_expiry+0x2e>
    79be:	42a0      	cmp	r0, r4
    79c0:	db05      	blt.n	79ce <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    79c2:	42a0      	cmp	r0, r4
    79c4:	4629      	mov	r1, r5
    79c6:	bfa8      	it	ge
    79c8:	4620      	movge	r0, r4
    79ca:	f7fc ff01 	bl	47d0 <sys_clock_set_timeout>
	__asm__ volatile(
    79ce:	f386 8811 	msr	BASEPRI, r6
    79d2:	f3bf 8f6f 	isb	sy
}
    79d6:	bd70      	pop	{r4, r5, r6, pc}

000079d8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    79d8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    79da:	f7fe fe81 	bl	66e0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    79de:	bd08      	pop	{r3, pc}

000079e0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    79e0:	b108      	cbz	r0, 79e6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    79e2:	f7fb ba45 	b.w	2e70 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    79e6:	4770      	bx	lr

000079e8 <k_heap_init>:
{
    79e8:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    79ea:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    79ee:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    79f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	sys_heap_init(&h->heap, mem, bytes);
    79f6:	f7fe bf2a 	b.w	684e <sys_heap_init>

000079fa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    79fa:	4770      	bx	lr
